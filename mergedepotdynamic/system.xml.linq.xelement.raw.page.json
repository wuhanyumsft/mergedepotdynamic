{"content":"    \r\n    <h1 id=\"System_Xml_Linq_XElement\">\r\n      <span class=\"lang-csharp\">XElement</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an XML element.  See <a href=\"../Topic/XElement%20Class%20Overview.md\" data-linktype=\"relative-path\">XElement Class Overview</a> and the Remarks section on this page for usage information and examples.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))]\n[System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)]\npublic class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">System.Xml.Linq.XContainer</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">XElement</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Add_System_Object_\" data-linktype=\"relative-path\">Add(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Add_System_Object___\" data-linktype=\"relative-path\">Add(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_AddFirst_System_Object_\" data-linktype=\"relative-path\">AddFirst(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_AddFirst_System_Object___\" data-linktype=\"relative-path\">AddFirst(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_CreateWriter\" data-linktype=\"relative-path\">CreateWriter()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_DescendantNodes\" data-linktype=\"relative-path\">DescendantNodes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants\" data-linktype=\"relative-path\">Descendants()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Descendants(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Element_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Element(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements\" data-linktype=\"relative-path\">Elements()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Elements(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_FirstNode\" data-linktype=\"relative-path\">FirstNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_LastNode\" data-linktype=\"relative-path\">LastNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Nodes\" data-linktype=\"relative-path\">Nodes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_RemoveNodes\" data-linktype=\"relative-path\">RemoveNodes()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_ReplaceNodes_System_Object_\" data-linktype=\"relative-path\">ReplaceNodes(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_ReplaceNodes_System_Object___\" data-linktype=\"relative-path\">ReplaceNodes(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddAfterSelf_System_Object_\" data-linktype=\"relative-path\">AddAfterSelf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddAfterSelf_System_Object___\" data-linktype=\"relative-path\">AddAfterSelf(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddBeforeSelf_System_Object_\" data-linktype=\"relative-path\">AddBeforeSelf(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_AddBeforeSelf_System_Object___\" data-linktype=\"relative-path\">AddBeforeSelf(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors\" data-linktype=\"relative-path\">Ancestors()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">Ancestors(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CompareDocumentOrder_System_Xml_Linq_XNode_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">CompareDocumentOrder(XNode,XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CreateReader\" data-linktype=\"relative-path\">CreateReader()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_CreateReader_System_Xml_Linq_ReaderOptions_\" data-linktype=\"relative-path\">CreateReader(ReaderOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DeepEquals_System_Xml_Linq_XNode_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">DeepEquals(XNode,XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DocumentOrderComparer\" data-linktype=\"relative-path\">DocumentOrderComparer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf\" data-linktype=\"relative-path\">ElementsAfterSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">ElementsAfterSelf(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf\" data-linktype=\"relative-path\">ElementsBeforeSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf_System_Xml_Linq_XName_\" data-linktype=\"relative-path\">ElementsBeforeSelf(XName)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_EqualityComparer\" data-linktype=\"relative-path\">EqualityComparer</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_IsAfter_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">IsAfter(XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_IsBefore_System_Xml_Linq_XNode_\" data-linktype=\"relative-path\">IsBefore(XNode)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NextNode\" data-linktype=\"relative-path\">NextNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NodesAfterSelf\" data-linktype=\"relative-path\">NodesAfterSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_NodesBeforeSelf\" data-linktype=\"relative-path\">NodesBeforeSelf()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_PreviousNode\" data-linktype=\"relative-path\">PreviousNode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReadFrom_System_Xml_XmlReader_\" data-linktype=\"relative-path\">ReadFrom(XmlReader)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_Remove\" data-linktype=\"relative-path\">Remove()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReplaceWith_System_Object_\" data-linktype=\"relative-path\">ReplaceWith(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ReplaceWith_System_Object___\" data-linktype=\"relative-path\">ReplaceWith(Object[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_ToString_System_Xml_Linq_SaveOptions_\" data-linktype=\"relative-path\">ToString(SaveOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_AddAnnotation_System_Object_\" data-linktype=\"relative-path\">AddAnnotation(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotation_System_Type_\" data-linktype=\"relative-path\">Annotation(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotation__1\" data-linktype=\"relative-path\">Annotation&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotations_System_Type_\" data-linktype=\"relative-path\">Annotations(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Annotations__1\" data-linktype=\"relative-path\">Annotations&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_BaseUri\" data-linktype=\"relative-path\">BaseUri</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Document\" data-linktype=\"relative-path\">Document</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Parent\" data-linktype=\"relative-path\">Parent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_RemoveAnnotations_System_Type_\" data-linktype=\"relative-path\">RemoveAnnotations(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_RemoveAnnotations__1\" data-linktype=\"relative-path\">RemoveAnnotations&lt;T&gt;()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_HasLineInfo\" data-linktype=\"relative-path\">IXmlLineInfo.HasLineInfo()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_LineNumber\" data-linktype=\"relative-path\">IXmlLineInfo.LineNumber</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_System_Xml_IXmlLineInfo_LinePosition\" data-linktype=\"relative-path\">IXmlLineInfo.LinePosition</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Xml.Linq/XLinq.cs#3367036406d1344a\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> This class represents an XML element, the fundamental XML construct.  See <a href=\"../Topic/XElement%20Class%20Overview.md\" data-linktype=\"relative-path\">XElement Class Overview</a> for other usage information.  </p>\n<p> An element has an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, optionally one or more attributes, and can optionally contain content (for more information, see <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Nodes_\" data-linktype=\"relative-path\">Nodes</a>).  </p>\n<p> An XElement can contain the following types of content:  </p>\n<ul>\n<li><p>XElement  </p>\n</li>\n<li><a class=\"xref\" href=\"system.xml.linq.xcomment\" data-linktype=\"relative-path\">XComment</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.linq.xprocessinginstruction\" data-linktype=\"relative-path\">XProcessingInstruction</a>  \n</li>\n<li><a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a>  \n\n<p>For details about the valid content of an XElement, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p>XElement derives from <a class=\"xref\" href=\"system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>, which derives from <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>.  </p>\n<p>Some XElement methods can be used from XAML. For more information, see <a href=\"../Topic/LINQ%20to%20XML%20Dynamic%20Properties.md\" data-linktype=\"relative-path\">LINQ to XML Dynamic Properties</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement__ctor_System_Xml_Linq_XElement_\" data-linktype=\"self-bookmark\">XElement(XElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from another <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement__ctor_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">XElement(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class with the specified name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement__ctor_System_Xml_Linq_XStreamingElement_\" data-linktype=\"self-bookmark\">XElement(XStreamingElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from an <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement__ctor_System_Xml_Linq_XName_System_Object_\" data-linktype=\"self-bookmark\">XElement(XName,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class with the specified name and content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement__ctor_System_Xml_Linq_XName_System_Object___\" data-linktype=\"self-bookmark\">XElement(XName,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class with the specified name and content.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_EmptySequence\" data-linktype=\"self-bookmark\">EmptySequence</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an empty collection of elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_FirstAttribute\" data-linktype=\"self-bookmark\">FirstAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the first attribute of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_HasAttributes\" data-linktype=\"self-bookmark\">HasAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element has at least one attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_HasElements\" data-linktype=\"self-bookmark\">HasElements</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element has at least one child element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_IsEmpty\" data-linktype=\"self-bookmark\">IsEmpty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether this element contains no content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_LastAttribute\" data-linktype=\"self-bookmark\">LastAttribute</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the last attribute of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_NodeType\" data-linktype=\"self-bookmark\">NodeType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the node type for this node.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Value\" data-linktype=\"self-bookmark\">Value</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the concatenated text contents of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_AncestorsAndSelf\" data-linktype=\"self-bookmark\">AncestorsAndSelf()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of elements that contain this element, and the ancestors of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_AncestorsAndSelf_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">AncestorsAndSelf(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Attribute_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Attribute(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that has the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Attributes\" data-linktype=\"self-bookmark\">Attributes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of attributes of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Attributes_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">Attributes(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of attributes of this element. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_DescendantNodesAndSelf\" data-linktype=\"self-bookmark\">DescendantNodesAndSelf()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_DescendantsAndSelf\" data-linktype=\"self-bookmark\">DescendantsAndSelf()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_DescendantsAndSelf_System_Xml_Linq_XName_\" data-linktype=\"self-bookmark\">DescendantsAndSelf(XName)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_GetDefaultNamespace\" data-linktype=\"self-bookmark\">GetDefaultNamespace()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the default <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_GetNamespaceOfPrefix_System_String_\" data-linktype=\"self-bookmark\">GetNamespaceOfPrefix(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the namespace associated with a particular prefix for this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_GetPrefixOfNamespace_System_Xml_Linq_XNamespace_\" data-linktype=\"self-bookmark\">GetPrefixOfNamespace(XNamespace)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the prefix associated with a namespace for this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_IO_Stream_\" data-linktype=\"self-bookmark\">Load(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> instance by using the specified stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_IO_TextReader_\" data-linktype=\"self-bookmark\">Load(TextReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_String_\" data-linktype=\"self-bookmark\">Load(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">Load(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_IO_Stream_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(Stream,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_IO_TextReader_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(TextReader,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>, optionally preserving white space and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_String_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(String,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a file, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Load_System_Xml_XmlReader_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Load(XmlReader,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Load an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Parse_System_String_System_Xml_Linq_LoadOptions_\" data-linktype=\"self-bookmark\">Parse(String,LoadOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Load an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML, optionally preserving white space and retaining line information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_RemoveAll\" data-linktype=\"self-bookmark\">RemoveAll()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes nodes and attributes from this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_RemoveAttributes\" data-linktype=\"self-bookmark\">RemoveAttributes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the attributes of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_ReplaceAll_System_Object_\" data-linktype=\"self-bookmark\">ReplaceAll(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the child nodes and the attributes of this element with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_ReplaceAll_System_Object___\" data-linktype=\"self-bookmark\">ReplaceAll(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the child nodes and the attributes of this element with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_ReplaceAttributes_System_Object_\" data-linktype=\"self-bookmark\">ReplaceAttributes(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the attributes of this element with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_ReplaceAttributes_System_Object___\" data-linktype=\"self-bookmark\">ReplaceAttributes(Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the attributes of this element with the specified content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_IO_Stream_\" data-linktype=\"self-bookmark\">Save(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_IO_TextWriter_\" data-linktype=\"self-bookmark\">Save(TextWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_String_\" data-linktype=\"self-bookmark\">Save(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this element to a file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">Save(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(Stream,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(TextWriter,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_Save_System_String_System_Xml_Linq_SaveOptions_\" data-linktype=\"self-bookmark\">Save(String,SaveOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Serialize this element to a file, optionally disabling formatting.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_SetAttributeValue_System_Xml_Linq_XName_System_Object_\" data-linktype=\"self-bookmark\">SetAttributeValue(XName,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of an attribute, adds an attribute, or removes an attribute.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_SetElementValue_System_Xml_Linq_XName_System_Object_\" data-linktype=\"self-bookmark\">SetElementValue(XName,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of a child element, adds a child element, or removes a child element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_SetValue_System_Object_\" data-linktype=\"self-bookmark\">SetValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of this element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_WriteTo_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">WriteTo(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Write this element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Boolean_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_DateTime_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_DateTimeOffset_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Decimal_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Double_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Guid_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Int32_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Int64_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Boolean__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_DateTime__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_DateTimeOffset__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Decimal__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Double__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Guid__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Int32__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Int64__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Single__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_TimeSpan__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_UInt32__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_UInt64__\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Single_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_String_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_TimeSpan_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_UInt32_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_UInt64_\" data-linktype=\"self-bookmark\">op_Explicit(XElement)</a></div>\r\n          </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_GetSchema\" data-linktype=\"self-bookmark\">IXmlSerializable.GetSchema()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an XML schema definition that describes the XML representation of this object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_\" data-linktype=\"self-bookmark\">IXmlSerializable.ReadXml(XmlReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Generates an object from its XML representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_\" data-linktype=\"self-bookmark\">IXmlSerializable.WriteXml(XmlWriter)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an object into its XML representation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement__ctor_System_Xml_Linq_XElement_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XElement(XElement)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from another <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XElement (System.Xml.Linq.XElement other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object to copy from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor makes a deep copy of an element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, creates a clone of the tree, and then calls <a class=\"xref\" href=\"system.xml.linq.xnode#System_Xml_Linq_XNode_DeepEquals_\" data-linktype=\"relative-path\">DeepEquals</a>, which tests whether the two XML trees are equal.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2)  \n);  \n\n// Create a clone of the tree.  \nXElement treeClone = new XElement(xmlTree);  \n\nConsole.WriteLine(&quot;xmlTree = treeClone: {0}&quot;, XNode.DeepEquals(xmlTree, treeClone));  \n\n// Do some work with xmlTree, perhaps pass it to other methods.  \nxmlTree.Add(new XElement(&quot;Child3&quot;, 3));  \n\nConsole.WriteLine(&quot;xmlTree = treeClone: {0}&quot;, XNode.DeepEquals(xmlTree, treeClone));\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n        &lt;Root Att1=&quot;1&quot;&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n        &lt;/Root&gt;  \n\n&#39; Create a clone of the tree.  \nDim treeClone As XElement = New XElement(xmlTree)  \n\nConsole.WriteLine(&quot;xmlTree = treeClone: {0}&quot;, XNode.DeepEquals(xmlTree, treeClone))  \n\n&#39; Do some work with xmlTree, perhaps pass it to other methods.  \nxmlTree.Add(New XElement(&quot;Child3&quot;, 3))  \n\nConsole.WriteLine(&quot;xmlTree = treeClone: {0}&quot;, XNode.DeepEquals(xmlTree, treeClone))\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                xmlTree = treeClone: True  \nxmlTree = treeClone: False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement__ctor_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XElement(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class with the specified name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XElement (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an element with no content and no attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. When creating an element in a namespace, typical use is to use the addition operator overload with an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and a string to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with no content.  </p>\n<pre><code class=\"lang-c#\">\n                XElement el = new XElement(&quot;Root&quot;);  \nConsole.WriteLine(el);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim el As XElement = &lt;Root/&gt;  \nConsole.WriteLine(el)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root /&gt;\n</code></pre><p> The following example creates an element in a namespace with no content. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code>\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim root = &lt;Root/&gt;  \n        Console.WriteLine(root)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root xmlns=&quot;http://www.adventure-works.com&quot; /&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement__ctor_System_Xml_Linq_XStreamingElement_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XElement(XStreamingElement)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class from an <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XElement (System.Xml.Linq.XStreamingElement other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> that contains unevaluated queries that will be iterated for the contents of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor iterates through the contents of the specified <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>, and creates an element with its contents.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a source XML tree, and then creates an <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> from a query on the source XML tree. It then serializes the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to the console, adds a new element to the source XML tree, and then serializes the <a class=\"xref\" href=\"system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> again. You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.  </p>\n<pre><code class=\"lang-c#\">\n                XElement src = new XElement(&quot;Root&quot;,  \n                   new XElement(&quot;Child1&quot;, 1),  \n                   new XElement(&quot;Child2&quot;, 2),  \n                   new XElement(&quot;Child3&quot;, 3)  \n               );  \nXStreamingElement xse = new XStreamingElement(&quot;NewRoot&quot;,  \n                            from el in src.Elements()  \n                            where (int)el &gt;= 2  \n                            select el  \n                        );  \nConsole.WriteLine(xse);  \nsrc.Add(new XElement(&quot;Child4&quot;, 4));  \nConsole.WriteLine(&quot;----&quot;);  \nConsole.WriteLine(xse);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim src As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n        &lt;/Root&gt;  \nDim xse As XStreamingElement = New XStreamingElement(&quot;NewRoot&quot;, _  \n        From el In src.Elements() _  \n        Where (CInt(el) &gt;= 2) _  \n        Select el _  \n)  \nConsole.WriteLine(xse)  \nsrc.Add(New XElement(&quot;Child4&quot;, 4))  \nConsole.WriteLine(&quot;----&quot;)  \nConsole.WriteLine(xse)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;NewRoot&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n&lt;/NewRoot&gt;  \n----  \n&lt;NewRoot&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n&lt;/NewRoot&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement__ctor_System_Xml_Linq_XName_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XElement(XName,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class with the specified name and content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XElement (System.Xml.Linq.XName name, object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the element name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contents of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an element with the specified content and attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<p> When creating an element in a namespace, typical use is to use the addition operator overload with an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and a string to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<p> For details about the valid content that can be passed to this constructor, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree. The content of the new element comes from a LINQ query.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5),  \n    new XElement(&quot;Child6&quot;, 6)  \n);  \n\nXElement xmlTree2 = new XElement(&quot;Root&quot;,  \n    from el in xmlTree1.Elements()  \n    where((int)el &gt;= 3 &amp;&amp; (int)el &lt;= 5)  \n    select el  \n);  \nConsole.WriteLine(xmlTree2);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n            &lt;Child6&gt;6&lt;/Child6&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree2 As XElement = _  \n    &lt;Root&gt;  \n        &lt;%= From el In xmlTree1.Elements() _  \n            Where el.Value &gt;= 3 And el.Value &lt;= 5 _  \n            Select el %&gt;  \n    &lt;/Root&gt;  \n\nConsole.WriteLine(xmlTree2)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n&lt;/Root&gt;\n</code></pre><p> The following example creates an XML tree with a variety of types of content.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root;  \n\n// String content:  \nroot = new XElement(&quot;Root&quot;, &quot;Some text&quot;);  \nConsole.WriteLine(root);  \n\n// XElement object content:  \nroot = new XElement(&quot;Root&quot;,   \n    new XElement(&quot;NewChild&quot;, &quot;n&quot;)  \n);  \nConsole.WriteLine(root);  \n\n// XAttribute object content:  \nroot = new XElement(&quot;Root&quot;,   \n    new XAttribute(&quot;NewAttribute&quot;, &quot;n&quot;)  \n);  \nConsole.WriteLine(root);  \n\n// Double content:  \ndouble dbl = 12.345;  \nroot = new XElement(&quot;Root&quot;, dbl);  \nConsole.WriteLine(root);  \n\n// DateTime content:  \nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \nroot = new XElement(&quot;Root&quot;, dt);  \nConsole.WriteLine(root);  \n\n// String array content:  \n// Any collection other than a collection of XElement or XAttribute objects  \n// are converted to strings. The strings are concatenated and added.  \nstring[] stringArray = {  \n    &quot;abc&quot;,  \n    &quot;def&quot;,  \n    &quot;ghi&quot;  \n};  \nroot = new XElement(&quot;Root&quot;, stringArray);  \nConsole.WriteLine(root);  \n\n// XElement object array content:  \nXElement[] ellArray = {  \n    new XElement(&quot;NewChild1&quot;, 1),  \n    new XElement(&quot;NewChild2&quot;, 2),  \n    new XElement(&quot;NewChild3&quot;, 3)  \n};  \nroot = new XElement(&quot;Root&quot;, ellArray);  \nConsole.WriteLine(root);  \n\n// XAttribute object array content:  \nXAttribute[] attArray = {  \n    new XAttribute(&quot;NewAtt1&quot;, 1),  \n    new XAttribute(&quot;NewAtt2&quot;, 2),  \n    new XAttribute(&quot;NewAtt3&quot;, 3)  \n};  \nroot = new XElement(&quot;Root&quot;, attArray);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement  \n\n&#39; String content:  \nroot = &lt;Root&gt;Some text&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XElement object content:  \nroot = &lt;Root&gt;  \n           &lt;NewChild&gt;n&lt;/NewChild&gt;  \n       &lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XAttribute object content:  \nroot = &lt;Root NewAttribute=&quot;n&quot;/&gt;  \nConsole.WriteLine(root)  \n\n&#39; Double content:  \nDim dbl As Double = 12.345  \nroot = &lt;Root&gt;&lt;%= dbl %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; DateTime content:  \nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \nroot = &lt;Root&gt;&lt;%= dt %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; String array content:  \n&#39; Any collection other than a collection of XElement or XAttribute objects  \n&#39; are converted to strings. The strings are concatenated and added.  \n\nDim stringArray As String() = { _  \n    &quot;abc&quot;, _  \n    &quot;def&quot;, _  \n    &quot;ghi&quot; _  \n}  \nroot = &lt;Root&gt;&lt;%= stringArray %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XElement object array content:  \nDim ellArray As XElement() = { _  \n    &lt;NewChild1&gt;1&lt;/NewChild1&gt;, _  \n    &lt;NewChild2&gt;2&lt;/NewChild2&gt;, _  \n    &lt;NewChild3&gt;3&lt;/NewChild3&gt; _  \n}  \n\nroot = &lt;Root&gt;&lt;%= ellArray %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XAttribute object array content  \nDim attArray As XAttribute() = { _  \n    New XAttribute(&quot;NewAtt1&quot;, 1), _  \n    New XAttribute(&quot;NewAtt2&quot;, 2), _  \n    New XAttribute(&quot;NewAtt3&quot;, 3) _  \n}  \nroot = &lt;Root&gt;&lt;%= attArray %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root&gt;Some text&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;NewChild&gt;n&lt;/NewChild&gt;  \n&lt;/Root&gt;  \n&lt;Root NewAttribute=&quot;n&quot; /&gt;  \n&lt;Root&gt;12.345&lt;/Root&gt;  \n&lt;Root&gt;2006-10-06T12:30:00&lt;/Root&gt;  \n&lt;Root&gt;abcdefghi&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;NewChild1&gt;1&lt;/NewChild1&gt;  \n  &lt;NewChild2&gt;2&lt;/NewChild2&gt;  \n  &lt;NewChild3&gt;3&lt;/NewChild3&gt;  \n&lt;/Root&gt;  \n&lt;Root NewAtt1=&quot;1&quot; NewAtt2=&quot;2&quot; NewAtt3=&quot;3&quot; /&gt;\n</code></pre><p> The following example creates an XML tree in a namespace.  </p>\n<pre><code class=\"lang-c#\">\n                // Create an XML tree in a namespace.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child&quot;, &quot;child content&quot;)  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Create an XML tree in a namespace.  \nDim root As XElement = _   \n    &lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n        &lt;Child&gt;child content&lt;/Child&gt;  \n    &lt;/Root&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child&gt;child content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre><p> The following example creates an XML tree with nested namespaces.  </p>\n<pre><code class=\"lang-c#\">\n                // Create an XML tree with nested namespaces.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXNamespace fc = &quot;www.fourthcoffee.com&quot;;  \nXDocument root = new XDocument(  \n    new XDeclaration(&quot;1.0&quot;, &quot;utf-8&quot;, &quot;yes&quot;),  \n    new XElement(aw + &quot;Root&quot;,  \n        new XElement(fc + &quot;Child&quot;,  \n            new XElement(aw + &quot;DifferentChild&quot;, &quot;other content&quot;)  \n        )  \n    )  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Create an XML tree with nested namespaces.  \nDim root As XDocument = _   \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n        &lt;Child xmlns=&#39;www.fourthcoffee.com&#39;&gt;  \n        &lt;DifferentChild xmlns=&#39;http://www.adventure-works.com&#39;&gt;other content&lt;/DifferentChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child xmlns=&quot;www.fourthcoffee.com&quot;&gt;  \n    &lt;DifferentChild xmlns=&quot;http://www.adventure-works.com&quot;&gt;other content&lt;/DifferentChild&gt;  \n  &lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement__ctor_System_Xml_Linq_XName_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XElement(XName,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class with the specified name and content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public XElement (System.Xml.Linq.XName name, object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the element name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial content of the element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor creates an element with the specified content and attributes.  </p>\n<p> There is an implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. Typical use of this constructor is to specify a string as the parameter instead of creating a new <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.  </p>\n<p> When creating an element in a namespace, typical use is to use the addition operator overload with an <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> and a string to create an <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<p> For details about the valid content that can be passed to this constructor, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree. The content of the new element comes from a LINQ query.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5),  \n    new XElement(&quot;Child6&quot;, 6)  \n);  \n\nXElement xmlTree2 = new XElement(&quot;Root&quot;,  \n    from el in xmlTree1.Elements()  \n    where((int)el &gt;= 3 &amp;&amp; (int)el &lt;= 5)  \n    select el  \n);  \nConsole.WriteLine(xmlTree2);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n            &lt;Child6&gt;6&lt;/Child6&gt;  \n        &lt;/Root&gt;  \n\nDim xmlTree2 As XElement = _   \n    &lt;Root&gt;  \n        &lt;%= From el In xmlTree1.Elements() _  \n            Where el.Value &gt;= 3 And el.Value &lt;= 5 _  \n            Select el %&gt;  \n    &lt;/Root&gt;  \n\nConsole.WriteLine(xmlTree2)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n&lt;/Root&gt;\n</code></pre><p> The following example creates an XML tree with a variety of types of content.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root;  \n\n// String content:  \nroot = new XElement(&quot;Root&quot;, &quot;Some text&quot;);  \nConsole.WriteLine(root);  \n\n// XElement object content:  \nroot = new XElement(&quot;Root&quot;,   \n    new XElement(&quot;NewChild&quot;, &quot;n&quot;)  \n);  \nConsole.WriteLine(root);  \n\n// XAttribute object content:  \nroot = new XElement(&quot;Root&quot;,   \n    new XAttribute(&quot;NewAttribute&quot;, &quot;n&quot;)  \n);  \nConsole.WriteLine(root);  \n\n// Double content:  \ndouble dbl = 12.345;  \nroot = new XElement(&quot;Root&quot;, dbl);  \nConsole.WriteLine(root);  \n\n// DateTime content:  \nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \nroot = new XElement(&quot;Root&quot;, dt);  \nConsole.WriteLine(root);  \n\n// String array content:  \n// Any collection other than a collection of XElement or XAttribute objects  \n// are converted to strings. The strings are concatenated and added.  \nstring[] stringArray = {  \n    &quot;abc&quot;,  \n    &quot;def&quot;,  \n    &quot;ghi&quot;  \n};  \nroot = new XElement(&quot;Root&quot;, stringArray);  \nConsole.WriteLine(root);  \n\n// XElement object array content:  \nXElement[] ellArray = {  \n    new XElement(&quot;NewChild1&quot;, 1),  \n    new XElement(&quot;NewChild2&quot;, 2),  \n    new XElement(&quot;NewChild3&quot;, 3)  \n};  \nroot = new XElement(&quot;Root&quot;, ellArray);  \nConsole.WriteLine(root);  \n\n// XAttribute object array content:  \nXAttribute[] attArray = {  \n    new XAttribute(&quot;NewAtt1&quot;, 1),  \n    new XAttribute(&quot;NewAtt2&quot;, 2),  \n    new XAttribute(&quot;NewAtt3&quot;, 3)  \n};  \nroot = new XElement(&quot;Root&quot;, attArray);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement  \n\n&#39; String content:  \nroot = &lt;Root&gt;Some text&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XElement object content:  \nroot = &lt;Root&gt;  \n           &lt;NewChild&gt;n&lt;/NewChild&gt;  \n       &lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XAttribute object content:  \nroot = &lt;Root NewAttribute=&quot;n&quot;/&gt;  \nConsole.WriteLine(root)  \n\n&#39; Double content:  \nDim dbl As Double = 12.345  \nroot = &lt;Root&gt;&lt;%= dbl %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; DateTime content:  \nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \nroot = &lt;Root&gt;&lt;%= dt %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; String array content:  \n&#39; Any collection other than a collection of XElement or XAttribute objects  \n&#39; are converted to strings. The strings are concatenated and added.  \n\nDim stringArray As String() = { _  \n    &quot;abc&quot;, _  \n    &quot;def&quot;, _  \n    &quot;ghi&quot; _  \n}  \nroot = &lt;Root&gt;&lt;%= stringArray %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XElement object array content:  \nDim ellArray As XElement() = { _  \n    &lt;NewChild1&gt;1&lt;/NewChild1&gt;, _  \n    &lt;NewChild2&gt;2&lt;/NewChild2&gt;, _  \n    &lt;NewChild3&gt;3&lt;/NewChild3&gt; _  \n}  \n\nroot = &lt;Root&gt;&lt;%= ellArray %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)  \n\n&#39; XAttribute object array content  \nDim attArray As XAttribute() = { _  \n    New XAttribute(&quot;NewAtt1&quot;, 1), _  \n    New XAttribute(&quot;NewAtt2&quot;, 2), _  \n    New XAttribute(&quot;NewAtt3&quot;, 3) _  \n}  \nroot = &lt;Root&gt;&lt;%= attArray %&gt;&lt;/Root&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root&gt;Some text&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;NewChild&gt;n&lt;/NewChild&gt;  \n&lt;/Root&gt;  \n&lt;Root NewAttribute=&quot;n&quot; /&gt;  \n&lt;Root&gt;12.345&lt;/Root&gt;  \n&lt;Root&gt;2006-10-06T12:30:00&lt;/Root&gt;  \n&lt;Root&gt;abcdefghi&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;NewChild1&gt;1&lt;/NewChild1&gt;  \n  &lt;NewChild2&gt;2&lt;/NewChild2&gt;  \n  &lt;NewChild3&gt;3&lt;/NewChild3&gt;  \n&lt;/Root&gt;  \n&lt;Root NewAtt1=&quot;1&quot; NewAtt2=&quot;2&quot; NewAtt3=&quot;3&quot; /&gt;\n</code></pre><p> The following example creates an XML tree in a namespace.  </p>\n<pre><code class=\"lang-c#\">\n                // Create an XML tree in a namespace.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child&quot;, &quot;child content&quot;)  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Create an XML tree in a namespace.  \nDim root As XElement = _   \n    &lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n        &lt;Child&gt;child content&lt;/Child&gt;  \n    &lt;/Root&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child&gt;child content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre><p> The following example creates an XML tree with nested namespaces.  </p>\n<pre><code class=\"lang-c#\">\n                // Create an XML tree with nested namespaces.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXNamespace fc = &quot;www.fourthcoffee.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XElement(fc + &quot;Child&quot;,  \n        new XElement(aw + &quot;DifferentChild&quot;, &quot;other content&quot;)  \n    )  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                &#39; Create an XML tree with nested namespaces.  \nDim root As XDocument = _   \n    &lt;?xml version=&#39;1.0&#39;?&gt;  \n    &lt;Root xmlns=&#39;http://www.adventure-works.com&#39;&gt;  \n        &lt;Child xmlns=&#39;www.fourthcoffee.com&#39;&gt;  \n        &lt;DifferentChild xmlns=&#39;http://www.adventure-works.com&#39;&gt;other content&lt;/DifferentChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child xmlns=&quot;www.fourthcoffee.com&quot;&gt;  \n    &lt;DifferentChild xmlns=&quot;http://www.adventure-works.com&quot;&gt;other content&lt;/DifferentChild&gt;  \n  &lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_EmptySequence\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_EmptySequence_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EmptySequence</div>        \r\n          </div>\r\n    \r\n            <p>Gets an empty collection of elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains an empty collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is typically used by class implementers when writing a method that returns a collection of elements. If the method must return no elements, it can use this property to get an empty collection of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> objects.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_FirstAttribute\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_FirstAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Gets the first attribute of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XAttribute FirstAttribute { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that contains the first attribute of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Attributes are stored in the element in the order that they were added to the element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3)  \n);  \nConsole.WriteLine(xmlTree.FirstAttribute);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = &lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; Att3=&quot;3&quot;/&gt;  \nConsole.WriteLine(xmlTree.FirstAttribute)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nAtt1=&quot;1&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_HasAttributes\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_HasAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element has at least one attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element has at least one attribute; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1)  \n);  \nConsole.WriteLine(xmlTree1.HasAttributes);  \nXElement xmlTree2 = new XElement(&quot;Root&quot;);  \nConsole.WriteLine(xmlTree2.HasAttributes);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = &lt;Root Att1=&quot;1&quot;/&gt;  \nConsole.WriteLine(xmlTree1.HasAttributes)  \n\nDim xmlTree2 As XElement = &lt;Root/&gt;  \nConsole.WriteLine(xmlTree2.HasAttributes)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>True  \nFalse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_HasElements\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_HasElements_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasElements</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element has at least one child element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HasElements { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element has at least one child element; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, 1)  \n);  \nConsole.WriteLine(xmlTree1.HasElements);  \nXElement xmlTree2 = new XElement(&quot;Root&quot;, &quot;contents&quot;);  \nConsole.WriteLine(xmlTree2.HasElements);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;/Root&gt;  \nConsole.WriteLine(xmlTree1.HasElements)  \n\nDim xmlTree2 As XElement = &lt;Root&gt;contents&lt;/Root&gt;  \nConsole.WriteLine(xmlTree2.HasElements)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                True  \nFalse\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_IsEmpty\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_IsEmpty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmpty</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether this element contains no content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsEmpty { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this element contains no content; otherwise <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element. It has content with no length. Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a variety of XML trees, and shows the value of this property with each tree.  </p>\n<pre><code class=\"lang-c#\">\n                XElement el1 = new XElement(&quot;Root&quot;);  \nConsole.WriteLine(el1);  \nConsole.WriteLine(el1.IsEmpty);  \nConsole.WriteLine();  \nXElement el2 = new XElement(&quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(el2);  \nConsole.WriteLine(el2.IsEmpty);  \nConsole.WriteLine();  \nXElement el3 = new XElement(&quot;Root&quot;, &quot;&quot;);  \nConsole.WriteLine(el3);  \nConsole.WriteLine(el3.IsEmpty);  \nConsole.WriteLine();  \nel3.ReplaceAll(null);  \nConsole.WriteLine(el3);  \nConsole.WriteLine(el3.IsEmpty);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim el1 As XElement = &lt;Root/&gt;  \nConsole.WriteLine(el1)  \nConsole.WriteLine(el1.IsEmpty)  \nConsole.WriteLine()  \nDim el2 As XElement = &lt;Root&gt;content&lt;/Root&gt;  \nConsole.WriteLine(el2)  \nConsole.WriteLine(el2.IsEmpty)  \nConsole.WriteLine()  \nDim el3 As XElement = &lt;Root&gt;&lt;/Root&gt;  \nConsole.WriteLine(el3)  \nConsole.WriteLine(el3.IsEmpty)  \nConsole.WriteLine()  \nel3.ReplaceAll(Nothing)  \nConsole.WriteLine(el3)  \nConsole.WriteLine(el3.IsEmpty)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root /&gt;  \nTrue  \n\n&lt;Root&gt;content&lt;/Root&gt;  \nFalse  \n\n&lt;Root&gt;&lt;/Root&gt;  \nFalse  \n\n&lt;Root /&gt;  \nTrue\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_LastAttribute\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_LastAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LastAttribute</div>        \r\n          </div>\r\n    \r\n            <p>Gets the last attribute of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XAttribute LastAttribute { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that contains the last attribute of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Attributes are stored in the element in the order that they were added to the element.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree with three attributes. It then writes the last attribute as output.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3)  \n);  \nConsole.WriteLine(xmlTree.LastAttribute);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = &lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; Att3=&quot;3&quot;/&gt;  \nConsole.WriteLine(xmlTree.LastAttribute)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nAtt3=&quot;3&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Name\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XName Name { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting this property will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property to determine the name of an element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement el1 = new XElement(&quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(el1.Name);  \n\nXNamespace ns = &quot;http://www.adventure-works.com&quot;;  \nXElement el2 = new XElement(ns + &quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(el2.Name);  \nConsole.WriteLine(el2.Name.Namespace);  \nConsole.WriteLine(el2.Name.LocalName);  \nel2.Name = ns + &quot;NewName&quot;;  \nConsole.WriteLine(el2.Name);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim el1 As XElement = &lt;Root&gt;content&lt;/Root&gt;  \n        Console.WriteLine(el1.Name)  \n\n        Dim el2 As XElement = &lt;aw:Root&gt;content&lt;/aw:Root&gt;  \n        Console.WriteLine(el2.Name)  \n        Console.WriteLine(el2.Name.Namespace)  \n        Console.WriteLine(el2.Name.LocalName)  \n        Dim aw as XNamespace = GetXmlNamespace(aw)  \n        el2.Name = aw + &quot;NewName&quot;  \n        Console.WriteLine(el2.Name)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Root  \n{http://www.adventure-works.com}Root  \nhttp://www.adventure-works.com  \nRoot  \n{http://www.adventure-works.com}NewName\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_NodeType\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_NodeType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NodeType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the node type for this node.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Xml.XmlNodeType NodeType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a></div>\r\n                  </div>\r\n                  <p>The node type. For <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> objects, this value is <a class=\"xref\" href=\"system.xml.xmlnodetype\" data-linktype=\"relative-path\">XmlNodeType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because all classes that derive from <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a> contain a <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_NodeType_\" data-linktype=\"relative-path\">NodeType</a> property, you can write code that operates on collections of concrete subclass of <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>. Your code can then test for the node type of each node in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property to print the node type of an element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement el1 = new XElement(&quot;Root&quot;, &quot;content&quot;);  \nConsole.WriteLine(el1.NodeType);  \nConsole.WriteLine();\n</code></pre><pre><code class=\"lang-vb\">\n                Dim el1 As XElement = &lt;Root&gt;content&lt;/Root&gt;  \nConsole.WriteLine(el1.NodeType.ToString())  \nConsole.WriteLine()\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nElement\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Value\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Value_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Value</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the concatenated text contents of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Value { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Using this property, you can get or set the value of an element.  </p>\n<p> Setting this property will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.  </p>\n<p> If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as <code>string</code> or <a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a> of <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>. If the element does not exist, the nullable type is set to <code>null</code>. By contrast, if you want to use this property, you must make sure that the <a class=\"xref\" href=\"system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Element_\" data-linktype=\"relative-path\">Element</a> method does not return <code>null</code> before you access this property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this property to retrieve the text of an element with mixed content.  </p>\n<pre><code class=\"lang-c#\">\n                XElement el = XElement.Parse(&quot;&lt;Root&gt;This is &lt;b&gt;mixed&lt;/b&gt; content&lt;/Root&gt;&quot;);  \nConsole.WriteLine(&quot;{0}&quot;, el.Value);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim el As XElement = &lt;Root&gt;This is &lt;b&gt;mixed&lt;/b&gt; content&lt;/Root&gt;  \nConsole.WriteLine(&quot;{0}&quot;, el.Value)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nThis is mixed content\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_AncestorsAndSelf\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_AncestorsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AncestorsAndSelf()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of elements that contain this element, and the ancestors of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> of elements that contain this element, and the ancestors of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements in the returned collection are in reverse document order.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree. It then finds the <code>GrandChild</code> element, and then prints the ancestors of it.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nXElement gc = xmlTree.Element(&quot;Child&quot;).Element(&quot;GrandChild&quot;);  \nIEnumerable&lt;XElement&gt; aas =  \n    from el in gc.AncestorsAndSelf()  \n    select el;  \nforeach (XElement el in aas)  \n    Console.WriteLine(el.Name);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child&gt;  \n            &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim GC As XElement = xmlTree.&lt;Child&gt;.&lt;GrandChild&gt;(0)  \n\nDim aas As IEnumerable(Of XElement) = _  \n    From el In GC.AncestorsAndSelf() _  \n    Select el  \n\nFor Each el In aas  \n    Console.WriteLine(el.Name)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                GrandChild  \nChild  \nRoot\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_AncestorsAndSelf_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_AncestorsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AncestorsAndSelf(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contain this element, and the ancestors of this element. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements in the returned collection are in reverse document order.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this .  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nXElement gc = xmlTree.Element(&quot;Child&quot;).Element(&quot;GrandChild&quot;);  \nIEnumerable&lt;XElement&gt; aas = gc.AncestorsAndSelf(&quot;Child&quot;);  \nforeach (XElement el in aas)  \n    Console.WriteLine(el.Name);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child&gt;  \n            &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim GC As XElement = xmlTree.&lt;Child&gt;.&lt;GrandChild&gt;(0)  \nDim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf(&quot;Child&quot;)  \nFor Each el In aas  \n    Console.WriteLine(el.Name)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nChild\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Attribute_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Attribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attribute(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that has the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> of the <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that has the specified <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>; <code>null</code> if there is no attribute with the specified name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Some  return collections of elements or attributes. This method returns only a single attribute. Sometimes this is referred to as a <em>singleton</em> (in contrast to a <em>collection</em>).  </p>\n<p> Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with an attribute. It then retrieves the attribute using this method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att&quot;, &quot;attribute content&quot;)  \n);  \nXAttribute att = xmlTree.Attribute(&quot;Att&quot;);  \nConsole.WriteLine(att);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = &lt;Root Att=&quot;attribute content&quot;/&gt;  \n\nDim att As XAttribute = xmlTree.Attribute(&quot;Att&quot;)  \nConsole.WriteLine(att)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nAtt=&quot;attribute content&quot;\n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XAttribute(aw + &quot;Att&quot;, &quot;attribute content&quot;)  \n);  \nXAttribute att = xmlTree.Attribute(aw + &quot;Att&quot;);  \nConsole.WriteLine(att);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = &lt;aw:Root aw:Att=&quot;attribute content&quot;/&gt;  \n\n        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + &quot;Att&quot;)  \n        Console.WriteLine(att)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\naw:Att=&quot;attribute content&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Attributes\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of attributes of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> of attributes of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The attributes in the returned collection are in the order that they were added to the element. If the XML tree was parsed from XML, the attributes are returned in document order.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with two attributes. It then uses this  to retrieve all attributes of the element.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(&quot;Att2&quot;, &quot;content2&quot;)  \n);  \nIEnumerable&lt;XAttribute&gt; attList =  \n    from at in xmlTree.Attributes()  \n    select at;  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = &lt;Root Att1=&quot;content1&quot; Att2=&quot;content2&quot;/&gt;  \n\nDim attList As IEnumerable(Of XAttribute) = _  \nFrom at In xmlTree.Attributes() _  \nSelect at  \n\nFor Each att In attList  \n    Console.WriteLine(att)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Att1=&quot;content1&quot;  \nAtt2=&quot;content2&quot;\n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(aw + &quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(aw + &quot;Att2&quot;, &quot;content2&quot;),  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;)  \n);  \nIEnumerable&lt;XAttribute&gt; attList =  \n    from at in xmlTree.Attributes()  \n    select at;  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = &lt;aw:Root aw:Att1=&quot;content1&quot; aw:Att2=&quot;content2&quot;/&gt;  \n\n        Dim attList As IEnumerable(Of XAttribute) = _  \n            From at In xmlTree.Attributes() _  \n            Select at  \n\n        For Each att In attList  \n            Console.WriteLine(att)  \n        Next  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                aw:Att1=&quot;content1&quot;  \naw:Att2=&quot;content2&quot;  \nxmlns:aw=&quot;http://www.adventure-works.com&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Attributes_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of attributes of this element. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> that contains the attributes of this element. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Attribute names must be unique within an element. Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.  </p>\n<p> This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this .  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(&quot;Att2&quot;, &quot;content2&quot;)  \n);  \nIEnumerable&lt;XAttribute&gt; attList = xmlTree.Attributes(&quot;Att1&quot;);  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = &lt;Root Att1=&quot;content1&quot; Att2=&quot;content2&quot;/&gt;  \n\nDim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(&quot;Att1&quot;)  \n\nFor Each att In attList  \n    Console.WriteLine(att)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nAtt1=&quot;content1&quot;\n</code></pre><p> The following is the same example, but in this case the XML is in a namespace. For more information, see <a href=\"../Topic/Working%20with%20XML%20Namespaces.md\" data-linktype=\"relative-path\">Working with XML Namespaces</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement xmlTree = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XAttribute(aw + &quot;Att1&quot;, &quot;content1&quot;),  \n    new XAttribute(aw + &quot;Att2&quot;, &quot;content2&quot;)  \n);  \nIEnumerable&lt;XAttribute&gt; attList = xmlTree.Attributes(aw + &quot;Att1&quot;);  \nforeach (XAttribute att in attList)  \n    Console.WriteLine(att);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = &lt;aw:Root aw:Att1=&quot;content1&quot; aw:Att2=&quot;content2&quot;/&gt;  \n\n        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + &quot;Att1&quot;)  \n\n        For Each att In attList  \n            Console.WriteLine(att)  \n        Next  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\naw:Att1=&quot;content1&quot;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_DescendantNodesAndSelf\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_DescendantNodesAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantNodesAndSelf()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xnode\" data-linktype=\"relative-path\">XNode</a> that contain this element, and all descendant nodes of this element, in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then uses this .  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  \n    new XAttribute(&quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(&quot;Child&quot;,  \n        new XText(&quot;Some text&quot;),  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XNode&gt; dnas =  \n    from node in xmlTree.DescendantNodesAndSelf()  \n    select node;  \nforeach (XNode node in dnas)  \n{  \n    if (node is XElement)  \n        Console.WriteLine((node as XElement).Name);  \n    else  \n        Console.WriteLine(node);  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root Att1=&quot;AttributeContent&quot;&gt;  \n        &lt;Child&gt;Some text&lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim dnas As IEnumerable(Of XNode) = _  \n    From node In xmlTree.DescendantNodesAndSelf() _  \n    Select node  \n\nFor Each node In dnas  \n    If TypeOf node Is XElement Then  \n        Console.WriteLine(DirectCast(node, XElement).Name)  \n    Else  \n        Console.WriteLine(node)  \n    End If  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Root  \nChild  \nSome text  \nGrandChild  \nelement content\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_DescendantsAndSelf\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_DescendantsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantsAndSelf()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> of elements that contain this element, and all descendant elements of this element, in document order.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then uses this .  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(&quot;Child&quot;,  \n        new XText(&quot;Some text&quot;),  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XElement&gt; das =  \n    from el in xmlTree.DescendantsAndSelf()  \n    select el;  \nforeach (XElement el in das)  \n    Console.WriteLine(el.Name);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root Att1=&quot;AttributeContent&quot;&gt;  \n        &lt;Child&gt;Some text  \n            &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim das As IEnumerable(Of XElement) = _  \n    From el In xmlTree.DescendantsAndSelf() _  \n    Select el  \n\nFor Each el In das  \n    Console.WriteLine(el.Name)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Root  \nChild  \nGrandChild\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_DescendantsAndSelf_System_Xml_Linq_XName_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_DescendantsAndSelf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DescendantsAndSelf(XName)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> to match.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&gt;</div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> of <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> are included in the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses deferred execution.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, and then uses this .  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, &quot;AttributeContent&quot;),  \n    new XElement(&quot;Child&quot;,  \n        new XText(&quot;Some text&quot;),  \n        new XElement(&quot;GrandChild&quot;, &quot;element content&quot;)  \n    )  \n);  \nIEnumerable&lt;XElement&gt; das = xmlTree.DescendantsAndSelf(&quot;Child&quot;);  \nforeach (XElement el in das)  \n    Console.WriteLine(el.Name);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = _  \n    &lt;Root Att1=&quot;AttributeContent&quot;&gt;  \n        &lt;Child&gt;Some text  \n            &lt;GrandChild&gt;element content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    &lt;/Root&gt;  \n\nDim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf(&quot;Child&quot;)  \n\nFor Each el In das  \n    Console.WriteLine(el.Name)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nChild\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_GetDefaultNamespace\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_GetDefaultNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDefaultNamespace()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the default <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XNamespace GetDefaultNamespace ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> that contains the default namespace of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Namespace declarations may be persisted as attributes in the XML tree. These special attributes declare namespaces, including default namespaces. This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for the default namespace.  </p>\n<p> If there is no attribute that declares the default namespace, then this method returns <a class=\"xref\" href=\"system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_None_\" data-linktype=\"relative-path\">None</a>.  </p>\n<p> When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.  </p>\n<p> When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree that has a default namespace. It then uses this method to retrieve the default namespace.  </p>\n<pre><code class=\"lang-c#\">\n                String xml = &quot;&lt;root xmlns=&#39;http://www.adventure-works.com&#39;/&gt;&quot;;  \nXElement e = XElement.Parse(xml);  \nConsole.WriteLine(&quot;Default namespace: {0}&quot;, e.GetDefaultNamespace());\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim e As XElement = &lt;root/&gt;  \n        Console.WriteLine(&quot;Default namespace: {0}&quot;, e.GetDefaultNamespace())  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nDefault namespace: http://www.adventure-works.com\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_GetNamespaceOfPrefix_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_GetNamespaceOfPrefix_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNamespaceOfPrefix(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the namespace associated with a particular prefix for this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>prefix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains the namespace prefix to look up.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for the namespace associated with the prefix for this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree that has a namespace with an associated prefix. It then uses this method to retrieve the <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> for the prefix.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(&quot;&lt;Root xmlns:aw=&#39;http://www.adventure-works.com&#39;/&gt;&quot;);  \nXNamespace awNamespace = xmlTree.GetNamespaceOfPrefix(&quot;aw&quot;);  \nConsole.WriteLine(&quot;Namespace: {0}&quot;, awNamespace);\n</code></pre><p> When using Visual Basic, you would typically use the <a href=\"../Topic/GetXmlNamespace%20Operator%20(Visual%20Basic).md\" data-linktype=\"relative-path\">GetXmlNamespace Operator</a> operator, as follows  </p>\n<pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = &lt;aw:Root/&gt;  \n        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  \n        Console.WriteLine(&quot;Namespace: {0}&quot;, awNamespace)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nNamespace: http://www.adventure-works.com\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_GetPrefixOfNamespace_System_Xml_Linq_XNamespace_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_GetPrefixOfNamespace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPrefixOfNamespace(XNamespace)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the prefix associated with a namespace for this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>ns</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> to look up.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the namespace prefix.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method looks through the XML tree for namespace attributes that are in scope for this element. Namespace prefixes are specified in namespace attributes that are in the XML tree.  </p>\n<p> If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree that contains a namespace with a prefix. It then uses this method to retrieve the prefix for the namespace. Notice that this example uses the implicit conversion from string to <a class=\"xref\" href=\"system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> when calling this method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(&quot;&lt;Root xmlns:aw=&#39;http://www.adventure-works.com&#39;/&gt;&quot;);  \nstring prefix = xmlTree.GetPrefixOfNamespace(&quot;http://www.adventure-works.com&quot;);  \nConsole.WriteLine(&quot;Prefix: {0}&quot;, prefix);\n</code></pre><pre><code class=\"lang-vb\">\n                Imports &lt;xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n\nModule Module1  \n    Sub Main()  \n        Dim xmlTree As XElement = &lt;aw:Root/&gt;  \n        Dim prefix As String = xmlTree.GetPrefixOfNamespace(&quot;http://www.adventure-works.com&quot;)  \n        Console.WriteLine(&quot;Prefix: {0}&quot;, prefix)  \n    End Sub  \nEnd Module\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nPrefix: aw\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> instance by using the specified stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream that contains the XML data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object used to read the data that is contained in the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to control load options, use the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Load_\" data-linktype=\"relative-path\">Load</a> overload that takes <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> as a parameter.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.  </p>\n<p> If you have to modify <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a>, following these steps:  </p>\n<ol>\n<li><p>Create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> by calling one of the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overloads that take <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> as a parameter.  </p>\n</li>\n<li><p>Pass the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to one of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&#39;s <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Load_\" data-linktype=\"relative-path\">Load</a> overloads that takes <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> as a parameter.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_IO_TextReader_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(TextReader)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textReader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> that will be read for the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> content.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the XML that was read from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an element from a <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a>.  </p>\n<pre><code class=\"lang-c#\">\n                TextReader sr = new StringReader(&quot;&lt;Root&gt;&lt;Child/&gt;&lt;/Root&gt;&quot;);  \nXElement xmlTree = XElement.Load(sr);  \nsr.Close();  \nConsole.WriteLine(xmlTree);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sr As TextReader = New StringReader(&quot;&lt;Root&gt;&lt;Child/&gt;&lt;/Root&gt;&quot;)  \nDim xmlTree As XElement = XElement.Load(sr)  \nsr.Close()  \nConsole.WriteLine(xmlTree)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child /&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (string uri);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A URI string referencing the file to load into a new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the contents of the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method reads the raw XML into the XML tree. It discards all insignificant white space in the file.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an XML tree, saves it to a file, and then uses this method to load the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from the file.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, &quot;content&quot;)  \n);  \nxmlTree1.Save(&quot;Tree.xml&quot;);  \n\nXElement xmlTree2 = XElement.Load(&quot;Tree.xml&quot;);  \nConsole.WriteLine(xmlTree2.Name);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child&gt;Content&lt;/Child&gt;  \n        &lt;/Root&gt;  \nxmlTree1.Save(&quot;Tree.xml&quot;)  \n\nDim xmlTree2 As XElement = XElement.Load(&quot;Tree.xml&quot;)  \nConsole.WriteLine(xmlTree2.Name)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nRoot\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that will be read for the content of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the XML that was read from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By creating an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> from a DOM document, and then using the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a DOM document, creates an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> from the DOM document, instantiates a tree from the reader. This code effectively copies a DOM document into a LINQ to XML tree.  </p>\n<pre><code class=\"lang-c#\">// Create a DOM document with some content.  \nXmlDocument doc = new XmlDocument();  \nXmlElement child = doc.CreateElement(&quot;Child&quot;);  \nchild.InnerText = &quot;child contents&quot;;  \nXmlElement root = doc.CreateElement(&quot;Root&quot;);  \nroot.AppendChild(child);  \ndoc.AppendChild(root);  \n\n// Create a reader and move to the content.  \nusing (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  \n    // the reader must be in the Interactive state in order to  \n    // Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent();  \n\n    XElement xRoot = XElement.Load(nodeReader);  \n    Console.WriteLine(xRoot);  \n}\n</code></pre><pre><code class=\"lang-vb\">&#39; Create a DOM document with some content.  \nDim doc As XmlDocument = New XmlDocument()  \nDim child As XmlElement = doc.CreateElement(&quot;Child&quot;)  \nchild.InnerText = &quot;child contents&quot;  \nDim root As XmlElement = doc.CreateElement(&quot;Root&quot;)  \nroot.AppendChild(child)  \ndoc.AppendChild(root)  \n\n&#39; Create a reader and move to the content.  \nUsing nodeReader = New XmlNodeReader(doc)  \n    &#39; the reader must be in the Interactive state in order to  \n    &#39; Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent()  \n\n    Dim xRoot As XElement = XElement.Load(nodeReader)  \n    Console.WriteLine(xRoot)  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child&gt;child contents&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_IO_Stream_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(Stream,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream containing the XML data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> object that specifies whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object used to read the data that the stream contains.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.  </p>\n<p> If you have to modify <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a>, following these steps:  </p>\n<ol>\n<li><p>Create an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> by calling one of the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overloads that take <a class=\"xref\" href=\"system.xml.xmlreadersettings\" data-linktype=\"relative-path\">XmlReaderSettings</a> as a parameter.  </p>\n</li>\n<li><p>Pass the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to one of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>&#39;s <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Load_\" data-linktype=\"relative-path\">Load</a> overloads that takes <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> as a parameter.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_IO_TextReader_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(TextReader,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>, optionally preserving white space and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textReader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> that will be read for the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> content.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the XML that was read from the specified <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the source XML is indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to read all white space in the source XML. Nodes of type <a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a> are created for both significant and insignificant white space.  </p>\n<p> If the source XML is indented, not setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  </p>\n<p> If the source XML is not indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML.  </p>\n<p> Setting <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> will have no effect when loading from a <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag.  </p>\n<p> The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a <a class=\"xref\" href=\"system.io.stringreader\" data-linktype=\"relative-path\">StringReader</a> in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                TextReader sr;  \nint whiteSpaceNodes;  \n\nsr = new StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;);  \nXElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  \nsr.Close();  \nwhiteSpaceNodes = xmlTree1  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes);  \n\nsr = new StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;);  \nXElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  \nsr.Close();  \nwhiteSpaceNodes = xmlTree2  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sr As TextReader  \nDim whiteSpaceNodes As Integer  \n\nsr = New StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;)  \nDim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  \nsr.Close()  \nwhiteSpaceNodes = xmlTree1 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes)  \n\nsr = New StringReader(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;)  \nDim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  \nsr.Close()  \nwhiteSpaceNodes = xmlTree2 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Count of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3\n</code></pre><p> The following example loads the line information as it loads from the <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>. It then prints the line information.  </p>\n<pre><code class=\"lang-c#\">\n                TextReader sr = new StringReader(  \n@&quot;&lt;Root&gt;  \n  &lt;Child&gt;  \n    &lt;GrandChild1/&gt;  \n    &lt;GrandChild2/&gt;  \n  &lt;/Child&gt;  \n&lt;/Root&gt;&quot;);  \nXElement po = XElement.Load(sr,  \n    LoadOptions.SetLineInfo);  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;Element Name&quot;.PadRight(20),  \n    &quot;Line&quot;.PadRight(5),  \n    &quot;Position&quot;);  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;------------&quot;.PadRight(20),  \n    &quot;----&quot;.PadRight(5),  \n    &quot;--------&quot;);  \nforeach (XElement e in po.DescendantsAndSelf())  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n        ((IXmlLineInfo)e).LinePosition);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sr As TextReader = New StringReader( _  \n    &quot;&lt;Root&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;  &lt;Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;    &lt;GrandChild1/&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;    &lt;GrandChild2/&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;  &lt;/Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;&lt;/Root&gt;&quot;)  \nDim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;Element Name&quot;.PadRight(20), _  \n    &quot;Line&quot;.PadRight(5), _  \n    &quot;Position&quot;)  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;------------&quot;.PadRight(20), _  \n    &quot;----&quot;.PadRight(5), _  \n    &quot;--------&quot;)  \nFor Each e As XElement In po.DescendantsAndSelf()  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) &amp; e.Name.ToString).PadRight(20), _  \n        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n        (DirectCast(e, IXmlLineInfo)).LinePosition)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    4  \n    GrandChild1     3    6  \n    GrandChild2     4    6\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_String_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(String,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a file, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>uri</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A URI string referencing the file to load into an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the contents of the specified file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the source XML is indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to read all white space in the source XML. Nodes of type <a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a> are created for both significant and insignificant white space.  </p>\n<p> If the source XML is indented, not setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  </p>\n<p> If the source XML is not indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> and the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flags.  </p>\n<p> The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a file in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt;  &lt;/Child&gt; &lt;/Root&gt;&quot;, LoadOptions.PreserveWhitespace);  \nxmlTree1.Save(&quot;Tree.xml&quot;);  \nConsole.WriteLine(xmlTree1);  \n\nint whiteSpaceNodes;  \nXElement xmlTree2 = XElement.Load(&quot;Tree.xml&quot;,  \n    LoadOptions.None);  \nwhiteSpaceNodes = xmlTree2  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes);  \n\nXElement xmlTree3 = XElement.Load(&quot;Tree.xml&quot;,  \n    LoadOptions.PreserveWhitespace);  \nwhiteSpaceNodes = xmlTree3  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt;  &lt;/Child&gt; &lt;/Root&gt;&quot;, LoadOptions.PreserveWhitespace)  \nxmlTree1.Save(&quot;Tree.xml&quot;)  \nConsole.WriteLine(xmlTree1)  \n\nDim whiteSpaceNodes As Integer  \nDim xmlTree2 As XElement = XElement.Load(&quot;Tree.xml&quot;, LoadOptions.None)  \nwhiteSpaceNodes = xmlTree2 _  \n                  .DescendantNodesAndSelf() _  \n                  .OfType(Of XText)() _  \n                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n                  .Count()  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes)  \n\nDim xmlTree3 As XElement = XElement.Load(&quot;Tree.xml&quot;, LoadOptions.PreserveWhitespace)  \nwhiteSpaceNodes = xmlTree3 _  \n                  .DescendantNodesAndSelf() _  \n                  .OfType(Of XText)() _  \n                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n                  .Count()  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root&gt; &lt;Child&gt;  &lt;/Child&gt; &lt;/Root&gt;  \nCount of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3\n</code></pre><p> The following example loads the base URI and line information as it loads the file. It then prints the base URI and the line information.  </p>\n<p> This example uses the following resource file: <a href=\"../Topic/Sample%20XML%20File:%20Typical%20Purchase%20Order%20(LINQ%20to%20XML)3.md\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement po = XElement.Load(&quot;PurchaseOrder.xml&quot;,  \n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \nstring[] splitUri = po.BaseUri.Split(&#39;/&#39;);  \nConsole.WriteLine(&quot;BaseUri: {0}&quot;, splitUri[splitUri.Length - 1]);  \nConsole.WriteLine();  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;Element Name&quot;.PadRight(20),  \n    &quot;Line&quot;.PadRight(5),  \n    &quot;Position&quot;);  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;------------&quot;.PadRight(20),  \n    &quot;----&quot;.PadRight(5),  \n    &quot;--------&quot;);  \nforeach (XElement e in po.DescendantsAndSelf())  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n        ((IXmlLineInfo)e).LinePosition);\n</code></pre><pre><code class=\"lang-vb\">\n        Dim po As XElement = XElement.Load(&quot;PurchaseOrder.xml&quot;, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \nDim splitUri() As String = po.BaseUri.Split(&quot;/&quot;)  \nConsole.WriteLine(&quot;BaseUri: {0}&quot;, splitUri(splitUri.Length - 1))  \nConsole.WriteLine()  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;Element Name&quot;.PadRight(20), _  \n    &quot;Line&quot;.PadRight(5), _  \n    &quot;Position&quot;)  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;------------&quot;.PadRight(20), _  \n    &quot;----&quot;.PadRight(5), _  \n    &quot;--------&quot;)  \nFor Each e As XElement In po.DescendantsAndSelf()  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) &amp; e.Name.ToString()).PadRight(20), _  \n        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n        (DirectCast(e, IXmlLineInfo)).LinePosition)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                BaseUri: PurchaseOrder.xml  \n\nElement Name        Line Position  \n------------        ---- --------  \nPurchaseOrder       2    2  \n  Address           3    4  \n    Name            4    6  \n    Street          5    6  \n    City            6    6  \n    State           7    6  \n    Zip             8    6  \n    Country         9    6  \n  Address           11   4  \n    Name            12   6  \n    Street          13   6  \n    City            14   6  \n    State           15   6  \n    Zip             16   6  \n    Country         17   6  \n  DeliveryNotes     19   4  \n  Items             20   4  \n    Item            21   6  \n      ProductName   22   8  \n      Quantity      23   8  \n      USPrice       24   8  \n      Comment       25   8  \n    Item            27   6  \n      ProductName   28   8  \n      Quantity      29   8  \n      USPrice       30   8  \n      ShipDate      31   8\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Load_System_Xml_XmlReader_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Load_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Load(XmlReader,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Loads an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from an <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, optionally preserving white space, setting the base URI, and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> that will be read for the content of the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that contains the XML that was read from the specified <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By creating an <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> from a DOM document, and then using the <a class=\"xref\" href=\"system.xml.xmlnodereader\" data-linktype=\"relative-path\">XmlNodeReader</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Parse_\" data-linktype=\"relative-path\">Parse</a> to create an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML.  </p>\n<p> Setting <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> is not valid when loading from a <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> will be configured to either read whitespace or not. The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces. This will be the behavior regardless of whether <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> is set or not.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> may have a valid base URI or not. If you set <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a>, the base URI will be set in the XML tree from the base URI that is reported by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> may have a valid line information or not. If you set <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a>, the line information will be set in the XML tree from the line information that is reported by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag.  </p>\n<p> The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example loads the line information that it loads from the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. It then prints the line information.  </p>\n<pre><code class=\"lang-c#\">\n                string markup =  \n@&quot;&lt;Root&gt;  \n    &lt;Child&gt;  \n        &lt;GrandChild/&gt;  \n    &lt;/Child&gt;  \n&lt;/Root&gt;&quot;;  \n\n// Create a reader and move to the content.  \nusing (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  \n{  \n    // the reader must be in the Interactive state in order to  \n    // Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent();  \n\n    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        &quot;Element Name&quot;.PadRight(20),  \n        &quot;Line&quot;.PadRight(5),  \n        &quot;Position&quot;);  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        &quot;------------&quot;.PadRight(20),  \n        &quot;----&quot;.PadRight(5),  \n        &quot;--------&quot;);  \n    foreach (XElement e in xRoot.DescendantsAndSelf())  \n        Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n            (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n            ((IXmlLineInfo)e).LinePosition);  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Dim markup As String = _  \n    &quot;&lt;Root&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;    &lt;Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;        &lt;GrandChild/&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;    &lt;/Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n    &quot;&lt;/Root&gt;&quot;  \n\n&#39; Create a reader and move to the content.  \nUsing nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  \n\n    &#39; the reader must be in the Interactive state in order to  \n    &#39; Create a LINQ to XML tree from it.  \n    nodeReader.MoveToContent()  \n\n    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        &quot;Element Name&quot;.PadRight(20), _  \n        &quot;Line&quot;.PadRight(5), _  \n        &quot;Position&quot;)  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        &quot;------------&quot;.PadRight(20), _  \n        &quot;----&quot;.PadRight(5), _  \n        &quot;--------&quot;)  \n    For Each e As XElement In xRoot.DescendantsAndSelf()  \n        Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n            (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) &amp; e.Name.ToString).PadRight(20), _  \n            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  \n            (DirectCast(e, IXmlLineInfo)).LinePosition)  \n    Next  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    6  \n    GrandChild      3    10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Load an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Parse (string text);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> populated from the string that contains XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not preserve white space. If you want to preserve white space in the XML tree, use the overload of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Parse_\" data-linktype=\"relative-path\">Parse</a> method that takes <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a string that contains XML. It then parses the string into an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;);  \nConsole.WriteLine(xmlTree);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree As XElement = &lt;Root&gt;&lt;Child&gt;&lt;/Child&gt;&lt;/Root&gt;  \nConsole.WriteLine(xmlTree)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child&gt;&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Parse_System_String_System_Xml_Linq_LoadOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,LoadOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Load an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> from a string that contains XML, optionally preserving white space and retaining line information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>text</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains XML.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> that specifies white space behavior, and whether to load base URI and line information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> populated from the string that contains XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the source XML is indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to read all white space in the source XML. Nodes of type <a class=\"xref\" href=\"system.xml.linq.xtext\" data-linktype=\"relative-path\">XText</a> are created for both significant and insignificant white space.  </p>\n<p> If the source XML is indented, not setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> causes the reader to ignore all of the insignificant white space in the source XML. The XML tree is created without any text nodes for insignificant white space.  </p>\n<p> If the source XML is not indented, setting the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag in <code>options</code> has no effect. Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.  </p>\n<p> Setting <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> will have no effect when parsing from a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> may have a valid line information or not. If you set <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a>, the line information will be set in the XML tree from the line information that is reported by the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>.  </p>\n<p> There is a performance penalty if you set the <a class=\"xref\" href=\"system.xml.linq.loadoptions\" data-linktype=\"relative-path\">LoadOptions</a> flag.  </p>\n<p> The line information is accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the line information may become meaningless.  </p>\n<p> LINQ to XML&#39;s loading functionality is built upon <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>. Therefore, you might catch any exceptions that are thrown by the <a class=\"xref\" href=\"system.xml.xmlreader#System_Xml_XmlReader_Create_\" data-linktype=\"relative-path\">Create</a> overload methods and the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> methods that read and parse the document.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example parses a string into an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> in two different ways: preserving white space, and not preserving white space. It then uses a query to determine the number of white space nodes in the resulting XML tree.  </p>\n<pre><code class=\"lang-c#\">\n                int whiteSpaceNodes;  \n\nXElement xmlTree1 = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;,  \n    LoadOptions.None);  \nwhiteSpaceNodes = xmlTree1  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;,  \n    whiteSpaceNodes);  \n\nXElement xmlTree2 = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;,  \n    LoadOptions.PreserveWhitespace);  \nwhiteSpaceNodes = xmlTree2  \n    .DescendantNodesAndSelf()  \n    .OfType&lt;XText&gt;()  \n    .Where(tNode =&gt; tNode.ToString().Trim().Length == 0)  \n    .Count();  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;,  \n    whiteSpaceNodes);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim whiteSpaceNodes As Integer  \n\nDim xmlTree1 As XElement = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;, LoadOptions.None)  \nwhiteSpaceNodes = xmlTree1 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(&quot;Count of white space nodes (not preserving whitespace): {0}&quot;, whiteSpaceNodes)  \n\nDim xmlTree2 As XElement = XElement.Parse(&quot;&lt;Root&gt; &lt;Child&gt; &lt;/Child&gt; &lt;/Root&gt;&quot;, LoadOptions.PreserveWhitespace)  \nwhiteSpaceNodes = xmlTree2 _  \n    .DescendantNodesAndSelf() _  \n    .OfType(Of XText)() _  \n    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  \n    .Count()  \nConsole.WriteLine(&quot;Count of white space nodes (preserving whitespace): {0}&quot;, whiteSpaceNodes)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Count of white space nodes (not preserving whitespace): 0  \nCount of white space nodes (preserving whitespace): 3\n</code></pre><p> The following example retains line information as it parses the string.  </p>\n<pre><code class=\"lang-c#\">\n                string markup =  \n@&quot;&lt;Root&gt;  \n    &lt;Child&gt;  \n        &lt;GrandChild/&gt;  \n    &lt;/Child&gt;  \n&lt;/Root&gt;&quot;;  \n\nXElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;Element Name&quot;.PadRight(20),  \n    &quot;Line&quot;.PadRight(5),  \n    &quot;Position&quot;);  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;------------&quot;.PadRight(20),  \n    &quot;----&quot;.PadRight(5),  \n    &quot;--------&quot;);  \nforeach (XElement e in xRoot.DescendantsAndSelf())  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  \n        ((IXmlLineInfo)e).LinePosition);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim markup As String = _  \n&quot;&lt;Root&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;    &lt;Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;        &lt;GrandChild/&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;    &lt;/Child&gt;&quot; &amp; Environment.NewLine &amp; _  \n&quot;&lt;/Root&gt;&quot;  \n\nDim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;Element Name&quot;.PadRight(20), _  \n    &quot;Line&quot;.PadRight(5), _  \n    &quot;Position&quot;)  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;------------&quot;.PadRight(20), _  \n    &quot;----&quot;.PadRight(5), _  \n    &quot;--------&quot;)  \nFor Each e As XElement In xRoot.DescendantsAndSelf()  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) &amp; e.Name.ToString).PadRight(20), _  \n        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \n        DirectCast(e, IXmlLineInfo).LinePosition)  \nNext\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                Element Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child             2    6  \n    GrandChild      3    10\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_RemoveAll\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_RemoveAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAll()</div>        \r\n          </div>\r\n    \r\n            <p>Removes nodes and attributes from this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAll ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with attributes and child elements. It then calls this method to remove both the attributes and the child elements.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3),  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3)  \n);  \nroot.RemoveAll();   // removes children elements and attributes of root  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n        &lt;Root Attr1=&quot;1&quot; Attr2=&quot;2&quot; Attr3=&quot;3&quot;&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n        &lt;/Root&gt;  \n\nroot.RemoveAll()   &#39; removes children elements and attributes of root  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root /&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_RemoveAttributes\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_RemoveAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAttributes()</div>        \r\n          </div>\r\n    \r\n            <p>Removes the attributes of this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAttributes ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with attributes and child elements. It then calls this method to remove the attributes. The child elements remain.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3),  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3)  \n);  \nroot.RemoveAttributes();  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n    &lt;Root Attr1=&quot;1&quot; Attr2=&quot;2&quot; Attr3=&quot;3&quot;&gt;  \n        &lt;Child1&gt;1&lt;/Child1&gt;  \n        &lt;Child2&gt;2&lt;/Child2&gt;  \n        &lt;Child3&gt;3&lt;/Child3&gt;  \n     &lt;/Root&gt;  \n\nroot.RemoveAttributes()  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_ReplaceAll_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_ReplaceAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReplaceAll(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the child nodes and the attributes of this element with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReplaceAll (object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The content that will replace the child nodes and attributes of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method first removes existing content and attributes. It then adds the specified <code>content</code>.  </p>\n<p> This method uses snapshot semanticsâ€”that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses this method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, &quot;child content&quot;)  \n);  \n\n// ReplaceAll with an XElement object.  \nroot.ReplaceAll(new XElement(&quot;NewChild&quot;, &quot;n&quot;));  \nConsole.WriteLine(root);  \n\n// ReplaceAll with an XAttribute object.  \nroot.ReplaceAll(new XAttribute(&quot;NewAttribute&quot;, &quot;n&quot;));  \nConsole.WriteLine(root);  \n\n// ReplaceAll with a string.  \nroot.ReplaceAll(&quot;Some text&quot;);  \nConsole.WriteLine(root);  \n\n// ReplaceAll with a double.  \ndouble dbl = 12.345;  \nroot.ReplaceAll(dbl);  \nConsole.WriteLine(root);  \n\n// ReplaceAll with a DateTime object.  \nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  \nroot.ReplaceAll(dt);  \nConsole.WriteLine(root);  \n\n// ReplaceAll with a string array.  \n// Any collection other than a collection of XElement or XAttribute objects  \n// are converted to strings. The strings are concatenated and added.  \nstring[] stringArray = {  \n    &quot;abc&quot;,  \n    &quot;def&quot;,  \n    &quot;ghi&quot;  \n};  \nroot.ReplaceAll(stringArray);  \nConsole.WriteLine(root);  \n\n// ReplaceAll with an array of XElement objects.  \nXElement[] ellArray = {  \n    new XElement(&quot;NewChild1&quot;, 1),  \n    new XElement(&quot;NewChild2&quot;, 2),  \n    new XElement(&quot;NewChild3&quot;, 3)  \n};  \nroot.ReplaceAll(ellArray);  \nConsole.WriteLine(root);  \n\n// ReplaceAll with an array of XAttribute objects.  \nXAttribute[] attArray = {  \n    new XAttribute(&quot;NewAtt1&quot;, 1),  \n    new XAttribute(&quot;NewAtt2&quot;, 2),  \n    new XAttribute(&quot;NewAtt3&quot;, 3)  \n};  \nroot.ReplaceAll(attArray);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n    &lt;Root&gt;  \n        &lt;Child&gt;child content&lt;/Child&gt;  \n    &lt;/Root&gt;  \n\n&#39; ReplaceAll with an XElement object.  \nroot.ReplaceAll(&lt;NewChild&gt;n&lt;/NewChild&gt;)  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with an XAttribute object.  \nroot.ReplaceAll(New XAttribute(&quot;NewAttribute&quot;, &quot;n&quot;))  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with a string.  \nroot.ReplaceAll(&quot;Some text&quot;)  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with a double.  \nDim dbl As Double = 12.345  \nroot.ReplaceAll(dbl)  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with a DateTime object.  \nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  \nroot.ReplaceAll(dt)  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with a string array.  \n&#39; Any collection other than a collection of XElement or XAttribute objects  \n&#39; are converted to strings. The strings are concatenated and added.  \nDim stringArray As String() = { _  \n    &quot;abc&quot;, _  \n    &quot;def&quot;, _  \n    &quot;ghi&quot; _  \n}  \nroot.ReplaceAll(stringArray)  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with an array of XElement objects.  \nDim ellArray As XElement() = { _  \n    New XElement(&quot;NewChild1&quot;, 1), _  \n    New XElement(&quot;NewChild2&quot;, 2), _  \n    New XElement(&quot;NewChild3&quot;, 3) _  \n}  \nroot.ReplaceAll(ellArray)  \nConsole.WriteLine(root)  \n\n&#39; ReplaceAll with an array of XAttribute objects.  \nDim attArray As XAttribute() = { _  \nNew XAttribute(&quot;NewAtt1&quot;, 1), _  \nNew XAttribute(&quot;NewAtt2&quot;, 2), _  \nNew XAttribute(&quot;NewAtt3&quot;, 3) _  \n}  \nroot.ReplaceAll(attArray)  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root&gt;  \n  &lt;NewChild&gt;n&lt;/NewChild&gt;  \n&lt;/Root&gt;  \n&lt;Root NewAttribute=&quot;n&quot; /&gt;  \n&lt;Root&gt;Some text&lt;/Root&gt;  \n&lt;Root&gt;12.345&lt;/Root&gt;  \n&lt;Root&gt;2006-10-06T12:30:00&lt;/Root&gt;  \n&lt;Root&gt;abcdefghi&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;NewChild1&gt;1&lt;/NewChild1&gt;  \n  &lt;NewChild2&gt;2&lt;/NewChild2&gt;  \n  &lt;NewChild3&gt;3&lt;/NewChild3&gt;  \n&lt;/Root&gt;  \n&lt;Root NewAtt1=&quot;1&quot; NewAtt2=&quot;2&quot; NewAtt3=&quot;3&quot; /&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_ReplaceAll_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_ReplaceAll_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReplaceAll(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the child nodes and the attributes of this element with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReplaceAll (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter list of content objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method first removes existing content and attributes. It then adds the specified <code>content</code>.  </p>\n<p> This method uses snapshot semanticsâ€”that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content. This means that you can query the contents of the current element and use the results of the query as the specified new content.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.  </p>\n<pre><code class=\"lang-c#\">\n                XElement xmlTree1 = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, 1),  \n    new XElement(&quot;Child2&quot;, 2),  \n    new XElement(&quot;Child3&quot;, 3),  \n    new XElement(&quot;Child4&quot;, 4),  \n    new XElement(&quot;Child5&quot;, 5),  \n    new XElement(&quot;Child6&quot;, 6)  \n);  \n\nXElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, &quot;child content&quot;)  \n);  \n\nroot.ReplaceAll(  \n    from el in xmlTree1.Elements()  \n    where((int)el &gt;= 3 &amp;&amp; (int)el &lt;= 5)  \n    select el  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim xmlTree1 As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child1&gt;1&lt;/Child1&gt;  \n            &lt;Child2&gt;2&lt;/Child2&gt;  \n            &lt;Child3&gt;3&lt;/Child3&gt;  \n            &lt;Child4&gt;4&lt;/Child4&gt;  \n            &lt;Child5&gt;5&lt;/Child5&gt;  \n            &lt;Child6&gt;6&lt;/Child6&gt;  \n        &lt;/Root&gt;  \n\nDim root As XElement = &lt;Root&gt;  \n                           &lt;Child&gt;child content&lt;/Child&gt;  \n                       &lt;/Root&gt;  \n\nroot.ReplaceAll( _  \n    From el In xmlTree1.Elements() _  \n    Where el.Value &gt;= 3 And el.Value &lt;= 5 _  \n    Select el _  \n)  \n\nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n  &lt;Child4&gt;4&lt;/Child4&gt;  \n  &lt;Child5&gt;5&lt;/Child5&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_ReplaceAttributes_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_ReplaceAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReplaceAttributes(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the attributes of this element with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReplaceAttributes (object content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The content that will replace the attributes of this element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method first removes existing attributes. It then adds the specified <code>content</code>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with three attributes. It then uses this method to replace all of the attributes of the element with a single attribute.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3)  \n);  \nroot.ReplaceAttributes(  \n    new XAttribute(&quot;NewAtt1&quot;, 101)  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; Att3=&quot;3&quot;/&gt;  \nroot.ReplaceAttributes(New XAttribute(&quot;NewAtt1&quot;, 101))  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root NewAtt1=&quot;101&quot; /&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_ReplaceAttributes_System_Object___\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_ReplaceAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReplaceAttributes(Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the attributes of this element with the specified content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ReplaceAttributes (object[] content);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>content</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A parameter list of content objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method first removes existing attributes. It then adds the specified <code>content</code>.  </p>\n<p> For details about the valid content that can be passed to this function, see <a href=\"../Topic/Valid%20Content%20of%20XElement%20and%20XDocument%20Objects1.md\" data-linktype=\"relative-path\">Valid Content of XElement and XDocument Objects</a>.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with three attributes. It then replaces the attributes with other attributes.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XAttribute(&quot;Att1&quot;, 1),  \n    new XAttribute(&quot;Att2&quot;, 2),  \n    new XAttribute(&quot;Att3&quot;, 3)  \n);  \nroot.ReplaceAttributes(  \n    new XAttribute(&quot;NewAtt1&quot;, 101),  \n    new XAttribute(&quot;NewAtt2&quot;, 102),  \n    new XAttribute(&quot;NewAtt3&quot;, 103)  \n);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; Att3=&quot;3&quot;/&gt;  \nroot.ReplaceAttributes( _  \nNew XAttribute(&quot;NewAtt1&quot;, 101), _  \nNew XAttribute(&quot;NewAtt2&quot;, 102), _  \nNew XAttribute(&quot;NewAtt3&quot;, 103))  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root NewAtt1=&quot;101&quot; NewAtt2=&quot;102&quot; NewAtt3=&quot;103&quot; /&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.Stream stream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> that takes <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. Use the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option to save unindented XML. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_IO_TextWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.TextWriter textWriter);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textWriter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> will be written to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that white space will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> that allows you to specify <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, saves the document to a <a class=\"xref\" href=\"system.io.stringwriter\" data-linktype=\"relative-path\">StringWriter</a>, and then prints the string to the console.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = XElement.Parse(@&quot;&lt;Root&gt; &lt;Child&gt; Text &lt;/Child&gt; &lt;/Root&gt;&quot;);  \nusing (StringWriter sw = new StringWriter()) {  \n    root.Save(sw);  \n    Console.WriteLine(sw.ToString());  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;Root&gt;&lt;Child&gt; Text &lt;/Child&gt;&lt;/Root&gt;  \nUsing sw = New StringWriter()  \n    root.Save(sw)  \n    Console.WriteLine(sw.ToString())  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt; Text &lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this element to a file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string fileName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The serialized XML will be indented. All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented. The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.  </p>\n<p> If you want to control white space, use the overload of <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> that allows you to specify <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> as a parameter. For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, saves the document to a file, and then prints the file to the console.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, &quot;child content&quot;)  \n);  \nroot.Save(&quot;Root.xml&quot;);  \nstring str = File.ReadAllText(&quot;Root.xml&quot;);  \nConsole.WriteLine(str);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child&gt;child content&lt;/Child&gt;  \n        &lt;/Root&gt;  \nroot.Save(&quot;Root.xml&quot;)  \nDim Str As String = File.ReadAllText(&quot;Root.xml&quot;)  \nConsole.WriteLine(Str)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt;child content&lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> that the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> will be written to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to save an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.  </p>\n<pre><code class=\"lang-c#\">\n                StringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \n    XElement root = new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child&quot;, &quot;child content&quot;)  \n    );  \n    root.Save(xw);  \n}  \nConsole.WriteLine(sb.ToString());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nUsing xw = XmlWriter.Create(sb, xws)  \n    Dim root As XElement = &lt;Root&gt;  \n                               &lt;Child&gt;child content&lt;/Child&gt;  \n                           &lt;/Root&gt;  \n    root.Save(xw)  \nEnd Using  \nConsole.WriteLine(sb.ToString())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root&gt;&lt;Child&gt;child content&lt;/Child&gt;&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_IO_Stream_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(Stream,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Outputs this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, optionally specifying formatting behavior.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>stream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The stream to output this <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> object that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default the <code>options</code> are set to <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a>. This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.  </p>\n<p> If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white spaces exactly as represented in the XML tree.  </p>\n<p> Use <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> option if you want to remove duplicate namespace declarations.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_IO_TextWriter_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(TextWriter,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this element to a <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>textWriter</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to output the XML to.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. The first use preserves white space. The second serializes the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> with formatting. Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = XElement.Parse(@&quot;&lt;Root&gt; &lt;Child&gt; Text &lt;/Child&gt; &lt;/Root&gt;&quot;);  \n\nusing (StringWriter sw = new StringWriter())  \n{  \n    root.Save(sw, SaveOptions.DisableFormatting);  \n    Console.WriteLine(sw.ToString());  \n}  \n\nConsole.WriteLine(&quot;=====&quot;);  \n\nusing (StringWriter sw = new StringWriter())  \n{  \n    root.Save(sw, SaveOptions.None);  \n    Console.WriteLine(sw.ToString());  \n}\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = &lt;Root&gt;&lt;Child&gt; Text &lt;/Child&gt;&lt;/Root&gt;  \n\nUsing sw = New StringWriter()  \n    root.Save(sw, SaveOptions.DisableFormatting)  \n    Console.WriteLine(sw.ToString())  \nEnd Using  \n\nConsole.WriteLine(&quot;=====&quot;)  \n\nUsing sw = New StringWriter()  \n    root.Save(sw, SaveOptions.None)  \n    Console.WriteLine(sw.ToString())  \nEnd Using\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;&lt;Root&gt;&lt;Child&gt; Text &lt;/Child&gt;&lt;/Root&gt;  \n=====  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt; Text &lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_Save_System_String_System_Xml_Linq_SaveOptions_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_Save_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Save(String,SaveOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Serialize this element to a file, optionally disabling formatting.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Save (string fileName, System.Xml.Linq.SaveOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that contains the name of the file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> that specifies formatting behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If you want to save unindented XML, specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will cause the writer to write all white space exactly as represented in the XML tree.  </p>\n<p> If you want to save indented XML, do not specify the <a class=\"xref\" href=\"system.xml.linq.saveoptions\" data-linktype=\"relative-path\">SaveOptions</a> flag for <code>options</code>. This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented. This is the default behavior, and the behavior of the overloads of the <a class=\"xref\" href=\"system.xml.linq.xelement#System_Xml_Linq_XElement_Save_\" data-linktype=\"relative-path\">Save</a> methods that do not take <code>options</code> as a parameter.  </p>\n<p> For more information, see <a href=\"../Topic/Preserving%20White%20Space%20while%20Loading%20or%20Parsing%20XML3.md\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../Topic/Preserving%20White%20Space%20While%20Serializing1.md\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows two uses of this method. The first use preserves white space. The second one serializes the <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> with formatting.  </p>\n<pre><code class=\"lang-c#\">\n                string str;  \nXElement root = XElement.Parse(@&quot;&lt;Root&gt; &lt;Child&gt; Text &lt;/Child&gt; &lt;/Root&gt;&quot;);  \n\nroot.Save(&quot;Root.xml&quot;, SaveOptions.DisableFormatting);  \nstr = File.ReadAllText(&quot;Root.xml&quot;);  \nConsole.WriteLine(str);  \n\nConsole.WriteLine(&quot;=====&quot;);  \n\nroot.Save(&quot;Root.xml&quot;, SaveOptions.None);  \nstr = File.ReadAllText(&quot;Root.xml&quot;);  \nConsole.WriteLine(str);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim str As String  \nDim root As XElement = &lt;Root&gt;&lt;Child&gt; Text &lt;/Child&gt;&lt;/Root&gt;  \n\nroot.Save(&quot;Root.xml&quot;, SaveOptions.DisableFormatting)  \nstr = File.ReadAllText(&quot;Root.xml&quot;)  \nConsole.WriteLine(str)  \n\nConsole.WriteLine(&quot;=====&quot;)  \n\nroot.Save(&quot;Root.xml&quot;, SaveOptions.None)  \nstr = File.ReadAllText(&quot;Root.xml&quot;)  \nConsole.WriteLine(str)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Root&gt;&lt;Child&gt; Text &lt;/Child&gt;&lt;/Root&gt;  \n=====  \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Child&gt; Text &lt;/Child&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_SetAttributeValue_System_Xml_Linq_XName_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_SetAttributeValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAttributeValue(XName,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of an attribute, adds an attribute, or removes an attribute.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetAttributeValue (System.Xml.Linq.XName name, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of the attribute to change.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to the attribute. The attribute is removed if the value is <code>null</code>. Otherwise, the value is converted to its string representation and assigned to the <span class=\"xref\">stem.Xml.Linq.XAttribute.Value*</span> property of the attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> is an instance of <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you. If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify. If you pass <code>null</code> for <code>value</code>, this method removes the attribute.  </p>\n<p> This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.  </p>\n<p> The value is assigned to the attribute with the specified name. If no attribute with the specified name exists, a new attribute is added. If the value is <code>null</code>, the attribute with the specified name, if any, is deleted.  </p>\n<p> For more information, see <a href=\"../Topic/Maintaining%20Name-Value%20Pairs.md\" data-linktype=\"relative-path\">Maintaining Name/Value Pairs</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with an attribute. It then uses this method to replace the content of the attribute.  </p>\n<pre><code class=\"lang-c#\">// Create an element with no content.  \nXElement root = new XElement(&quot;Root&quot;);  \n\n// Add some name/value pairs.  \nroot.SetAttributeValue(&quot;Att1&quot;, 1);  \nroot.SetAttributeValue(&quot;Att2&quot;, 2);  \nroot.SetAttributeValue(&quot;Att3&quot;, 3);  \nConsole.WriteLine(root);  \n\n// Modify one of the name/value pairs.  \nroot.SetAttributeValue(&quot;Att2&quot;, 22);  \nConsole.WriteLine(root);  \n\n// Remove one of the name/value pairs.  \nroot.SetAttributeValue(&quot;Att3&quot;, null);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">&#39; Create an element with no content.  \nDim root As XElement = &lt;Root/&gt;  \n\n&#39; Add some name/value pairs.  \nroot.SetAttributeValue(&quot;Att1&quot;, 1)  \nroot.SetAttributeValue(&quot;Att2&quot;, 2)  \nroot.SetAttributeValue(&quot;Att3&quot;, 3)  \nConsole.WriteLine(root)  \n\n&#39; Modify one of the name/value pairs.  \nroot.SetAttributeValue(&quot;Att2&quot;, 22)  \nConsole.WriteLine(root)  \n\n&#39; Remove one of the name/value pairs.  \nroot.SetAttributeValue(&quot;Att3&quot;, Nothing)  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root Att1=&quot;1&quot; Att2=&quot;2&quot; Att3=&quot;3&quot; /&gt;  \n&lt;Root Att1=&quot;1&quot; Att2=&quot;22&quot; Att3=&quot;3&quot; /&gt;  \n&lt;Root Att1=&quot;1&quot; Att2=&quot;22&quot; /&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_SetElementValue_System_Xml_Linq_XName_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_SetElementValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetElementValue(XName,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of a child element, adds a child element, or removes a child element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetElementValue (System.Xml.Linq.XName name, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>name</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> that contains the name of the child element to change.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to the child element. The child element is removed if the value is <code>null</code>. Otherwise, the value is converted to its string representation and assigned to the <span class=\"xref\">stem.Xml.Linq.XElement.Value*</span> property of the child element.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> is an instance of <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements. When maintaining the list, you need to add pairs, modify pairs, or delete pairs. If you call this method passing a name that does not exist as a child element, this method creates a child element for you. If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify. If you pass <code>null</code> for <code>value</code>, this method removes the child element.  </p>\n<p> This method will raise events.  </p>\n<p> The value is assigned to the first child element with the specified name. If no child element with the specified name exists, a new child element is added. If the value is null, the first child element with the specified name, if any, is deleted.  </p>\n<p> This method does not add child nodes or attributes to the specified child element. This method throws an exception if any object that derives from <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a> is passed as <code>value</code>.  </p>\n<p> For more information, see <a href=\"../Topic/Maintaining%20Name-Value%20Pairs.md\" data-linktype=\"relative-path\">Maintaining Name/Value Pairs</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element with a child element. It then uses this method to set the value of the child element.  </p>\n<pre><code class=\"lang-c#\">// Create an element with no content  \nXElement root = new XElement(&quot;Root&quot;);  \n\n// Add some name/value pairs.  \nroot.SetElementValue(&quot;Ele1&quot;, 1);  \nroot.SetElementValue(&quot;Ele2&quot;, 2);  \nroot.SetElementValue(&quot;Ele3&quot;, 3);  \nConsole.WriteLine(root);  \n\n// Modify one of the name/value pairs.  \nroot.SetElementValue(&quot;Ele2&quot;, 22);  \nConsole.WriteLine(root);  \n\n// Remove one of the name/value pairs.  \nroot.SetElementValue(&quot;Ele3&quot;, null);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">&#39; Create an element with no content.  \nDim root As XElement = &lt;Root/&gt;  \n\n&#39; Add some name/value pairs.  \nroot.SetElementValue(&quot;Ele1&quot;, 1)  \nroot.SetElementValue(&quot;Ele2&quot;, 2)  \nroot.SetElementValue(&quot;Ele3&quot;, 3)  \nConsole.WriteLine(root)  \n\n&#39; Modify one of the name/value pairs.  \nroot.SetElementValue(&quot;Ele2&quot;, 22)  \nConsole.WriteLine(root)  \n\n&#39; Remove one of the name/value pairs.  \nroot.SetElementValue(&quot;Ele3&quot;, Nothing)  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\n                &lt;Root&gt;  \n  &lt;Ele1&gt;1&lt;/Ele1&gt;  \n  &lt;Ele2&gt;2&lt;/Ele2&gt;  \n  &lt;Ele3&gt;3&lt;/Ele3&gt;  \n&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;Ele1&gt;1&lt;/Ele1&gt;  \n  &lt;Ele2&gt;22&lt;/Ele2&gt;  \n  &lt;Ele3&gt;3&lt;/Ele3&gt;  \n&lt;/Root&gt;  \n&lt;Root&gt;  \n  &lt;Ele1&gt;1&lt;/Ele1&gt;  \n  &lt;Ele2&gt;22&lt;/Ele2&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_SetValue_System_Object_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of this element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to this element. The value is converted to its string representation and assigned to the <span class=\"xref\">stem.Xml.Linq.XElement.Value*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> is an <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will raise the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changed\" data-linktype=\"relative-path\">Changed</a> and the <a class=\"xref\" href=\"system.xml.linq.xobject#System_Xml_Linq_XObject_Changing\" data-linktype=\"relative-path\">Changing</a> events.  </p>\n<p> It is invalid to pass an instance of a class that derives from <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>, such as <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an element that contains a child element. It then sets the value of the element using this method.  </p>\n<pre><code class=\"lang-c#\">\n                XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, &quot;child content&quot;)  \n);  \nroot.SetValue(&quot;new content&quot;);  \nConsole.WriteLine(root);\n</code></pre><pre><code class=\"lang-vb\">\n                Dim root As XElement = _   \n        &lt;Root&gt;  \n            &lt;Child&gt;child content&lt;/Child&gt;  \n        &lt;/Root&gt;  \n\nroot.SetValue(&quot;new content&quot;)  \nConsole.WriteLine(root)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Root&gt;new content&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_WriteTo_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_WriteTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTo(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Write this element to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void WriteTo (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> into which this method will write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write an <a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> to an <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>. Note that the example did not write an XML declaration.  </p>\n<pre><code class=\"lang-c#\">\n                StringBuilder sb = new StringBuilder();  \nXmlWriterSettings xws = new XmlWriterSettings();  \nxws.OmitXmlDeclaration = true;  \nxws.Indent = true;  \n\nusing (XmlWriter xw = XmlWriter.Create(sb, xws)) {  \n    xw.WriteStartElement(&quot;Root&quot;);  \n\n    XElement child1 = new XElement(&quot;Child&quot;,  \n        new XElement(&quot;GrandChild&quot;, &quot;some content&quot;)  \n    );  \n    child1.WriteTo(xw);  \n\n    XElement child2 = new XElement(&quot;AnotherChild&quot;,  \n        new XElement(&quot;GrandChild&quot;, &quot;different content&quot;)  \n    );  \n    child2.WriteTo(xw);  \n\n    xw.WriteEndElement();  \n}  \n\nConsole.WriteLine(sb.ToString());\n</code></pre><pre><code class=\"lang-vb\">\n                Dim sb As StringBuilder = New StringBuilder()  \nDim xws As XmlWriterSettings = New XmlWriterSettings()  \nxws.OmitXmlDeclaration = True  \nxws.Indent = True  \n\nUsing xw = XmlWriter.Create(sb, xws)  \n    xw.WriteStartElement(&quot;Root&quot;)  \n    Dim child1 As XElement = _  \n        &lt;Child&gt;  \n            &lt;GrandChild&gt;some content&lt;/GrandChild&gt;  \n        &lt;/Child&gt;  \n    child1.WriteTo(xw)  \n    Dim child2 As XElement = _   \n        &lt;AnotherChild&gt;  \n            &lt;GrandChild&gt;different content&lt;/GrandChild&gt;  \n        &lt;/AnotherChild&gt;  \n    child2.WriteTo(xw)  \n    xw.WriteEndElement()  \nEnd Using  \n\nConsole.WriteLine(sb.ToString())\n</code></pre><p> This example produces the following output:  </p>\n<pre><code class=\"lang-xml\">\n                &lt;Root&gt;  \n  &lt;Child&gt;  \n    &lt;GrandChild&gt;some content&lt;/GrandChild&gt;  \n  &lt;/Child&gt;  \n  &lt;AnotherChild&gt;  \n    &lt;GrandChild&gt;different content&lt;/GrandChild&gt;  \n  &lt;/AnotherChild&gt;  \n&lt;/Root&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Boolean_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_DateTime_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_DateTimeOffset_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTimeOffset op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Decimal_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Double_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Guid_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Guid op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Int32_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Int64_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Boolean__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;bool&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_DateTime__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;DateTime&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_DateTimeOffset__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;DateTimeOffset&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Decimal__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;decimal&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Double__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;double&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Guid__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;Guid&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Int32__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;int&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Int64__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;long&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_Single__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;float&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_TimeSpan__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;TimeSpan&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_UInt32__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;uint&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Nullable_System_UInt64__\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static Nullable&lt;ulong&gt; op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>&gt;</div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_Single_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_String_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_TimeSpan_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static TimeSpan op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_UInt32_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_op_Explicit_System_Xml_Linq_XElement_to_System_UInt64_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(XElement)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong op_Explicit (System.Xml.Linq.XElement element);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>element</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_GetSchema\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_GetSchema_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.GetSchema()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an XML schema definition that describes the XML representation of this object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.xml.schema.xmlschema\" data-linktype=\"relative-path\">XmlSchema</a> that describes the XML representation of the object that is produced by the <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.WriteXml*</span> method and consumed by the <span class=\"xref\">stem.Xml.Serialization.IXmlSerializable.ReadXml*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is part of implementation of the <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.  </p>\n<p> This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see <a href=\"../Topic/Serializing%20Object%20Graphs%20that%20Contain%20XElement%20Objects.md\" data-linktype=\"relative-path\">Serializing Object Graphs that Contain XElement Objects</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_ReadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.ReadXml(XmlReader)</div>        \r\n          </div>\r\n    \r\n            <p>Generates an object from its XML representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> from which the object is deserialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is part of implementation of the <a class=\"xref\" href=\"system.xml.serialization.ixmlserializable\" data-linktype=\"relative-path\">IXmlSerializable</a> interface.  </p>\n<p> This method is used internally for serializing object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see <a href=\"../Topic/Serializing%20Object%20Graphs%20that%20Contain%20XElement%20Objects.md\" data-linktype=\"relative-path\">Serializing Object Graphs that Contain XElement Objects</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_\">\r\n    \r\n            <a id=\"System_Xml_Linq_XElement_System_Xml_Serialization_IXmlSerializable_WriteXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IXmlSerializable.WriteXml(XmlWriter)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an object into its XML representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>writer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> to which this object is serialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used internally for marshaling object graphs that contain LINQ to XML objects. For an example of serializing an object graph that contains LINQ to XML objects, see <a href=\"../Topic/Serializing%20Object%20Graphs%20that%20Contain%20XElement%20Objects.md\" data-linktype=\"relative-path\">Serializing Object Graphs that Contain XElement Objects</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XElement.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.AncestorsAndSelf\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Attribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.DescendantNodesAndSelf\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.DescendantsAndSelf\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.EmptySequence\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.FirstAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.GetDefaultNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.GetNamespaceOfPrefix\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.GetPrefixOfNamespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.HasAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.HasElements\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.IsEmpty\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.LastAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Load\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Name\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.NodeType\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.op_op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Parse\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.RemoveAll\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.RemoveAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.ReplaceAll\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.ReplaceAttributes\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Save\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.SetAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.SetElementValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.SetValue\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.IXmlSerializable.GetSchema\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.IXmlSerializable.ReadXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.IXmlSerializable.WriteXml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.Value\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.XElement.WriteTo\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"52cedc8d-224d-41d9-68d2-471d479a1d2c\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Linq\\XElement.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an XML element.  See XElement Class Overview and the Remarks section on this page for usage information and examples.  \n To browse the .NET Framework source code for this type, see the Refâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Xml.Linq/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.XElement\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Xml.Linq.XElement.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Xml.Linq.XElement.yml","open_to_public_contributors":true,"api_name":["System.Xml.Linq.XElement","System.Xml.Linq.XElement..ctor","System.Xml.Linq.XElement.AncestorsAndSelf","System.Xml.Linq.XElement.Attribute","System.Xml.Linq.XElement.Attributes","System.Xml.Linq.XElement.DescendantNodesAndSelf","System.Xml.Linq.XElement.DescendantsAndSelf","System.Xml.Linq.XElement.EmptySequence","System.Xml.Linq.XElement.FirstAttribute","System.Xml.Linq.XElement.GetDefaultNamespace","System.Xml.Linq.XElement.GetNamespaceOfPrefix","System.Xml.Linq.XElement.GetPrefixOfNamespace","System.Xml.Linq.XElement.HasAttributes","System.Xml.Linq.XElement.HasElements","System.Xml.Linq.XElement.IsEmpty","System.Xml.Linq.XElement.LastAttribute","System.Xml.Linq.XElement.Load","System.Xml.Linq.XElement.Name","System.Xml.Linq.XElement.NodeType","System.Xml.Linq.XElement.op_Explicit","System.Xml.Linq.XElement.op_op_Explicit","System.Xml.Linq.XElement.Parse","System.Xml.Linq.XElement.RemoveAll","System.Xml.Linq.XElement.RemoveAttributes","System.Xml.Linq.XElement.ReplaceAll","System.Xml.Linq.XElement.ReplaceAttributes","System.Xml.Linq.XElement.Save","System.Xml.Linq.XElement.SetAttributeValue","System.Xml.Linq.XElement.SetElementValue","System.Xml.Linq.XElement.SetValue","System.Xml.Linq.XElement.IXmlSerializable.GetSchema","System.Xml.Linq.XElement.IXmlSerializable.ReadXml","System.Xml.Linq.XElement.IXmlSerializable.WriteXml","System.Xml.Linq.XElement.Value","System.Xml.Linq.XElement.WriteTo"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.XElement","System::Xml::Linq::XElement","System.Xml.Linq.XElement.#ctor","System::Xml::Linq::XElement::#ctor","System.Xml.Linq.XElement.AncestorsAndSelf","System::Xml::Linq::XElement::AncestorsAndSelf","System.Xml.Linq.XElement.Attribute","System::Xml::Linq::XElement::Attribute","System.Xml.Linq.XElement.Attributes","System::Xml::Linq::XElement::Attributes","System.Xml.Linq.XElement.DescendantNodesAndSelf","System::Xml::Linq::XElement::DescendantNodesAndSelf","System.Xml.Linq.XElement.DescendantsAndSelf","System::Xml::Linq::XElement::DescendantsAndSelf","System.Xml.Linq.XElement.EmptySequence","System::Xml::Linq::XElement::EmptySequence","System.Xml.Linq.XElement.FirstAttribute","System::Xml::Linq::XElement::FirstAttribute","System.Xml.Linq.XElement.GetDefaultNamespace","System::Xml::Linq::XElement::GetDefaultNamespace","System.Xml.Linq.XElement.GetNamespaceOfPrefix","System::Xml::Linq::XElement::GetNamespaceOfPrefix","System.Xml.Linq.XElement.GetPrefixOfNamespace","System::Xml::Linq::XElement::GetPrefixOfNamespace","System.Xml.Linq.XElement.HasAttributes","System::Xml::Linq::XElement::HasAttributes","System.Xml.Linq.XElement.HasElements","System::Xml::Linq::XElement::HasElements","System.Xml.Linq.XElement.IsEmpty","System::Xml::Linq::XElement::IsEmpty","System.Xml.Linq.XElement.LastAttribute","System::Xml::Linq::XElement::LastAttribute","System.Xml.Linq.XElement.Load","System::Xml::Linq::XElement::Load","System.Xml.Linq.XElement.Name","System::Xml::Linq::XElement::Name","System.Xml.Linq.XElement.NodeType","System::Xml::Linq::XElement::NodeType","System.Xml.Linq.XElement.op_Explicit","System::Xml::Linq::XElement::op_Explicit","System.Xml.Linq.XElement.Parse","System::Xml::Linq::XElement::Parse","System.Xml.Linq.XElement.RemoveAll","System::Xml::Linq::XElement::RemoveAll","System.Xml.Linq.XElement.RemoveAttributes","System::Xml::Linq::XElement::RemoveAttributes","System.Xml.Linq.XElement.ReplaceAll","System::Xml::Linq::XElement::ReplaceAll","System.Xml.Linq.XElement.ReplaceAttributes","System::Xml::Linq::XElement::ReplaceAttributes","System.Xml.Linq.XElement.Save","System::Xml::Linq::XElement::Save","System.Xml.Linq.XElement.SetAttributeValue","System::Xml::Linq::XElement::SetAttributeValue","System.Xml.Linq.XElement.SetElementValue","System::Xml::Linq::XElement::SetElementValue","System.Xml.Linq.XElement.SetValue","System::Xml::Linq::XElement::SetValue","System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema","System::Xml::Linq::XElement::System#Xml#Serialization#IXmlSerializable#GetSchema","System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml","System::Xml::Linq::XElement::System#Xml#Serialization#IXmlSerializable#ReadXml","System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml","System::Xml::Linq::XElement::System#Xml#Serialization#IXmlSerializable#WriteXml","System.Xml.Linq.XElement.Value","System::Xml::Linq::XElement::Value","System.Xml.Linq.XElement.WriteTo","System::Xml::Linq::XElement::WriteTo"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"52cedc8d-224d-41d9-68d2-471d479a1d2c","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Xml.Linq\\XElement.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Xml.Linq/XElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XElement class | Microsoft Docs","_op_ogTitle":"XElement class","description":"Represents an XML element.  See XElement Class Overview and the Remarks section on this page for usage information and examples.  \n To browse the .NET Framework source code for this type, see the Refâ€¦","toc_asset_id":"_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.XElement","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xelement","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.xml.linq.xelement","fileRelativePath":"System.Xml.Linq.XElement.html"},"themesRelativePathToOutputRoot":"_themes/"}