{"content":"    \r\n    <h1 id=\"System_IO_Directory\">\r\n      <span class=\"lang-csharp\">Directory</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class Directory</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Directory</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> Use the Directory class for typical operations such as copying, moving, renaming, creating, and deleting directories.  </p>\n<ul>\n<li><p>To create a directory, use one of the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_CreateDirectory_\" data-linktype=\"relative-path\">CreateDirectory</a> methods.  </p>\n</li>\n<li><p>To delete a directory, use one of the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_Delete_\" data-linktype=\"relative-path\">Delete</a> methods.  </p>\n</li>\n<li><p>To get or set the current directory for an app, use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> or <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_SetCurrentDirectory_\" data-linktype=\"relative-path\">SetCurrentDirectory</a> method.  </p>\n</li>\n<li><p>To manipulate <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> information related to the creation, access, and writing of a directory, use methods such as <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_SetLastAccessTime_\" data-linktype=\"relative-path\">SetLastAccessTime</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_SetCreationTime_\" data-linktype=\"relative-path\">SetCreationTime</a>.  </p>\n<p>The static methods of the Directory class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> instead, because the security check will not always be necessary.  </p>\n<p>If you are performing only one directory-related action, it might be more efficient to use a static Directory method rather than a corresponding <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> instance method. Most Directory methods require the path to the directory that you are manipulating.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> In members that accept a string <code>path</code> parameter, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space (&quot; c:\\temp&quot;), the path string isn&#39;t trimmed, so the path is considered malformed and an exception is raised. In addition, a path or a combination of paths cannot be fully qualified twice. For example, &quot;c:\\temp c:\\windows&quot; also raises an exception. Ensure that your paths are well-formed when using methods that accept a path string. For more information see <a class=\"xref\" href=\"system.io.path\" data-linktype=\"relative-path\">Path</a>.  </p>\n</div>\n<p> In members that accept a path, the path can refer to a file or a directory. You can use a full path, a relative path, or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  </p>\n<ul>\n<li><p>&quot;c:\\\\MyDir&quot; in C#, or &quot;c:\\MyDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;MyDir\\\\MySubdir&quot; in C#, or &quot;MyDir\\MySubDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;\\\\\\\\MyServer\\\\MyShare&quot; in C#, or &quot;\\\\MyServer\\MyShare&quot; in Visual Basic.  </p>\n<p>By default, full read/write access to new directories is granted to all users. However, the app must have the correct security to access existing directories.  </p>\n<p>To demand permissions for a directory and all its subdirectories, end the path string with the directory separator character. (For example, &quot;C:\\Temp\\&quot; grants access to C:\\Temp\\ and all its subdirectories.) To demand permissions only for a specific directory, end the path string with a period. (For example, &quot;C:\\Temp\\.&quot; grants access only to C:\\Temp\\, not to its subdirectories.)  </p>\n<p>In members that accept a <code>searchPattern</code> parameter, the search string can be any combination of literal characters and two wildcard characters; * and ?. This parameter does not recognize regular expressions. For more information, see the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_System_String_System_String_\" data-linktype=\"relative-path\">EnumerateDirectories(String,String)</a> method or any other method that uses the <code>searchPattern</code> parameter.  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.  </p>\n<p>Directory and <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> are not supported for use in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appstore-long-md.md&quot; -->Windows Store<!--END INCLUDE --> apps. For information about how to access files and folders in <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appstore-long-md.md&quot; -->Windows Store<!--END INCLUDE --> apps, see <a href=\"http://msdn.microsoft.com/library/windows/apps/hh758319.aspx\" data-linktype=\"external\">Accessing data and files (Windows Store apps)</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_CreateDirectory_System_String_\" data-linktype=\"self-bookmark\">CreateDirectory(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates all directories and subdirectories in the specified path unless they already exist.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_CreateDirectory_System_String_System_Security_AccessControl_DirectorySecurity_\" data-linktype=\"self-bookmark\">CreateDirectory(String,DirectorySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_Delete_System_String_\" data-linktype=\"self-bookmark\">Delete(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes an empty directory from a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_Delete_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Delete(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Deletes the specified directory and, if indicated, any subdirectories and files in the directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateDirectories_System_String_\" data-linktype=\"self-bookmark\">EnumerateDirectories(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of directory names in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateDirectories_System_String_System_String_\" data-linktype=\"self-bookmark\">EnumerateDirectories(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of directory names that match a search pattern in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateDirectories_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">EnumerateDirectories(String,String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateFiles_System_String_\" data-linktype=\"self-bookmark\">EnumerateFiles(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file names in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateFiles_System_String_System_String_\" data-linktype=\"self-bookmark\">EnumerateFiles(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file names that match a search pattern in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateFiles_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">EnumerateFiles(String,String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateFileSystemEntries_System_String_\" data-linktype=\"self-bookmark\">EnumerateFileSystemEntries(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file names and directory names in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateFileSystemEntries_System_String_System_String_\" data-linktype=\"self-bookmark\">EnumerateFileSystemEntries(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_EnumerateFileSystemEntries_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">EnumerateFileSystemEntries(String,String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_Exists_System_String_\" data-linktype=\"self-bookmark\">Exists(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the given path refers to an existing directory on disk.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetAccessControl_System_String_\" data-linktype=\"self-bookmark\">GetAccessControl(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the access control list (ACL) entries for a specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetAccessControl_System_String_System_Security_AccessControl_AccessControlSections_\" data-linktype=\"self-bookmark\">GetAccessControl(String,AccessControlSections)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetCreationTime_System_String_\" data-linktype=\"self-bookmark\">GetCreationTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the creation date and time of a directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetCreationTimeUtc_System_String_\" data-linktype=\"self-bookmark\">GetCreationTimeUtc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetCurrentDirectory\" data-linktype=\"self-bookmark\">GetCurrentDirectory()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current working directory of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetDirectories_System_String_\" data-linktype=\"self-bookmark\">GetDirectories(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of subdirectories (including their paths) in the specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetDirectories_System_String_System_String_\" data-linktype=\"self-bookmark\">GetDirectories(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetDirectories_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">GetDirectories(String,String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetDirectoryRoot_System_String_\" data-linktype=\"self-bookmark\">GetDirectoryRoot(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the volume information, root information, or both for the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetFiles_System_String_\" data-linktype=\"self-bookmark\">GetFiles(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of files (including their paths) in the specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetFiles_System_String_System_String_\" data-linktype=\"self-bookmark\">GetFiles(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetFiles_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">GetFiles(String,String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetFileSystemEntries_System_String_\" data-linktype=\"self-bookmark\">GetFileSystemEntries(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the names of all files and subdirectories in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetFileSystemEntries_System_String_System_String_\" data-linktype=\"self-bookmark\">GetFileSystemEntries(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of file names and directory names that that match a search pattern in a specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetFileSystemEntries_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"self-bookmark\">GetFileSystemEntries(String,String,SearchOption)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetLastAccessTime_System_String_\" data-linktype=\"self-bookmark\">GetLastAccessTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time the specified file or directory was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetLastAccessTimeUtc_System_String_\" data-linktype=\"self-bookmark\">GetLastAccessTimeUtc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetLastWriteTime_System_String_\" data-linktype=\"self-bookmark\">GetLastWriteTime(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time the specified file or directory was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetLastWriteTimeUtc_System_String_\" data-linktype=\"self-bookmark\">GetLastWriteTimeUtc(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetLogicalDrives\" data-linktype=\"self-bookmark\">GetLogicalDrives()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the names of the logical drives on this computer in the form &quot;<drive letter=\"\">:\\&quot;.<p>\n</drive>\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_GetParent_System_String_\" data-linktype=\"self-bookmark\">GetParent(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the parent directory of the specified path, including both absolute and relative paths.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_Move_System_String_System_String_\" data-linktype=\"self-bookmark\">Move(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves a file or a directory and its contents to a new location.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetAccessControl_System_String_System_Security_AccessControl_DirectorySecurity_\" data-linktype=\"self-bookmark\">SetAccessControl(String,DirectorySecurity)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to the specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetCreationTime_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetCreationTime(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the creation date and time for the specified file or directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetCreationTimeUtc_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetCreationTimeUtc(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetCurrentDirectory_System_String_\" data-linktype=\"self-bookmark\">SetCurrentDirectory(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the application&#39;s current working directory to the specified directory.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetLastAccessTime_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastAccessTime(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time the specified file or directory was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetLastAccessTimeUtc_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastAccessTimeUtc(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetLastWriteTime_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastWriteTime(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time a directory was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Directory_SetLastWriteTimeUtc_System_String_System_DateTime_\" data-linktype=\"self-bookmark\">SetLastWriteTimeUtc(String,DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_CreateDirectory_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_CreateDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDirectory(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates all directories and subdirectories in the specified path unless they already exist.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.DirectoryInfo CreateDirectory (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The directory to create.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory specified by <code>path</code> is a file.  </p>\n<p> -or-  </p>\n<p> The network name is not known.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is prefixed with, or contains, only a colon character (:).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains a colon character (:) that is not part of a drive label (&quot;C:\\&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any and all directories specified in <code>path</code> are created, unless they already exist or unless some part of <code>path</code> is invalid. If the directory already exists, this method does not create a new directory, but it returns a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object for the existing directory.  </p>\n<p> The <code>path</code> parameter specifies a directory path, not a file path.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before creating the directory.  </p>\n<p> You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for <code>path</code>: <code>\\\\2009\\Archives\\December</code> in Visual Basic, and <code>\\\\\\\\2009\\\\Archives\\\\December</code> in C#.  </p>\n<p> Creating a directory with only the colon character (:) is not supported, and will cause a <code>NotSupportedException</code> to be thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates and deletes the specified directory.  </p>\n<pre><code class=\"lang-cs\" name=\"Dir_CreateDir#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        // Specify the directory you want to manipulate.\n        string path = @&quot;c:\\MyDir&quot;;\n\n        try \n        {\n            // Determine whether the directory exists.\n            if (Directory.Exists(path)) \n            {\n                Console.WriteLine(&quot;That path exists already.&quot;);\n                return;\n            }\n\n            // Try to create the directory.\n            DirectoryInfo di = Directory.CreateDirectory(path);\n            Console.WriteLine(&quot;The directory was created successfully at {0}.&quot;, Directory.GetCreationTime(path));\n\n            // Delete the directory.\n            di.Delete();\n            Console.WriteLine(&quot;The directory was deleted successfully.&quot;);\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        } \n        finally {}\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_CreateDir#1\">Imports System\nImports System.IO\nImports Microsoft.VisualBasic\n\nPublic Class Test\n    Public Shared Sub Main()\n        &#39; Specify the directory you want to manipulate.\n        Dim path As String = &quot;c:\\MyDir&quot;\n\n        Try\n            &#39; Determine whether the directory exists.\n            If Directory.Exists(path) Then\n                Console.WriteLine(&quot;That path exists already.&quot;)\n                Return\n            End If\n\n            &#39; Try to create the directory.\n            Dim di As DirectoryInfo = Directory.CreateDirectory(path)\n            Console.WriteLine(&quot;The directory was created successfully at {0}.&quot;, Directory.GetCreationTime(path))\n\n            &#39; Delete the directory.\n            di.Delete()\n            Console.WriteLine(&quot;The directory was deleted successfully.&quot;)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}.&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dir_CreateDir#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Specify the directory you want to manipulate.\n   String^ path = &quot;c:\\\\MyDir&quot;;\n   try\n   {\n      \n      // Determine whether the directory exists.\n      if ( Directory::Exists( path ) )\n      {\n         Console::WriteLine( &quot;That path exists already.&quot; );\n         return 0;\n      }\n      \n      // Try to create the directory.\n      DirectoryInfo^ di = Directory::CreateDirectory( path );\n      Console::WriteLine( &quot;The directory was created successfully at {0}.&quot;, Directory::GetCreationTime( path ) );\n      \n      // Delete the directory.\n      di-&gt;Delete();\n      Console::WriteLine( &quot;The directory was deleted successfully.&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><p> To create the directory C:\\Users\\User1\\Public\\Html when the current directory is C:\\Users\\User1, use any of the following calls to ensure that the backslash is interpreted properly.  </p>\n<p> In Visual Basic:  </p>\n<pre><code>Directory.CreateDirectory(&quot;Public\\Html&quot;)   \n    Directory.CreateDirectory(&quot;\\Users\\User1\\Public\\Html&quot;)   \n    Directory.CreateDirectory(&quot;c:\\Users\\User1\\Public\\Html&quot;)\n</code></pre><p> In C#:  </p>\n<pre><code>Directory.CreateDirectory(&quot;Public\\\\Html&quot;);  \n    Directory.CreateDirectory(&quot;\\\\Users\\\\User1\\\\Public\\\\Html&quot;);  \n    Directory.CreateDirectory(&quot;c:\\\\Users\\\\User1\\\\Public\\\\Html&quot;);\n</code></pre><p> In C++:  </p>\n<pre><code>Directory::CreateDirectory(&quot;Public\\\\Html&quot;);  \n    Directory::CreateDirectory(&quot;\\\\Users\\\\User1\\\\Public\\\\Html&quot;);  \n    Directory::CreateDirectory(&quot;c:\\\\Users\\\\User1\\\\Public\\\\Html&quot;);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_CreateDirectory_System_String_System_Security_AccessControl_DirectorySecurity_\">\r\n    \r\n            <a id=\"System_IO_Directory_CreateDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateDirectory(String,DirectorySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The directory to create.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>directorySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The access control to apply to the directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory specified by <code>path</code> is a file.  </p>\n<p> -or-  </p>\n<p> The network name is not known.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> -or-  </p>\n<p> <code>path</code> is prefixed with, or contains, only a colon character (:).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains a colon character (:) that is not part of a drive label (&quot;C:\\&quot;).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  </p>\n<p> Any and all directories specified in the <code>path</code> parameter are created, unless they already exist or unless some part of <code>path</code> is invalid. The <code>path</code> parameter specifies a directory path, not a file path. If the directory already exists, this method does not create a new directory, but it returns a <a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> object for the existing directory.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before creating the directory.  </p>\n<p> You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for <code>path</code>: <code>\\\\2009\\Archives\\December</code> in Visual Basic, and <code>\\\\\\\\2009\\\\Archives\\\\December</code> in C#.  </p>\n<p> Creating a directory with only the colon character (:) is not supported and causes a <code>NotSupportedException</code> to be thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a new directory with access rules for two user accounts.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#15\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DirectorySecurity securityRules = new DirectorySecurity();\n            securityRules.AddAccessRule(new FileSystemAccessRule(@&quot;Domain\\account1&quot;, FileSystemRights.Read, AccessControlType.Allow));\n            securityRules.AddAccessRule(new FileSystemAccessRule(@&quot;Domain\\account2&quot;, FileSystemRights.FullControl, AccessControlType.Allow));\n\n            DirectoryInfo di = Directory.CreateDirectory(@&quot;C:\\destination<br>ewDirectory&quot;, securityRules);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#15\">Imports System.IO\nImports System.Security.AccessControl\n\nModule Module1\n\n    Sub Main()\n        Dim securityRules As DirectorySecurity = New DirectorySecurity()\n        securityRules.AddAccessRule(New FileSystemAccessRule(&quot;Domain\\account1&quot;, FileSystemRights.Read, AccessControlType.Allow))\n        securityRules.AddAccessRule(New FileSystemAccessRule(&quot;Domain\\account2&quot;, FileSystemRights.FullControl, AccessControlType.Allow))\n\n        Dim di As DirectoryInfo = Directory.CreateDirectory(&quot;C:\\destination<br>ewDirectory&quot;, securityRules)\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_Delete_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete(String)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes an empty directory from a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Delete (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the empty directory to remove. This directory must be writable and empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A file with the same name and location specified by <code>path</code> exists.  </p>\n<p> -or-  </p>\n<p> The directory is the application&#39;s current working directory.  </p>\n<p> -or-  </p>\n<p> The directory specified by <code>path</code> is not empty.  </p>\n<p> -or-  </p>\n<p> The directory is read-only or contains a read-only file.  </p>\n<p> -or-  </p>\n<p> The directory is being used by another process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> does not exist or could not be found.  </p>\n<p> -or-  </p>\n<p> The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method behaves identically to <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_Delete_System_String_System_Boolean_\" data-linktype=\"relative-path\">Delete(String,Boolean)</a> with <code>false</code> specified for the second parameter.  </p>\n<p> The <code>path</code> parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before deleting the directory.  </p>\n<p> This method throws an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> if the directory specified in the <code>path</code> parameter contains files or subdirectories.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> In some cases, if you have the specified directory open in File Explorer, the Delete method may not be able to delete it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a new directory and subdirectory, and then delete only the subdirectory.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Directory.Delete#1\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim subPath = &quot;C:<br>ewDirectory<br>ewSubDirectory&quot;\n\n        Try\n            Directory.CreateDirectory(subPath)\n            Directory.Delete(subPath)\n\n            Dim directoryExists = Directory.Exists(&quot;C:<br>ewDirectory&quot;)\n            Dim subDirectoryExists = Directory.Exists(subPath)\n\n            Console.WriteLine(&quot;top-level directory exists: &quot; &amp; directoryExists)\n            Console.WriteLine(&quot;sub-directory exists: &quot; &amp; subDirectoryExists)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.Message)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Directory.Delete#1\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string subPath = @&quot;C:<br>ewDirectory<br>ewSubDirectory&quot;;\n\n            try\n            {\n                Directory.CreateDirectory(subPath);   \n                Directory.Delete(subPath);\n\n                bool directoryExists = Directory.Exists(@&quot;C:<br>ewDirectory&quot;);\n                bool subDirectoryExists = Directory.Exists(subPath);\n\n                Console.WriteLine(&quot;top-level directory exists: &quot; + directoryExists);\n                Console.WriteLine(&quot;sub-directory exists: &quot; + subDirectoryExists);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;The process failed: {0}&quot;, e.Message);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_Delete_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_Directory_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Deletes the specified directory and, if indicated, any subdirectories and files in the directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Delete (string path, bool recursive);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the directory to remove.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>recursive</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to remove directories, subdirectories, and files in <code>path</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>A file with the same name and location specified by <code>path</code> exists.  </p>\n<p> -or-  </p>\n<p> The directory specified by <code>path</code> is read-only, or <code>recursive</code> is <code>false</code> and <code>path</code> is not an empty directory.  </p>\n<p> -or-  </p>\n<p> The directory is the application&#39;s current working directory.  </p>\n<p> -or-  </p>\n<p> The directory contains a read-only file.  </p>\n<p> -or-  </p>\n<p> The directory is being used by another process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> does not exist or could not be found.  </p>\n<p> -or-  </p>\n<p> The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before deleting the directory.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> If the <code>recursive</code> parameter is <code>true</code>, the user must have write permission for the current directory as well as for all subdirectories.  </p>\n<p> The behavior of this method differs slightly when deleting a directory that contains a reparse point, such as a symbolic link or a mount point. If the reparse point is a directory, such as a mount point, it is unmounted and the mount point is deleted. This method does not recurse through the reparse point. If the reparse point is a symbolic link to a file, the reparse point is deleted and not the target of the symbolic link.  </p>\n<p> In some cases, if you have the specified directory open in File Explorer, the Delete method may not be able to delete it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a new directory, subdirectory, and file in the subdirectory, and then recursively delete all the new items.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory.Delete#2\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string topPath = @&quot;C:<br>ewDirectory&quot;;\n            string subPath = @&quot;C:<br>ewDirectory<br>ewSubDirectory&quot;;\n            \n            try\n            {\n                Directory.CreateDirectory(subPath);\n\n                using (StreamWriter writer = File.CreateText(subPath + @&quot;\\example.txt&quot;))\n                {\n                    writer.WriteLine(&quot;content added&quot;);\n                }\n                \n                Directory.Delete(topPath, true);\n\n                bool directoryExists = Directory.Exists(topPath);\n\n                Console.WriteLine(&quot;top-level directory exists: &quot; + directoryExists);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;The process failed: {0}&quot;, e.Message);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory.Delete#2\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim topPath = &quot;C:<br>ewDirectory&quot;\n        Dim subPath = &quot;C:<br>ewDirectory<br>ewSubDirectory&quot;\n\n        Try\n            Directory.CreateDirectory(subPath)\n\n            Using writer As StreamWriter = File.CreateText(subPath + &quot;\\example.txt&quot;)\n                writer.WriteLine(&quot;content added&quot;)\n            End Using\n\n            Directory.Delete(topPath, True)\n\n            Dim directoryExists = Directory.Exists(topPath)\n\n            Console.WriteLine(&quot;top-level directory exists: &quot; &amp; directoryExists)\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.Message)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateDirectories_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateDirectories(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of directory names in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the full names (including paths) for the directories in the directory specified by <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify relative or absolute path information in the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method. The returned directory names are prefixed with the value you provided in the <code>path</code> parameter. For example, if you provide a relative path in the <code>path</code> parameter, the returned directory names will contain a relative path.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the top-level directories in a specified path.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.EnumDirs1#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Linq\n\nModule Module1\n\n    Sub Main()\n        Try\n            Dim dirPath As String = &quot;\\\\archives\\2009\\reports&quot;\n\n            Dim dirs As List(Of String) = New List(Of String)(Directory.EnumerateDirectories(dirPath))\n\n            For Each folder In dirs\n                Console.WriteLine(&quot;{0}&quot;, folder.Substring(folder.LastIndexOf(&quot;\\&quot;) + 1))\n            Next\n            Console.WriteLine(&quot;{0} directories found.&quot;, dirs.Count)\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.EnumDirs1#1\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n    private static void Main(string[] args)\n    {\n        try\n        {\n            string dirPath = @&quot;\\\\archives\\2009\\reports&quot;;\n\n            List&lt;string&gt; dirs = new List&lt;string&gt;(Directory.EnumerateDirectories(dirPath));\n                    \n            foreach (var dir in dirs)\n            {\n                Console.WriteLine(&quot;{0}&quot;, dir.Substring(dir.LastIndexOf(&quot;\\\\&quot;) + 1));\n            }\n            Console.WriteLine(&quot;{0} directories found.&quot;,  dirs.Count);\n        }\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateDirectories_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateDirectories(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of directory names that match a search pattern in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the full names (including paths) for the directories in the directory specified by <code>path</code> and that match the specified search pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> You can specify relative or absolute path information in the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method. The returned directory names are prefixed with the value you provided in the <code>path</code> parameter. For example, if you provide a relative path in the <code>path</code> parameter, the returned directory names will contain a relative path.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the top-level directories in a specified path that match a specified search pattern.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.EnumDirs2#1\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n\n    private static void Main(string[] args)\n    {\n        try\n        {\n            string dirPath = @&quot;\\\\archives\\2009\\reports&quot;;\n            \n            // LINQ query.\n            var dirs = from dir in \n                     Directory.EnumerateDirectories(dirPath, &quot;dv_*&quot;)\n                       select dir;\n\n            // Show results.\n            foreach (var dir in dirs)\n            {\n                // Remove path information from string.\n                Console.WriteLine(&quot;{0}&quot;, \n                    dir.Substring(dir.LastIndexOf(&quot;\\\\&quot;) + 1));\n\n            }\n            Console.WriteLine(&quot;{0} directories found.&quot;, \n                dirs.Count&lt;string&gt;().ToString());\n\n            // Optionally create a List collection.\n            List&lt;string&gt; workDirs = new List&lt;string&gt;(dirs);\n        }\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.EnumDirs2#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Linq\n\nModule Module1\n\n    Sub Main()\n        Try\n            Dim dirPath As String = &quot;\\\\archives\\2009\\reports&quot;\n\n            &#39; LINQ query.\n            Dim dirs = From folder In _\n                Directory.EnumerateDirectories(dirPath, &quot;dv_*&quot;)\n            For Each folder In dirs\n                &#39; Remove path infomration from string.\n                Console.WriteLine(&quot;{0}&quot;, _\n                        folder.Substring(folder.LastIndexOf(&quot;\\&quot;) + 1))\n            Next\n            Console.WriteLine(&quot;{0} directories found.&quot;, _\n                dirs.Count.ToString())\n\n            &#39; Optionally create a List collection.\n            Dim workDirs As List(Of String) = New List(Of String)\n\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateDirectories_System_String_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateDirectories(String,String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of directories in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.  </p>\n<p> The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the full names (including paths) for the directories in the directory specified by <code>path</code> and that match the specified search pattern and option.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Exactly one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> You can specify relative or absolute path information in the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method. The returned directory names are prefixed with the value you provided in the <code>path</code> parameter. For example, if you provide a relative path in the <code>path</code> parameter, the returned directory names will contain a relative path.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates directories in a specified path that match a specified search pattern. It uses the <code>searchOption</code> parameter to specify that all subdirectories should be included in the search.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.EnumDirs3#1\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n\n    private static void Main(string[] args)\n    {\n        try\n        {\n            string dirPath = @&quot;\\\\archives\\2009\\reports&quot;;\n            \n            // LINQ query.\n            var dirs = from dir in \n                     Directory.EnumerateDirectories(dirPath, &quot;dv_*&quot;,\n                     \tSearchOption.AllDirectories)\n                       select dir;\n\n            // Show results.\n            foreach (var dir in dirs)\n            {\n                // Remove path information from string.\n                Console.WriteLine(&quot;{0}&quot;, \n                    dir.Substring(dir.LastIndexOf(&quot;\\\\&quot;) + 1));\n\n            }\n            Console.WriteLine(&quot;{0} directories found.&quot;, \n                dirs.Count&lt;string&gt;().ToString());\n\n            // Optionally create a List collection.\n            List&lt;string&gt; workDirs = new List&lt;string&gt;(dirs);\n        }\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.EnumDirs3#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Linq\n\nModule Module1\n\n    Sub Main()\n        Try\n            Dim dirPath As String = &quot;\\\\archives\\2009\\reports&quot;\n\n            &#39; LINQ query.\n            Dim dirs = From folder In _\n                Directory.EnumerateDirectories(dirPath, &quot;dv_*&quot;, _\n                \tSearchOption.AllDirectories)\n            For Each folder In dirs\n                &#39; Remove path infomration from string.\n                Console.WriteLine(&quot;{0}&quot;, _\n                        folder.Substring(folder.LastIndexOf(&quot;\\&quot;) + 1))\n            Next\n            Console.WriteLine(&quot;{0} directories found.&quot;, _\n                dirs.Count.ToString())\n\n            &#39; Optionally create a List collection.\n            Dim workDirs As List(Of String) = New List(Of String)\n\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateFiles_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFiles(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file names in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the full names (including paths) for the files in the directory specified by <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to retrieve all the files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#12\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string sourceDirectory = @&quot;C:\\current&quot;;\n            string archiveDirectory = @&quot;C:\\archive&quot;;\n\n            try\n            {\n                var txtFiles = Directory.EnumerateFiles(sourceDirectory);\n\n                foreach (string currentFile in txtFiles)\n                {\n                    string fileName = currentFile.Substring(sourceDirectory.Length + 1);\n                    Directory.Move(currentFile, Path.Combine(archiveDirectory, fileName));\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#12\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim sourceDirectory As String = &quot;C:\\current&quot;\n        Dim archiveDirectory As String = &quot;C:\\archive&quot;\n\n        Try\n            Dim txtFiles = Directory.EnumerateFiles(sourceDirectory)\n\n            For Each currentFile As String In txtFiles\n                Dim fileName = currentFile.Substring(sourceDirectory.Length + 1)\n                Directory.Move(currentFile, Path.Combine(archiveDirectory, fileName))\n            Next\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n    End Sub\n\nEnd Module\n</code></pre><p> The following example enumerates the files in the specified directory, reads each line of the file, and displays the line if it contains the string &quot;Europe&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory.EnumFiles#1\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            // LINQ query for all files containing the word &#39;Europe&#39;.\n            var files = from file in \n                Directory.EnumerateFiles(@&quot;\\\\archives1\\library\\&quot;)\n                where file.ToLower().Contains(&quot;europe&quot;)\n                select file;\n\n            foreach (var file in files)\n            {\n                Console.WriteLine(&quot;{0}&quot;, file);\n            }\n            Console.WriteLine(&quot;{0} files found.&quot;, files.Count&lt;string&gt;().ToString());\n        }\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory.EnumFiles#1\">Imports System.IO\nImports System.Linq\nModule Module1\n\n    Sub Main()\n        Try\n            &#39; LINQ query for all files containing the word &#39;Europe&#39;.\n            Dim files = From file In Directory.EnumerateFiles(&quot;\\\\archives1\\library\\&quot;)\n                Where file.ToLower().Contains(&quot;europe&quot;)\n\n            For Each file In files\n                Console.WriteLine(&quot;{0}&quot;, file)\n            Next\n            Console.WriteLine(&quot;{0} files found.&quot;, files.Count.ToString())\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateFiles_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFiles(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file names that match a search pattern in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the full names (including paths) for the files in the directory specified by <code>path</code> and that match the specified search pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to retrieve all the text files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#10\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string sourceDirectory = @&quot;C:\\current&quot;;\n            string archiveDirectory = @&quot;C:\\archive&quot;;\n\n            try\n            {\n                var txtFiles = Directory.EnumerateFiles(sourceDirectory, &quot;*.txt&quot;);\n\n                foreach (string currentFile in txtFiles)\n                {\n                    string fileName = currentFile.Substring(sourceDirectory.Length + 1);\n                    Directory.Move(currentFile, Path.Combine(archiveDirectory, fileName));\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#10\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim sourceDirectory As String = &quot;C:\\current&quot;\n        Dim archiveDirectory As String = &quot;C:\\archive&quot;\n\n        Try\n            Dim txtFiles = Directory.EnumerateFiles(sourceDirectory, &quot;*.txt&quot;)\n\n            For Each currentFile As String In txtFiles\n                Dim fileName = currentFile.Substring(sourceDirectory.Length + 1)\n                Directory.Move(currentFile, Path.Combine(archiveDirectory, fileName))\n            Next\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre><p> The following example enumerates the files in the specified directory that have a .txt extension, reads each line of the file, and displays the line if it contains the string &quot;Europe&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory.EnumFiles2#1\">using System;\nusing System.Linq;\nusing System.IO;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            // LINQ query for all .txt files containing the word &#39;Europe&#39;.\n            var files = from file in Directory.EnumerateFiles(@&quot;\\\\archives1\\library\\&quot;, &quot;*.txt&quot;)\n                where file.ToLower().Contains(&quot;europe&quot;)\n                select file;\n\n            foreach (var file in files)\n            {\n                Console.WriteLine(&quot;{0}&quot;, file);\n            }\n            Console.WriteLine(&quot;{0} files found.&quot;, files.Count&lt;string&gt;().ToString());\n        }\n\t\t\t\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory.EnumFiles2#1\">Imports System.IO\nImports System.Linq\nModule Module1\n\n    Sub Main()\n        Try\n            &#39; LINQ query for all .txt files containing the word &#39;Europe&#39;.\n            Dim files = From file In Directory.EnumerateFiles(&quot;\\\\archives1\\library\\&quot;, &quot;*.txt&quot;)\n                Where file.ToLower().Contains(&quot;europe&quot;)\n\n            For Each file In files\n                Console.WriteLine(&quot;{0}&quot;, file)\n            Next\n            Console.WriteLine(&quot;{0} files found.&quot;, files.Count.ToString())\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateFiles_System_String_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFiles(String,String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.  </p>\n<p> The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of the full names (including paths) for the files in the directory specified by <code>path</code> and that match the specified search pattern and option.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to retrieve all the text files in a directory and its subdirectories, and move them to a new directory. After the files are moved, they no longer exist in the original directories.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#13\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string sourceDirectory = @&quot;C:\\current&quot;;\n            string archiveDirectory = @&quot;C:\\archive&quot;;\n\n            try\n            {\n                var txtFiles = Directory.EnumerateFiles(sourceDirectory, &quot;*.txt&quot;, SearchOption.AllDirectories);\n\n                foreach (string currentFile in txtFiles)\n                {\n                    string fileName = currentFile.Substring(sourceDirectory.Length + 1);\n                    Directory.Move(currentFile, Path.Combine(archiveDirectory, fileName));\n                }\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#13\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim sourceDirectory As String = &quot;C:\\current&quot;\n        Dim archiveDirectory As String = &quot;C:\\archive&quot;\n\n        Try\n            Dim txtFiles = Directory.EnumerateFiles(sourceDirectory, &quot;*.txt&quot;, SearchOption.AllDirectories)\n\n            For Each currentFile As String In txtFiles\n                Dim fileName = currentFile.Substring(sourceDirectory.Length + 1)\n                Directory.Move(currentFile, Path.Combine(archiveDirectory, fileName))\n            Next\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n    End Sub\n\nEnd Module\n</code></pre><p> The following example recursively enumerates all files that have a .txt extension, reads each line of the file, and displays the line if it contains the string &quot;Microsoft&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory.EnumerateFiles#1\">using System;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            var files = from file in Directory.EnumerateFiles(@&quot;c:\\&quot;, &quot;*.txt&quot;, SearchOption.AllDirectories)\n                        from line in File.ReadLines(file)\n                        where line.Contains(&quot;Microsoft&quot;)\n                        select new\n                        {\n                            File = file,\n                            Line = line\n                        };\n\n            foreach (var f in files)\n            {\n                Console.WriteLine(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, f.File, f.Line);\n            }\n\t\t\tConsole.WriteLine(&quot;{0} files found.&quot;, files.Count().ToString());\n        }\n        catch (UnauthorizedAccessException UAEx)\n        {\n            Console.WriteLine(UAEx.Message);\n        }\n        catch (PathTooLongException PathEx)\n        {\n            Console.WriteLine(PathEx.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory.EnumerateFiles#1\">Imports System.IO\nImports System.Xml.Linq\nModule Module1\n\n    Sub Main()\n        Try\n            Dim files = From chkFile In Directory.EnumerateFiles(&quot;c:\\&quot;, &quot;*.txt&quot;, SearchOption.AllDirectories)\n                        From line In File.ReadLines(chkFile)\n                        Where line.Contains(&quot;Microsoft&quot;)\n                        Select New With {.curFile = chkFile, .curLine = line}\n\n            For Each f In files\n                Console.WriteLine(&quot;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, f.curFile, f.curLine)\n            Next\n            Console.WriteLine(&quot;{0} files found.&quot;, files.Count.ToString())\n        Catch UAEx As UnauthorizedAccessException\n            Console.WriteLine(UAEx.Message)\n        Catch PathEx As PathTooLongException\n            Console.WriteLine(PathEx.Message)\n        End Try\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateFileSystemEntries_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateFileSystemEntries_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFileSystemEntries(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file names and directory names in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of file-system entries in the directory specified by <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a>, you can start enumerating the collection of entries before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateFileSystemEntries_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateFileSystemEntries_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFileSystemEntries(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of file-system entries in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of file-system entries in the directory specified by <code>path</code> and that match the specified search pattern.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>..  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a>, you can start enumerating the collection of entries before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_EnumerateFileSystemEntries_System_String_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_Directory_EnumerateFileSystemEntries_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnumerateFileSystemEntries(String,String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against file-system entries in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.  </p>\n<p> The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>An enumerable collection of file-system entries in the directory specified by <code>path</code> and that match the specified search pattern and option.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a>, you can start enumerating the collection of entries before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned collection is not cached; each call to the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> on the collection will start a new enumeration.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_Exists_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_Exists_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Exists(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the given path refers to an existing directory on disk.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Exists (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>path</code> refers to an existing directory; <code>false</code> if the directory does not exist or an error occurs when trying to determine if the specified directory exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before checking whether the directory exists.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> If you do not have at a minimum read-only permission to the directory, the Exists method will return <code>false</code>.  </p>\n<p> The Exists method returns <code>false</code> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  </p>\n<pre><code class=\"lang-cpp\" name=\"Recursive file finder#2\">// For File::Exists, Directory::Exists\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Collections;\n\n// Insert logic for processing found files here.\nvoid ProcessFile( String^ path )\n{\n   Console::WriteLine( &quot;Processed file &#39;{0}&#39;.&quot;, path );\n}\n\n\n// Process all files in the directory passed in, recurse on any directories \n// that are found, and process the files they contain.\nvoid ProcessDirectory( String^ targetDirectory )\n{\n   \n   // Process the list of files found in the directory.\n   array&lt;String^&gt;^fileEntries = Directory::GetFiles( targetDirectory );\n   IEnumerator^ files = fileEntries-&gt;GetEnumerator();\n   while ( files-&gt;MoveNext() )\n   {\n      String^ fileName = safe_cast&lt;String^&gt;(files-&gt;Current);\n      ProcessFile( fileName );\n   }\n\n   \n   // Recurse into subdirectories of this directory.\n   array&lt;String^&gt;^subdirectoryEntries = Directory::GetDirectories( targetDirectory );\n   IEnumerator^ dirs = subdirectoryEntries-&gt;GetEnumerator();\n   while ( dirs-&gt;MoveNext() )\n   {\n      String^ subdirectory = safe_cast&lt;String^&gt;(dirs-&gt;Current);\n      ProcessDirectory( subdirectory );\n   }\n}\n\nint main( int argc, char *argv[] )\n{\n   for ( int i = 1; i &lt; argc; i++ )\n   {\n      String^ path = gcnew String(argv[ i ]);\n      if ( File::Exists( path ) )\n      {\n         \n         // This path is a file\n         ProcessFile( path );\n      }\n      else\n      if ( Directory::Exists( path ) )\n      {\n         \n         // This path is a directory\n         ProcessDirectory( path );\n      }\n      else\n      {\n         Console::WriteLine( &quot;{0} is not a valid file or directory.&quot;, path );\n      }\n\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Recursive file finder#2\">// For File.Exists, Directory.Exists\nusing System;\nusing System.IO;\nusing System.Collections;\n\npublic class RecursiveFileProcessor \n{\n    public static void Main(string[] args) \n    {\n        foreach(string path in args) \n        {\n            if(File.Exists(path)) \n            {\n                // This path is a file\n                ProcessFile(path); \n            }               \n            else if(Directory.Exists(path)) \n            {\n                // This path is a directory\n                ProcessDirectory(path);\n            }\n            else \n            {\n                Console.WriteLine(&quot;{0} is not a valid file or directory.&quot;, path);\n            }        \n        }        \n    }\n\n\n    // Process all files in the directory passed in, recurse on any directories \n    // that are found, and process the files they contain.\n    public static void ProcessDirectory(string targetDirectory) \n    {\n        // Process the list of files found in the directory.\n        string [] fileEntries = Directory.GetFiles(targetDirectory);\n        foreach(string fileName in fileEntries)\n            ProcessFile(fileName);\n\n        // Recurse into subdirectories of this directory.\n        string [] subdirectoryEntries = Directory.GetDirectories(targetDirectory);\n        foreach(string subdirectory in subdirectoryEntries)\n            ProcessDirectory(subdirectory);\n    }\n        \n    // Insert logic for processing found files here.\n    public static void ProcessFile(string path) \n    {\n        Console.WriteLine(&quot;Processed file &#39;{0}&#39;.&quot;, path);\t    \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Recursive file finder#2\">&#39; For File.Exists, Directory.Exists \n\nImports System\nImports System.IO\nImports System.Collections\n\nPublic Class RecursiveFileProcessor\n\n    Public Overloads Shared Sub Main(ByVal args() As String)\n        Dim path As String\n        For Each path In args\n            If File.Exists(path) Then\n                &#39; This path is a file.\n                ProcessFile(path)\n            Else\n                If Directory.Exists(path) Then\n                    &#39; This path is a directory.\n                    ProcessDirectory(path)\n                Else\n                    Console.WriteLine(&quot;{0} is not a valid file or directory.&quot;, path)\n                End If\n            End If\n        Next path\n    End Sub &#39;Main\n\n\n    &#39; Process all files in the directory passed in, recurse on any directories \n    &#39; that are found, and process the files they contain.\n    Public Shared Sub ProcessDirectory(ByVal targetDirectory As String)\n        Dim fileEntries As String() = Directory.GetFiles(targetDirectory)\n        &#39; Process the list of files found in the directory.\n        Dim fileName As String\n        For Each fileName In fileEntries\n            ProcessFile(fileName)\n\n        Next fileName\n        Dim subdirectoryEntries As String() = Directory.GetDirectories(targetDirectory)\n        &#39; Recurse into subdirectories of this directory.\n        Dim subdirectory As String\n        For Each subdirectory In subdirectoryEntries\n            ProcessDirectory(subdirectory)\n        Next subdirectory\n\n    End Sub &#39;ProcessDirectory\n\n    &#39; Insert logic for processing found files here.\n    Public Shared Sub ProcessFile(ByVal path As String)\n        Console.WriteLine(&quot;Processed file &#39;{0}&#39;.&quot;, path)\n    End Sub &#39;ProcessFile\nEnd Class &#39;RecursiveFileProcessor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetAccessControl_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the access control list (ACL) entries for a specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to a directory containing a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that describes the file&#39;s access control list (ACL) information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </div>\r\n                  <p>An object that encapsulates the access control rules for the file described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows 2000 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a directory that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for a directory.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> In NTFS environments, <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> are granted to the user if the user has <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> rights on the parent folder. To deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a>, deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> on the parent directory.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetAccessControl and the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n// Adds an ACL entry on the specified directory for the\n// specified account.\nvoid AddDirectorySecurity(String^ directoryName, String^ account, \n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;AddAccessRule( gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}\n\n// Removes an ACL entry on the specified directory for the\n// specified account.\nvoid RemoveDirectorySecurity(String^ directoryName, String^ account,\n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}    \n\nint main()\n{\n    String^ directoryName = &quot;TestDirectory&quot;;\n    String^ accountName = &quot;MYDOMAIN\\\\MyAccount&quot;;\n    if (!Directory::Exists(directoryName))\n    {\n        Console::WriteLine(&quot;The directory {0} could not be found.&quot;, \n            directoryName);\n        return 0;\n    }\n    try\n    {\n        Console::WriteLine(&quot;Adding access control entry for {0}&quot;,\n            directoryName);\n\n        // Add the access control entry to the directory.\n        AddDirectorySecurity(directoryName, accountName,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from {0}&quot;,\n            directoryName);\n\n        // Remove the access control entry from the directory.\n        RemoveDirectorySecurity(directoryName, accountName, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (UnauthorizedAccessException^)\n    {\n        Console::WriteLine(&quot;You are not authorised to carry&quot; +\n            &quot; out this procedure.&quot;);\n    }\n    catch (System::Security::Principal::\n        IdentityNotMappedException^)\n    {\n        Console::WriteLine(&quot;The account {0} could not be found.&quot;, accountName);\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class DirectoryExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string DirectoryName = &quot;TestDirectory&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName);\n\n                // Add the access control entry to the directory.\n                AddDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName);\n\n                // Remove the access control entry from the directory.\n                RemoveDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Adds an ACL entry on the specified directory for the specified account.\n        public static void AddDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.AddAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified directory for the specified account.\n        public static void RemoveDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule DirectoryExample\n\n    Sub Main()\n        Try\n            Dim DirectoryName As String = &quot;TestDirectory&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName)\n\n            &#39; Add the access control entry to the directory.\n            AddDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName)\n\n            &#39; Remove the access control entry from the directory.\n            RemoveDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified directory for the specified account.\n    Sub AddDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfoobject.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.AddAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified directory for the specified account.\n    Sub RemoveDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfo object.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.RemoveAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetAccessControl_System_String_System_Security_AccessControl_AccessControlSections_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessControl(String,AccessControlSections)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to a directory containing a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that describes the file&#39;s access control list (ACL) information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>includeSections</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.accesscontrol.accesscontrolsections\" data-linktype=\"relative-path\">AccessControlSections</a> values that specifies the type of access control list (ACL) information to receive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </div>\r\n                  <p>An object that encapsulates the access control rules for the file described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred while opening the directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows 2000 or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a></div>\r\n                  </div>\r\n                  <p>A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter specified a directory that is read-only.  </p>\n<p> -or-  </p>\n<p> This operation is not supported on the current platform.  </p>\n<p> -or-  </p>\n<p> The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the GetAccessControl method to retrieve the access control list (ACL) entries for a directory.  </p>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> In NTFS environments, <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> are granted to the user if the user has <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> rights on the parent folder. To deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a>, deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> on the parent directory.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetCreationTime_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetCreationTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCreationTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the creation date and time of a directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetCreationTime (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> This method is equivalent to <a class=\"xref\" href=\"system.io.file#System_IO_File_GetCreationTime_\" data-linktype=\"relative-path\">GetCreationTime</a>.  </p>\n<p> If the directory described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example gets the creation time of the specified directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dir_GetCreation#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = Directory::GetCreationTime( Environment::CurrentDirectory );\n      \n      // Give feedback to the user.\n      if ( DateTime::Now.Subtract( dt ).TotalDays &gt; 364 )\n      {\n         Console::WriteLine( &quot;This directory is over a year old.&quot; );\n      }\n      else\n      if ( DateTime::Now.Subtract( dt ).TotalDays &gt; 30 )\n      {\n         Console::WriteLine( &quot;This directory is over a month old.&quot; );\n      }\n      else\n      if ( DateTime::Now.Subtract( dt ).TotalDays &lt;= 1 )\n      {\n         Console::WriteLine( &quot;This directory is less than a day old.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;This directory was created on {0}&quot;, dt );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Dir_GetCreation#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            // Get the creation time of a well-known directory.\n            DateTime dt = Directory.GetCreationTime(Environment.CurrentDirectory);\n\n            // Give feedback to the user.\n            if (DateTime.Now.Subtract(dt).TotalDays &gt; 364) \n            {\n                Console.WriteLine(&quot;This directory is over a year old.&quot;);\n            } \n            else if (DateTime.Now.Subtract(dt).TotalDays &gt; 30) \n            {\n                Console.WriteLine(&quot;This directory is over a month old.&quot;);\n            } \n            else if (DateTime.Now.Subtract(dt).TotalDays &lt;= 1) \n            {\n                Console.WriteLine(&quot;This directory is less than a day old.&quot;);\n            } \n            else \n            {\n                Console.WriteLine(&quot;This directory was created on {0}&quot;, dt);\n            }\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_GetCreation#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            &#39; Get the creation time of a well-known directory.\n            Dim dt As DateTime = Directory.GetCreationTime(Environment.CurrentDirectory)\n\n            &#39; Give feedback to the user.\n            If DateTime.Now.Subtract(dt).TotalDays &gt; 364 Then\n                Console.WriteLine(&quot;This directory is over a year old.&quot;)\n            ElseIf DateTime.Now.Subtract(dt).TotalDays &gt; 30 Then\n                Console.WriteLine(&quot;This directory is over a month old.&quot;)\n            ElseIf DateTime.Now.Subtract(dt).TotalDays &lt;= 1 Then\n                Console.WriteLine(&quot;This directory is less than a day old.&quot;)\n            Else\n                Console.WriteLine(&quot;This directory was created on {0}&quot;, dt)\n            End If\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetCreationTimeUtc_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetCreationTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCreationTimeUtc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetCreationTimeUtc (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the directory described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  </p>\n<p> Use this method to get the creation time for a directory based on Coordinated Universal Time (UTC).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryUTCTime\n  {\n    public static void Main()\n    {\n\t// Set the directory.\n      string n = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;;\n\t\t//Create two variables to use to set the time.\n\t  DateTime dtime1 = new DateTime(2002, 1, 3);\n\t  DateTime dtime2 = new DateTime(1999, 1, 1);\n\n\t//Create the directory.\n\t  try\n\t  {\n\t\t  Directory.CreateDirectory(n);\n\t  }\n\t  catch (IOException e)\n\t  {\n\t\t  Console.WriteLine(e);\n\t  }\n\n\t//Set the creation and last access times to a variable DateTime value.\n\t  Directory.SetCreationTime(n, dtime1);\n\t  Directory.SetLastAccessTimeUtc(n, dtime1);\n\n\t\t// Print to console the results.\n\t  Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n));\n\t  Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n));\n\t  Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n));\n\t  Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n\t  Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n));\n\t  Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n));\n\n\t\t//Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2);\n\t  Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n    }\n  }\n}\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Set the directory.\n   String^ n = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est\\<br>ewdir&quot;;\n   \n   //Create two variables to use to set the time.\n   DateTime dtime1 = DateTime(2002,1,3);\n   DateTime dtime2 = DateTime(1999,1,1);\n   \n   //Create the directory.\n   try\n   {\n      Directory::CreateDirectory( n );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   //Set the creation and last access times to a variable DateTime value.\n   Directory::SetCreationTime( n, dtime1 );\n   Directory::SetLastAccessTimeUtc( n, dtime1 );\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Creation Date: {0}&quot;, Directory::GetCreationTime( n ) );\n   Console::WriteLine( &quot;UTC creation Date: {0}&quot;, Directory::GetCreationTimeUtc( n ) );\n   Console::WriteLine( &quot;Last write time: {0}&quot;, Directory::GetLastWriteTime( n ) );\n   Console::WriteLine( &quot;UTC last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n   Console::WriteLine( &quot;Last access time: {0}&quot;, Directory::GetLastAccessTime( n ) );\n   Console::WriteLine( &quot;UTC last access time: {0}&quot;, Directory::GetLastAccessTimeUtc( n ) );\n   \n   //Set the last write time to a different value.\n   Directory::SetLastWriteTimeUtc( n, dtime2 );\n   Console::WriteLine( &quot;Changed last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n}\n\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.UTCExample#1\">&#39; This sample shows the differences between dates from methods that use\n&#39;coordinated universal time (UTC) format and those that do not.\nImports System\nImports System.IO\n\n\n\nPublic Class DirectoryUTCTime\n   \n   Public Shared Sub Main()\n      &#39; Set the directory.\n      Dim n As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;\n      &#39;Create two variables to use to set the time.\n      Dim dtime1 As New DateTime(2002, 1, 3)\n      Dim dtime2 As New DateTime(1999, 1, 1)\n      \n      &#39;Create the directory.\n      Try\n         Directory.CreateDirectory(n)\n      Catch e As IOException\n         Console.WriteLine(e)\n      End Try\n      \n      &#39;Set the creation and last access times to a variable DateTime value.\n      Directory.SetCreationTime(n, dtime1)\n      Directory.SetLastAccessTimeUtc(n, dtime1)\n      \n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n))\n      Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n))\n      Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n))\n      Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n      Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n))\n      Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n))\n      \n      &#39;Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2)\n      Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n   End Sub &#39;Main\nEnd Class &#39;DirectoryUTCTime\n\n&#39; Since this sample deals with dates and times, the output will vary\n&#39; depending on when you run the executable. Here is one example of the output:\n\n&#39; Creation Date: 1/3/2002 12:00:00 AM\n&#39; UTC creation Date: 1/3/2002 8:00:00 AM\n&#39; Last write time: 12/31/1998 4:00:00 PM\n&#39; UTC last write time: 1/1/1999 12:00:00 AM\n&#39; Last access time: 1/2/2002 4:00:00 PM\n&#39; UTC last access time: 1/3/2002 12:00:00 AM\n&#39; Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetCurrentDirectory\">\r\n    \r\n            <a id=\"System_IO_Directory_GetCurrentDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCurrentDirectory()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current working directory of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetCurrentDirectory ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the path of the current working directory, and does not end with a backslash (\\).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The operating system is Windows CE, which does not have current directory functionality.  </p>\n<p> This method is available in the .NET Compact Framework, but is not currently supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current directory is distinct from the original directory, which is the one from which the process was started.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <code>GetCurrentDirectory</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"Dir_GetCurDir#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            // Get the current directory.\n            string path = Directory.GetCurrentDirectory();\n            string target = @&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;;\n            Console.WriteLine(&quot;The current directory is {0}&quot;, path);\n            if (!Directory.Exists(target)) \n            {\n                Directory.CreateDirectory(target);\n            }\n\n            // Change the current directory.\n            Environment.CurrentDirectory = (target);\n            if (path.Equals(Directory.GetCurrentDirectory())) \n            {\n                Console.WriteLine(&quot;You are in the temp directory.&quot;);\n            } \n            else \n            {\n                Console.WriteLine(&quot;You are not in the temp directory.&quot;);\n            }\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_GetCurDir#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            &#39; Get the current directory.\n            Dim path As String = Directory.GetCurrentDirectory()\n            Dim target As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;\n            Console.WriteLine(&quot;The current directory is {0}&quot;, path)\n            If Directory.Exists(target) = False Then\n                Directory.CreateDirectory(target)\n            End If\n            &#39; Change the current directory.\n            Environment.CurrentDirectory = (target)\n            If path.Equals(Directory.GetCurrentDirectory()) Then\n                Console.WriteLine(&quot;You are in the temp directory.&quot;)\n            Else\n                Console.WriteLine(&quot;You are not in the temp directory.&quot;)\n            End If\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dir_GetCurDir#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      \n      // Get the current directory.\n      String^ path = Directory::GetCurrentDirectory();\n      String^ target = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;;\n      Console::WriteLine( &quot;The current directory is {0}&quot;, path );\n      if (  !Directory::Exists( target ) )\n      {\n         Directory::CreateDirectory( target );\n      }\n      \n      // Change the current directory.\n      Environment::CurrentDirectory = target;\n      if ( path-&gt;Equals( Directory::GetCurrentDirectory() ) )\n      {\n         Console::WriteLine( &quot;You are in the temp directory.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;You are not in the temp directory.&quot; );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetDirectories_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectories(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of subdirectories (including their paths) in the specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetDirectories (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is identical to <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_System_String_System_String_\" data-linktype=\"relative-path\">GetDirectories(String,String)</a> with the asterisk (*) specified as the search pattern, so it returns all subdirectories.If you need to search subdirectories, use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"relative-path\">GetDirectories(String,String,SearchOption)</a> method, which enables you to specify a search of subdirectories with the <code>searchOption</code> parameter.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p> The <code>path</code> parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The names returned by this method are prefixed with the directory information provided in <code>path</code>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  </p>\n<pre><code class=\"lang-cpp\" name=\"Recursive file finder#1\">// For Directory::GetFiles and Directory::GetDirectories\n// For File::Exists, Directory::Exists\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Collections;\n\n// Insert logic for processing found files here.\nvoid ProcessFile( String^ path )\n{\n   Console::WriteLine( &quot;Processed file &#39;{0}&#39;.&quot;, path );\n}\n\n\n// Process all files in the directory passed in, recurse on any directories \n// that are found, and process the files they contain.\nvoid ProcessDirectory( String^ targetDirectory )\n{\n   \n   // Process the list of files found in the directory.\n   array&lt;String^&gt;^fileEntries = Directory::GetFiles( targetDirectory );\n   IEnumerator^ files = fileEntries-&gt;GetEnumerator();\n   while ( files-&gt;MoveNext() )\n   {\n      String^ fileName = safe_cast&lt;String^&gt;(files-&gt;Current);\n      ProcessFile( fileName );\n   }\n\n   \n   // Recurse into subdirectories of this directory.\n   array&lt;String^&gt;^subdirectoryEntries = Directory::GetDirectories( targetDirectory );\n   IEnumerator^ dirs = subdirectoryEntries-&gt;GetEnumerator();\n   while ( dirs-&gt;MoveNext() )\n   {\n      String^ subdirectory = safe_cast&lt;String^&gt;(dirs-&gt;Current);\n      ProcessDirectory( subdirectory );\n   }\n}\n\nint main( int argc, char *argv[] )\n{\n   for ( int i = 1; i &lt; argc; i++ )\n   {\n      String^ path = gcnew String(argv[ i ]);\n      if ( File::Exists( path ) )\n      {\n         \n         // This path is a file\n         ProcessFile( path );\n      }\n      else\n      if ( Directory::Exists( path ) )\n      {\n         \n         // This path is a directory\n         ProcessDirectory( path );\n      }\n      else\n      {\n         Console::WriteLine( &quot;{0} is not a valid file or directory.&quot;, path );\n      }\n\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Recursive file finder#1\">// For Directory.GetFiles and Directory.GetDirectories\n// For File.Exists, Directory.Exists\nusing System;\nusing System.IO;\nusing System.Collections;\n\npublic class RecursiveFileProcessor \n{\n    public static void Main(string[] args) \n    {\n        foreach(string path in args) \n        {\n            if(File.Exists(path)) \n            {\n                // This path is a file\n                ProcessFile(path); \n            }               \n            else if(Directory.Exists(path)) \n            {\n                // This path is a directory\n                ProcessDirectory(path);\n            }\n            else \n            {\n                Console.WriteLine(&quot;{0} is not a valid file or directory.&quot;, path);\n            }        \n        }        \n    }\n\n\n    // Process all files in the directory passed in, recurse on any directories \n    // that are found, and process the files they contain.\n    public static void ProcessDirectory(string targetDirectory) \n    {\n        // Process the list of files found in the directory.\n        string [] fileEntries = Directory.GetFiles(targetDirectory);\n        foreach(string fileName in fileEntries)\n            ProcessFile(fileName);\n\n        // Recurse into subdirectories of this directory.\n        string [] subdirectoryEntries = Directory.GetDirectories(targetDirectory);\n        foreach(string subdirectory in subdirectoryEntries)\n            ProcessDirectory(subdirectory);\n    }\n        \n    // Insert logic for processing found files here.\n    public static void ProcessFile(string path) \n    {\n        Console.WriteLine(&quot;Processed file &#39;{0}&#39;.&quot;, path);\t    \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Recursive file finder#1\">&#39; For Directory.GetFiles and Directory.GetDirectories\n&#39; For File.Exists, Directory.Exists \n\nImports System\nImports System.IO\nImports System.Collections\n\nPublic Class RecursiveFileProcessor\n\n    Public Overloads Shared Sub Main(ByVal args() As String)\n        Dim path As String\n        For Each path In args\n            If File.Exists(path) Then\n                &#39; This path is a file.\n                ProcessFile(path)\n            Else\n                If Directory.Exists(path) Then\n                    &#39; This path is a directory.\n                    ProcessDirectory(path)\n                Else\n                    Console.WriteLine(&quot;{0} is not a valid file or directory.&quot;, path)\n                End If\n            End If\n        Next path\n    End Sub &#39;Main\n\n\n    &#39; Process all files in the directory passed in, recurse on any directories \n    &#39; that are found, and process the files they contain.\n    Public Shared Sub ProcessDirectory(ByVal targetDirectory As String)\n        Dim fileEntries As String() = Directory.GetFiles(targetDirectory)\n        &#39; Process the list of files found in the directory.\n        Dim fileName As String\n        For Each fileName In fileEntries\n            ProcessFile(fileName)\n\n        Next fileName\n        Dim subdirectoryEntries As String() = Directory.GetDirectories(targetDirectory)\n        &#39; Recurse into subdirectories of this directory.\n        Dim subdirectory As String\n        For Each subdirectory In subdirectoryEntries\n            ProcessDirectory(subdirectory)\n        Next subdirectory\n\n    End Sub &#39;ProcessDirectory\n\n    &#39; Insert logic for processing found files here.\n    Public Shared Sub ProcessFile(ByVal path As String)\n        Console.WriteLine(&quot;Processed file &#39;{0}&#39;.&quot;, path)\n    End Sub &#39;ProcessFile\nEnd Class &#39;RecursiveFileProcessor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetDirectories_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectories(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetDirectories (string path, string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of subdirectories in <code>path</code>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> doesn&#39;t contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> or <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns all subdirectories directly under the specified directory that match the specified search pattern. If the specified directory has no subdirectories, or no subdirectories match the <code>searchPattern</code> parameter, this method returns an empty array. Only the top directory is searched. If you want to search the subdirectories as well, use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_System_String_System_String_System_IO_SearchOption_\" data-linktype=\"relative-path\">GetDirectories(String,String,SearchOption)</a> method and specify <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> in the <code>searchOption</code> parameter.  </p>\n<p> <code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> The <code>path</code> parameter can specify relative or absolute path information, and is not case-sensitive.  Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the number of directories in a path that begin with the specified letter.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dir_GetDirs2#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      \n      // Only get subdirectories that begin with the letter &quot;p.&quot;\n      array&lt;String^&gt;^dirs = Directory::GetDirectories( &quot;c:\\\\&quot;, &quot;p*&quot; );\n      Console::WriteLine( &quot;The number of directories starting with p is {0}.&quot;, dirs-&gt;Length );\n      Collections::IEnumerator^ myEnum = dirs-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Console::WriteLine( myEnum-&gt;Current );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Dir_GetDirs2#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            // Only get subdirectories that begin with the letter &quot;p.&quot;\n            string[] dirs = Directory.GetDirectories(@&quot;c:\\&quot;, &quot;p*&quot;);\n            Console.WriteLine(&quot;The number of directories starting with p is {0}.&quot;, dirs.Length);\n            foreach (string dir in dirs) \n            {\n                Console.WriteLine(dir);\n            }\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_GetDirs2#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            &#39; Only get subdirectories that begin with the letter &quot;p.&quot;\n            Dim dirs As String() = Directory.GetDirectories(&quot;c:\\&quot;, &quot;p*&quot;)\n            Console.WriteLine(&quot;The number of directories starting with p is {0}.&quot;, dirs.Length)\n            Dim dir As String\n            For Each dir In dirs\n                Console.WriteLine(dir)\n            Next\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetDirectories_System_String_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectories(String,String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of subdirectories in <code>path</code>. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> or <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter can specify relative or absolute path information, and is not case-sensitive. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> <code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateDirectories_\" data-linktype=\"relative-path\">EnumerateDirectories</a> can be more efficient.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the number of directories that begin with the specified letter in a path. Only the top-level directory is searched.  </p>\n<pre><code class=\"lang-vb\" name=\"Dir_GetDirs2#2\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim dirs As String() = Directory.GetDirectories(&quot;c:\\&quot;, &quot;p*&quot;, SearchOption.TopDirectoryOnly)\n            Console.WriteLine(&quot;The number of directories starting with p is {0}.&quot;, dirs.Length)\n            Dim dir As String\n            For Each dir In dirs\n                Console.WriteLine(dir)\n            Next\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Dir_GetDirs2#2\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string[] dirs = Directory.GetDirectories(@&quot;c:\\&quot;, &quot;p*&quot;, SearchOption.TopDirectoryOnly);\n            Console.WriteLine(&quot;The number of directories starting with p is {0}.&quot;, dirs.Length);\n            foreach (string dir in dirs) \n            {\n                Console.WriteLine(dir);\n            }\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetDirectoryRoot_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetDirectoryRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectoryRoot(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the volume information, root information, or both for the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetDirectoryRoot (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of a file or directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the volume information, root information, or both for the specified path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method obtains the fully qualified path name of <code>path</code>, as returned by <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetFullPath_\" data-linktype=\"relative-path\">GetFullPath</a>, and returns root directory information. The specified path is not required to exist.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to set the current directory and display the directory root.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.DirectoryRoot#1\">// This sample shows how to set the current directory and how to determine\n// the root directory.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create string for a directory. This value should be an existing directory\n   // or the sample will throw a DirectoryNotFoundException.\n   String^ dir = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est&quot;;\n   try\n   {\n      \n      //Set the current directory.\n      Directory::SetCurrentDirectory( dir );\n   }\n   catch ( DirectoryNotFoundException^ e ) \n   {\n      Console::WriteLine( &quot;The specified directory does not exist. {0}&quot;, e );\n   }\n\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Root directory: {0}&quot;, Directory::GetDirectoryRoot( dir ) );\n   Console::WriteLine( &quot;Current directory: {0}&quot;, Directory::GetCurrentDirectory() );\n}\n\n// The output of this sample depends on what value you assign to the variable dir.\n// If the directory c:&nbsp;&nbsp;&nbsp;&nbsp;est exists, the output for this sample is:\n// Root directory: C:\\\n// Current directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryRoot#1\">// This sample shows how to set the current directory and how to determine\n// the root directory.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryRoot\n  {\n    public static void Main()\n    {\n\t// Create string for a directory. This value should be an existing directory\n\t// or the sample will throw a DirectoryNotFoundException.\n      string dir = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est&quot;;\t\t\n\t  try\n\t  {\n\t\t  //Set the current directory.\n\t\t  Directory.SetCurrentDirectory(dir);\n\t  }\n\t  catch (DirectoryNotFoundException e)\n\t  {\n\t\t  Console.WriteLine(&quot;The specified directory does not exist. {0}&quot;, e);\n\t  }\n\t// Print to console the results.\n\t  Console.WriteLine(&quot;Root directory: {0}&quot;, Directory.GetDirectoryRoot(dir));\n\t  Console.WriteLine(&quot;Current directory: {0}&quot;, Directory.GetCurrentDirectory());\n    }\n  }\n}\n// The output of this sample depends on what value you assign to the variable dir.\n// If the directory c:&nbsp;&nbsp;&nbsp;&nbsp;est exists, the output for this sample is:\n// Root directory: C:\\\n// Current directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.DirectoryRoot#1\">&#39; This sample shows how to set the current directory and how to determine\n&#39; the root directory.\nImports System\nImports System.IO\n\nPublic Class DirectoryRoot\n   \n   Public Shared Sub Main()\n      &#39; Create string for a directory. This value should be an existing directory\n      &#39; or the sample will throw a DirectoryNotFoundException.\n      Dim dir As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est&quot;\n      Try\n         &#39;Set the current directory.\n         Directory.SetCurrentDirectory(dir)\n      Catch e As DirectoryNotFoundException\n         Console.WriteLine(&quot;The specified directory does not exist. {0}&quot;, e)\n      End Try\n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Root directory: {0}&quot;, Directory.GetDirectoryRoot(dir))\n      Console.WriteLine(&quot;Current directory: {0}&quot;, Directory.GetCurrentDirectory())\n   End Sub &#39;Main\nEnd Class &#39;DirectoryRoot\n&#39; The output of this sample depends on what value you assign to the variable dir.\n&#39; If the directory c:&nbsp;&nbsp;&nbsp;&nbsp;est exists, the output for this sample is:\n&#39; Root directory: C:\\\n&#39; Current directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetFiles_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of files (including their paths) in the specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetFiles (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.  </p>\n<p> -or-  </p>\n<p> A network error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is not found or is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The returned file names are appended to the supplied <code>path</code> parameter.  </p>\n<p> This method is identical to <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_System_String_System_String_\" data-linktype=\"relative-path\">GetFiles(String,String)</a> with the asterisk (*) specified as the search pattern.  </p>\n<p> The <code>path</code> parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The order of the returned file names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the GetFiles method to return file names from a user-specified location. The example is configured to catch all errors common to this method.  </p>\n<pre><code class=\"lang-cpp\" name=\"Recursive file finder#1\">// For Directory::GetFiles and Directory::GetDirectories\n// For File::Exists, Directory::Exists\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Collections;\n\n// Insert logic for processing found files here.\nvoid ProcessFile( String^ path )\n{\n   Console::WriteLine( &quot;Processed file &#39;{0}&#39;.&quot;, path );\n}\n\n\n// Process all files in the directory passed in, recurse on any directories \n// that are found, and process the files they contain.\nvoid ProcessDirectory( String^ targetDirectory )\n{\n   \n   // Process the list of files found in the directory.\n   array&lt;String^&gt;^fileEntries = Directory::GetFiles( targetDirectory );\n   IEnumerator^ files = fileEntries-&gt;GetEnumerator();\n   while ( files-&gt;MoveNext() )\n   {\n      String^ fileName = safe_cast&lt;String^&gt;(files-&gt;Current);\n      ProcessFile( fileName );\n   }\n\n   \n   // Recurse into subdirectories of this directory.\n   array&lt;String^&gt;^subdirectoryEntries = Directory::GetDirectories( targetDirectory );\n   IEnumerator^ dirs = subdirectoryEntries-&gt;GetEnumerator();\n   while ( dirs-&gt;MoveNext() )\n   {\n      String^ subdirectory = safe_cast&lt;String^&gt;(dirs-&gt;Current);\n      ProcessDirectory( subdirectory );\n   }\n}\n\nint main( int argc, char *argv[] )\n{\n   for ( int i = 1; i &lt; argc; i++ )\n   {\n      String^ path = gcnew String(argv[ i ]);\n      if ( File::Exists( path ) )\n      {\n         \n         // This path is a file\n         ProcessFile( path );\n      }\n      else\n      if ( Directory::Exists( path ) )\n      {\n         \n         // This path is a directory\n         ProcessDirectory( path );\n      }\n      else\n      {\n         Console::WriteLine( &quot;{0} is not a valid file or directory.&quot;, path );\n      }\n\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Recursive file finder#1\">// For Directory.GetFiles and Directory.GetDirectories\n// For File.Exists, Directory.Exists\nusing System;\nusing System.IO;\nusing System.Collections;\n\npublic class RecursiveFileProcessor \n{\n    public static void Main(string[] args) \n    {\n        foreach(string path in args) \n        {\n            if(File.Exists(path)) \n            {\n                // This path is a file\n                ProcessFile(path); \n            }               \n            else if(Directory.Exists(path)) \n            {\n                // This path is a directory\n                ProcessDirectory(path);\n            }\n            else \n            {\n                Console.WriteLine(&quot;{0} is not a valid file or directory.&quot;, path);\n            }        \n        }        \n    }\n\n\n    // Process all files in the directory passed in, recurse on any directories \n    // that are found, and process the files they contain.\n    public static void ProcessDirectory(string targetDirectory) \n    {\n        // Process the list of files found in the directory.\n        string [] fileEntries = Directory.GetFiles(targetDirectory);\n        foreach(string fileName in fileEntries)\n            ProcessFile(fileName);\n\n        // Recurse into subdirectories of this directory.\n        string [] subdirectoryEntries = Directory.GetDirectories(targetDirectory);\n        foreach(string subdirectory in subdirectoryEntries)\n            ProcessDirectory(subdirectory);\n    }\n        \n    // Insert logic for processing found files here.\n    public static void ProcessFile(string path) \n    {\n        Console.WriteLine(&quot;Processed file &#39;{0}&#39;.&quot;, path);\t    \n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Recursive file finder#1\">&#39; For Directory.GetFiles and Directory.GetDirectories\n&#39; For File.Exists, Directory.Exists \n\nImports System\nImports System.IO\nImports System.Collections\n\nPublic Class RecursiveFileProcessor\n\n    Public Overloads Shared Sub Main(ByVal args() As String)\n        Dim path As String\n        For Each path In args\n            If File.Exists(path) Then\n                &#39; This path is a file.\n                ProcessFile(path)\n            Else\n                If Directory.Exists(path) Then\n                    &#39; This path is a directory.\n                    ProcessDirectory(path)\n                Else\n                    Console.WriteLine(&quot;{0} is not a valid file or directory.&quot;, path)\n                End If\n            End If\n        Next path\n    End Sub &#39;Main\n\n\n    &#39; Process all files in the directory passed in, recurse on any directories \n    &#39; that are found, and process the files they contain.\n    Public Shared Sub ProcessDirectory(ByVal targetDirectory As String)\n        Dim fileEntries As String() = Directory.GetFiles(targetDirectory)\n        &#39; Process the list of files found in the directory.\n        Dim fileName As String\n        For Each fileName In fileEntries\n            ProcessFile(fileName)\n\n        Next fileName\n        Dim subdirectoryEntries As String() = Directory.GetDirectories(targetDirectory)\n        &#39; Recurse into subdirectories of this directory.\n        Dim subdirectory As String\n        For Each subdirectory In subdirectoryEntries\n            ProcessDirectory(subdirectory)\n        Next subdirectory\n\n    End Sub &#39;ProcessDirectory\n\n    &#39; Insert logic for processing found files here.\n    Public Shared Sub ProcessFile(ByVal path As String)\n        Console.WriteLine(&quot;Processed file &#39;{0}&#39;.&quot;, path)\n    End Sub &#39;ProcessFile\nEnd Class &#39;RecursiveFileProcessor\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetFiles_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetFiles (string path, string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.  </p>\n<p> -or-  </p>\n<p> A network error has occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> doesn&#39;t contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> or <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is not found or is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned file names are appended to the supplied <code>path</code> parameter and the order of the returned file names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> <code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to &quot;<em>1\\</em>.txt&quot; may return unexpected file names. For example, using a search pattern of &quot;*1*.txt&quot; returns &quot;longfilename.txt&quot; because the equivalent 8.3 file name format is &quot;LONGFI~1.TXT&quot;.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The <code>path</code> parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the number of files that begin with the specified letter.  </p>\n<pre><code class=\"lang-vb\" name=\"Dir_GetFiles2#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            &#39; Only get files that begin with the letter &quot;c.&quot;\n            Dim dirs As String() = Directory.GetFiles(&quot;c:\\&quot;, &quot;c*&quot;)\n            Console.WriteLine(&quot;The number of files starting with c is {0}.&quot;, dirs.Length)\n            Dim dir As String\n            For Each dir In dirs\n                Console.WriteLine(dir)\n            Next\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Dir_GetFiles2#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            // Only get files that begin with the letter &quot;c.&quot;\n            string[] dirs = Directory.GetFiles(@&quot;c:\\&quot;, &quot;c*&quot;);\n            Console.WriteLine(&quot;The number of files starting with c is {0}.&quot;, dirs.Length);\n            foreach (string dir in dirs) \n            {\n                Console.WriteLine(dir);\n            }\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dir_GetFiles2#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      \n      // Only get files that begin with the letter &quot;c.&quot;\n      array&lt;String^&gt;^dirs = Directory::GetFiles( &quot;c:\\\\&quot;, &quot;c*&quot; );\n      Console::WriteLine( &quot;The number of files starting with c is {0}.&quot;, dirs-&gt;Length );\n      Collections::IEnumerator^ myEnum = dirs-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         Console::WriteLine( myEnum-&gt;Current );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetFiles_System_String_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFiles(String,String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> or <code>searchpattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is not found or is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.  </p>\n<p> -or-  </p>\n<p> A network error has occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned file names are appended to the supplied  parameter <code>path</code> and the order of the returned file names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> <code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to &quot;<em>1\\</em>.txt&quot; may return unexpected file names. For example, using a search pattern of &quot;*1*.txt&quot; returns &quot;longfilename.txt&quot; because the equivalent 8.3 file name format is &quot;LONGFI~1.TXT&quot;.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a>, you can start enumerating the collection of names before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> The file names include the full path.  </p>\n<p> The <code>path</code> parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetFileSystemEntries_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetFileSystemEntries_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileSystemEntries(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the names of all files and subdirectories in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetFileSystemEntries (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the returned file and directory names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a>, you can start enumerating the collection of entries before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> This method is identical to <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a> with the asterisk (*) specified as the search pattern.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files and subdirectories in a user-specified location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#1\">using System;\n\nnamespace GetFileSystemEntries\n{\n    class Class1 \n    {\n        static void Main(string[] args) \n        {\n            Class1 snippets = new Class1();\n\n            string path = System.IO.Directory.GetCurrentDirectory();\n            string filter = &quot;*.exe&quot;;\n\n            snippets.PrintFileSystemEntries(path);\n            snippets.PrintFileSystemEntries(path, filter);\t\t\n            snippets.GetLogicalDrives();\n            snippets.GetParent(path);\n            snippets.Move(&quot;C:\\\\proof&quot;, &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n        }\n\n\t\t\n        void PrintFileSystemEntries(string path) \n        {\n\t\t\t\n            try \n            {\n                // Obtain the file system entries in the directory path.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n        void PrintFileSystemEntries(string path, string pattern) \n        {\n            try \n            {\n                // Obtain the file system entries in the directory\n                // path that match the pattern.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path, pattern); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n\n        // Print out all logical drives on the system.\n        void GetLogicalDrives() \n        {\n            try \n            {\n                string[] drives = System.IO.Directory.GetLogicalDrives();\n\n                foreach (string str in drives) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n        }\n        void GetParent(string path) \n        {\n            try \n            {\n                System.IO.DirectoryInfo directoryInfo =\n                    System.IO.Directory.GetParent(path);\n\n                System.Console.WriteLine(directoryInfo.FullName);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, or &quot; +\n                    &quot;contains invalid characters.&quot;);\n            }\n        }\n        void Move(string sourcePath, string destinationPath) \n        {\n            try \n            {\n                System.IO.Directory.Move(sourcePath, destinationPath);\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\t\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; +\n                    &quot;directory to a different &quot; +\n                    &quot;volume, or destDirName &quot; +\n                    &quot;already exists.&quot;); \n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#1\">Option Explicit On \nOption Strict On\n\nImports System\n\nNamespace GetFileSystemEntries\n    Class Class1\n        Overloads Shared Sub Main(ByVal args() As String)\n            Dim snippets As New Class1()\n            Dim path As String = System.IO.Directory.GetCurrentDirectory()\n            Dim filter As String = &quot;*.exe&quot;\n            snippets.PrintFileSystemEntries(path)\n            snippets.PrintFileSystemEntries(path, filter)\n            snippets.GetLogicalDrives()\n            snippets.GetParent(path)\n            snippets.Move(&quot;C:\\proof&quot;, &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n        End Sub &#39;Main\n\n        Sub PrintFileSystemEntries(ByVal path As String)\n            Try\n                &#39; Obtain the file system entries in the directory path.\n                Dim directoryEntries As String()\n                directoryEntries = System.IO.Directory.GetFileSystemEntries(path)\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n        Sub PrintFileSystemEntries(ByVal path As String, _\n                                   ByVal pattern As String)\n            Try\n                &#39; Obtain the file system entries in the directory\n                &#39; path that match the pattern.\n                Dim directoryEntries As String()\n                directoryEntries = _\n                   System.IO.Directory.GetFileSystemEntries(path, pattern)\n\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n\n        &#39; Print out all logical drives on the system.\n        Sub GetLogicalDrives()\n            Try\n                Dim drives As String()\n                drives = System.IO.Directory.GetLogicalDrives()\n\n                Dim str As String\n                For Each str In drives\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            End Try\n        End Sub\n        Sub GetParent(ByVal path As String)\n            Try\n                Dim directoryInfo As System.IO.DirectoryInfo\n                directoryInfo = System.IO.Directory.GetParent(path)\n                System.Console.WriteLine(directoryInfo.FullName)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                     &quot;contains only white spaces, or &quot; + _\n                                     &quot;contains invalid characters.&quot;)\n            End Try\n        End Sub\n        Sub Move(ByVal sourcePath As String, ByVal destinationPath As String)\n            Try\n                System.IO.Directory.Move(sourcePath, destinationPath)\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; + _\n                                        &quot;directory to a different &quot; + _\n                                        &quot;volume, or destDirName &quot; + _\n                                        &quot;already exists.&quot;)\n            End Try\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Directory#1\">using namespace System;\nclass Class1\n{\npublic:\n   void PrintFileSystemEntries( String^ path )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory path.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n   void PrintFileSystemEntries( String^ path, String^ pattern )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory\n         // path that match the pattern.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path, pattern );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n\n   // Print out all logical drives on the system.\n   void GetLogicalDrives()\n   {\n      try\n      {\n         array&lt;String^&gt;^drives = System::IO::Directory::GetLogicalDrives();\n         for ( int i = 0; i &lt; drives-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( drives[ i ] );\n\n         }\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An I/O error occurs.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n\n   }\n\n   void GetParent( String^ path )\n   {\n      try\n      {\n         System::IO::DirectoryInfo^ directoryInfo = System::IO::Directory::GetParent( path );\n         System::Console::WriteLine( directoryInfo-&gt;FullName );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, or \\HelloServer&#39;                  contains invalid characters.&quot; );\n      }\n\n   }\n\n   void Move( String^ sourcePath, String^ destinationPath )\n   {\n      try\n      {\n         System::IO::Directory::Move( sourcePath, destinationPath );\n         System::Console::WriteLine(  &quot;The directory move is complete.&quot; );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An attempt was made to move a \\HelloServer&#39;                  directory to a different \\HelloServer&#39;                  volume, or destDirName \\HelloServer&#39;                  already exists.&quot; );\n      }\n\n   }\n\n};\n\nint main()\n{\n   Class1 * snippets = new Class1;\n   String^ path = System::IO::Directory::GetCurrentDirectory();\n   String^ filter =  &quot;*.exe&quot;;\n   snippets-&gt;PrintFileSystemEntries( path );\n   snippets-&gt;PrintFileSystemEntries( path, filter );\n   snippets-&gt;GetLogicalDrives();\n   snippets-&gt;GetParent( path );\n   snippets-&gt;Move(  &quot;C:\\\\proof&quot;,  &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; );\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetFileSystemEntries_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetFileSystemEntries_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileSystemEntries(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of file names and directory names that that match a search pattern in a specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetFileSystemEntries (string path, string searchPattern);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of file and directories in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> or <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the returned file and directory names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> <code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files matching a user-specified filter in a specific location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#2\">using System;\n\nnamespace GetFileSystemEntries\n{\n    class Class1 \n    {\n        static void Main(string[] args) \n        {\n            Class1 snippets = new Class1();\n\n            string path = System.IO.Directory.GetCurrentDirectory();\n            string filter = &quot;*.exe&quot;;\n\n            snippets.PrintFileSystemEntries(path);\n            snippets.PrintFileSystemEntries(path, filter);\t\t\n            snippets.GetLogicalDrives();\n            snippets.GetParent(path);\n            snippets.Move(&quot;C:\\\\proof&quot;, &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n        }\n\n\t\t\n        void PrintFileSystemEntries(string path) \n        {\n\t\t\t\n            try \n            {\n                // Obtain the file system entries in the directory path.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n        void PrintFileSystemEntries(string path, string pattern) \n        {\n            try \n            {\n                // Obtain the file system entries in the directory\n                // path that match the pattern.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path, pattern); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n\n        // Print out all logical drives on the system.\n        void GetLogicalDrives() \n        {\n            try \n            {\n                string[] drives = System.IO.Directory.GetLogicalDrives();\n\n                foreach (string str in drives) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n        }\n        void GetParent(string path) \n        {\n            try \n            {\n                System.IO.DirectoryInfo directoryInfo =\n                    System.IO.Directory.GetParent(path);\n\n                System.Console.WriteLine(directoryInfo.FullName);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, or &quot; +\n                    &quot;contains invalid characters.&quot;);\n            }\n        }\n        void Move(string sourcePath, string destinationPath) \n        {\n            try \n            {\n                System.IO.Directory.Move(sourcePath, destinationPath);\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\t\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; +\n                    &quot;directory to a different &quot; +\n                    &quot;volume, or destDirName &quot; +\n                    &quot;already exists.&quot;); \n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#2\">Option Explicit On \nOption Strict On\n\nImports System\n\nNamespace GetFileSystemEntries\n    Class Class1\n        Overloads Shared Sub Main(ByVal args() As String)\n            Dim snippets As New Class1()\n            Dim path As String = System.IO.Directory.GetCurrentDirectory()\n            Dim filter As String = &quot;*.exe&quot;\n            snippets.PrintFileSystemEntries(path)\n            snippets.PrintFileSystemEntries(path, filter)\n            snippets.GetLogicalDrives()\n            snippets.GetParent(path)\n            snippets.Move(&quot;C:\\proof&quot;, &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n        End Sub &#39;Main\n\n        Sub PrintFileSystemEntries(ByVal path As String)\n            Try\n                &#39; Obtain the file system entries in the directory path.\n                Dim directoryEntries As String()\n                directoryEntries = System.IO.Directory.GetFileSystemEntries(path)\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n        Sub PrintFileSystemEntries(ByVal path As String, _\n                                   ByVal pattern As String)\n            Try\n                &#39; Obtain the file system entries in the directory\n                &#39; path that match the pattern.\n                Dim directoryEntries As String()\n                directoryEntries = _\n                   System.IO.Directory.GetFileSystemEntries(path, pattern)\n\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n\n        &#39; Print out all logical drives on the system.\n        Sub GetLogicalDrives()\n            Try\n                Dim drives As String()\n                drives = System.IO.Directory.GetLogicalDrives()\n\n                Dim str As String\n                For Each str In drives\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            End Try\n        End Sub\n        Sub GetParent(ByVal path As String)\n            Try\n                Dim directoryInfo As System.IO.DirectoryInfo\n                directoryInfo = System.IO.Directory.GetParent(path)\n                System.Console.WriteLine(directoryInfo.FullName)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                     &quot;contains only white spaces, or &quot; + _\n                                     &quot;contains invalid characters.&quot;)\n            End Try\n        End Sub\n        Sub Move(ByVal sourcePath As String, ByVal destinationPath As String)\n            Try\n                System.IO.Directory.Move(sourcePath, destinationPath)\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; + _\n                                        &quot;directory to a different &quot; + _\n                                        &quot;volume, or destDirName &quot; + _\n                                        &quot;already exists.&quot;)\n            End Try\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Directory#2\">using namespace System;\nclass Class1\n{\npublic:\n   void PrintFileSystemEntries( String^ path )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory path.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n   void PrintFileSystemEntries( String^ path, String^ pattern )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory\n         // path that match the pattern.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path, pattern );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n\n   // Print out all logical drives on the system.\n   void GetLogicalDrives()\n   {\n      try\n      {\n         array&lt;String^&gt;^drives = System::IO::Directory::GetLogicalDrives();\n         for ( int i = 0; i &lt; drives-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( drives[ i ] );\n\n         }\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An I/O error occurs.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n\n   }\n\n   void GetParent( String^ path )\n   {\n      try\n      {\n         System::IO::DirectoryInfo^ directoryInfo = System::IO::Directory::GetParent( path );\n         System::Console::WriteLine( directoryInfo-&gt;FullName );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, or \\HelloServer&#39;                  contains invalid characters.&quot; );\n      }\n\n   }\n\n   void Move( String^ sourcePath, String^ destinationPath )\n   {\n      try\n      {\n         System::IO::Directory::Move( sourcePath, destinationPath );\n         System::Console::WriteLine(  &quot;The directory move is complete.&quot; );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An attempt was made to move a \\HelloServer&#39;                  directory to a different \\HelloServer&#39;                  volume, or destDirName \\HelloServer&#39;                  already exists.&quot; );\n      }\n\n   }\n\n};\n\nint main()\n{\n   Class1 * snippets = new Class1;\n   String^ path = System::IO::Directory::GetCurrentDirectory();\n   String^ filter =  &quot;*.exe&quot;;\n   snippets-&gt;PrintFileSystemEntries( path );\n   snippets-&gt;PrintFileSystemEntries( path, filter );\n   snippets-&gt;GetLogicalDrives();\n   snippets-&gt;GetParent( path );\n   snippets-&gt;Move(  &quot;C:\\\\proof&quot;,  &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; );\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetFileSystemEntries_System_String_System_String_System_IO_SearchOption_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetFileSystemEntries_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileSystemEntries(String,String,SearchOption)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The relative or absolute path to the directory to search. This string is not case-sensitive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchPattern</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The search string to match against the names of files and directories in <code>path</code>.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&#39;t support regular expressions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>searchOption</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.  </p>\n<p> The default value is <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of file the file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.  </p>\n<p> - or -  </p>\n<p> <code>searchPattern</code> does not contain a valid pattern.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>searchPattern</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>searchOption</code> is not a valid <a class=\"xref\" href=\"system.io.searchoption\" data-linktype=\"relative-path\">SearchOption</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is invalid, such as referring to an unmapped drive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a file name.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The order of the returned file and directory names is not guaranteed; use the <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> method if a specific sort order is required.  </p>\n<p> <code>searchPattern</code> can be a combination of literal and wildcard characters, but doesn&#39;t support regular expressions. The following wildcard specifiers are permitted in <code>searchPattern</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Wildcard specifier</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>* (asterisk)</td>\n<td>Zero or more characters in that position.</td>\n</tr>\n<tr>\n<td>? (question mark)</td>\n<td>Zero or one character in that position.</td>\n</tr>\n</tbody>\n</table>\n<p> Characters other than the wildcard are literal characters. For example, the <code>searchPattern</code> string &quot;<em>t&quot; searches for all names in <code>path</code> ending with the letter &quot;t&quot;. The <code>searchPattern</code> string &quot;s\\</em>&quot; searches for all names in <code>path</code> beginning with the letter &quot;s&quot;.  </p>\n<p> <code>searchPattern</code> cannot end in two periods (&quot;..&quot;) or contain two periods (&quot;..&quot;) followed by <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, nor can it contain any invalid characters. You can query for invalid characters by using the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the asterisk wildcard character in a <code>searchPattern</code> such as &quot;*.txt&quot;, the number of characters in the specified extension affects the search as follows:  </p>\n<ul>\n<li><p>If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, &quot;*.xls&quot; returns both &quot;book.xls&quot; and &quot;book.xlsx&quot;.  </p>\n<ul>\n<li>In all other cases, the method returns files that exactly match the specified extension. For example, &quot;*.ai&quot; returns &quot;file.ai&quot; but not &quot;file.aif&quot;.  </li>\n</ul>\n<p>When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, &quot;file1.txt&quot; and &quot;file1.txtother&quot;, in a directory, a search pattern of &quot;file?.txt&quot; returns just the first file, whereas a search pattern of &quot;file*.txt&quot; returns both files.  </p>\n</li>\n</ul>\n</div>\n<p> The <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a> and <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a> methods differ as follows: When you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFileSystemEntries_\" data-linktype=\"relative-path\">EnumerateFileSystemEntries</a>, you can start enumerating the collection of entries before the whole collection is returned; when you use <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetFileSystemEntries_\" data-linktype=\"relative-path\">GetFileSystemEntries</a>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_EnumerateFiles_\" data-linktype=\"relative-path\">EnumerateFiles</a> can be more efficient.  </p>\n<p> You can specify relative path information with the <code>path</code> parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetLastAccessTime_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetLastAccessTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastAccessTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time the specified file or directory was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastAccessTime (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain access date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> This method is identical to <a class=\"xref\" href=\"system.io.file#System_IO_File_GetLastAccessTime_\" data-linktype=\"relative-path\">GetLastAccessTime</a>.  </p>\n<p> If the directory described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use <code>GetLastAccessTime</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dir_GetLastAccess#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\\\MyDir&quot;;\n      if (  !Directory::Exists( path ) )\n      {\n         Directory::CreateDirectory( path );\n      }\n      Directory::SetLastAccessTime( path, DateTime(1985,5,4) );\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = Directory::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this directory was {0}&quot;, dt );\n      \n      // Update the last access time.\n      Directory::SetLastAccessTime( path, DateTime::Now );\n      dt = Directory::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this directory was {0}&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_GetLastAccess#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:\\MyDir&quot;\n            If Directory.Exists(path) = False Then\n                Directory.CreateDirectory(path)\n            End If\n            Directory.SetLastAccessTime(path, New DateTime(1985, 5, 4))\n\n            &#39;Get the access time of a well-known directory.\n            Dim dt As DateTime = Directory.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt)\n\n            &#39;Update the last access time.\n            Directory.SetLastAccessTime(path, DateTime.Now)\n            dt = Directory.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Dir_GetLastAccess#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:\\MyDir&quot;;\n            if (!Directory.Exists(path)) \n            {\n                Directory.CreateDirectory(path);\n            }\n            Directory.SetLastAccessTime(path, new DateTime(1985,5,4));\n\n            // Get the creation time of a well-known directory.\n            DateTime dt = Directory.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt);\n\t\t\t\n            // Update the last access time.\n            Directory.SetLastAccessTime(path, DateTime.Now);\n            dt = Directory.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt);\n        } \n\n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetLastAccessTimeUtc_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetLastAccessTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastAccessTimeUtc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastAccessTimeUtc (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain access date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter is in an invalid format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the directory described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryUTCTime\n  {\n    public static void Main()\n    {\n\t// Set the directory.\n      string n = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;;\n\t\t//Create two variables to use to set the time.\n\t  DateTime dtime1 = new DateTime(2002, 1, 3);\n\t  DateTime dtime2 = new DateTime(1999, 1, 1);\n\n\t//Create the directory.\n\t  try\n\t  {\n\t\t  Directory.CreateDirectory(n);\n\t  }\n\t  catch (IOException e)\n\t  {\n\t\t  Console.WriteLine(e);\n\t  }\n\n\t//Set the creation and last access times to a variable DateTime value.\n\t  Directory.SetCreationTime(n, dtime1);\n\t  Directory.SetLastAccessTimeUtc(n, dtime1);\n\n\t\t// Print to console the results.\n\t  Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n));\n\t  Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n));\n\t  Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n));\n\t  Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n\t  Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n));\n\t  Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n));\n\n\t\t//Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2);\n\t  Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n    }\n  }\n}\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Set the directory.\n   String^ n = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est\\<br>ewdir&quot;;\n   \n   //Create two variables to use to set the time.\n   DateTime dtime1 = DateTime(2002,1,3);\n   DateTime dtime2 = DateTime(1999,1,1);\n   \n   //Create the directory.\n   try\n   {\n      Directory::CreateDirectory( n );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   //Set the creation and last access times to a variable DateTime value.\n   Directory::SetCreationTime( n, dtime1 );\n   Directory::SetLastAccessTimeUtc( n, dtime1 );\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Creation Date: {0}&quot;, Directory::GetCreationTime( n ) );\n   Console::WriteLine( &quot;UTC creation Date: {0}&quot;, Directory::GetCreationTimeUtc( n ) );\n   Console::WriteLine( &quot;Last write time: {0}&quot;, Directory::GetLastWriteTime( n ) );\n   Console::WriteLine( &quot;UTC last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n   Console::WriteLine( &quot;Last access time: {0}&quot;, Directory::GetLastAccessTime( n ) );\n   Console::WriteLine( &quot;UTC last access time: {0}&quot;, Directory::GetLastAccessTimeUtc( n ) );\n   \n   //Set the last write time to a different value.\n   Directory::SetLastWriteTimeUtc( n, dtime2 );\n   Console::WriteLine( &quot;Changed last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n}\n\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.UTCExample#1\">&#39; This sample shows the differences between dates from methods that use\n&#39;coordinated universal time (UTC) format and those that do not.\nImports System\nImports System.IO\n\n\n\nPublic Class DirectoryUTCTime\n   \n   Public Shared Sub Main()\n      &#39; Set the directory.\n      Dim n As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;\n      &#39;Create two variables to use to set the time.\n      Dim dtime1 As New DateTime(2002, 1, 3)\n      Dim dtime2 As New DateTime(1999, 1, 1)\n      \n      &#39;Create the directory.\n      Try\n         Directory.CreateDirectory(n)\n      Catch e As IOException\n         Console.WriteLine(e)\n      End Try\n      \n      &#39;Set the creation and last access times to a variable DateTime value.\n      Directory.SetCreationTime(n, dtime1)\n      Directory.SetLastAccessTimeUtc(n, dtime1)\n      \n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n))\n      Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n))\n      Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n))\n      Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n      Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n))\n      Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n))\n      \n      &#39;Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2)\n      Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n   End Sub &#39;Main\nEnd Class &#39;DirectoryUTCTime\n\n&#39; Since this sample deals with dates and times, the output will vary\n&#39; depending on when you run the executable. Here is one example of the output:\n\n&#39; Creation Date: 1/3/2002 12:00:00 AM\n&#39; UTC creation Date: 1/3/2002 8:00:00 AM\n&#39; Last write time: 12/31/1998 4:00:00 PM\n&#39; UTC last write time: 1/1/1999 12:00:00 AM\n&#39; Last access time: 1/2/2002 4:00:00 PM\n&#39; UTC last access time: 1/3/2002 12:00:00 AM\n&#39; Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetLastWriteTime_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetLastWriteTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastWriteTime(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time the specified file or directory was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastWriteTime (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain modification date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the directory described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use <code>GetLastWriteTime</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Dir_GetLastWrite#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:\\MyDir&quot;;\n            if (!Directory.Exists(path)) \n            {\n                Directory.CreateDirectory(path);\n            } \n            else \n            {\n                // Take an action which will affect the write time.\n                Directory.SetLastWriteTime(path, new DateTime(1985,4,3));\n            }\n\n            // Get the creation time of a well-known directory.\n            DateTime dt = Directory.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt);\n\t\t\t\n            // Update the last write time.\n            Directory.SetLastWriteTime(path, DateTime.Now);\n            dt = Directory.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt);\n        } \n\n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dir_GetLastWrite#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\\\MyDir&quot;;\n      if (  !Directory::Exists( path ) )\n      {\n         Directory::CreateDirectory( path );\n      }\n      else\n      {\n         \n         // Take an action which will affect the write time.\n         Directory::SetLastWriteTime( path, DateTime(1985,4,3) );\n      }\n      \n      // Get the creation time of a well-known directory.\n      DateTime dt = Directory::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this directory was {0}&quot;, dt );\n      \n      // Update the last write time.\n      Directory::SetLastWriteTime( path, DateTime::Now );\n      dt = Directory::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this directory was {0}&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_GetLastWrite#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:\\MyDir&quot;\n            If Directory.Exists(path) = False Then\n                Directory.CreateDirectory(path)\n            Else\n                &#39; Take an action which will affect the write time.\n                Directory.SetLastWriteTime(path, New DateTime(1985, 4, 3))\n            End If\n\n            &#39; Get the creation time of a well-known directory.\n            Dim dt As DateTime = Directory.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt)\n\n            &#39; Update the last write time.\n            Directory.SetLastWriteTime(path, DateTime.Now)\n            dt = Directory.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetLastWriteTimeUtc_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetLastWriteTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLastWriteTimeUtc(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static DateTime GetLastWriteTimeUtc (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain modification date and time information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  </p>\n</div>\n<p> If the directory described in the <code>path</code> parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryUTCTime\n  {\n    public static void Main()\n    {\n\t// Set the directory.\n      string n = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;;\n\t\t//Create two variables to use to set the time.\n\t  DateTime dtime1 = new DateTime(2002, 1, 3);\n\t  DateTime dtime2 = new DateTime(1999, 1, 1);\n\n\t//Create the directory.\n\t  try\n\t  {\n\t\t  Directory.CreateDirectory(n);\n\t  }\n\t  catch (IOException e)\n\t  {\n\t\t  Console.WriteLine(e);\n\t  }\n\n\t//Set the creation and last access times to a variable DateTime value.\n\t  Directory.SetCreationTime(n, dtime1);\n\t  Directory.SetLastAccessTimeUtc(n, dtime1);\n\n\t\t// Print to console the results.\n\t  Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n));\n\t  Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n));\n\t  Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n));\n\t  Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n\t  Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n));\n\t  Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n));\n\n\t\t//Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2);\n\t  Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n    }\n  }\n}\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Set the directory.\n   String^ n = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est\\<br>ewdir&quot;;\n   \n   //Create two variables to use to set the time.\n   DateTime dtime1 = DateTime(2002,1,3);\n   DateTime dtime2 = DateTime(1999,1,1);\n   \n   //Create the directory.\n   try\n   {\n      Directory::CreateDirectory( n );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   //Set the creation and last access times to a variable DateTime value.\n   Directory::SetCreationTime( n, dtime1 );\n   Directory::SetLastAccessTimeUtc( n, dtime1 );\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Creation Date: {0}&quot;, Directory::GetCreationTime( n ) );\n   Console::WriteLine( &quot;UTC creation Date: {0}&quot;, Directory::GetCreationTimeUtc( n ) );\n   Console::WriteLine( &quot;Last write time: {0}&quot;, Directory::GetLastWriteTime( n ) );\n   Console::WriteLine( &quot;UTC last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n   Console::WriteLine( &quot;Last access time: {0}&quot;, Directory::GetLastAccessTime( n ) );\n   Console::WriteLine( &quot;UTC last access time: {0}&quot;, Directory::GetLastAccessTimeUtc( n ) );\n   \n   //Set the last write time to a different value.\n   Directory::SetLastWriteTimeUtc( n, dtime2 );\n   Console::WriteLine( &quot;Changed last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n}\n\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.UTCExample#1\">&#39; This sample shows the differences between dates from methods that use\n&#39;coordinated universal time (UTC) format and those that do not.\nImports System\nImports System.IO\n\n\n\nPublic Class DirectoryUTCTime\n   \n   Public Shared Sub Main()\n      &#39; Set the directory.\n      Dim n As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;\n      &#39;Create two variables to use to set the time.\n      Dim dtime1 As New DateTime(2002, 1, 3)\n      Dim dtime2 As New DateTime(1999, 1, 1)\n      \n      &#39;Create the directory.\n      Try\n         Directory.CreateDirectory(n)\n      Catch e As IOException\n         Console.WriteLine(e)\n      End Try\n      \n      &#39;Set the creation and last access times to a variable DateTime value.\n      Directory.SetCreationTime(n, dtime1)\n      Directory.SetLastAccessTimeUtc(n, dtime1)\n      \n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n))\n      Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n))\n      Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n))\n      Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n      Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n))\n      Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n))\n      \n      &#39;Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2)\n      Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n   End Sub &#39;Main\nEnd Class &#39;DirectoryUTCTime\n\n&#39; Since this sample deals with dates and times, the output will vary\n&#39; depending on when you run the executable. Here is one example of the output:\n\n&#39; Creation Date: 1/3/2002 12:00:00 AM\n&#39; UTC creation Date: 1/3/2002 8:00:00 AM\n&#39; Last write time: 12/31/1998 4:00:00 PM\n&#39; UTC last write time: 1/1/1999 12:00:00 AM\n&#39; Last access time: 1/2/2002 4:00:00 PM\n&#39; UTC last access time: 1/3/2002 12:00:00 AM\n&#39; Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetLogicalDrives\">\r\n    \r\n            <a id=\"System_IO_Directory_GetLogicalDrives_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLogicalDrives()</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the names of the logical drives on this computer in the form &quot;<drive letter=\"\">:\\&quot;.<p>\n</drive>\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string[] GetLogicalDrives ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>The logical drives on this computer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occured (for example, a disk error).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetLogicalDrives returns all of the accessible drives on a particular machine, including the floppy drive and any optical drives.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the GetLogicalDrives method to assign the name of each drive on the calling computer to an array of strings. Each member of this string array is then printed to the console. The example is configured to catch all errors common to this method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#3\">using System;\n\nnamespace GetFileSystemEntries\n{\n    class Class1 \n    {\n        static void Main(string[] args) \n        {\n            Class1 snippets = new Class1();\n\n            string path = System.IO.Directory.GetCurrentDirectory();\n            string filter = &quot;*.exe&quot;;\n\n            snippets.PrintFileSystemEntries(path);\n            snippets.PrintFileSystemEntries(path, filter);\t\t\n            snippets.GetLogicalDrives();\n            snippets.GetParent(path);\n            snippets.Move(&quot;C:\\\\proof&quot;, &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n        }\n\n\t\t\n        void PrintFileSystemEntries(string path) \n        {\n\t\t\t\n            try \n            {\n                // Obtain the file system entries in the directory path.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n        void PrintFileSystemEntries(string path, string pattern) \n        {\n            try \n            {\n                // Obtain the file system entries in the directory\n                // path that match the pattern.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path, pattern); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n\n        // Print out all logical drives on the system.\n        void GetLogicalDrives() \n        {\n            try \n            {\n                string[] drives = System.IO.Directory.GetLogicalDrives();\n\n                foreach (string str in drives) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n        }\n        void GetParent(string path) \n        {\n            try \n            {\n                System.IO.DirectoryInfo directoryInfo =\n                    System.IO.Directory.GetParent(path);\n\n                System.Console.WriteLine(directoryInfo.FullName);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, or &quot; +\n                    &quot;contains invalid characters.&quot;);\n            }\n        }\n        void Move(string sourcePath, string destinationPath) \n        {\n            try \n            {\n                System.IO.Directory.Move(sourcePath, destinationPath);\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\t\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; +\n                    &quot;directory to a different &quot; +\n                    &quot;volume, or destDirName &quot; +\n                    &quot;already exists.&quot;); \n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#3\">Option Explicit On \nOption Strict On\n\nImports System\n\nNamespace GetFileSystemEntries\n    Class Class1\n        Overloads Shared Sub Main(ByVal args() As String)\n            Dim snippets As New Class1()\n            Dim path As String = System.IO.Directory.GetCurrentDirectory()\n            Dim filter As String = &quot;*.exe&quot;\n            snippets.PrintFileSystemEntries(path)\n            snippets.PrintFileSystemEntries(path, filter)\n            snippets.GetLogicalDrives()\n            snippets.GetParent(path)\n            snippets.Move(&quot;C:\\proof&quot;, &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n        End Sub &#39;Main\n\n        Sub PrintFileSystemEntries(ByVal path As String)\n            Try\n                &#39; Obtain the file system entries in the directory path.\n                Dim directoryEntries As String()\n                directoryEntries = System.IO.Directory.GetFileSystemEntries(path)\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n        Sub PrintFileSystemEntries(ByVal path As String, _\n                                   ByVal pattern As String)\n            Try\n                &#39; Obtain the file system entries in the directory\n                &#39; path that match the pattern.\n                Dim directoryEntries As String()\n                directoryEntries = _\n                   System.IO.Directory.GetFileSystemEntries(path, pattern)\n\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n\n        &#39; Print out all logical drives on the system.\n        Sub GetLogicalDrives()\n            Try\n                Dim drives As String()\n                drives = System.IO.Directory.GetLogicalDrives()\n\n                Dim str As String\n                For Each str In drives\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            End Try\n        End Sub\n        Sub GetParent(ByVal path As String)\n            Try\n                Dim directoryInfo As System.IO.DirectoryInfo\n                directoryInfo = System.IO.Directory.GetParent(path)\n                System.Console.WriteLine(directoryInfo.FullName)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                     &quot;contains only white spaces, or &quot; + _\n                                     &quot;contains invalid characters.&quot;)\n            End Try\n        End Sub\n        Sub Move(ByVal sourcePath As String, ByVal destinationPath As String)\n            Try\n                System.IO.Directory.Move(sourcePath, destinationPath)\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; + _\n                                        &quot;directory to a different &quot; + _\n                                        &quot;volume, or destDirName &quot; + _\n                                        &quot;already exists.&quot;)\n            End Try\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Directory#3\">using namespace System;\nclass Class1\n{\npublic:\n   void PrintFileSystemEntries( String^ path )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory path.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n   void PrintFileSystemEntries( String^ path, String^ pattern )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory\n         // path that match the pattern.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path, pattern );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n\n   // Print out all logical drives on the system.\n   void GetLogicalDrives()\n   {\n      try\n      {\n         array&lt;String^&gt;^drives = System::IO::Directory::GetLogicalDrives();\n         for ( int i = 0; i &lt; drives-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( drives[ i ] );\n\n         }\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An I/O error occurs.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n\n   }\n\n   void GetParent( String^ path )\n   {\n      try\n      {\n         System::IO::DirectoryInfo^ directoryInfo = System::IO::Directory::GetParent( path );\n         System::Console::WriteLine( directoryInfo-&gt;FullName );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, or \\HelloServer&#39;                  contains invalid characters.&quot; );\n      }\n\n   }\n\n   void Move( String^ sourcePath, String^ destinationPath )\n   {\n      try\n      {\n         System::IO::Directory::Move( sourcePath, destinationPath );\n         System::Console::WriteLine(  &quot;The directory move is complete.&quot; );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An attempt was made to move a \\HelloServer&#39;                  directory to a different \\HelloServer&#39;                  volume, or destDirName \\HelloServer&#39;                  already exists.&quot; );\n      }\n\n   }\n\n};\n\nint main()\n{\n   Class1 * snippets = new Class1;\n   String^ path = System::IO::Directory::GetCurrentDirectory();\n   String^ filter =  &quot;*.exe&quot;;\n   snippets-&gt;PrintFileSystemEntries( path );\n   snippets-&gt;PrintFileSystemEntries( path, filter );\n   snippets-&gt;GetLogicalDrives();\n   snippets-&gt;GetParent( path );\n   snippets-&gt;Move(  &quot;C:\\\\proof&quot;,  &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; );\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_GetParent_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_GetParent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetParent(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the parent directory of the specified path, including both absolute and relative paths.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.IO.DirectoryInfo GetParent (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path for which to retrieve the parent directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a></div>\r\n                  </div>\r\n                  <p>The parent directory, or <code>null</code> if <code>path</code> is the root directory, including the root of a UNC server or share name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The directory specified by <code>path</code> is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before getting the directory.  </p>\n<p> The string returned by this method consists of all characters in the path up to, but not including, the last <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>. For example, passing the path &quot;C:\\Directory\\SubDirectory\\test.txt&quot; to GetParent returns &quot;C:\\Directory\\SubDirectory&quot;. Passing &quot;C:\\Directory\\SubDirectory&quot; returns &quot;C:\\Directory&quot;. However, passing &quot;C:\\Directory\\SubDirectory\\&quot; returns &quot;C:\\Directory\\SubDirectory&quot;, because the ending directory separator is after &quot;SubDirectory&quot;.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the GetParent method to retrieve the parent directory of a user-specified location, &quot;path&quot;. The value returned by the GetParent method is then printed to the console. The example is configured to catch all errors common to this method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Directory#4\">using System;\n\nnamespace GetFileSystemEntries\n{\n    class Class1 \n    {\n        static void Main(string[] args) \n        {\n            Class1 snippets = new Class1();\n\n            string path = System.IO.Directory.GetCurrentDirectory();\n            string filter = &quot;*.exe&quot;;\n\n            snippets.PrintFileSystemEntries(path);\n            snippets.PrintFileSystemEntries(path, filter);\t\t\n            snippets.GetLogicalDrives();\n            snippets.GetParent(path);\n            snippets.Move(&quot;C:\\\\proof&quot;, &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n        }\n\n\t\t\n        void PrintFileSystemEntries(string path) \n        {\n\t\t\t\n            try \n            {\n                // Obtain the file system entries in the directory path.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n        void PrintFileSystemEntries(string path, string pattern) \n        {\n            try \n            {\n                // Obtain the file system entries in the directory\n                // path that match the pattern.\n                string[] directoryEntries =\n                    System.IO.Directory.GetFileSystemEntries(path, pattern); \n\n                foreach (string str in directoryEntries) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\n            }\n            catch (System.IO.DirectoryNotFoundException) \n            {\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + \n                    &quot;Directory object does not exist.&quot;);\n            }\n        }\n\n        // Print out all logical drives on the system.\n        void GetLogicalDrives() \n        {\n            try \n            {\n                string[] drives = System.IO.Directory.GetLogicalDrives();\n\n                foreach (string str in drives) \n                {\n                    System.Console.WriteLine(str);\n                }\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n        }\n        void GetParent(string path) \n        {\n            try \n            {\n                System.IO.DirectoryInfo directoryInfo =\n                    System.IO.Directory.GetParent(path);\n\n                System.Console.WriteLine(directoryInfo.FullName);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, or &quot; +\n                    &quot;contains invalid characters.&quot;);\n            }\n        }\n        void Move(string sourcePath, string destinationPath) \n        {\n            try \n            {\n                System.IO.Directory.Move(sourcePath, destinationPath);\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;);\n            }\n            catch (ArgumentNullException) \n            {\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;);\n            }\n            catch (System.Security.SecurityException) \n            {\n                System.Console.WriteLine(&quot;The caller does not have the &quot; +\n                    &quot;required permission.&quot;);\n            }\n            catch (ArgumentException) \n            {\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; +\n                    &quot;contains only white spaces, &quot; + \n                    &quot;or contains invalid characters.&quot;);\t\n            }\n            catch (System.IO.IOException) \n            {\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; +\n                    &quot;directory to a different &quot; +\n                    &quot;volume, or destDirName &quot; +\n                    &quot;already exists.&quot;); \n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Directory#4\">Option Explicit On \nOption Strict On\n\nImports System\n\nNamespace GetFileSystemEntries\n    Class Class1\n        Overloads Shared Sub Main(ByVal args() As String)\n            Dim snippets As New Class1()\n            Dim path As String = System.IO.Directory.GetCurrentDirectory()\n            Dim filter As String = &quot;*.exe&quot;\n            snippets.PrintFileSystemEntries(path)\n            snippets.PrintFileSystemEntries(path, filter)\n            snippets.GetLogicalDrives()\n            snippets.GetParent(path)\n            snippets.Move(&quot;C:\\proof&quot;, &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n        End Sub &#39;Main\n\n        Sub PrintFileSystemEntries(ByVal path As String)\n            Try\n                &#39; Obtain the file system entries in the directory path.\n                Dim directoryEntries As String()\n                directoryEntries = System.IO.Directory.GetFileSystemEntries(path)\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n        Sub PrintFileSystemEntries(ByVal path As String, _\n                                   ByVal pattern As String)\n            Try\n                &#39; Obtain the file system entries in the directory\n                &#39; path that match the pattern.\n                Dim directoryEntries As String()\n                directoryEntries = _\n                   System.IO.Directory.GetFileSystemEntries(path, pattern)\n\n                Dim str As String\n                For Each str In directoryEntries\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                        &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.DirectoryNotFoundException\n                System.Console.WriteLine(&quot;The path encapsulated in the &quot; + _\n                                        &quot;Directory object does not exist.&quot;)\n            End Try\n        End Sub\n\n        &#39; Print out all logical drives on the system.\n        Sub GetLogicalDrives()\n            Try\n                Dim drives As String()\n                drives = System.IO.Directory.GetLogicalDrives()\n\n                Dim str As String\n                For Each str In drives\n                    System.Console.WriteLine(str)\n                Next str\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An I/O error occurs.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            End Try\n        End Sub\n        Sub GetParent(ByVal path As String)\n            Try\n                Dim directoryInfo As System.IO.DirectoryInfo\n                directoryInfo = System.IO.Directory.GetParent(path)\n                System.Console.WriteLine(directoryInfo.FullName)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                     &quot;contains only white spaces, or &quot; + _\n                                     &quot;contains invalid characters.&quot;)\n            End Try\n        End Sub\n        Sub Move(ByVal sourcePath As String, ByVal destinationPath As String)\n            Try\n                System.IO.Directory.Move(sourcePath, destinationPath)\n                System.Console.WriteLine(&quot;The directory move is complete.&quot;)\n            Catch exp As ArgumentNullException\n                System.Console.WriteLine(&quot;Path is a null reference.&quot;)\n            Catch exp As System.Security.SecurityException\n                System.Console.WriteLine(&quot;The caller does not have the &quot; + _\n                                           &quot;required permission.&quot;)\n            Catch exp As ArgumentException\n                System.Console.WriteLine(&quot;Path is an empty string, &quot; + _\n                                        &quot;contains only white spaces, &quot; + _\n                                        &quot;or contains invalid characters.&quot;)\n            Catch exp As System.IO.IOException\n                System.Console.WriteLine(&quot;An attempt was made to move a &quot; + _\n                                        &quot;directory to a different &quot; + _\n                                        &quot;volume, or destDirName &quot; + _\n                                        &quot;already exists.&quot;)\n            End Try\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Directory#4\">using namespace System;\nclass Class1\n{\npublic:\n   void PrintFileSystemEntries( String^ path )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory path.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n   void PrintFileSystemEntries( String^ path, String^ pattern )\n   {\n      try\n      {\n         \n         // Obtain the file system entries in the directory\n         // path that match the pattern.\n         array&lt;String^&gt;^directoryEntries = System::IO::Directory::GetFileSystemEntries( path, pattern );\n         for ( int i = 0; i &lt; directoryEntries-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( directoryEntries[ i ] );\n\n         }\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::DirectoryNotFoundException^ ) \n      {\n         System::Console::WriteLine(  &quot;The path encapsulated in the \\HelloServer&#39;                  Directory object does not exist.&quot; );\n      }\n\n   }\n\n\n   // Print out all logical drives on the system.\n   void GetLogicalDrives()\n   {\n      try\n      {\n         array&lt;String^&gt;^drives = System::IO::Directory::GetLogicalDrives();\n         for ( int i = 0; i &lt; drives-&gt;Length; i++ )\n         {\n            System::Console::WriteLine( drives[ i ] );\n\n         }\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An I/O error occurs.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n\n   }\n\n   void GetParent( String^ path )\n   {\n      try\n      {\n         System::IO::DirectoryInfo^ directoryInfo = System::IO::Directory::GetParent( path );\n         System::Console::WriteLine( directoryInfo-&gt;FullName );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, or \\HelloServer&#39;                  contains invalid characters.&quot; );\n      }\n\n   }\n\n   void Move( String^ sourcePath, String^ destinationPath )\n   {\n      try\n      {\n         System::IO::Directory::Move( sourcePath, destinationPath );\n         System::Console::WriteLine(  &quot;The directory move is complete.&quot; );\n      }\n      catch ( ArgumentNullException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is a null reference.&quot; );\n      }\n      catch ( System::Security::SecurityException^ ) \n      {\n         System::Console::WriteLine(  &quot;The caller does not have the \\HelloServer&#39;                  required permission.&quot; );\n      }\n      catch ( ArgumentException^ ) \n      {\n         System::Console::WriteLine(  &quot;Path is an empty String, \\HelloServer&#39;                  contains only white spaces, \\HelloServer&#39;                  or contains invalid characters.&quot; );\n      }\n      catch ( System::IO::IOException^ ) \n      {\n         System::Console::WriteLine(  &quot;An attempt was made to move a \\HelloServer&#39;                  directory to a different \\HelloServer&#39;                  volume, or destDirName \\HelloServer&#39;                  already exists.&quot; );\n      }\n\n   }\n\n};\n\nint main()\n{\n   Class1 * snippets = new Class1;\n   String^ path = System::IO::Directory::GetCurrentDirectory();\n   String^ filter =  &quot;*.exe&quot;;\n   snippets-&gt;PrintFileSystemEntries( path );\n   snippets-&gt;PrintFileSystemEntries( path, filter );\n   snippets-&gt;GetLogicalDrives();\n   snippets-&gt;GetParent( path );\n   snippets-&gt;Move(  &quot;C:\\\\proof&quot;,  &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot; );\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_Move_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_Move_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Move(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Moves a file or a directory and its contents to a new location.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Move (string sourceDirName, string destDirName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sourceDirName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the file or directory to move.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>destDirName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to the new location for <code>sourceDirName</code>. If <code>sourceDirName</code> is a file, then <code>destDirName</code> must also be a file name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An attempt was made to move a directory to a different volume.  </p>\n<p> -or-  </p>\n<p> <code>destDirName</code> already exists.  </p>\n<p> -or-  </p>\n<p> The <code>sourceDirName</code> and <code>destDirName</code> parameters refer to the same file or directory.  </p>\n<p> -or-  </p>\n<p> The directory or a file within it is being used by another process.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>sourceDirName</code> or <code>destDirName</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>sourceDirName</code> or <code>destDirName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The path specified by <code>sourceDirName</code> is invalid (for example, it is on an unmapped drive).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a new directory with the name specified by <code>destDirName</code> and moves the contents of <code>sourceDirName</code> to the newly created destination directory. If you try to move a directory to a directory that already exists, an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> will occur. For example, an exception will occur if you try to move c:\\mydir to c:\\public, and c:\\public already exists. Alternatively, you could specify &quot;c:\\\\public\\\\mydir&quot; as the <code>destDirName</code> parameter, provided that &quot;mydir&quot; does not exist under &quot;c:\\\\public&quot;, or specify a new directory name such as &quot;c:\\\\newdir&quot;.  </p>\n<p> The <code>sourceDirName</code> and <code>destDirName</code> arguments are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Trailing spaces are removed from the end of the path parameters before moving the directory.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Directory#14\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim sourceDirectory As String = &quot;C:\\source&quot;\n        Dim destinationDirectory As String = &quot;C:\\destination&quot;\n\n        Try\n            Directory.Move(sourceDirectory, destinationDirectory)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Directory#14\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string sourceDirectory = @&quot;C:\\source&quot;;\n            string destinationDirectory = @&quot;C:\\destination&quot;;\n\n            try\n            {\n                Directory.Move(sourceDirectory, destinationDirectory);  \n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.Message);\n            }\n        }\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetAccessControl_System_String_System_Security_AccessControl_DirectorySecurity_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetAccessControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetAccessControl(String,DirectorySecurity)</div>        \r\n          </div>\r\n    \r\n            <p>Applies access control list (ACL) entries described by a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to the specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A directory to add or remove access control list (ACL) entries from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>directorySecurity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object that describes an ACL entry to apply to the directory described by the <code>path</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>directorySecurity</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The directory could not be found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> was invalid.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The current process does not have access to the directory specified by <code>path</code>.  </p>\n<p> -or-  </p>\n<p> The current process does not have sufficient privilege to set the ACL entry.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows 2000 or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetAccessControl method applies access control list (ACL) entries to a file that represents the noninherited ACL list.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The ACL specified for the <code>directorySecurity</code> parameter replaces the existing ACL for the directory. To add permissions for a new user, use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to obtain the existing ACL and modify it.  </p>\n</div>\n<p> An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see <a href=\"../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md\" data-linktype=\"relative-path\">How to: Add or Remove Access Control List Entries</a>.  </p>\n<p> The SetAccessControl method persists only <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> objects that have been modified after object creation.  If a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object from one file and reapply the same object to another file.  </p>\n<p> To copy ACL information from one file to another:  </p>\n<ol>\n<li><p>Use the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> method to retrieve the <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object from the source file.  </p>\n</li>\n<li><p>Create a new <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object for the destination file.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_GetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">GetSecurityDescriptorSddlForm</a> method of the source <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to retrieve the ACL information.  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorBinaryForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorBinaryForm</a> or <a class=\"xref\" href=\"system.security.accesscontrol.objectsecurity#System_Security_AccessControl_ObjectSecurity_SetSecurityDescriptorSddlForm_\" data-linktype=\"relative-path\">SetSecurityDescriptorSddlForm</a> method to copy the information retrieved in step 3 to the destination <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object.  </p>\n</li>\n<li><p>Set the destination <a class=\"xref\" href=\"system.security.accesscontrol.directorysecurity\" data-linktype=\"relative-path\">DirectorySecurity</a> object to the destination file using the SetAccessControl method.  </p>\n<p>In NTFS environments, <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> are granted to the user if the user has <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> rights on the parent folder. To deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> and <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a>, deny <a class=\"xref\" href=\"system.security.accesscontrol.filesystemrights\" data-linktype=\"relative-path\">FileSystemRights</a> on the parent directory.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetAccessControl_\" data-linktype=\"relative-path\">GetAccessControl</a> and the SetAccessControl methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::AccessControl;\n\n// Adds an ACL entry on the specified directory for the\n// specified account.\nvoid AddDirectorySecurity(String^ directoryName, String^ account, \n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;AddAccessRule( gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}\n\n// Removes an ACL entry on the specified directory for the\n// specified account.\nvoid RemoveDirectorySecurity(String^ directoryName, String^ account,\n     FileSystemRights rights, AccessControlType controlType)\n{\n    // Create a new DirectoryInfo object.\n    DirectoryInfo^ dInfo = gcnew DirectoryInfo(directoryName);\n\n    // Get a DirectorySecurity object that represents the\n    // current security settings.\n    DirectorySecurity^ dSecurity = dInfo-&gt;GetAccessControl();\n\n    // Add the FileSystemAccessRule to the security settings.\n    dSecurity-&gt;RemoveAccessRule(gcnew FileSystemAccessRule(account,\n        rights, controlType));\n\n    // Set the new access settings.\n    dInfo-&gt;SetAccessControl(dSecurity);\n}    \n\nint main()\n{\n    String^ directoryName = &quot;TestDirectory&quot;;\n    String^ accountName = &quot;MYDOMAIN\\\\MyAccount&quot;;\n    if (!Directory::Exists(directoryName))\n    {\n        Console::WriteLine(&quot;The directory {0} could not be found.&quot;, \n            directoryName);\n        return 0;\n    }\n    try\n    {\n        Console::WriteLine(&quot;Adding access control entry for {0}&quot;,\n            directoryName);\n\n        // Add the access control entry to the directory.\n        AddDirectorySecurity(directoryName, accountName,\n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Removing access control entry from {0}&quot;,\n            directoryName);\n\n        // Remove the access control entry from the directory.\n        RemoveDirectorySecurity(directoryName, accountName, \n            FileSystemRights::ReadData, AccessControlType::Allow);\n\n        Console::WriteLine(&quot;Done.&quot;);\n    }\n    catch (UnauthorizedAccessException^)\n    {\n        Console::WriteLine(&quot;You are not authorised to carry&quot; +\n            &quot; out this procedure.&quot;);\n    }\n    catch (System::Security::Principal::\n        IdentityNotMappedException^)\n    {\n        Console::WriteLine(&quot;The account {0} could not be found.&quot;, accountName);\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">using System;\nusing System.IO;\nusing System.Security.AccessControl;\n\nnamespace FileSystemExample\n{\n    class DirectoryExample\n    {\n        public static void Main()\n        {\n            try\n            {\n                string DirectoryName = &quot;TestDirectory&quot;;\n\n                Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName);\n\n                // Add the access control entry to the directory.\n                AddDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName);\n\n                // Remove the access control entry from the directory.\n                RemoveDirectorySecurity(DirectoryName, @&quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow);\n\n                Console.WriteLine(&quot;Done.&quot;);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n            }\n\n            Console.ReadLine();\n        }\n\n        // Adds an ACL entry on the specified directory for the specified account.\n        public static void AddDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.AddAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n\n        // Removes an ACL entry on the specified directory for the specified account.\n        public static void RemoveDirectorySecurity(string FileName, string Account, FileSystemRights Rights, AccessControlType ControlType)\n        {\n            // Create a new DirectoryInfo object.\n            DirectoryInfo dInfo = new DirectoryInfo(FileName);\n\n            // Get a DirectorySecurity object that represents the \n            // current security settings.\n            DirectorySecurity dSecurity = dInfo.GetAccessControl();\n\n            // Add the FileSystemAccessRule to the security settings. \n            dSecurity.RemoveAccessRule(new FileSystemAccessRule(Account,\n                                                            Rights,\n                                                            ControlType));\n\n            // Set the new access settings.\n            dInfo.SetAccessControl(dSecurity);\n\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.DiretoryInfo.GetAccessControl-SetAccessControl#1\">Imports System\nImports System.IO\nImports System.Security.AccessControl\n\n\n\nModule DirectoryExample\n\n    Sub Main()\n        Try\n            Dim DirectoryName As String = &quot;TestDirectory&quot;\n\n            Console.WriteLine(&quot;Adding access control entry for &quot; + DirectoryName)\n\n            &#39; Add the access control entry to the directory.\n            AddDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Removing access control entry from &quot; + DirectoryName)\n\n            &#39; Remove the access control entry from the directory.\n            RemoveDirectorySecurity(DirectoryName, &quot;MYDOMAIN\\MyAccount&quot;, FileSystemRights.ReadData, AccessControlType.Allow)\n\n            Console.WriteLine(&quot;Done.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39; Adds an ACL entry on the specified directory for the specified account.\n    Sub AddDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfoobject.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.AddAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\n\n\n    &#39; Removes an ACL entry on the specified directory for the specified account.\n    Sub RemoveDirectorySecurity(ByVal FileName As String, ByVal Account As String, ByVal Rights As FileSystemRights, ByVal ControlType As AccessControlType)\n        &#39; Create a new DirectoryInfo object.\n        Dim dInfo As New DirectoryInfo(FileName)\n\n        &#39; Get a DirectorySecurity object that represents the \n        &#39; current security settings.\n        Dim dSecurity As DirectorySecurity = dInfo.GetAccessControl()\n\n        &#39; Add the FileSystemAccessRule to the security settings. \n        dSecurity.RemoveAccessRule(New FileSystemAccessRule(Account, Rights, ControlType))\n\n        &#39; Set the new access settings.\n        dInfo.SetAccessControl(dSecurity)\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetCreationTime_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetCreationTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCreationTime(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the creation date and time for the specified file or directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCreationTime (string path, DateTime creationTime);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to set the creation date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time the file or directory was last written to. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>creationTime</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryUTCTime\n  {\n    public static void Main()\n    {\n\t// Set the directory.\n      string n = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;;\n\t\t//Create two variables to use to set the time.\n\t  DateTime dtime1 = new DateTime(2002, 1, 3);\n\t  DateTime dtime2 = new DateTime(1999, 1, 1);\n\n\t//Create the directory.\n\t  try\n\t  {\n\t\t  Directory.CreateDirectory(n);\n\t  }\n\t  catch (IOException e)\n\t  {\n\t\t  Console.WriteLine(e);\n\t  }\n\n\t//Set the creation and last access times to a variable DateTime value.\n\t  Directory.SetCreationTime(n, dtime1);\n\t  Directory.SetLastAccessTimeUtc(n, dtime1);\n\n\t\t// Print to console the results.\n\t  Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n));\n\t  Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n));\n\t  Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n));\n\t  Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n\t  Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n));\n\t  Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n));\n\n\t\t//Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2);\n\t  Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n    }\n  }\n}\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Set the directory.\n   String^ n = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est\\<br>ewdir&quot;;\n   \n   //Create two variables to use to set the time.\n   DateTime dtime1 = DateTime(2002,1,3);\n   DateTime dtime2 = DateTime(1999,1,1);\n   \n   //Create the directory.\n   try\n   {\n      Directory::CreateDirectory( n );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   //Set the creation and last access times to a variable DateTime value.\n   Directory::SetCreationTime( n, dtime1 );\n   Directory::SetLastAccessTimeUtc( n, dtime1 );\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Creation Date: {0}&quot;, Directory::GetCreationTime( n ) );\n   Console::WriteLine( &quot;UTC creation Date: {0}&quot;, Directory::GetCreationTimeUtc( n ) );\n   Console::WriteLine( &quot;Last write time: {0}&quot;, Directory::GetLastWriteTime( n ) );\n   Console::WriteLine( &quot;UTC last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n   Console::WriteLine( &quot;Last access time: {0}&quot;, Directory::GetLastAccessTime( n ) );\n   Console::WriteLine( &quot;UTC last access time: {0}&quot;, Directory::GetLastAccessTimeUtc( n ) );\n   \n   //Set the last write time to a different value.\n   Directory::SetLastWriteTimeUtc( n, dtime2 );\n   Console::WriteLine( &quot;Changed last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n}\n\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.UTCExample#1\">&#39; This sample shows the differences between dates from methods that use\n&#39;coordinated universal time (UTC) format and those that do not.\nImports System\nImports System.IO\n\n\n\nPublic Class DirectoryUTCTime\n   \n   Public Shared Sub Main()\n      &#39; Set the directory.\n      Dim n As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;\n      &#39;Create two variables to use to set the time.\n      Dim dtime1 As New DateTime(2002, 1, 3)\n      Dim dtime2 As New DateTime(1999, 1, 1)\n      \n      &#39;Create the directory.\n      Try\n         Directory.CreateDirectory(n)\n      Catch e As IOException\n         Console.WriteLine(e)\n      End Try\n      \n      &#39;Set the creation and last access times to a variable DateTime value.\n      Directory.SetCreationTime(n, dtime1)\n      Directory.SetLastAccessTimeUtc(n, dtime1)\n      \n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n))\n      Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n))\n      Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n))\n      Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n      Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n))\n      Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n))\n      \n      &#39;Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2)\n      Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n   End Sub &#39;Main\nEnd Class &#39;DirectoryUTCTime\n\n&#39; Since this sample deals with dates and times, the output will vary\n&#39; depending on when you run the executable. Here is one example of the output:\n\n&#39; Creation Date: 1/3/2002 12:00:00 AM\n&#39; UTC creation Date: 1/3/2002 8:00:00 AM\n&#39; Last write time: 12/31/1998 4:00:00 PM\n&#39; UTC last write time: 1/1/1999 12:00:00 AM\n&#39; Last access time: 1/2/2002 4:00:00 PM\n&#39; UTC last access time: 1/3/2002 12:00:00 AM\n&#39; Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetCreationTimeUtc_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetCreationTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCreationTimeUtc(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to set the creation date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationTimeUtc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time the directory or file was created. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>creationTime</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetCurrentDirectory_System_String_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetCurrentDirectory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCurrentDirectory(String)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the application&#39;s current working directory to the specified directory.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetCurrentDirectory (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to which the current working directory is set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission to access unmanaged code.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.directorynotfoundexception\" data-linktype=\"relative-path\">DirectoryNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified directory was not found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the application terminates, the working directory is restored to its original location (the directory where the process was started).  </p>\n<p> The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Trailing spaces are removed from the end of the <code>path</code> parameter before setting the directory.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> If you are setting the directory to a drive with removable media (for example, to &quot;A:&quot; for a floppy disk drive or &quot;E:&quot; for a CD-ROM drive), you can determine whether the drive is ready by using the <a class=\"xref\" href=\"system.io.driveinfo#System_IO_DriveInfo_IsReady_\" data-linktype=\"relative-path\">IsReady</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates how to set the current directory and display the directory root.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.DirectoryRoot#1\">// This sample shows how to set the current directory and how to determine\n// the root directory.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Create string for a directory. This value should be an existing directory\n   // or the sample will throw a DirectoryNotFoundException.\n   String^ dir = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est&quot;;\n   try\n   {\n      \n      //Set the current directory.\n      Directory::SetCurrentDirectory( dir );\n   }\n   catch ( DirectoryNotFoundException^ e ) \n   {\n      Console::WriteLine( &quot;The specified directory does not exist. {0}&quot;, e );\n   }\n\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Root directory: {0}&quot;, Directory::GetDirectoryRoot( dir ) );\n   Console::WriteLine( &quot;Current directory: {0}&quot;, Directory::GetCurrentDirectory() );\n}\n\n// The output of this sample depends on what value you assign to the variable dir.\n// If the directory c:&nbsp;&nbsp;&nbsp;&nbsp;est exists, the output for this sample is:\n// Root directory: C:\\\n// Current directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.DirectoryRoot#1\">// This sample shows how to set the current directory and how to determine\n// the root directory.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryRoot\n  {\n    public static void Main()\n    {\n\t// Create string for a directory. This value should be an existing directory\n\t// or the sample will throw a DirectoryNotFoundException.\n      string dir = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est&quot;;\t\t\n\t  try\n\t  {\n\t\t  //Set the current directory.\n\t\t  Directory.SetCurrentDirectory(dir);\n\t  }\n\t  catch (DirectoryNotFoundException e)\n\t  {\n\t\t  Console.WriteLine(&quot;The specified directory does not exist. {0}&quot;, e);\n\t  }\n\t// Print to console the results.\n\t  Console.WriteLine(&quot;Root directory: {0}&quot;, Directory.GetDirectoryRoot(dir));\n\t  Console.WriteLine(&quot;Current directory: {0}&quot;, Directory.GetCurrentDirectory());\n    }\n  }\n}\n// The output of this sample depends on what value you assign to the variable dir.\n// If the directory c:&nbsp;&nbsp;&nbsp;&nbsp;est exists, the output for this sample is:\n// Root directory: C:\\\n// Current directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.DirectoryRoot#1\">&#39; This sample shows how to set the current directory and how to determine\n&#39; the root directory.\nImports System\nImports System.IO\n\nPublic Class DirectoryRoot\n   \n   Public Shared Sub Main()\n      &#39; Create string for a directory. This value should be an existing directory\n      &#39; or the sample will throw a DirectoryNotFoundException.\n      Dim dir As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est&quot;\n      Try\n         &#39;Set the current directory.\n         Directory.SetCurrentDirectory(dir)\n      Catch e As DirectoryNotFoundException\n         Console.WriteLine(&quot;The specified directory does not exist. {0}&quot;, e)\n      End Try\n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Root directory: {0}&quot;, Directory.GetDirectoryRoot(dir))\n      Console.WriteLine(&quot;Current directory: {0}&quot;, Directory.GetCurrentDirectory())\n   End Sub &#39;Main\nEnd Class &#39;DirectoryRoot\n&#39; The output of this sample depends on what value you assign to the variable dir.\n&#39; If the directory c:&nbsp;&nbsp;&nbsp;&nbsp;est exists, the output for this sample is:\n&#39; Root directory: C:\\\n&#39; Current directory: C:&nbsp;&nbsp;&nbsp;&nbsp;est\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetLastAccessTime_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetLastAccessTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastAccessTime(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time the specified file or directory was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastAccessTime (string path, DateTime lastAccessTime);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to set the access date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastAccessTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that contains the value to set for the access date and time of <code>path</code>. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastAccessTime</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use <code>SetLastAccessTime</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Dir_SetLastAccess#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:\\MyDir&quot;;\n            if (!Directory.Exists(path)) \n            {\n                Directory.CreateDirectory(path);\n            }\n            Directory.SetLastAccessTime(path, new DateTime(1985,5,4));\n\n            // Get the last access time of a well-known directory.\n            DateTime dt = Directory.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt);\n\t\t\t\n            // Update the last access time.\n            Directory.SetLastAccessTime(path, DateTime.Now);\n            dt = Directory.GetLastAccessTime(path);\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt);\n        } \n\n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Dir_SetLastAccess#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   try\n   {\n      String^ path = &quot;c:\\\\MyDir&quot;;\n      if (  !Directory::Exists( path ) )\n      {\n         Directory::CreateDirectory( path );\n      }\n      Directory::SetLastAccessTime( path, DateTime(1985,5,4) );\n      \n      // Get the last access time of a well-known directory.\n      DateTime dt = Directory::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this directory was {0}&quot;, dt );\n      \n      // Update the last access time.\n      Directory::SetLastAccessTime( path, DateTime::Now );\n      dt = Directory::GetLastAccessTime( path );\n      Console::WriteLine( &quot;The last access time for this directory was {0}&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_SetLastAccess#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:\\MyDir&quot;\n            If Directory.Exists(path) = False Then\n                Directory.CreateDirectory(path)\n            End If\n            Directory.SetLastAccessTime(path, New DateTime(1985, 5, 4))\n\n            &#39;Get the last access time of a well-known directory.\n            Dim dt As DateTime = Directory.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt)\n\n            &#39;Update the last access time.\n            Directory.SetLastAccessTime(path, DateTime.Now)\n            dt = Directory.GetLastAccessTime(path)\n            Console.WriteLine(&quot;The last access time for this directory was {0}&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetLastAccessTimeUtc_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetLastAccessTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastAccessTimeUtc(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to set the access date and time information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastAccessTimeUtc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that  contains the value to set for the access date and time of <code>path</code>. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastAccessTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryUTCTime\n  {\n    public static void Main()\n    {\n\t// Set the directory.\n      string n = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;;\n\t\t//Create two variables to use to set the time.\n\t  DateTime dtime1 = new DateTime(2002, 1, 3);\n\t  DateTime dtime2 = new DateTime(1999, 1, 1);\n\n\t//Create the directory.\n\t  try\n\t  {\n\t\t  Directory.CreateDirectory(n);\n\t  }\n\t  catch (IOException e)\n\t  {\n\t\t  Console.WriteLine(e);\n\t  }\n\n\t//Set the creation and last access times to a variable DateTime value.\n\t  Directory.SetCreationTime(n, dtime1);\n\t  Directory.SetLastAccessTimeUtc(n, dtime1);\n\n\t\t// Print to console the results.\n\t  Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n));\n\t  Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n));\n\t  Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n));\n\t  Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n\t  Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n));\n\t  Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n));\n\n\t\t//Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2);\n\t  Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n    }\n  }\n}\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Set the directory.\n   String^ n = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est\\<br>ewdir&quot;;\n   \n   //Create two variables to use to set the time.\n   DateTime dtime1 = DateTime(2002,1,3);\n   DateTime dtime2 = DateTime(1999,1,1);\n   \n   //Create the directory.\n   try\n   {\n      Directory::CreateDirectory( n );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   //Set the creation and last access times to a variable DateTime value.\n   Directory::SetCreationTime( n, dtime1 );\n   Directory::SetLastAccessTimeUtc( n, dtime1 );\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Creation Date: {0}&quot;, Directory::GetCreationTime( n ) );\n   Console::WriteLine( &quot;UTC creation Date: {0}&quot;, Directory::GetCreationTimeUtc( n ) );\n   Console::WriteLine( &quot;Last write time: {0}&quot;, Directory::GetLastWriteTime( n ) );\n   Console::WriteLine( &quot;UTC last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n   Console::WriteLine( &quot;Last access time: {0}&quot;, Directory::GetLastAccessTime( n ) );\n   Console::WriteLine( &quot;UTC last access time: {0}&quot;, Directory::GetLastAccessTimeUtc( n ) );\n   \n   //Set the last write time to a different value.\n   Directory::SetLastWriteTimeUtc( n, dtime2 );\n   Console::WriteLine( &quot;Changed last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n}\n\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.UTCExample#1\">&#39; This sample shows the differences between dates from methods that use\n&#39;coordinated universal time (UTC) format and those that do not.\nImports System\nImports System.IO\n\n\n\nPublic Class DirectoryUTCTime\n   \n   Public Shared Sub Main()\n      &#39; Set the directory.\n      Dim n As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;\n      &#39;Create two variables to use to set the time.\n      Dim dtime1 As New DateTime(2002, 1, 3)\n      Dim dtime2 As New DateTime(1999, 1, 1)\n      \n      &#39;Create the directory.\n      Try\n         Directory.CreateDirectory(n)\n      Catch e As IOException\n         Console.WriteLine(e)\n      End Try\n      \n      &#39;Set the creation and last access times to a variable DateTime value.\n      Directory.SetCreationTime(n, dtime1)\n      Directory.SetLastAccessTimeUtc(n, dtime1)\n      \n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n))\n      Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n))\n      Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n))\n      Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n      Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n))\n      Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n))\n      \n      &#39;Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2)\n      Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n   End Sub &#39;Main\nEnd Class &#39;DirectoryUTCTime\n\n&#39; Since this sample deals with dates and times, the output will vary\n&#39; depending on when you run the executable. Here is one example of the output:\n\n&#39; Creation Date: 1/3/2002 12:00:00 AM\n&#39; UTC creation Date: 1/3/2002 8:00:00 AM\n&#39; Last write time: 12/31/1998 4:00:00 PM\n&#39; UTC last write time: 1/1/1999 12:00:00 AM\n&#39; Last access time: 1/2/2002 4:00:00 PM\n&#39; UTC last access time: 1/3/2002 12:00:00 AM\n&#39; Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetLastWriteTime_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetLastWriteTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastWriteTime(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time a directory was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastWriteTime (string path, DateTime lastWriteTime);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastWriteTime</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time the directory was last written to. This value is expressed in local time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastWriteTime</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use <code>SetLastWriteTime</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Dir_SetLastWrite#1\">using namespace System;\nusing namespace System::IO;\nvoid main()\n{\n   try\n   {\n      String^ path = &quot;c:\\\\MyDir&quot;;\n      if (  !Directory::Exists( path ) )\n      {\n         Directory::CreateDirectory( path );\n      }\n      else\n      {\n         \n         // Take an action that will affect the write time.\n         Directory::SetLastWriteTime( path, DateTime(1985,4,3) );\n      }\n      \n      // Get the last write time of a well-known directory.\n      DateTime dt = Directory::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this directory was {0}&quot;, dt );\n      \n      //Update the last write time.\n      Directory::SetLastWriteTime( path, DateTime::Now );\n      dt = Directory::GetLastWriteTime( path );\n      Console::WriteLine( &quot;The last write time for this directory was {0}&quot;, dt );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;The process failed: {0}&quot;, e );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Dir_SetLastWrite#1\">using System;\nusing System.IO;\n\nclass Test \n{\n    public static void Main() \n    {\n        try \n        {\n            string path = @&quot;c:\\MyDir&quot;;\n            if (!Directory.Exists(path)) \n            {\n                Directory.CreateDirectory(path);\n            } \n            else \n            {\n                // Take an action that will affect the write time.\n                Directory.SetLastWriteTime(path, new DateTime(1985,4,3));\n            }\n\n            // Get the last write time of a well-known directory.\n            DateTime dt = Directory.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt);\n\t\t\t\n            //Update the last write time.\n            Directory.SetLastWriteTime(path, DateTime.Now);\n            dt = Directory.GetLastWriteTime(path);\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt);\n        } \n        catch (Exception e) \n        {\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Dir_SetLastWrite#1\">Imports System\nImports System.IO\n\nPublic Class Test\n    Public Shared Sub Main()\n        Try\n            Dim path As String = &quot;c:\\MyDir&quot;\n            If Directory.Exists(path) = False Then\n                Directory.CreateDirectory(path)\n            Else\n                &#39; Take an action that will affect the write time.\n                Directory.SetLastWriteTime(path, New DateTime(1985, 4, 3))\n            End If\n\n            &#39;Get the last write time of a well-known directory.\n            Dim dt As DateTime = Directory.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt)\n\n            &#39;Update the last write time.\n            Directory.SetLastWriteTime(path, DateTime.Now)\n            dt = Directory.GetLastWriteTime(path)\n            Console.WriteLine(&quot;The last write time for this directory was {0}&quot;, dt)\n\n        Catch e As Exception\n            Console.WriteLine(&quot;The process failed: {0}&quot;, e.ToString())\n        End Try\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Directory_SetLastWriteTimeUtc_System_String_System_DateTime_\">\r\n    \r\n            <a id=\"System_IO_Directory_SetLastWriteTimeUtc_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLastWriteTimeUtc(String,DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the directory.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lastWriteTimeUtc</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date and time the directory was last written to. This value is expressed in UTC time.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></div>\r\n                  </div>\r\n                  <p>The specified path was not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The current operating system is not Windows NT or later.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>lastWriteTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>path</code> parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> The <code>path</code> parameter is not case-sensitive.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing System;\nusing System.IO;\n\nnamespace IOSamples\n{\n  public class DirectoryUTCTime\n  {\n    public static void Main()\n    {\n\t// Set the directory.\n      string n = @&quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;;\n\t\t//Create two variables to use to set the time.\n\t  DateTime dtime1 = new DateTime(2002, 1, 3);\n\t  DateTime dtime2 = new DateTime(1999, 1, 1);\n\n\t//Create the directory.\n\t  try\n\t  {\n\t\t  Directory.CreateDirectory(n);\n\t  }\n\t  catch (IOException e)\n\t  {\n\t\t  Console.WriteLine(e);\n\t  }\n\n\t//Set the creation and last access times to a variable DateTime value.\n\t  Directory.SetCreationTime(n, dtime1);\n\t  Directory.SetLastAccessTimeUtc(n, dtime1);\n\n\t\t// Print to console the results.\n\t  Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n));\n\t  Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n));\n\t  Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n));\n\t  Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n\t  Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n));\n\t  Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n));\n\n\t\t//Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2);\n\t  Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n));\n    }\n  }\n}\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.UTCExample#1\">// This sample shows the differences between dates from methods that use\n//coordinated universal time (UTC) format and those that do not.\nusing namespace System;\nusing namespace System::IO;\nint main()\n{\n   \n   // Set the directory.\n   String^ n = &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;est\\<br>ewdir&quot;;\n   \n   //Create two variables to use to set the time.\n   DateTime dtime1 = DateTime(2002,1,3);\n   DateTime dtime2 = DateTime(1999,1,1);\n   \n   //Create the directory.\n   try\n   {\n      Directory::CreateDirectory( n );\n   }\n   catch ( IOException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   \n   //Set the creation and last access times to a variable DateTime value.\n   Directory::SetCreationTime( n, dtime1 );\n   Directory::SetLastAccessTimeUtc( n, dtime1 );\n   \n   // Print to console the results.\n   Console::WriteLine( &quot;Creation Date: {0}&quot;, Directory::GetCreationTime( n ) );\n   Console::WriteLine( &quot;UTC creation Date: {0}&quot;, Directory::GetCreationTimeUtc( n ) );\n   Console::WriteLine( &quot;Last write time: {0}&quot;, Directory::GetLastWriteTime( n ) );\n   Console::WriteLine( &quot;UTC last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n   Console::WriteLine( &quot;Last access time: {0}&quot;, Directory::GetLastAccessTime( n ) );\n   Console::WriteLine( &quot;UTC last access time: {0}&quot;, Directory::GetLastAccessTimeUtc( n ) );\n   \n   //Set the last write time to a different value.\n   Directory::SetLastWriteTimeUtc( n, dtime2 );\n   Console::WriteLine( &quot;Changed last write time: {0}&quot;, Directory::GetLastWriteTimeUtc( n ) );\n}\n\n// Obviously, since this sample deals with dates and times, the output will vary\n// depending on when you run the executable. Here is one example of the output:\n//Creation Date: 1/3/2002 12:00:00 AM\n//UTC creation Date: 1/3/2002 8:00:00 AM\n//Last write time: 12/31/1998 4:00:00 PM\n//UTC last write time: 1/1/1999 12:00:00 AM\n//Last access time: 1/2/2002 4:00:00 PM\n//UTC last access time: 1/3/2002 12:00:00 AM\n//Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.UTCExample#1\">&#39; This sample shows the differences between dates from methods that use\n&#39;coordinated universal time (UTC) format and those that do not.\nImports System\nImports System.IO\n\n\n\nPublic Class DirectoryUTCTime\n   \n   Public Shared Sub Main()\n      &#39; Set the directory.\n      Dim n As String = &quot;C:&nbsp;&nbsp;&nbsp;&nbsp;est<br>ewdir&quot;\n      &#39;Create two variables to use to set the time.\n      Dim dtime1 As New DateTime(2002, 1, 3)\n      Dim dtime2 As New DateTime(1999, 1, 1)\n      \n      &#39;Create the directory.\n      Try\n         Directory.CreateDirectory(n)\n      Catch e As IOException\n         Console.WriteLine(e)\n      End Try\n      \n      &#39;Set the creation and last access times to a variable DateTime value.\n      Directory.SetCreationTime(n, dtime1)\n      Directory.SetLastAccessTimeUtc(n, dtime1)\n      \n      &#39; Print to console the results.\n      Console.WriteLine(&quot;Creation Date: {0}&quot;, Directory.GetCreationTime(n))\n      Console.WriteLine(&quot;UTC creation Date: {0}&quot;, Directory.GetCreationTimeUtc(n))\n      Console.WriteLine(&quot;Last write time: {0}&quot;, Directory.GetLastWriteTime(n))\n      Console.WriteLine(&quot;UTC last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n      Console.WriteLine(&quot;Last access time: {0}&quot;, Directory.GetLastAccessTime(n))\n      Console.WriteLine(&quot;UTC last access time: {0}&quot;, Directory.GetLastAccessTimeUtc(n))\n      \n      &#39;Set the last write time to a different value.\n      Directory.SetLastWriteTimeUtc(n, dtime2)\n      Console.WriteLine(&quot;Changed last write time: {0}&quot;, Directory.GetLastWriteTimeUtc(n))\n   End Sub &#39;Main\nEnd Class &#39;DirectoryUTCTime\n\n&#39; Since this sample deals with dates and times, the output will vary\n&#39; depending on when you run the executable. Here is one example of the output:\n\n&#39; Creation Date: 1/3/2002 12:00:00 AM\n&#39; UTC creation Date: 1/3/2002 8:00:00 AM\n&#39; Last write time: 12/31/1998 4:00:00 PM\n&#39; UTC last write time: 1/1/1999 12:00:00 AM\n&#39; Last access time: 1/2/2002 4:00:00 PM\n&#39; UTC last access time: 1/3/2002 12:00:00 AM\n&#39; Changed last write time: 1/1/1999 12:00:00 AM\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Directory.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Directory.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.CreateDirectory\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.Delete\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.EnumerateDirectories\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.EnumerateFiles\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.EnumerateFileSystemEntries\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.Exists\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetCreationTime\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetCreationTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetCurrentDirectory\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetDirectories\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetDirectoryRoot\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetFiles\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetFileSystemEntries\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetLastAccessTime\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetLastAccessTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetLastWriteTime\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetLastWriteTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetLogicalDrives\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.GetParent\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.Move\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetAccessControl\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetCreationTime\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetCreationTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetCurrentDirectory\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetLastAccessTime\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetLastAccessTimeUtc\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetLastWriteTime\">\r\n<meta name=\"APIName\" content=\"System.IO.Directory.SetLastWriteTimeUtc\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"48f09640-062b-968a-c9ee-23ea8c60c581\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.IO\\Directory.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see theâ€¦\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Directory\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Directory.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Directory.yml","open_to_public_contributors":true,"api_name":["System.IO.Directory","System.IO.Directory.CreateDirectory","System.IO.Directory.Delete","System.IO.Directory.EnumerateDirectories","System.IO.Directory.EnumerateFiles","System.IO.Directory.EnumerateFileSystemEntries","System.IO.Directory.Exists","System.IO.Directory.GetAccessControl","System.IO.Directory.GetCreationTime","System.IO.Directory.GetCreationTimeUtc","System.IO.Directory.GetCurrentDirectory","System.IO.Directory.GetDirectories","System.IO.Directory.GetDirectoryRoot","System.IO.Directory.GetFiles","System.IO.Directory.GetFileSystemEntries","System.IO.Directory.GetLastAccessTime","System.IO.Directory.GetLastAccessTimeUtc","System.IO.Directory.GetLastWriteTime","System.IO.Directory.GetLastWriteTimeUtc","System.IO.Directory.GetLogicalDrives","System.IO.Directory.GetParent","System.IO.Directory.Move","System.IO.Directory.SetAccessControl","System.IO.Directory.SetCreationTime","System.IO.Directory.SetCreationTimeUtc","System.IO.Directory.SetCurrentDirectory","System.IO.Directory.SetLastAccessTime","System.IO.Directory.SetLastAccessTimeUtc","System.IO.Directory.SetLastWriteTime","System.IO.Directory.SetLastWriteTimeUtc"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Directory","System::IO::Directory","System.IO.Directory.CreateDirectory","System::IO::Directory::CreateDirectory","System.IO.Directory.Delete","System::IO::Directory::Delete","System.IO.Directory.EnumerateDirectories","System::IO::Directory::EnumerateDirectories","System.IO.Directory.EnumerateFiles","System::IO::Directory::EnumerateFiles","System.IO.Directory.EnumerateFileSystemEntries","System::IO::Directory::EnumerateFileSystemEntries","System.IO.Directory.Exists","System::IO::Directory::Exists","System.IO.Directory.GetAccessControl","System::IO::Directory::GetAccessControl","System.IO.Directory.GetCreationTime","System::IO::Directory::GetCreationTime","System.IO.Directory.GetCreationTimeUtc","System::IO::Directory::GetCreationTimeUtc","System.IO.Directory.GetCurrentDirectory","System::IO::Directory::GetCurrentDirectory","System.IO.Directory.GetDirectories","System::IO::Directory::GetDirectories","System.IO.Directory.GetDirectoryRoot","System::IO::Directory::GetDirectoryRoot","System.IO.Directory.GetFiles","System::IO::Directory::GetFiles","System.IO.Directory.GetFileSystemEntries","System::IO::Directory::GetFileSystemEntries","System.IO.Directory.GetLastAccessTime","System::IO::Directory::GetLastAccessTime","System.IO.Directory.GetLastAccessTimeUtc","System::IO::Directory::GetLastAccessTimeUtc","System.IO.Directory.GetLastWriteTime","System::IO::Directory::GetLastWriteTime","System.IO.Directory.GetLastWriteTimeUtc","System::IO::Directory::GetLastWriteTimeUtc","System.IO.Directory.GetLogicalDrives","System::IO::Directory::GetLogicalDrives","System.IO.Directory.GetParent","System::IO::Directory::GetParent","System.IO.Directory.Move","System::IO::Directory::Move","System.IO.Directory.SetAccessControl","System::IO::Directory::SetAccessControl","System.IO.Directory.SetCreationTime","System::IO::Directory::SetCreationTime","System.IO.Directory.SetCreationTimeUtc","System::IO::Directory::SetCreationTimeUtc","System.IO.Directory.SetCurrentDirectory","System::IO::Directory::SetCurrentDirectory","System.IO.Directory.SetLastAccessTime","System::IO::Directory::SetLastAccessTime","System.IO.Directory.SetLastAccessTimeUtc","System::IO::Directory::SetLastAccessTimeUtc","System.IO.Directory.SetLastWriteTime","System::IO::Directory::SetLastWriteTime","System.IO.Directory.SetLastWriteTimeUtc","System::IO::Directory::SetLastWriteTimeUtc"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"48f09640-062b-968a-c9ee-23ea8c60c581","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.IO\\Directory.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/Directory.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Directory class | Microsoft Docs","_op_ogTitle":"Directory class","description":"Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.  \n To browse the .NET Framework source code for this type, see theâ€¦","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.Directory","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.directory","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.directory","fileRelativePath":"System.IO.Directory.html"},"themesRelativePathToOutputRoot":"_themes/"}