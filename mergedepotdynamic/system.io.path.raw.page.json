{"content":"    \r\n    <h1 id=\"System_IO_Path\">\r\n      <span class=\"lang-csharp\">Path</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Performs operations on <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> instances that contain file or directory path information. These operations are performed in a cross-platform manner.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic static class Path</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Path</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The .NET Framework does not support direct access to physical disks through paths that are device names, such as &quot;\\\\.\\PHYSICALDRIVE0 &quot;.  </p>\n<p> A path is a string that provides the location of a file or directory. A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device. The exact format of a path is determined by the current platform. For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems. On some systems, file paths can contain extensions, which indicate the type of information stored in the file. The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not. The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths. Because of these differences, the fields of the <code>Path</code> class as well as the exact behavior of some members of the <code>Path</code> class are platform-dependent.  </p>\n<p> A path can contain absolute or relative location information. Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location. Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path. To determine the current directory, call <a class=\"xref\" href=\"system.io.directory#System_IO_Directory_GetCurrentDirectory_\" data-linktype=\"relative-path\">GetCurrentDirectory</a>.  </p>\n<p> Most members of the <code>Path</code> class do not interact with the file system and do not verify the existence of the file specified by a path string. <code>Path</code> class members that modify a path string, such as <a class=\"xref\" href=\"system.io.path#System_IO_Path_ChangeExtension_\" data-linktype=\"relative-path\">ChangeExtension</a>, have no effect on names of files in the file system. <code>Path</code> members do, however, validate the contents of a specified path string, and throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method. For example, on Windows-based desktop platforms, invalid path characters might include quote (&quot;), less than (&lt;), greater than (&gt;), pipe (&#124;), backspace (\\b), null (\\0), and Unicode characters 16 through 18 and 20 through 25.  </p>\n<p> The members of the <code>Path</code> class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.  </p>\n<p> All members of the <code>Path</code> class are static and can therefore be called without having an instance of a path.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, &quot;c:\\temp c:\\windows&quot; also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  </p>\n</div>\n<p> In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  </p>\n<ul>\n<li><p>&quot;c:\\\\MyDir\\\\MyFile.txt&quot; in C#, or &quot;c:\\MyDir\\MyFile.txt&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;c:\\\\MyDir&quot; in C#, or &quot;c:\\MyDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;MyDir\\\\MySubdir&quot; in C#, or &quot;MyDir\\MySubDir&quot; in Visual Basic.  </p>\n</li>\n<li><p>&quot;\\\\\\\\MyServer\\\\MyShare&quot; in C#, or &quot;\\\\MyServer\\MyShare&quot; in Visual Basic.  </p>\n<p>Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios. For example, the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetExtension_\" data-linktype=\"relative-path\">GetExtension</a> method parses a string that you pass to it and returns the extension from that string. However, this does not mean that a file with that extension exists on the disk.  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"self-bookmark\">AltDirectorySeparatorChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"self-bookmark\">DirectorySeparatorChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_InvalidPathChars\" data-linktype=\"self-bookmark\">InvalidPathChars</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <a class=\"xref\" href=\"system.io.path\" data-linktype=\"relative-path\">Path</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_PathSeparator\" data-linktype=\"self-bookmark\">PathSeparator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>A platform-specific separator character used to separate path strings in environment variables.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_VolumeSeparatorChar\" data-linktype=\"self-bookmark\">VolumeSeparatorChar</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides a platform-specific volume separator character.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_ChangeExtension_System_String_System_String_\" data-linktype=\"self-bookmark\">ChangeExtension(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Changes the extension of a path string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_Combine_System_String___\" data-linktype=\"self-bookmark\">Combine(String[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Combines an array of strings into a path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_Combine_System_String_System_String_\" data-linktype=\"self-bookmark\">Combine(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Combines two strings into a path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_Combine_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">Combine(String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Combines three strings into a path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_Combine_System_String_System_String_System_String_System_String_\" data-linktype=\"self-bookmark\">Combine(String,String,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Combines four strings into a path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetDirectoryName_System_String_\" data-linktype=\"self-bookmark\">GetDirectoryName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the directory information for the specified path string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetExtension_System_String_\" data-linktype=\"self-bookmark\">GetExtension(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the extension of the specified path string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetFileName_System_String_\" data-linktype=\"self-bookmark\">GetFileName(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the file name and extension of the specified path string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetFileNameWithoutExtension_System_String_\" data-linktype=\"self-bookmark\">GetFileNameWithoutExtension(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the file name of the specified path string without the extension.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetFullPath_System_String_\" data-linktype=\"self-bookmark\">GetFullPath(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the absolute path for the specified path string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetInvalidFileNameChars\" data-linktype=\"self-bookmark\">GetInvalidFileNameChars()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array containing the characters that are not allowed in file names.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetInvalidPathChars\" data-linktype=\"self-bookmark\">GetInvalidPathChars()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an array containing the characters that are not allowed in path names.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetPathRoot_System_String_\" data-linktype=\"self-bookmark\">GetPathRoot(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the root directory information of the specified path.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetRandomFileName\" data-linktype=\"self-bookmark\">GetRandomFileName()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a random folder name or file name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetTempFileName\" data-linktype=\"self-bookmark\">GetTempFileName()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_GetTempPath\" data-linktype=\"self-bookmark\">GetTempPath()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the path of the current user&#39;s temporary folder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_HasExtension_System_String_\" data-linktype=\"self-bookmark\">HasExtension(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a path includes a file name extension.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_Path_IsPathRooted_System_String_\" data-linktype=\"self-bookmark\">IsPathRooted(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the specified path string contains a root.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_AltDirectorySeparatorChar\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AltDirectorySeparatorChar</div>        \r\n          </div>\r\n    \r\n            <p>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly char AltDirectorySeparatorChar;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The character stored in this field cannot be in <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>. This field can be set to the same value as <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a>. <code>AltDirectorySeparatorChar</code> and <code>DirectorySeparatorChar</code> are both valid for separating directory levels in a path string.  </p>\n<p> The value of this field is a backslash (&#39;\\&#39;) on UNIX, and a slash (&#39;/&#39;) on Windows and Macintosh operating systems.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a use of the <code>AltDirectorySeparatorChar</code> field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, Path.AltDirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, Path.DirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, Path.PathSeparator)\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, Path.VolumeSeparatorChar)\n\n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;)\n        Dim c As Char\n        For Each c In Path.GetInvalidPathChars()\n            Console.Write(c)\n        Next c\n        Console.WriteLine()\n\n        &#39; This code produces output similar to the following:\n        &#39; Note that the InvalidPathCharacters contain characters\n        &#39; outside of the printable character set.\n        &#39;\n        &#39; Path.AltDirectorySeparatorChar=/\n        &#39; Path.DirectorySeparatorChar=\\\n        &#39; Path.PathSeparator=;\n        &#39; Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#13\">   Console::WriteLine( &quot;Path::AltDirectorySeparatorChar={0}&quot;, (Path::AltDirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::DirectorySeparatorChar={0}&quot;, (Path::DirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::PathSeparator={0}&quot;, (Path::PathSeparator).ToString() );\n   Console::WriteLine( &quot;Path::VolumeSeparatorChar={0}&quot;, (Path::VolumeSeparatorChar).ToString() );\n   Console::Write( &quot;Path::InvalidPathChars=&quot; );\n   for ( int i = 0; i &lt; Path::InvalidPathChars-&gt;Length; i++ )\n      Console::Write( Path::InvalidPathChars[ i ] );\n   Console::WriteLine();\n\n   // This code produces output similar to the following:\n   // Note that the InvalidPathCharacters contain characters\n   // outside of the printable character set.\n   //\n   // Path.AltDirectorySeparatorChar=/\n   // Path.DirectorySeparatorChar=\\\n   // Path.PathSeparator=;\n   // Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, \n            Path.AltDirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, \n            Path.DirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, \n            Path.PathSeparator);\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, \n            Path.VolumeSeparatorChar);\n        \n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;);\n        foreach (char c in Path.GetInvalidPathChars())\n            Console.Write(c);\n        Console.WriteLine();\n        // This code produces output similar to the following:\n        // Note that the InvalidPathCharacters contain characters\n        // outside of the printable character set.\n        //\n        // Path.AltDirectorySeparatorChar=/\n        // Path.DirectorySeparatorChar=\\\n        // Path.PathSeparator=;\n        // Path.VolumeSeparatorChar=:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_DirectorySeparatorChar\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DirectorySeparatorChar</div>        \r\n          </div>\r\n    \r\n            <p>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly char DirectorySeparatorChar;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The character stored in this field cannot be in <a class=\"xref\" href=\"system.io.path#System_IO_Path_InvalidPathChars\" data-linktype=\"relative-path\">InvalidPathChars</a>. <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a> and <code>DirectorySeparatorChar</code> are both valid for separating directory levels in a path string.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <code>DirectorySeparatorChar</code> field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, Path.AltDirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, Path.DirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, Path.PathSeparator)\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, Path.VolumeSeparatorChar)\n\n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;)\n        Dim c As Char\n        For Each c In Path.GetInvalidPathChars()\n            Console.Write(c)\n        Next c\n        Console.WriteLine()\n\n        &#39; This code produces output similar to the following:\n        &#39; Note that the InvalidPathCharacters contain characters\n        &#39; outside of the printable character set.\n        &#39;\n        &#39; Path.AltDirectorySeparatorChar=/\n        &#39; Path.DirectorySeparatorChar=\\\n        &#39; Path.PathSeparator=;\n        &#39; Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#13\">   Console::WriteLine( &quot;Path::AltDirectorySeparatorChar={0}&quot;, (Path::AltDirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::DirectorySeparatorChar={0}&quot;, (Path::DirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::PathSeparator={0}&quot;, (Path::PathSeparator).ToString() );\n   Console::WriteLine( &quot;Path::VolumeSeparatorChar={0}&quot;, (Path::VolumeSeparatorChar).ToString() );\n   Console::Write( &quot;Path::InvalidPathChars=&quot; );\n   for ( int i = 0; i &lt; Path::InvalidPathChars-&gt;Length; i++ )\n      Console::Write( Path::InvalidPathChars[ i ] );\n   Console::WriteLine();\n\n   // This code produces output similar to the following:\n   // Note that the InvalidPathCharacters contain characters\n   // outside of the printable character set.\n   //\n   // Path.AltDirectorySeparatorChar=/\n   // Path.DirectorySeparatorChar=\\\n   // Path.PathSeparator=;\n   // Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, \n            Path.AltDirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, \n            Path.DirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, \n            Path.PathSeparator);\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, \n            Path.VolumeSeparatorChar);\n        \n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;);\n        foreach (char c in Path.GetInvalidPathChars())\n            Console.Write(c);\n        Console.WriteLine();\n        // This code produces output similar to the following:\n        // Note that the InvalidPathCharacters contain characters\n        // outside of the printable character set.\n        //\n        // Path.AltDirectorySeparatorChar=/\n        // Path.DirectorySeparatorChar=\\\n        // Path.PathSeparator=;\n        // Path.VolumeSeparatorChar=:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_InvalidPathChars\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvalidPathChars</div>        \r\n          </div>\r\n    \r\n            <p>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <a class=\"xref\" href=\"system.io.path\" data-linktype=\"relative-path\">Path</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly char[] InvalidPathChars;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (&quot;), less than (&lt;), greater than (&gt;), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not useInvalidPathChars if you think your code might execute in the same application domain as untrusted code. InvalidPathChars is an array, so its elements can be overwritten. If untrusted code overwrites elements of InvalidPathChars, it might cause your code to malfunction in ways that could be exploited.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <code>InvalidPathChars</code> property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, Path.AltDirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, Path.DirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, Path.PathSeparator)\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, Path.VolumeSeparatorChar)\n\n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;)\n        Dim c As Char\n        For Each c In Path.GetInvalidPathChars()\n            Console.Write(c)\n        Next c\n        Console.WriteLine()\n\n        &#39; This code produces output similar to the following:\n        &#39; Note that the InvalidPathCharacters contain characters\n        &#39; outside of the printable character set.\n        &#39;\n        &#39; Path.AltDirectorySeparatorChar=/\n        &#39; Path.DirectorySeparatorChar=\\\n        &#39; Path.PathSeparator=;\n        &#39; Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#13\">   Console::WriteLine( &quot;Path::AltDirectorySeparatorChar={0}&quot;, (Path::AltDirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::DirectorySeparatorChar={0}&quot;, (Path::DirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::PathSeparator={0}&quot;, (Path::PathSeparator).ToString() );\n   Console::WriteLine( &quot;Path::VolumeSeparatorChar={0}&quot;, (Path::VolumeSeparatorChar).ToString() );\n   Console::Write( &quot;Path::InvalidPathChars=&quot; );\n   for ( int i = 0; i &lt; Path::InvalidPathChars-&gt;Length; i++ )\n      Console::Write( Path::InvalidPathChars[ i ] );\n   Console::WriteLine();\n\n   // This code produces output similar to the following:\n   // Note that the InvalidPathCharacters contain characters\n   // outside of the printable character set.\n   //\n   // Path.AltDirectorySeparatorChar=/\n   // Path.DirectorySeparatorChar=\\\n   // Path.PathSeparator=;\n   // Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, \n            Path.AltDirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, \n            Path.DirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, \n            Path.PathSeparator);\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, \n            Path.VolumeSeparatorChar);\n        \n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;);\n        foreach (char c in Path.GetInvalidPathChars())\n            Console.Write(c);\n        Console.WriteLine();\n        // This code produces output similar to the following:\n        // Note that the InvalidPathCharacters contain characters\n        // outside of the printable character set.\n        //\n        // Path.AltDirectorySeparatorChar=/\n        // Path.DirectorySeparatorChar=\\\n        // Path.PathSeparator=;\n        // Path.VolumeSeparatorChar=:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_PathSeparator\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PathSeparator</div>        \r\n          </div>\r\n    \r\n            <p>A platform-specific separator character used to separate path strings in environment variables.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly char PathSeparator;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <code>PathSeparator</code> field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, Path.AltDirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, Path.DirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, Path.PathSeparator)\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, Path.VolumeSeparatorChar)\n\n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;)\n        Dim c As Char\n        For Each c In Path.GetInvalidPathChars()\n            Console.Write(c)\n        Next c\n        Console.WriteLine()\n\n        &#39; This code produces output similar to the following:\n        &#39; Note that the InvalidPathCharacters contain characters\n        &#39; outside of the printable character set.\n        &#39;\n        &#39; Path.AltDirectorySeparatorChar=/\n        &#39; Path.DirectorySeparatorChar=\\\n        &#39; Path.PathSeparator=;\n        &#39; Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#13\">   Console::WriteLine( &quot;Path::AltDirectorySeparatorChar={0}&quot;, (Path::AltDirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::DirectorySeparatorChar={0}&quot;, (Path::DirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::PathSeparator={0}&quot;, (Path::PathSeparator).ToString() );\n   Console::WriteLine( &quot;Path::VolumeSeparatorChar={0}&quot;, (Path::VolumeSeparatorChar).ToString() );\n   Console::Write( &quot;Path::InvalidPathChars=&quot; );\n   for ( int i = 0; i &lt; Path::InvalidPathChars-&gt;Length; i++ )\n      Console::Write( Path::InvalidPathChars[ i ] );\n   Console::WriteLine();\n\n   // This code produces output similar to the following:\n   // Note that the InvalidPathCharacters contain characters\n   // outside of the printable character set.\n   //\n   // Path.AltDirectorySeparatorChar=/\n   // Path.DirectorySeparatorChar=\\\n   // Path.PathSeparator=;\n   // Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, \n            Path.AltDirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, \n            Path.DirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, \n            Path.PathSeparator);\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, \n            Path.VolumeSeparatorChar);\n        \n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;);\n        foreach (char c in Path.GetInvalidPathChars())\n            Console.Write(c);\n        Console.WriteLine();\n        // This code produces output similar to the following:\n        // Note that the InvalidPathCharacters contain characters\n        // outside of the printable character set.\n        //\n        // Path.AltDirectorySeparatorChar=/\n        // Path.DirectorySeparatorChar=\\\n        // Path.PathSeparator=;\n        // Path.VolumeSeparatorChar=:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_VolumeSeparatorChar\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">VolumeSeparatorChar</div>        \r\n          </div>\r\n    \r\n            <p>Provides a platform-specific volume separator character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly char VolumeSeparatorChar;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems. This is most useful for parsing paths such as &quot;c:\\windows&quot; or &quot;MacVolume:System Folder&quot;.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <code>VolumeSeparatorChar</code> field.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, Path.AltDirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, Path.DirectorySeparatorChar)\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, Path.PathSeparator)\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, Path.VolumeSeparatorChar)\n\n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;)\n        Dim c As Char\n        For Each c In Path.GetInvalidPathChars()\n            Console.Write(c)\n        Next c\n        Console.WriteLine()\n\n        &#39; This code produces output similar to the following:\n        &#39; Note that the InvalidPathCharacters contain characters\n        &#39; outside of the printable character set.\n        &#39;\n        &#39; Path.AltDirectorySeparatorChar=/\n        &#39; Path.DirectorySeparatorChar=\\\n        &#39; Path.PathSeparator=;\n        &#39; Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#13\">   Console::WriteLine( &quot;Path::AltDirectorySeparatorChar={0}&quot;, (Path::AltDirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::DirectorySeparatorChar={0}&quot;, (Path::DirectorySeparatorChar).ToString() );\n   Console::WriteLine( &quot;Path::PathSeparator={0}&quot;, (Path::PathSeparator).ToString() );\n   Console::WriteLine( &quot;Path::VolumeSeparatorChar={0}&quot;, (Path::VolumeSeparatorChar).ToString() );\n   Console::Write( &quot;Path::InvalidPathChars=&quot; );\n   for ( int i = 0; i &lt; Path::InvalidPathChars-&gt;Length; i++ )\n      Console::Write( Path::InvalidPathChars[ i ] );\n   Console::WriteLine();\n\n   // This code produces output similar to the following:\n   // Note that the InvalidPathCharacters contain characters\n   // outside of the printable character set.\n   //\n   // Path.AltDirectorySeparatorChar=/\n   // Path.DirectorySeparatorChar=\\\n   // Path.PathSeparator=;\n   // Path.VolumeSeparatorChar=:\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#13\">        Console.WriteLine(&quot;Path.AltDirectorySeparatorChar={0}&quot;, \n            Path.AltDirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.DirectorySeparatorChar={0}&quot;, \n            Path.DirectorySeparatorChar);\n        Console.WriteLine(&quot;Path.PathSeparator={0}&quot;, \n            Path.PathSeparator);\n        Console.WriteLine(&quot;Path.VolumeSeparatorChar={0}&quot;, \n            Path.VolumeSeparatorChar);\n        \n        Console.Write(&quot;Path.GetInvalidPathChars()=&quot;);\n        foreach (char c in Path.GetInvalidPathChars())\n            Console.Write(c);\n        Console.WriteLine();\n        // This code produces output similar to the following:\n        // Note that the InvalidPathCharacters contain characters\n        // outside of the printable character set.\n        //\n        // Path.AltDirectorySeparatorChar=/\n        // Path.DirectorySeparatorChar=\\\n        // Path.PathSeparator=;\n        // Path.VolumeSeparatorChar=:\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_ChangeExtension_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_ChangeExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ChangeExtension(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Changes the extension of a path string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ChangeExtension (string path, string extension);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path information to modify. The path cannot contain any of the characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>extension</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new extension (with or without a leading period). Specify <code>null</code> to remove an existing extension from <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The modified path information.  </p>\n<p> On Windows-based desktop platforms, if <code>path</code> is <code>null</code> or an empty string (&quot;&quot;), the path information is returned unmodified. If <code>extension</code> is <code>null</code>, the returned string contains the specified path with its extension removed. If <code>path</code> has no extension, and <code>extension</code> is not <code>null</code>, the returned path string contains <code>extension</code> appended to the end of <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If neither <code>path</code> nor <code>extension</code> contains a period (.), <code>ChangeExtension</code> adds the period.  </p>\n<p> The <code>extension</code> parameter can contain multiple periods and any valid path characters, and can be any length. If <code>extension</code> is <code>null</code>, the returned string contains the contents of <code>path</code> with the last period and all characters following it removed.  </p>\n<p> If <code>extension</code> is an empty string, the returned path string contains the contents of <code>path</code> with any characters following the last period removed.  </p>\n<p> If <code>path</code> does not have an extension and <code>extension</code> is not <code>null</code>, the returned string contains <code>path</code> followed by <code>extension</code>.  </p>\n<p> If <code>extension</code> is not <code>null</code> and does not contain a leading period, the period is added.  </p>\n<p> If <code>path</code> contains a multiple extension separated by multiple periods, the returned string contains the contents of <code>path</code> with the last period and all characters following it replaced by <code>extension</code>. For example, if <code>path</code> is &quot;\\Dir1\\examples\\pathtests.csx.txt&quot; and <code>extension</code> is &quot;cs&quot;, the modified path is &quot;\\Dir1\\examples\\pathtests.csx.cs&quot;.  </p>\n<p> It is not possible to verify that the returned results are valid in all scenarios. For example, if <code>path</code> is empty, <code>extension</code> is appended.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a use of the <code>ChangeExtension</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#1\">Imports System\nImports System.IO\n\nPublic Class PathSnippets\n    Public Sub ChangeExtension()\n        Dim goodFileName As String = &quot;C:\\mydir\\myfile.com.extension&quot;\n        Dim badFileName As String = &quot;C:\\mydir\\&quot;\n        Dim result As String\n        result = Path.ChangeExtension(goodFileName, &quot;.old&quot;)\n        Console.WriteLine(&quot;ChangeExtension({0}, &#39;.old&#39;) returns &#39;{1}&#39;&quot;, goodFileName, result)\n        result = Path.ChangeExtension(goodFileName, &quot;&quot;)\n        Console.WriteLine(&quot;ChangeExtension({0}, &#39;&#39;) returns &#39;{1}&#39;&quot;, goodFileName, result)\n        result = Path.ChangeExtension(badFileName, &quot;.old&quot;)\n        Console.WriteLine(&quot;ChangeExtension({0}, &#39;.old&#39;) returns &#39;{1}&#39;&quot;, badFileName, result)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; ChangeExtension(C:\\mydir\\myfile.com.extension, &#39;.old&#39;) returns &#39;C:\\mydir\\myfile.com.old&#39;\n        &#39; ChangeExtension(C:\\mydir\\myfile.com.extension, &#39;&#39;) returns &#39;C:\\mydir\\myfile.com.&#39;\n        &#39; ChangeExtension(C:\\mydir\\, &#39;.old&#39;) returns &#39;C:\\mydir\\.old&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nvoid ChangeExtension()\n{\n   String^ goodFileName = &quot;C:\\\\mydir\\\\myfile.com.extension&quot;;\n   String^ badFileName = &quot;C:\\\\mydir\\\\&quot;;\n   String^ result;\n   result = Path::ChangeExtension( goodFileName,  &quot;.old&quot; );\n   Console::WriteLine( &quot;ChangeExtension({0}, &#39;.old&#39;) returns &#39;{1}&#39;&quot;, goodFileName, result );\n   result = Path::ChangeExtension( goodFileName,  &quot;&quot; );\n   Console::WriteLine( &quot;ChangeExtension({0}, &#39;&#39;) returns &#39;{1}&#39;&quot;, goodFileName, result );\n   result = Path::ChangeExtension( badFileName,  &quot;.old&quot; );\n   Console::WriteLine( &quot;ChangeExtension({0}, &#39;.old&#39;) returns &#39;{1}&#39;&quot;, badFileName, result );\n   \n   // This code produces output similar to the following:\n   //\n   // ChangeExtension(C:\\mydir\\myfile.com.extension, &#39;.old&#39;) returns &#39;C:\\mydir\\myfile.com.old&#39;\n   // ChangeExtension(C:\\mydir\\myfile.com.extension, &#39;&#39;) returns &#39;C:\\mydir\\myfile.com.&#39;\n   // ChangeExtension(C:\\mydir\\, &#39;.old&#39;) returns &#39;C:\\mydir\\.old&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#1\">using System;\nusing System.IO;\n\npublic class PathSnippets\n{\n\n    public void ChangeExtension()\n    {\n        string goodFileName = @&quot;C:\\mydir\\myfile.com.extension&quot;;\n        string badFileName = @&quot;C:\\mydir\\&quot;;\n        string result;\n\n        result = Path.ChangeExtension(goodFileName, &quot;.old&quot;);\n        Console.WriteLine(&quot;ChangeExtension({0}, &#39;.old&#39;) returns &#39;{1}&#39;&quot;,\n            goodFileName, result); \n\n        result = Path.ChangeExtension(goodFileName, &quot;&quot;);\n        Console.WriteLine(&quot;ChangeExtension({0}, &#39;&#39;) returns &#39;{1}&#39;&quot;, \n            goodFileName, result); \n\n        result = Path.ChangeExtension(badFileName, &quot;.old&quot;);\n        Console.WriteLine(&quot;ChangeExtension({0}, &#39;.old&#39;) returns &#39;{1}&#39;&quot;, \n            badFileName, result); \n\n        // This code produces output similar to the following:\n        //\n        // ChangeExtension(C:\\mydir\\myfile.com.extension, &#39;.old&#39;) returns &#39;C:\\mydir\\myfile.com.old&#39;\n        // ChangeExtension(C:\\mydir\\myfile.com.extension, &#39;&#39;) returns &#39;C:\\mydir\\myfile.com.&#39;\n        // ChangeExtension(C:\\mydir\\, &#39;.old&#39;) returns &#39;C:\\mydir\\.old&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_Combine_System_String___\">\r\n    \r\n            <a id=\"System_IO_Path_Combine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Combine(String[])</div>        \r\n          </div>\r\n    \r\n            <p>Combines an array of strings into a path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Combine (string[] paths);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>paths</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of parts of the path.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The combined paths.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>One of the strings in the array contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>One of the strings in the array is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>paths</code> should be an array of the parts of the path to combine. If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.  </p>\n<p> Zero-length strings are omitted from the combined path.  </p>\n<p> The parameters are not parsed if they have white space.  </p>\n<p> Not all invalid characters for directory and file names are interpreted as unacceptable by the <code>Combine</code> method, because you can use these characters for search wildcard characters. For example, while <code>Path.Combine(&quot;c:\\\\&quot;, &quot;*.txt&quot;)</code> might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the <code>Combine</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example combines an array of strings into a path.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path.Combine#3\">Dim paths As String() = {&quot;d:\\archives&quot;, &quot;2001&quot;, &quot;media&quot;, &quot;images&quot;}\nDim fullPath As String = Path.Combine(paths)\nConsole.WriteLine(fullPath)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path.Combine#3\">string[] paths = {@&quot;d:\\archives&quot;, &quot;2001&quot;, &quot;media&quot;, &quot;images&quot;};\nstring fullPath = Path.Combine(paths);\nConsole.WriteLine(fullPath);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_Combine_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_Combine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Combine(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Combines two strings into a path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Combine (string path1, string path2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first path to combine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second path to combine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <code>path2</code> contains an absolute path, this method returns <code>path2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path1</code> or <code>path2</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path1</code> or <code>path2</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>path1</code> is not a drive reference (that is, &quot;C:&quot; or &quot;D:&quot;) and does not end with a valid separator character as defined in <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, or <a class=\"xref\" href=\"system.io.path#System_IO_Path_VolumeSeparatorChar\" data-linktype=\"relative-path\">VolumeSeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> is appended to <code>path1</code> before concatenation.  </p>\n<p> If <code>path2</code> does not include a root (for example, if <code>path2</code> does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If <code>path2</code> includes a root, <code>path2</code> is returned.  </p>\n<p> The parameters are not parsed if they have white space. Therefore, if <code>path2</code> includes white space (for example, &quot; \\file.txt &quot;), the Combine method appends <code>path2</code> to <code>path1</code> instead of returning only <code>path2</code>.  </p>\n<p> Not all invalid characters for directory and file names are interpreted as unacceptable by the <code>Combine</code> method, because you can use these characters for search wildcard characters. For example, while <code>Path.Combine(&quot;c:\\\\&quot;, &quot;*.txt&quot;)</code> might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the <code>Combine</code> method.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <code>Combine</code> method on a Windows-based desktop platform.  </p>\n<pre><code class=\"lang-cpp\" name=\"pathcombine#1\">using namespace System;\nusing namespace System::IO;\nvoid CombinePaths( String^ p1, String^ p2 )\n{\n   try\n   {\n      String^ combination = Path::Combine( p1, p2 );\n      Console::WriteLine( &quot;When you combine &#39;{0}&#39; and &#39;{1}&#39;, the result is: {2}&#39;{3}&#39;&quot;, p1, p2, Environment::NewLine, combination );\n   }\n   catch ( Exception^ e ) \n   {\n      if (p1 == nullptr)\n         p1 = &quot;nullptr&quot;;\n      if (p2 == nullptr)\n         p2 = &quot;nullptr&quot;;\n      Console::WriteLine( &quot;You cannot combine &#39;{0}&#39; and &#39;{1}&#39; because: {2}{3}&quot;, p1, p2, Environment::NewLine, e-&gt;Message );\n   }\n\n   Console::WriteLine();\n}\n\nint main()\n{\n   String^ path1 = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;;\n   String^ path2 = &quot;subdir\\\\file.txt&quot;;\n   String^ path3 = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&quot;;\n   String^ path4 = &quot;c:^*&amp;)(_=@#&#39;\\\\^&amp;#2.*(.txt&quot;;\n   String^ path5 = &quot;&quot;;\n   String^ path6 = nullptr;\n   CombinePaths( path1, path2 );\n   CombinePaths( path1, path3 );\n   CombinePaths( path3, path2 );\n   CombinePaths( path4, path2 );\n   CombinePaths( path5, path2 );\n   CombinePaths( path6, path2 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"pathcombine#1\">using System;\nusing System.IO;\n\npublic class ChangeExtensionTest {\n\n    public static void Main() {\n\n        string path1 = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;;\n        string path2 = &quot;subdir\\\\file.txt&quot;;\n        string path3 = &quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&quot;;\n        string path4 = &quot;c:^*&amp;)(_=@#&#39;\\\\^&amp;#2.*(.txt&quot;;\n        string path5 = &quot;&quot;;\n        string path6 = null;\n\n        CombinePaths(path1, path2);\n        CombinePaths(path1, path3);\n        CombinePaths(path3, path2);\n        CombinePaths(path4, path2);\n        CombinePaths(path5, path2);\n        CombinePaths(path6, path2);\n    }\n\n    private static void CombinePaths(string p1, string p2) {\n\n        try {\n            string combination = Path.Combine(p1, p2);\n\n            Console.WriteLine(&quot;When you combine &#39;{0}&#39; and &#39;{1}&#39;, the result is: {2}&#39;{3}&#39;&quot;,\n                        p1, p2, Environment.NewLine, combination);\n        } catch (Exception e) {\n            if (p1 == null)\n                p1 = &quot;null&quot;;\n            if (p2 == null)\n                p2 = &quot;null&quot;;\n            Console.WriteLine(&quot;You cannot combine &#39;{0}&#39; and &#39;{1}&#39; because: {2}{3}&quot;,\n                        p1, p2, Environment.NewLine, e.Message);\n        }\n\n        Console.WriteLine();\n    }\n}\n// This code produces output similar to the following:\n//\n// When you combine &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&#39; and &#39;subdir\\file.txt&#39;, the result is: \n// &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\subdir\\file.txt&#39;\n// \n// When you combine &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&#39; and &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39;, the result is: \n// &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39;\n// \n// When you combine &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39; and &#39;subdir\\file.txt&#39;, the result is: \n// &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt\\subdir\\file.txt&#39;\n// \n// When you combine &#39;c:^*&amp;)(_=@#&#39;\\^&amp;#2.*(.txt&#39; and &#39;subdir\\file.txt&#39;, the result is: \n// &#39;c:^*&amp;)(_=@#&#39;\\^&amp;#2.*(.txt\\subdir\\file.txt&#39;\n// \n// When you combine &#39;&#39; and &#39;subdir\\file.txt&#39;, the result is: \n// &#39;subdir\\file.txt&#39;\n// \n// You cannot combine &#39;&#39; and &#39;subdir\\file.txt&#39; because: \n// Value cannot be null.\n// Parameter name: path1\n</code></pre><pre><code class=\"lang-vb\" name=\"pathcombine#1\">Imports System\nImports System.IO\n\nPublic Class ChangeExtensionTest\n    \n    \n    Public Shared Sub Main()\n        Dim path1 As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;\n        Dim path2 As String = &quot;subdir\\file.txt&quot;\n        Dim path3 As String = &quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&quot;\n        Dim path4 As String = &quot;c:^*&amp;)(_=@#&#39;\\\\^&amp;#2.*(.txt&quot;\n        Dim path5 As String = &quot;&quot;\n        Dim path6 As String = Nothing\n\n        CombinePaths(path1, path2)\n        CombinePaths(path1, path3)\n        CombinePaths(path3, path2)\n        CombinePaths(path4, path2)\n        CombinePaths(path5, path2)\n        CombinePaths(path6, path2)\n    End Sub &#39;Main\n\n    Private Shared Sub CombinePaths(p1 As String, p2 As String)\n        \n        Try\n            Dim combination As String = Path.Combine(p1, p2)\n            \n            Console.WriteLine(&quot;When you combine &#39;{0}&#39; and &#39;{1}&#39;, the result is: {2}&#39;{3}&#39;&quot;, p1, p2, Environment.NewLine, combination)\n        Catch e As Exception\n            If p1 = Nothing Then\n                p1 = &quot;Nothing&quot;\n            End If\n            If p2 = Nothing Then\n                p2 = &quot;Nothing&quot;\n            End If\n            Console.WriteLine(&quot;You cannot combine &#39;{0}&#39; and &#39;{1}&#39; because: {2}{3}&quot;, p1, p2, Environment.NewLine, e.Message)\n        End Try\n        \n        Console.WriteLine()\n    End Sub &#39;CombinePaths\nEnd Class &#39;ChangeExtensionTest\n&#39; This code produces output similar to the following:\n&#39;\n&#39; When you combine &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&#39; and &#39;subdir\\file.txt&#39;, the result is: \n&#39; &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp\\subdir\\file.txt&#39;\n&#39; \n&#39; When you combine &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&#39; and &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39;, the result is: \n&#39; &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39;\n&#39; \n&#39; When you combine &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt&#39; and &#39;subdir\\file.txt&#39;, the result is: \n&#39; &#39;c:&nbsp;&nbsp;&nbsp;&nbsp;emp.txt\\subdir\\file.txt&#39;\n&#39; \n&#39; When you combine &#39;c:^*&amp;)(_=@#&#39;\\^&amp;#2.*(.txt&#39; and &#39;subdir\\file.txt&#39;, the result is: \n&#39; &#39;c:^*&amp;)(_=@#&#39;\\^&amp;#2.*(.txt\\subdir\\file.txt&#39;\n&#39; \n&#39; When you combine &#39;&#39; and &#39;subdir\\file.txt&#39;, the result is: \n&#39; &#39;subdir\\file.txt&#39;\n&#39; \n&#39; You cannot combine &#39;&#39; and &#39;subdir\\file.txt&#39; because: \n&#39; Value cannot be null.\n&#39; Parameter name: path1\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_Combine_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_Combine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Combine(String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Combines three strings into a path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Combine (string path1, string path2, string path3);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first path to combine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second path to combine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third path to combine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The combined paths.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path1</code>, <code>path2</code>, or <code>path3</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path1</code>, <code>path2</code>, or <code>path3</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>path1</code> should be an absolute path (for example, &quot;d:\\archives&quot; or &quot;\\\\archives\\public&quot;). If <code>path2</code> or <code>path3</code> is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  </p>\n<p> Zero-length strings are omitted from the combined path.  </p>\n<p> If <code>path1</code> is not a drive reference (that is, &quot;C:&quot; or &quot;D:&quot;) and does not end with a valid separator character as defined in <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, or <a class=\"xref\" href=\"system.io.path#System_IO_Path_VolumeSeparatorChar\" data-linktype=\"relative-path\">VolumeSeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> is appended to <code>path1</code> before concatenation.  </p>\n<p> If <code>path2</code> does not include a root (for example, if <code>path2</code> does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If <code>path2</code> includes a root, <code>path2</code> is returned.  </p>\n<p> The parameters are not parsed if they have white space. Therefore, if <code>path2</code> includes white space (for example, &quot; \\file.txt &quot;), the <a class=\"xref\" href=\"system.io.path#System_IO_Path_Combine_\" data-linktype=\"relative-path\">Combine</a> method appends <code>path2</code> to <code>path1</code>.  </p>\n<p> Not all invalid characters for directory and file names are interpreted as unacceptable by the <code>Combine</code> method, because you can use these characters for search wildcard characters. For example, while <code>Path.Combine(&quot;c:\\\\&quot;, &quot;*.txt&quot;)</code> might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the <code>Combine</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example combines three paths.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path.Combine#1\">Dim p1 As String = &quot;d:\\archives\\&quot;\nDim p2 As String = &quot;media&quot;\nDim p3 As String = &quot;images&quot;\nDim combined As String = Path.Combine(p1, p2, p3)\nConsole.WriteLine(combined)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path.Combine#1\">string p1 = @&quot;d:\\archives\\&quot;;\nstring p2 = &quot;media&quot;;\nstring p3 = &quot;images&quot;;\nstring combined = Path.Combine(p1, p2, p3);\nConsole.WriteLine(combined);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_Combine_System_String_System_String_System_String_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_Combine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Combine(String,String,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Combines four strings into a path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string Combine (string path1, string path2, string path3, string path4);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first path to combine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second path to combine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path3</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The third path to combine.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>path4</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The fourth path to combine.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The combined paths.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path1</code>, <code>path2</code>, <code>path3</code>, or <code>path4</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>path1</code> should be an absolute path (for example, &quot;d:\\archives&quot; or &quot;\\\\archives\\public&quot;).If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  </p>\n<p> Zero-length strings are omitted from the combined path.  </p>\n<p> If <code>path1</code> is not a drive reference (that is, &quot;C:&quot; or &quot;D:&quot;) and does not end with a valid separator character as defined in <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, or <a class=\"xref\" href=\"system.io.path#System_IO_Path_VolumeSeparatorChar\" data-linktype=\"relative-path\">VolumeSeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> is appended to <code>path1</code> before concatenation.  </p>\n<p> If <code>path2</code> does not include a root (for example, if <code>path2</code> does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If <code>path2</code> includes a root, <code>path2</code> is returned.  </p>\n<p> The parameters are not parsed if they have white space. Therefore, if <code>path2</code> includes white space (for example, &quot; \\file.txt &quot;), the <a class=\"xref\" href=\"system.io.path#System_IO_Path_Combine_\" data-linktype=\"relative-path\">Combine</a> method appends <code>path2</code> to <code>path1</code>.  </p>\n<p> Not all invalid characters for directory and file names are interpreted as unacceptable by the <code>Combine</code> method, because you can use these characters for search wildcard characters. For example, while <code>Path.Combine(&quot;c:\\\\&quot;, &quot;*.txt&quot;)</code> might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the <code>Combine</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example combines four paths.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path.Combine#2\">Dim path1 As String = &quot;d:\\archives\\&quot;\nDim path2 As String = &quot;2001&quot;\nDim path3 As String = &quot;media&quot;\nDim path4 As String = &quot;imaged&quot;\nDim combinedPath As String = Path.Combine(path1, path2, path3, path4)\nConsole.WriteLine(combined)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path.Combine#2\">string path1 = @&quot;d:\\archives\\&quot;;\nstring path2 = &quot;2001&quot;;\nstring path3 = &quot;media&quot;;\nstring path4 = &quot;images&quot;;\nstring combinedPath = Path.Combine(path1, path2, path3, path4);\nConsole.WriteLine(combinedPath);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetDirectoryName_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_GetDirectoryName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDirectoryName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the directory information for the specified path string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetDirectoryName (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of a file or directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Directory information for <code>path</code>, or <code>null</code> if <code>path</code> denotes a root directory or is null. Returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> if <code>path</code> does not contain directory information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>path</code> parameter contains invalid characters, is empty, or contains only white spaces.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a>, instead.<br>\n</div>  \n\n<p> The <code>path</code> parameter is longer than the system-defined maximum length.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In most cases, the string returned by this method consists of all characters in the path up to but not including the last <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>. If the path consists of a root directory, such as &quot;c:\\&quot;, null is returned. Note that this method does not support paths using &quot;file:&quot;. Because the returned path does not include the <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, passing the returned path back into the GetDirectoryName method will result in the truncation of one folder level per subsequent call on the result string. For example, passing the path &quot;C:\\Directory\\SubDirectory\\test.txt&quot; into the GetDirectoryName method will return &quot;C:\\Directory\\SubDirectory&quot;. Passing that string, &quot;C:\\Directory\\SubDirectory&quot;, into GetDirectoryName will result in &quot;C:\\Directory&quot;.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <code>GetDirectoryName</code> method on a Windows-based desktop platform.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#3\">        Dim filepath As String = &quot;C:\\MyDir\\MySubDir\\myfile.ext&quot;\n        Dim directoryName As String\n        Dim i As Integer = 0\n\n        While filepath &lt;&gt; Nothing\n            directoryName = Path.GetDirectoryName(filepath)\n            Console.WriteLine(&quot;GetDirectoryName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, _\n                filepath, directoryName)\n            filepath = directoryName\n            If i = 1\n               filepath = directoryName + &quot;\\&quot;  &#39; this will preserve the previous path\n            End If\n            i = i + 1\n        End While\n\n        &#39;This code produces the following output:\n        &#39;\n        &#39; GetDirectoryName(&#39;C:\\MyDir\\MySubDir\\myfile.ext&#39;) returns &#39;C:\\MyDir\\MySubDir&#39;\n        &#39; GetDirectoryName(&#39;C:\\MyDir\\MySubDir&#39;) returns &#39;C:\\MyDir&#39;\n        &#39; GetDirectoryName(&#39;C:\\MyDir\\&#39;) returns &#39;C:\\MyDir&#39;\n        &#39; GetDirectoryName(&#39;C:\\MyDir&#39;) returns &#39;C:\\&#39;\n        &#39; GetDirectoryName(&#39;C:\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#3\">   String^ filePath = &quot;C:\\\\MyDir\\\\MySubDir\\\\myfile.ext&quot;;\n   String^ directoryName;\n   int i = 0;\n\n   while (filePath != nullptr)\n   {\n       directoryName = Path::GetDirectoryName(filePath);\n       Console::WriteLine(&quot;GetDirectoryName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;,\n           filePath, directoryName);\n       filePath = directoryName;\n       if (i == 1)\n       {\n           filePath = directoryName + &quot;\\\\&quot;;  // this will preserve the previous path\n       }\n       i++;\n   }\n   /*\n   This code produces the following output:\n\n   GetDirectoryName(&#39;C:\\MyDir\\MySubDir\\myfile.ext&#39;) returns &#39;C:\\MyDir\\MySubDir&#39;\n   GetDirectoryName(&#39;C:\\MyDir\\MySubDir&#39;) returns &#39;C:\\MyDir&#39;\n   GetDirectoryName(&#39;C:\\MyDir\\&#39;) returns &#39;C:\\MyDir&#39;\n   GetDirectoryName(&#39;C:\\MyDir&#39;) returns &#39;C:\\&#39;\n   GetDirectoryName(&#39;C:\\&#39;) returns &#39;&#39;\n   */\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#3\">        string filePath = @&quot;C:\\MyDir\\MySubDir\\myfile.ext&quot;;\n        string directoryName;\n        int i = 0;\n\n        while (filePath != null)\n        {\n            directoryName = Path.GetDirectoryName(filePath);\n            Console.WriteLine(&quot;GetDirectoryName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;,\n                filePath, directoryName);\n            filePath = directoryName;\n            if (i == 1)\n            {\n                filePath = directoryName + @&quot;\\&quot;;  // this will preserve the previous path\n            }\n            i++;\n        }\n        /*\n        This code produces the following output:\n\n        GetDirectoryName(&#39;C:\\MyDir\\MySubDir\\myfile.ext&#39;) returns &#39;C:\\MyDir\\MySubDir&#39;\n        GetDirectoryName(&#39;C:\\MyDir\\MySubDir&#39;) returns &#39;C:\\MyDir&#39;\n        GetDirectoryName(&#39;C:\\MyDir\\&#39;) returns &#39;C:\\MyDir&#39;\n        GetDirectoryName(&#39;C:\\MyDir&#39;) returns &#39;C:\\&#39;\n        GetDirectoryName(&#39;C:\\&#39;) returns &#39;&#39;\n        */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetExtension_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_GetExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetExtension(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the extension of the specified path string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetExtension (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path string from which to get the extension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The extension of the specified path (including the period &quot;.&quot;), or <code>null</code>, or <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>path</code> is <code>null</code>, GetExtension returns <code>null</code>. If <code>path</code> does not have extension information, GetExtension returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The extension of <code>path</code> is obtained by searching <code>path</code> for a period (.), starting with the last character in path and continuing toward the start of path. If a period is found before a <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> or <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a> character, the returned string contains the period and the characters after it; otherwise, <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> is returned.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates using the <code>GetExtension</code> method on a Windows-based desktop platform.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#4\">        Dim fileName As String = &quot;C:\\mydir.old\\myfile.ext&quot;\n        Dim pathname As String = &quot;C:\\mydir.old\\&quot;\n        Dim extension As String\n\n        extension = Path.GetExtension(fileName)\n        Console.WriteLine(&quot;GetExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, extension)\n\n        extension = Path.GetExtension(pathname)\n        Console.WriteLine(&quot;GetExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, pathname, extension)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; GetExtension(&#39;C:\\mydir.old\\myfile.ext&#39;) returns &#39;.ext&#39;\n        &#39; GetExtension(&#39;C:\\mydir.old\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#4\">   String^ fileName = &quot;C:\\\\mydir.old\\\\myfile.ext&quot;;\n   String^ path = &quot;C:\\\\mydir.old\\\\&quot;;\n   String^ extension;\n   extension = Path::GetExtension( fileName );\n   Console::WriteLine( &quot;GetExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, extension );\n   extension = Path::GetExtension( path );\n   Console::WriteLine( &quot;GetExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, path, extension );\n\n   // This code produces output similar to the following:\n   //\n   // GetExtension(&#39;C:\\mydir.old\\myfile.ext&#39;) returns &#39;.ext&#39;\n   // GetExtension(&#39;C:\\mydir.old\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#4\">        string fileName = @&quot;C:\\mydir.old\\myfile.ext&quot;;\n        string path = @&quot;C:\\mydir.old\\&quot;;\n        string extension;\n\n        extension = Path.GetExtension(fileName);\n        Console.WriteLine(&quot;GetExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            fileName, extension);\n\n        extension = Path.GetExtension(path);\n        Console.WriteLine(&quot;GetExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            path, extension);\n\n        // This code produces output similar to the following:\n        //\n        // GetExtension(&#39;C:\\mydir.old\\myfile.ext&#39;) returns &#39;.ext&#39;\n        // GetExtension(&#39;C:\\mydir.old\\&#39;) returns &#39;&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetFileName_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_GetFileName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileName(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the file name and extension of the specified path string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetFileName (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path string from which to obtain the file name and extension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The characters after the last directory character in <code>path</code>. If the last character of <code>path</code> is a directory or volume separator character, this method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>. If <code>path</code> is <code>null</code>, this method returns <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned value is <code>null</code> if the file path is <code>null</code>.  </p>\n<p> The separator characters used to determine the start of the file name are <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a> and <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the behavior of the <code>GetFileName</code> method on a Windows-based desktop platform.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#5\">        Dim fileName As String = &quot;C:\\mydir\\myfile.ext&quot;\n        Dim pathname As String = &quot;C:\\mydir\\&quot;\n        Dim result As String\n\n        result = Path.GetFileName(fileName)\n        Console.WriteLine(&quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, result)\n\n        result = Path.GetFileName(pathname)\n        Console.WriteLine(&quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, pathname, result)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; GetFileName(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;myfile.ext&#39;\n        &#39; GetFileName(&#39;C:\\mydir\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#5\">   String^ fileName = &quot;C:\\\\mydir\\\\myfile.ext&quot;;\n   String^ path = &quot;C:\\\\mydir\\\\&quot;;\n   String^ result;\n   result = Path::GetFileName( fileName );\n   Console::WriteLine( &quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, result );\n   result = Path::GetFileName( path );\n   Console::WriteLine( &quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, path, result );\n\n   // This code produces output similar to the following:\n   //\n   // GetFileName(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;myfile.ext&#39;\n   // GetFileName(&#39;C:\\mydir\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#5\">        string fileName = @&quot;C:\\mydir\\myfile.ext&quot;;\n        string path = @&quot;C:\\mydir\\&quot;;\n        string result;\n\n        result = Path.GetFileName(fileName);\n        Console.WriteLine(&quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            fileName, result);\n\n        result = Path.GetFileName(path);\n        Console.WriteLine(&quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            path, result);\n\n        // This code produces output similar to the following:\n        //\n        // GetFileName(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;myfile.ext&#39;\n        // GetFileName(&#39;C:\\mydir\\&#39;) returns &#39;&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetFileNameWithoutExtension_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_GetFileNameWithoutExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFileNameWithoutExtension(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the file name of the specified path string without the extension.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetFileNameWithoutExtension (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string returned by <span class=\"xref\">stem.IO.Path.GetFileName*</span>, minus the last period (.) and all characters following it.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not verify that the path or file name exists.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a use of the <code>GetFileNameWithoutExtension</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#6\">        Dim fileName As String = &quot;C:\\mydir\\myfile.ext&quot;\n        Dim pathname As String = &quot;C:\\mydir\\&quot;\n        Dim result As String\n\n        result = Path.GetFileNameWithoutExtension(fileName)\n        Console.WriteLine(&quot;GetFileNameWithoutExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, result)\n\n        result = Path.GetFileName(pathname)\n        Console.WriteLine(&quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, pathname, result)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; GetFileNameWithoutExtension(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;myfile&#39;\n        &#39; GetFileName(&#39;C:\\mydir\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#6\">   String^ fileName = &quot;C:\\\\mydir\\\\myfile.ext&quot;;\n   String^ path = &quot;C:\\\\mydir\\\\&quot;;\n   String^ result;\n   result = Path::GetFileNameWithoutExtension( fileName );\n   Console::WriteLine( &quot;GetFileNameWithoutExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, result );\n   result = Path::GetFileName( path );\n   Console::WriteLine( &quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, path, result );\n\n   // This code produces output similar to the following:\n   //\n   // GetFileNameWithoutExtension(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;myfile&#39;\n   // GetFileName(&#39;C:\\mydir\\&#39;) returns &#39;&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#6\">        string fileName = @&quot;C:\\mydir\\myfile.ext&quot;;\n        string path = @&quot;C:\\mydir\\&quot;;\n        string result;\n\n        result = Path.GetFileNameWithoutExtension(fileName);\n        Console.WriteLine(&quot;GetFileNameWithoutExtension(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            fileName, result);\n\n        result = Path.GetFileName(path);\n        Console.WriteLine(&quot;GetFileName(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            path, result);\n\n        // This code produces output similar to the following:\n        //\n        // GetFileNameWithoutExtension(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;myfile&#39;\n        // GetFileName(&#39;C:\\mydir\\&#39;) returns &#39;&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetFullPath_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_GetFullPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetFullPath(String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the absolute path for the specified path string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetFullPath (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The file or directory for which to obtain absolute path information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified location of <code>path</code>, such as &quot;C:\\MyFile.txt&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.  </p>\n<p> -or-  </p>\n<p> The system could not retrieve the absolute path.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permissions.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains a colon (&quot;:&quot;) that is not part of a volume identifier (for example, &quot;c:\\&quot;).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a></div>\r\n                  </div>\r\n                  <p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as &quot;\\\\.\\PHYSICALDRIVE0 &quot;.  </p>\n<p> The absolute path includes all information required to locate a file or directory on a system.  </p>\n<p> The file or directory specified by <code>path</code> is not required to exist. For example, if c:\\temp\\newdir is the current directory, calling <code>GetFullPath</code> on a file name such as test.txt returns c:\\temp\\newdir\\test.txt. The file need not exist.  </p>\n<p> However, if <code>path</code> does exist, the caller must have permission to obtain path information for <code>path</code>. Note that unlike most members of the <a class=\"xref\" href=\"system.io.path\" data-linktype=\"relative-path\">Path</a> class, this method accesses the file system.  </p>\n<p> This method uses current directory and current volume information to fully qualify <code>path</code>. If you specify a file name only in <code>path</code>, <code>GetFullPath</code> returns the fully qualified path of the current directory.  </p>\n<p> If you pass in a short file name, it is expanded to a long file name.  </p>\n<p> If a path contains no significant characters it is invalid unless it contains one or more &quot;.&quot; characters followed by any number of spaces, then it will be parsed as either &quot;.&quot; or &quot;..&quot;.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <code>GetFullPath</code> method on a Windows-based desktop platform.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#7\">        Dim fileName As string = &quot;myfile.ext&quot;\n        Dim path1 As string = &quot;mydir&quot;\n        Dim path2 As string = &quot;\\mydir&quot;\n        Dim fullPath As string\n\n        fullPath = Path.GetFullPath(path1)\n        Console.WriteLine(&quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, _\n            path1, fullPath)\n        \n        fullPath = Path.GetFullPath(fileName)\n        Console.WriteLine(&quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, _\n            fileName, fullPath)\n\n        fullPath = Path.GetFullPath(path2)\n        Console.WriteLine(&quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, _\n            path2, fullPath)\n\n        &#39; Output is based on your current directory, except\n        &#39; in the last case, where it is based on the root drive\n        &#39; GetFullPath(&#39;mydir&#39;) returns &#39;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\Demo\\mydir&#39;\n        &#39; GetFullPath(&#39;myfile.ext&#39;) returns &#39;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\Demo\\myfile.ext&#39;\n        &#39; GetFullPath(&#39;\\mydir&#39;) returns &#39;C:\\mydir&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#7\">   String^ fileName = &quot;myfile.ext&quot;;\n   String^ path = &quot;\\\\mydir\\\\&quot;;\n   String^ fullPath;\n   fullPath = Path::GetFullPath( path );\n   Console::WriteLine( &quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, path, fullPath );\n   fullPath = Path::GetFullPath( fileName );\n   Console::WriteLine( &quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, fullPath );\n   \n   // Output is based on your current directory, except\n   // in the last case, where it is based on the root drive\n   // GetFullPath(&#39;mydir&#39;) returns &#39;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\Demo\\mydir&#39;\n   // GetFullPath(&#39;myfile.ext&#39;) returns &#39;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\Demo\\myfile.ext&#39;\n   // GetFullPath(&#39;\\mydir&#39;) returns &#39;C:\\mydir&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#7\">        string fileName = &quot;myfile.ext&quot;;\n        string path1 = @&quot;mydir&quot;;\n        string path2 = @&quot;\\mydir&quot;;\n        string fullPath;\n\n        fullPath = Path.GetFullPath(path1);\n        Console.WriteLine(&quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            path1, fullPath);\n        \n        fullPath = Path.GetFullPath(fileName);\n        Console.WriteLine(&quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            fileName, fullPath);\n\n        fullPath = Path.GetFullPath(path2);\n        Console.WriteLine(&quot;GetFullPath(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            path2, fullPath);\n\n        // Output is based on your current directory, except\n        // in the last case, where it is based on the root drive\n        // GetFullPath(&#39;mydir&#39;) returns &#39;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\Demo\\mydir&#39;\n        // GetFullPath(&#39;myfile.ext&#39;) returns &#39;C:&nbsp;&nbsp;&nbsp;&nbsp;emp\\Demo\\myfile.ext&#39;\n        // GetFullPath(&#39;\\mydir&#39;) returns &#39;C:\\mydir&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetInvalidFileNameChars\">\r\n    \r\n            <a id=\"System_IO_Path_GetInvalidFileNameChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInvalidFileNameChars()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array containing the characters that are not allowed in file names.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char[] GetInvalidFileNameChars ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>An array containing the characters that are not allowed in file names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (&quot;), less than (&lt;), greater than (&gt;), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the GetInvalidFileNameChars method and the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidPathChars_\" data-linktype=\"relative-path\">GetInvalidPathChars</a> method to retrieve invalid characters.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.Path.GetInvalidFile-PathChars#1\">using System;\nusing System.IO;\n\nnamespace PathExample\n{\n    class GetCharExample\n    {\n        public static void Main()\n        {\n            // Get a list of invalid path characters.\n            char[] invalidPathChars = Path.GetInvalidPathChars();\n\n            Console.WriteLine(&quot;The following characters are invalid in a path:&quot;);\n            ShowChars(invalidPathChars);\n            Console.WriteLine();\n\n            // Get a list of invalid file characters.\n            char[] invalidFileChars = Path.GetInvalidFileNameChars();\n\n            Console.WriteLine(&quot;The following characters are invalid in a filename:&quot;);\n            ShowChars(invalidFileChars);\n        }\n\n        public static void ShowChars(char[] charArray)\n        {\n            Console.WriteLine(&quot;Char&nbsp;&nbsp;&nbsp;&nbsp;Hex Value&quot;);\n            // Display each invalid character to the console.\n            foreach (char someChar in charArray)\n            {\n                if (Char.IsWhiteSpace(someChar))\n                {\n                    Console.WriteLine(&quot;,&nbsp;&nbsp;&nbsp;&nbsp;{0:X4}&quot;, (int)someChar);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;{0:c},&nbsp;&nbsp;&nbsp;&nbsp;{1:X4}&quot;, someChar, (int)someChar);\n                }\n            }\n        }\n    }\n}\n// Note: Some characters may not be displayable on the console.\n// The output will look something like:\n//\n// The following characters are invalid in a path:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n//\n// The following characters are invalid in a filename:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.Path.GetInvalidFile-PathChars#1\">Imports System\nImports System.IO\n\nNamespace PathExample\n    Public Class GetCharExample\n        Public Shared Sub Main()\n            &#39; Get a list of invalid path characters.\n            Dim invalidPathChars() As Char = Path.GetInvalidPathChars()\n\n            Console.WriteLine(&quot;The following characters are invalid in a path:&quot;)\n            ShowChars(invalidPathChars)\n            Console.WriteLine()\n\n            &#39; Get a list of invalid file characters.\n            Dim invalidFileChars() As Char = Path.GetInvalidFileNameChars()\n\n            Console.WriteLine(&quot;The following characters are invalid in a filename:&quot;)\n            ShowChars(invalidFileChars)\n        End Sub\n\n        Public Shared Sub ShowChars(charArray As Char())\n            Console.WriteLine(&quot;Char&quot; + vbTab + &quot;Hex Value&quot;)\n            &#39; Display each invalid character to the console.\n            For Each someChar As Char In charArray\n                If Char.IsWhiteSpace(someChar)\n                    Console.WriteLine(&quot;,&quot; + vbTab + &quot;{0:X4}&quot;, _\n                        Microsoft.VisualBasic.Asc(someChar))\n                Else\n                    Console.WriteLine(&quot;{0:c},&quot; + vbTab +&quot;{1:X4}&quot;, someChar, _\n                        Microsoft.VisualBasic.Asc(someChar))\n                End If\n            Next someChar\n        End Sub\n    End Class\nEnd Namespace\n&#39; Note: Some characters may not be displayable on the console.\n&#39; The output will look something like:\n&#39;\n&#39; The following characters are invalid in a path:\n&#39; Char    Hex Value\n&#39; &quot;,      0022\n&#39; &lt;,      003C\n&#39; &gt;,      003E\n&#39; |,      007C\n&#39; ...\n&#39;\n&#39; The following characters are invalid in a filename:\n&#39; Char    Hex Value\n&#39; &quot;,      0022\n&#39; &lt;,      003C\n&#39; &gt;,      003E\n&#39; |,      007C\n&#39; ...\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.Path.GetInvalidFile-PathChars#1\">using namespace System;\nusing namespace System::IO;\n\nnamespace PathExample\n{\n    public ref class GetCharExample\n    {\n    public:\n        static void Main()\n        {\n            // Get a list of invalid path characters.\n            array&lt;Char&gt;^ invalidPathChars = Path::GetInvalidPathChars();\n\n            Console::WriteLine(&quot;The following characters are invalid in a path:&quot;);\n            ShowChars(invalidPathChars);\n            Console::WriteLine();\n\n            // Get a list of invalid file characters.\n            array&lt;Char&gt;^ invalidFileChars = Path::GetInvalidFileNameChars();\n\n            Console::WriteLine(&quot;The following characters are invalid in a filename:&quot;);\n            ShowChars(invalidFileChars);\n        }\n\n        static void ShowChars(array&lt;Char&gt;^ charArray)\n        {\n            Console::WriteLine(&quot;Char&nbsp;&nbsp;&nbsp;&nbsp;Hex Value&quot;);\n            // Display each invalid character to the console.\n            for each (Char someChar in charArray)\n            {\n                if (Char::IsWhiteSpace(someChar))\n                {\n                    Console::WriteLine(&quot;,&nbsp;&nbsp;&nbsp;&nbsp;{0:X4}&quot;, (Int16)someChar);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;{0:c},&nbsp;&nbsp;&nbsp;&nbsp;{1:X4}&quot;, someChar, (Int16)someChar);\n                }\n            }\n        }\n    };\n};\n\nint main()\n{\n    PathExample::GetCharExample::Main();\n}\n// Note: Some characters may not be displayable on the console.\n// The output will look something like:\n//\n// The following characters are invalid in a path:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n//\n// The following characters are invalid in a filename:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetInvalidPathChars\">\r\n    \r\n            <a id=\"System_IO_Path_GetInvalidPathChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetInvalidPathChars()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an array containing the characters that are not allowed in path names.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char[] GetInvalidPathChars ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>An array containing the characters that are not allowed in path names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote (&quot;), less than (&lt;), greater than (&gt;), pipe (&#124;), backspace (\\b), null (\\0) and tab (\\t).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetInvalidFileNameChars_\" data-linktype=\"relative-path\">GetInvalidFileNameChars</a> method and the GetInvalidPathChars method to retrieve invalid characters.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.Path.GetInvalidFile-PathChars#1\">using System;\nusing System.IO;\n\nnamespace PathExample\n{\n    class GetCharExample\n    {\n        public static void Main()\n        {\n            // Get a list of invalid path characters.\n            char[] invalidPathChars = Path.GetInvalidPathChars();\n\n            Console.WriteLine(&quot;The following characters are invalid in a path:&quot;);\n            ShowChars(invalidPathChars);\n            Console.WriteLine();\n\n            // Get a list of invalid file characters.\n            char[] invalidFileChars = Path.GetInvalidFileNameChars();\n\n            Console.WriteLine(&quot;The following characters are invalid in a filename:&quot;);\n            ShowChars(invalidFileChars);\n        }\n\n        public static void ShowChars(char[] charArray)\n        {\n            Console.WriteLine(&quot;Char&nbsp;&nbsp;&nbsp;&nbsp;Hex Value&quot;);\n            // Display each invalid character to the console.\n            foreach (char someChar in charArray)\n            {\n                if (Char.IsWhiteSpace(someChar))\n                {\n                    Console.WriteLine(&quot;,&nbsp;&nbsp;&nbsp;&nbsp;{0:X4}&quot;, (int)someChar);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;{0:c},&nbsp;&nbsp;&nbsp;&nbsp;{1:X4}&quot;, someChar, (int)someChar);\n                }\n            }\n        }\n    }\n}\n// Note: Some characters may not be displayable on the console.\n// The output will look something like:\n//\n// The following characters are invalid in a path:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n//\n// The following characters are invalid in a filename:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.Path.GetInvalidFile-PathChars#1\">Imports System\nImports System.IO\n\nNamespace PathExample\n    Public Class GetCharExample\n        Public Shared Sub Main()\n            &#39; Get a list of invalid path characters.\n            Dim invalidPathChars() As Char = Path.GetInvalidPathChars()\n\n            Console.WriteLine(&quot;The following characters are invalid in a path:&quot;)\n            ShowChars(invalidPathChars)\n            Console.WriteLine()\n\n            &#39; Get a list of invalid file characters.\n            Dim invalidFileChars() As Char = Path.GetInvalidFileNameChars()\n\n            Console.WriteLine(&quot;The following characters are invalid in a filename:&quot;)\n            ShowChars(invalidFileChars)\n        End Sub\n\n        Public Shared Sub ShowChars(charArray As Char())\n            Console.WriteLine(&quot;Char&quot; + vbTab + &quot;Hex Value&quot;)\n            &#39; Display each invalid character to the console.\n            For Each someChar As Char In charArray\n                If Char.IsWhiteSpace(someChar)\n                    Console.WriteLine(&quot;,&quot; + vbTab + &quot;{0:X4}&quot;, _\n                        Microsoft.VisualBasic.Asc(someChar))\n                Else\n                    Console.WriteLine(&quot;{0:c},&quot; + vbTab +&quot;{1:X4}&quot;, someChar, _\n                        Microsoft.VisualBasic.Asc(someChar))\n                End If\n            Next someChar\n        End Sub\n    End Class\nEnd Namespace\n&#39; Note: Some characters may not be displayable on the console.\n&#39; The output will look something like:\n&#39;\n&#39; The following characters are invalid in a path:\n&#39; Char    Hex Value\n&#39; &quot;,      0022\n&#39; &lt;,      003C\n&#39; &gt;,      003E\n&#39; |,      007C\n&#39; ...\n&#39;\n&#39; The following characters are invalid in a filename:\n&#39; Char    Hex Value\n&#39; &quot;,      0022\n&#39; &lt;,      003C\n&#39; &gt;,      003E\n&#39; |,      007C\n&#39; ...\n</code></pre><pre><code class=\"lang-cpp\" name=\"IO.Path.GetInvalidFile-PathChars#1\">using namespace System;\nusing namespace System::IO;\n\nnamespace PathExample\n{\n    public ref class GetCharExample\n    {\n    public:\n        static void Main()\n        {\n            // Get a list of invalid path characters.\n            array&lt;Char&gt;^ invalidPathChars = Path::GetInvalidPathChars();\n\n            Console::WriteLine(&quot;The following characters are invalid in a path:&quot;);\n            ShowChars(invalidPathChars);\n            Console::WriteLine();\n\n            // Get a list of invalid file characters.\n            array&lt;Char&gt;^ invalidFileChars = Path::GetInvalidFileNameChars();\n\n            Console::WriteLine(&quot;The following characters are invalid in a filename:&quot;);\n            ShowChars(invalidFileChars);\n        }\n\n        static void ShowChars(array&lt;Char&gt;^ charArray)\n        {\n            Console::WriteLine(&quot;Char&nbsp;&nbsp;&nbsp;&nbsp;Hex Value&quot;);\n            // Display each invalid character to the console.\n            for each (Char someChar in charArray)\n            {\n                if (Char::IsWhiteSpace(someChar))\n                {\n                    Console::WriteLine(&quot;,&nbsp;&nbsp;&nbsp;&nbsp;{0:X4}&quot;, (Int16)someChar);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;{0:c},&nbsp;&nbsp;&nbsp;&nbsp;{1:X4}&quot;, someChar, (Int16)someChar);\n                }\n            }\n        }\n    };\n};\n\nint main()\n{\n    PathExample::GetCharExample::Main();\n}\n// Note: Some characters may not be displayable on the console.\n// The output will look something like:\n//\n// The following characters are invalid in a path:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n//\n// The following characters are invalid in a filename:\n// Char    Hex Value\n// &quot;,      0022\n// &lt;,      003C\n// &gt;,      003E\n// |,      007C\n// ...\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetPathRoot_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_GetPathRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPathRoot(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the root directory information of the specified path.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetPathRoot (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path from which to obtain root directory information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The root directory of <code>path</code>, such as &quot;C:\\&quot;, or <code>null</code> if <code>path</code> is <code>null</code>, or an empty string if <code>path</code> does not contain root directory information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.  </p>\n<p> -or-  </p>\n<p> <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a> was passed to <code>path</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not verify that the path or file name exists.  </p>\n<p> Possible patterns for the string returned by this method are as follows:  </p>\n<ul>\n<li><p>An empty string (<code>path</code> specified a relative path on the current drive or volume).  </p>\n</li>\n<li><p>&quot;/&quot; (<code>path</code> specified an absolute path on the current drive).  </p>\n</li>\n<li><p>&quot;X:&quot; (<code>path</code> specified a relative path on a drive, where X represents a drive or volume letter).  </p>\n</li>\n<li><p>&quot;X:/&quot; (<code>path</code> specified an absolute path on a given drive).  </p>\n</li>\n<li><p>&quot;\\\\ComputerName\\SharedFolder&quot; (a UNC path).  </p>\n<p>The .NET Framework does not support direct access to physical disks through paths that are device names, such as &quot;\\\\.\\PHYSICALDRIVE0 &quot;.  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a use of the <code>GetPathRoot</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#8\">        Dim pathname As String = &quot;\\mydir\\&quot;\n        Dim fileName As String = &quot;myfile.ext&quot;\n        Dim fullPath As String = &quot;C:\\mydir\\myfile.ext&quot;\n        Dim pathnameRoot As String\n\n        pathnameRoot = Path.GetPathRoot(pathname)\n        Console.WriteLine(&quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, pathname, pathnameRoot)\n\n        pathnameRoot = Path.GetPathRoot(fileName)\n        Console.WriteLine(&quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, pathnameRoot)\n\n        pathnameRoot = Path.GetPathRoot(fullPath)\n        Console.WriteLine(&quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fullPath, pathnameRoot)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; GetPathRoot(&#39;\\mydir\\&#39;) returns &#39;\\&#39;\n        &#39; GetPathRoot(&#39;myfile.ext&#39;) returns &#39;&#39;\n        &#39; GetPathRoot(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;C:\\&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#8\">   String^ path = &quot;\\\\mydir\\\\&quot;;\n   String^ fileName = &quot;myfile.ext&quot;;\n   String^ fullPath = &quot;C:\\\\mydir\\\\myfile.ext&quot;;\n   String^ pathRoot;\n   pathRoot = Path::GetPathRoot( path );\n   Console::WriteLine( &quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, path, pathRoot );\n   pathRoot = Path::GetPathRoot( fileName );\n   Console::WriteLine( &quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fileName, pathRoot );\n   pathRoot = Path::GetPathRoot( fullPath );\n   Console::WriteLine( &quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, fullPath, pathRoot );\n\n   // This code produces output similar to the following:\n   //\n   // GetPathRoot(&#39;\\mydir\\&#39;) returns &#39;\\&#39;\n   // GetPathRoot(&#39;myfile.ext&#39;) returns &#39;&#39;\n   // GetPathRoot(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;C:\\&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#8\">        string path = @&quot;\\mydir\\&quot;;\n        string fileName = &quot;myfile.ext&quot;;\n        string fullPath = @&quot;C:\\mydir\\myfile.ext&quot;;\n        string pathRoot;\n\n        pathRoot = Path.GetPathRoot(path);\n        Console.WriteLine(&quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            path, pathRoot);\n        \n        pathRoot = Path.GetPathRoot(fileName);\n        Console.WriteLine(&quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            fileName, pathRoot);\n\n        pathRoot = Path.GetPathRoot(fullPath);\n        Console.WriteLine(&quot;GetPathRoot(&#39;{0}&#39;) returns &#39;{1}&#39;&quot;, \n            fullPath, pathRoot);\n\n        // This code produces output similar to the following:\n        //\n        // GetPathRoot(&#39;\\mydir\\&#39;) returns &#39;\\&#39;\n        // GetPathRoot(&#39;myfile.ext&#39;) returns &#39;&#39;\n        // GetPathRoot(&#39;C:\\mydir\\myfile.ext&#39;) returns &#39;C:\\&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetRandomFileName\">\r\n    \r\n            <a id=\"System_IO_Path_GetRandomFileName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRandomFileName()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a random folder name or file name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetRandomFileName ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A random folder name or file name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetRandomFileName method returns a cryptographically strong, random string that can be used as either a folder name or a file name. Unlike <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetTempFileName_\" data-linktype=\"relative-path\">GetTempFileName</a>, GetRandomFileName does not create a file. When the security of your file system is paramount, this method should be used instead of <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetTempFileName_\" data-linktype=\"relative-path\">GetTempFileName</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example show output from the GetRandomFileName method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.Path Members#20\">using System;\nusing System.IO;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string result = Path.GetRandomFileName();\n            Console.WriteLine(&quot;Random file name is &quot; + result);\n        }\n    }\n}\n\n/*\n\n This code produces output similar to the following:\n\n Random file name is w143kxnu.idj\n Press any key to continue . . .\n \n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.Path Members#20\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Dim result = Path.GetRandomFileName()\n        Console.WriteLine(&quot;Random file name is &quot; + result)\n    End Sub\n\nEnd Module\n\n&#39; This code produces output similar to the following:\n\n&#39; Random file name is w143kxnu.idj\n&#39; Press any key to continue . . .\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetTempFileName\">\r\n    \r\n            <a id=\"System_IO_Path_GetTempFileName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTempFileName()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTempFileName ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The full path of the temporary file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs, such as no unique temporary file name is available.  </p>\n<p> - or -  </p>\n<p> This method was unable to create a temporary file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a temporary file with a .TMP file extension. The temporary file is created within the user’s temporary folder, which is the path returned by the <a class=\"xref\" href=\"system.io.path#System_IO_Path_GetTempPath_\" data-linktype=\"relative-path\">GetTempPath</a> method.  </p>\n<p> The GetTempFileName method will raise an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> if it is used to create more than 65535 files without deleting previous temporary files.  </p>\n<p> The GetTempFileName method will raise an <a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a> if no unique temporary file name is available. To resolve this error, delete all unneeded temporary files.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_GetTempPath\">\r\n    \r\n            <a id=\"System_IO_Path_GetTempPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTempPath()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the path of the current user&#39;s temporary folder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string GetTempPath ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The path to the temporary folder, ending with a backslash.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permissions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method checks for the existence of environment variables in the following order and uses the first path found:  </p>\n<ol>\n<li><p>The path specified by the TMP environment variable.  </p>\n</li>\n<li><p>The path specified by the TEMP environment variable.  </p>\n</li>\n<li><p>The path specified by the USERPROFILE environment variable.  </p>\n</li>\n<li><p>The Windows directory.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code shows how to call the GetTempPath method.  </p>\n<pre><code class=\"lang-vb\">result As String = Path.GetTempPath()  \nConsole.WriteLine(result)  \n</code></pre><pre><code class=\"lang-c#\">string result = Path.GetTempPath();  \nConsole.WriteLine(result);  \n</code></pre><p> This example produces output similar to the following.  </p>\n<pre><code>C:\\Users\\UserName\\AppData\\Local&nbsp;&nbsp;&nbsp;&nbsp;emp\\  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_HasExtension_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_HasExtension_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HasExtension(String)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a path includes a file name extension.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool HasExtension (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to search for an extension.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the characters that follow the last directory separator (\\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Starting from the end of <code>path</code>, this method searches for a period (.) followed by at least one character. If this pattern is found before a <a class=\"xref\" href=\"system.io.path#System_IO_Path_DirectorySeparatorChar\" data-linktype=\"relative-path\">DirectorySeparatorChar</a>, <a class=\"xref\" href=\"system.io.path#System_IO_Path_AltDirectorySeparatorChar\" data-linktype=\"relative-path\">AltDirectorySeparatorChar</a>, or <a class=\"xref\" href=\"system.io.path#System_IO_Path_VolumeSeparatorChar\" data-linktype=\"relative-path\">VolumeSeparatorChar</a> character is encountered, this method returns <code>true</code>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the use of the <code>HasExtension</code> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#11\">        Dim fileName1 As String = &quot;myfile.ext&quot;\n        Dim fileName2 As String = &quot;mydir\\myfile&quot;\n        Dim pathname As String = &quot;C:\\mydir.ext\\&quot;\n        Dim result As Boolean\n\n        result = Path.HasExtension(fileName1)\n        Console.WriteLine(&quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, fileName1, result)\n\n        result = Path.HasExtension(fileName2)\n        Console.WriteLine(&quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, fileName2, result)\n\n        result = Path.HasExtension(pathname)\n        Console.WriteLine(&quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, pathname, result)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; HasExtension(&#39;myfile.ext&#39;) returns True\n        &#39; HasExtension(&#39;mydir\\myfile&#39;) returns False\n        &#39; HasExtension(&#39;C:\\mydir.ext\\&#39;) returns False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#11\">   String^ fileName1 = &quot;myfile.ext&quot;;\n   String^ fileName2 = &quot;mydir\\\\myfile&quot;;\n   String^ path = &quot;C:\\\\mydir.ext\\\\&quot;;\n   bool result;\n   result = Path::HasExtension( fileName1 );\n   Console::WriteLine( &quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, fileName1, result.ToString() );\n   result = Path::HasExtension( fileName2 );\n   Console::WriteLine( &quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, fileName2, result.ToString() );\n   result = Path::HasExtension( path );\n   Console::WriteLine( &quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, path, result.ToString() );\n\n   // This code produces output similar to the following:\n   //\n   // HasExtension(&#39;myfile.ext&#39;) returns True\n   // HasExtension(&#39;mydir\\myfile&#39;) returns False\n   // HasExtension(&#39;C:\\mydir.ext\\&#39;) returns False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#11\">        string fileName1 = &quot;myfile.ext&quot;;\n        string fileName2 = @&quot;mydir\\myfile&quot;;\n        string path = @&quot;C:\\mydir.ext\\&quot;;\n        bool result;\n\n        result = Path.HasExtension(fileName1);\n        Console.WriteLine(&quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, \n            fileName1, result);\n\n        result = Path.HasExtension(fileName2);\n        Console.WriteLine(&quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, \n            fileName2, result);\n        \n        result = Path.HasExtension(path);\n        Console.WriteLine(&quot;HasExtension(&#39;{0}&#39;) returns {1}&quot;, \n            path, result);\n\n        // This code produces output similar to the following:\n        //\n        // HasExtension(&#39;myfile.ext&#39;) returns True\n        // HasExtension(&#39;mydir\\myfile&#39;) returns False\n        // HasExtension(&#39;C:\\mydir.ext\\&#39;) returns False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_Path_IsPathRooted_System_String_\">\r\n    \r\n            <a id=\"System_IO_Path_IsPathRooted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPathRooted(String)</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the specified path string contains a root.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsPathRooted (string path);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>path</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path to test.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>path</code> contains a root; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>path</code> contains one or more of the invalid characters defined in <span class=\"xref\">stem.IO.Path.GetInvalidPathChars*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsPathRooted method returns <code>true</code> if the first character is a directory separator character such as &quot;\\&quot;, or if the path starts with a drive letter and colon (:). For example, it returns <code>true</code> for <code>path</code> strings such as &quot;\\\\MyDir\\\\MyFile.txt&quot;, &quot;C:\\\\MyDir&quot;, or &quot;C:MyDir&quot;. It returns <code>false</code> for <code>path</code> strings such as &quot;MyDir&quot;.  </p>\n<p> This method does not verify that the path or file name exists.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how the <code>IsPathRooted</code> method can be used to test three strings.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IO.Path Members#12\">        Dim fileName As String = &quot;C:\\mydir\\myfile.ext&quot;\n        Dim UncPath As String = &quot;\\\\myPc\\mydir\\myfile&quot;\n        Dim relativePath As String = &quot;mydir\\sudir\\&quot;\n        Dim result As Boolean\n\n        result = Path.IsPathRooted(fileName)\n        Console.WriteLine(&quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, fileName, result)\n\n        result = Path.IsPathRooted(UncPath)\n        Console.WriteLine(&quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, UncPath, result)\n\n        result = Path.IsPathRooted(relativePath)\n        Console.WriteLine(&quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, relativePath, result)\n\n        &#39; This code produces output similar to the following:\n        &#39;\n        &#39; IsPathRooted(&#39;C:\\mydir\\myfile.ext&#39;) returns True\n        &#39; IsPathRooted(&#39;\\\\myPc\\mydir\\myfile&#39;) returns True\n        &#39; IsPathRooted(&#39;mydir\\sudir\\&#39;) returns False\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.Path Members#12\">   String^ fileName = &quot;C:\\\\mydir\\\\myfile.ext&quot;;\n   String^ UncPath = &quot;\\\\\\\\myPc\\\\mydir\\\\myfile&quot;;\n   String^ relativePath = &quot;mydir\\\\sudir\\\\&quot;;\n   bool result;\n   result = Path::IsPathRooted( fileName );\n   Console::WriteLine( &quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, fileName, result.ToString() );\n   result = Path::IsPathRooted( UncPath );\n   Console::WriteLine( &quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, UncPath, result.ToString() );\n   result = Path::IsPathRooted( relativePath );\n   Console::WriteLine( &quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, relativePath, result.ToString() );\n   \n   // This code produces output similar to the following:\n   //\n   // IsPathRooted(&#39;C:\\mydir\\myfile.ext&#39;) returns True\n   // IsPathRooted(&#39;\\\\myPc\\mydir\\myfile&#39;) returns True\n   // IsPathRooted(&#39;mydir\\sudir\\&#39;) returns False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.Path Members#12\">        string fileName = @&quot;C:\\mydir\\myfile.ext&quot;;\n        string UncPath = @&quot;\\\\myPc\\mydir\\myfile&quot;;\n        string relativePath = @&quot;mydir\\sudir\\&quot;;\n        bool result;\n\n        result = Path.IsPathRooted(fileName);\n        Console.WriteLine(&quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, \n            fileName, result);\n\n        result = Path.IsPathRooted(UncPath);\n        Console.WriteLine(&quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, \n            UncPath, result);\n        \n        result = Path.IsPathRooted(relativePath);\n        Console.WriteLine(&quot;IsPathRooted(&#39;{0}&#39;) returns {1}&quot;, \n            relativePath, result);\n\n        // This code produces output similar to the following:\n        //\n        // IsPathRooted(&#39;C:\\mydir\\myfile.ext&#39;) returns True\n        // IsPathRooted(&#39;\\\\myPc\\mydir\\myfile&#39;) returns True\n        // IsPathRooted(&#39;mydir\\sudir\\&#39;) returns False\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Path.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Path.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Path\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.AltDirectorySeparatorChar\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.ChangeExtension\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.Combine\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.DirectorySeparatorChar\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetDirectoryName\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetExtension\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetFileName\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetFileNameWithoutExtension\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetFullPath\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetInvalidFileNameChars\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetInvalidPathChars\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetPathRoot\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetRandomFileName\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetTempFileName\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.GetTempPath\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.HasExtension\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.InvalidPathChars\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.IsPathRooted\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.PathSeparator\">\r\n<meta name=\"APIName\" content=\"System.IO.Path.VolumeSeparatorChar\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"617980b9-11bd-4357-51a7-527c1072e33c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Performs operations on  instances that contain file or directory path information. These operations are performed in a cross-platform manner.  \n To browse the .NET Framework source code for this type…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Path\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.Path.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.Path.yml","open_to_public_contributors":true,"api_name":["System.IO.Path","System.IO.Path.AltDirectorySeparatorChar","System.IO.Path.ChangeExtension","System.IO.Path.Combine","System.IO.Path.DirectorySeparatorChar","System.IO.Path.GetDirectoryName","System.IO.Path.GetExtension","System.IO.Path.GetFileName","System.IO.Path.GetFileNameWithoutExtension","System.IO.Path.GetFullPath","System.IO.Path.GetInvalidFileNameChars","System.IO.Path.GetInvalidPathChars","System.IO.Path.GetPathRoot","System.IO.Path.GetRandomFileName","System.IO.Path.GetTempFileName","System.IO.Path.GetTempPath","System.IO.Path.HasExtension","System.IO.Path.InvalidPathChars","System.IO.Path.IsPathRooted","System.IO.Path.PathSeparator","System.IO.Path.VolumeSeparatorChar"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Path","System::IO::Path","System.IO.Path.AltDirectorySeparatorChar","System::IO::Path::AltDirectorySeparatorChar","System.IO.Path.ChangeExtension","System::IO::Path::ChangeExtension","System.IO.Path.Combine","System::IO::Path::Combine","System.IO.Path.DirectorySeparatorChar","System::IO::Path::DirectorySeparatorChar","System.IO.Path.GetDirectoryName","System::IO::Path::GetDirectoryName","System.IO.Path.GetExtension","System::IO::Path::GetExtension","System.IO.Path.GetFileName","System::IO::Path::GetFileName","System.IO.Path.GetFileNameWithoutExtension","System::IO::Path::GetFileNameWithoutExtension","System.IO.Path.GetFullPath","System::IO::Path::GetFullPath","System.IO.Path.GetInvalidFileNameChars","System::IO::Path::GetInvalidFileNameChars","System.IO.Path.GetInvalidPathChars","System::IO::Path::GetInvalidPathChars","System.IO.Path.GetPathRoot","System::IO::Path::GetPathRoot","System.IO.Path.GetRandomFileName","System::IO::Path::GetRandomFileName","System.IO.Path.GetTempFileName","System::IO::Path::GetTempFileName","System.IO.Path.GetTempPath","System::IO::Path::GetTempPath","System.IO.Path.HasExtension","System::IO::Path::HasExtension","System.IO.Path.InvalidPathChars","System::IO::Path::InvalidPathChars","System.IO.Path.IsPathRooted","System::IO::Path::IsPathRooted","System.IO.Path.PathSeparator","System::IO::Path::PathSeparator","System.IO.Path.VolumeSeparatorChar","System::IO::Path::VolumeSeparatorChar"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"617980b9-11bd-4357-51a7-527c1072e33c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/Path.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Path class | Microsoft Docs","_op_ogTitle":"Path class","description":"Performs operations on  instances that contain file or directory path information. These operations are performed in a cross-platform manner.  \n To browse the .NET Framework source code for this type…","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.Path","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.path","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.path","fileRelativePath":"System.IO.Path.html"},"themesRelativePathToOutputRoot":"_themes/"}