{"content":"    \r\n    <h1 id=\"System_Char\">\r\n      <span class=\"lang-csharp\">Char</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a character as a UTF-16 code unit.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Char</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/dnprdnshort-md.md&quot; -->.NET Framework<!--END INCLUDE --> uses the Char structure to represent a Unicode character. The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values. Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a Char structure.  The value of a Char object is its 16-bit numeric (ordinal) value.  </p>\n<p> The following sections examine the relationship between a Char object and a character and discuss some common tasks performed with Char instances.  </p>\n<p> <a href=\"#Relationship\" data-linktype=\"self-bookmark\">Char objects, Unicode characters, and strings</a><br> <a href=\"#Categories\" data-linktype=\"self-bookmark\">Characters and character categories</a><br> <a href=\"#Elements\" data-linktype=\"self-bookmark\">Characters and text elements</a><br> <a href=\"#Operations\" data-linktype=\"self-bookmark\">Common operations</a><br> <a href=\"#Interop\" data-linktype=\"self-bookmark\">Char values and interop</a>  </p>\n<p><a name=\"Relationship\"></a>   </p>\n<h2 id=\"char-objects-unicode-characters-and-strings\">Char objects, Unicode characters, and strings</h2>\n<p> A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is a sequential collection of Char structures that represents a string of text. Most Unicode characters can be represented by a single Char object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple Char objects. For this reason, a Char structure in a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object is not necessarily equivalent to a single Unicode character.  </p>\n<p> Multiple 16-bit code units are used to represent single Unicode characters in the following cases:  </p>\n<ul>\n<li><p>Glyphs, which may consist of a single character or of a base character followed by one or more combining characters. For example, the character Ã¤ is represented by a Char object whose code unit is U+0061 followed by a Char object whose code unit is U+0308. (The character Ã¤ can also be defined by a single Char object that has a code unit of U+00E4.) The following example illustrates that the character Ã¤ consists of two Char objects.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.Class#1\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(&quot;chars1.txt&quot;);\n      char[] chars = { &#39;\\u0061&#39;, &#39;\\u0308&#39; };\n      string strng = new String(chars);\n      sw.WriteLine(strng); \n      sw.Close();\n   }\n}\n// The example produces the following output:\n//       aÌˆ\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Class#1\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;chars1.txt&quot;)\n      Dim chars() As Char = { ChrW(&amp;h0061), ChrW(&amp;h0308) }\n      Dim strng As New String(chars)\n      sw.WriteLine(strng) \n      sw.Close()\n   End Sub\nEnd Module\n&#39; The example produces the following output:\n&#39;       aÌˆ\n</code></pre></li>\n<li><p>Characters outside the Unicode Basic Multilingual Plane (BMP). Unicode supports sixteen planes in addition to the BMP, which represents plane 0. A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane. For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character. Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16. The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60. U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF. U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.Class#2\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamWriter sw = new StreamWriter(@&quot;.\\chars2.txt&quot;);\n      int utf32 = 0x1D160;\n      string surrogate = Char.ConvertFromUtf32(utf32);\n      sw.WriteLine(&quot;U+{0:X6} UTF-32 = {1} ({2}) UTF-16&quot;, \n                   utf32, surrogate, ShowCodePoints(surrogate));\n      sw.Close();                    \n   }\n\n   private static string ShowCodePoints(string value)\n   {\n      string retval = null;\n      foreach (var ch in value)\n         retval += String.Format(&quot;U+{0:X4} &quot;, Convert.ToUInt16(ch));\n\n      return retval.Trim();\n   }\n}\n// The example produces the following output:\n//       U+01D160 UTF-32 = &#240;Â&#160;(U+D834 U+DD60) UTF-16\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Class#2\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sw As New StreamWriter(&quot;.\\chars2.txt&quot;)\n      Dim utf32 As Integer = &amp;h1D160\n      Dim surrogate As String = Char.ConvertFromUtf32(utf32)\n      sw.WriteLine(&quot;U+{0:X6} UTF-32 = {1} ({2}) UTF-16&quot;, \n                   utf32, surrogate, ShowCodePoints(surrogate))\n      sw.Close()                    \n   End Sub\n\n   Private Function ShowCodePoints(value As String) As String\n      Dim retval As String = Nothing\n      For Each ch In value\n         retval += String.Format(&quot;U+{0:X4} &quot;, Convert.ToUInt16(ch))\n      Next\n      Return retval.Trim()\n   End Function\nEnd Module\n&#39; The example produces the following output:\n&#39;       U+01D160 UTF-32 = &#240;&#160;(U+D834 U+DD60) UTF-16\n</code></pre></li>\n</ul>\n<p><a name=\"Categories\"></a>   </p>\n<h2 id=\"characters-and-character-categories\">Characters and character categories</h2>\n<p> Each Unicode character or valid surrogate pair belongs to a Unicode category. In the .NET Framework, Unicode categories are represented by members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> enumeration and include values such as <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, and <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, for example.  </p>\n<p> To determine the Unicode category of a character, you call the <a class=\"xref\" href=\"system.char#System_Char_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a> method. For example, the following example calls the <a class=\"xref\" href=\"system.char#System_Char_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a> to display the Unicode category of each character in a string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.Class#6\">using System;\nusing System.Globalization;\n\nclass Example\n{\n   public static void Main()\n   {\n      // Define a string with a variety of character categories.\n      String s = &quot;The car drove down the narrow, secluded road.&quot;;\n      // Determine the category of each character.\n      foreach (var ch in s)\n         Console.WriteLine(&quot;&#39;{0}&#39;: {1}&quot;, ch, Char.GetUnicodeCategory(ch)); \n\n   }\n}\n// The example displays the following output:\n//      &#39;T&#39;: UppercaseLetter\n//      &#39;h&#39;: LowercaseLetter\n//      &#39;e&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;r&#39;: LowercaseLetter\n//      &#39;e&#39;: LowercaseLetter\n//      &#39;d&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;c&#39;: LowercaseLetter\n//      &#39;a&#39;: LowercaseLetter\n//      &#39;r&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;d&#39;: LowercaseLetter\n//      &#39;r&#39;: LowercaseLetter\n//      &#39;o&#39;: LowercaseLetter\n//      &#39;v&#39;: LowercaseLetter\n//      &#39;e&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;d&#39;: LowercaseLetter\n//      &#39;o&#39;: LowercaseLetter\n//      &#39;w&#39;: LowercaseLetter\n//      &#39;n&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;t&#39;: LowercaseLetter\n//      &#39;h&#39;: LowercaseLetter\n//      &#39;e&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;l&#39;: LowercaseLetter\n//      &#39;o&#39;: LowercaseLetter\n//      &#39;n&#39;: LowercaseLetter\n//      &#39;g&#39;: LowercaseLetter\n//      &#39;,&#39;: OtherPunctuation\n//      &#39; &#39;: SpaceSeparator\n//      &#39;n&#39;: LowercaseLetter\n//      &#39;a&#39;: LowercaseLetter\n//      &#39;r&#39;: LowercaseLetter\n//      &#39;r&#39;: LowercaseLetter\n//      &#39;o&#39;: LowercaseLetter\n//      &#39;w&#39;: LowercaseLetter\n//      &#39;,&#39;: OtherPunctuation\n//      &#39; &#39;: SpaceSeparator\n//      &#39;s&#39;: LowercaseLetter\n//      &#39;e&#39;: LowercaseLetter\n//      &#39;c&#39;: LowercaseLetter\n//      &#39;l&#39;: LowercaseLetter\n//      &#39;u&#39;: LowercaseLetter\n//      &#39;d&#39;: LowercaseLetter\n//      &#39;e&#39;: LowercaseLetter\n//      &#39;d&#39;: LowercaseLetter\n//      &#39; &#39;: SpaceSeparator\n//      &#39;r&#39;: LowercaseLetter\n//      &#39;o&#39;: LowercaseLetter\n//      &#39;a&#39;: LowercaseLetter\n//      &#39;d&#39;: LowercaseLetter\n//      &#39;.&#39;: OtherPunctuation\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Class#6\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      &#39; Define a string with a variety of character categories.\n      Dim s As String = &quot;The car drove down the narrow, secluded road.&quot;\n      &#39; Determine the category of each character.\n      For Each ch In s\n         Console.WriteLine(&quot;&#39;{0}&#39;: {1}&quot;, ch, Char.GetUnicodeCategory(ch)) \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;T&#39;: UppercaseLetter\n&#39;       &#39;h&#39;: LowercaseLetter\n&#39;       &#39;e&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;r&#39;: LowercaseLetter\n&#39;       &#39;e&#39;: LowercaseLetter\n&#39;       &#39;d&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;c&#39;: LowercaseLetter\n&#39;       &#39;a&#39;: LowercaseLetter\n&#39;       &#39;r&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;d&#39;: LowercaseLetter\n&#39;       &#39;r&#39;: LowercaseLetter\n&#39;       &#39;o&#39;: LowercaseLetter\n&#39;       &#39;v&#39;: LowercaseLetter\n&#39;       &#39;e&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;d&#39;: LowercaseLetter\n&#39;       &#39;o&#39;: LowercaseLetter\n&#39;       &#39;w&#39;: LowercaseLetter\n&#39;       &#39;n&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;t&#39;: LowercaseLetter\n&#39;       &#39;h&#39;: LowercaseLetter\n&#39;       &#39;e&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;l&#39;: LowercaseLetter\n&#39;       &#39;o&#39;: LowercaseLetter\n&#39;       &#39;n&#39;: LowercaseLetter\n&#39;       &#39;g&#39;: LowercaseLetter\n&#39;       &#39;,&#39;: OtherPunctuation\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;n&#39;: LowercaseLetter\n&#39;       &#39;a&#39;: LowercaseLetter\n&#39;       &#39;r&#39;: LowercaseLetter\n&#39;       &#39;r&#39;: LowercaseLetter\n&#39;       &#39;o&#39;: LowercaseLetter\n&#39;       &#39;w&#39;: LowercaseLetter\n&#39;       &#39;,&#39;: OtherPunctuation\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;s&#39;: LowercaseLetter\n&#39;       &#39;e&#39;: LowercaseLetter\n&#39;       &#39;c&#39;: LowercaseLetter\n&#39;       &#39;l&#39;: LowercaseLetter\n&#39;       &#39;u&#39;: LowercaseLetter\n&#39;       &#39;d&#39;: LowercaseLetter\n&#39;       &#39;e&#39;: LowercaseLetter\n&#39;       &#39;d&#39;: LowercaseLetter\n&#39;       &#39; &#39;: SpaceSeparator\n&#39;       &#39;r&#39;: LowercaseLetter\n&#39;       &#39;o&#39;: LowercaseLetter\n&#39;       &#39;a&#39;: LowercaseLetter\n&#39;       &#39;d&#39;: LowercaseLetter\n&#39;       &#39;.&#39;: OtherPunctuation\n</code></pre><p> Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <a class=\"xref\" href=\"system.char#System_Char_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a> method depends on Unicode categories reported by the <a class=\"xref\" href=\"system.globalization.charunicodeinfo\" data-linktype=\"relative-path\">CharUnicodeInfo</a> class. Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v462-md.md&quot; -->.NET Framework 4.6.2<!--END INCLUDE -->, Unicode characters are classified based on <a href=\"http://www.unicode.org/versions/Unicode8.0.0/\" data-linktype=\"external\">The Unix Standard, Version 8.0.0</a>. In versions of the .NET Framework from the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> to  the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v461-md.md&quot; -->.NET Framework 4.6.1<!--END INCLUDE -->, they are classified based on <a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unix Standard, Version 6.3.0</a>.  </p>\n<p><a name=\"Elements\"></a>   </p>\n<h2 id=\"characters-and-text-elements\">Characters and text elements</h2>\n<p> Because a single character can be represented by multiple Char objects, it is not always meaningful to work with individual Char objects. For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units. Because it erroneously equates Char objects with characters, it inaccurately reports that the resulting string has 20 characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.Class#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string result = String.Empty;\n      for (int ctr = 0x10107; ctr &lt;= 0x10110; ctr++)  // Range of Aegean numbers.\n         result += Char.ConvertFromUtf32(ctr);\n\n      Console.WriteLine(&quot;The string contains {0} characters.&quot;, result.Length); \n   }\n}\n// The example displays the following output:\n//     The string contains 20 characters.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Class#3\">Module Example\n   Public Sub Main()\n      Dim result As String = String.Empty\n      For ctr As Integer = &amp;h10107 To &amp;h10110     &#39; Range of Aegean numbers.\n         result += Char.ConvertFromUtf32(ctr)\n      Next         \n      Console.WriteLine(&quot;The string contains {0} characters.&quot;, result.Length) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     The string contains 20 characters.\n</code></pre><p> You can do the following to avoid the assumption that a Char object represents a single character.  </p>\n<ul>\n<li><p>You can work with a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.  </p>\n</li>\n<li><p>You can use the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> class to work with text elements instead of individual Char objects. The following example uses the <a class=\"xref\" href=\"system.globalization.stringinfo\" data-linktype=\"relative-path\">StringInfo</a> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine. Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Char.Class#4\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim result As String = String.Empty\n      For ctr As Integer = &amp;h10107 To &amp;h10110     &#39; Range of Aegean numbers.\n         result += Char.ConvertFromUtf32(ctr)\n      Next         \n      Dim si As New StringInfo(result)\n      Console.WriteLine(&quot;The string contains {0} characters.&quot;, si.LengthInTextElements) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The string contains 10 characters.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.Class#4\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string result = String.Empty;\n      for (int ctr = 0x10107; ctr &lt;= 0x10110; ctr++)  // Range of Aegean numbers.\n         result += Char.ConvertFromUtf32(ctr);\n\n      StringInfo si = new StringInfo(result);\n      Console.WriteLine(&quot;The string contains {0} characters.&quot;, \n                        si.LengthInTextElements); \n   }\n}\n// The example displays the following output:\n//       The string contains 10 characters.\n</code></pre></li>\n<li><p>If a string contains a base character that has one or more combining characters, you can call the <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> method to convert the substring to a single UTF-16 encoded code unit. The following example calls the <a class=\"xref\" href=\"system.string#System_String_Normalize_\" data-linktype=\"relative-path\">Normalize</a> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.Class#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string combining = &quot;\\u0061\\u0308&quot;;\n      ShowString(combining);\n      \n      string normalized = combining.Normalize();\n      ShowString(normalized);\n   }\n\n   private static void ShowString(string s)\n   {\n      Console.Write(&quot;Length of string: {0} (&quot;, s.Length);\n      for (int ctr = 0; ctr &lt; s.Length; ctr++) {\n         Console.Write(&quot;U+{0:X4}&quot;, Convert.ToUInt16(s[ctr]));\n         if (ctr != s.Length - 1) Console.Write(&quot; &quot;);\n      } \n      Console.WriteLine(&quot;)\\n&quot;);\n   }\n}\n// The example displays the following output:\n//       Length of string: 2 (U+0061 U+0308)\n//       \n//       Length of string: 1 (U+00E4)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Class#5\">Module Example\n   Public Sub Main()\n      Dim combining As String = ChrW(&amp;h0061) + ChrW(&amp;h0308)\n      ShowString(combining)\n      \n      Dim normalized As String = combining.Normalize()\n      ShowString(normalized)\n   End Sub\n   \n   Private Sub ShowString(s As String)\n      Console.Write(&quot;Length of string: {0} (&quot;, s.Length)\n      For ctr As Integer = 0 To s.Length - 1\n         Console.Write(&quot;U+{0:X4}&quot;, Convert.ToUInt16(s(ctr)))\n         If ctr &lt;&gt; s.Length - 1 Then Console.Write(&quot; &quot;)\n      Next \n      Console.WriteLine(&quot;)&quot;)\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Length of string: 2 (U+0061 U+0308)\n&#39;       \n&#39;       Length of string: 1 (U+00E4)\n</code></pre></li>\n</ul>\n<p><a name=\"Operations\"></a>   </p>\n<h2 id=\"common-operations\">Common operations</h2>\n<p> The Char structure provides methods to compare Char objects, convert the value of the current Char object to an object of another type, and determine the Unicode category of a Char object:  </p>\n<table>\n<thead>\n<tr>\n<th>To do this</th>\n<th>Use these <code>System.Char</code> methods</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Compare Char objects</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> and <a class=\"xref\" href=\"system.char#System_Char_Equals_\" data-linktype=\"relative-path\">Equals</a></td>\n</tr>\n<tr>\n<td>Convert a code point to a string</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a></td>\n</tr>\n<tr>\n<td>Convert a Char object or a surrogate pair of Char objects to a code point</td>\n<td>For a single character: <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToInt32(Char)</a><br><br> For a surrogate pair or a character in a string: <a class=\"xref\" href=\"system.char#System_Char_ConvertToUtf32_\" data-linktype=\"relative-path\">ConvertToUtf32</a></td>\n</tr>\n<tr>\n<td>Get the Unicode category of a character</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a></td>\n</tr>\n<tr>\n<td>Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_IsControl_\" data-linktype=\"relative-path\">IsControl</a>, <a class=\"xref\" href=\"system.char#System_Char_IsDigit_\" data-linktype=\"relative-path\">IsDigit</a>, <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_\" data-linktype=\"relative-path\">IsHighSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLetter_\" data-linktype=\"relative-path\">IsLetter</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLetterOrDigit_\" data-linktype=\"relative-path\">IsLetterOrDigit</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLower_\" data-linktype=\"relative-path\">IsLower</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_\" data-linktype=\"relative-path\">IsLowSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsNumber_\" data-linktype=\"relative-path\">IsNumber</a>, <a class=\"xref\" href=\"system.char#System_Char_IsPunctuation_\" data-linktype=\"relative-path\">IsPunctuation</a>, <a class=\"xref\" href=\"system.char#System_Char_IsSeparator_\" data-linktype=\"relative-path\">IsSeparator</a>, <a class=\"xref\" href=\"system.char#System_Char_IsSurrogate_\" data-linktype=\"relative-path\">IsSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_\" data-linktype=\"relative-path\">IsSurrogatePair</a>, <a class=\"xref\" href=\"system.char#System_Char_IsSymbol_\" data-linktype=\"relative-path\">IsSymbol</a>, <a class=\"xref\" href=\"system.char#System_Char_IsUpper_\" data-linktype=\"relative-path\">IsUpper</a>, and <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a></td>\n</tr>\n<tr>\n<td>Convert a Char object that represents a number to a numeric value type</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_GetNumericValue_\" data-linktype=\"relative-path\">GetNumericValue</a></td>\n</tr>\n<tr>\n<td>Convert a character in a string into a Char object</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_Parse_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"system.char#System_Char_TryParse_\" data-linktype=\"relative-path\">TryParse</a></td>\n</tr>\n<tr>\n<td>Convert a Char object to a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_ToString_\" data-linktype=\"relative-path\">ToString</a></td>\n</tr>\n<tr>\n<td>Change the case of a Char object</td>\n<td><a class=\"xref\" href=\"system.char#System_Char_ToLower_\" data-linktype=\"relative-path\">ToLower</a>, <a class=\"xref\" href=\"system.char#System_Char_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a>, <a class=\"xref\" href=\"system.char#System_Char_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a>, and <a class=\"xref\" href=\"system.char#System_Char_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a></td>\n</tr>\n</tbody>\n</table>\n<p><a name=\"Interop\"></a>   </p>\n<h2 id=\"char-values-and-interop\">Char values and interop</h2>\n<p> When a managed Char type, which is represented as a Unicode UTF-8 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI. You can apply the <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">DllImportAttribute</a> attribute to platform invoke declarations and the <a class=\"xref\" href=\"system.runtime.interopservices.structlayoutattribute\" data-linktype=\"relative-path\">StructLayoutAttribute</a> attribute to a COM interop declaration to control which character set a marshaled Char type uses.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_MaxValue\" data-linktype=\"self-bookmark\">MaxValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the largest possible value of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_MinValue\" data-linktype=\"self-bookmark\">MinValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the smallest possible value of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_CompareTo_System_Char_\" data-linktype=\"self-bookmark\">CompareTo(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ConvertFromUtf32_System_Int32_\" data-linktype=\"self-bookmark\">ConvertFromUtf32(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Unicode code point into a UTF-16 encoded string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ConvertToUtf32_System_Char_System_Char_\" data-linktype=\"self-bookmark\">ConvertToUtf32(Char,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ConvertToUtf32_System_String_System_Int32_\" data-linktype=\"self-bookmark\">ConvertToUtf32(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_Equals_System_Char_\" data-linktype=\"self-bookmark\">Equals(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_GetNumericValue_System_Char_\" data-linktype=\"self-bookmark\">GetNumericValue(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified numeric Unicode character to a double-precision floating point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_GetNumericValue_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetNumericValue(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_GetUnicodeCategory_System_Char_\" data-linktype=\"self-bookmark\">GetUnicodeCategory(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Categorizes a specified Unicode character into a group identified by one of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_GetUnicodeCategory_System_String_System_Int32_\" data-linktype=\"self-bookmark\">GetUnicodeCategory(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Categorizes the character at the specified position in a specified string into a group identified by one of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsControl_System_Char_\" data-linktype=\"self-bookmark\">IsControl(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a control character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsControl_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsControl(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a control character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsDigit_System_Char_\" data-linktype=\"self-bookmark\">IsDigit(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a decimal digit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsDigit_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsDigit(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsHighSurrogate_System_Char_\" data-linktype=\"self-bookmark\">IsHighSurrogate(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object is a high surrogate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsHighSurrogate_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsHighSurrogate(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at the specified position in a string is a high surrogate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLetter_System_Char_\" data-linktype=\"self-bookmark\">IsLetter(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a Unicode letter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLetter_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsLetter(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLetterOrDigit_System_Char_\" data-linktype=\"self-bookmark\">IsLetterOrDigit(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLetterOrDigit_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsLetterOrDigit(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLower_System_Char_\" data-linktype=\"self-bookmark\">IsLower(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a lowercase letter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLower_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsLower(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLowSurrogate_System_Char_\" data-linktype=\"self-bookmark\">IsLowSurrogate(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object is a low surrogate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsLowSurrogate_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsLowSurrogate(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at the specified position in a string is a low surrogate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsNumber_System_Char_\" data-linktype=\"self-bookmark\">IsNumber(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsNumber_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsNumber(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsPunctuation_System_Char_\" data-linktype=\"self-bookmark\">IsPunctuation(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a punctuation mark.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsPunctuation_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsPunctuation(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSeparator_System_Char_\" data-linktype=\"self-bookmark\">IsSeparator(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a separator character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSeparator_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsSeparator(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSurrogate_System_Char_\" data-linktype=\"self-bookmark\">IsSurrogate(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified character has a surrogate code unit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSurrogate_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsSurrogate(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSurrogatePair_System_Char_System_Char_\" data-linktype=\"self-bookmark\">IsSurrogatePair(Char,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the two specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects form a surrogate pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSurrogatePair_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsSurrogatePair(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two adjacent <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects at a specified position in a string form a surrogate pair.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSymbol_System_Char_\" data-linktype=\"self-bookmark\">IsSymbol(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as a symbol character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsSymbol_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsSymbol(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsUpper_System_Char_\" data-linktype=\"self-bookmark\">IsUpper(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as an uppercase letter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsUpper_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsUpper(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsWhiteSpace_System_Char_\" data-linktype=\"self-bookmark\">IsWhiteSpace(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified Unicode character is categorized as white space.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_IsWhiteSpace_System_String_System_Int32_\" data-linktype=\"self-bookmark\">IsWhiteSpace(String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as white space.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified string to its equivalent Unicode character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToLower_System_Char_\" data-linktype=\"self-bookmark\">ToLower(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a Unicode character to its lowercase equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToLower_System_Char_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">ToLower(Char,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToLowerInvariant_System_Char_\" data-linktype=\"self-bookmark\">ToLowerInvariant(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToString_System_Char_\" data-linktype=\"self-bookmark\">ToString(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified Unicode character to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToUpper_System_Char_\" data-linktype=\"self-bookmark\">ToUpper(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a Unicode character to its uppercase equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToUpper_System_Char_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">ToUpper(Char,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_ToUpperInvariant_System_Char_\" data-linktype=\"self-bookmark\">ToUpperInvariant(Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_TryParse_System_String_System_Char__\" data-linktype=\"self-bookmark\">TryParse(String,Char)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Char_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Char_MaxValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the largest possible value of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const char MaxValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is hexadecimal 0xFFFF.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_MinValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the smallest possible value of a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const char MinValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is hexadecimal 0x00.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Char_CompareTo_System_Char_\">\r\n    \r\n            <a id=\"System_Char_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the position of this instance in the sort order in relation to the <code>value</code> parameter.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance has the same position in the sort order as <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>value</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.char#System_Char_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> The comparison performed by this method is based on the encoded values of this instance and <code>value</code>, not their lexicographical characteristics.  </p>\n<p> If the <a class=\"xref\" href=\"system.char#System_Char_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and the parameter type is <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> object, then generates a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method that compares the values of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance and the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> parameter representation.  </p>\n<p> Typically, implicit widening conversions are performed on numeric types. Consult your programming language&#39;s documentation to determine if its compiler performs widening conversions. If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <a class=\"xref\" href=\"system.char#System_Char_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> overload that takes an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates generic and non-generic versions of the <code>CompareTo</code> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Char_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare this instance to, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the position of this instance in the sort order in relation to the <code>value</code> parameter.  </p>\n <table><thead><tr><th> Return Value<br>\n </th><th> Description<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance has the same position in the sort order as <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The CompareTo method implements the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.  </p>\n<p> The <code>value</code> parameter must be <code>null</code> or an instance of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>; otherwise, an exception is thrown.  </p>\n<p> The comparison performed by this method is based on the encoded values of this instance and <code>value</code>, not necessarily their lexicographical characteristics. Any instance of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, regardless of its value, is considered greater than <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates CompareTo.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.CompareTo#19\">using namespace System;\nint main()\n{\n   char chA = &#39;A&#39;;\n   char chB = &#39;B&#39;;\n   Console::WriteLine( chA.CompareTo( &#39;A&#39; ) ); // Output: &quot;0&quot; (meaning they&#39;re equal)\n   Console::WriteLine( &#39;b&#39;.CompareTo( chB ) ); // Output: &quot;32&quot; (meaning &#39;b&#39; is greater than &#39;B&#39; by 32)\n   Console::WriteLine( chA.CompareTo( chB ) ); // Output: &quot;-1&quot; (meaning &#39;A&#39; is less than &#39;B&#39; by 1)\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.CompareTo#19\">Imports System\n\nModule CompareToSample\n\n    Sub Main()\n\n        Dim chA As Char\n        chA = &quot;A&quot;c\n        Dim chB As Char\n        chB = &quot;B&quot;c\n\n        Console.WriteLine(chA.CompareTo(&quot;A&quot;c))  &#39; Output: &quot;0&quot; (meaning they&#39;re equal)\n        Console.WriteLine(&quot;b&quot;c.CompareTo(chB))  &#39; Output: &quot;32&quot; (meaning &#39;b&#39; is 32 greater than &#39;B&#39;)\n\tConsole.WriteLine(chA.CompareTo(chB))\t&#39; Output: &quot;-1&quot; (meaning &#39;A&#39; is less than &#39;B&#39; by 1)\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.CompareTo#19\">using System;\n\npublic class CompareToSample {\n\tpublic static void Main() {\n\t\tchar chA = &#39;A&#39;;\n\t\tchar chB = &#39;B&#39;;\n\n\t\tConsole.WriteLine(chA.CompareTo(&#39;A&#39;));\t// Output: &quot;0&quot; (meaning they&#39;re equal)\n\t\tConsole.WriteLine(&#39;b&#39;.CompareTo(chB));\t// Output: &quot;32&quot; (meaning &#39;b&#39; is greater than &#39;B&#39; by 32)\n\t\tConsole.WriteLine(chA.CompareTo(chB));\t// Output: &quot;-1&quot; (meaning &#39;A&#39; is less than &#39;B&#39; by 1)\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ConvertFromUtf32_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_ConvertFromUtf32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertFromUtf32(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Unicode code point into a UTF-16 encoded string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ConvertFromUtf32 (int utf32);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>utf32</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 21-bit Unicode code point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string consisting of one <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object or a surrogate pair of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects equivalent to the code point specified by the <code>utf32</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>utf32</code> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_System_Char_\" data-linktype=\"relative-path\">IsLowSurrogate(Char)</a> and <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_System_Char_\" data-linktype=\"relative-path\">IsHighSurrogate(Char)</a>.  </p>\n<p> A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair. However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion. For that reason, use the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">System.Text.UTF32Encoding</a> class to convert bulk UTF-32 data into bulk UTF-16 data.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_ConvertToUtf32_\" data-linktype=\"relative-path\">ConvertToUtf32</a> and ConvertFromUtf32 methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"char.cvtutf32#1\">// This example demonstrates the Char.ConvertFromUtf32() method\n//                           and Char.ConvertToUtf32() overloads.\nusing namespace System;\nvoid Show( String^ s )\n{\n//   Console::Write( &quot;0x{0:X}, 0x{1:X}&quot;, (int)s-&gt;get_Chars( 0 ), (int)s-&gt;get_Chars( 1 ) );\n   Console::Write( &quot;0x{0:X}, 0x{1:X}&quot;, (int)s[ 0 ], (int)s[ 1 ] );\n}\n\nint main()\n{\n   int music = 0x1D161; //U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n\n   String^ s1;\n   String^ comment1a = &quot;Create a UTF-16 encoded string from a code point.&quot;;\n   String^ comment1b = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;;\n   String^ comment1c = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;;\n   \n   // -------------------------------------------------------------------\n   //  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n   //  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n   Console::WriteLine( comment1a );\n   s1 = Char::ConvertFromUtf32( music );\n   Console::Write( &quot;    1a) 0x{0:X} =&gt; &quot;, music );\n   Show( s1 );\n   Console::WriteLine();\n   \n   //  Convert the surrogate pair in the string at index position \n   //  zero to a code point.\n   Console::WriteLine( comment1b );\n   music = Char::ConvertToUtf32( s1, 0 );\n   Console::Write( &quot;    1b) &quot; );\n   Show( s1 );\n   Console::WriteLine( &quot; =&gt; 0x{0:X}&quot;, music );\n   \n   //  Convert the high and low characters in the surrogate pair into a code point.\n   Console::WriteLine( comment1c );\n   music = Char::ConvertToUtf32( s1[ 0 ], s1[ 1 ] );\n   Console::Write( &quot;    1c) &quot; );\n   Show( s1 );\n   Console::WriteLine( &quot; =&gt; 0x{0:X}&quot;, music );\n}\n\n/*\nThis example produces the following results:\n\nCreate a UTF-16 encoded string from a code point.\n    1a) 0x1D161 =&gt; 0xD834, 0xDD61\nCreate a code point from a surrogate pair at a certain position in a string.\n    1b) 0xD834, 0xDD61 =&gt; 0x1D161\nCreate a code point from a high surrogate and a low surrogate code point.\n    1c) 0xD834, 0xDD61 =&gt; 0x1D161\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"char.cvtutf32#1\">// This example demonstrates the Char.ConvertFromUtf32() method\n//                           and Char.ConvertToUtf32() overloads.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int letterA = 0x0041;  //U+00041 = LATIN CAPITAL LETTER A\n    int music   = 0x1D161; //U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n    string s1;\n    string comment   = &quot;Create a UTF-16 encoded string from a code point.&quot;;\n    string comment1b = &quot;Create a code point from a UTF-16 encoded string.&quot;;\n    string comment2b = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;;\n    string comment2c = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;;\n\n//  Convert code point U+0041 to UTF-16. The UTF-16 equivalent of \n//  U+0041 is a Char with hexadecimal value 0041.\n\n    Console.WriteLine(comment);\n    s1 = Char.ConvertFromUtf32(letterA);\n    Console.Write(&quot;    1a) 0x{0:X} =&gt; &quot;, letterA);\n    Show(s1);\n    Console.WriteLine();\n\n//  Convert the lone UTF-16 character to a code point.\n\n    Console.WriteLine(comment1b);\n    letterA = Char.ConvertToUtf32(s1, 0);\n    Console.Write(&quot;    1b) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, letterA);\n    Console.WriteLine();\n\n// -------------------------------------------------------------------\n\n//  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n//  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n\n    Console.WriteLine(comment);\n    s1 = Char.ConvertFromUtf32(music);\n    Console.Write(&quot;    2a) 0x{0:X} =&gt; &quot;, music);\n    Show(s1);\n    Console.WriteLine();\n\n//  Convert the surrogate pair in the string at index position \n//  zero to a code point.\n\n    Console.WriteLine(comment2b);\n    music = Char.ConvertToUtf32(s1, 0);\n    Console.Write(&quot;    2b) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music);\n\n//  Convert the high and low characters in the surrogate pair into a code point.\n\n    Console.WriteLine(comment2c);\n    music = Char.ConvertToUtf32(s1[0], s1[1]);\n    Console.Write(&quot;    2c) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music);\n    }\n\n    private static void Show(string s)\n    {\n    for (int x = 0; x &lt; s.Length; x++)\n        {\n        Console.Write(&quot;0x{0:X}{1}&quot;, \n                       (int)s[x], \n                       ((x == s.Length-1)? String.Empty : &quot;, &quot;));\n        }\n    }\n}\n/*\nThis example produces the following results:\n\nCreate a UTF-16 encoded string from a code point.\n    1a) 0x41 =&gt; 0x41\nCreate a code point from a UTF-16 encoded string.\n    1b) 0x41 =&gt; 0x41\n\nCreate a UTF-16 encoded string from a code point.\n    2a) 0x1D161 =&gt; 0xD834, 0xDD61\nCreate a code point from a surrogate pair at a certain position in a string.\n    2b) 0xD834, 0xDD61 =&gt; 0x1D161\nCreate a code point from a high surrogate and a low surrogate code point.\n    2c) 0xD834, 0xDD61 =&gt; 0x1D161\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.cvtutf32#1\">Class Sample\n   Public Shared Sub Main()\n      Dim letterA As Integer = &amp;H41    &#39;U+00041 = LATIN CAPITAL LETTER A\n      Dim music As Integer   = &amp;H1D161 &#39;U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n      Dim s1 As String\n      Dim comment   As String = &quot;Create a UTF-16 encoded string from a code point.&quot;\n      Dim comment1b As String = &quot;Create a code point from a UTF-16 encoded string.&quot;\n      Dim comment2b As String = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;\n      Dim comment2c As String = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;\n      \n      &#39;  Convert code point U+0041 to UTF-16. The UTF-16 equivalent of \n      &#39;  U+0041 is a Char with hexadecimal value 0041.\n\n      Console.WriteLine(comment)\n      s1 = [Char].ConvertFromUtf32(letterA)\n      Console.Write(&quot;    1a) 0x{0:X} =&gt; &quot;, letterA)\n      Show(s1)\n      Console.WriteLine()\n      \n      &#39;  Convert the lone UTF-16 character to a code point.\n\n      Console.WriteLine(comment1b)\n      letterA = [Char].ConvertToUtf32(s1, 0)\n      Console.Write(&quot;    1b) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, letterA)\n      Console.WriteLine()\n      \n      &#39; -------------------------------------------------------------------\n\n      &#39;  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n      &#39;  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n\n      Console.WriteLine(comment)\n      s1 = [Char].ConvertFromUtf32(music)\n      Console.Write(&quot;    2a) 0x{0:X} =&gt; &quot;, music)\n      Show(s1)\n      Console.WriteLine()\n      \n      &#39;  Convert the surrogate pair in the string at index position \n      &#39;  zero to a code point.\n\n      Console.WriteLine(comment2b)\n      music = [Char].ConvertToUtf32(s1, 0)\n      Console.Write(&quot;    2b) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music)\n      \n      &#39;  Convert the high and low characters in the surrogate pair into a code point.\n\n      Console.WriteLine(comment2c)\n      music = [Char].ConvertToUtf32(s1.Chars(0), s1.Chars(1))\n      Console.Write(&quot;    2c) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music)\n   End Sub\n   \n   Private Shared Sub Show(s As String)\n      Dim x As Integer\n      If s.Length = 0 Then Exit Sub\n      For x = 0 To s.Length - 1\n         Console.Write(&quot;0x{0:X}{1}&quot;, _\n                        AscW(s.Chars(x)), _\n                        IIf(x = s.Length - 1, [String].Empty, &quot;, &quot;))\n      Next \n   End Sub \nEnd Class \n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Create a UTF-16 encoded string from a code point.\n&#39;    1a) 0x41 =&gt; 0x41\n&#39;Create a code point from a UTF-16 encoded string.\n&#39;    1b) 0x41 =&gt; 0x41\n&#39;\n&#39;Create a UTF-16 encoded string from a code point.\n&#39;    2a) 0x1D161 =&gt; 0xD834, 0xDD61\n&#39;Create a code point from a surrogate pair at a certain position in a string.\n&#39;    2b) 0xD834, 0xDD61 =&gt; 0x1D161\n&#39;Create a code point from a high surrogate and a low surrogate code point.\n&#39;    2c) 0xD834, 0xDD61 =&gt; 0x1D161\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ConvertToUtf32_System_Char_System_Char_\">\r\n    \r\n            <a id=\"System_Char_ConvertToUtf32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertToUtf32(Char,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>highSurrogate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lowSurrogate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The 21-bit Unicode code point represented by the <code>highSurrogate</code> and <code>lowSurrogate</code> parameters.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>highSurrogate</code> is not in the range U+D800 through U+DBFF, or <code>lowSurrogate</code> is not in the range U+DC00 through U+DFFF.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to convert a surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">System.Text.UTF32Encoding</a> class.  </p>\n<p> Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit. However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units. These two <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate. Surrogate pairs are supported only by UTF-16 encoding. This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the ConvertToUtf32 and <a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a> methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"char.cvtutf32#1\">// This example demonstrates the Char.ConvertFromUtf32() method\n//                           and Char.ConvertToUtf32() overloads.\nusing namespace System;\nvoid Show( String^ s )\n{\n//   Console::Write( &quot;0x{0:X}, 0x{1:X}&quot;, (int)s-&gt;get_Chars( 0 ), (int)s-&gt;get_Chars( 1 ) );\n   Console::Write( &quot;0x{0:X}, 0x{1:X}&quot;, (int)s[ 0 ], (int)s[ 1 ] );\n}\n\nint main()\n{\n   int music = 0x1D161; //U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n\n   String^ s1;\n   String^ comment1a = &quot;Create a UTF-16 encoded string from a code point.&quot;;\n   String^ comment1b = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;;\n   String^ comment1c = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;;\n   \n   // -------------------------------------------------------------------\n   //  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n   //  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n   Console::WriteLine( comment1a );\n   s1 = Char::ConvertFromUtf32( music );\n   Console::Write( &quot;    1a) 0x{0:X} =&gt; &quot;, music );\n   Show( s1 );\n   Console::WriteLine();\n   \n   //  Convert the surrogate pair in the string at index position \n   //  zero to a code point.\n   Console::WriteLine( comment1b );\n   music = Char::ConvertToUtf32( s1, 0 );\n   Console::Write( &quot;    1b) &quot; );\n   Show( s1 );\n   Console::WriteLine( &quot; =&gt; 0x{0:X}&quot;, music );\n   \n   //  Convert the high and low characters in the surrogate pair into a code point.\n   Console::WriteLine( comment1c );\n   music = Char::ConvertToUtf32( s1[ 0 ], s1[ 1 ] );\n   Console::Write( &quot;    1c) &quot; );\n   Show( s1 );\n   Console::WriteLine( &quot; =&gt; 0x{0:X}&quot;, music );\n}\n\n/*\nThis example produces the following results:\n\nCreate a UTF-16 encoded string from a code point.\n    1a) 0x1D161 =&gt; 0xD834, 0xDD61\nCreate a code point from a surrogate pair at a certain position in a string.\n    1b) 0xD834, 0xDD61 =&gt; 0x1D161\nCreate a code point from a high surrogate and a low surrogate code point.\n    1c) 0xD834, 0xDD61 =&gt; 0x1D161\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"char.cvtutf32#1\">// This example demonstrates the Char.ConvertFromUtf32() method\n//                           and Char.ConvertToUtf32() overloads.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int letterA = 0x0041;  //U+00041 = LATIN CAPITAL LETTER A\n    int music   = 0x1D161; //U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n    string s1;\n    string comment   = &quot;Create a UTF-16 encoded string from a code point.&quot;;\n    string comment1b = &quot;Create a code point from a UTF-16 encoded string.&quot;;\n    string comment2b = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;;\n    string comment2c = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;;\n\n//  Convert code point U+0041 to UTF-16. The UTF-16 equivalent of \n//  U+0041 is a Char with hexadecimal value 0041.\n\n    Console.WriteLine(comment);\n    s1 = Char.ConvertFromUtf32(letterA);\n    Console.Write(&quot;    1a) 0x{0:X} =&gt; &quot;, letterA);\n    Show(s1);\n    Console.WriteLine();\n\n//  Convert the lone UTF-16 character to a code point.\n\n    Console.WriteLine(comment1b);\n    letterA = Char.ConvertToUtf32(s1, 0);\n    Console.Write(&quot;    1b) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, letterA);\n    Console.WriteLine();\n\n// -------------------------------------------------------------------\n\n//  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n//  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n\n    Console.WriteLine(comment);\n    s1 = Char.ConvertFromUtf32(music);\n    Console.Write(&quot;    2a) 0x{0:X} =&gt; &quot;, music);\n    Show(s1);\n    Console.WriteLine();\n\n//  Convert the surrogate pair in the string at index position \n//  zero to a code point.\n\n    Console.WriteLine(comment2b);\n    music = Char.ConvertToUtf32(s1, 0);\n    Console.Write(&quot;    2b) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music);\n\n//  Convert the high and low characters in the surrogate pair into a code point.\n\n    Console.WriteLine(comment2c);\n    music = Char.ConvertToUtf32(s1[0], s1[1]);\n    Console.Write(&quot;    2c) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music);\n    }\n\n    private static void Show(string s)\n    {\n    for (int x = 0; x &lt; s.Length; x++)\n        {\n        Console.Write(&quot;0x{0:X}{1}&quot;, \n                       (int)s[x], \n                       ((x == s.Length-1)? String.Empty : &quot;, &quot;));\n        }\n    }\n}\n/*\nThis example produces the following results:\n\nCreate a UTF-16 encoded string from a code point.\n    1a) 0x41 =&gt; 0x41\nCreate a code point from a UTF-16 encoded string.\n    1b) 0x41 =&gt; 0x41\n\nCreate a UTF-16 encoded string from a code point.\n    2a) 0x1D161 =&gt; 0xD834, 0xDD61\nCreate a code point from a surrogate pair at a certain position in a string.\n    2b) 0xD834, 0xDD61 =&gt; 0x1D161\nCreate a code point from a high surrogate and a low surrogate code point.\n    2c) 0xD834, 0xDD61 =&gt; 0x1D161\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.cvtutf32#1\">Class Sample\n   Public Shared Sub Main()\n      Dim letterA As Integer = &amp;H41    &#39;U+00041 = LATIN CAPITAL LETTER A\n      Dim music As Integer   = &amp;H1D161 &#39;U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n      Dim s1 As String\n      Dim comment   As String = &quot;Create a UTF-16 encoded string from a code point.&quot;\n      Dim comment1b As String = &quot;Create a code point from a UTF-16 encoded string.&quot;\n      Dim comment2b As String = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;\n      Dim comment2c As String = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;\n      \n      &#39;  Convert code point U+0041 to UTF-16. The UTF-16 equivalent of \n      &#39;  U+0041 is a Char with hexadecimal value 0041.\n\n      Console.WriteLine(comment)\n      s1 = [Char].ConvertFromUtf32(letterA)\n      Console.Write(&quot;    1a) 0x{0:X} =&gt; &quot;, letterA)\n      Show(s1)\n      Console.WriteLine()\n      \n      &#39;  Convert the lone UTF-16 character to a code point.\n\n      Console.WriteLine(comment1b)\n      letterA = [Char].ConvertToUtf32(s1, 0)\n      Console.Write(&quot;    1b) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, letterA)\n      Console.WriteLine()\n      \n      &#39; -------------------------------------------------------------------\n\n      &#39;  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n      &#39;  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n\n      Console.WriteLine(comment)\n      s1 = [Char].ConvertFromUtf32(music)\n      Console.Write(&quot;    2a) 0x{0:X} =&gt; &quot;, music)\n      Show(s1)\n      Console.WriteLine()\n      \n      &#39;  Convert the surrogate pair in the string at index position \n      &#39;  zero to a code point.\n\n      Console.WriteLine(comment2b)\n      music = [Char].ConvertToUtf32(s1, 0)\n      Console.Write(&quot;    2b) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music)\n      \n      &#39;  Convert the high and low characters in the surrogate pair into a code point.\n\n      Console.WriteLine(comment2c)\n      music = [Char].ConvertToUtf32(s1.Chars(0), s1.Chars(1))\n      Console.Write(&quot;    2c) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music)\n   End Sub\n   \n   Private Shared Sub Show(s As String)\n      Dim x As Integer\n      If s.Length = 0 Then Exit Sub\n      For x = 0 To s.Length - 1\n         Console.Write(&quot;0x{0:X}{1}&quot;, _\n                        AscW(s.Chars(x)), _\n                        IIf(x = s.Length - 1, [String].Empty, &quot;, &quot;))\n      Next \n   End Sub \nEnd Class \n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Create a UTF-16 encoded string from a code point.\n&#39;    1a) 0x41 =&gt; 0x41\n&#39;Create a code point from a UTF-16 encoded string.\n&#39;    1b) 0x41 =&gt; 0x41\n&#39;\n&#39;Create a UTF-16 encoded string from a code point.\n&#39;    2a) 0x1D161 =&gt; 0xD834, 0xDD61\n&#39;Create a code point from a surrogate pair at a certain position in a string.\n&#39;    2b) 0xD834, 0xDD61 =&gt; 0x1D161\n&#39;Create a code point from a high surrogate and a low surrogate code point.\n&#39;    2c) 0xD834, 0xDD61 =&gt; 0x1D161\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ConvertToUtf32_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_ConvertToUtf32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConvertToUtf32(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ConvertToUtf32 (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a character or surrogate pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index position of the character or surrogate pair in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <code>s</code> parameter specified by the <code>index</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a position within <code>s</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method to convert a character or surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">System.Text.UTF32Encoding</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_ConvertToUtf32_\" data-linktype=\"relative-path\">ConvertToUtf32</a> and <a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a> methods.  </p>\n<pre><code class=\"lang-cpp\" name=\"char.cvtutf32#1\">// This example demonstrates the Char.ConvertFromUtf32() method\n//                           and Char.ConvertToUtf32() overloads.\nusing namespace System;\nvoid Show( String^ s )\n{\n//   Console::Write( &quot;0x{0:X}, 0x{1:X}&quot;, (int)s-&gt;get_Chars( 0 ), (int)s-&gt;get_Chars( 1 ) );\n   Console::Write( &quot;0x{0:X}, 0x{1:X}&quot;, (int)s[ 0 ], (int)s[ 1 ] );\n}\n\nint main()\n{\n   int music = 0x1D161; //U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n\n   String^ s1;\n   String^ comment1a = &quot;Create a UTF-16 encoded string from a code point.&quot;;\n   String^ comment1b = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;;\n   String^ comment1c = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;;\n   \n   // -------------------------------------------------------------------\n   //  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n   //  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n   Console::WriteLine( comment1a );\n   s1 = Char::ConvertFromUtf32( music );\n   Console::Write( &quot;    1a) 0x{0:X} =&gt; &quot;, music );\n   Show( s1 );\n   Console::WriteLine();\n   \n   //  Convert the surrogate pair in the string at index position \n   //  zero to a code point.\n   Console::WriteLine( comment1b );\n   music = Char::ConvertToUtf32( s1, 0 );\n   Console::Write( &quot;    1b) &quot; );\n   Show( s1 );\n   Console::WriteLine( &quot; =&gt; 0x{0:X}&quot;, music );\n   \n   //  Convert the high and low characters in the surrogate pair into a code point.\n   Console::WriteLine( comment1c );\n   music = Char::ConvertToUtf32( s1[ 0 ], s1[ 1 ] );\n   Console::Write( &quot;    1c) &quot; );\n   Show( s1 );\n   Console::WriteLine( &quot; =&gt; 0x{0:X}&quot;, music );\n}\n\n/*\nThis example produces the following results:\n\nCreate a UTF-16 encoded string from a code point.\n    1a) 0x1D161 =&gt; 0xD834, 0xDD61\nCreate a code point from a surrogate pair at a certain position in a string.\n    1b) 0xD834, 0xDD61 =&gt; 0x1D161\nCreate a code point from a high surrogate and a low surrogate code point.\n    1c) 0xD834, 0xDD61 =&gt; 0x1D161\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"char.cvtutf32#1\">// This example demonstrates the Char.ConvertFromUtf32() method\n//                           and Char.ConvertToUtf32() overloads.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    int letterA = 0x0041;  //U+00041 = LATIN CAPITAL LETTER A\n    int music   = 0x1D161; //U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n    string s1;\n    string comment   = &quot;Create a UTF-16 encoded string from a code point.&quot;;\n    string comment1b = &quot;Create a code point from a UTF-16 encoded string.&quot;;\n    string comment2b = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;;\n    string comment2c = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;;\n\n//  Convert code point U+0041 to UTF-16. The UTF-16 equivalent of \n//  U+0041 is a Char with hexadecimal value 0041.\n\n    Console.WriteLine(comment);\n    s1 = Char.ConvertFromUtf32(letterA);\n    Console.Write(&quot;    1a) 0x{0:X} =&gt; &quot;, letterA);\n    Show(s1);\n    Console.WriteLine();\n\n//  Convert the lone UTF-16 character to a code point.\n\n    Console.WriteLine(comment1b);\n    letterA = Char.ConvertToUtf32(s1, 0);\n    Console.Write(&quot;    1b) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, letterA);\n    Console.WriteLine();\n\n// -------------------------------------------------------------------\n\n//  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n//  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n\n    Console.WriteLine(comment);\n    s1 = Char.ConvertFromUtf32(music);\n    Console.Write(&quot;    2a) 0x{0:X} =&gt; &quot;, music);\n    Show(s1);\n    Console.WriteLine();\n\n//  Convert the surrogate pair in the string at index position \n//  zero to a code point.\n\n    Console.WriteLine(comment2b);\n    music = Char.ConvertToUtf32(s1, 0);\n    Console.Write(&quot;    2b) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music);\n\n//  Convert the high and low characters in the surrogate pair into a code point.\n\n    Console.WriteLine(comment2c);\n    music = Char.ConvertToUtf32(s1[0], s1[1]);\n    Console.Write(&quot;    2c) &quot;);\n    Show(s1);\n    Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music);\n    }\n\n    private static void Show(string s)\n    {\n    for (int x = 0; x &lt; s.Length; x++)\n        {\n        Console.Write(&quot;0x{0:X}{1}&quot;, \n                       (int)s[x], \n                       ((x == s.Length-1)? String.Empty : &quot;, &quot;));\n        }\n    }\n}\n/*\nThis example produces the following results:\n\nCreate a UTF-16 encoded string from a code point.\n    1a) 0x41 =&gt; 0x41\nCreate a code point from a UTF-16 encoded string.\n    1b) 0x41 =&gt; 0x41\n\nCreate a UTF-16 encoded string from a code point.\n    2a) 0x1D161 =&gt; 0xD834, 0xDD61\nCreate a code point from a surrogate pair at a certain position in a string.\n    2b) 0xD834, 0xDD61 =&gt; 0x1D161\nCreate a code point from a high surrogate and a low surrogate code point.\n    2c) 0xD834, 0xDD61 =&gt; 0x1D161\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.cvtutf32#1\">Class Sample\n   Public Shared Sub Main()\n      Dim letterA As Integer = &amp;H41    &#39;U+00041 = LATIN CAPITAL LETTER A\n      Dim music As Integer   = &amp;H1D161 &#39;U+1D161 = MUSICAL SYMBOL SIXTEENTH NOTE\n      Dim s1 As String\n      Dim comment   As String = &quot;Create a UTF-16 encoded string from a code point.&quot;\n      Dim comment1b As String = &quot;Create a code point from a UTF-16 encoded string.&quot;\n      Dim comment2b As String = &quot;Create a code point from a surrogate pair at a certain position in a string.&quot;\n      Dim comment2c As String = &quot;Create a code point from a high surrogate and a low surrogate code point.&quot;\n      \n      &#39;  Convert code point U+0041 to UTF-16. The UTF-16 equivalent of \n      &#39;  U+0041 is a Char with hexadecimal value 0041.\n\n      Console.WriteLine(comment)\n      s1 = [Char].ConvertFromUtf32(letterA)\n      Console.Write(&quot;    1a) 0x{0:X} =&gt; &quot;, letterA)\n      Show(s1)\n      Console.WriteLine()\n      \n      &#39;  Convert the lone UTF-16 character to a code point.\n\n      Console.WriteLine(comment1b)\n      letterA = [Char].ConvertToUtf32(s1, 0)\n      Console.Write(&quot;    1b) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, letterA)\n      Console.WriteLine()\n      \n      &#39; -------------------------------------------------------------------\n\n      &#39;  Convert the code point U+1D161 to UTF-16. The UTF-16 equivalent of \n      &#39;  U+1D161 is a surrogate pair with hexadecimal values D834 and DD61.\n\n      Console.WriteLine(comment)\n      s1 = [Char].ConvertFromUtf32(music)\n      Console.Write(&quot;    2a) 0x{0:X} =&gt; &quot;, music)\n      Show(s1)\n      Console.WriteLine()\n      \n      &#39;  Convert the surrogate pair in the string at index position \n      &#39;  zero to a code point.\n\n      Console.WriteLine(comment2b)\n      music = [Char].ConvertToUtf32(s1, 0)\n      Console.Write(&quot;    2b) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music)\n      \n      &#39;  Convert the high and low characters in the surrogate pair into a code point.\n\n      Console.WriteLine(comment2c)\n      music = [Char].ConvertToUtf32(s1.Chars(0), s1.Chars(1))\n      Console.Write(&quot;    2c) &quot;)\n      Show(s1)\n      Console.WriteLine(&quot; =&gt; 0x{0:X}&quot;, music)\n   End Sub\n   \n   Private Shared Sub Show(s As String)\n      Dim x As Integer\n      If s.Length = 0 Then Exit Sub\n      For x = 0 To s.Length - 1\n         Console.Write(&quot;0x{0:X}{1}&quot;, _\n                        AscW(s.Chars(x)), _\n                        IIf(x = s.Length - 1, [String].Empty, &quot;, &quot;))\n      Next \n   End Sub \nEnd Class \n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Create a UTF-16 encoded string from a code point.\n&#39;    1a) 0x41 =&gt; 0x41\n&#39;Create a code point from a UTF-16 encoded string.\n&#39;    1b) 0x41 =&gt; 0x41\n&#39;\n&#39;Create a UTF-16 encoded string from a code point.\n&#39;    2a) 0x1D161 =&gt; 0xD834, 0xDD61\n&#39;Create a code point from a surrogate pair at a certain position in a string.\n&#39;    2b) 0xD834, 0xDD61 =&gt; 0x1D161\n&#39;Create a code point from a high surrogate and a low surrogate code point.\n&#39;    2c) 0xD834, 0xDD61 =&gt; 0x1D161\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_Equals_System_Char_\">\r\n    \r\n            <a id=\"System_Char_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (char obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>obj</code> parameter equals the value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.char#System_Char_Equals_System_Object_\" data-linktype=\"relative-path\">System.Char.Equals(Object)</a> because it does not need to unbox the <code>obj</code> parameter.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Char_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> is an instance of <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> and equals the value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The comparison performed by this method is based on the encoded values of this instance and <code>obj</code>, not necessarily their lexicographical characteristics.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates Equals.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.Equals#20\">using namespace System;\nint main()\n{\n   char chA = &#39;A&#39;;\n   char chB = &#39;B&#39;;\n   Console::WriteLine( chA.Equals( &#39;A&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( &#39;b&#39;.Equals( chB ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.Equals#20\">using System;\n\npublic class EqualsSample {\n\tpublic static void Main() {\n\t\tchar chA = &#39;A&#39;;\n\t\tchar chB = &#39;B&#39;;\n\n\t\tConsole.WriteLine(chA.Equals(&#39;A&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(&#39;b&#39;.Equals(chB));\t\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Equals#20\">imports System\n\nModule EqualsSample\n\n    Sub Main()\n\n        Dim chA As Char\n        chA = &quot;A&quot;c\n        Dim chB As Char\n        chB = &quot;B&quot;c\n\n        Console.WriteLine(chA.Equals(&quot;A&quot;c))     &#39; Output: &quot;True&quot;\n        Console.WriteLine(&quot;b&quot;c.Equals(chB))     &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_GetHashCode\">\r\n    \r\n            <a id=\"System_Char_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_GetNumericValue_System_Char_\">\r\n    \r\n            <a id=\"System_Char_GetNumericValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNumericValue(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified numeric Unicode character to a double-precision floating point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double GetNumericValue (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The numeric value of <code>c</code> if that character represents a number; otherwise, -1.0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>c</code> parameter must be the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> representation of a numeric value. For example, if <code>c</code> is &quot;5&quot;, the return value is 5. However, if <code>c</code> is &quot;z&quot;, the return value is -1.0.  </p>\n<p> A character has an associated numeric value if and only if it is a member of one of the following <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> categories: <code>DecimalDigitNumber</code>, <code>LetterNumber</code>, or <code>OtherNumber</code>.  </p>\n<p> The GetNumericValue method assumes that <code>c</code> corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the GetNumericValue method returns -1 if it is passed either a high surrogate or a low surrogate of this character.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.GetNumericValue#2\">      int utf32 = 0x10107;       // AEGEAN NUMBER ONE\n      string surrogate = Char.ConvertFromUtf32(utf32);\n      foreach (var ch in surrogate)\n         Console.WriteLine(&quot;U+{0:X4}: {1}    &quot;, Convert.ToUInt16(ch), \n                                                Char.GetNumericValue(ch));\n\n      // The example displays the following output:\n      //       U+D800: -1\n      //       U+DD07: -1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.GetNumericValue#2\">      Dim utf32 As Integer = &amp;h10107       &#39; AEGEAN NUMBER ONE\n      Dim surrogate As String = Char.ConvertFromUtf32(utf32)\n      For Each ch In surrogate\n         Console.WriteLine(&quot;U+{0:X4}: {1}    &quot;, Convert.ToUInt16(ch), \n                                                Char.GetNumericValue(ch))\n      Next\n      &#39; The example displays the following output:\n      &#39;       U+D800: -1\n      &#39;       U+DD07: -1\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates GetNumericValue.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.GetNumericValue#1\">using namespace System;\nint main()\n{\n   String^ str =  &quot;input: 1&quot;;\n   Console::WriteLine( Char::GetNumericValue( &#39;8&#39; ) ); // Output: &quot;8&quot;\n   Console::WriteLine( Char::GetNumericValue( str, 7 ) ); // Output: &quot;1&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.GetNumericValue#1\">using System;\n\npublic class GetNumericValueSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;input: 1&quot;;\n\n\t\tConsole.WriteLine(Char.GetNumericValue(&#39;8&#39;));\t\t// Output: &quot;8&quot;\n\t\tConsole.WriteLine(Char.GetNumericValue(str, 7));\t// Output: &quot;1&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.GetNumericValue#1\">Module GetNumericValueSample\n    Sub Main()\n        Dim str As String\n        str = &quot;input: 1&quot;\n\n        Console.WriteLine(Char.GetNumericValue(&quot;8&quot;c))       &#39; Output: &quot;8&quot;\n        Console.WriteLine(Char.GetNumericValue(str, 7))     &#39; Output: &quot;1&quot;\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_GetNumericValue_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_GetNumericValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetNumericValue(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double GetNumericValue (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The numeric value of the character at position <code>index</code> in <code>s</code> if that character represents a number; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>s</code> parameter must be the string representation of a numeric value. For example, if the character at position <code>index</code> in <code>s</code> is &quot;5&quot;, the return value is 5. However, if the character at position <code>index</code> in <code>s</code> is &quot;z&quot;, the return value is -1.  </p>\n<p> Character positions in a string are indexed starting from zero.  </p>\n<p> A character has an associated numeric value if and only if it is a member of one of the following <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> categories: <code>DecimalDigitNumber</code>, <code>LetterNumber</code>, or <code>OtherNumber</code>.  </p>\n<p> If the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at position <code>index</code> is the first character of a valid surrogate pair, the GetNumericValue method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a> method to instantiate a string that represents each Aegean number. As the output from the example shows, the GetNumericValue method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.GetNumericValue#3\">      // Define a UTF32 value for each character in the \n      // Aegean numbering system.\n      for (int utf32 = 0x10107; utf32 &lt;= 0x10133; utf32++) {\n         string surrogate = Char.ConvertFromUtf32(utf32);\n         for (int ctr = 0; ctr &lt; surrogate.Length; ctr++) \n            Console.Write(&quot;U+{0:X4} at position {1}: {2}     &quot;, \n                              Convert.ToUInt16(surrogate[ctr]), ctr,  \n                              Char.GetNumericValue(surrogate, ctr));\n\n         Console.WriteLine();\n      }    \n      // The example displays the following output:\n      //       U+D800 at position 0: 1     U+DD07 at position 1: -1\n      //       U+D800 at position 0: 2     U+DD08 at position 1: -1\n      //       U+D800 at position 0: 3     U+DD09 at position 1: -1\n      //       U+D800 at position 0: 4     U+DD0A at position 1: -1\n      //       U+D800 at position 0: 5     U+DD0B at position 1: -1\n      //       U+D800 at position 0: 6     U+DD0C at position 1: -1\n      //       U+D800 at position 0: 7     U+DD0D at position 1: -1\n      //       U+D800 at position 0: 8     U+DD0E at position 1: -1\n      //       U+D800 at position 0: 9     U+DD0F at position 1: -1\n      //       U+D800 at position 0: 10     U+DD10 at position 1: -1\n      //       U+D800 at position 0: 20     U+DD11 at position 1: -1\n      //       U+D800 at position 0: 30     U+DD12 at position 1: -1\n      //       U+D800 at position 0: 40     U+DD13 at position 1: -1\n      //       U+D800 at position 0: 50     U+DD14 at position 1: -1\n      //       U+D800 at position 0: 60     U+DD15 at position 1: -1\n      //       U+D800 at position 0: 70     U+DD16 at position 1: -1\n      //       U+D800 at position 0: 80     U+DD17 at position 1: -1\n      //       U+D800 at position 0: 90     U+DD18 at position 1: -1\n      //       U+D800 at position 0: 100     U+DD19 at position 1: -1\n      //       U+D800 at position 0: 200     U+DD1A at position 1: -1\n      //       U+D800 at position 0: 300     U+DD1B at position 1: -1\n      //       U+D800 at position 0: 400     U+DD1C at position 1: -1\n      //       U+D800 at position 0: 500     U+DD1D at position 1: -1\n      //       U+D800 at position 0: 600     U+DD1E at position 1: -1\n      //       U+D800 at position 0: 700     U+DD1F at position 1: -1\n      //       U+D800 at position 0: 800     U+DD20 at position 1: -1\n      //       U+D800 at position 0: 900     U+DD21 at position 1: -1\n      //       U+D800 at position 0: 1000     U+DD22 at position 1: -1\n      //       U+D800 at position 0: 2000     U+DD23 at position 1: -1\n      //       U+D800 at position 0: 3000     U+DD24 at position 1: -1\n      //       U+D800 at position 0: 4000     U+DD25 at position 1: -1\n      //       U+D800 at position 0: 5000     U+DD26 at position 1: -1\n      //       U+D800 at position 0: 6000     U+DD27 at position 1: -1\n      //       U+D800 at position 0: 7000     U+DD28 at position 1: -1\n      //       U+D800 at position 0: 8000     U+DD29 at position 1: -1\n      //       U+D800 at position 0: 9000     U+DD2A at position 1: -1\n      //       U+D800 at position 0: 10000     U+DD2B at position 1: -1\n      //       U+D800 at position 0: 20000     U+DD2C at position 1: -1\n      //       U+D800 at position 0: 30000     U+DD2D at position 1: -1\n      //       U+D800 at position 0: 40000     U+DD2E at position 1: -1\n      //       U+D800 at position 0: 50000     U+DD2F at position 1: -1\n      //       U+D800 at position 0: 60000     U+DD30 at position 1: -1\n      //       U+D800 at position 0: 70000     U+DD31 at position 1: -1\n      //       U+D800 at position 0: 80000     U+DD32 at position 1: -1\n      //       U+D800 at position 0: 90000     U+DD33 at position 1: -1\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.GetNumericValue#3\">      &#39; Define a UTF32 value for each character in the \n      &#39; Aegean numbering system.\n      For utf32 As Integer = &amp;h10107 To &amp;h10133\n         Dim surrogate As String = Char.ConvertFromUtf32(utf32)\n         For ctr As Integer = 0 To surrogate.Length - 1\n            Console.Write(&quot;U+{0:X4} at position {1}: {2}     &quot;, \n                              Convert.ToUInt16(surrogate(ctr)), ctr,  \n                              Char.GetNumericValue(surrogate, ctr))\n         Next\n         Console.WriteLine()\n      Next    \n      &#39; The example displays the following output:\n      &#39;       U+D800 at position 0: 1     U+DD07 at position 1: -1\n      &#39;       U+D800 at position 0: 2     U+DD08 at position 1: -1\n      &#39;       U+D800 at position 0: 3     U+DD09 at position 1: -1\n      &#39;       U+D800 at position 0: 4     U+DD0A at position 1: -1\n      &#39;       U+D800 at position 0: 5     U+DD0B at position 1: -1\n      &#39;       U+D800 at position 0: 6     U+DD0C at position 1: -1\n      &#39;       U+D800 at position 0: 7     U+DD0D at position 1: -1\n      &#39;       U+D800 at position 0: 8     U+DD0E at position 1: -1\n      &#39;       U+D800 at position 0: 9     U+DD0F at position 1: -1\n      &#39;       U+D800 at position 0: 10     U+DD10 at position 1: -1\n      &#39;       U+D800 at position 0: 20     U+DD11 at position 1: -1\n      &#39;       U+D800 at position 0: 30     U+DD12 at position 1: -1\n      &#39;       U+D800 at position 0: 40     U+DD13 at position 1: -1\n      &#39;       U+D800 at position 0: 50     U+DD14 at position 1: -1\n      &#39;       U+D800 at position 0: 60     U+DD15 at position 1: -1\n      &#39;       U+D800 at position 0: 70     U+DD16 at position 1: -1\n      &#39;       U+D800 at position 0: 80     U+DD17 at position 1: -1\n      &#39;       U+D800 at position 0: 90     U+DD18 at position 1: -1\n      &#39;       U+D800 at position 0: 100     U+DD19 at position 1: -1\n      &#39;       U+D800 at position 0: 200     U+DD1A at position 1: -1\n      &#39;       U+D800 at position 0: 300     U+DD1B at position 1: -1\n      &#39;       U+D800 at position 0: 400     U+DD1C at position 1: -1\n      &#39;       U+D800 at position 0: 500     U+DD1D at position 1: -1\n      &#39;       U+D800 at position 0: 600     U+DD1E at position 1: -1\n      &#39;       U+D800 at position 0: 700     U+DD1F at position 1: -1\n      &#39;       U+D800 at position 0: 800     U+DD20 at position 1: -1\n      &#39;       U+D800 at position 0: 900     U+DD21 at position 1: -1\n      &#39;       U+D800 at position 0: 1000     U+DD22 at position 1: -1\n      &#39;       U+D800 at position 0: 2000     U+DD23 at position 1: -1\n      &#39;       U+D800 at position 0: 3000     U+DD24 at position 1: -1\n      &#39;       U+D800 at position 0: 4000     U+DD25 at position 1: -1\n      &#39;       U+D800 at position 0: 5000     U+DD26 at position 1: -1\n      &#39;       U+D800 at position 0: 6000     U+DD27 at position 1: -1\n      &#39;       U+D800 at position 0: 7000     U+DD28 at position 1: -1\n      &#39;       U+D800 at position 0: 8000     U+DD29 at position 1: -1\n      &#39;       U+D800 at position 0: 9000     U+DD2A at position 1: -1\n      &#39;       U+D800 at position 0: 10000     U+DD2B at position 1: -1\n      &#39;       U+D800 at position 0: 20000     U+DD2C at position 1: -1\n      &#39;       U+D800 at position 0: 30000     U+DD2D at position 1: -1\n      &#39;       U+D800 at position 0: 40000     U+DD2E at position 1: -1\n      &#39;       U+D800 at position 0: 50000     U+DD2F at position 1: -1\n      &#39;       U+D800 at position 0: 60000     U+DD30 at position 1: -1\n      &#39;       U+D800 at position 0: 70000     U+DD31 at position 1: -1\n      &#39;       U+D800 at position 0: 80000     U+DD32 at position 1: -1\n      &#39;       U+D800 at position 0: 90000     U+DD33 at position 1: -1\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_GetNumericValue_\" data-linktype=\"relative-path\">GetNumericValue</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.GetNumericValue#1\">using namespace System;\nint main()\n{\n   String^ str =  &quot;input: 1&quot;;\n   Console::WriteLine( Char::GetNumericValue( &#39;8&#39; ) ); // Output: &quot;8&quot;\n   Console::WriteLine( Char::GetNumericValue( str, 7 ) ); // Output: &quot;1&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.GetNumericValue#1\">using System;\n\npublic class GetNumericValueSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;input: 1&quot;;\n\n\t\tConsole.WriteLine(Char.GetNumericValue(&#39;8&#39;));\t\t// Output: &quot;8&quot;\n\t\tConsole.WriteLine(Char.GetNumericValue(str, 7));\t// Output: &quot;1&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.GetNumericValue#1\">Module GetNumericValueSample\n    Sub Main()\n        Dim str As String\n        str = &quot;input: 1&quot;\n\n        Console.WriteLine(Char.GetNumericValue(&quot;8&quot;c))       &#39; Output: &quot;8&quot;\n        Console.WriteLine(Char.GetNumericValue(str, 7))     &#39; Output: &quot;1&quot;\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_GetTypeCode\">\r\n    \r\n            <a id=\"System_Char_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The enumerated constant, <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_GetUnicodeCategory_System_Char_\">\r\n    \r\n            <a id=\"System_Char_GetUnicodeCategory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnicodeCategory(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Categorizes a specified Unicode character into a group identified by one of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to categorize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> value that identifies the group that contains <code>c</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetUnicodeCategorymethod does not always return the same <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> value as the <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CharUnicodeInfo.GetUnicodeCategory(Char)</a> method when it is passed a particular character as a parameter. The <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CharUnicodeInfo.GetUnicodeCategory(Char)</a> method is designed to reflect the current version of the Unicode standard. In contrast, although the GetUnicodeCategory method usually reflects the current version of the Unicode standard, it may return a character&#39;s category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility. As a result, we recommend that you use the <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CharUnicodeInfo.GetUnicodeCategory(Char)</a> method instead of GetUnicodeCategory.  </p>\n<p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v462-md.md&quot; -->.NET Framework 4.6.2<!--END INCLUDE -->, Unicode characters are classified based on <a href=\"http://www.unicode.org/versions/Unicode8.0.0/\" data-linktype=\"external\">The Unix Standard, Version 8.0.0</a>. In versions of the .NET Framework from the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> to  the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v461-md.md&quot; -->.NET Framework 4.6.1<!--END INCLUDE -->, they are classified based on <a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unix Standard, Version 6.3.0</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates GetUnicodeCategory.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.GetUnicodeCategory#1\">using System;\n\npublic class GetUnicodeCategorySample {\n\tpublic static void Main() {\n\t\tchar ch2 = &#39;2&#39;;\n\t\tstring str = &quot;Upper Case&quot;;\n\n\t\tConsole.WriteLine(Char.GetUnicodeCategory(&#39;a&#39;));\t\t// Output: &quot;LowercaseLetter&quot;\n\t\tConsole.WriteLine(Char.GetUnicodeCategory(ch2));\t\t// Output: &quot;DecimalDigitNumber&quot;\n\t\tConsole.WriteLine(Char.GetUnicodeCategory(str, 6));\t\t// Output: &quot;UppercaseLetter&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.GetUnicodeCategory#1\">Imports System\n\nModule GetUnicodeCategorySample\n\n    Sub Main()\n\n        Dim ch2 As Char\n        ch2 = &quot;2&quot;c\n        Dim str As String\n        str = &quot;Upper Case&quot;\n\n        Console.WriteLine(Char.GetUnicodeCategory(&quot;a&quot;c))    &#39; Output: &quot;1&quot; (LowercaseLetter)\n        Console.WriteLine(Char.GetUnicodeCategory(ch2))     &#39; Output: &quot;8&quot; (DecimalDigitNumber)\n        Console.WriteLine(Char.GetUnicodeCategory(str, 6))  &#39; Output: &quot;0&quot; (UppercaseLetter)\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.GetUnicodeCategory#1\">using namespace System;\nint main()\n{\n   char ch2 = &#39;2&#39;;\n   String^ str = &quot;Upper Case&quot;;\n   Console::WriteLine( Char::GetUnicodeCategory( &#39;a&#39; ).ToString() ); // Output: S&quot;LowercaseLetter&quot;\n   Console::WriteLine( Char::GetUnicodeCategory( ch2 ).ToString() ); // Output: S&quot;DecimalDigitNumber&quot;\n   Console::WriteLine( Char::GetUnicodeCategory( str, 6 ).ToString() ); // Output: S&quot;UppercaseLetter&quot;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_GetUnicodeCategory_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_GetUnicodeCategory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetUnicodeCategory(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Categorizes the character at the specified position in a specified string into a group identified by one of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> enumerated constant that identifies the group that contains the character at position <code>index</code> in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> The GetUnicodeCategorymethod does not always return the same <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> value as the <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Globalization.CharUnicodeInfo.GetUnicodeCategory(String,Int32)</a> method when it is passed a particular character as a parameter. The <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Globalization.CharUnicodeInfo.GetUnicodeCategory(String,Int32)</a> method is designed to reflect the current version of the Unicode standard. In contrast, although the GetUnicodeCategory method usually reflects the current version of the Unicode standard, it may return a character&#39;s category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility. As a result, we recommend that you use the <a class=\"xref\" href=\"system.globalization.charunicodeinfo#System_Globalization_CharUnicodeInfo_GetUnicodeCategory_System_Char_\" data-linktype=\"relative-path\">System.Globalization.CharUnicodeInfo.GetUnicodeCategory(Char)</a> method instead of GetUnicodeCategory.  </p>\n<p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v462-md.md&quot; -->.NET Framework 4.6.2<!--END INCLUDE -->, Unicode characters are classified based on <a href=\"http://www.unicode.org/versions/Unicode8.0.0/\" data-linktype=\"external\">The Unix Standard, Version 8.0.0</a>. In versions of the .NET Framework from the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE --> to  the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v461-md.md&quot; -->.NET Framework 4.6.1<!--END INCLUDE -->, they are classified based on <a href=\"http://www.unicode.org/versions/Unicode6.3.0/\" data-linktype=\"external\">The Unix Standard, Version 6.3.0</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <a class=\"xref\" href=\"system.char#System_Char_GetUnicodeCategory_\" data-linktype=\"relative-path\">GetUnicodeCategory</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.GetUnicodeCategory#1\">using System;\n\npublic class GetUnicodeCategorySample {\n\tpublic static void Main() {\n\t\tchar ch2 = &#39;2&#39;;\n\t\tstring str = &quot;Upper Case&quot;;\n\n\t\tConsole.WriteLine(Char.GetUnicodeCategory(&#39;a&#39;));\t\t// Output: &quot;LowercaseLetter&quot;\n\t\tConsole.WriteLine(Char.GetUnicodeCategory(ch2));\t\t// Output: &quot;DecimalDigitNumber&quot;\n\t\tConsole.WriteLine(Char.GetUnicodeCategory(str, 6));\t\t// Output: &quot;UppercaseLetter&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.GetUnicodeCategory#1\">Imports System\n\nModule GetUnicodeCategorySample\n\n    Sub Main()\n\n        Dim ch2 As Char\n        ch2 = &quot;2&quot;c\n        Dim str As String\n        str = &quot;Upper Case&quot;\n\n        Console.WriteLine(Char.GetUnicodeCategory(&quot;a&quot;c))    &#39; Output: &quot;1&quot; (LowercaseLetter)\n        Console.WriteLine(Char.GetUnicodeCategory(ch2))     &#39; Output: &quot;8&quot; (DecimalDigitNumber)\n        Console.WriteLine(Char.GetUnicodeCategory(str, 6))  &#39; Output: &quot;0&quot; (UppercaseLetter)\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.GetUnicodeCategory#1\">using namespace System;\nint main()\n{\n   char ch2 = &#39;2&#39;;\n   String^ str = &quot;Upper Case&quot;;\n   Console::WriteLine( Char::GetUnicodeCategory( &#39;a&#39; ).ToString() ); // Output: S&quot;LowercaseLetter&quot;\n   Console::WriteLine( Char::GetUnicodeCategory( ch2 ).ToString() ); // Output: S&quot;DecimalDigitNumber&quot;\n   Console::WriteLine( Char::GetUnicodeCategory( str, 6 ).ToString() ); // Output: S&quot;UppercaseLetter&quot;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsControl_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsControl(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a control character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsControl (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a control character; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. T The Unicode standard assigns code points from \\U0000 to \\U001F, \\U007F, and from \\U0080 to \\U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists the Unicode code point of each of the control characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsControl#1\">using namespace System;\n\nvoid main()\n{\n   int charsWritten = 0;\n      \n   for (int ctr = 0x00; ctr &lt;= 0xFFFF; ctr++)\n   {\n      wchar_t ch = ctr;\n      if (Char::IsControl(ch))\n      {\n         Console::Write(L&quot;\\U{0:X4}    &quot;, ctr);\n         charsWritten++;\n         if (charsWritten % 6 == 0)\n            Console::WriteLine();\n      }     \n   }  \n}\n// The example displays the following output:\n//       U0000    U0001    U0002    U0003    U0004    U0005\n//       U0006    U0007    U0008    U0009    U000A    U000B\n//       U000C    U000D    U000E    U000F    U0010    U0011\n//       U0012    U0013    U0014    U0015    U0016    U0017\n//       U0018    U0019    U001A    U001B    U001C    U001D\n//       U001E    U001F    U007F    U0080    U0081    U0082\n//       U0083    U0084    U0085    U0086    U0087    U0088\n//       U0089    U008A    U008B    U008C    U008D    U008E\n//       U008F    U0090    U0091    U0092    U0093    U0094\n//       U0095    U0096    U0097    U0098    U0099    U009A\n//       U009B    U009C    U009D    U009E    U009F\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsControl#1\">using System;\n\npublic class ControlChars\n{\n   public static void Main()\n   {\n      int charsWritten = 0;\n      \n      for (int ctr = 0x00; ctr &lt;= 0xFFFF; ctr++)\n      {\n         char ch = Convert.ToChar(ctr);\n         if (char.IsControl(ch))\n         {\n            Console.Write(@&quot;\\U{0:X4}    &quot;, ctr);\n            charsWritten++;\n            if (charsWritten % 6 == 0)\n               Console.WriteLine();\n         }     \n      }  \n   }\n}\n// The example displays the following output to the console:\n//       \\U0000    \\U0001    \\U0002    \\U0003    \\U0004    \\U0005\n//       \\U0006    \\U0007    \\U0008    \\U0009    \\U000A    \\U000B\n//       \\U000C    \\U000D    \\U000E    \\U000F    \\U0010    \\U0011\n//       \\U0012    \\U0013    \\U0014    \\U0015    \\U0016    \\U0017\n//       \\U0018    \\U0019    \\U001A    \\U001B    \\U001C    \\U001D\n//       \\U001E    \\U001F    \\U007F    \\U0080    \\U0081    \\U0082\n//       \\U0083    \\U0084    \\U0085    \\U0086    \\U0087    \\U0088\n//       \\U0089    \\U008A    \\U008B    \\U008C    \\U008D    \\U008E\n//       \\U008F    \\U0090    \\U0091    \\U0092    \\U0093    \\U0094\n//       \\U0095    \\U0096    \\U0097    \\U0098    \\U0099    \\U009A\n//       \\U009B    \\U009C    \\U009D    \\U009E    \\U009F\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsControl#1\">Module ControlChars\n   Public Sub Main()\n      Dim charsWritten As Integer = 0\n\n      For ctr As Integer = &amp;H0 To &amp;HFFFF\n         Dim ch As Char = Convert.ToChar(ctr)\n         \n         If Char.IsControl(ch) Then\n            Console.Write(&quot;\\U{0:X4}    &quot;, ctr)\n            charsWritten += 1 \n            If (charsWritten Mod 6) = 0 Then \n               Console.WriteLine()\n            End If    \n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       \\U0000    \\U0001    \\U0002    \\U0003    \\U0004    \\U0005\n&#39;       \\U0006    \\U0007    \\U0008    \\U0009    \\U000A    \\U000B\n&#39;       \\U000C    \\U000D    \\U000E    \\U000F    \\U0010    \\U0011\n&#39;       \\U0012    \\U0013    \\U0014    \\U0015    \\U0016    \\U0017\n&#39;       \\U0018    \\U0019    \\U001A    \\U001B    \\U001C    \\U001D\n&#39;       \\U001E    \\U001F    \\U007F    \\U0080    \\U0081    \\U0082\n&#39;       \\U0083    \\U0084    \\U0085    \\U0086    \\U0087    \\U0088\n&#39;       \\U0089    \\U008A    \\U008B    \\U008C    \\U008D    \\U008E\n&#39;       \\U008F    \\U0090    \\U0091    \\U0092    \\U0093    \\U0094\n&#39;       \\U0095    \\U0096    \\U0097    \\U0098    \\U0099    \\U009A\n&#39;       \\U009B    \\U009C    \\U009D    \\U009E    \\U009F\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsControl_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsControl_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsControl(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a control character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsControl (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a control character; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. The Unicode standard assigns code points from \\U0000 to \\U001F, \\U007F, and from \\U0080 to \\U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example enumerates the characters in a string and determines whether any are control characters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsControl#2\">using System;\n\npublic class ControlChar\n{\n   public static void Main()\n   {\n      string sentence = &quot;This is a &quot; + Environment.NewLine + &quot;two-line sentence.&quot;;\n      for (int ctr = 0; ctr &lt; sentence.Length; ctr++)\n      {\n         if (Char.IsControl(sentence, ctr))\n           Console.WriteLine(&quot;Control character \\\\U{0} found in position {1}.&quot;, \n             Convert.ToInt32(sentence[ctr]).ToString(&quot;X4&quot;), ctr);\n         \n      }\n   }\n}\n// The example displays the following output to the console:\n//       Control character \\U000D found in position 10.\n//       Control character \\U000A found in position 11.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsControl#2\">using namespace System;\n\nvoid main()\n{\n      String ^ sentence = &quot;This is a &quot; + Environment::NewLine + &quot;two-line sentence.&quot;;\n      for (int ctr = 0; ctr &lt; sentence-&gt;Length; ctr++)\n      {\n         if (Char::IsControl(sentence, ctr))\n           Console::WriteLine(&quot;Control character \\\\U{0} found in position {1}.&quot;, \n                              Convert::ToInt32(sentence[ctr]).ToString(&quot;X4&quot;), ctr);\n      }\n}\n// The example displays the following output:\n//       Control character \\U000D found in position 10.\n//       Control character \\U000A found in position 11.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsControl#2\">Module ControlChar\n   Public Sub Main()\n      Dim sentence As String = &quot;This is a &quot; &amp; vbCrLf &amp; &quot;two-line sentence.&quot;\n      For ctr As Integer = 0 to sentence.Length - 1\n         If Char.IsControl(sentence, ctr) Then\n            Console.WriteLine(&quot;Control character \\U{0} found in position {1}.&quot;, _\n             Convert.ToInt32(sentence.Chars(ctr)).ToString(&quot;X4&quot;), ctr)\n          End If\n       Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       Control character \\U000D found in position 10.\n&#39;       Control character \\U000A found in position 11.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsDigit_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsDigit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDigit(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a decimal digit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDigit (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a decimal digit; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is a radix-10 digit. This contrasts with <a class=\"xref\" href=\"system.char#System_Char_IsNumber_\" data-linktype=\"relative-path\">IsNumber</a>, which determines whether a <code>Char</code> is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  </p>\n<p> Valid digits are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates IsDigit.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsDigit#4\">using System;\n\npublic class IsDigitSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;8&#39;;\n\n\t\tConsole.WriteLine(Char.IsDigit(ch));\t\t\t\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsDigit(&quot;sample string&quot;, 7));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsDigit#4\">using namespace System;\nint main()\n{\n   char ch = &#39;8&#39;;\n   Console::WriteLine( Char::IsDigit( ch ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsDigit(  &quot;sample string&quot;, 7 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsDigit#4\">Imports System\n\nModule IsDigitSample\n\n    Sub Main()\n\n        Dim ch8 As Char\n        ch8 = &quot;8&quot;c\n\n        Console.WriteLine(Char.IsDigit(ch8))                    &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsDigit(&quot;sample string&quot;, 6))     &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsDigit_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsDigit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDigit(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsDigit (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a decimal digit; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is a radix-10 digit. This contrasts with <a class=\"xref\" href=\"system.char#System_Char_IsNumber_\" data-linktype=\"relative-path\">IsNumber</a>, which determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  </p>\n<p> Character positions in a string are indexed starting from zero.  </p>\n<p> Valid digits are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsDigit_\" data-linktype=\"relative-path\">IsDigit</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsDigit#4\">using System;\n\npublic class IsDigitSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;8&#39;;\n\n\t\tConsole.WriteLine(Char.IsDigit(ch));\t\t\t\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsDigit(&quot;sample string&quot;, 7));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsDigit#4\">using namespace System;\nint main()\n{\n   char ch = &#39;8&#39;;\n   Console::WriteLine( Char::IsDigit( ch ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsDigit(  &quot;sample string&quot;, 7 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsDigit#4\">Imports System\n\nModule IsDigitSample\n\n    Sub Main()\n\n        Dim ch8 As Char\n        ch8 = &quot;8&quot;c\n\n        Console.WriteLine(Char.IsDigit(ch8))                    &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsDigit(&quot;sample string&quot;, 6))     &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsHighSurrogate_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsHighSurrogate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHighSurrogate(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object is a high surrogate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsHighSurrogate (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the numeric value of the <code>c</code> parameter ranges from U+D800 through U+DBFF; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the IsHighSurrogate, <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_\" data-linktype=\"relative-path\">IsLowSurrogate</a>, and <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_\" data-linktype=\"relative-path\">IsSurrogatePair</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    char cHigh = &#39;\\uD800&#39;;\n    char cLow  = &#39;\\uDC00&#39;;\n    string s1  = new String(new char[] {&#39;a&#39;, &#39;\\uD800&#39;, &#39;\\uDC00&#39;, &#39;z&#39;});\n    string divider = String.Concat( Environment.NewLine, new String(&#39;-&#39;, 70), \n                                    Environment.NewLine);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh);\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;);\n    Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;);\n    for(int i = 0; i &lt; s1.Length; i++)\n        {\n        Console.WriteLine(&quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[i]);\n        }\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;);\n    Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, Char.IsHighSurrogate(cLow));\n    Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, Char.IsHighSurrogate(cHigh));\n    Console.WriteLine(&quot;A3) s1[0]? - {0}&quot;, Char.IsHighSurrogate(s1, 0));\n    Console.WriteLine(&quot;A4) s1[1]? - {0}&quot;, Char.IsHighSurrogate(s1, 1));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;);\n    Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, Char.IsLowSurrogate(cLow));\n    Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, Char.IsLowSurrogate(cHigh));\n    Console.WriteLine(&quot;B3) s1[0]? - {0}&quot;, Char.IsLowSurrogate(s1, 0));\n    Console.WriteLine(&quot;B4) s1[2]? - {0}&quot;, Char.IsLowSurrogate(s1, 2));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;);\n    Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, Char.IsSurrogatePair(cHigh, cLow));\n    Console.WriteLine(&quot;C2) s1[0] and s1[1]? - {0}&quot;, Char.IsSurrogatePair(s1, 0));\n    Console.WriteLine(&quot;C3) s1[1] and s1[2]? - {0}&quot;, Char.IsSurrogatePair(s1, 1));\n    Console.WriteLine(&quot;C4) s1[2] and s1[3]? - {0}&quot;, Char.IsSurrogatePair(s1, 2));\n    Console.WriteLine(divider);\n    }\n}\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.surrogate#1\">&#39; This example demonstrates the Char.IsLowSurrogate() method\n&#39;                                    IsHighSurrogate() method\n&#39;                                    IsSurrogatePair() method\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cHigh As Char = ChrW(&amp;HD800)\n      Dim cLow  As Char = ChrW(&amp;HDC00)\n      Dim s1 = New [String](New Char() {&quot;a&quot;c, ChrW(&amp;HD800), ChrW(&amp;HDC00), &quot;z&quot;c})\n      Dim divider As String = [String].Concat(Environment.NewLine, _\n                                              New [String](&quot;-&quot;c, 70), _\n                                              Environment.NewLine)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, AscW(cHigh))\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, AscW(cLow))\n      Console.WriteLine()\n      Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;)\n      Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;)\n      Dim i As Integer\n      For i = 0 To s1.Length - 1\n         Console.WriteLine(&quot;s1({0}) = {1:X4} &quot;, i, AscW(s1.Chars(i)))\n      Next i\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;)\n      Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, [Char].IsHighSurrogate(cLow))\n      Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, [Char].IsHighSurrogate(cHigh))\n      Console.WriteLine(&quot;A3) s1(0)? - {0}&quot;, [Char].IsHighSurrogate(s1, 0))\n      Console.WriteLine(&quot;A4) s1(1)? - {0}&quot;, [Char].IsHighSurrogate(s1, 1))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;)\n      Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, [Char].IsLowSurrogate(cLow))\n      Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, [Char].IsLowSurrogate(cHigh))\n      Console.WriteLine(&quot;B3) s1(0)? - {0}&quot;, [Char].IsLowSurrogate(s1, 0))\n      Console.WriteLine(&quot;B4) s1(2)? - {0}&quot;, [Char].IsLowSurrogate(s1, 2))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;)\n      Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, [Char].IsSurrogatePair(cHigh, cLow))\n      Console.WriteLine(&quot;C2) s1(0) and s1(1)? - {0}&quot;, [Char].IsSurrogatePair(s1, 0))\n      Console.WriteLine(&quot;C3) s1(1) and s1(2)? - {0}&quot;, [Char].IsSurrogatePair(s1, 1))\n      Console.WriteLine(&quot;C4) s1(2) and s1(3)? - {0}&quot;, [Char].IsSurrogatePair(s1, 2))\n      Console.WriteLine(divider)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Hexadecimal code point of the character, cHigh: D800\n&#39;Hexadecimal code point of the character, cLow:  DC00\n&#39;\n&#39;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\n&#39;Hexadecimal code points of the characters in string, s1:\n&#39;s1(0) = 0061\n&#39;s1(1) = D800\n&#39;s1(2) = DC00\n&#39;s1(3) = 007A\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a high surrogate?\n&#39;A1) cLow?  - False\n&#39;A2) cHigh? - True\n&#39;A3) s1(0)? - False\n&#39;A4) s1(1)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a low surrogate?\n&#39;B1) cLow?  - True\n&#39;B2) cHigh? - False\n&#39;B3) s1(0)? - False\n&#39;B4) s1(2)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following pairs of characters a surrogate pair?\n&#39;C1) cHigh and cLow?  - True\n&#39;C2) s1(0) and s1(1)? - False\n&#39;C3) s1(1) and s1(2)? - True\n&#39;C4) s1(2) and s1(3)? - False\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing namespace System;\nint main()\n{\n   Char cHigh = L&#39;\\xD800&#39;;\n   Char cLow = L&#39;\\xDC00&#39;;\n   array&lt;Char&gt;^temp0 = {L&#39;a&#39;,L&#39;\\xD800&#39;,L&#39;\\xDC00&#39;,L&#39;z&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ divider = String::Concat( Environment::NewLine, gcnew String( &#39;-&#39;,70 ), Environment::NewLine );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh );\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot; );\n   Console::WriteLine( &quot;Hexadecimal code points of the characters in string, s1: &quot; );\n   for ( int i = 0; i &lt; s1-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[ i ] );\n   }\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a high surrogate?&quot; );\n   Console::WriteLine( &quot;A1) cLow?  - {0}&quot;, Char::IsHighSurrogate( cLow ) );\n   Console::WriteLine( &quot;A2) cHigh? - {0}&quot;, Char::IsHighSurrogate( cHigh ) );\n   Console::WriteLine( &quot;A3) s1[0]? - {0}&quot;, Char::IsHighSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;A4) s1[1]? - {0}&quot;, Char::IsHighSurrogate( s1, 1 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a low surrogate?&quot; );\n   Console::WriteLine( &quot;B1) cLow?  - {0}&quot;, Char::IsLowSurrogate( cLow ) );\n   Console::WriteLine( &quot;B2) cHigh? - {0}&quot;, Char::IsLowSurrogate( cHigh ) );\n   Console::WriteLine( &quot;B3) s1[0]? - {0}&quot;, Char::IsLowSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;B4) s1[2]? - {0}&quot;, Char::IsLowSurrogate( s1, 2 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following pairs of characters a surrogate pair?&quot; );\n   Console::WriteLine( &quot;C1) cHigh and cLow?  - {0}&quot;, Char::IsSurrogatePair( cHigh, cLow ) );\n   Console::WriteLine( &quot;C2) s1[0] and s1[1]? - {0}&quot;, Char::IsSurrogatePair( s1, 0 ) );\n   Console::WriteLine( &quot;C3) s1[1] and s1[2]? - {0}&quot;, Char::IsSurrogatePair( s1, 1 ) );\n   Console::WriteLine( &quot;C4) s1[2] and s1[3]? - {0}&quot;, Char::IsSurrogatePair( s1, 2 ) );\n   Console::WriteLine( divider );\n}\n\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsHighSurrogate_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsHighSurrogate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsHighSurrogate(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at the specified position in a string is a high surrogate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsHighSurrogate (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the numeric value of the specified character in the <code>s</code> parameter ranges from U+D800 through U+DBFF; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a position within <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>index</code> parameter is zero-based.  </p>\n<p> In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_\" data-linktype=\"relative-path\">IsHighSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_\" data-linktype=\"relative-path\">IsLowSurrogate</a>, and <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_\" data-linktype=\"relative-path\">IsSurrogatePair</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    char cHigh = &#39;\\uD800&#39;;\n    char cLow  = &#39;\\uDC00&#39;;\n    string s1  = new String(new char[] {&#39;a&#39;, &#39;\\uD800&#39;, &#39;\\uDC00&#39;, &#39;z&#39;});\n    string divider = String.Concat( Environment.NewLine, new String(&#39;-&#39;, 70), \n                                    Environment.NewLine);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh);\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;);\n    Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;);\n    for(int i = 0; i &lt; s1.Length; i++)\n        {\n        Console.WriteLine(&quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[i]);\n        }\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;);\n    Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, Char.IsHighSurrogate(cLow));\n    Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, Char.IsHighSurrogate(cHigh));\n    Console.WriteLine(&quot;A3) s1[0]? - {0}&quot;, Char.IsHighSurrogate(s1, 0));\n    Console.WriteLine(&quot;A4) s1[1]? - {0}&quot;, Char.IsHighSurrogate(s1, 1));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;);\n    Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, Char.IsLowSurrogate(cLow));\n    Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, Char.IsLowSurrogate(cHigh));\n    Console.WriteLine(&quot;B3) s1[0]? - {0}&quot;, Char.IsLowSurrogate(s1, 0));\n    Console.WriteLine(&quot;B4) s1[2]? - {0}&quot;, Char.IsLowSurrogate(s1, 2));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;);\n    Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, Char.IsSurrogatePair(cHigh, cLow));\n    Console.WriteLine(&quot;C2) s1[0] and s1[1]? - {0}&quot;, Char.IsSurrogatePair(s1, 0));\n    Console.WriteLine(&quot;C3) s1[1] and s1[2]? - {0}&quot;, Char.IsSurrogatePair(s1, 1));\n    Console.WriteLine(&quot;C4) s1[2] and s1[3]? - {0}&quot;, Char.IsSurrogatePair(s1, 2));\n    Console.WriteLine(divider);\n    }\n}\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.surrogate#1\">&#39; This example demonstrates the Char.IsLowSurrogate() method\n&#39;                                    IsHighSurrogate() method\n&#39;                                    IsSurrogatePair() method\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cHigh As Char = ChrW(&amp;HD800)\n      Dim cLow  As Char = ChrW(&amp;HDC00)\n      Dim s1 = New [String](New Char() {&quot;a&quot;c, ChrW(&amp;HD800), ChrW(&amp;HDC00), &quot;z&quot;c})\n      Dim divider As String = [String].Concat(Environment.NewLine, _\n                                              New [String](&quot;-&quot;c, 70), _\n                                              Environment.NewLine)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, AscW(cHigh))\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, AscW(cLow))\n      Console.WriteLine()\n      Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;)\n      Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;)\n      Dim i As Integer\n      For i = 0 To s1.Length - 1\n         Console.WriteLine(&quot;s1({0}) = {1:X4} &quot;, i, AscW(s1.Chars(i)))\n      Next i\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;)\n      Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, [Char].IsHighSurrogate(cLow))\n      Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, [Char].IsHighSurrogate(cHigh))\n      Console.WriteLine(&quot;A3) s1(0)? - {0}&quot;, [Char].IsHighSurrogate(s1, 0))\n      Console.WriteLine(&quot;A4) s1(1)? - {0}&quot;, [Char].IsHighSurrogate(s1, 1))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;)\n      Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, [Char].IsLowSurrogate(cLow))\n      Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, [Char].IsLowSurrogate(cHigh))\n      Console.WriteLine(&quot;B3) s1(0)? - {0}&quot;, [Char].IsLowSurrogate(s1, 0))\n      Console.WriteLine(&quot;B4) s1(2)? - {0}&quot;, [Char].IsLowSurrogate(s1, 2))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;)\n      Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, [Char].IsSurrogatePair(cHigh, cLow))\n      Console.WriteLine(&quot;C2) s1(0) and s1(1)? - {0}&quot;, [Char].IsSurrogatePair(s1, 0))\n      Console.WriteLine(&quot;C3) s1(1) and s1(2)? - {0}&quot;, [Char].IsSurrogatePair(s1, 1))\n      Console.WriteLine(&quot;C4) s1(2) and s1(3)? - {0}&quot;, [Char].IsSurrogatePair(s1, 2))\n      Console.WriteLine(divider)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Hexadecimal code point of the character, cHigh: D800\n&#39;Hexadecimal code point of the character, cLow:  DC00\n&#39;\n&#39;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\n&#39;Hexadecimal code points of the characters in string, s1:\n&#39;s1(0) = 0061\n&#39;s1(1) = D800\n&#39;s1(2) = DC00\n&#39;s1(3) = 007A\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a high surrogate?\n&#39;A1) cLow?  - False\n&#39;A2) cHigh? - True\n&#39;A3) s1(0)? - False\n&#39;A4) s1(1)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a low surrogate?\n&#39;B1) cLow?  - True\n&#39;B2) cHigh? - False\n&#39;B3) s1(0)? - False\n&#39;B4) s1(2)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following pairs of characters a surrogate pair?\n&#39;C1) cHigh and cLow?  - True\n&#39;C2) s1(0) and s1(1)? - False\n&#39;C3) s1(1) and s1(2)? - True\n&#39;C4) s1(2) and s1(3)? - False\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing namespace System;\nint main()\n{\n   Char cHigh = L&#39;\\xD800&#39;;\n   Char cLow = L&#39;\\xDC00&#39;;\n   array&lt;Char&gt;^temp0 = {L&#39;a&#39;,L&#39;\\xD800&#39;,L&#39;\\xDC00&#39;,L&#39;z&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ divider = String::Concat( Environment::NewLine, gcnew String( &#39;-&#39;,70 ), Environment::NewLine );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh );\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot; );\n   Console::WriteLine( &quot;Hexadecimal code points of the characters in string, s1: &quot; );\n   for ( int i = 0; i &lt; s1-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[ i ] );\n   }\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a high surrogate?&quot; );\n   Console::WriteLine( &quot;A1) cLow?  - {0}&quot;, Char::IsHighSurrogate( cLow ) );\n   Console::WriteLine( &quot;A2) cHigh? - {0}&quot;, Char::IsHighSurrogate( cHigh ) );\n   Console::WriteLine( &quot;A3) s1[0]? - {0}&quot;, Char::IsHighSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;A4) s1[1]? - {0}&quot;, Char::IsHighSurrogate( s1, 1 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a low surrogate?&quot; );\n   Console::WriteLine( &quot;B1) cLow?  - {0}&quot;, Char::IsLowSurrogate( cLow ) );\n   Console::WriteLine( &quot;B2) cHigh? - {0}&quot;, Char::IsLowSurrogate( cHigh ) );\n   Console::WriteLine( &quot;B3) s1[0]? - {0}&quot;, Char::IsLowSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;B4) s1[2]? - {0}&quot;, Char::IsLowSurrogate( s1, 2 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following pairs of characters a surrogate pair?&quot; );\n   Console::WriteLine( &quot;C1) cHigh and cLow?  - {0}&quot;, Char::IsSurrogatePair( cHigh, cLow ) );\n   Console::WriteLine( &quot;C2) s1[0] and s1[1]? - {0}&quot;, Char::IsSurrogatePair( s1, 0 ) );\n   Console::WriteLine( &quot;C3) s1[1] and s1[2]? - {0}&quot;, Char::IsSurrogatePair( s1, 1 ) );\n   Console::WriteLine( &quot;C4) s1[2] and s1[3]? - {0}&quot;, Char::IsSurrogatePair( s1, 2 ) );\n   Console::WriteLine( divider );\n}\n\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLetter_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsLetter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLetter(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a Unicode letter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLetter (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a letter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is a member of any category of Unicode letter. Unicode letters include the following:  </p>\n<ul>\n<li><p>Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (&lt;CJK Ideograph, First&gt;) through U+9FC3 (&lt;CJK Ideograph, Last&gt;). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates IsLetter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsLetter#5\">using System;\n\npublic class IsLetterSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;8&#39;;\n\n\t\tConsole.WriteLine(Char.IsLetter(ch));\t\t\t\t\t// False\n\t\tConsole.WriteLine(Char.IsLetter(&quot;sample string&quot;, 7));\t// True\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsLetter#5\">using namespace System;\nint main()\n{\n   char ch = &#39;8&#39;;\n   Console::WriteLine( Char::IsLetter( ch ) ); // False\n   Console::WriteLine( Char::IsLetter(  &quot;sample string&quot;, 7 ) ); // True\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsLetter#5\">Imports System\n\nModule IsLetterSample\n\n    Sub Main()\n\n        Dim ch8 As Char\n        ch8 = &quot;8&quot;c\n\n        Console.WriteLine(Char.IsLetter(ch8))                   &#39; Output: &quot;False&quot;\n        Console.WriteLine(Char.IsLetter(&quot;sample string&quot;, 5))    &#39; Output: &quot;True&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLetter_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsLetter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLetter(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLetter (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a letter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter. Unicode letters include the following:  </p>\n<ul>\n<li><p>Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n</li>\n<li><p>Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (&lt;CJK Ideograph, First&gt;) through U+9FC3 (&lt;CJK Ideograph, Last&gt;). These characters are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsLetter_\" data-linktype=\"relative-path\">IsLetter</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsLetter#5\">using System;\n\npublic class IsLetterSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;8&#39;;\n\n\t\tConsole.WriteLine(Char.IsLetter(ch));\t\t\t\t\t// False\n\t\tConsole.WriteLine(Char.IsLetter(&quot;sample string&quot;, 7));\t// True\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsLetter#5\">using namespace System;\nint main()\n{\n   char ch = &#39;8&#39;;\n   Console::WriteLine( Char::IsLetter( ch ) ); // False\n   Console::WriteLine( Char::IsLetter(  &quot;sample string&quot;, 7 ) ); // True\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsLetter#5\">Imports System\n\nModule IsLetterSample\n\n    Sub Main()\n\n        Dim ch8 As Char\n        ch8 = &quot;8&quot;c\n\n        Console.WriteLine(Char.IsLetter(ch8))                   &#39; Output: &quot;False&quot;\n        Console.WriteLine(Char.IsLetter(&quot;sample string&quot;, 5))    &#39; Output: &quot;True&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLetterOrDigit_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsLetterOrDigit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLetterOrDigit(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLetterOrDigit (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a letter or a decimal digit; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid letters and decimal digits are members of the following categories in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>UppercaseLetter</code>, <code>LowercaseLetter</code>, <code>TitlecaseLetter</code>, <code>ModifierLetter</code>, <code>OtherLetter</code>, or <code>DecimalDigitNumber</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates IsLetterOrDigit.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsLetterOrDigit#6\">using System;\n\npublic class IsLetterOrDigitSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;newline:<br>&quot;;\n\n\t\tConsole.WriteLine(Char.IsLetterOrDigit(&#39;8&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsLetterOrDigit(str, 8));\t// Output: &quot;False&quot;, because it&#39;s a newline\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsLetterOrDigit#6\">imports System\n\nModule IsLetterOrDigitSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;newline:&quot; + vbNewLine\n\n        Console.WriteLine(Char.IsLetterOrDigit(&quot;8&quot;c))       &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsLetterOrDigit(str, 8))     &#39; Output: &quot;False&quot;, because it&#39;s a NewLine\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsLetterOrDigit#6\">using namespace System;\nint main()\n{\n   String^ str =  &quot;newline:<br>&quot;;\n   Console::WriteLine( Char::IsLetterOrDigit( &#39;8&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsLetterOrDigit( str, 8 ) ); // Output: &quot;False&quot;, because it&#39;s a newline\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLetterOrDigit_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsLetterOrDigit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLetterOrDigit(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLetterOrDigit (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a letter or a decimal digit; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> Valid letters and decimal digits are members of the following categories in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>UppercaseLetter</code>, <code>LowercaseLetter</code>, <code>TitlecaseLetter</code>, <code>ModifierLetter</code>, <code>OtherLetter</code>, or <code>DecimalDigitNumber</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsLetterOrDigit_\" data-linktype=\"relative-path\">IsLetterOrDigit</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsLetterOrDigit#6\">using System;\n\npublic class IsLetterOrDigitSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;newline:<br>&quot;;\n\n\t\tConsole.WriteLine(Char.IsLetterOrDigit(&#39;8&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsLetterOrDigit(str, 8));\t// Output: &quot;False&quot;, because it&#39;s a newline\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsLetterOrDigit#6\">imports System\n\nModule IsLetterOrDigitSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;newline:&quot; + vbNewLine\n\n        Console.WriteLine(Char.IsLetterOrDigit(&quot;8&quot;c))       &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsLetterOrDigit(str, 8))     &#39; Output: &quot;False&quot;, because it&#39;s a NewLine\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsLetterOrDigit#6\">using namespace System;\nint main()\n{\n   String^ str =  &quot;newline:<br>&quot;;\n   Console::WriteLine( Char::IsLetterOrDigit( &#39;8&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsLetterOrDigit( str, 8 ) ); // Output: &quot;False&quot;, because it&#39;s a newline\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLower_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLower(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a lowercase letter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLower (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a lowercase letter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid lowercase letters are members of the following category in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>LowercaseLetter</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates IsLower.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsLower#7\">using System;\n\npublic class IsLowerSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;a&#39;;\n\n\t\tConsole.WriteLine(Char.IsLower(ch));\t\t\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsLower(&quot;upperCase&quot;, 5));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsLower#7\">using namespace System;\nint main()\n{\n   char ch = &#39;a&#39;;\n   Console::WriteLine( Char::IsLower( ch ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsLower(  &quot;upperCase&quot;, 5 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsLower#7\">Imports System\n\nModule IsLowerSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;a&quot;c\n\n        Console.WriteLine(Char.IsLower(ch))                 &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsLower(&quot;upperCase&quot;, 5))     &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLower_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLower(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLower (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a lowercase letter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> Valid lowercase letters are members of the following category in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>LowercaseLetter</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsLower_\" data-linktype=\"relative-path\">IsLower</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsLower#7\">using System;\n\npublic class IsLowerSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;a&#39;;\n\n\t\tConsole.WriteLine(Char.IsLower(ch));\t\t\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsLower(&quot;upperCase&quot;, 5));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsLower#7\">using namespace System;\nint main()\n{\n   char ch = &#39;a&#39;;\n   Console::WriteLine( Char::IsLower( ch ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsLower(  &quot;upperCase&quot;, 5 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsLower#7\">Imports System\n\nModule IsLowerSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;a&quot;c\n\n        Console.WriteLine(Char.IsLower(ch))                 &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsLower(&quot;upperCase&quot;, 5))     &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLowSurrogate_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsLowSurrogate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLowSurrogate(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object is a low surrogate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLowSurrogate (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the numeric value of the <code>c</code> parameter ranges from U+DC00 through U+DFFF; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_\" data-linktype=\"relative-path\">IsHighSurrogate</a>, IsLowSurrogate, and <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_\" data-linktype=\"relative-path\">IsSurrogatePair</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    char cHigh = &#39;\\uD800&#39;;\n    char cLow  = &#39;\\uDC00&#39;;\n    string s1  = new String(new char[] {&#39;a&#39;, &#39;\\uD800&#39;, &#39;\\uDC00&#39;, &#39;z&#39;});\n    string divider = String.Concat( Environment.NewLine, new String(&#39;-&#39;, 70), \n                                    Environment.NewLine);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh);\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;);\n    Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;);\n    for(int i = 0; i &lt; s1.Length; i++)\n        {\n        Console.WriteLine(&quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[i]);\n        }\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;);\n    Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, Char.IsHighSurrogate(cLow));\n    Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, Char.IsHighSurrogate(cHigh));\n    Console.WriteLine(&quot;A3) s1[0]? - {0}&quot;, Char.IsHighSurrogate(s1, 0));\n    Console.WriteLine(&quot;A4) s1[1]? - {0}&quot;, Char.IsHighSurrogate(s1, 1));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;);\n    Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, Char.IsLowSurrogate(cLow));\n    Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, Char.IsLowSurrogate(cHigh));\n    Console.WriteLine(&quot;B3) s1[0]? - {0}&quot;, Char.IsLowSurrogate(s1, 0));\n    Console.WriteLine(&quot;B4) s1[2]? - {0}&quot;, Char.IsLowSurrogate(s1, 2));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;);\n    Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, Char.IsSurrogatePair(cHigh, cLow));\n    Console.WriteLine(&quot;C2) s1[0] and s1[1]? - {0}&quot;, Char.IsSurrogatePair(s1, 0));\n    Console.WriteLine(&quot;C3) s1[1] and s1[2]? - {0}&quot;, Char.IsSurrogatePair(s1, 1));\n    Console.WriteLine(&quot;C4) s1[2] and s1[3]? - {0}&quot;, Char.IsSurrogatePair(s1, 2));\n    Console.WriteLine(divider);\n    }\n}\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.surrogate#1\">&#39; This example demonstrates the Char.IsLowSurrogate() method\n&#39;                                    IsHighSurrogate() method\n&#39;                                    IsSurrogatePair() method\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cHigh As Char = ChrW(&amp;HD800)\n      Dim cLow  As Char = ChrW(&amp;HDC00)\n      Dim s1 = New [String](New Char() {&quot;a&quot;c, ChrW(&amp;HD800), ChrW(&amp;HDC00), &quot;z&quot;c})\n      Dim divider As String = [String].Concat(Environment.NewLine, _\n                                              New [String](&quot;-&quot;c, 70), _\n                                              Environment.NewLine)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, AscW(cHigh))\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, AscW(cLow))\n      Console.WriteLine()\n      Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;)\n      Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;)\n      Dim i As Integer\n      For i = 0 To s1.Length - 1\n         Console.WriteLine(&quot;s1({0}) = {1:X4} &quot;, i, AscW(s1.Chars(i)))\n      Next i\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;)\n      Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, [Char].IsHighSurrogate(cLow))\n      Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, [Char].IsHighSurrogate(cHigh))\n      Console.WriteLine(&quot;A3) s1(0)? - {0}&quot;, [Char].IsHighSurrogate(s1, 0))\n      Console.WriteLine(&quot;A4) s1(1)? - {0}&quot;, [Char].IsHighSurrogate(s1, 1))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;)\n      Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, [Char].IsLowSurrogate(cLow))\n      Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, [Char].IsLowSurrogate(cHigh))\n      Console.WriteLine(&quot;B3) s1(0)? - {0}&quot;, [Char].IsLowSurrogate(s1, 0))\n      Console.WriteLine(&quot;B4) s1(2)? - {0}&quot;, [Char].IsLowSurrogate(s1, 2))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;)\n      Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, [Char].IsSurrogatePair(cHigh, cLow))\n      Console.WriteLine(&quot;C2) s1(0) and s1(1)? - {0}&quot;, [Char].IsSurrogatePair(s1, 0))\n      Console.WriteLine(&quot;C3) s1(1) and s1(2)? - {0}&quot;, [Char].IsSurrogatePair(s1, 1))\n      Console.WriteLine(&quot;C4) s1(2) and s1(3)? - {0}&quot;, [Char].IsSurrogatePair(s1, 2))\n      Console.WriteLine(divider)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Hexadecimal code point of the character, cHigh: D800\n&#39;Hexadecimal code point of the character, cLow:  DC00\n&#39;\n&#39;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\n&#39;Hexadecimal code points of the characters in string, s1:\n&#39;s1(0) = 0061\n&#39;s1(1) = D800\n&#39;s1(2) = DC00\n&#39;s1(3) = 007A\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a high surrogate?\n&#39;A1) cLow?  - False\n&#39;A2) cHigh? - True\n&#39;A3) s1(0)? - False\n&#39;A4) s1(1)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a low surrogate?\n&#39;B1) cLow?  - True\n&#39;B2) cHigh? - False\n&#39;B3) s1(0)? - False\n&#39;B4) s1(2)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following pairs of characters a surrogate pair?\n&#39;C1) cHigh and cLow?  - True\n&#39;C2) s1(0) and s1(1)? - False\n&#39;C3) s1(1) and s1(2)? - True\n&#39;C4) s1(2) and s1(3)? - False\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing namespace System;\nint main()\n{\n   Char cHigh = L&#39;\\xD800&#39;;\n   Char cLow = L&#39;\\xDC00&#39;;\n   array&lt;Char&gt;^temp0 = {L&#39;a&#39;,L&#39;\\xD800&#39;,L&#39;\\xDC00&#39;,L&#39;z&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ divider = String::Concat( Environment::NewLine, gcnew String( &#39;-&#39;,70 ), Environment::NewLine );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh );\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot; );\n   Console::WriteLine( &quot;Hexadecimal code points of the characters in string, s1: &quot; );\n   for ( int i = 0; i &lt; s1-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[ i ] );\n   }\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a high surrogate?&quot; );\n   Console::WriteLine( &quot;A1) cLow?  - {0}&quot;, Char::IsHighSurrogate( cLow ) );\n   Console::WriteLine( &quot;A2) cHigh? - {0}&quot;, Char::IsHighSurrogate( cHigh ) );\n   Console::WriteLine( &quot;A3) s1[0]? - {0}&quot;, Char::IsHighSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;A4) s1[1]? - {0}&quot;, Char::IsHighSurrogate( s1, 1 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a low surrogate?&quot; );\n   Console::WriteLine( &quot;B1) cLow?  - {0}&quot;, Char::IsLowSurrogate( cLow ) );\n   Console::WriteLine( &quot;B2) cHigh? - {0}&quot;, Char::IsLowSurrogate( cHigh ) );\n   Console::WriteLine( &quot;B3) s1[0]? - {0}&quot;, Char::IsLowSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;B4) s1[2]? - {0}&quot;, Char::IsLowSurrogate( s1, 2 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following pairs of characters a surrogate pair?&quot; );\n   Console::WriteLine( &quot;C1) cHigh and cLow?  - {0}&quot;, Char::IsSurrogatePair( cHigh, cLow ) );\n   Console::WriteLine( &quot;C2) s1[0] and s1[1]? - {0}&quot;, Char::IsSurrogatePair( s1, 0 ) );\n   Console::WriteLine( &quot;C3) s1[1] and s1[2]? - {0}&quot;, Char::IsSurrogatePair( s1, 1 ) );\n   Console::WriteLine( &quot;C4) s1[2] and s1[3]? - {0}&quot;, Char::IsSurrogatePair( s1, 2 ) );\n   Console::WriteLine( divider );\n}\n\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsLowSurrogate_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsLowSurrogate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLowSurrogate(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at the specified position in a string is a low surrogate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsLowSurrogate (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the numeric value of the specified character in the <code>s</code> parameter ranges from U+DC00 through U+DFFF; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a position within <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>index</code> parameter is zero-based.  </p>\n<p> In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_\" data-linktype=\"relative-path\">IsHighSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_\" data-linktype=\"relative-path\">IsLowSurrogate</a>, and <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_\" data-linktype=\"relative-path\">IsSurrogatePair</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    char cHigh = &#39;\\uD800&#39;;\n    char cLow  = &#39;\\uDC00&#39;;\n    string s1  = new String(new char[] {&#39;a&#39;, &#39;\\uD800&#39;, &#39;\\uDC00&#39;, &#39;z&#39;});\n    string divider = String.Concat( Environment.NewLine, new String(&#39;-&#39;, 70), \n                                    Environment.NewLine);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh);\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;);\n    Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;);\n    for(int i = 0; i &lt; s1.Length; i++)\n        {\n        Console.WriteLine(&quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[i]);\n        }\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;);\n    Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, Char.IsHighSurrogate(cLow));\n    Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, Char.IsHighSurrogate(cHigh));\n    Console.WriteLine(&quot;A3) s1[0]? - {0}&quot;, Char.IsHighSurrogate(s1, 0));\n    Console.WriteLine(&quot;A4) s1[1]? - {0}&quot;, Char.IsHighSurrogate(s1, 1));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;);\n    Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, Char.IsLowSurrogate(cLow));\n    Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, Char.IsLowSurrogate(cHigh));\n    Console.WriteLine(&quot;B3) s1[0]? - {0}&quot;, Char.IsLowSurrogate(s1, 0));\n    Console.WriteLine(&quot;B4) s1[2]? - {0}&quot;, Char.IsLowSurrogate(s1, 2));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;);\n    Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, Char.IsSurrogatePair(cHigh, cLow));\n    Console.WriteLine(&quot;C2) s1[0] and s1[1]? - {0}&quot;, Char.IsSurrogatePair(s1, 0));\n    Console.WriteLine(&quot;C3) s1[1] and s1[2]? - {0}&quot;, Char.IsSurrogatePair(s1, 1));\n    Console.WriteLine(&quot;C4) s1[2] and s1[3]? - {0}&quot;, Char.IsSurrogatePair(s1, 2));\n    Console.WriteLine(divider);\n    }\n}\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.surrogate#1\">&#39; This example demonstrates the Char.IsLowSurrogate() method\n&#39;                                    IsHighSurrogate() method\n&#39;                                    IsSurrogatePair() method\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cHigh As Char = ChrW(&amp;HD800)\n      Dim cLow  As Char = ChrW(&amp;HDC00)\n      Dim s1 = New [String](New Char() {&quot;a&quot;c, ChrW(&amp;HD800), ChrW(&amp;HDC00), &quot;z&quot;c})\n      Dim divider As String = [String].Concat(Environment.NewLine, _\n                                              New [String](&quot;-&quot;c, 70), _\n                                              Environment.NewLine)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, AscW(cHigh))\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, AscW(cLow))\n      Console.WriteLine()\n      Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;)\n      Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;)\n      Dim i As Integer\n      For i = 0 To s1.Length - 1\n         Console.WriteLine(&quot;s1({0}) = {1:X4} &quot;, i, AscW(s1.Chars(i)))\n      Next i\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;)\n      Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, [Char].IsHighSurrogate(cLow))\n      Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, [Char].IsHighSurrogate(cHigh))\n      Console.WriteLine(&quot;A3) s1(0)? - {0}&quot;, [Char].IsHighSurrogate(s1, 0))\n      Console.WriteLine(&quot;A4) s1(1)? - {0}&quot;, [Char].IsHighSurrogate(s1, 1))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;)\n      Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, [Char].IsLowSurrogate(cLow))\n      Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, [Char].IsLowSurrogate(cHigh))\n      Console.WriteLine(&quot;B3) s1(0)? - {0}&quot;, [Char].IsLowSurrogate(s1, 0))\n      Console.WriteLine(&quot;B4) s1(2)? - {0}&quot;, [Char].IsLowSurrogate(s1, 2))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;)\n      Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, [Char].IsSurrogatePair(cHigh, cLow))\n      Console.WriteLine(&quot;C2) s1(0) and s1(1)? - {0}&quot;, [Char].IsSurrogatePair(s1, 0))\n      Console.WriteLine(&quot;C3) s1(1) and s1(2)? - {0}&quot;, [Char].IsSurrogatePair(s1, 1))\n      Console.WriteLine(&quot;C4) s1(2) and s1(3)? - {0}&quot;, [Char].IsSurrogatePair(s1, 2))\n      Console.WriteLine(divider)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Hexadecimal code point of the character, cHigh: D800\n&#39;Hexadecimal code point of the character, cLow:  DC00\n&#39;\n&#39;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\n&#39;Hexadecimal code points of the characters in string, s1:\n&#39;s1(0) = 0061\n&#39;s1(1) = D800\n&#39;s1(2) = DC00\n&#39;s1(3) = 007A\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a high surrogate?\n&#39;A1) cLow?  - False\n&#39;A2) cHigh? - True\n&#39;A3) s1(0)? - False\n&#39;A4) s1(1)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a low surrogate?\n&#39;B1) cLow?  - True\n&#39;B2) cHigh? - False\n&#39;B3) s1(0)? - False\n&#39;B4) s1(2)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following pairs of characters a surrogate pair?\n&#39;C1) cHigh and cLow?  - True\n&#39;C2) s1(0) and s1(1)? - False\n&#39;C3) s1(1) and s1(2)? - True\n&#39;C4) s1(2) and s1(3)? - False\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing namespace System;\nint main()\n{\n   Char cHigh = L&#39;\\xD800&#39;;\n   Char cLow = L&#39;\\xDC00&#39;;\n   array&lt;Char&gt;^temp0 = {L&#39;a&#39;,L&#39;\\xD800&#39;,L&#39;\\xDC00&#39;,L&#39;z&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ divider = String::Concat( Environment::NewLine, gcnew String( &#39;-&#39;,70 ), Environment::NewLine );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh );\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot; );\n   Console::WriteLine( &quot;Hexadecimal code points of the characters in string, s1: &quot; );\n   for ( int i = 0; i &lt; s1-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[ i ] );\n   }\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a high surrogate?&quot; );\n   Console::WriteLine( &quot;A1) cLow?  - {0}&quot;, Char::IsHighSurrogate( cLow ) );\n   Console::WriteLine( &quot;A2) cHigh? - {0}&quot;, Char::IsHighSurrogate( cHigh ) );\n   Console::WriteLine( &quot;A3) s1[0]? - {0}&quot;, Char::IsHighSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;A4) s1[1]? - {0}&quot;, Char::IsHighSurrogate( s1, 1 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a low surrogate?&quot; );\n   Console::WriteLine( &quot;B1) cLow?  - {0}&quot;, Char::IsLowSurrogate( cLow ) );\n   Console::WriteLine( &quot;B2) cHigh? - {0}&quot;, Char::IsLowSurrogate( cHigh ) );\n   Console::WriteLine( &quot;B3) s1[0]? - {0}&quot;, Char::IsLowSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;B4) s1[2]? - {0}&quot;, Char::IsLowSurrogate( s1, 2 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following pairs of characters a surrogate pair?&quot; );\n   Console::WriteLine( &quot;C1) cHigh and cLow?  - {0}&quot;, Char::IsSurrogatePair( cHigh, cLow ) );\n   Console::WriteLine( &quot;C2) s1[0] and s1[1]? - {0}&quot;, Char::IsSurrogatePair( s1, 0 ) );\n   Console::WriteLine( &quot;C3) s1[1] and s1[2]? - {0}&quot;, Char::IsSurrogatePair( s1, 1 ) );\n   Console::WriteLine( &quot;C4) s1[2] and s1[3]? - {0}&quot;, Char::IsSurrogatePair( s1, 2 ) );\n   Console::WriteLine( divider );\n}\n\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsNumber_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNumber(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNumber (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <a class=\"xref\" href=\"system.char#System_Char_IsDigit_\" data-linktype=\"relative-path\">IsDigit</a> method, which determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is a radix-10 digit.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The IsNumber method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string). To determine whether a string consists of numeric characters, call one of the overloads of the <code>TryParse</code> method (such as <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> or <a class=\"xref\" href=\"system.double#System_Double_TryParse_\" data-linktype=\"relative-path\">TryParse</a> of an integral or floating point type.  </p>\n</div>\n<p> Valid numbers are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, or <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n<p> The IsNumber method assumes that <code>c</code> corresponds to a single linguistic character and checks whether that character represents a number. However, some numbers in the Unicode standard are represented by two <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the IsNumber method returns <code>false</code> if it is passed either a high surrogate or a low surrogate of this character.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Char.IsNumber#1\">      Dim utf32 As Integer = &amp;h10107      &#39; AEGEAN NUMBER ONE\n      Dim surrogate As String = Char.ConvertFromUtf32(utf32)\n      For Each ch In surrogate\n         Console.WriteLine(&quot;U+{0:X4}: {1}&quot;, Convert.ToUInt16(ch), \n                                          Char.IsNumber(ch))\n      Next\n      &#39; The example displays the following output:\n      &#39;       U+D800: False\n      &#39;       U+DD07: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsNumber#1\">      int utf32 = 0x10107;      // AEGEAN NUMBER ONE\n      string surrogate = Char.ConvertFromUtf32(utf32);\n      foreach (var ch in surrogate)\n         Console.WriteLine(&quot;U+{0:X4}: {1}&quot;, Convert.ToUInt16(ch), \n                                          Char.IsNumber(ch));\n\n      // The example displays the following output:\n      //       U+D800: False\n      //       U+DD07: False       \n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates IsNumber.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Char.IsNumber#8\">Module IsNumberSample\n    Sub Main()\n        Dim str As String\n        str = &quot;non-numeric&quot;\n\n        Console.WriteLine(Char.IsNumber(&quot;8&quot;c))      &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsNumber(str, 3))    &#39; Output: &quot;False&quot;\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsNumber#8\">using System;\n\npublic class IsNumberSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;non-numeric&quot;;\n\n\t\tConsole.WriteLine(Char.IsNumber(&#39;8&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsNumber(str, 3));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsNumber#8\">using namespace System;\nint main()\n{\n   String^ str =  &quot;non-numeric&quot;;\n   Console::WriteLine( Char::IsNumber( &#39;8&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsNumber( str, 3 ) ); // Output: &quot;False&quot;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsNumber_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsNumber_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsNumber(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsNumber (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a number; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <a class=\"xref\" href=\"system.char#System_Char_IsDigit_\" data-linktype=\"relative-path\">IsDigit</a> method, which determines whether a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> is a radix-10 digit.  </p>\n<p> Character positions in a string are indexed starting from zero.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The IsNumber method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string). To determine whether a string consists of numeric characters, call one of the overloads of the <code>TryParse</code> method (such as <a class=\"xref\" href=\"system.int32#System_Int32_TryParse_\" data-linktype=\"relative-path\">TryParse</a> or <a class=\"xref\" href=\"system.double#System_Double_TryParse_\" data-linktype=\"relative-path\">TryParse</a> of an integral or floating point type.  </p>\n</div>\n<p> Valid numbers are members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>, or <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category.  </p>\n<p> If the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object at position <code>index</code> is the first character of a valid surrogate pair, the IsNumber method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <a class=\"xref\" href=\"system.char#System_Char_ConvertFromUtf32_\" data-linktype=\"relative-path\">ConvertFromUtf32</a> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the IsNumber method returns <code>true</code> if it is passed the high surrogate of AEGEAN NUMBER ONE. However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns <code>false</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Char.IsNumber#2\">      Dim utf32 As Integer = &amp;h10107      &#39; AEGEAN NUMBER ONE\n      Dim surrogate As String = Char.ConvertFromUtf32(utf32)\n      For ctr As Integer = 0 To surrogate.Length - 1\n         Console.WriteLine(&quot;U+{0:X4} at position {1}: {2}&quot;, \n                           Convert.ToUInt16(surrogate(ctr)), ctr,  \n                           Char.IsNumber(surrogate, ctr))\n      Next\n      &#39; The example displays the following output:\n      &#39;       U+D800 at position 0: True\n      &#39;       U+DD07 at position 1: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsNumber#2\">      int utf32 = 0x10107;      // AEGEAN NUMBER ONE\n      string surrogate = Char.ConvertFromUtf32(utf32);\n      for (int ctr = 0; ctr &lt; surrogate.Length; ctr++)\n         Console.WriteLine(&quot;U+{0:X4} at position {1}: {2}&quot;, \n                           Convert.ToUInt16(surrogate[ctr]), ctr,  \n                           Char.IsNumber(surrogate, ctr));\n      // The example displays the following output:\n      //       U+D800 at position 0: True\n      //       U+DD07 at position 1: False\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsNumber_\" data-linktype=\"relative-path\">IsNumber</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Char.IsNumber#8\">Module IsNumberSample\n    Sub Main()\n        Dim str As String\n        str = &quot;non-numeric&quot;\n\n        Console.WriteLine(Char.IsNumber(&quot;8&quot;c))      &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsNumber(str, 3))    &#39; Output: &quot;False&quot;\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsNumber#8\">using System;\n\npublic class IsNumberSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;non-numeric&quot;;\n\n\t\tConsole.WriteLine(Char.IsNumber(&#39;8&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsNumber(str, 3));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsNumber#8\">using namespace System;\nint main()\n{\n   String^ str =  &quot;non-numeric&quot;;\n   Console::WriteLine( Char::IsNumber( &#39;8&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsNumber( str, 3 ) ); // Output: &quot;False&quot;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsPunctuation_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsPunctuation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPunctuation(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a punctuation mark.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsPunctuation (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a punctuation mark; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid punctuation marks are members of the following categories in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>ConnectorPunctuation</code>, <code>DashPunctuation</code>, <code>OpenPunctuation</code>, <code>ClosePunctuation</code>, <code>InititalQuotePunctuation</code>, <code>FinalQuotePunctuation</code>, or <code>OtherPunctuation</code>. They include characters with the Unicode code points listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>U+0021 to U+0023</td>\n<td>U+060C and U+060D</td>\n<td>U+1800 to U+180A</td>\n<td>U+3014 to U+301F</td>\n</tr>\n<tr>\n<td>U+0025 to U+002A</td>\n<td>U+061B</td>\n<td>U+1944 and U+1945</td>\n<td>U+3030</td>\n</tr>\n<tr>\n<td>U+002C to U+002F</td>\n<td>U+061E and U+061F</td>\n<td>U+19DE and U+19DF</td>\n<td>U+303D</td>\n</tr>\n<tr>\n<td>U+003A and U+003B</td>\n<td>U+066A to U+066D</td>\n<td>U+1A1E and U+1A1F</td>\n<td>U+30A0</td>\n</tr>\n<tr>\n<td>U+003F and U+0040</td>\n<td>U+06D4</td>\n<td>U+1B5A to U+1B60</td>\n<td>U+30FB</td>\n</tr>\n<tr>\n<td>U+005B to U+005D</td>\n<td>U+0700 to U+070D</td>\n<td>U+2010 to U+2027</td>\n<td>U+A874 to U+A877</td>\n</tr>\n<tr>\n<td>U+005F</td>\n<td>U+07F7 to U+07F9</td>\n<td>U+2030 to U+2043</td>\n<td>U+FD3E and U+FD3F</td>\n</tr>\n<tr>\n<td>U+007B</td>\n<td>U+0964 and U+0965</td>\n<td>U+2045 to U+2051</td>\n<td>U+FE10 to U+FE19</td>\n</tr>\n<tr>\n<td>U+007D</td>\n<td>U+0970</td>\n<td>U+2053 to U+205E</td>\n<td>U+FE30 to U+FE52</td>\n</tr>\n<tr>\n<td>U+00A1</td>\n<td>U+0DF4</td>\n<td>U+207D and  U+207E</td>\n<td>U+FE54 to U+FE61</td>\n</tr>\n<tr>\n<td>U+00AB</td>\n<td>U+0E4F to U+0E5B</td>\n<td>U+208D and U+208E</td>\n<td>U+FE63</td>\n</tr>\n<tr>\n<td>U+00AD</td>\n<td>U+0F04 to U+0F12</td>\n<td>U+2329 and U+232A</td>\n<td>U+FE68</td>\n</tr>\n<tr>\n<td>U+00B7</td>\n<td>U+0F3A to U+0F3D</td>\n<td>U+2768 to U+2775</td>\n<td>U+FE6A and U+FE6B</td>\n</tr>\n<tr>\n<td>U+00BB</td>\n<td>U+0F85</td>\n<td>U+27C5 to U+27C6</td>\n<td>U+FF01 to U+FF03</td>\n</tr>\n<tr>\n<td>U+00BF</td>\n<td>U+0FD0 and U+0FD1</td>\n<td>U+27E6 to U+27EB</td>\n<td>U+FF05 to U+FF0A</td>\n</tr>\n<tr>\n<td>U+037E</td>\n<td>U+104A to U+104F</td>\n<td>U+2983 to U+2998</td>\n<td>U+FF0C to U+FF0F</td>\n</tr>\n<tr>\n<td>U+0387</td>\n<td>U+10FB</td>\n<td>U+29D8 to U+29DB</td>\n<td>U+FF1A and U+FF1B</td>\n</tr>\n<tr>\n<td>U+055A to U+055F</td>\n<td>U+1361 to U+1368</td>\n<td>U+29FC and U+29FD</td>\n<td>U+FF1F and U+FF20</td>\n</tr>\n<tr>\n<td>U+0589 and U+058A</td>\n<td>U+166D and U+166E</td>\n<td>U+2CF9 to U+2CFC</td>\n<td>U+FF3B to U+FF3D</td>\n</tr>\n<tr>\n<td>U+05BE</td>\n<td>U+169B and U+169C</td>\n<td>U+2CFE and U+2CFF</td>\n<td>U+FF3F</td>\n</tr>\n<tr>\n<td>U+05C0</td>\n<td>U+16EB to U+16ED</td>\n<td>U+2E00 to U+2E17</td>\n<td>U+FF5B</td>\n</tr>\n<tr>\n<td>U+05C3</td>\n<td>U+1735 and U+1736</td>\n<td>U+2E1C and U+2E1D</td>\n<td>U+FF5D</td>\n</tr>\n<tr>\n<td>U+05C6</td>\n<td>U+17D4 to U+17D6</td>\n<td>U+3001 to U+3003</td>\n<td>U+FF5F to U+FF65</td>\n</tr>\n<tr>\n<td>U+05F3 and U+05F4</td>\n<td>U+17D8 to U+17DA</td>\n<td>U+3008 to U+3011</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates IsPunctuation.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsPunctuation#9\">using namespace System;\nint main()\n{\n   char ch = &#39;.&#39;;\n   Console::WriteLine( Char::IsPunctuation( ch ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsPunctuation(  &quot;no punctuation&quot;, 3 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsPunctuation#9\">Imports System\n\nModule IsPunctuationSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;.&quot;c\n\n        Console.WriteLine(Char.IsPunctuation(ch))                   &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsPunctuation(&quot;no punctuation&quot;, 3))  &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsPunctuation#9\">using System;\n\npublic class IsPunctuationSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;.&#39;;\n\n\t\tConsole.WriteLine(Char.IsPunctuation(ch));\t\t\t\t\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsPunctuation(&quot;no punctuation&quot;, 3));\t\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsPunctuation_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsPunctuation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsPunctuation(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsPunctuation (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a punctuation mark; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> Valid punctuation marks are members of the following categories in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>ConnectorPunctuation</code>, <code>DashPunctuation</code>, <code>OpenPunctuation</code>, <code>ClosePunctuation</code>, <code>InititalQuotePunctuation</code>, <code>FinalQuotePunctuation</code>, or <code>OtherPunctuation</code>. They include characters with the Unicode code points listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>U+0021 to U+0023</td>\n<td>U+060C and U+060D</td>\n<td>U+1800 to U+180A</td>\n<td>U+3014 to U+301F</td>\n</tr>\n<tr>\n<td>U+0025 to U+002A</td>\n<td>U+061B</td>\n<td>U+1944 and U+1945</td>\n<td>U+3030</td>\n</tr>\n<tr>\n<td>U+002C to U+002F</td>\n<td>U+061E and U+061F</td>\n<td>U+19DE and U+19DF</td>\n<td>U+303D</td>\n</tr>\n<tr>\n<td>U+003A and U+003B</td>\n<td>U+066A to U+066D</td>\n<td>U+1A1E and U+1A1F</td>\n<td>U+30A0</td>\n</tr>\n<tr>\n<td>U+003F and U+0040</td>\n<td>U+06D4</td>\n<td>U+1B5A to U+1B60</td>\n<td>U+30FB</td>\n</tr>\n<tr>\n<td>U+005B to U+005D</td>\n<td>U+0700 to U+070D</td>\n<td>U+2010 to U+2027</td>\n<td>U+A874 to U+A877</td>\n</tr>\n<tr>\n<td>U+005F</td>\n<td>U+07F7 to U+07F9</td>\n<td>U+2030 to U+2043</td>\n<td>U+FD3E and U+FD3F</td>\n</tr>\n<tr>\n<td>U+007B</td>\n<td>U+0964 and U+0965</td>\n<td>U+2045 to U+2051</td>\n<td>U+FE10 to U+FE19</td>\n</tr>\n<tr>\n<td>U+007D</td>\n<td>U+0970</td>\n<td>U+2053 to U+205E</td>\n<td>U+FE30 to U+FE52</td>\n</tr>\n<tr>\n<td>U+00A1</td>\n<td>U+0DF4</td>\n<td>U+207D and  U+207E</td>\n<td>U+FE54 to U+FE61</td>\n</tr>\n<tr>\n<td>U+00AB</td>\n<td>U+0E4F to U+0E5B</td>\n<td>U+208D and U+208E</td>\n<td>U+FE63</td>\n</tr>\n<tr>\n<td>U+00AD</td>\n<td>U+0F04 to U+0F12</td>\n<td>U+2329 and U+232A</td>\n<td>U+FE68</td>\n</tr>\n<tr>\n<td>U+00B7</td>\n<td>U+0F3A to U+0F3D</td>\n<td>U+2768 to U+2775</td>\n<td>U+FE6A and U+FE6B</td>\n</tr>\n<tr>\n<td>U+00BB</td>\n<td>U+0F85</td>\n<td>U+27C5 to U+27C6</td>\n<td>U+FF01 to U+FF03</td>\n</tr>\n<tr>\n<td>U+00BF</td>\n<td>U+0FD0 and U+0FD1</td>\n<td>U+27E6 to U+27EB</td>\n<td>U+FF05 to U+FF0A</td>\n</tr>\n<tr>\n<td>U+037E</td>\n<td>U+104A to U+104F</td>\n<td>U+2983 to U+2998</td>\n<td>U+FF0C to U+FF0F</td>\n</tr>\n<tr>\n<td>U+0387</td>\n<td>U+10FB</td>\n<td>U+29D8 to U+29DB</td>\n<td>U+FF1A and U+FF1B</td>\n</tr>\n<tr>\n<td>U+055A to U+055F</td>\n<td>U+1361 to U+1368</td>\n<td>U+29FC and U+29FD</td>\n<td>U+FF1F and U+FF20</td>\n</tr>\n<tr>\n<td>U+0589 and U+058A</td>\n<td>U+166D and U+166E</td>\n<td>U+2CF9 to U+2CFC</td>\n<td>U+FF3B to U+FF3D</td>\n</tr>\n<tr>\n<td>U+05BE</td>\n<td>U+169B and U+169C</td>\n<td>U+2CFE and U+2CFF</td>\n<td>U+FF3F</td>\n</tr>\n<tr>\n<td>U+05C0</td>\n<td>U+16EB to U+16ED</td>\n<td>U+2E00 to U+2E17</td>\n<td>U+FF5B</td>\n</tr>\n<tr>\n<td>U+05C3</td>\n<td>U+1735 and U+1736</td>\n<td>U+2E1C and U+2E1D</td>\n<td>U+FF5D</td>\n</tr>\n<tr>\n<td>U+05C6</td>\n<td>U+17D4 to U+17D6</td>\n<td>U+3001 to U+3003</td>\n<td>U+FF5F to U+FF65</td>\n</tr>\n<tr>\n<td>U+05F3 and U+05F4</td>\n<td>U+17D8 to U+17DA</td>\n<td>U+3008 to U+3011</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsPunctuation_\" data-linktype=\"relative-path\">IsPunctuation</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsPunctuation#9\">using namespace System;\nint main()\n{\n   char ch = &#39;.&#39;;\n   Console::WriteLine( Char::IsPunctuation( ch ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsPunctuation(  &quot;no punctuation&quot;, 3 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsPunctuation#9\">Imports System\n\nModule IsPunctuationSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;.&quot;c\n\n        Console.WriteLine(Char.IsPunctuation(ch))                   &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsPunctuation(&quot;no punctuation&quot;, 3))  &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsPunctuation#9\">using System;\n\npublic class IsPunctuationSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;.&#39;;\n\n\t\tConsole.WriteLine(Char.IsPunctuation(ch));\t\t\t\t\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsPunctuation(&quot;no punctuation&quot;, 3));\t\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSeparator_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsSeparator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSeparator(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a separator character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSeparator (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a separator character; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Unicode standard recognizes three subcategories of separators:  </p>\n<ul>\n<li><p>Space separators (the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), which includes characters such as \\u0020.  </p>\n</li>\n<li><p>Line separators (the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), which includes \\u2028.  </p>\n</li>\n<li><p>Paragraph separators (the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), which includes \\u2029.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The Unicode standard classifies the characters \\u000A (LF), \\u000C (FF), and \\u000D (CR) as control characters (members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), not as separator characters.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects that are classified as separator characters.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsSeparator#1\">using namespace System;\n\nint main()\n{\n   for (int ctr = Convert::ToInt32(Char::MinValue); ctr &lt;= Convert::ToInt32(Char::MaxValue); ctr++)\n   {\n      wchar_t ch = ctr;\n      if (Char::IsSeparator(ch))\n         Console::WriteLine(&quot;\\u{0:X4} ({1})&quot;, (int) ch, Char::GetUnicodeCategory(ch).ToString());\n   }\n}\n// The example displays the following output:\n//       0020 (SpaceSeparator)\n//       u00A0 (SpaceSeparator)\n//       u1680 (SpaceSeparator)\n//       u180E (SpaceSeparator)\n//       u2000 (SpaceSeparator)\n//       u2001 (SpaceSeparator)\n//       u2002 (SpaceSeparator)\n//       u2003 (SpaceSeparator)\n//       u2004 (SpaceSeparator)\n//       u2005 (SpaceSeparator)\n//       u2006 (SpaceSeparator)\n//       u2007 (SpaceSeparator)\n//       u2008 (SpaceSeparator)\n//       u2009 (SpaceSeparator)\n//       u200A (SpaceSeparator)\n//       u2028 (LineSeparator)\n//       u2029 (ParagraphSeparator)\n//       u202F (SpaceSeparator)\n//       u205F (SpaceSeparator)\n//       u3000 (SpaceSeparator)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsSeparator#1\">using System;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      for (int ctr = Convert.ToInt32(Char.MinValue); ctr &lt;= Convert.ToInt32(Char.MaxValue); ctr++)\n      {\n         char ch = (Char) ctr;\n         if (Char.IsSeparator(ch))\n            Console.WriteLine(@&quot;\\u{0:X4} ({1})&quot;, (int) ch, Char.GetUnicodeCategory(ch).ToString());\n      }\n   }\n}\n// The example displays the following output:\n//       \\u0020 (SpaceSeparator)\n//       \\u00A0 (SpaceSeparator)\n//       \\u1680 (SpaceSeparator)\n//       \\u180E (SpaceSeparator)\n//       \\u2000 (SpaceSeparator)\n//       \\u2001 (SpaceSeparator)\n//       \\u2002 (SpaceSeparator)\n//       \\u2003 (SpaceSeparator)\n//       \\u2004 (SpaceSeparator)\n//       \\u2005 (SpaceSeparator)\n//       \\u2006 (SpaceSeparator)\n//       \\u2007 (SpaceSeparator)\n//       \\u2008 (SpaceSeparator)\n//       \\u2009 (SpaceSeparator)\n//       \\u200A (SpaceSeparator)\n//       \\u2028 (LineSeparator)\n//       \\u2029 (ParagraphSeparator)\n//       \\u202F (SpaceSeparator)\n//       \\u205F (SpaceSeparator)\n//       \\u3000 (SpaceSeparator)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsSeparator#1\">Module Example\n   Public Sub Main()\n      For ctr As Integer = Convert.ToInt32(Char.MinValue) To Convert.ToInt32(Char.MaxValue)\n         Dim ch As Char = ChrW(ctr)\n         If Char.IsSeparator(ch) Then\n            Console.WriteLine(&quot;\\u{0:X4} ({1})&quot;, AscW(ch), Char.GetUnicodeCategory(ch).ToString())\n         End If\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       \\u0020 (SpaceSeparator)\n&#39;       \\u00A0 (SpaceSeparator)\n&#39;       \\u1680 (SpaceSeparator)\n&#39;       \\u180E (SpaceSeparator)\n&#39;       \\u2000 (SpaceSeparator)\n&#39;       \\u2001 (SpaceSeparator)\n&#39;       \\u2002 (SpaceSeparator)\n&#39;       \\u2003 (SpaceSeparator)\n&#39;       \\u2004 (SpaceSeparator)\n&#39;       \\u2005 (SpaceSeparator)\n&#39;       \\u2006 (SpaceSeparator)\n&#39;       \\u2007 (SpaceSeparator)\n&#39;       \\u2008 (SpaceSeparator)\n&#39;       \\u2009 (SpaceSeparator)\n&#39;       \\u200A (SpaceSeparator)\n&#39;       \\u2028 (LineSeparator)\n&#39;       \\u2029 (ParagraphSeparator)\n&#39;       \\u202F (SpaceSeparator)\n&#39;       \\u205F (SpaceSeparator)\n&#39;       \\u3000 (SpaceSeparator)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSeparator_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsSeparator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSeparator(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSeparator (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a separator character; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> The Unicode standard recognizes three subcategories of separators:  </p>\n<ul>\n<li><p>Space separators (the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), which includes characters such as \\u0020.  </p>\n</li>\n<li><p>Line separators (the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), which includes \\u2028.  </p>\n</li>\n<li><p>Paragraph separators (the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), which includes \\u2029.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The Unicode standard classifies the characters \\u000A (LF), \\u000C (FF), and \\u000D (CR) as control characters (members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category), not as separator characters.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsSeparator_\" data-linktype=\"relative-path\">IsSeparator</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsSeparator#10\">using namespace System;\nint main()\n{\n   String^ str =  &quot;twain1 twain2&quot;;\n   Console::WriteLine( Char::IsSeparator( &#39;a&#39; ) ); // Output: &quot;False&quot;\n   Console::WriteLine( Char::IsSeparator( str, 6 ) ); // Output: &quot;True&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsSeparator#10\">using System;\n\npublic class IsSeparatorSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;twain1 twain2&quot;;\n\n\t\tConsole.WriteLine(Char.IsSeparator(&#39;a&#39;));\t\t// Output: &quot;False&quot;\n\t\tConsole.WriteLine(Char.IsSeparator(str, 6));\t// Output: &quot;True&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsSeparator#10\">Imports System\n\nModule IsSeparatorSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;twain1 twain2&quot;\n\n        Console.WriteLine(Char.IsSeparator(&quot;a&quot;c))       &#39; Output: &quot;False&quot;\n        Console.WriteLine(Char.IsSeparator(str, 6))     &#39; Output: &quot;True&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSurrogate_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsSurrogate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSurrogate(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified character has a surrogate code unit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSurrogate (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is either a high surrogate or a low surrogate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A surrogate is a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode home page</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the IsSurrogate method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsSurrogate#11\">using System;\n\npublic class IsSurrogateSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;\\U00010F00&quot;; // Unicode values between 0x10000 and 0x10FFF are represented by two 16-bit &quot;surrogate&quot; characters\n\n\t\tConsole.WriteLine(Char.IsSurrogate(&#39;a&#39;));\t\t// Output: &quot;False&quot;\n\t\tConsole.WriteLine(Char.IsSurrogate(str, 0));\t// Output: &quot;True&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsSurrogate#11\">using namespace System;\nint main()\n{\n   \n   // - escape params specifying Unicode not implemented in v7.0\n   Console::WriteLine( Char::IsSurrogate( &#39;a&#39; ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsSurrogate#11\">Imports System\n\nModule IsSurrogateSample\n\n    Sub Main()\n\n        &#39; NOTE: Visual Basic doesn&#39;t give us a way to create a 32-bit Unicode \n        &#39; character composed of two 16-bit surrogate values, so a case where \n        &#39; IsSurrogate returns True cannot be included in this sample. \n\n        Console.WriteLine(Char.IsSurrogate(&quot;a&quot;c))       &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSurrogate_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsSurrogate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSurrogate(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSurrogate (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a either a high surrogate or a low surrogate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> A surrogate is a <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode home page</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsSurrogate_\" data-linktype=\"relative-path\">IsSurrogate</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.IsSurrogate#11\">using System;\n\npublic class IsSurrogateSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;\\U00010F00&quot;; // Unicode values between 0x10000 and 0x10FFF are represented by two 16-bit &quot;surrogate&quot; characters\n\n\t\tConsole.WriteLine(Char.IsSurrogate(&#39;a&#39;));\t\t// Output: &quot;False&quot;\n\t\tConsole.WriteLine(Char.IsSurrogate(str, 0));\t// Output: &quot;True&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Char.IsSurrogate#11\">using namespace System;\nint main()\n{\n   \n   // - escape params specifying Unicode not implemented in v7.0\n   Console::WriteLine( Char::IsSurrogate( &#39;a&#39; ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsSurrogate#11\">Imports System\n\nModule IsSurrogateSample\n\n    Sub Main()\n\n        &#39; NOTE: Visual Basic doesn&#39;t give us a way to create a 32-bit Unicode \n        &#39; character composed of two 16-bit surrogate values, so a case where \n        &#39; IsSurrogate returns True cannot be included in this sample. \n\n        Console.WriteLine(Char.IsSurrogate(&quot;a&quot;c))       &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSurrogatePair_System_Char_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsSurrogatePair_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSurrogatePair(Char,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the two specified <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects form a surrogate pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>highSurrogate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to evaluate as the high surrogate of a surrogate pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lowSurrogate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character to evaluate as the low surrogate of a surrogate pair.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the numeric value of the <code>highSurrogate</code> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <code>lowSurrogate</code> parameter ranges from U+DC00 through U+DFFF; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37123\" data-linktype=\"external\">Unicode home page</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_\" data-linktype=\"relative-path\">IsHighSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_\" data-linktype=\"relative-path\">IsLowSurrogate</a>, and <a class=\"xref\" href=\"system.char#System_Char_IsSurrogatePair_\" data-linktype=\"relative-path\">IsSurrogatePair</a> methods.  </p>\n<pre><code class=\"lang-cs\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    char cHigh = &#39;\\uD800&#39;;\n    char cLow  = &#39;\\uDC00&#39;;\n    string s1  = new String(new char[] {&#39;a&#39;, &#39;\\uD800&#39;, &#39;\\uDC00&#39;, &#39;z&#39;});\n    string divider = String.Concat( Environment.NewLine, new String(&#39;-&#39;, 70), \n                                    Environment.NewLine);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh);\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;);\n    Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;);\n    for(int i = 0; i &lt; s1.Length; i++)\n        {\n        Console.WriteLine(&quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[i]);\n        }\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;);\n    Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, Char.IsHighSurrogate(cLow));\n    Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, Char.IsHighSurrogate(cHigh));\n    Console.WriteLine(&quot;A3) s1[0]? - {0}&quot;, Char.IsHighSurrogate(s1, 0));\n    Console.WriteLine(&quot;A4) s1[1]? - {0}&quot;, Char.IsHighSurrogate(s1, 1));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;);\n    Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, Char.IsLowSurrogate(cLow));\n    Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, Char.IsLowSurrogate(cHigh));\n    Console.WriteLine(&quot;B3) s1[0]? - {0}&quot;, Char.IsLowSurrogate(s1, 0));\n    Console.WriteLine(&quot;B4) s1[2]? - {0}&quot;, Char.IsLowSurrogate(s1, 2));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;);\n    Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, Char.IsSurrogatePair(cHigh, cLow));\n    Console.WriteLine(&quot;C2) s1[0] and s1[1]? - {0}&quot;, Char.IsSurrogatePair(s1, 0));\n    Console.WriteLine(&quot;C3) s1[1] and s1[2]? - {0}&quot;, Char.IsSurrogatePair(s1, 1));\n    Console.WriteLine(&quot;C4) s1[2] and s1[3]? - {0}&quot;, Char.IsSurrogatePair(s1, 2));\n    Console.WriteLine(divider);\n    }\n}\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.surrogate#1\">&#39; This example demonstrates the Char.IsLowSurrogate() method\n&#39;                                    IsHighSurrogate() method\n&#39;                                    IsSurrogatePair() method\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cHigh As Char = ChrW(&amp;HD800)\n      Dim cLow  As Char = ChrW(&amp;HDC00)\n      Dim s1 = New [String](New Char() {&quot;a&quot;c, ChrW(&amp;HD800), ChrW(&amp;HDC00), &quot;z&quot;c})\n      Dim divider As String = [String].Concat(Environment.NewLine, _\n                                              New [String](&quot;-&quot;c, 70), _\n                                              Environment.NewLine)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, AscW(cHigh))\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, AscW(cLow))\n      Console.WriteLine()\n      Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;)\n      Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;)\n      Dim i As Integer\n      For i = 0 To s1.Length - 1\n         Console.WriteLine(&quot;s1({0}) = {1:X4} &quot;, i, AscW(s1.Chars(i)))\n      Next i\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;)\n      Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, [Char].IsHighSurrogate(cLow))\n      Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, [Char].IsHighSurrogate(cHigh))\n      Console.WriteLine(&quot;A3) s1(0)? - {0}&quot;, [Char].IsHighSurrogate(s1, 0))\n      Console.WriteLine(&quot;A4) s1(1)? - {0}&quot;, [Char].IsHighSurrogate(s1, 1))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;)\n      Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, [Char].IsLowSurrogate(cLow))\n      Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, [Char].IsLowSurrogate(cHigh))\n      Console.WriteLine(&quot;B3) s1(0)? - {0}&quot;, [Char].IsLowSurrogate(s1, 0))\n      Console.WriteLine(&quot;B4) s1(2)? - {0}&quot;, [Char].IsLowSurrogate(s1, 2))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;)\n      Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, [Char].IsSurrogatePair(cHigh, cLow))\n      Console.WriteLine(&quot;C2) s1(0) and s1(1)? - {0}&quot;, [Char].IsSurrogatePair(s1, 0))\n      Console.WriteLine(&quot;C3) s1(1) and s1(2)? - {0}&quot;, [Char].IsSurrogatePair(s1, 1))\n      Console.WriteLine(&quot;C4) s1(2) and s1(3)? - {0}&quot;, [Char].IsSurrogatePair(s1, 2))\n      Console.WriteLine(divider)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Hexadecimal code point of the character, cHigh: D800\n&#39;Hexadecimal code point of the character, cLow:  DC00\n&#39;\n&#39;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\n&#39;Hexadecimal code points of the characters in string, s1:\n&#39;s1(0) = 0061\n&#39;s1(1) = D800\n&#39;s1(2) = DC00\n&#39;s1(3) = 007A\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a high surrogate?\n&#39;A1) cLow?  - False\n&#39;A2) cHigh? - True\n&#39;A3) s1(0)? - False\n&#39;A4) s1(1)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a low surrogate?\n&#39;B1) cLow?  - True\n&#39;B2) cHigh? - False\n&#39;B3) s1(0)? - False\n&#39;B4) s1(2)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following pairs of characters a surrogate pair?\n&#39;C1) cHigh and cLow?  - True\n&#39;C2) s1(0) and s1(1)? - False\n&#39;C3) s1(1) and s1(2)? - True\n&#39;C4) s1(2) and s1(3)? - False\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing namespace System;\nint main()\n{\n   Char cHigh = L&#39;\\xD800&#39;;\n   Char cLow = L&#39;\\xDC00&#39;;\n   array&lt;Char&gt;^temp0 = {L&#39;a&#39;,L&#39;\\xD800&#39;,L&#39;\\xDC00&#39;,L&#39;z&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ divider = String::Concat( Environment::NewLine, gcnew String( &#39;-&#39;,70 ), Environment::NewLine );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh );\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot; );\n   Console::WriteLine( &quot;Hexadecimal code points of the characters in string, s1: &quot; );\n   for ( int i = 0; i &lt; s1-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[ i ] );\n   }\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a high surrogate?&quot; );\n   Console::WriteLine( &quot;A1) cLow?  - {0}&quot;, Char::IsHighSurrogate( cLow ) );\n   Console::WriteLine( &quot;A2) cHigh? - {0}&quot;, Char::IsHighSurrogate( cHigh ) );\n   Console::WriteLine( &quot;A3) s1[0]? - {0}&quot;, Char::IsHighSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;A4) s1[1]? - {0}&quot;, Char::IsHighSurrogate( s1, 1 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a low surrogate?&quot; );\n   Console::WriteLine( &quot;B1) cLow?  - {0}&quot;, Char::IsLowSurrogate( cLow ) );\n   Console::WriteLine( &quot;B2) cHigh? - {0}&quot;, Char::IsLowSurrogate( cHigh ) );\n   Console::WriteLine( &quot;B3) s1[0]? - {0}&quot;, Char::IsLowSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;B4) s1[2]? - {0}&quot;, Char::IsLowSurrogate( s1, 2 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following pairs of characters a surrogate pair?&quot; );\n   Console::WriteLine( &quot;C1) cHigh and cLow?  - {0}&quot;, Char::IsSurrogatePair( cHigh, cLow ) );\n   Console::WriteLine( &quot;C2) s1[0] and s1[1]? - {0}&quot;, Char::IsSurrogatePair( s1, 0 ) );\n   Console::WriteLine( &quot;C3) s1[1] and s1[2]? - {0}&quot;, Char::IsSurrogatePair( s1, 1 ) );\n   Console::WriteLine( &quot;C4) s1[2] and s1[3]? - {0}&quot;, Char::IsSurrogatePair( s1, 2 ) );\n   Console::WriteLine( divider );\n}\n\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSurrogatePair_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsSurrogatePair_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSurrogatePair(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two adjacent <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> objects at a specified position in a string form a surrogate pair.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSurrogatePair (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting position of the pair of characters to evaluate within <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>s</code> parameter includes adjacent characters at positions <code>index</code> and <code>index</code> + 1, and the numeric value of the character at position <code>index</code> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <code>index</code>+1 ranges from U+DC00 through U+DFFF; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a position within <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37123\" data-linktype=\"external\">Unicode home page</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the <a class=\"xref\" href=\"system.char#System_Char_IsHighSurrogate_\" data-linktype=\"relative-path\">IsHighSurrogate</a>, <a class=\"xref\" href=\"system.char#System_Char_IsLowSurrogate_\" data-linktype=\"relative-path\">IsLowSurrogate</a>, and IsSurrogatePair methods.  </p>\n<pre><code class=\"lang-cs\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    char cHigh = &#39;\\uD800&#39;;\n    char cLow  = &#39;\\uDC00&#39;;\n    string s1  = new String(new char[] {&#39;a&#39;, &#39;\\uD800&#39;, &#39;\\uDC00&#39;, &#39;z&#39;});\n    string divider = String.Concat( Environment.NewLine, new String(&#39;-&#39;, 70), \n                                    Environment.NewLine);\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh);\n    Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow);\n    Console.WriteLine();\n    Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;);\n    Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;);\n    for(int i = 0; i &lt; s1.Length; i++)\n        {\n        Console.WriteLine(&quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[i]);\n        }\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;);\n    Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, Char.IsHighSurrogate(cLow));\n    Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, Char.IsHighSurrogate(cHigh));\n    Console.WriteLine(&quot;A3) s1[0]? - {0}&quot;, Char.IsHighSurrogate(s1, 0));\n    Console.WriteLine(&quot;A4) s1[1]? - {0}&quot;, Char.IsHighSurrogate(s1, 1));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;);\n    Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, Char.IsLowSurrogate(cLow));\n    Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, Char.IsLowSurrogate(cHigh));\n    Console.WriteLine(&quot;B3) s1[0]? - {0}&quot;, Char.IsLowSurrogate(s1, 0));\n    Console.WriteLine(&quot;B4) s1[2]? - {0}&quot;, Char.IsLowSurrogate(s1, 2));\n    Console.WriteLine(divider);\n\n    Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;);\n    Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, Char.IsSurrogatePair(cHigh, cLow));\n    Console.WriteLine(&quot;C2) s1[0] and s1[1]? - {0}&quot;, Char.IsSurrogatePair(s1, 0));\n    Console.WriteLine(&quot;C3) s1[1] and s1[2]? - {0}&quot;, Char.IsSurrogatePair(s1, 1));\n    Console.WriteLine(&quot;C4) s1[2] and s1[3]? - {0}&quot;, Char.IsSurrogatePair(s1, 2));\n    Console.WriteLine(divider);\n    }\n}\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"char.surrogate#1\">&#39; This example demonstrates the Char.IsLowSurrogate() method\n&#39;                                    IsHighSurrogate() method\n&#39;                                    IsSurrogatePair() method\nImports System\nImports Microsoft.VisualBasic\n\nClass Sample\n   Public Shared Sub Main()\n      Dim cHigh As Char = ChrW(&amp;HD800)\n      Dim cLow  As Char = ChrW(&amp;HDC00)\n      Dim s1 = New [String](New Char() {&quot;a&quot;c, ChrW(&amp;HD800), ChrW(&amp;HDC00), &quot;z&quot;c})\n      Dim divider As String = [String].Concat(Environment.NewLine, _\n                                              New [String](&quot;-&quot;c, 70), _\n                                              Environment.NewLine)\n      \n      Console.WriteLine()\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, AscW(cHigh))\n      Console.WriteLine(&quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, AscW(cLow))\n      Console.WriteLine()\n      Console.WriteLine(&quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot;)\n      Console.WriteLine(&quot;Hexadecimal code points of the characters in string, s1: &quot;)\n      Dim i As Integer\n      For i = 0 To s1.Length - 1\n         Console.WriteLine(&quot;s1({0}) = {1:X4} &quot;, i, AscW(s1.Chars(i)))\n      Next i\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a high surrogate?&quot;)\n      Console.WriteLine(&quot;A1) cLow?  - {0}&quot;, [Char].IsHighSurrogate(cLow))\n      Console.WriteLine(&quot;A2) cHigh? - {0}&quot;, [Char].IsHighSurrogate(cHigh))\n      Console.WriteLine(&quot;A3) s1(0)? - {0}&quot;, [Char].IsHighSurrogate(s1, 0))\n      Console.WriteLine(&quot;A4) s1(1)? - {0}&quot;, [Char].IsHighSurrogate(s1, 1))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following characters a low surrogate?&quot;)\n      Console.WriteLine(&quot;B1) cLow?  - {0}&quot;, [Char].IsLowSurrogate(cLow))\n      Console.WriteLine(&quot;B2) cHigh? - {0}&quot;, [Char].IsLowSurrogate(cHigh))\n      Console.WriteLine(&quot;B3) s1(0)? - {0}&quot;, [Char].IsLowSurrogate(s1, 0))\n      Console.WriteLine(&quot;B4) s1(2)? - {0}&quot;, [Char].IsLowSurrogate(s1, 2))\n      Console.WriteLine(divider)\n      \n      Console.WriteLine(&quot;Is each of the following pairs of characters a surrogate pair?&quot;)\n      Console.WriteLine(&quot;C1) cHigh and cLow?  - {0}&quot;, [Char].IsSurrogatePair(cHigh, cLow))\n      Console.WriteLine(&quot;C2) s1(0) and s1(1)? - {0}&quot;, [Char].IsSurrogatePair(s1, 0))\n      Console.WriteLine(&quot;C3) s1(1) and s1(2)? - {0}&quot;, [Char].IsSurrogatePair(s1, 1))\n      Console.WriteLine(&quot;C4) s1(2) and s1(3)? - {0}&quot;, [Char].IsSurrogatePair(s1, 2))\n      Console.WriteLine(divider)\n   End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;Hexadecimal code point of the character, cHigh: D800\n&#39;Hexadecimal code point of the character, cLow:  DC00\n&#39;\n&#39;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\n&#39;Hexadecimal code points of the characters in string, s1:\n&#39;s1(0) = 0061\n&#39;s1(1) = D800\n&#39;s1(2) = DC00\n&#39;s1(3) = 007A\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a high surrogate?\n&#39;A1) cLow?  - False\n&#39;A2) cHigh? - True\n&#39;A3) s1(0)? - False\n&#39;A4) s1(1)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following characters a low surrogate?\n&#39;B1) cLow?  - True\n&#39;B2) cHigh? - False\n&#39;B3) s1(0)? - False\n&#39;B4) s1(2)? - True\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n&#39;Is each of the following pairs of characters a surrogate pair?\n&#39;C1) cHigh and cLow?  - True\n&#39;C2) s1(0) and s1(1)? - False\n&#39;C3) s1(1) and s1(2)? - True\n&#39;C4) s1(2) and s1(3)? - False\n&#39;\n&#39;----------------------------------------------------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"char.surrogate#1\">// This example demonstrates the Char.IsLowSurrogate() method\n//                                    IsHighSurrogate() method\n//                                    IsSurrogatePair() method\nusing namespace System;\nint main()\n{\n   Char cHigh = L&#39;\\xD800&#39;;\n   Char cLow = L&#39;\\xDC00&#39;;\n   array&lt;Char&gt;^temp0 = {L&#39;a&#39;,L&#39;\\xD800&#39;,L&#39;\\xDC00&#39;,L&#39;z&#39;};\n   String^ s1 = gcnew String( temp0 );\n   String^ divider = String::Concat( Environment::NewLine, gcnew String( &#39;-&#39;,70 ), Environment::NewLine );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cHigh: {0:X4}&quot;, (int)cHigh );\n   Console::WriteLine( &quot;Hexadecimal code point of the character, cLow:  {0:X4}&quot;, (int)cLow );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Characters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;&quot; );\n   Console::WriteLine( &quot;Hexadecimal code points of the characters in string, s1: &quot; );\n   for ( int i = 0; i &lt; s1-&gt;Length; i++ )\n   {\n      Console::WriteLine( &quot;s1[{0}] = {1:X4} &quot;, i, (int)s1[ i ] );\n   }\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a high surrogate?&quot; );\n   Console::WriteLine( &quot;A1) cLow?  - {0}&quot;, Char::IsHighSurrogate( cLow ) );\n   Console::WriteLine( &quot;A2) cHigh? - {0}&quot;, Char::IsHighSurrogate( cHigh ) );\n   Console::WriteLine( &quot;A3) s1[0]? - {0}&quot;, Char::IsHighSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;A4) s1[1]? - {0}&quot;, Char::IsHighSurrogate( s1, 1 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following characters a low surrogate?&quot; );\n   Console::WriteLine( &quot;B1) cLow?  - {0}&quot;, Char::IsLowSurrogate( cLow ) );\n   Console::WriteLine( &quot;B2) cHigh? - {0}&quot;, Char::IsLowSurrogate( cHigh ) );\n   Console::WriteLine( &quot;B3) s1[0]? - {0}&quot;, Char::IsLowSurrogate( s1, 0 ) );\n   Console::WriteLine( &quot;B4) s1[2]? - {0}&quot;, Char::IsLowSurrogate( s1, 2 ) );\n   Console::WriteLine( divider );\n   Console::WriteLine( &quot;Is each of the following pairs of characters a surrogate pair?&quot; );\n   Console::WriteLine( &quot;C1) cHigh and cLow?  - {0}&quot;, Char::IsSurrogatePair( cHigh, cLow ) );\n   Console::WriteLine( &quot;C2) s1[0] and s1[1]? - {0}&quot;, Char::IsSurrogatePair( s1, 0 ) );\n   Console::WriteLine( &quot;C3) s1[1] and s1[2]? - {0}&quot;, Char::IsSurrogatePair( s1, 1 ) );\n   Console::WriteLine( &quot;C4) s1[2] and s1[3]? - {0}&quot;, Char::IsSurrogatePair( s1, 2 ) );\n   Console::WriteLine( divider );\n}\n\n/*\nThis example produces the following results:\n\nHexadecimal code point of the character, cHigh: D800\nHexadecimal code point of the character, cLow:  DC00\n\nCharacters in string, s1: &#39;a&#39;, high surrogate, low surrogate, &#39;z&#39;\nHexadecimal code points of the characters in string, s1:\ns1[0] = 0061\ns1[1] = D800\ns1[2] = DC00\ns1[3] = 007A\n\n----------------------------------------------------------------------\n\nIs each of the following characters a high surrogate?\nA1) cLow?  - False\nA2) cHigh? - True\nA3) s1[0]? - False\nA4) s1[1]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following characters a low surrogate?\nB1) cLow?  - True\nB2) cHigh? - False\nB3) s1[0]? - False\nB4) s1[2]? - True\n\n----------------------------------------------------------------------\n\nIs each of the following pairs of characters a surrogate pair?\nC1) cHigh and cLow?  - True\nC2) s1[0] and s1[1]? - False\nC3) s1[1] and s1[2]? - True\nC4) s1[2] and s1[3]? - False\n\n----------------------------------------------------------------------\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSymbol_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsSymbol_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSymbol(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as a symbol character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSymbol (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is a symbol character; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid symbols are members of the following categories in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>MathSymbol</code>, <code>CurrencySymbol</code>, <code>ModifierSymbol</code>, and <code>OtherSymbol</code>.  </p>\n<p> Symbols in the Unicode standard are a loosely defined set of characters that include the following:  </p>\n<ul>\n<li><p>Currency symbols.  </p>\n</li>\n<li><p>Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as â„…, â„–, and â„¢.  </p>\n</li>\n<li><p>Number forms, such as subscripts and superscripts.  </p>\n</li>\n<li><p>Mathematical operators and arrows.  </p>\n</li>\n<li><p>Geometric symbols.  </p>\n</li>\n<li><p>Technical symbols.  </p>\n</li>\n<li><p>Braille patterns.  </p>\n</li>\n<li><p>Dingbats.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates IsSymbol.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsSymbol#12\">using namespace System;\nint main()\n{\n   String^ str =  &quot;non-symbolic characters&quot;;\n   Console::WriteLine( Char::IsSymbol( &#39;+&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsSymbol( str, 8 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsSymbol#12\">using System;\n\npublic class IsSymbolSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;non-symbolic characters&quot;; \n\n\t\tConsole.WriteLine(Char.IsSymbol(&#39;+&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsSymbol(str, 8));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsSymbol#12\">Imports System\n\nModule IsSymbolSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;non-symbolic characters&quot;\n\n        Console.WriteLine(Char.IsSymbol(&quot;+&quot;c))      &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsSymbol(str, 8))    &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsSymbol_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsSymbol_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSymbol(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsSymbol (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is a symbol character; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> Valid symbols are members of the following categories in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">System.Globalization.UnicodeCategory</a>: <code>MathSymbol</code>, <code>CurrencySymbol</code>, <code>ModifierSymbol</code>, and <code>OtherSymbol</code>.  </p>\n<p> Symbols in the Unicode standard are a loosely defined set of characters that include the following:  </p>\n<ul>\n<li><p>Currency symbols.  </p>\n</li>\n<li><p>Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as â„…, â„–, and â„¢.  </p>\n</li>\n<li><p>Number forms, such as subscripts and superscripts.  </p>\n</li>\n<li><p>Mathematical operators and arrows.  </p>\n</li>\n<li><p>Geometric symbols.  </p>\n</li>\n<li><p>Technical symbols.  </p>\n</li>\n<li><p>Braille patterns.  </p>\n</li>\n<li><p>Dingbats.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsSymbol_\" data-linktype=\"relative-path\">IsSymbol</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsSymbol#12\">using namespace System;\nint main()\n{\n   String^ str =  &quot;non-symbolic characters&quot;;\n   Console::WriteLine( Char::IsSymbol( &#39;+&#39; ) ); // Output: &quot;True&quot;\n   Console::WriteLine( Char::IsSymbol( str, 8 ) ); // Output: &quot;False&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsSymbol#12\">using System;\n\npublic class IsSymbolSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;non-symbolic characters&quot;; \n\n\t\tConsole.WriteLine(Char.IsSymbol(&#39;+&#39;));\t\t// Output: &quot;True&quot;\n\t\tConsole.WriteLine(Char.IsSymbol(str, 8));\t// Output: &quot;False&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsSymbol#12\">Imports System\n\nModule IsSymbolSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;non-symbolic characters&quot;\n\n        Console.WriteLine(Char.IsSymbol(&quot;+&quot;c))      &#39; Output: &quot;True&quot;\n        Console.WriteLine(Char.IsSymbol(str, 8))    &#39; Output: &quot;False&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsUpper_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUpper(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as an uppercase letter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsUpper (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is an uppercase letter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Valid uppercase letters are members of the following category in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>UppercaseLetter</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsUpper_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUpper(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsUpper (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is an uppercase letter; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> Valid uppercase letters are members of the following category in <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a>: <code>UppercaseLetter</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsWhiteSpace_System_Char_\">\r\n    \r\n            <a id=\"System_Char_IsWhiteSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsWhiteSpace(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified Unicode character is categorized as white space.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsWhiteSpace (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to evaluate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>c</code> is white space; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>White space characters are the following Unicode characters:  </p>\n<ul>\n<li><p>Members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).  </p>\n</li>\n<li><p>Members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> category, which consists solely of the LINE SEPARATOR character (U+2028).  </p>\n</li>\n<li><p>Members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).  </p>\n</li>\n<li><p>The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the IsWhiteSpace method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsWhiteSpace#14\">using namespace System;\nint main()\n{\n   String^ str =  &quot;black matter&quot;;\n   Console::WriteLine( Char::IsWhiteSpace( &#39;A&#39; ) ); // Output: &quot;False&quot;\n   Console::WriteLine( Char::IsWhiteSpace( str, 5 ) ); // Output: &quot;True&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsWhiteSpace#14\">imports System\n\nModule IsWhiteSpaceSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;black matter&quot;\n\n        Console.WriteLine(Char.IsWhiteSpace(&quot;A&quot;c))      &#39; Output: &quot;False&quot;\n        Console.WriteLine(Char.IsWhiteSpace(str, 5))    &#39; Output: &quot;True&quot;\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsWhiteSpace#14\">using System;\n\npublic class IsWhiteSpaceSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;black matter&quot;; \n\n\t\tConsole.WriteLine(Char.IsWhiteSpace(&#39;A&#39;));\t\t// Output: &quot;False&quot;\n\t\tConsole.WriteLine(Char.IsWhiteSpace(str, 5));\t// Output: &quot;True&quot;\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_IsWhiteSpace_System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Char_IsWhiteSpace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsWhiteSpace(String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the character at the specified position in a specified string is categorized as white space.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool IsWhiteSpace (string s, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The position of the character to evaluate in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the character at position <code>index</code> in <code>s</code> is white space; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero or greater than the last position in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Character positions in a string are indexed starting from zero.  </p>\n<p> White space characters are the following Unicode characters:  </p>\n<ul>\n<li><p>Members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).  </p>\n</li>\n<li><p>Members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> category, which consists solely of the LINE SEPARATOR character (U+2028).  </p>\n</li>\n<li><p>Members of the <a class=\"xref\" href=\"system.globalization.unicodecategory\" data-linktype=\"relative-path\">UnicodeCategory</a> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).  </p>\n</li>\n<li><p>The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_IsWhiteSpace_\" data-linktype=\"relative-path\">IsWhiteSpace</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.IsWhiteSpace#14\">using namespace System;\nint main()\n{\n   String^ str =  &quot;black matter&quot;;\n   Console::WriteLine( Char::IsWhiteSpace( &#39;A&#39; ) ); // Output: &quot;False&quot;\n   Console::WriteLine( Char::IsWhiteSpace( str, 5 ) ); // Output: &quot;True&quot;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.IsWhiteSpace#14\">imports System\n\nModule IsWhiteSpaceSample\n\n    Sub Main()\n\n        Dim str As String\n        str = &quot;black matter&quot;\n\n        Console.WriteLine(Char.IsWhiteSpace(&quot;A&quot;c))      &#39; Output: &quot;False&quot;\n        Console.WriteLine(Char.IsWhiteSpace(str, 5))    &#39; Output: &quot;True&quot;\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.IsWhiteSpace#14\">using System;\n\npublic class IsWhiteSpaceSample {\n\tpublic static void Main() {\n\t\tstring str = &quot;black matter&quot;; \n\n\t\tConsole.WriteLine(Char.IsWhiteSpace(&#39;A&#39;));\t\t// Output: &quot;False&quot;\n\t\tConsole.WriteLine(Char.IsWhiteSpace(str, 5));\t// Output: &quot;True&quot;\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Char_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified string to its equivalent Unicode character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char Parse (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a single character, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A Unicode character equivalent to the sole character in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The length of <code>s</code> is not 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates Parse.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.Parse#15\">using namespace System;\nint main()\n{\n   Console::WriteLine( Char::Parse(  &quot;A&quot; ) ); // Output: &#39;A&#39;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.Parse#15\">imports System\n\nModule ParseSample\n\n    Sub Main()\n\n        Console.WriteLine(Char.Parse(&quot;A&quot;)) &#39; Output: &#39;A&#39;\n\n    End Sub\n\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.Parse#15\">using System;\n\npublic class ParseSample {\n\tpublic static void Main() {\n\t\tConsole.WriteLine(Char.Parse(&quot;A&quot;)); // Output: &#39;A&#39;\n\t}\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToLower_System_Char_\">\r\n    \r\n            <a id=\"System_Char_ToLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLower(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a Unicode character to its lowercase equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToLower (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The lowercase equivalent of <code>c</code>, or the unchanged value of <code>c</code>, if <code>c</code> is already lowercase or not alphabetic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Casing rules are obtained from the current culture.  </p>\n<p> Use <a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> to convert a string to lowercase.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates <a class=\"xref\" href=\"system.char#System_Char_ToLower_\" data-linktype=\"relative-path\">ToLower</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.ToLower#16\">using namespace System;\nusing namespace System::Globalization;\n\n// for CultureInfo\nvoid main()\n{\n   Console::WriteLine( Char::ToLower( &#39;A&#39; ) ); // Output: &quot;a&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.ToLower#16\">using System;\nusing System.Globalization;  // for CultureInfo\n\npublic class ToLowerSample {\n\tpublic static void Main() {\n\t\tConsole.WriteLine(Char.ToLower(&#39;A&#39;));\t\t\t\t// Output: &quot;a&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToLower#16\">imports System\n\nModule ToLowerSample\n\n    Sub Main()\n        Console.WriteLine(Char.ToLower(&quot;A&quot;c))               &#39; Output: &quot;a&quot;\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToLower_System_Char_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Char_ToLower_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLower(Char,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToLower (char c, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific casing rules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The lowercase equivalent of <code>c</code>, modified according to <code>culture</code>, or the unchanged value of <code>c</code>, if <code>c</code> is already lowercase or not alphabetic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <a class=\"xref\" href=\"system.string#System_String_ToLower_\" data-linktype=\"relative-path\">ToLower</a> to convert a string to lowercase.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates ToLower.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.ToLower#16\">using namespace System;\nusing namespace System::Globalization;\n\n// for CultureInfo\nvoid main()\n{\n   Console::WriteLine( Char::ToLower( &#39;A&#39; ) ); // Output: &quot;a&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.ToLower#16\">using System;\nusing System.Globalization;  // for CultureInfo\n\npublic class ToLowerSample {\n\tpublic static void Main() {\n\t\tConsole.WriteLine(Char.ToLower(&#39;A&#39;));\t\t\t\t// Output: &quot;a&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToLower#16\">imports System\n\nModule ToLowerSample\n\n    Sub Main()\n        Console.WriteLine(Char.ToLower(&quot;A&quot;c))               &#39; Output: &quot;a&quot;\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToLowerInvariant_System_Char_\">\r\n    \r\n            <a id=\"System_Char_ToLowerInvariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToLowerInvariant(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToLowerInvariant (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The lowercase equivalent of the <code>c</code> parameter, or the unchanged value of <code>c</code>, if <code>c</code> is already lowercase or not alphabetic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the ToLowerInvariant method. The ToLowerInvariant method is equivalent to <code>ToLower(Char, CultureInfo.InvariantCulture)</code>.  </p>\n<p> Use <a class=\"xref\" href=\"system.string#System_String_ToLowerInvariant_\" data-linktype=\"relative-path\">ToLowerInvariant</a> to convert a string to lowercase.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToString\">\r\n    \r\n            <a id=\"System_Char_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates ToString.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.ToString#17\">using namespace System;\nint main()\n{\n   char ch = &#39;a&#39;;\n   Console::WriteLine( ch ); // Output: &quot;a&quot;\n   Console::WriteLine( Char::ToString( &#39;b&#39; ) ); // Output: &quot;b&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.ToString#17\">using System;\n\npublic class ToStringSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;a&#39;;\n\t\tConsole.WriteLine(ch.ToString());\t\t// Output: &quot;a&quot;\n\n\t\tConsole.WriteLine(Char.ToString(&#39;b&#39;));\t// Output: &quot;b&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToString#17\">Imports System\n\nModule ToStringSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;a&quot;c\n        Console.WriteLine(ch.ToString())        &#39; Output: &quot;a&quot;\n\n        Console.WriteLine(Char.ToString(&quot;b&quot;c))  &#39; Output: &quot;b&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToString_System_Char_\">\r\n    \r\n            <a id=\"System_Char_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified Unicode character to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static string ToString (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of <code>c</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates <a class=\"xref\" href=\"system.char#System_Char_ToString_\" data-linktype=\"relative-path\">ToString</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.ToString#17\">using namespace System;\nint main()\n{\n   char ch = &#39;a&#39;;\n   Console::WriteLine( ch ); // Output: &quot;a&quot;\n   Console::WriteLine( Char::ToString( &#39;b&#39; ) ); // Output: &quot;b&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.ToString#17\">using System;\n\npublic class ToStringSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;a&#39;;\n\t\tConsole.WriteLine(ch.ToString());\t\t// Output: &quot;a&quot;\n\n\t\tConsole.WriteLine(Char.ToString(&#39;b&#39;));\t// Output: &quot;b&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToString#17\">Imports System\n\nModule ToStringSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;a&quot;c\n        Console.WriteLine(ch.ToString())        &#39; Output: &quot;a&quot;\n\n        Console.WriteLine(Char.ToString(&quot;b&quot;c))  &#39; Output: &quot;b&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>(Reserved) An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>provider</code> parameter is ignored; it does not participate in this operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates an overload of <a class=\"xref\" href=\"system.char#System_Char_ToString_\" data-linktype=\"relative-path\">ToString</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Char.ToString#17\">using namespace System;\nint main()\n{\n   char ch = &#39;a&#39;;\n   Console::WriteLine( ch ); // Output: &quot;a&quot;\n   Console::WriteLine( Char::ToString( &#39;b&#39; ) ); // Output: &quot;b&quot;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Char.ToString#17\">using System;\n\npublic class ToStringSample {\n\tpublic static void Main() {\n\t\tchar ch = &#39;a&#39;;\n\t\tConsole.WriteLine(ch.ToString());\t\t// Output: &quot;a&quot;\n\n\t\tConsole.WriteLine(Char.ToString(&#39;b&#39;));\t// Output: &quot;b&quot;\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToString#17\">Imports System\n\nModule ToStringSample\n\n    Sub Main()\n\n        Dim ch As Char\n        ch = &quot;a&quot;c\n        Console.WriteLine(ch.ToString())        &#39; Output: &quot;a&quot;\n\n        Console.WriteLine(Char.ToString(&quot;b&quot;c))  &#39; Output: &quot;b&quot;\n\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToUpper_System_Char_\">\r\n    \r\n            <a id=\"System_Char_ToUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpper(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a Unicode character to its uppercase equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToUpper (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The uppercase equivalent of <code>c</code>, or the unchanged value of <code>c</code> if <code>c</code> is already uppercase, has no uppercase equivalent, or is not alphabetic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Casing rules are obtained from the current culture.  </p>\n<p> Use <a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> to convert a string to uppercase.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each character in an array to its uppercase equivalent.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.ToUpper#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      char[] chars = { &#39;e&#39;, &#39;E&#39;, &#39;6&#39;, &#39;,&#39;, &#39;Ð¶&#39;, &#39;&#228;&#39; };\n      foreach (var ch in chars)\n          Console.WriteLine(&quot;{0} --&gt; {1} {2}&quot;, ch, Char.ToUpper(ch),\n                            ch == Char.ToUpper(ch) ? &quot;(Same Character)&quot; : &quot;&quot; );\n   }\n}\n// The example displays the following output:\n//       e --&gt; E\n//       E --&gt; E (Same Character)\n//       6 --&gt; 6 (Same Character)\n//       , --&gt; , (Same Character)\n//       ? --&gt; ?\n//       &#228; --&gt; &#196;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToUpper#1\">Module Example\n   Public Sub Main()\n      Dim chars() As Char = { &quot;e&quot;c, &quot;E&quot;c, &quot;6&quot;c, &quot;,&quot;c, &quot;Ð¶&quot;c, &quot;&#228;&quot;c }\n      For Each ch In chars\n         Console.WriteLine(&quot;{0} --&gt; {1} {2}&quot;, ch, Char.ToUpper(ch),\n                           If(ch = Char.ToUpper(ch), &quot;(Same Character)&quot;, &quot;&quot;))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       e --&gt; E\n&#39;       E --&gt; E (Same Character)\n&#39;       6 --&gt; 6 (Same Character)\n&#39;       , --&gt; , (Same Character)\n&#39;       Ð¶ --&gt; Ð–\n&#39;       &#228; --&gt; &#196;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToUpper_System_Char_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Char_ToUpper_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpper(Char,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToUpper (char c, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific casing rules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The uppercase equivalent of <code>c</code>, modified according to <code>culture</code>, or the unchanged value of <code>c</code> if <code>c</code> is already uppercase, has no uppercase equivalent, or is not alphabetic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>culture</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use <a class=\"xref\" href=\"system.string#System_String_ToUpper_\" data-linktype=\"relative-path\">ToUpper</a> to convert a string to uppercase.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture. In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case. The lowercase &quot;i&quot; character (U+0069) converts to &quot;I&quot; (U+0049) in the en-US and invariant cultures, but to &quot;Ä°&quot; (U+0130) in the tr-TR culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Char.ToUpper#2\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo[] cultures= { CultureInfo.CreateSpecificCulture(&quot;en-US&quot;), \n                                CultureInfo.InvariantCulture, \n                                CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;) };\n      Char[] chars = {&#39;&#228;&#39;, &#39;e&#39;, &#39;E&#39;, &#39;i&#39;, &#39;I&#39; };\n\n      Console.WriteLine(&quot;Character     en-US     Invariant     tr-TR&quot;);\n      foreach (var ch in chars) {\n         Console.Write(&quot;    {0}&quot;, ch);\n         foreach (var culture in cultures) \n            Console.Write(&quot;{0,12}&quot;, Char.ToUpper(ch, culture));\n\n         Console.WriteLine();\n      }   \n   }\n}\n// The example displays the following output:\n//       Character     en-US     Invariant     tr-TR\n//           &#228;           &#196;           &#196;           &#196;\n//           e           E           E           E\n//           E           E           E           E\n//           i           I           I           Ä°\n//           I           I           I           I\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Char.ToUpper#2\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cultures() As CultureInfo = { CultureInfo.CreateSpecificCulture(&quot;en-US&quot;), \n                                        CultureInfo.InvariantCulture, \n                                        CultureInfo.CreateSpecificCulture(&quot;tr-TR&quot;) }\n      Dim chars() As Char = {&quot;&#228;&quot;c, &quot;e&quot;c, &quot;E&quot;c, &quot;i&quot;c, &quot;I&quot;c }\n\n      Console.WriteLine(&quot;Character     en-US     Invariant     tr-TR&quot;)\n      For Each ch In chars\n         Console.Write(&quot;    {0}&quot;, ch)\n         For Each culture In cultures\n            Console.Write(&quot;{0,12}&quot;, Char.ToUpper(ch, culture))\n         Next\n         Console.WriteLine()\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Character     en-US     Invariant     tr-TR\n&#39;           &#228;           &#196;           &#196;           &#196;\n&#39;           e           E           E           E\n&#39;           E           E           E           E\n&#39;           i           I           I           Ä°\n&#39;           I           I           I           I    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_ToUpperInvariant_System_Char_\">\r\n    \r\n            <a id=\"System_Char_ToUpperInvariant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUpperInvariant(Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char ToUpperInvariant (char c);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>c</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Unicode character to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The uppercase equivalent of the <code>c</code> parameter, or the unchanged value of <code>c</code>, if <code>c</code> is already uppercase or not alphabetic.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the ToUpperInvariant method.  The ToUpperInvariant method is equivalent to <code>ToUpper(Char, CultureInfo.InvariantCulture)</code>.  </p>\n<p> Use <a class=\"xref\" href=\"system.string#System_String_ToUpperInvariant_\" data-linktype=\"relative-path\">ToUpperInvariant</a> to convert a string to uppercase.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_TryParse_System_String_System_Char__\">\r\n    \r\n            <a id=\"System_Char_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,Char)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, out char result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A string that contains a single character, or <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains a Unicode character equivalent to the sole character in <code>s</code>, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <code>s</code> parameter is <code>null</code> or the length of <code>s</code> is not 1. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>s</code> parameter was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The TryParse method is like the <a class=\"xref\" href=\"system.char#System_Char_Parse_\" data-linktype=\"relative-path\">Parse</a> method, except the TryParse method does not throw an exception if the conversion fails.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates overloads of the TryParse method for several base types, and the <a class=\"xref\" href=\"system.datetime#System_DateTime_TryParseExact_\" data-linktype=\"relative-path\">TryParseExact</a> method for the <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> base type.  </p>\n<pre><code class=\"lang-cpp\" name=\"T.TryParse#1\">// This example demonstrates overloads of the TryParse method for\n// several base types, and the TryParseExact method for DateTime.\n// In most cases, this example uses the most complex overload; that is, the overload\n// with the most parameters for a particular type. If a complex overload specifies\n// null (Nothing in Visual Basic) for the IFormatProvider parameter, formatting\n// information is obtained from the culture associated with the current thread.\n// If a complex overload specifies the style parameter, the parameter value is\n// the default value used by the equivalent simple overload.\nusing namespace System;\nusing namespace System::Globalization;\n\nstatic void Show( bool parseResult, String^ typeName, String^ parseValue )\n{\n   String^ msgSuccess = L&quot;Parse for {0} = {1}&quot;;\n   String^ msgFailure = L&quot;** Parse for {0} failed. Invalid input.&quot;;\n   \n   //\n   if ( parseResult == true )\n      Console::WriteLine( msgSuccess, typeName, parseValue );\n   else\n      Console::WriteLine( msgFailure, typeName );\n}\n\nvoid main()\n{\n   bool result;\n   CultureInfo^ ci;\n   String^ nl = Environment::NewLine;\n   String^ msg1 = L&quot;This example demonstrates overloads of the TryParse method for{0}&quot;\n   L&quot;several base types, as well as the TryParseExact method for DateTime.{0}&quot;;\n   String^ msg2 = L&quot;Non-numeric types:{0}&quot;;\n   String^ msg3 = L&quot;{0}Numeric types:{0}&quot;;\n   String^ msg4 = L&quot;{0}The following types are not CLS-compliant:{0}&quot;;\n   \n   // Non-numeric types.\n   Boolean booleanVal;\n   Char charVal;\n   DateTime datetimeVal;\n   \n   // Numeric types.\n   Byte byteVal;\n   Int16 int16Val;\n   Int32 int32Val;\n   Int64 int64Val;\n   Decimal decimalVal;\n   Single singleVal;\n   Double doubleVal;\n   \n   // The following types are not CLS-compliant.\n   SByte sbyteVal;\n   UInt16 uint16Val;\n   UInt32 uint32Val;\n   UInt64 uint64Val;\n   \n   //\n   Console::WriteLine( msg1, nl );\n   \n   // Non-numeric types:\n   Console::WriteLine( msg2, nl );\n   \n   // DateTime\n   // TryParse:\n   // Assume current culture is en-US, and dates of the form: MMDDYYYY.\n   result = DateTime::TryParse( L&quot;7/4/2004 12:34:56&quot;,  datetimeVal );\n   Show( result, L&quot;DateTime #1&quot;, datetimeVal.ToString() );\n   \n   // Use fr-FR culture, and dates of the form: DDMMYYYY.\n   ci = gcnew CultureInfo( L&quot;fr-FR&quot; );\n   result = DateTime::TryParse( L&quot;4/7/2004 12:34:56&quot;, ci, DateTimeStyles::None,  datetimeVal );\n   Show( result, L&quot;DateTime #2&quot;, datetimeVal.ToString() );\n   \n   // TryParseExact:\n   // Use fr-FR culture. The format, &quot;G&quot;, is short date and long time.\n   result = DateTime::TryParseExact( L&quot;04/07/2004 12:34:56&quot;, L&quot;G&quot;, ci, DateTimeStyles::None,  datetimeVal );\n   Show( result, L&quot;DateTime #3&quot;, datetimeVal.ToString() );\n   \n   // Assume en-US culture.\n   array&lt;String^&gt;^dateFormats = {L&quot;f&quot;,L&quot;F&quot;,L&quot;g&quot;,L&quot;G&quot;};\n   result = DateTime::TryParseExact( L&quot;7/4/2004 12:34:56 PM&quot;, dateFormats, nullptr, DateTimeStyles::None,  datetimeVal );\n   Show( result, L&quot;DateTime #4&quot;, datetimeVal.ToString() );\n   Console::WriteLine();\n   \n   // Boolean\n   result = Boolean::TryParse( L&quot;true&quot;,  booleanVal );\n   Show( result, L&quot;Boolean&quot;, booleanVal.ToString() );\n   \n   // Char\n   result = Char::TryParse( L&quot;A&quot;,  charVal );\n   Show( result, L&quot;Char&quot;, charVal.ToString() );\n   \n   // Numeric types:\n   Console::WriteLine( msg3, nl );\n   \n   // Byte\n   result = Byte::TryParse( L&quot;1&quot;, NumberStyles::Integer, nullptr,  byteVal );\n   Show( result, L&quot;Byte&quot;, byteVal.ToString() );\n   \n   // Int16\n   result = Int16::TryParse( L&quot;-2&quot;, NumberStyles::Integer, nullptr,  int16Val );\n   Show( result, L&quot;Int16&quot;, int16Val.ToString() );\n   \n   // Int32\n   result = Int32::TryParse( L&quot;3&quot;, NumberStyles::Integer, nullptr,  int32Val );\n   Show( result, L&quot;Int32&quot;, int32Val.ToString() );\n   \n   // Int64\n   result = Int64::TryParse( L&quot;4&quot;, NumberStyles::Integer, nullptr,  int64Val );\n   Show( result, L&quot;Int64&quot;, int64Val.ToString() );\n   \n   // Decimal\n   result = Decimal::TryParse( L&quot;-5.5&quot;, NumberStyles::Number, nullptr,  decimalVal );\n   Show( result, L&quot;Decimal&quot;, decimalVal.ToString() );\n   \n   // Single\n   result = Single::TryParse( L&quot;6.6&quot;, static_cast&lt;NumberStyles&gt;((NumberStyles::Float | NumberStyles::AllowThousands)), nullptr,  singleVal );\n   Show( result, L&quot;Single&quot;, singleVal.ToString() );\n   \n   // Double\n   result = Double::TryParse( L&quot;-7&quot;, static_cast&lt;NumberStyles&gt;(NumberStyles::Float | NumberStyles::AllowThousands), nullptr,  doubleVal );\n   Show( result, L&quot;Double&quot;, doubleVal.ToString() );\n   \n   // Use the simple Double.TryParse overload, but specify an invalid value.\n   result = Double::TryParse( L&quot;abc&quot;,  doubleVal );\n   Show( result, L&quot;Double #2&quot;, doubleVal.ToString() );\n   \n   //\n   Console::WriteLine( msg4, nl );\n   \n   // SByte\n   result = SByte::TryParse( L&quot;-8&quot;, NumberStyles::Integer, nullptr,  sbyteVal );\n   Show( result, L&quot;SByte&quot;, sbyteVal.ToString() );\n   \n   // UInt16\n   result = UInt16::TryParse( L&quot;9&quot;, NumberStyles::Integer, nullptr,  uint16Val );\n   Show( result, L&quot;UInt16&quot;, uint16Val.ToString() );\n   \n   // UInt32\n   result = UInt32::TryParse( L&quot;10&quot;, NumberStyles::Integer, nullptr,  uint32Val );\n   Show( result, L&quot;UInt32&quot;, uint32Val.ToString() );\n   \n   // UInt64\n   result = UInt64::TryParse( L&quot;11&quot;, NumberStyles::Integer, nullptr,  uint64Val );\n   Show( result, L&quot;UInt64&quot;, uint64Val.ToString() );\n}\n\n/*\nThis example produces the following results:\n\nThis example demonstrates overloads of the TryParse method for\nseveral base types, as well as the TryParseExact method for DateTime.\n\nNon-numeric types:\n\nParse for DateTime #1 = 7/4/2004 12:34:56 PM\nParse for DateTime #2 = 7/4/2004 12:34:56 PM\nParse for DateTime #3 = 7/4/2004 12:34:56 PM\nParse for DateTime #4 = 7/4/2004 12:34:56 PM\n\nParse for Boolean = True\nParse for Char = A\n\nNumeric types:\n\nParse for Byte = 1\nParse for Int16 = -2\nParse for Int32 = 3\nParse for Int64 = 4\nParse for Decimal = -5.5\nParse for Single = 6.6\nParse for Double = -7\n** Parse for Double #2 failed. Invalid input.\n\nThe following types are not CLS-compliant:\n\nParse for SByte = -8\nParse for UInt16 = 9\nParse for UInt32 = 10\nParse for UInt64 = 11\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"T.TryParse#1\">// This example demonstrates overloads of the TryParse method for\n// several base types, and the TryParseExact method for DateTime.\n\n// In most cases, this example uses the most complex overload; that is, the overload \n// with the most parameters for a particular type. If a complex overload specifies \n// null (Nothing in Visual Basic) for the IFormatProvider parameter, formatting \n// information is obtained from the culture associated with the current thread. \n// If a complex overload specifies the style parameter, the parameter value is \n// the default value used by the equivalent simple overload.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n    bool     result;\n    CultureInfo ci;\n    string   nl = Environment.NewLine;\n    string   msg1 = \n             &quot;This example demonstrates overloads of the TryParse method for{0}&quot; +\n             &quot;several base types, as well as the TryParseExact method for DateTime.{0}&quot;;\n    string   msg2 = &quot;Non-numeric types:{0}&quot;;\n    string   msg3 = &quot;{0}Numeric types:{0}&quot;;\n    string   msg4 = &quot;{0}The following types are not CLS-compliant:{0}&quot;;\n\n// Non-numeric types.\n    Boolean  booleanVal;\n    Char     charVal;\n    DateTime datetimeVal;\n\n// Numeric types.\n    Byte     byteVal;\n    Int16    int16Val;\n    Int32    int32Val;\n    Int64    int64Val;\n    Decimal  decimalVal;\n    Single   singleVal;\n    Double   doubleVal;\n\n// The following types are not CLS-compliant.\n    SByte    sbyteVal;\n    UInt16   uint16Val;\n    UInt32   uint32Val;\n    UInt64   uint64Val;\n//\n    Console.WriteLine(msg1, nl);\n\n// Non-numeric types:\n    Console.WriteLine(msg2, nl);\n// DateTime\n  // TryParse:\n    // Assume current culture is en-US, and dates of the form: MMDDYYYY.\n    result = DateTime.TryParse(&quot;7/4/2004 12:34:56&quot;, out datetimeVal);\n    Show(result, &quot;DateTime #1&quot;, datetimeVal.ToString());\n\n    // Use fr-FR culture, and dates of the form: DDMMYYYY.\n    ci = new CultureInfo(&quot;fr-FR&quot;);\n    result = DateTime.TryParse(&quot;4/7/2004 12:34:56&quot;, \n             ci, DateTimeStyles.None, out datetimeVal);\n    Show(result, &quot;DateTime #2&quot;, datetimeVal.ToString());\n\n  // TryParseExact:\n    // Use fr-FR culture. The format, &quot;G&quot;, is short date and long time.\n    result = DateTime.TryParseExact(&quot;04/07/2004 12:34:56&quot;, &quot;G&quot;, \n             ci, DateTimeStyles.None, out datetimeVal);\n    Show(result, &quot;DateTime #3&quot;, datetimeVal.ToString());\n\n    // Assume en-US culture.\n    string[] dateFormats = {&quot;f&quot;, &quot;F&quot;, &quot;g&quot;, &quot;G&quot;};\n    result = DateTime.TryParseExact(&quot;7/4/2004 12:34:56 PM&quot;, \n             dateFormats, null, DateTimeStyles.None, \n             out datetimeVal);\n    Show(result, &quot;DateTime #4&quot;, datetimeVal.ToString());\n\n    Console.WriteLine();\n// Boolean\n    result = Boolean.TryParse(&quot;true&quot;, out booleanVal);\n    Show(result, &quot;Boolean&quot;, booleanVal.ToString());\n// Char\n    result = Char.TryParse(&quot;A&quot;, out charVal);\n    Show(result, &quot;Char&quot;, charVal.ToString());\n\n// Numeric types:\n    Console.WriteLine(msg3, nl);\n// Byte\n    result = Byte.TryParse(&quot;1&quot;, NumberStyles.Integer, null, out byteVal);\n    Show(result, &quot;Byte&quot;, byteVal.ToString());\n// Int16\n    result = Int16.TryParse(&quot;-2&quot;, NumberStyles.Integer, null, out int16Val);\n    Show(result, &quot;Int16&quot;, int16Val.ToString());\n// Int32\n    result = Int32.TryParse(&quot;3&quot;, NumberStyles.Integer, null, out int32Val);\n    Show(result, &quot;Int32&quot;, int32Val.ToString());\n// Int64\n    result = Int64.TryParse(&quot;4&quot;, NumberStyles.Integer, null, out int64Val);\n    Show(result, &quot;Int64&quot;, int64Val.ToString());\n// Decimal\n    result = Decimal.TryParse(&quot;-5.5&quot;, NumberStyles.Number, null, out decimalVal);\n    Show(result, &quot;Decimal&quot;, decimalVal.ToString());\n// Single\n    result = Single.TryParse(&quot;6.6&quot;, \n             (NumberStyles.Float | NumberStyles.AllowThousands), \n             null, out singleVal);\n    Show(result, &quot;Single&quot;, singleVal.ToString());\n// Double\n    result = Double.TryParse(&quot;-7&quot;, \n             (NumberStyles.Float | NumberStyles.AllowThousands), \n             null, out doubleVal);\n    Show(result, &quot;Double&quot;, doubleVal.ToString());\n\n// Use the simple Double.TryParse overload, but specify an invalid value.\n\n    result = Double.TryParse(&quot;abc&quot;, out doubleVal);\n    Show(result, &quot;Double #2&quot;, doubleVal.ToString());\n//\n    Console.WriteLine(msg4, nl);\n// SByte\n    result = SByte.TryParse(&quot;-8&quot;, NumberStyles.Integer, null, out sbyteVal);\n    Show(result, &quot;SByte&quot;, sbyteVal.ToString());\n// UInt16\n    result = UInt16.TryParse(&quot;9&quot;, NumberStyles.Integer, null, out uint16Val);\n    Show(result, &quot;UInt16&quot;, uint16Val.ToString());\n// UInt32\n    result = UInt32.TryParse(&quot;10&quot;, NumberStyles.Integer, null, out uint32Val);\n    Show(result, &quot;UInt32&quot;, uint32Val.ToString());\n// UInt64\n    result = UInt64.TryParse(&quot;11&quot;, NumberStyles.Integer, null, out uint64Val);\n    Show(result, &quot;UInt64&quot;, uint64Val.ToString());\n    }\n\n    protected static void Show(bool parseResult, string typeName, \n                               string parseValue)\n    {\n    string msgSuccess = &quot;Parse for {0} = {1}&quot;;\n    string msgFailure = &quot;** Parse for {0} failed. Invalid input.&quot;;\n//\n    if (parseResult == true)\n        Console.WriteLine(msgSuccess, typeName, parseValue);\n    else\n        Console.WriteLine(msgFailure, typeName);\n   }\n}\n/*\nThis example produces the following results:\n\nThis example demonstrates overloads of the TryParse method for\nseveral base types, as well as the TryParseExact method for DateTime.\n\nNon-numeric types:\n\nParse for DateTime #1 = 7/4/2004 12:34:56 PM\nParse for DateTime #2 = 7/4/2004 12:34:56 PM\nParse for DateTime #3 = 7/4/2004 12:34:56 PM\nParse for DateTime #4 = 7/4/2004 12:34:56 PM\n\nParse for Boolean = True\nParse for Char = A\n\nNumeric types:\n\nParse for Byte = 1\nParse for Int16 = -2\nParse for Int32 = 3\nParse for Int64 = 4\nParse for Decimal = -5.5\nParse for Single = 6.6\nParse for Double = -7\n** Parse for Double #2 failed. Invalid input.\n\nThe following types are not CLS-compliant:\n\nParse for SByte = -8\nParse for UInt16 = 9\nParse for UInt32 = 10\nParse for UInt64 = 11\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"T.TryParse#1\">&#39; This example demonstrates overloads of the TryParse method for\n&#39; several base types, and the TryParseExact method for DateTime.\n&#39; In most cases, this example uses the most complex overload; that is, the overload \n&#39; with the most parameters for a particular type. If a complex overload specifies \n&#39; null (Nothing in Visual Basic) for the IFormatProvider parameter, formatting \n&#39; information is obtained from the culture associated with the current thread. \n&#39; If a complex overload specifies the style parameter, the parameter value is \n&#39; the default value used by the equivalent simple overload.\n\nImports System\nImports System.Globalization\n\nClass Sample\n   Public Shared Sub Main()\n      Dim result As Boolean\n      Dim ci As CultureInfo\n      Dim nl As String = Environment.NewLine\n      Dim msg1 As String = _\n                 &quot;This example demonstrates overloads of the TryParse method for{0}&quot; &amp; _\n                 &quot;several base types, as well as the TryParseExact method for DateTime.{0}&quot;\n      Dim msg2 As String = &quot;Non-numeric types:{0}&quot;\n      Dim msg3 As String = &quot;{0}Numeric types:{0}&quot;\n      Dim msg4 As String = &quot;{0}The following types are not CLS-compliant:{0}&quot;\n      \n      &#39; Non-numeric types.\n      Dim booleanVal As [Boolean]\n      Dim charVal As [Char]\n      Dim datetimeVal As DateTime\n      \n      &#39; Numeric types.\n      Dim byteVal As [Byte]\n      Dim int16Val As Int16\n      Dim int32Val As Int32\n      Dim int64Val As Int64\n      Dim decimalVal As [Decimal]\n      Dim singleVal As [Single]\n      Dim doubleVal As [Double]\n      \n      &#39; The following types are not CLS-compliant.\n      Dim sbyteVal As SByte\n      Dim uint16Val As UInt16\n      Dim uint32Val As UInt32\n      Dim uint64Val As UInt64\n      &#39;\n      Console.WriteLine(msg1, nl)\n      \n      &#39; Non-numeric types:\n      Console.WriteLine(msg2, nl)\n      &#39; DateTime\n      &#39; TryParse:\n      &#39; Assume current culture is en-US, and dates of the form: MMDDYYYY.\n      result = DateTime.TryParse(&quot;7/4/2004 12:34:56&quot;, datetimeVal)\n      Show(result, &quot;DateTime #1&quot;, datetimeVal.ToString())\n      \n      &#39; Use fr-FR culture, and dates of the form: DDMMYYYY.\n      ci = New CultureInfo(&quot;fr-FR&quot;)\n      result = DateTime.TryParse(&quot;4/7/2004 12:34:56&quot;, ci, DateTimeStyles.None, datetimeVal)\n      Show(result, &quot;DateTime #2&quot;, datetimeVal.ToString())\n      \n      &#39; TryParseExact:\n      &#39; Use fr-FR culture. The format, &quot;G&quot;, is short date and long time.\n      result = DateTime.TryParseExact(&quot;04/07/2004 12:34:56&quot;, &quot;G&quot;, ci, DateTimeStyles.None, datetimeVal)\n      Show(result, &quot;DateTime #3&quot;, datetimeVal.ToString())\n      \n      &#39; Assume en-US culture.\n      Dim dateFormats As String() =  {&quot;f&quot;, &quot;F&quot;, &quot;g&quot;, &quot;G&quot;}\n      result = DateTime.TryParseExact(&quot;7/4/2004 12:34:56 PM&quot;, dateFormats, Nothing, DateTimeStyles.None, datetimeVal)\n      Show(result, &quot;DateTime #4&quot;, datetimeVal.ToString())\n      \n      Console.WriteLine()\n      &#39; Boolean\n      result = [Boolean].TryParse(&quot;true&quot;, booleanVal)\n      Show(result, &quot;Boolean&quot;, booleanVal.ToString())\n      &#39; Char\n      result = [Char].TryParse(&quot;A&quot;, charVal)\n      Show(result, &quot;Char&quot;, charVal.ToString())\n      \n      &#39; Numeric types:\n      Console.WriteLine(msg3, nl)\n      &#39; Byte\n      result = [Byte].TryParse(&quot;1&quot;, NumberStyles.Integer, Nothing, byteVal)\n      Show(result, &quot;Byte&quot;, byteVal.ToString())\n      &#39; Int16\n      result = Int16.TryParse(&quot;-2&quot;, NumberStyles.Integer, Nothing, int16Val)\n      Show(result, &quot;Int16&quot;, int16Val.ToString())\n      &#39; Int32\n      result = Int32.TryParse(&quot;3&quot;, NumberStyles.Integer, Nothing, int32Val)\n      Show(result, &quot;Int32&quot;, int32Val.ToString())\n      &#39; Int64\n      result = Int64.TryParse(&quot;4&quot;, NumberStyles.Integer, Nothing, int64Val)\n      Show(result, &quot;Int64&quot;, int64Val.ToString())\n      &#39; Decimal\n      result = [Decimal].TryParse(&quot;-5.5&quot;, NumberStyles.Number, Nothing, decimalVal)\n      Show(result, &quot;Decimal&quot;, decimalVal.ToString())\n      &#39; Single\n      result = [Single].TryParse(&quot;6.6&quot;, NumberStyles.Float Or NumberStyles.AllowThousands, Nothing, singleVal)\n      Show(result, &quot;Single&quot;, singleVal.ToString())\n      &#39; Double\n      result = [Double].TryParse(&quot;-7&quot;, NumberStyles.Float Or NumberStyles.AllowThousands, Nothing, doubleVal)\n      Show(result, &quot;Double&quot;, doubleVal.ToString())\n      \n      &#39; Use the simple Double.TryParse overload, but specify an invalid value.\n      result = [Double].TryParse(&quot;abc&quot;, doubleVal)\n      Show(result, &quot;Double #2&quot;, doubleVal.ToString())\n      &#39;\n      Console.WriteLine(msg4, nl)\n      &#39; SByte\n      result = SByte.TryParse(&quot;-8&quot;, NumberStyles.Integer, Nothing, sbyteVal)\n      Show(result, &quot;SByte&quot;, sbyteVal.ToString())\n      &#39; UInt16\n      result = UInt16.TryParse(&quot;9&quot;, NumberStyles.Integer, Nothing, uint16Val)\n      Show(result, &quot;UInt16&quot;, uint16Val.ToString())\n      &#39; UInt32\n      result = UInt32.TryParse(&quot;10&quot;, NumberStyles.Integer, Nothing, uint32Val)\n      Show(result, &quot;UInt32&quot;, uint32Val.ToString())\n      &#39; UInt64\n      result = UInt64.TryParse(&quot;11&quot;, NumberStyles.Integer, Nothing, uint64Val)\n      Show(result, &quot;UInt64&quot;, uint64Val.ToString())\n   End Sub &#39;Main\n   \n   \n   Protected Shared Sub Show(parseResult As Boolean, typeName As String, parseValue As String)\n      Dim msgSuccess As String = &quot;Parse for {0} = {1}&quot;\n      Dim msgFailure As String = &quot;** Parse for {0} failed. Invalid input.&quot;\n      &#39;\n      If parseResult = True Then\n         Console.WriteLine(msgSuccess, typeName, parseValue)\n      Else\n         Console.WriteLine(msgFailure, typeName)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample &#39;\n&#39;This example produces the following results:\n&#39;\n&#39;This example demonstrates overloads of the TryParse method for\n&#39;several base types, as well as the TryParseExact method for DateTime.\n&#39;\n&#39;Non-numeric types:\n&#39;\n&#39;Parse for DateTime #1 = 7/4/2004 12:34:56 PM\n&#39;Parse for DateTime #2 = 7/4/2004 12:34:56 PM\n&#39;Parse for DateTime #3 = 7/4/2004 12:34:56 PM\n&#39;Parse for DateTime #4 = 7/4/2004 12:34:56 PM\n&#39;\n&#39;Parse for Boolean = True\n&#39;Parse for Char = A\n&#39;\n&#39;Numeric types:\n&#39;\n&#39;Parse for Byte = 1\n&#39;Parse for Int16 = -2\n&#39;Parse for Int32 = 3\n&#39;Parse for Int64 = 4\n&#39;Parse for Decimal = -5.5\n&#39;Parse for Single = 6.6\n&#39;Parse for Double = -7\n&#39;** Parse for Double #2 failed. Invalid input.\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;\n&#39;Parse for SByte = -8\n&#39;Parse for UInt16 = 9\n&#39;Parse for UInt32 = 10\n&#39;Parse for UInt64 = 11\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported. No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToByte(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToChar*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToInt16(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToInt32(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToInt64(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToSByte(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p><strong>Note</strong> This conversion is not supported. Attempting to do so throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>No value is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An object of the specified type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object cannot be converted to the type specified by the <code>type</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_System_Object_System_Type_System_IFormatProvider_\" data-linktype=\"relative-path\">ChangeType(Object,Type,IFormatProvider)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object. (Specify <code>null</code> because the <code>provider</code> parameter is ignored.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToUInt16(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object. (Specify <code>null</code> because the <code>provider</code> parameter is ignored.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToUInt32(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Char_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Char_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object. (Specify <code>null</code> because the <code>provider</code> parameter is ignored.)</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The converted value of the current <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_System_Char_\" data-linktype=\"relative-path\">System.Convert.ToUInt64(Char)</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Char.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Char.yml\">\r\n<meta name=\"APIName\" content=\"System.Char\">\r\n<meta name=\"APIName\" content=\"System.Char.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Char.ConvertFromUtf32\">\r\n<meta name=\"APIName\" content=\"System.Char.ConvertToUtf32\">\r\n<meta name=\"APIName\" content=\"System.Char.Equals\">\r\n<meta name=\"APIName\" content=\"System.Char.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Char.GetNumericValue\">\r\n<meta name=\"APIName\" content=\"System.Char.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Char.GetUnicodeCategory\">\r\n<meta name=\"APIName\" content=\"System.Char.IsControl\">\r\n<meta name=\"APIName\" content=\"System.Char.IsDigit\">\r\n<meta name=\"APIName\" content=\"System.Char.IsHighSurrogate\">\r\n<meta name=\"APIName\" content=\"System.Char.IsLetter\">\r\n<meta name=\"APIName\" content=\"System.Char.IsLetterOrDigit\">\r\n<meta name=\"APIName\" content=\"System.Char.IsLower\">\r\n<meta name=\"APIName\" content=\"System.Char.IsLowSurrogate\">\r\n<meta name=\"APIName\" content=\"System.Char.IsNumber\">\r\n<meta name=\"APIName\" content=\"System.Char.IsPunctuation\">\r\n<meta name=\"APIName\" content=\"System.Char.IsSeparator\">\r\n<meta name=\"APIName\" content=\"System.Char.IsSurrogate\">\r\n<meta name=\"APIName\" content=\"System.Char.IsSurrogatePair\">\r\n<meta name=\"APIName\" content=\"System.Char.IsSymbol\">\r\n<meta name=\"APIName\" content=\"System.Char.IsUpper\">\r\n<meta name=\"APIName\" content=\"System.Char.IsWhiteSpace\">\r\n<meta name=\"APIName\" content=\"System.Char.MaxValue\">\r\n<meta name=\"APIName\" content=\"System.Char.MinValue\">\r\n<meta name=\"APIName\" content=\"System.Char.Parse\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Char.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Char.ToLower\">\r\n<meta name=\"APIName\" content=\"System.Char.ToLowerInvariant\">\r\n<meta name=\"APIName\" content=\"System.Char.ToString\">\r\n<meta name=\"APIName\" content=\"System.Char.ToUpper\">\r\n<meta name=\"APIName\" content=\"System.Char.ToUpperInvariant\">\r\n<meta name=\"APIName\" content=\"System.Char.TryParse\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6ce57be0-bd93-4b91-1ad9-0862743e5cc2\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System\\Char.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a character as a UTF-16 code unit.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Char\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Char.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Char.yml","open_to_public_contributors":true,"api_name":["System.Char","System.Char.CompareTo","System.Char.ConvertFromUtf32","System.Char.ConvertToUtf32","System.Char.Equals","System.Char.GetHashCode","System.Char.GetNumericValue","System.Char.GetTypeCode","System.Char.GetUnicodeCategory","System.Char.IsControl","System.Char.IsDigit","System.Char.IsHighSurrogate","System.Char.IsLetter","System.Char.IsLetterOrDigit","System.Char.IsLower","System.Char.IsLowSurrogate","System.Char.IsNumber","System.Char.IsPunctuation","System.Char.IsSeparator","System.Char.IsSurrogate","System.Char.IsSurrogatePair","System.Char.IsSymbol","System.Char.IsUpper","System.Char.IsWhiteSpace","System.Char.MaxValue","System.Char.MinValue","System.Char.Parse","System.Char.IConvertible.ToBoolean","System.Char.IConvertible.ToByte","System.Char.IConvertible.ToChar","System.Char.IConvertible.ToDateTime","System.Char.IConvertible.ToDecimal","System.Char.IConvertible.ToDouble","System.Char.IConvertible.ToInt16","System.Char.IConvertible.ToInt32","System.Char.IConvertible.ToInt64","System.Char.IConvertible.ToSByte","System.Char.IConvertible.ToSingle","System.Char.IConvertible.ToType","System.Char.IConvertible.ToUInt16","System.Char.IConvertible.ToUInt32","System.Char.IConvertible.ToUInt64","System.Char.ToLower","System.Char.ToLowerInvariant","System.Char.ToString","System.Char.ToUpper","System.Char.ToUpperInvariant","System.Char.TryParse"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Char","System::Char","System.Char.CompareTo","System::Char::CompareTo","System.Char.ConvertFromUtf32","System::Char::ConvertFromUtf32","System.Char.ConvertToUtf32","System::Char::ConvertToUtf32","System.Char.Equals","System::Char::Equals","System.Char.GetHashCode","System::Char::GetHashCode","System.Char.GetNumericValue","System::Char::GetNumericValue","System.Char.GetTypeCode","System::Char::GetTypeCode","System.Char.GetUnicodeCategory","System::Char::GetUnicodeCategory","System.Char.IsControl","System::Char::IsControl","System.Char.IsDigit","System::Char::IsDigit","System.Char.IsHighSurrogate","System::Char::IsHighSurrogate","System.Char.IsLetter","System::Char::IsLetter","System.Char.IsLetterOrDigit","System::Char::IsLetterOrDigit","System.Char.IsLower","System::Char::IsLower","System.Char.IsLowSurrogate","System::Char::IsLowSurrogate","System.Char.IsNumber","System::Char::IsNumber","System.Char.IsPunctuation","System::Char::IsPunctuation","System.Char.IsSeparator","System::Char::IsSeparator","System.Char.IsSurrogate","System::Char::IsSurrogate","System.Char.IsSurrogatePair","System::Char::IsSurrogatePair","System.Char.IsSymbol","System::Char::IsSymbol","System.Char.IsUpper","System::Char::IsUpper","System.Char.IsWhiteSpace","System::Char::IsWhiteSpace","System.Char.MaxValue","System::Char::MaxValue","System.Char.MinValue","System::Char::MinValue","System.Char.Parse","System::Char::Parse","System.Char.System#IConvertible#ToBoolean","System::Char::System#IConvertible#ToBoolean","System.Char.System#IConvertible#ToByte","System::Char::System#IConvertible#ToByte","System.Char.System#IConvertible#ToChar","System::Char::System#IConvertible#ToChar","System.Char.System#IConvertible#ToDateTime","System::Char::System#IConvertible#ToDateTime","System.Char.System#IConvertible#ToDecimal","System::Char::System#IConvertible#ToDecimal","System.Char.System#IConvertible#ToDouble","System::Char::System#IConvertible#ToDouble","System.Char.System#IConvertible#ToInt16","System::Char::System#IConvertible#ToInt16","System.Char.System#IConvertible#ToInt32","System::Char::System#IConvertible#ToInt32","System.Char.System#IConvertible#ToInt64","System::Char::System#IConvertible#ToInt64","System.Char.System#IConvertible#ToSByte","System::Char::System#IConvertible#ToSByte","System.Char.System#IConvertible#ToSingle","System::Char::System#IConvertible#ToSingle","System.Char.System#IConvertible#ToType","System::Char::System#IConvertible#ToType","System.Char.System#IConvertible#ToUInt16","System::Char::System#IConvertible#ToUInt16","System.Char.System#IConvertible#ToUInt32","System::Char::System#IConvertible#ToUInt32","System.Char.System#IConvertible#ToUInt64","System::Char::System#IConvertible#ToUInt64","System.Char.ToLower","System::Char::ToLower","System.Char.ToLowerInvariant","System::Char::ToLowerInvariant","System.Char.ToString","System::Char::ToString","System.Char.ToUpper","System::Char::ToUpper","System.Char.ToUpperInvariant","System::Char::ToUpperInvariant","System.Char.TryParse","System::Char::TryParse"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6ce57be0-bd93-4b91-1ad9-0862743e5cc2","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System\\Char.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Char.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Char struct | Microsoft Docs","_op_ogTitle":"Char struct","description":"Represents a character as a UTF-16 code unit.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Char","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.char","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.char","fileRelativePath":"System.Char.html"},"themesRelativePathToOutputRoot":"_themes/"}