{"content":"    \r\n    <h1 id=\"System_Globalization_UmAlQuraCalendar\">\r\n      <span class=\"lang-csharp\">UmAlQuraCalendar</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents the Saudi Hijri (Um Al Qura) calendar.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class UmAlQuraCalendar : System.Globalization.Calendar</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">System.Globalization.Calendar</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">UmAlQuraCalendar</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddDays_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddDays(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddHours_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddHours(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMilliseconds_System_DateTime_System_Double_\" data-linktype=\"relative-path\">AddMilliseconds(DateTime,Double)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddMinutes_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddMinutes(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddSeconds_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddSeconds(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AddWeeks_System_DateTime_System_Int32_\" data-linktype=\"relative-path\">AddWeeks(DateTime,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_Clone\" data-linktype=\"relative-path\">Clone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_CurrentEra\" data-linktype=\"relative-path\">CurrentEra</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetDaysInMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetDaysInYear_System_Int32_\" data-linktype=\"relative-path\">GetDaysInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetHour_System_DateTime_\" data-linktype=\"relative-path\">GetHour(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetLeapMonth_System_Int32_\" data-linktype=\"relative-path\">GetLeapMonth(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMilliseconds_System_DateTime_\" data-linktype=\"relative-path\">GetMilliseconds(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMinute_System_DateTime_\" data-linktype=\"relative-path\">GetMinute(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetMonthsInYear_System_Int32_\" data-linktype=\"relative-path\">GetMonthsInYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetSecond_System_DateTime_\" data-linktype=\"relative-path\">GetSecond(DateTime)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_GetWeekOfYear_System_DateTime_System_Globalization_CalendarWeekRule_System_DayOfWeek_\" data-linktype=\"relative-path\">GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapDay_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapDay(Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapMonth_System_Int32_System_Int32_\" data-linktype=\"relative-path\">IsLeapMonth(Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsLeapYear_System_Int32_\" data-linktype=\"relative-path\">IsLeapYear(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ReadOnly_System_Globalization_Calendar_\" data-linktype=\"relative-path\">ReadOnly(Calendar)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"relative-path\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The UmAlQuraCalendar class is nearly identical to the <a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a> class, except the Um Al Qura calendar uses a table-based algorithm licensed from the Saudi government to calculate dates, can express dates to the year 1500 A.H., and does not support the <a class=\"xref\" href=\"system.globalization.hijricalendar#System_Globalization_HijriCalendar_HijriAdjustment_\" data-linktype=\"relative-path\">HijriAdjustment</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about using the UmAlQuraCalendar class and the other calendar classes in the .NET Framework, see <a href=\"../Topic/Working%20with%20Calendars.md\" data-linktype=\"relative-path\">Working with Calendars</a>.  </p>\n</div>\n<p> For the UmAlQuraCalendar class, each month has either 29 or 30 days, but usually in no discernible order. Whereas the documentation for the Hijri Calendar gives a table that shows the corresponding days in each month, no such general table can be produced for the Um Al Qura calendar.  </p>\n<p> For more information about the Hijri calendar, see the <a class=\"xref\" href=\"system.globalization.hijricalendar\" data-linktype=\"relative-path\">HijriCalendar</a> class.  </p>\n<p> <strong>Note</strong> The UmAlQuraCalendar class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar__ctor\" data-linktype=\"self-bookmark\">UmAlQuraCalendar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"self-bookmark\">UmAlQuraEra</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the current era. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_AlgorithmType\" data-linktype=\"self-bookmark\">AlgorithmType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_DaysInYearBeforeMinSupportedYear\" data-linktype=\"self-bookmark\">DaysInYearBeforeMinSupportedYear</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of days in the year that precedes the year that is specified by the <span class=\"xref\">stem.Globalization.UmAlQuraCalendar.MinSupportedDateTime*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_Eras\" data-linktype=\"self-bookmark\">Eras</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a list of the eras that are supported by the current <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_MaxSupportedDateTime\" data-linktype=\"self-bookmark\">MaxSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the latest date and time supported by this calendar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_MinSupportedDateTime\" data-linktype=\"self-bookmark\">MinSupportedDateTime</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the earliest date and time supported by this calendar.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_TwoDigitYearMax\" data-linktype=\"self-bookmark\">TwoDigitYearMax</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_AddMonths_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddMonths(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates a date that is a specified number of months away from a specified initial date.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_AddYears_System_DateTime_System_Int32_\" data-linktype=\"self-bookmark\">AddYears(DateTime,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates a date that is a specified number of years away from a specified initial date.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetDayOfMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the day of the month on which a specified date occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetDayOfWeek_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfWeek(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the day of the week on which a specified date occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetDayOfYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetDayOfYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the day of the year on which a specified date occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of days in the specified month of the specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetDaysInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetDaysInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of days in the specified year of the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetEra_System_DateTime_\" data-linktype=\"self-bookmark\">GetEra(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the era in which a specified date occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetLeapMonth_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetLeapMonth(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetMonth_System_DateTime_\" data-linktype=\"self-bookmark\">GetMonth(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the month in which a specified date occurs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetMonthsInYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">GetMonthsInYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the number of months in the specified year of the specified era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_GetYear_System_DateTime_\" data-linktype=\"self-bookmark\">GetYear(DateTime)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Calculates the year of a date represented by a specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapDay(Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified date is a leap day.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapMonth(Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified month in the specified year and era is a leap month.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_IsLeapYear_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">IsLeapYear(Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date, time, and era.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Globalization_UmAlQuraCalendar_ToFourDigitYear_System_Int32_\" data-linktype=\"self-bookmark\">ToFourDigitYear(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.UmAlQuraCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar__ctor\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UmAlQuraCalendar()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public UmAlQuraCalendar ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_UmAlQuraEra\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UmAlQuraEra</div>        \r\n          </div>\r\n    \r\n            <p>Represents the current era. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const int UmAlQuraEra = 1;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the UmAlQuraEra field is 1.  </p>\n<p> The Um Al Qura calendar recognizes one era: A.H. (Latin &quot;Anno Hegirae&quot;, which means &quot;the year of the migration,&quot; in reference to the migration of Muhammad (PBUH) from Mecca).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_AlgorithmType\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_AlgorithmType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlgorithmType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a></div>\r\n                  </div>\r\n                  <p>Always returns <a class=\"xref\" href=\"system.globalization.calendaralgorithmtype\" data-linktype=\"relative-path\">CalendarAlgorithmType</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses reflection to instantiate each <a class=\"xref\" href=\"system.globalization.calendar\" data-linktype=\"relative-path\">Calendar</a> type found in the .NET Framework and displays the value of its <a class=\"xref\" href=\"system.globalization.calendar#System_Globalization_Calendar_AlgorithmType_\" data-linktype=\"relative-path\">AlgorithmType</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AlgorithmType#1\">using System;\nusing System.Collections;\nusing System.Globalization;\nusing System.Reflection;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetAssembly(typeof(Calendar));\n      Type[] types = assem.GetExportedTypes();\n      Type[] calendars = Array.FindAll(types, IsValidCalendar);\n      Array.Sort(calendars, new CalendarComparer());\n\n      Console.WriteLine(&quot;{0,-30} {1}<br>&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;);\n      foreach (var cal in calendars) {\n         // Instantiate a calendar object.\n         ConstructorInfo ctor = cal.GetConstructor( new Type[] {} );\n         Calendar calObj = (Calendar) ctor.Invoke( new Type[] {} ); \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty,\n                                           null, calObj, null));\n      }\n   }\n\n   private static bool IsValidCalendar(Type t)\n   {\n        if (t.IsSubclassOf(typeof(Calendar)))\n            if (t.IsAbstract)\n                return false;\n            else\n                return true;\n        else\n            return false;\n   }\n}\n\npublic class CalendarComparer : IComparer\n{\n   public int Compare(object x, object y)\n   {\n      Type tX = (Type) x;\n      Type tY = (Type) y;\n\n      return tX.Name.CompareTo(tY.Name);\n   }\n}\n// The example displays the following output:\n//       Calendar                       Algorithm Type\n//       \n//       ChineseLunisolarCalendar       LunisolarCalendar\n//       GregorianCalendar              SolarCalendar\n//       HebrewCalendar                 LunisolarCalendar\n//       HijriCalendar                  LunarCalendar\n//       JapaneseCalendar               SolarCalendar\n//       JapaneseLunisolarCalendar      LunisolarCalendar\n//       JulianCalendar                 SolarCalendar\n//       KoreanCalendar                 SolarCalendar\n//       KoreanLunisolarCalendar        LunisolarCalendar\n//       PersianCalendar                SolarCalendar\n//       TaiwanCalendar                 SolarCalendar\n//       TaiwanLunisolarCalendar        LunisolarCalendar\n//       ThaiBuddhistCalendar           SolarCalendar\n//       UmAlQuraCalendar               LunarCalendar\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AlgorithmType#1\">Imports System.Collections\nImports System.Globalization\nImports System.Reflection\n\nModule Example\n   Public Sub Main()\n      Dim assem As Assembly = Assembly.GetAssembly(GetType(Calendar))\n      Dim types() As Type = assem.GetExportedTypes()\n      Dim calendars() As Type = Array.FindAll(types, AddressOf IsValidCalendar)\n      Array.Sort(calendars, New CalendarComparer())\n\n      Console.WriteLine(&quot;{0,-30} {1}&quot;, &quot;Calendar&quot;, &quot;Algorithm Type&quot;)\n      Console.WriteLine()\n      For Each cal In calendars\n         &#39; Instantiate a calendar object.\n         Dim ctor As ConstructorInfo = cal.GetConstructor( {} )\n         Dim calObj As Calendar = CType(ctor.Invoke( {} ), Calendar) \n\n         Console.WriteLine(&quot;{0,-30} {1}&quot;, \n                          cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;),\n                          cal.InvokeMember(&quot;AlgorithmType&quot;, \n                                           BindingFlags.Public Or BindingFlags.Instance Or BindingFlags.GetProperty,\n                                           Nothing, calObj, Nothing))\n      Next\n   End Sub\n   \n   Private Function IsValidCalendar(ByVal t As Type) As Boolean\n        If t.IsSubClassOf(GetType(Calendar)) Then\n            If t.IsAbstract Then\n                Return False\n            Else\n                Return True\n            End If\n        Else\n            Return False\n        End If\n    End Function\nEnd Module\n\nPublic Class CalendarComparer : Implements IComparer\n   Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer _\n                  Implements IComparer.Compare\n      Dim tX As Type = DirectCast(x, Type)\n      Dim tY As Type = DirectCast(y, Type)\n\n      Return tX.Name.CompareTo(tY.Name)\n   End Function\nEnd Class\n&#39; The example displays the following output:\n&#39;       Calendar                       Algorithm Type\n&#39;       \n&#39;       ChineseLunisolarCalendar       LunisolarCalendar\n&#39;       GregorianCalendar              SolarCalendar\n&#39;       HebrewCalendar                 LunisolarCalendar\n&#39;       HijriCalendar                  LunarCalendar\n&#39;       JapaneseCalendar               SolarCalendar\n&#39;       JapaneseLunisolarCalendar      LunisolarCalendar\n&#39;       JulianCalendar                 SolarCalendar\n&#39;       KoreanCalendar                 SolarCalendar\n&#39;       KoreanLunisolarCalendar        LunisolarCalendar\n&#39;       PersianCalendar                SolarCalendar\n&#39;       TaiwanCalendar                 SolarCalendar\n&#39;       TaiwanLunisolarCalendar        LunisolarCalendar\n&#39;       ThaiBuddhistCalendar           SolarCalendar\n&#39;       UmAlQuraCalendar               LunarCalendar\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_DaysInYearBeforeMinSupportedYear\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_DaysInYearBeforeMinSupportedYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DaysInYearBeforeMinSupportedYear</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of days in the year that precedes the year that is specified by the <span class=\"xref\">stem.Globalization.UmAlQuraCalendar.MinSupportedDateTime*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override int DaysInYearBeforeMinSupportedYear { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the year that precedes the year specified by <span class=\"xref\">stem.Globalization.UmAlQuraCalendar.MinSupportedDateTime*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a constant value of 384.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_Eras\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_Eras_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Eras</div>        \r\n          </div>\r\n    \r\n            <p>Gets a list of the eras that are supported by the current <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int[] Eras { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>An array that consists of a single element having a value that is <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Hijri calendar recognizes one era: A.H. (Latin &quot;Anno Hegirae&quot;, which means &quot;the year of the migration,&quot; in reference to the migration of Muhammad (PBUH) from Mecca). This property always returns an array with only one element.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_MaxSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_MaxSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the latest date and time supported by this calendar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MaxSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The latest date and time supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class, which is equivalent to the last moment of November 16, 2077 C.E. in the Gregorian calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> Starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v45-md.md&quot; -->.NET Framework 4.5<!--END INCLUDE -->, the value of the MaxSupportedDateTime property is 11/16/2077. In previous versions of the .NET Framework, its value is the last moment of May 13, 2029 C.E. in the Gregorian calendar.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the date ranges supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class in both the Gregorian and Um Al Qura calendars.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Calendar cal = new UmAlQuraCalendar();\n      DateTime minDate = cal.MinSupportedDateTime;\n      DateTime maxDate = cal.MaxSupportedDateTime;\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;);\n      // Is UmAlQuraCalendar the current calendar?\n      if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;)) {\n         Calendar greg = new GregorianCalendar();\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate);\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate);\n      }\n      // Is Gregorian the current calendar?\n      else if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;)) {         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }   \n      // Display ranges if some other calendar is current.\n      else {\n         GregorianCalendar greg = new GregorianCalendar();          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }\n   }\n}            \n// The example displays output similar to the following:\n//    Range of the Um Al Qura calendar:\n//       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n//       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">Imports System.Globalization\n   \nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim minDate As Date = cal.MinSupportedDateTime\n      Dim maxDate As Date = cal.MaxSupportedDateTime\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;)\n      &#39; Is UmAlQuraCalendar the current calendar?\n      If DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;) Then\n         Dim greg As New GregorianCalendar()\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate)\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate)\n      &#39; Is Gregorian the current calendar?\n      ElseIf DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;) Then         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      &#39; Display ranges if some other calendar is current.\n      Else\n         Dim greg As New GregorianCalendar()          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    Range of the Um Al Qura calendar:\n&#39;       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n&#39;       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_MinSupportedDateTime\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_MinSupportedDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinSupportedDateTime</div>        \r\n          </div>\r\n    \r\n            <p>Gets the earliest date and time supported by this calendar.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime MinSupportedDateTime { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The earliest date and time supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class, which is equivalent to the first moment of April 30, 1900 C.E. in the Gregorian calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the date ranges supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class in both the Gregorian and Um Al Qura calendars.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Calendar cal = new UmAlQuraCalendar();\n      DateTime minDate = cal.MinSupportedDateTime;\n      DateTime maxDate = cal.MaxSupportedDateTime;\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;);\n      // Is UmAlQuraCalendar the current calendar?\n      if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;)) {\n         Calendar greg = new GregorianCalendar();\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate);\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate);\n      }\n      // Is Gregorian the current calendar?\n      else if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;)) {         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }   \n      // Display ranges if some other calendar is current.\n      else {\n         GregorianCalendar greg = new GregorianCalendar();          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }\n   }\n}            \n// The example displays output similar to the following:\n//    Range of the Um Al Qura calendar:\n//       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n//       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">Imports System.Globalization\n   \nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim minDate As Date = cal.MinSupportedDateTime\n      Dim maxDate As Date = cal.MaxSupportedDateTime\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;)\n      &#39; Is UmAlQuraCalendar the current calendar?\n      If DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;) Then\n         Dim greg As New GregorianCalendar()\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate)\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate)\n      &#39; Is Gregorian the current calendar?\n      ElseIf DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;) Then         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      &#39; Display ranges if some other calendar is current.\n      Else\n         Dim greg As New GregorianCalendar()          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    Range of the Um Al Qura calendar:\n&#39;       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n&#39;       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_TwoDigitYearMax\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_TwoDigitYearMax_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TwoDigitYearMax</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int TwoDigitYearMax { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This calendar is read-only.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>In a set operation, the Um Al Qura calendar year value is less than 1318 but not 99, or is greater than 1450.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 1429, the 100-year range is from 1330 through 1429. Therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.  </p>\n<p> The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class does not detect changes in the system settings automatically.  </p>\n<p> The special value 99 causes the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_ToFourDigitYear_\" data-linktype=\"relative-path\">ToFourDigitYear</a> method to ignore the system settings and return the specified year unchanged.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_AddMonths_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_AddMonths_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMonths(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates a date that is a specified number of months away from a specified initial date.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddMonths (DateTime time, int months);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date to which to add months. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>months</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The positive or negative number of months to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The date yielded by adding the number of months specified by the <code>months</code> parameter to the date specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting date is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>months</code> is less than -120,000 or greater than 120,000.  </p>\n<p> -or-  </p>\n<p> <code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting month is outside the year of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. This implementation supports only the current era. Therefore, an exception is thrown if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, if the specified month is Zulkadah, which has 30 days, the specified day is the 30th day of that month, and the value of the <code>months</code> parameter is 3, the resulting year is one more than the specified year, the resulting month is Safar, and the resulting day is the 29th day, which is the last day in Safar.  </p>\n<p> If the value of the <code>months</code> parameter is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#5\">      returnTime = DateTime.SpecifyKind(cal.AddMonths(time, months), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value and displays the values of several of its components in the Um Al Qura calendar. Next, it calls the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_AddYears_\" data-linktype=\"relative-path\">AddYears</a> and AddMonths methods to add 2 years and 10 months in the Um Al Qura calendar to the date value. Finally, it again displays the values of these date components in the Um Al Qura calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = New Date(2011, 4, 3, New GregorianCalendar())\n      Dim cal As New UmAlQuraCalendar()\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n            \n      &#39; Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2)\n      date1 = cal.AddMonths(date1, 10)       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal))\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n   End Sub\n   \n   Private Sub DisplayCalendarInfo(cal As Calendar, date1 As Date)\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal))    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, cal.GetDayOfWeek(date1))\n      Console.WriteLine()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    April 3, 2011 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1432\n&#39;       Month:      4\n&#39;       DayOfYear:  118\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Sunday\n&#39;    \n&#39;    After adding 2 years and 10 months in the UmAlQura calendar,\n&#39;    January 1, 2014 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1435\n&#39;       Month:      2\n&#39;       DayOfYear:  59\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Wednesday\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 4, 3, new GregorianCalendar());\n      Calendar cal = new UmAlQuraCalendar();\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n            \n      // Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2);\n      date1 = cal.AddMonths(date1, 10);       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal));\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n   }\n\n   private static void DisplayCalendarInfo(Calendar cal, DateTime date1)\n   {\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal));    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1));\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1));\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1));\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1));\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1));\n      Console.WriteLine(&quot;   DayOfWeek:  {0}<br>&quot;, cal.GetDayOfWeek(date1));\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;);   \n   }\n}\n// The example displays the following output:\n//    April 3, 2011 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1432\n//       Month:      4\n//       DayOfYear:  118\n//       DayOfMonth: 29\n//       DayOfWeek:  Sunday\n//    \n//    After adding 2 years and 10 months in the UmAlQura calendar,\n//    January 1, 2014 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1435\n//       Month:      2\n//       DayOfYear:  59\n//       DayOfMonth: 29\n//       DayOfWeek:  Wednesday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_AddYears_System_DateTime_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_AddYears_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddYears(DateTime,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates a date that is a specified number of years away from a specified initial date.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime AddYears (DateTime time, int years);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date to which to add years. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>years</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The positive or negative number of years to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The date yielded by adding the number of years specified by the <code>years</code> parameter to the date specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The resulting date is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>years</code> is less than -10,000 or greater than 10,000.  </p>\n<p> -or-  </p>\n<p> <code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. This implementation supports only the current era. Therefore, an exception is thrown if the resulting year is outside the era of the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. The time-of-day part of the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> remains the same as the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> For example, Zulhijjah has 29 days, except during leap years when it has 30 days. If the specified date is the 30th day of Zulhijjah in a leap year and the value of the <code>years</code> parameter is 1, the resulting date is the 29th day of Zulhijjah in the following year.  </p>\n<p> If <code>years</code> is negative, the resulting <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> is earlier than the specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.  </p>\n<p> The<a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the returned <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value always equals <a class=\"xref\" href=\"system.datetimekind\" data-linktype=\"relative-path\">System.DateTimeKind</a>. You can preserve the <a class=\"xref\" href=\"system.datetime#System_DateTime_Kind_\" data-linktype=\"relative-path\">Kind</a> property of the <code>time</code> parameter by calling the <a class=\"xref\" href=\"system.datetime#System_DateTime_SpecifyKind_\" data-linktype=\"relative-path\">SpecifyKind</a> method, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind)\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.Calendar.AddMethods#8\">      returnTime = DateTime.SpecifyKind(cal.AddYears(time, years), time.Kind);\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example instantiates a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value and displays the values of several of its components in the Um AL Qura calendar. Next, it calls the AddYears and <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_AddMonths_\" data-linktype=\"relative-path\">AddMonths</a> methods to add 2 years and 10 months in the Um Al Qura calendar to the date value. Finally, it again displays the values of these date components in the Um Al Qura calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = New Date(2011, 4, 3, New GregorianCalendar())\n      Dim cal As New UmAlQuraCalendar()\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n            \n      &#39; Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2)\n      date1 = cal.AddMonths(date1, 10)       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal))\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n   End Sub\n   \n   Private Sub DisplayCalendarInfo(cal As Calendar, date1 As Date)\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal))    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, cal.GetDayOfWeek(date1))\n      Console.WriteLine()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    April 3, 2011 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1432\n&#39;       Month:      4\n&#39;       DayOfYear:  118\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Sunday\n&#39;    \n&#39;    After adding 2 years and 10 months in the UmAlQura calendar,\n&#39;    January 1, 2014 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1435\n&#39;       Month:      2\n&#39;       DayOfYear:  59\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Wednesday\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 4, 3, new GregorianCalendar());\n      Calendar cal = new UmAlQuraCalendar();\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n            \n      // Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2);\n      date1 = cal.AddMonths(date1, 10);       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal));\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n   }\n\n   private static void DisplayCalendarInfo(Calendar cal, DateTime date1)\n   {\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal));    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1));\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1));\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1));\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1));\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1));\n      Console.WriteLine(&quot;   DayOfWeek:  {0}<br>&quot;, cal.GetDayOfWeek(date1));\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;);   \n   }\n}\n// The example displays the following output:\n//    April 3, 2011 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1432\n//       Month:      4\n//       DayOfYear:  118\n//       DayOfMonth: 29\n//       DayOfWeek:  Sunday\n//    \n//    After adding 2 years and 10 months in the UmAlQura calendar,\n//    January 1, 2014 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1435\n//       Month:      2\n//       DayOfYear:  59\n//       DayOfMonth: 29\n//       DayOfWeek:  Wednesday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetDayOfMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetDayOfMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the day of the month on which a specified date occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date value to read. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 through 30 that represents the day of the month specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Um Al Qura calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = New Date(2011, 4, 3, New GregorianCalendar())\n      Dim cal As New UmAlQuraCalendar()\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n            \n      &#39; Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2)\n      date1 = cal.AddMonths(date1, 10)       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal))\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n   End Sub\n   \n   Private Sub DisplayCalendarInfo(cal As Calendar, date1 As Date)\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal))    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, cal.GetDayOfWeek(date1))\n      Console.WriteLine()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    April 3, 2011 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1432\n&#39;       Month:      4\n&#39;       DayOfYear:  118\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Sunday\n&#39;    \n&#39;    After adding 2 years and 10 months in the UmAlQura calendar,\n&#39;    January 1, 2014 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1435\n&#39;       Month:      2\n&#39;       DayOfYear:  59\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Wednesday\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 4, 3, new GregorianCalendar());\n      Calendar cal = new UmAlQuraCalendar();\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n            \n      // Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2);\n      date1 = cal.AddMonths(date1, 10);       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal));\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n   }\n\n   private static void DisplayCalendarInfo(Calendar cal, DateTime date1)\n   {\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal));    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1));\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1));\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1));\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1));\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1));\n      Console.WriteLine(&quot;   DayOfWeek:  {0}<br>&quot;, cal.GetDayOfWeek(date1));\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;);   \n   }\n}\n// The example displays the following output:\n//    April 3, 2011 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1432\n//       Month:      4\n//       DayOfYear:  118\n//       DayOfMonth: 29\n//       DayOfWeek:  Sunday\n//    \n//    After adding 2 years and 10 months in the UmAlQura calendar,\n//    January 1, 2014 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1435\n//       Month:      2\n//       DayOfYear:  59\n//       DayOfMonth: 29\n//       DayOfWeek:  Wednesday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetDayOfWeek_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetDayOfWeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfWeek(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the day of the week on which a specified date occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DayOfWeek GetDayOfWeek (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date value to read. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that represents the day of the week specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> values are as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>DayOfWeek value</th>\n<th>which indicates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sunday</td>\n<td>Ø§Ù„Ø§Ø­Ø¯ (Al-Ahad)</td>\n</tr>\n<tr>\n<td>Monday</td>\n<td>Ø§Ù„Ø§Ø«Ù†ÙŠÙ† (Al-Ithnayn)</td>\n</tr>\n<tr>\n<td>Tuesday</td>\n<td>Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡ (At-Thulaathaa&#39;)</td>\n</tr>\n<tr>\n<td>Wednesday</td>\n<td>Ø§Ù„Ø§Ø±Ø¨Ø¹Ø§Ø¡ (Al-Arbi&#39;aa&#39;)</td>\n</tr>\n<tr>\n<td>Thursday</td>\n<td>Ø§Ù„Ø®Ù…ÙŠØ³ (Al-Khamiis)</td>\n</tr>\n<tr>\n<td>Friday</td>\n<td>Ø§Ù„Ø¬Ù…Ø¹Ø© (Al-Jumu&#39;ah)</td>\n</tr>\n<tr>\n<td>Saturday</td>\n<td>Ø§Ù„Ø³Ø¨Øª (As-Sabt)</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Um Al Qura calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = New Date(2011, 4, 3, New GregorianCalendar())\n      Dim cal As New UmAlQuraCalendar()\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n            \n      &#39; Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2)\n      date1 = cal.AddMonths(date1, 10)       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal))\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n   End Sub\n   \n   Private Sub DisplayCalendarInfo(cal As Calendar, date1 As Date)\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal))    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, cal.GetDayOfWeek(date1))\n      Console.WriteLine()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    April 3, 2011 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1432\n&#39;       Month:      4\n&#39;       DayOfYear:  118\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Sunday\n&#39;    \n&#39;    After adding 2 years and 10 months in the UmAlQura calendar,\n&#39;    January 1, 2014 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1435\n&#39;       Month:      2\n&#39;       DayOfYear:  59\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Wednesday\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 4, 3, new GregorianCalendar());\n      Calendar cal = new UmAlQuraCalendar();\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n            \n      // Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2);\n      date1 = cal.AddMonths(date1, 10);       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal));\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n   }\n\n   private static void DisplayCalendarInfo(Calendar cal, DateTime date1)\n   {\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal));    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1));\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1));\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1));\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1));\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1));\n      Console.WriteLine(&quot;   DayOfWeek:  {0}<br>&quot;, cal.GetDayOfWeek(date1));\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;);   \n   }\n}\n// The example displays the following output:\n//    April 3, 2011 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1432\n//       Month:      4\n//       DayOfYear:  118\n//       DayOfMonth: 29\n//       DayOfWeek:  Sunday\n//    \n//    After adding 2 years and 10 months in the UmAlQura calendar,\n//    January 1, 2014 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1435\n//       Month:      2\n//       DayOfYear:  59\n//       DayOfMonth: 29\n//       DayOfWeek:  Wednesday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetDayOfYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetDayOfYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDayOfYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the day of the year on which a specified date occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDayOfYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date value to read. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 through 355 that represents the day of the year specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The day of the year is defined as the number of days from the first day of the year. For example, the GetDayOfYear method returns 1 for the first day of the first month of the year, and the total number of days in the year for the last day of the last month.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the values of several components of a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> in terms of the Um Al Qura calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.UmALQuraCalendar.AddMonths#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = New Date(2011, 4, 3, New GregorianCalendar())\n      Dim cal As New UmAlQuraCalendar()\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n            \n      &#39; Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2)\n      date1 = cal.AddMonths(date1, 10)       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal))\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n   End Sub\n   \n   Private Sub DisplayCalendarInfo(cal As Calendar, date1 As Date)\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal))    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, cal.GetDayOfWeek(date1))\n      Console.WriteLine()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    April 3, 2011 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1432\n&#39;       Month:      4\n&#39;       DayOfYear:  118\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Sunday\n&#39;    \n&#39;    After adding 2 years and 10 months in the UmAlQura calendar,\n&#39;    January 1, 2014 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1435\n&#39;       Month:      2\n&#39;       DayOfYear:  59\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Wednesday\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.UmALQuraCalendar.AddMonths#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 4, 3, new GregorianCalendar());\n      Calendar cal = new UmAlQuraCalendar();\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n            \n      // Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2);\n      date1 = cal.AddMonths(date1, 10);       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal));\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n   }\n\n   private static void DisplayCalendarInfo(Calendar cal, DateTime date1)\n   {\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal));    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1));\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1));\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1));\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1));\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1));\n      Console.WriteLine(&quot;   DayOfWeek:  {0}<br>&quot;, cal.GetDayOfWeek(date1));\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;);   \n   }\n}\n// The example displays the following output:\n//    April 3, 2011 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1432\n//       Month:      4\n//       DayOfYear:  118\n//       DayOfMonth: 29\n//       DayOfWeek:  Sunday\n//    \n//    After adding 2 years and 10 months in the UmAlQura calendar,\n//    January 1, 2014 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1435\n//       Month:      2\n//       DayOfYear:  59\n//       DayOfMonth: 29\n//       DayOfWeek:  Wednesday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetDaysInMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetDaysInMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of days in the specified month of the specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 12 that represents a month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified month in the specified year and era. The return value is 29 in a common year and 30 in a leap year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method returns a different number of days in a specified month for a common year versus a leap year. For example, this method returns 29 or 30 for Zulhijjah (<code>month</code> = 12), depending on whether <code>year</code> is a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the GetDaysInMonth method to get the number of days in each month of five consecutive years.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      UmAlQuraCalendar cal = new UmAlQuraCalendar();\n      List&lt;string&gt; months = new List&lt;string&gt;();\n      string output = String.Empty;\n      \n      // Get the current year in the UmAlQura calendar.\n      int startYear = cal.GetYear(DateTime.Now);\n      // Display the number of days in each month for the next five years.\n      Console.WriteLine(&quot;          Days in Each Month, {0} to {1}<br>&quot;,\n                        startYear, startYear + 4);\n\n      Console.WriteLine(&quot;Month     {0}     {1}     {2}     {3}     {4}&quot;,\n                        startYear, startYear + 1, startYear + 2, startYear + 3, \n                        startYear + 4);\n      for (int year = startYear; year &lt;= startYear + 4; year++) {\n         int days;\n         for (int month = 1; month &lt;= cal.GetMonthsInYear(year, UmAlQuraCalendar.UmAlQuraEra);\n                             month++)\n         {\n            days = cal.GetDaysInMonth(year, month, \n                                      UmAlQuraCalendar.UmAlQuraEra);\n            output = String.Format(&quot;{0}     &quot;, days);\n            if (months.Count &lt; month)\n               months.Add(String.Format(&quot;{0,4}        {1}&quot;, \n                                        month, output));\n            else\n               months[month - 1] += &quot;  &quot; + output;\n\n         }         \n      }                  \n      \n      foreach (var item in months)\n         Console.WriteLine(item);\n   }\n}\n// The example displays the following output:\n//                 Days in Each Month, 1431 to 1435\n//       \n//       Month     1431     1432     1433     1434     1435\n//          1        29       29       30       29       30\n//          2        30       30       29       30       29\n//          3        30       30       30       29       30\n//          4        29       30       30       30       29\n//          5        30       29       29       29       30\n//          6        29       30       30       30       29\n//          7        30       29       30       30       30\n//          8        29       30       29       29       29\n//          9        30       29       30       30       30\n//         10        29       30       29       30       30\n//         11        29       29       30       29       29\n//         12        30       29       29       29       30\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1\">Imports System.Collections.Generic\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim months As New List(Of String)\n      Dim output As String = String.Empty\n      \n      &#39; Get the current year in the UmAlQura calendar.\n      Dim startYear As Integer = cal.GetYear(Date.Now)\n      &#39; Display the number of days in each month for the next five years.\n      Console.WriteLine(&quot;          Days in Each Month, {0} to {1}&quot;,\n                        startYear, startYear + 4)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Month     {0}     {1}     {2}     {3}     {4}&quot;,\n                        startYear, startYear + 1, startYear + 2, \n                        startYear + 3, startYear + 4)\n      For year As Integer = startYear To startYear + 4\n         Dim days As Integer\n         For month As Integer = 1 To _\n                   cal.GetMonthsInYear(year, UmAlQuraCalendar.UmALQuraEra)\n            days = cal.GetDaysInMonth(year, month, \n                                      UmAlQuraCalendar.UmALQuraEra)\n            output = String.Format(&quot;{0}     &quot;, days)\n            If months.Count &lt; month Then\n               months.Add(String.Format(&quot;{0,4}        {1}&quot;, \n                                        month, output))\n            Else\n               months.Item(month - 1) += &quot;  &quot; + output\n            End If\n         Next         \n      Next                  \n      \n      For Each item In months\n         Console.WriteLine(item)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                 Days in Each Month, 1431 to 1435\n&#39;       \n&#39;       Month     1431     1432     1433     1434     1435\n&#39;          1        29       29       30       29       30\n&#39;          2        30       30       29       30       29\n&#39;          3        30       30       30       29       30\n&#39;          4        29       30       30       30       29\n&#39;          5        30       29       29       29       30\n&#39;          6        29       30       30       30       29\n&#39;          7        30       29       30       30       30\n&#39;          8        29       30       29       29       29\n&#39;          9        30       29       30       30       30\n&#39;         10        29       30       29       30       30\n&#39;         11        29       29       30       29       29\n&#39;         12        30       29       29       29       30\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetDaysInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetDaysInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetDaysInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of days in the specified year of the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetDaysInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of days in the specified year and era. The number of days is 354 in a common year or 355 in a leap year.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the GetDaysInYear method to get the number of days in ten consecutive years in each era supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetDaysInYear#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Calendar cal = new UmAlQuraCalendar();\n      int currentYear = cal.GetYear(DateTime.Now);\n      \n      Console.WriteLine(&quot;Era     Year     Days<br>&quot;);\n      foreach (int era in cal.Eras) {\n         for (int year = currentYear; year &lt;= currentYear + 9; year++) {\n            Console.WriteLine(&quot;{0}{1}      {2}      {3}&quot;, \n                              ShowCurrentEra(cal, era), era, year, \n                              cal.GetDaysInYear(year, era));   \n         }     \n      }   \n      Console.WriteLine(&quot;<br>   * Indicates the current era.&quot;);\n   }\n\n   private static string ShowCurrentEra(Calendar cal, int era)\n   {\n      if (era == cal.Eras[Calendar.CurrentEra])\n         return &quot;*&quot;;\n      else\n         return &quot; &quot;;\n   }\n}\n// The example displays the following output:\n//       Era     Year     Days\n//       \n//       *1      1431      354\n//       *1      1432      354\n//       *1      1433      355\n//       *1      1434      354\n//       *1      1435      355\n//       *1      1436      354\n//       *1      1437      354\n//       *1      1438      354\n//       *1      1439      355\n//       *1      1440      354\n//       \n//          * Indicates the current era.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetDaysInYear#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim currentYear As Integer = cal.GetYear(Date.Now)\n      \n      Console.WriteLine(&quot;Era     Year     Days&quot;)\n      Console.WriteLine()\n      For Each era As Integer In cal.Eras\n         For year As Integer = currentYear To currentYear + 9\n            Console.WriteLine(&quot;{0}{1}      {2}      {3}&quot;, \n                              ShowCurrentEra(cal, era), era, year, \n                              cal.GetDaysInYear(year, era))   \n         Next     \n      Next   \n      Console.WriteLine()\n      Console.WriteLine(&quot;   * Indicates the current era.&quot;)\n   End Sub\n   \n   Private Function ShowCurrentEra(cal As Calendar, era As Integer) As String\n      If era = cal.Eras(Calendar.CurrentEra) Then\n         Return &quot;*&quot;\n      Else\n         Return &quot; &quot;\n      End If   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       Era     Year     Days\n&#39;       \n&#39;       *1      1431      354\n&#39;       *1      1432      354\n&#39;       *1      1433      355\n&#39;       *1      1434      354\n&#39;       *1      1435      355\n&#39;       *1      1436      354\n&#39;       *1      1437      354\n&#39;       *1      1438      354\n&#39;       *1      1439      355\n&#39;       *1      1440      354\n&#39;       \n&#39;          * Indicates the current era.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetEra_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetEra_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEra(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the era in which a specified date occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetEra (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date value to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Always returns the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Um Al Qura calendar recognizes one era: A.H. (Latin &quot;Anno Hegirae&quot;, which means &quot;the year of the migration,&quot; in reference to the migration of Muhammad (PBUH) from Mecca).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the values of several components of a date in the Um Al Qura calendar.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim date1 As Date = New Date(2011, 4, 3, New GregorianCalendar())\n      Dim cal As New UmAlQuraCalendar()\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n            \n      &#39; Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2)\n      date1 = cal.AddMonths(date1, 10)       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal))\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1)\n      DisplayCalendarInfo(cal, date1)\n   End Sub\n   \n   Private Sub DisplayCalendarInfo(cal As Calendar, date1 As Date)\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal))    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1))\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1))\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1))\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1))\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1))\n      Console.WriteLine(&quot;   DayOfWeek:  {0}&quot;, cal.GetDayOfWeek(date1))\n      Console.WriteLine()\n   End Sub\n   \n   Private Function GetCalendarName(cal As Calendar) As String\n      Return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;)   \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    April 3, 2011 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1432\n&#39;       Month:      4\n&#39;       DayOfYear:  118\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Sunday\n&#39;    \n&#39;    After adding 2 years and 10 months in the UmAlQura calendar,\n&#39;    January 1, 2014 in the Gregorian calendar is equivalent to:\n&#39;       Calendar:   UmAlQura\n&#39;       Era:        1\n&#39;       Year:       1435\n&#39;       Month:      2\n&#39;       DayOfYear:  59\n&#39;       DayOfMonth: 29\n&#39;       DayOfWeek:  Wednesday\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.AddMonths#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime date1 = new DateTime(2011, 4, 3, new GregorianCalendar());\n      Calendar cal = new UmAlQuraCalendar();\n      \n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n            \n      // Add 2 years and 10 months by calling UmAlQuraCalendar methods.\n      date1 = cal.AddYears(date1, 2);\n      date1 = cal.AddMonths(date1, 10);       \n\n      Console.WriteLine(&quot;After adding 2 years and 10 months in the {0} calendar,&quot;, \n                        GetCalendarName(cal));\n      Console.WriteLine(&quot;{0:MMMM d, yyyy} in the Gregorian calendar is equivalent to:&quot;, date1);\n      DisplayCalendarInfo(cal, date1);\n   }\n\n   private static void DisplayCalendarInfo(Calendar cal, DateTime date1)\n   {\n      Console.WriteLine(&quot;   Calendar:   {0}&quot;, GetCalendarName(cal));    \n      Console.WriteLine(&quot;   Era:        {0}&quot;, cal.GetEra(date1));\n      Console.WriteLine(&quot;   Year:       {0}&quot;, cal.GetYear(date1));\n      Console.WriteLine(&quot;   Month:      {0}&quot;, cal.GetMonth(date1));\n      Console.WriteLine(&quot;   DayOfYear:  {0}&quot;, cal.GetDayOfYear(date1));\n      Console.WriteLine(&quot;   DayOfMonth: {0}&quot;, cal.GetDayOfMonth(date1));\n      Console.WriteLine(&quot;   DayOfWeek:  {0}<br>&quot;, cal.GetDayOfWeek(date1));\n   }\n\n   private static string GetCalendarName(Calendar cal)\n   {\n      return cal.ToString().Replace(&quot;System.Globalization.&quot;, &quot;&quot;).\n             Replace(&quot;Calendar&quot;, &quot;&quot;);   \n   }\n}\n// The example displays the following output:\n//    April 3, 2011 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1432\n//       Month:      4\n//       DayOfYear:  118\n//       DayOfMonth: 29\n//       DayOfWeek:  Sunday\n//    \n//    After adding 2 years and 10 months in the UmAlQura calendar,\n//    January 1, 2014 in the Gregorian calendar is equivalent to:\n//       Calendar:   UmAlQura\n//       Era:        1\n//       Year:       1435\n//       Month:      2\n//       DayOfYear:  59\n//       DayOfMonth: 29\n//       DayOfWeek:  Wednesday\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetLeapMonth_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetLeapMonth(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the leap month for a specified year and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetLeapMonth (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Always 0 because the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class does not support leap months.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is less than 1318 or greater than 1450.  </p>\n<p> -or-  </p>\n<p> <code>era</code> is not <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_System_DateTime_\" data-linktype=\"relative-path\">System.Globalization.EastAsianLunisolarCalendar.GetMonth(DateTime)</a> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <a class=\"xref\" href=\"system.globalization.eastasianlunisolarcalendar#System_Globalization_EastAsianLunisolarCalendar_GetMonth_\" data-linktype=\"relative-path\">GetMonth</a> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetMonth_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonth(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the month in which a specified date occurs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonth (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date value to read. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer from 1 through 12 that represents the month in the date specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the date ranges supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class in both the Gregorian and Um Al Qura calendars. The GetMonth method is used to retrieve the month of the minimum and maximum supported dates in the Um Al Qura calendar if it is not the current culture&#39;s current calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Calendar cal = new UmAlQuraCalendar();\n      DateTime minDate = cal.MinSupportedDateTime;\n      DateTime maxDate = cal.MaxSupportedDateTime;\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;);\n      // Is UmAlQuraCalendar the current calendar?\n      if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;)) {\n         Calendar greg = new GregorianCalendar();\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate);\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate);\n      }\n      // Is Gregorian the current calendar?\n      else if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;)) {         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }   \n      // Display ranges if some other calendar is current.\n      else {\n         GregorianCalendar greg = new GregorianCalendar();          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }\n   }\n}            \n// The example displays output similar to the following:\n//    Range of the Um Al Qura calendar:\n//       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n//       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">Imports System.Globalization\n   \nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim minDate As Date = cal.MinSupportedDateTime\n      Dim maxDate As Date = cal.MaxSupportedDateTime\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;)\n      &#39; Is UmAlQuraCalendar the current calendar?\n      If DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;) Then\n         Dim greg As New GregorianCalendar()\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate)\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate)\n      &#39; Is Gregorian the current calendar?\n      ElseIf DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;) Then         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      &#39; Display ranges if some other calendar is current.\n      Else\n         Dim greg As New GregorianCalendar()          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    Range of the Um Al Qura calendar:\n&#39;       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n&#39;       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetMonthsInYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetMonthsInYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMonthsInYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the number of months in the specified year of the specified era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetMonthsInYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Always 12.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>era</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the GetMonthsInYear method to determine the number of months in four consecutive years, and then calls the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_GetDaysInMonth_\" data-linktype=\"relative-path\">GetDaysInMonth</a> method to determine how many days there are in each month.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      UmAlQuraCalendar cal = new UmAlQuraCalendar();\n      List&lt;string&gt; months = new List&lt;string&gt;();\n      string output = String.Empty;\n      \n      // Get the current year in the UmAlQura calendar.\n      int startYear = cal.GetYear(DateTime.Now);\n      // Display the number of days in each month for the next five years.\n      Console.WriteLine(&quot;          Days in Each Month, {0} to {1}<br>&quot;,\n                        startYear, startYear + 4);\n\n      Console.WriteLine(&quot;Month     {0}     {1}     {2}     {3}     {4}&quot;,\n                        startYear, startYear + 1, startYear + 2, startYear + 3, \n                        startYear + 4);\n      for (int year = startYear; year &lt;= startYear + 4; year++) {\n         int days;\n         for (int month = 1; month &lt;= cal.GetMonthsInYear(year, UmAlQuraCalendar.UmAlQuraEra);\n                             month++)\n         {\n            days = cal.GetDaysInMonth(year, month, \n                                      UmAlQuraCalendar.UmAlQuraEra);\n            output = String.Format(&quot;{0}     &quot;, days);\n            if (months.Count &lt; month)\n               months.Add(String.Format(&quot;{0,4}        {1}&quot;, \n                                        month, output));\n            else\n               months[month - 1] += &quot;  &quot; + output;\n\n         }         \n      }                  \n      \n      foreach (var item in months)\n         Console.WriteLine(item);\n   }\n}\n// The example displays the following output:\n//                 Days in Each Month, 1431 to 1435\n//       \n//       Month     1431     1432     1433     1434     1435\n//          1        29       29       30       29       30\n//          2        30       30       29       30       29\n//          3        30       30       30       29       30\n//          4        29       30       30       30       29\n//          5        30       29       29       29       30\n//          6        29       30       30       30       29\n//          7        30       29       30       30       30\n//          8        29       30       29       29       29\n//          9        30       29       30       30       30\n//         10        29       30       29       30       30\n//         11        29       29       30       29       29\n//         12        30       29       29       29       30\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1\">Imports System.Collections.Generic\nImports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim months As New List(Of String)\n      Dim output As String = String.Empty\n      \n      &#39; Get the current year in the UmAlQura calendar.\n      Dim startYear As Integer = cal.GetYear(Date.Now)\n      &#39; Display the number of days in each month for the next five years.\n      Console.WriteLine(&quot;          Days in Each Month, {0} to {1}&quot;,\n                        startYear, startYear + 4)\n      Console.WriteLine()\n      Console.WriteLine(&quot;Month     {0}     {1}     {2}     {3}     {4}&quot;,\n                        startYear, startYear + 1, startYear + 2, \n                        startYear + 3, startYear + 4)\n      For year As Integer = startYear To startYear + 4\n         Dim days As Integer\n         For month As Integer = 1 To _\n                   cal.GetMonthsInYear(year, UmAlQuraCalendar.UmALQuraEra)\n            days = cal.GetDaysInMonth(year, month, \n                                      UmAlQuraCalendar.UmALQuraEra)\n            output = String.Format(&quot;{0}     &quot;, days)\n            If months.Count &lt; month Then\n               months.Add(String.Format(&quot;{0,4}        {1}&quot;, \n                                        month, output))\n            Else\n               months.Item(month - 1) += &quot;  &quot; + output\n            End If\n         Next         \n      Next                  \n      \n      For Each item In months\n         Console.WriteLine(item)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                 Days in Each Month, 1431 to 1435\n&#39;       \n&#39;       Month     1431     1432     1433     1434     1435\n&#39;          1        29       29       30       29       30\n&#39;          2        30       30       29       30       29\n&#39;          3        30       30       30       29       30\n&#39;          4        29       30       30       30       29\n&#39;          5        30       29       29       29       30\n&#39;          6        29       30       30       30       29\n&#39;          7        30       29       30       30       30\n&#39;          8        29       30       29       29       29\n&#39;          9        30       29       30       30       30\n&#39;         10        29       30       29       30       30\n&#39;         11        29       29       30       29       29\n&#39;         12        30       29       29       29       30\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_GetYear_System_DateTime_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_GetYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetYear(DateTime)</div>        \r\n          </div>\r\n    \r\n            <p>Calculates the year of a date represented by a specified <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetYear (DateTime time);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>time</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The date value to read. The <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class supports only dates from 04/30/1900 00.00.00 (Gregorian date) through 11/16/2077 23:59:59 (Gregorian date).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>An integer that represents the year specified by the <code>time</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>time</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the date ranges supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class in both the Gregorian and Um Al Qura calendars. The GetYear method is used to retrieve the year of the minimum and maximum supported dates in the Um Al Qura calendar if it is not the current culture&#39;s current calendar.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Calendar cal = new UmAlQuraCalendar();\n      DateTime minDate = cal.MinSupportedDateTime;\n      DateTime maxDate = cal.MaxSupportedDateTime;\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;);\n      // Is UmAlQuraCalendar the current calendar?\n      if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;)) {\n         Calendar greg = new GregorianCalendar();\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate);\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate);\n      }\n      // Is Gregorian the current calendar?\n      else if (DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;)) {         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }   \n      // Display ranges if some other calendar is current.\n      else {\n         GregorianCalendar greg = new GregorianCalendar();          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate));\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate));\n      }\n   }\n}            \n// The example displays output similar to the following:\n//    Range of the Um Al Qura calendar:\n//       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n//       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.GetMonth#1\">Imports System.Globalization\n   \nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim minDate As Date = cal.MinSupportedDateTime\n      Dim maxDate As Date = cal.MaxSupportedDateTime\n      \n      Console.WriteLine(&quot;Range of the Um Al Qura calendar:&quot;)\n      &#39; Is UmAlQuraCalendar the current calendar?\n      If DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;UmAlQura&quot;) Then\n         Dim greg As New GregorianCalendar()\n         Console.WriteLine(&quot;   Minimum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(minDate), greg.GetDayOfMonth(minDate),\n                           greg.GetYear(minDate), minDate)\n         Console.WriteLine(&quot;   Maximum: {0:d2}/{1:d2}/{2:d4} {3:HH:mm:ss} Gregorian, {3:MM/dd/yyyy HH:mm:ss} Um Al Qura&quot;,\n                           greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate),\n                           greg.GetYear(maxDate), maxDate)\n      &#39; Is Gregorian the current calendar?\n      ElseIf DateTimeFormatInfo.CurrentInfo.Calendar.ToString().Contains(&quot;Gregorian&quot;) Then         \n         Console.WriteLine(&quot;   Minimum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {0:d} {0:HH:mm:ss} Gregorian, {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      &#39; Display ranges if some other calendar is current.\n      Else\n         Dim greg As New GregorianCalendar()          \n         Console.WriteLine(&quot;   Minimum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           minDate, greg.GetMonth(minDate), greg.GetDayOfMonth(minDate), \n                           greg.GetYear(minDate), cal.GetMonth(minDate), cal.GetDayOfMonth(minDate),\n                           cal.GetYear(minDate))\n         Console.WriteLine(&quot;   Maximum: {1:d2}/{2:d2}/{3:d4} {0:HH:mm:ss} &quot; + \n                           &quot;Gregorian, {4:d2}/{5:d2}/{6:d4} {0:HH:mm:ss} Um Al Qura&quot;,\n                           maxDate, greg.GetMonth(maxDate), greg.GetDayOfMonth(maxDate), \n                           greg.GetYear(maxDate), cal.GetMonth(maxDate), cal.GetDayOfMonth(maxDate),\n                           cal.GetYear(maxDate))\n      End If\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;    Range of the Um Al Qura calendar:\n&#39;       Minimum: 4/30/1900 00:00:00 Gregorian, 01/01/1318 00:00:00 Um Al Qura\n&#39;       Maximum: 5/13/2029 23:59:59 Gregorian, 12/29/1450 23:59:59 Um Al Qura\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_IsLeapDay_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_IsLeapDay_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapDay(Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified date is a leap day.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapDay (int year, int month, int day, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 12 that represents a month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 30 that represents a day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified day is a leap day; otherwise, <code>false</code>. The return value is always <code>false</code> because the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class does not support leap days.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, <code>day</code>, or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A leap day is a day that occurs only in a leap year.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the IsLeapDay method for the last day of the second month (February) for five years in each of the eras.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.HijriCalendar.IsLeapDay#1\">using System;\nusing System.Globalization;\n\n\npublic class SamplesHijriCalendar  {\n\n   public static void Main()  {\n\n      // Creates and initializes a HijriCalendar.\n      HijriCalendar myCal = new HijriCalendar();\n\n      // Creates a holder for the last day of the second month (February).\n      int iLastDay;\n\n      // Displays the header.\n      Console.Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n      for ( int y = 1421; y &lt;= 1425; y++ )\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, y );\n      Console.WriteLine();\n\n      // Checks five years in the current era.\n      Console.Write( &quot;CurrentEra:&quot; );\n      for ( int y = 1421; y &lt;= 1425; y++ )  {\n         iLastDay = myCal.GetDaysInMonth( y, 2, HijriCalendar.CurrentEra );\n         Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, HijriCalendar.CurrentEra ) );\n      }\n      Console.WriteLine();\n\n      // Checks five years in each of the eras.\n      for ( int i = 0; i &lt; myCal.Eras.Length; i++ )  {\n         Console.Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal.Eras[i] );\n         for ( int y = 1421; y &lt;= 1425; y++ )  {\n            iLastDay = myCal.GetDaysInMonth( y, 2, myCal.Eras[i] );\n            Console.Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, myCal.IsLeapDay( y, 2, iLastDay, myCal.Eras[i] ) );\n         }\n         Console.WriteLine();\n      }\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1421    1422    1423    1424    1425\nCurrentEra:     False   False   False   False   False\nEra 1:          False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.HijriCalendar.IsLeapDay#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Creates and initializes a HijriCalendar.\n   HijriCalendar^ myCal = gcnew HijriCalendar;\n   \n   // Creates a holder for the last day of the second month (February).\n   int iLastDay;\n   \n   // Displays the header.\n   Console::Write( &quot;YEAR&nbsp;&nbsp;&nbsp;&nbsp;&quot; );\n   for ( int y = 1421; y &lt;= 1425; y++ )\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, y );\n   Console::WriteLine();\n   \n   // Checks five years in the current era.\n   Console::Write( &quot;CurrentEra:&quot; );\n   for ( int y = 1421; y &lt;= 1425; y++ )\n   {\n      iLastDay = myCal-&gt;GetDaysInMonth( y, 2, HijriCalendar::CurrentEra );\n      Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, HijriCalendar::CurrentEra ) );\n\n   }\n   Console::WriteLine();\n   \n   // Checks five years in each of the eras.\n   for ( int i = 0; i &lt; myCal-&gt;Eras-&gt;Length; i++ )\n   {\n      Console::Write( &quot;Era {0}:&nbsp;&nbsp;&nbsp;&nbsp;&quot;, myCal-&gt;Eras[ i ] );\n      for ( int y = 1421; y &lt;= 1425; y++ )\n      {\n         iLastDay = myCal-&gt;GetDaysInMonth( y, 2, myCal-&gt;Eras[ i ] );\n         Console::Write( &quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, myCal-&gt;IsLeapDay( y, 2, iLastDay, myCal-&gt;Eras[ i ] ) );\n\n      }\n      Console::WriteLine();\n\n   }\n}\n\n/*\nThis code produces the following output.\n\nYEAR            1421    1422    1423    1424    1425\nCurrentEra:     False   False   False   False   False\nEra 1:          False   False   False   False   False\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.HijriCalendar.IsLeapDay#1\">Imports System\nImports System.Globalization\nImports Microsoft.VisualBasic\n\nPublic Class SamplesHijriCalendar   \n   \n   Public Shared Sub Main()\n\n      &#39; Creates and initializes a HijriCalendar.\n      Dim myCal As New HijriCalendar()\n\n      &#39; Creates a holder for the last day of the second month (February).\n      Dim iLastDay As Integer\n\n      &#39; Displays the header.\n      Console.Write(&quot;YEAR&quot; + ControlChars.Tab)\n      Dim y As Integer\n      For y = 1421 To 1425\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, y)\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in the current era.\n      Console.Write(&quot;CurrentEra:&quot;)\n      For y = 1421 To 1425\n         iLastDay = myCal.GetDaysInMonth(y, 2, HijriCalendar.CurrentEra)\n         Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, HijriCalendar.CurrentEra))\n      Next y\n      Console.WriteLine()\n\n      &#39; Checks five years in each of the eras.\n      Dim i As Integer\n      For i = 0 To myCal.Eras.Length - 1\n         Console.Write(&quot;Era {0}:&quot; + ControlChars.Tab, myCal.Eras(i))\n         For y = 1421 To 1425\n            iLastDay = myCal.GetDaysInMonth(y, 2, myCal.Eras(i))\n            Console.Write(ControlChars.Tab + &quot;{0}&quot;, myCal.IsLeapDay(y, 2, iLastDay, myCal.Eras(i)))\n         Next y\n         Console.WriteLine()\n      Next i\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesHijriCalendar\n\n\n&#39;This code produces the following output.\n\n&#39;\n\n&#39;YEAR            1421    1422    1423    1424    1425\n\n&#39;CurrentEra:     False   False   False   False   False\n\n&#39;Era 1:          False   False   False   False   False\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_IsLeapMonth_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_IsLeapMonth_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapMonth(Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified month in the specified year and era is a leap month.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapMonth (int year, int month, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 12 that represents a month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>Always <code>false</code> because the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class does not support leap months.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A leap month is an entire month that occurs only in a leap year.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_IsLeapYear_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_IsLeapYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsLeapYear(Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the specified year in the specified era is a leap year.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsLeapYear (int year, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified year is a leap year; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A common year has 354 days and a leap year has 355 days.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example lists the number of days in ten consecutive years and calls the IsLeapYear method to determine which years are leap years.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.UmAlQuraCalendar.IsLeapYear#1\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Calendar cal = new UmAlQuraCalendar();\n      int currentYear = cal.GetYear(DateTime.Now);\n      \n      for (int year = currentYear; year &lt;= currentYear + 9; year++)\n         Console.WriteLine(&quot;{0:d4}: {1} days {2}&quot;, year, \n                           cal.GetDaysInYear(year, UmAlQuraCalendar.UmAlQuraEra), \n                           cal.IsLeapYear(year, UmAlQuraCalendar.UmAlQuraEra) ?\n                              &quot;(Leap Year)&quot; : &quot;&quot;);        \n   }\n}\n// The example displays the following output:\n//       1431: 354 days\n//       1432: 354 days\n//       1433: 355 days (Leap Year)\n//       1434: 354 days\n//       1435: 355 days (Leap Year)\n//       1436: 354 days\n//       1437: 354 days\n//       1438: 354 days\n//       1439: 355 days (Leap Year)\n//       1440: 354 days\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.UmAlQuraCalendar.IsLeapYear#1\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim cal As New UmAlQuraCalendar()\n      Dim currentYear As Integer = cal.GetYear(Date.Now)\n      \n      For year As Integer = currentYear To currentYear + 9\n         Console.WriteLine(&quot;{0:d4}: {1} days {2}&quot;, year, \n                           cal.GetDaysInYear(year, UmAlQuraCalendar.UmAlQuraEra), \n                           If(cal.IsLeapYear(year, UmAlQuraCalendar.UmAlQuraEra),\n                              &quot;(Leap Year)&quot;, &quot;&quot;))        \n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1431: 354 days\n&#39;       1432: 354 days\n&#39;       1433: 355 days (Leap Year)\n&#39;       1434: 354 days\n&#39;       1435: 355 days (Leap Year)\n&#39;       1436: 354 days\n&#39;       1437: 354 days\n&#39;       1438: 354 days\n&#39;       1439: 355 days (Leap Year)\n&#39;       1440: 354 days\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_ToDateTime_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date, time, and era.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A year.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>month</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 12 that represents a month.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>day</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 1 through 29 that represents a day.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hour</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 through 23 that represents an hour.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>minute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 through 59 that represents a minute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>second</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 through 59 that represents a second.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>millisecond</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An integer from 0 through 999 that represents a millisecond.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>era</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An era. Specify <code>UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]</code> or <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_UmAlQuraEra\" data-linktype=\"relative-path\">UmAlQuraEra</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> that is set to the specified date and time in the current era.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code>, <code>month</code>, <code>day</code>, or <code>era</code> is outside the range supported by the <a class=\"xref\" href=\"system.globalization.umalquracalendar\" data-linktype=\"relative-path\">UmAlQuraCalendar</a> class.  </p>\n<p> -or-  </p>\n<p> <code>hour</code> is less than zero or greater than 23.  </p>\n<p> -or-  </p>\n<p> <code>minute</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>second</code> is less than zero or greater than 59.  </p>\n<p> -or-  </p>\n<p> <code>millisecond</code> is less than zero or greater than 999.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToDateTime method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Globalization_UmAlQuraCalendar_ToFourDigitYear_System_Int32_\">\r\n    \r\n            <a id=\"System_Globalization_UmAlQuraCalendar_ToFourDigitYear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToFourDigitYear(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified year to a four-digit year by using the <span class=\"xref\">stem.Globalization.UmAlQuraCalendar.TwoDigitYearMax*</span> property to determine the appropriate century.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ToFourDigitYear (int year);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>year</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A 2-digit year from 0 through 99, or a 4-digit Um Al Qura calendar year from 1318 through 1450.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>If the <code>year</code> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <code>year</code> parameter is a 4-digit year, the return value is the unchanged <code>year</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>year</code> is outside the range supported by this calendar.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToFourDigitYear method uses the <code>year</code> parameter, the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> property, and a year to calculate a 4-digit year. The century is determined by finding the sole occurrence of the 2-digit <code>year</code> parameter within that 100-year range. For example, if <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> is set to 1429, the 100-year range is from 1330 through 1429. Therefore, a 2-digit value of 30 is interpreted as 1330, while a 2-digit value of 29 is interpreted as 1429.  </p>\n<p> If the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> property is the special value 99, the ToFourDigitYear method ignores the settings in the regional and language options in Control Panel and returns the <code>year</code> parameter unchanged.  </p>\n<p> ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <a class=\"xref\" href=\"system.globalization.umalquracalendar#System_Globalization_UmAlQuraCalendar_TwoDigitYearMax_\" data-linktype=\"relative-path\">TwoDigitYearMax</a> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.UmAlQuraCalendar.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.UmAlQuraCalendar.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar..ctor\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.AddMonths\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.AddYears\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.AlgorithmType\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.Eras\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetDayOfMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetDayOfWeek\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetDayOfYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetDaysInMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetDaysInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetEra\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetMonthsInYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.GetYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.IsLeapDay\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.IsLeapMonth\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.IsLeapYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.MinSupportedDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.ToFourDigitYear\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.TwoDigitYearMax\">\r\n<meta name=\"APIName\" content=\"System.Globalization.UmAlQuraCalendar.UmAlQuraEra\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"40d793c8-efab-495b-aafc-3f8785b5f8b4\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\UmAlQuraCalendar.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the Saudi Hijri (Um Al Qura) calendar.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.UmAlQuraCalendar\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Globalization.UmAlQuraCalendar.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Globalization.UmAlQuraCalendar.yml","open_to_public_contributors":true,"api_name":["System.Globalization.UmAlQuraCalendar","System.Globalization.UmAlQuraCalendar..ctor","System.Globalization.UmAlQuraCalendar.AddMonths","System.Globalization.UmAlQuraCalendar.AddYears","System.Globalization.UmAlQuraCalendar.AlgorithmType","System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear","System.Globalization.UmAlQuraCalendar.Eras","System.Globalization.UmAlQuraCalendar.GetDayOfMonth","System.Globalization.UmAlQuraCalendar.GetDayOfWeek","System.Globalization.UmAlQuraCalendar.GetDayOfYear","System.Globalization.UmAlQuraCalendar.GetDaysInMonth","System.Globalization.UmAlQuraCalendar.GetDaysInYear","System.Globalization.UmAlQuraCalendar.GetEra","System.Globalization.UmAlQuraCalendar.GetLeapMonth","System.Globalization.UmAlQuraCalendar.GetMonth","System.Globalization.UmAlQuraCalendar.GetMonthsInYear","System.Globalization.UmAlQuraCalendar.GetYear","System.Globalization.UmAlQuraCalendar.IsLeapDay","System.Globalization.UmAlQuraCalendar.IsLeapMonth","System.Globalization.UmAlQuraCalendar.IsLeapYear","System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime","System.Globalization.UmAlQuraCalendar.MinSupportedDateTime","System.Globalization.UmAlQuraCalendar.ToDateTime","System.Globalization.UmAlQuraCalendar.ToFourDigitYear","System.Globalization.UmAlQuraCalendar.TwoDigitYearMax","System.Globalization.UmAlQuraCalendar.UmAlQuraEra"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.UmAlQuraCalendar","System::Globalization::UmAlQuraCalendar","System.Globalization.UmAlQuraCalendar.#ctor","System::Globalization::UmAlQuraCalendar::#ctor","System.Globalization.UmAlQuraCalendar.AddMonths","System::Globalization::UmAlQuraCalendar::AddMonths","System.Globalization.UmAlQuraCalendar.AddYears","System::Globalization::UmAlQuraCalendar::AddYears","System.Globalization.UmAlQuraCalendar.AlgorithmType","System::Globalization::UmAlQuraCalendar::AlgorithmType","System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear","System::Globalization::UmAlQuraCalendar::DaysInYearBeforeMinSupportedYear","System.Globalization.UmAlQuraCalendar.Eras","System::Globalization::UmAlQuraCalendar::Eras","System.Globalization.UmAlQuraCalendar.GetDayOfMonth","System::Globalization::UmAlQuraCalendar::GetDayOfMonth","System.Globalization.UmAlQuraCalendar.GetDayOfWeek","System::Globalization::UmAlQuraCalendar::GetDayOfWeek","System.Globalization.UmAlQuraCalendar.GetDayOfYear","System::Globalization::UmAlQuraCalendar::GetDayOfYear","System.Globalization.UmAlQuraCalendar.GetDaysInMonth","System::Globalization::UmAlQuraCalendar::GetDaysInMonth","System.Globalization.UmAlQuraCalendar.GetDaysInYear","System::Globalization::UmAlQuraCalendar::GetDaysInYear","System.Globalization.UmAlQuraCalendar.GetEra","System::Globalization::UmAlQuraCalendar::GetEra","System.Globalization.UmAlQuraCalendar.GetLeapMonth","System::Globalization::UmAlQuraCalendar::GetLeapMonth","System.Globalization.UmAlQuraCalendar.GetMonth","System::Globalization::UmAlQuraCalendar::GetMonth","System.Globalization.UmAlQuraCalendar.GetMonthsInYear","System::Globalization::UmAlQuraCalendar::GetMonthsInYear","System.Globalization.UmAlQuraCalendar.GetYear","System::Globalization::UmAlQuraCalendar::GetYear","System.Globalization.UmAlQuraCalendar.IsLeapDay","System::Globalization::UmAlQuraCalendar::IsLeapDay","System.Globalization.UmAlQuraCalendar.IsLeapMonth","System::Globalization::UmAlQuraCalendar::IsLeapMonth","System.Globalization.UmAlQuraCalendar.IsLeapYear","System::Globalization::UmAlQuraCalendar::IsLeapYear","System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime","System::Globalization::UmAlQuraCalendar::MaxSupportedDateTime","System.Globalization.UmAlQuraCalendar.MinSupportedDateTime","System::Globalization::UmAlQuraCalendar::MinSupportedDateTime","System.Globalization.UmAlQuraCalendar.ToDateTime","System::Globalization::UmAlQuraCalendar::ToDateTime","System.Globalization.UmAlQuraCalendar.ToFourDigitYear","System::Globalization::UmAlQuraCalendar::ToFourDigitYear","System.Globalization.UmAlQuraCalendar.TwoDigitYearMax","System::Globalization::UmAlQuraCalendar::TwoDigitYearMax","System.Globalization.UmAlQuraCalendar.UmAlQuraEra","System::Globalization::UmAlQuraCalendar::UmAlQuraEra"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"40d793c8-efab-495b-aafc-3f8785b5f8b4","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Globalization\\UmAlQuraCalendar.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Globalization/UmAlQuraCalendar.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UmAlQuraCalendar class | Microsoft Docs","_op_ogTitle":"UmAlQuraCalendar class","description":"Represents the Saudi Hijri (Um Al Qura) calendar.\n","toc_asset_id":"_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.UmAlQuraCalendar","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.umalquracalendar","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.globalization.umalquracalendar","fileRelativePath":"System.Globalization.UmAlQuraCalendar.html"},"themesRelativePathToOutputRoot":"_themes/"}