{"content":"    \r\n    <h1 id=\"System_Data_SqlClient_SqlBulkCopy\">\r\n      <span class=\"lang-csharp\">SqlBulkCopy</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Lets you efficiently bulk load a SQL Server table with data from another source.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class SqlBulkCopy : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SqlBulkCopy</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Microsoft SQL Server includes a popular command-prompt utility named <strong>bcp</strong> for moving data from one table to another, whether on a single server or between servers. The SqlBulkCopy class lets you write managed code solutions that provide similar functionality. There are other ways to load data into a SQL Server table (INSERT statements, for example), but SqlBulkCopy offers a significant performance advantage over them.  </p>\n<p> The SqlBulkCopy class can be used to write data only to SQL Server tables. However, the data source is not limited to SQL Server; any data source can be used, as long as the data can be loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance or read with a <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance.  </p>\n<p> SqlBulkCopy will fail when bulk loading a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> column of type <a class=\"xref\" href=\"system.data.sqltypes.sqldatetime\" data-linktype=\"relative-path\">SqlDateTime</a> into a SQL Server column whose type is one of the date/time types added in SQL Server 2008.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy__ctor_System_Data_SqlClient_SqlConnection_\" data-linktype=\"self-bookmark\">SqlBulkCopy(SqlConnection)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class using the specified open instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy__ctor_System_String_\" data-linktype=\"self-bookmark\">SqlBulkCopy(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes and opens a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> based on the supplied <code>connectionString</code>. The constructor uses the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to initialize a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy__ctor_System_String_System_Data_SqlClient_SqlBulkCopyOptions_\" data-linktype=\"self-bookmark\">SqlBulkCopy(String,SqlBulkCopyOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes and opens a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> based on the supplied <code>connectionString</code>. The constructor uses that <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to initialize a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class. The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance behaves according to options supplied in the <code>copyOptions</code> parameter.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy__ctor_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlBulkCopyOptions_System_Data_SqlClient_SqlTransaction_\" data-linktype=\"self-bookmark\">SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class using the supplied existing open instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance behaves according to options supplied in the <code>copyOptions</code> parameter. If a non-null <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> is supplied, the copy operations will be performed within that transaction.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_BatchSize\" data-linktype=\"self-bookmark\">BatchSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_BulkCopyTimeout\" data-linktype=\"self-bookmark\">BulkCopyTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Number of seconds for the operation to complete before it times out.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_ColumnMappings\" data-linktype=\"self-bookmark\">ColumnMappings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a collection of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> items. Column mappings define the relationships between columns in the data source and columns in the destination.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_DestinationTableName\" data-linktype=\"self-bookmark\">DestinationTableName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Name of the destination table on the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_EnableStreaming\" data-linktype=\"self-bookmark\">EnableStreaming</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables or disables a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object to stream data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_NotifyAfter\" data-linktype=\"self-bookmark\">NotifyAfter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Defines the number of rows to be processed before generating a notification event.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_Common_DbDataReader_\" data-linktype=\"self-bookmark\">WriteToServer(DbDataReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataRow___\" data-linktype=\"self-bookmark\">WriteToServer(DataRow[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataTable_\" data-linktype=\"self-bookmark\">WriteToServer(DataTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_IDataReader_\" data-linktype=\"self-bookmark\">WriteToServer(IDataReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataTable_System_Data_DataRowState_\" data-linktype=\"self-bookmark\">WriteToServer(DataTable,DataRowState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_Common_DbDataReader_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DbDataReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataRow___\" data-linktype=\"self-bookmark\">WriteToServerAsync(DataRow[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DataTable)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_IDataReader_\" data-linktype=\"self-bookmark\">WriteToServerAsync(IDataReader)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_Common_DbDataReader_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DbDataReader,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataRow___System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DataRow[],CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Data_DataRowState_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DataTable,DataRowState)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DataTable,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_IDataReader_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteToServerAsync(IDataReader,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Data_DataRowState_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">WriteToServerAsync(DataTable,DataRowState,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_SqlRowsCopied\" data-linktype=\"self-bookmark\">SqlRowsCopied</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs every time that the number of rows specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.NotifyAfter*</span> property have been processed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Data_SqlClient_SqlBulkCopy_System_IDisposable_Dispose\" data-linktype=\"self-bookmark\">IDisposable.Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_Data_SqlClient_SqlConnection_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlBulkCopy(SqlConnection)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class using the specified open instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The already open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance that will be used to perform the bulk copy operation. If your connection string does not use <code>Integrated Security = true</code>, you can use <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Because the connection is already open when the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance is initialized, the connection remains open after the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance is closed.  </p>\n<p> If the <code>connection</code> argument is null, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> is used to copy data from the <strong>Production.Product</strong> table in the SQL Server<strong>AdventureWorks</strong> database to a similar table in the same database. This example is for demonstration purposes only. You would not use <code>SqlBulkCopy</code> to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks BulkCopy.Single#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Open the destination connection. In the real world you would \n            // not use SqlBulkCopy to move data from one table to the other \n            // in the same database. This is for demonstration purposes only.\n            using (SqlConnection destinationConnection =\n                       new SqlConnection(connectionString))\n            {\n                destinationConnection.Open();\n\n                // Set up the bulk copy object. \n                // Note that the column positions in the source\n                // data reader match the column positions in \n                // the destination table so there is no need to\n                // map columns.\n                using (SqlBulkCopy bulkCopy =\n                           new SqlBulkCopy(destinationConnection))\n                {\n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                    try\n                    {\n                        // Write from the source to the destination.\n                        bulkCopy.WriteToServer(reader);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        // Close the SqlDataReader. The SqlBulkCopy\n                        // object is automatically closed at the end\n                        // of the using block.\n                        reader.Close();\n                    }\n                }\n\n                // Perform a final count on the destination \n                // table to see how many rows were added.\n                long countEnd = System.Convert.ToInt32(\n                    commandRowCount.ExecuteScalar());\n                Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n                Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks BulkCopy.Single#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Open the destination connection. In the real world you would \n            &#39; not use SqlBulkCopy to move data from one table to the other   \n            &#39; in the same database. This is for demonstration purposes only.\n            Using destinationConnection As SqlConnection = _\n                New SqlConnection(connectionString)\n                destinationConnection.Open()\n\n                &#39; Set up the bulk copy object. \n                &#39; The column positions in the source data reader \n                &#39; match the column positions in the destination table, \n                &#39; so there is no need to map columns.\n                Using bulkCopy As SqlBulkCopy = _\n                  New SqlBulkCopy(destinationConnection)\n                    bulkCopy.DestinationTableName = _\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                    Try\n                        &#39; Write from the source to the destination.\n                        bulkCopy.WriteToServer(reader)\n\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n\n                    Finally\n                        &#39; Close the SqlDataReader. The SqlBulkCopy\n                        &#39; object is automatically closed at the end\n                        &#39; of the Using block.\n                        reader.Close()\n                    End Try\n                End Using\n\n                &#39; Perform a final count on the destination table\n                &#39; to see how many rows were added.\n                Dim countEnd As Long = _\n                    System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n                Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n                Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n                Console.WriteLine(&quot;Press Enter to finish.&quot;)\n                Console.ReadLine()\n            End Using\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlBulkCopy(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes and opens a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> based on the supplied <code>connectionString</code>. The constructor uses the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to initialize a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlBulkCopy (string connectionString);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string defining the connection that will be opened for use by the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance. If your connection string does not use <code>Integrated Security = true</code>, you can use <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> or <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> and <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The connection is automatically closed at the end of the bulk copy operation.  </p>\n<p> If <code>connectionString</code> is null, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown. If <code>connectionString</code> is an empty string, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance is closed.  </p>\n<p> In this example, the source data is first read from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ConnectionString#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object using a connection string. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ConnectionString#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object using a connection string. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_String_System_Data_SqlClient_SqlBulkCopyOptions_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlBulkCopy(String,SqlBulkCopyOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes and opens a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> based on the supplied <code>connectionString</code>. The constructor uses that <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to initialize a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class. The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance behaves according to options supplied in the <code>copyOptions</code> parameter.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionString</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string defining the connection that will be opened for use by the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance. If your connection string does not use <code>Integrated Security = true</code>, you can use <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> or <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> and <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>copyOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of values from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> enumeration that determines which data source rows are copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can obtain detailed information about all the bulk copy options in the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> topic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. The source table and destination table each include an Identity column. By default, a new value for the <strong>Identity</strong> column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the <strong>Identity</strong> values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the <strong>dbo.BulkCopyDemoMatchingColumns</strong> table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren&#39;t added because of primary key constraint violations.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.KeepIdentity#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Create the SqlBulkCopy object using a connection string \n            // and the KeepIdentity option. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy =\n                new SqlBulkCopy(connectionString, SqlBulkCopyOptions.KeepIdentity))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.KeepIdentity#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Create the SqlBulkCopy object using a connection string \n            &#39; and the KeepIdentity option. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connectionString, SqlBulkCopyOptions.KeepIdentity)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                    Finally\n                        &#39; Close the SqlDataReader. The SqlBulkCopy\n                        &#39; object is automatically closed at the end\n                        &#39; of the Using block.\n                        reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlBulkCopyOptions_System_Data_SqlClient_SqlTransaction_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class using the supplied existing open instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance behaves according to options supplied in the <code>copyOptions</code> parameter. If a non-null <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> is supplied, the copy operations will be performed within that transaction.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>connection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The already open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance that will be used to perform the bulk copy. If your connection string does not use <code>Integrated Security = true</code>, you can use <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>copyOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A combination of values from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> enumeration that determines which data source rows are copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>externalTransaction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An existing <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> instance under which the bulk copy will occur.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If options include <code>UseInternalTransaction</code> and the <code>externalTransaction</code> argument is not null, an <strong>InvalidArgumentException</strong> is thrown.  </p>\n<p> For examples demonstrating how to use <code>SqlBulkCopy</code> in a transaction, see <a href=\"../Topic/Transaction%20and%20Bulk%20Copy%20Operations.md\" data-linktype=\"relative-path\">Transaction and Bulk Copy Operations</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_BatchSize\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_BatchSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BatchSize</div>        \r\n          </div>\r\n    \r\n            <p>Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int BatchSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The integer value of the BatchSize property, or zero if no value has been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A batch is complete when BatchSize rows have been processed or there are no more rows to send to the destination data source.  </p>\n<p> Zero (the default) indicates that each <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operation is a single batch.  </p>\n<p> If the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance has been declared without the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> option in effect, rows are sent to the server BatchSize rows at a time, but no transaction-related action is taken. If <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> is in effect, each batch of rows is inserted as a separate transaction.  </p>\n<p> The BatchSize property can be set at any time. If a bulk copy is already in progress, the current batch is sized according to the previous batch size. Subsequent batches use the new size. If the BatchSize is initially zero and changed while a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operation is already in progress, that operation loads the data as a single batch. Any subsequent <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operations on the same <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance use the new BatchSize.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see <a href=\"../Topic/Transaction%20and%20Bulk%20Copy%20Operations.md\" data-linktype=\"relative-path\">Transaction and Bulk Copy Operations</a>.  </p>\n<p> In this example, the source data is first read from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.BatchSize#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Create the SqlBulkCopy object using a connection string. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                // Set the BatchSize.\n                bulkCopy.BatchSize = 50;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n\n                // Perform a final count on the destination \n                // table to see how many rows were added.\n                long countEnd = System.Convert.ToInt32(\n                    commandRowCount.ExecuteScalar());\n                Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n                Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.BatchSize#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Create the SqlBulkCopy object using a connection string. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                &#39; Set the BatchSize.\n                bulkCopy.BatchSize = 50\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_BulkCopyTimeout\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_BulkCopyTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BulkCopyTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Number of seconds for the operation to complete before it times out.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int BulkCopyTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The integer value of the BulkCopyTimeout property. The default is 30 seconds. A value of 0 indicates no limit; the bulk copy will wait indefinitely.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation does time out, the transaction is not committed and all copied rows are removed from the destination table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  </p>\n<p> In this example, the source data is first read from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL<code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.Timeout#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Create the SqlBulkCopy object using a connection string. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                &#39; Set the timeout.\n                bulkCopy.BulkCopyTimeout = 60\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.Timeout#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Create the SqlBulkCopy object using a connection string. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                // Set the timeout.\n                bulkCopy.BulkCopyTimeout = 60;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_ColumnMappings\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnMappings</div>        \r\n          </div>\r\n    \r\n            <p>Returns a collection of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> items. Column mappings define the relationships between columns in the data source and columns in the destination.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a></div>\r\n                  </div>\r\n                  <p>A collection of column mappings. By default, it is an empty collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the ColumnMappings collection is unnecessary. However, if the column counts differ, or the ordinal positions are not consistent, you must use ColumnMappings to make sure that data is copied into the correct columns.  </p>\n<p> During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed. Any attempt to change it will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_DestinationTableName\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_DestinationTableName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DestinationTableName</div>        \r\n          </div>\r\n    \r\n            <p>Name of the destination table on the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DestinationTableName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string value of the DestinationTableName property, or null if none as been supplied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If DestinationTableName has not been set when <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> is called, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown.  </p>\n<p> If DestinationTableName is modified while a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operation is running, the change does not affect the current operation. The new DestinationTableName value is used the next time a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method is called.  </p>\n<p> DestinationTableName is a three-part name (<code>&lt;database&gt;.&lt;owningschema&gt;.&lt;name&gt;</code>). You can qualify the table name with its database and owning schema if you choose. However, if the table name uses an underscore (&quot;_&quot;) or any other special characters, you must escape the name using surrounding brackets as in (<code>[&lt;database&gt;.&lt;owningschema&gt;.&lt;name_01&gt;]</code>). For more information, see &quot;Identifiers&quot; in SQL Server Books Online.  </p>\n<p> You can bulk-copy data to a temporary table by using a value such as <code>tempdb..#table</code> or <code>tempdb.&lt;owner&gt;.#table</code> for the DestinationTableName property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the <strong>AdventureWorks</strong> database.  </p>\n<p> In this example, the connection is first used to read data from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.Single#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Open the destination connection. In the real world you would \n            &#39; not use SqlBulkCopy to move data from one table to the other   \n            &#39; in the same database. This is for demonstration purposes only.\n            Using destinationConnection As SqlConnection = _\n                New SqlConnection(connectionString)\n                destinationConnection.Open()\n\n                &#39; Set up the bulk copy object. \n                &#39; The column positions in the source data reader \n                &#39; match the column positions in the destination table, \n                &#39; so there is no need to map columns.\n                Using bulkCopy As SqlBulkCopy = _\n                  New SqlBulkCopy(destinationConnection)\n                    bulkCopy.DestinationTableName = _\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                    Try\n                        &#39; Write from the source to the destination.\n                        bulkCopy.WriteToServer(reader)\n\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n\n                    Finally\n                        &#39; Close the SqlDataReader. The SqlBulkCopy\n                        &#39; object is automatically closed at the end\n                        &#39; of the Using block.\n                        reader.Close()\n                    End Try\n                End Using\n\n                &#39; Perform a final count on the destination table\n                &#39; to see how many rows were added.\n                Dim countEnd As Long = _\n                    System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n                Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n                Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n                Console.WriteLine(&quot;Press Enter to finish.&quot;)\n                Console.ReadLine()\n            End Using\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.Single#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Open the destination connection. In the real world you would \n            // not use SqlBulkCopy to move data from one table to the other \n            // in the same database. This is for demonstration purposes only.\n            using (SqlConnection destinationConnection =\n                       new SqlConnection(connectionString))\n            {\n                destinationConnection.Open();\n\n                // Set up the bulk copy object. \n                // Note that the column positions in the source\n                // data reader match the column positions in \n                // the destination table so there is no need to\n                // map columns.\n                using (SqlBulkCopy bulkCopy =\n                           new SqlBulkCopy(destinationConnection))\n                {\n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                    try\n                    {\n                        // Write from the source to the destination.\n                        bulkCopy.WriteToServer(reader);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        // Close the SqlDataReader. The SqlBulkCopy\n                        // object is automatically closed at the end\n                        // of the using block.\n                        reader.Close();\n                    }\n                }\n\n                // Perform a final count on the destination \n                // table to see how many rows were added.\n                long countEnd = System.Convert.ToInt32(\n                    commandRowCount.ExecuteScalar());\n                Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n                Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_EnableStreaming\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_EnableStreaming_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnableStreaming</div>        \r\n          </div>\r\n    \r\n            <p>Enables or disables a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object to stream data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool EnableStreaming { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object can stream data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object; otherwise, false. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When EnableStreaming is <code>true</code>, <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> reads from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object using <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a>, optimizing memory usage by using the <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> streaming capabilities. When itâ€™s set to false, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class loads all the data returned by the <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object into memory before sending it to SQL Server or SQL Azure.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_NotifyAfter\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_NotifyAfter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NotifyAfter</div>        \r\n          </div>\r\n    \r\n            <p>Defines the number of rows to be processed before generating a notification event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int NotifyAfter { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The integer value of the NotifyAfter property, or zero if the property has not been set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is designed for user interface components that illustrate the progress of a bulk copy operation. It indicates the number of rows to be processed before generating a notification event. The NotifyAfter property can be set at any time, even while a bulk copy operation is underway. Changes made during a bulk copy operation take effect after the next notification. The new setting applies to all subsequent operations on the same instance.  </p>\n<p> If NotifyAfter is set to a number less than zero, an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  </p>\n<p> In this example, the connection is first used to read data from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.NotifyAfter#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;NotifyAfter Sample&quot;)\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Create the SqlBulkCopy object using a connection string. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                &#39; Set up the event handler to notify after 50 rows.\n                AddHandler bulkCopy.SqlRowsCopied, AddressOf OnSqlRowsCopied\n                bulkCopy.DestinationTableName = _\n                 &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n                bulkCopy.NotifyAfter = 50\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Sub OnSqlRowsCopied(ByVal sender As Object, _\n        ByVal args As SqlRowsCopiedEventArgs)\n        Console.WriteLine(&quot;Copied {0} so far...&quot;, args.RowsCopied)\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.NotifyAfter#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;NotifyAfter Sample&quot;);\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Create the SqlBulkCopy object using a connection string. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                // Set up the event handler to notify after 50 rows.\n                bulkCopy.SqlRowsCopied +=\n                    new SqlRowsCopiedEventHandler(OnSqlRowsCopied);\n                bulkCopy.NotifyAfter = 50;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static void OnSqlRowsCopied(\n        object sender, SqlRowsCopiedEventArgs e)\n    {\n        Console.WriteLine(&quot;Copied {0} so far...&quot;, e.RowsCopied);\n    }\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_Close\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>After you call a Close on the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object, no other operation will succeed. Calls to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> Calling the Close method from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_SqlRowsCopied\" data-linktype=\"relative-path\">SqlRowsCopied</a> event causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> to be thrown.  </p>\n<p> Note that open <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instances are closed implicitly at the end of a <code>using</code> block.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the same <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance to add sales orders and their associated details to two destination tables. Because the <strong>AdventureWorks</strong> sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.OrdersDetails#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Empty the destination tables.\n            Dim deleteHeader As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;, connection)\n            deleteHeader.ExecuteNonQuery()\n            deleteHeader.Dispose()\n            Dim deleteDetail As New SqlCommand( _\n              &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;, connection)\n            deleteDetail.ExecuteNonQuery()\n\n            &#39; Perform an initial count on the destination table \n            &#39; with matching columns.\n            Dim countRowHeader As New SqlCommand( _\n               &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;, _\n                connection)\n            Dim countStartHeader As Long = System.Convert.ToInt32( _\n             countRowHeader.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Header table = {0}&quot;, _\n             countStartHeader)\n\n            &#39; Perform an initial count on the destination table \n            &#39; with different column positions.\n            Dim countRowDetail As New SqlCommand( _\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;, _\n                connection)\n            Dim countStartDetail As Long = System.Convert.ToInt32( _\n                countRowDetail.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count for Detail table = &quot; &amp; _\n               countStartDetail)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            &#39; The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            &#39; tables are quite large and could easily cause a timeout\n            &#39; if all data from the tables is added to the destination.\n            &#39; To keep the example simple and quick, a parameter is \n            &#39; used to select only orders for a particular account as\n            &#39; the source for the bulk insert.\n            Dim headerData As SqlCommand = New SqlCommand( _\n             &quot;SELECT [SalesOrderID], [OrderDate], &quot; &amp; _\n             &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; &amp; _\n             &quot;WHERE [AccountNumber] = @accountNumber;&quot;, _\n             connection)\n\n            Dim parameterAccount As SqlParameter = New SqlParameter()\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar\n            parameterAccount.Direction = ParameterDirection.Input\n            parameterAccount.Value = &quot;10-4020-000034&quot;\n            headerData.Parameters.Add(parameterAccount)\n\n            Dim readerHeader As SqlDataReader = _\n             headerData.ExecuteReader()\n\n            &#39; Get the Detail data in a separate connection.\n            Using connection2 As SqlConnection = New SqlConnection(connectionString)\n                connection2.Open()\n\n                Dim sourceDetailData As SqlCommand = New SqlCommand( _\n                 &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], &quot; &amp; _\n                 &quot;[SalesOrderDetailID], [OrderQty], [ProductID], [UnitPrice] &quot; &amp; _\n                 &quot;FROM [Sales].[SalesOrderDetail] INNER JOIN &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader] &quot; &amp; _\n                 &quot;ON [Sales].[SalesOrderDetail].[SalesOrderID] = &quot; &amp; _\n                 &quot;[Sales].[SalesOrderHeader].[SalesOrderID] &quot; &amp; _\n                 &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2)\n\n                Dim accountDetail As SqlParameter = New SqlParameter()\n                accountDetail.ParameterName = &quot;@accountNumber&quot;\n                accountDetail.SqlDbType = SqlDbType.NVarChar\n                accountDetail.Direction = ParameterDirection.Input\n                accountDetail.Value = &quot;10-4020-000034&quot;\n                sourceDetailData.Parameters.Add( _\n                 accountDetail)\n\n                Dim readerDetail As SqlDataReader = _\n                 sourceDetailData.ExecuteReader()\n\n                &#39; Create the SqlBulkCopy object.\n                Using bulkCopy As SqlBulkCopy = _\n                  New SqlBulkCopy(connectionString)\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderHeader&quot;\n\n                    &#39; Write readerHeader to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerHeader)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerHeader.Close()\n                    End Try\n\n                    &#39; Set up a different destination and map columns.\n                    bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoOrderDetail&quot;\n\n                    &#39; Write readerDetail to the destination.\n                    Try\n                        bulkCopy.WriteToServer(readerDetail)\n                    Catch ex As Exception\n                        Console.WriteLine(ex.Message)\n                    Finally\n                        readerDetail.Close()\n                    End Try\n                End Using\n\n                &#39; Perform a final count on the destination tables\n                &#39; to see how many rows were added.\n                Dim countEndHeader As Long = System.Convert.ToInt32( _\n                  countRowHeader.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;, _\n                  countEndHeader - countStartHeader)\n                Dim countEndDetail As Long = System.Convert.ToInt32( _\n                   countRowDetail.ExecuteScalar())\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;, _\n                    countEndDetail - countStartDetail)\n\n                Console.WriteLine(&quot;Press Enter to finish.&quot;)\n                Console.ReadLine()\n            End Using\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.OrdersDetails#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Empty the destination tables. \n            SqlCommand deleteHeader = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            deleteHeader.ExecuteNonQuery();\n            SqlCommand deleteDetail = new SqlCommand(\n                &quot;DELETE FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            deleteDetail.ExecuteNonQuery();\n\n            // Perform an initial count on the destination\n            //  table with matching columns. \n            SqlCommand countRowHeader = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderHeader;&quot;,\n                connection);\n            long countStartHeader = System.Convert.ToInt32(\n                countRowHeader.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Header table = {0}&quot;,\n                countStartHeader);\n\n            // Perform an initial count on the destination\n            // table with different column positions. \n            SqlCommand countRowDetail = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoOrderDetail;&quot;,\n                connection);\n            long countStartDetail = System.Convert.ToInt32(\n                countRowDetail.ExecuteScalar());\n            Console.WriteLine(\n                &quot;Starting row count for Detail table = {0}&quot;,\n                countStartDetail);\n\n            // Get data from the source table as a SqlDataReader.\n            // The Sales.SalesOrderHeader and Sales.SalesOrderDetail\n            // tables are quite large and could easily cause a timeout\n            // if all data from the tables is added to the destination. \n            // To keep the example simple and quick, a parameter is  \n            // used to select only orders for a particular account \n            // as the source for the bulk insert. \n            SqlCommand headerData = new SqlCommand(\n                &quot;SELECT [SalesOrderID], [OrderDate], &quot; +\n                &quot;[AccountNumber] FROM [Sales].[SalesOrderHeader] &quot; +\n                &quot;WHERE [AccountNumber] = @accountNumber;&quot;,\n                connection);\n            SqlParameter parameterAccount = new SqlParameter();\n            parameterAccount.ParameterName = &quot;@accountNumber&quot;;\n            parameterAccount.SqlDbType = SqlDbType.NVarChar;\n            parameterAccount.Direction = ParameterDirection.Input;\n            parameterAccount.Value = &quot;10-4020-000034&quot;;\n            headerData.Parameters.Add(parameterAccount);\n            SqlDataReader readerHeader = headerData.ExecuteReader();\n\n            // Get the Detail data in a separate connection.\n            using (SqlConnection connection2 = new SqlConnection(connectionString))\n            {\n                connection2.Open();\n                SqlCommand sourceDetailData = new SqlCommand(\n                    &quot;SELECT [Sales].[SalesOrderDetail].[SalesOrderID], [SalesOrderDetailID], &quot; +\n                    &quot;[OrderQty], [ProductID], [UnitPrice] FROM [Sales].[SalesOrderDetail] &quot; +\n                    &quot;INNER JOIN [Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].&quot; +\n                    &quot;[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] &quot; +\n                    &quot;WHERE [AccountNumber] = @accountNumber;&quot;, connection2);\n\n                SqlParameter accountDetail = new SqlParameter();\n                accountDetail.ParameterName = &quot;@accountNumber&quot;;\n                accountDetail.SqlDbType = SqlDbType.NVarChar;\n                accountDetail.Direction = ParameterDirection.Input;\n                accountDetail.Value = &quot;10-4020-000034&quot;;\n                sourceDetailData.Parameters.Add(accountDetail);\n                SqlDataReader readerDetail = sourceDetailData.ExecuteReader();\n\n                // Create the SqlBulkCopy object. \n                using (SqlBulkCopy bulkCopy =\n                           new SqlBulkCopy(connectionString))\n                {\n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoOrderHeader&quot;;\n\n                    // Write readerHeader to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerHeader);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerHeader.Close();\n                    }\n\n                    // Set up a different destination and \n                    // map columns. \n                    bulkCopy.DestinationTableName =\n                        &quot;dbo.BulkCopyDemoOrderDetail&quot;;\n\n                    // Write readerDetail to the destination.\n                    try\n                    {\n                        bulkCopy.WriteToServer(readerDetail);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                    finally\n                    {\n                        readerDetail.Close();\n                    }\n                }\n\n                // Perform a final count on the destination\n                // tables to see how many rows were added. \n                long countEndHeader = System.Convert.ToInt32(\n                    countRowHeader.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Header table.&quot;,\n                    countEndHeader - countStartHeader);\n                long countEndDetail = System.Convert.ToInt32(\n                    countRowDetail.ExecuteScalar());\n                Console.WriteLine(&quot;{0} rows were added to the Detail table.&quot;,\n                    countEndDetail - countStartDetail);\n                Console.WriteLine(&quot;Press Enter to finish.&quot;);\n                Console.ReadLine();\n            }\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_Common_DbDataReader_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServer(DbDataReader)</div>        \r\n          </div>\r\n    \r\n            <p>Copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteToServer (System.Data.Common.DbDataReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataRow___\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServer(DataRow[])</div>        \r\n          </div>\r\n    \r\n            <p>Copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteToServer (System.Data.DataRow[] rows);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rows</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> columns to the destination database table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data from a <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array. The destination table is a table in the <strong>AdventureWorks</strong> database.  </p>\n<p> In this example, a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is created at run time. A single row is selected from the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to copy to the destination table.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.RowArray#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                connection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Create a table with some rows. \n            DataTable newProducts = MakeTable();\n\n            // Get a reference to a single row in the table. \n            DataRow[] rowArray = newProducts.Select(\n                &quot;Name=&#39;CC-101-BK&#39;&quot;);\n\n            // Create the SqlBulkCopy object. \n            // Note that the column positions in the source DataTable \n            // match the column positions in the destination table so \n            // there is no need to map columns. \n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write the array of rows to the destination.\n                    bulkCopy.WriteToServer(rowArray);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static DataTable MakeTable()\n        // Create a new DataTable named NewProducts. \n    {\n        DataTable newProducts = new DataTable(&quot;NewProducts&quot;);\n\n        // Add three column objects to the table. \n        DataColumn productID = new DataColumn();\n        productID.DataType = System.Type.GetType(&quot;System.Int32&quot;);\n        productID.ColumnName = &quot;ProductID&quot;;\n        productID.AutoIncrement = true;\n        newProducts.Columns.Add(productID);\n\n        DataColumn productName = new DataColumn();\n        productName.DataType = System.Type.GetType(&quot;System.String&quot;);\n        productName.ColumnName = &quot;Name&quot;;\n        newProducts.Columns.Add(productName);\n\n        DataColumn productNumber = new DataColumn();\n        productNumber.DataType = System.Type.GetType(&quot;System.String&quot;);\n        productNumber.ColumnName = &quot;ProductNumber&quot;;\n        newProducts.Columns.Add(productNumber);\n\n        // Create an array for DataColumn objects.\n        DataColumn[] keys = new DataColumn[1];\n        keys[0] = productID;\n        newProducts.PrimaryKey = keys;\n\n        // Add some new rows to the collection. \n        DataRow row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-WH&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - White&quot;;\n\n        newProducts.Rows.Add(row);\n        row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-BK&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - Black&quot;;\n\n        newProducts.Rows.Add(row);\n        row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-ST&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - Stainless&quot;;\n        newProducts.Rows.Add(row);\n        newProducts.AcceptChanges();\n\n        // Return the new DataTable. \n        return newProducts;\n    }\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.RowArray#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = _\n           New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                connection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Create a table with some rows.\n            Dim newProducts As DataTable = MakeTable()\n\n            &#39; Get a reference to a single row in the table.\n            Dim rowArray() As DataRow = newProducts.Select( _\n             &quot;Name=&#39;CC-101-BK&#39;&quot;)\n\n            &#39; Note that the column positions in the source DataTable \n            &#39; match the column positions in the destination table, \n            &#39; so there is no need to map columns.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connection)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write the array of rows to the destination.\n                    bulkCopy.WriteToServer(rowArray)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function MakeTable() As DataTable\n        &#39; Create a new DataTable named NewProducts.\n        Dim newProducts As DataTable = _\n         New DataTable(&quot;NewProducts&quot;)\n\n        &#39; Add three column objects to the table.\n        Dim productID As DataColumn = New DataColumn()\n        productID.DataType = System.Type.GetType(&quot;System.Int32&quot;)\n        productID.ColumnName = &quot;ProductID&quot;\n        productID.AutoIncrement = True\n        newProducts.Columns.Add(productID)\n\n        Dim productName As DataColumn = New DataColumn()\n        productName.DataType = System.Type.GetType(&quot;System.String&quot;)\n        productName.ColumnName = &quot;Name&quot;\n        newProducts.Columns.Add(productName)\n\n        Dim productNumber As DataColumn = New DataColumn()\n        productNumber.DataType = System.Type.GetType(&quot;System.String&quot;)\n        productNumber.ColumnName = &quot;ProductNumber&quot;\n        newProducts.Columns.Add(productNumber)\n\n        &#39; Create an array for DataColumn objects.\n        Dim keys(0) As DataColumn\n        keys(0) = productID\n        newProducts.PrimaryKey = keys\n\n        &#39; Add some new rows to the collection.\n        Dim row As DataRow\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-WH&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - White&quot;\n        newProducts.Rows.Add(row)\n\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-BK&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - Black&quot;\n        newProducts.Rows.Add(row)\n\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-ST&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - Stainless&quot;\n        newProducts.Rows.Add(row)\n        newProducts.AcceptChanges()\n\n        &#39; Return the new DataTable.\n        Return newProducts\n    End Function\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataTable_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServer(DataTable)</div>        \r\n          </div>\r\n    \r\n            <p>Copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteToServer (System.Data.DataTable table);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All rows in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> are copied to the destination table except those that have been deleted.  </p>\n<p> While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> columns to the destination database table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Console application demonstrates how to bulk load data from a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>. The destination table is a table in the <strong>AdventureWorks</strong> database.  </p>\n<p> In this example, a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is created at run time and is the source of the <code>SqlBulkCopy</code> operation.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.DataTable#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                connection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Create a table with some rows. \n            DataTable newProducts = MakeTable();\n            \n            // Create the SqlBulkCopy object. \n            // Note that the column positions in the source DataTable \n            // match the column positions in the destination table so \n            // there is no need to map columns. \n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))\n            {\n                bulkCopy.DestinationTableName = \n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(newProducts);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static DataTable MakeTable()\n        // Create a new DataTable named NewProducts. \n    {\n        DataTable newProducts = new DataTable(&quot;NewProducts&quot;);\n\n        // Add three column objects to the table. \n        DataColumn productID = new DataColumn();\n        productID.DataType = System.Type.GetType(&quot;System.Int32&quot;);\n        productID.ColumnName = &quot;ProductID&quot;;\n        productID.AutoIncrement = true;\n        newProducts.Columns.Add(productID);\n\n        DataColumn productName = new DataColumn();\n        productName.DataType = System.Type.GetType(&quot;System.String&quot;);\n        productName.ColumnName = &quot;Name&quot;;\n        newProducts.Columns.Add(productName);\n\n        DataColumn productNumber = new DataColumn();\n        productNumber.DataType = System.Type.GetType(&quot;System.String&quot;);\n        productNumber.ColumnName = &quot;ProductNumber&quot;;\n        newProducts.Columns.Add(productNumber);\n\n        // Create an array for DataColumn objects.\n        DataColumn[] keys = new DataColumn[1];\n        keys[0] = productID;\n        newProducts.PrimaryKey = keys;\n\n        // Add some new rows to the collection. \n        DataRow row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-WH&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - White&quot;;\n\n        newProducts.Rows.Add(row);\n        row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-BK&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - Black&quot;;\n\n        newProducts.Rows.Add(row);\n        row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-ST&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - Stainless&quot;;\n        newProducts.Rows.Add(row);\n        newProducts.AcceptChanges();\n\n        // Return the new DataTable. \n        return newProducts;\n    }\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.DataTable#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = _\n           New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                connection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Create a table with some rows.\n            Dim newProducts As DataTable = MakeTable()\n\n            &#39; Note that the column positions in the source DataTable \n            &#39; match the column positions in the destination table, \n            &#39; so there is no need to map columns.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connection)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(newProducts)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function MakeTable() As DataTable\n        &#39; Create a new DataTable named NewProducts.\n        Dim newProducts As DataTable = _\n         New DataTable(&quot;NewProducts&quot;)\n\n        &#39; Add three column objects to the table.\n        Dim productID As DataColumn = New DataColumn()\n        productID.DataType = System.Type.GetType(&quot;System.Int32&quot;)\n        productID.ColumnName = &quot;ProductID&quot;\n        productID.AutoIncrement = True\n        newProducts.Columns.Add(productID)\n\n        Dim productName As DataColumn = New DataColumn()\n        productName.DataType = System.Type.GetType(&quot;System.String&quot;)\n        productName.ColumnName = &quot;Name&quot;\n        newProducts.Columns.Add(productName)\n\n        Dim productNumber As DataColumn = New DataColumn()\n        productNumber.DataType = System.Type.GetType(&quot;System.String&quot;)\n        productNumber.ColumnName = &quot;ProductNumber&quot;\n        newProducts.Columns.Add(productNumber)\n\n        &#39; Create an array for DataColumn objects.\n        Dim keys(0) As DataColumn\n        keys(0) = productID\n        newProducts.PrimaryKey = keys\n\n        &#39; Add some new rows to the collection.\n        Dim row As DataRow\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-WH&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - White&quot;\n        newProducts.Rows.Add(row)\n\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-BK&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - Black&quot;\n        newProducts.Rows.Add(row)\n\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-ST&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - Stainless&quot;\n        newProducts.Rows.Add(row)\n        newProducts.AcceptChanges()\n\n        &#39; Return the new DataTable.\n        Return newProducts\n    End Function\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_IDataReader_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServer(IDataReader)</div>        \r\n          </div>\r\n    \r\n            <p>Copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteToServer (System.Data.IDataReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The copy operation starts at the next available row in the reader. Most of the time, the reader was just returned by <a class=\"xref\" href=\"system.data.idbcommand#System_Data_IDbCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or a similar call, so the next available row is the first row. To process multiple results, call <a class=\"xref\" href=\"system.data.idatareader#System_Data_IDataReader_NextResult_\" data-linktype=\"relative-path\">NextResult</a> on the data reader and call WriteToServer again.  </p>\n<p> Note that using WriteToServer modifies the state of the reader. The method will call <a class=\"xref\" href=\"system.data.idatareader#System_Data_IDataReader_Read_\" data-linktype=\"relative-path\">Read</a> until it returns false, the operation is aborted, or an error occurs. This means that the data reader will be in a different state, probably at the end of the result set, when the WriteToServer operation is complete.  </p>\n<p> While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the data reader columns to the destination database table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data from a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a>. The destination table is a table in the <strong>AdventureWorks</strong> database.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.ConnectionString#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Set up the bulk copy object using a connection string. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = _\n                &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.ConnectionString#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Set up the bulk copy object using a connection string. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy =\n                       new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataTable_System_Data_DataRowState_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServer(DataTable,DataRowState)</div>        \r\n          </div>\r\n    \r\n            <p>Copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> enumeration. Only rows matching the row state are copied to the destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Only rows in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that are in the states indicated in the <code>rowState</code> argument and have not been deleted are copied to the destination table.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> is specified, any <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>, <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>, and <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> rows will also be copied to the server. No exception will be raised.  </p>\n</div>\n<p> While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> columns to the destination database table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following Console application demonstrates how to bulk load only the rows in a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the <strong>AdventureWorks</strong> database.  </p>\n<p> In this example, a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a <code>DataRowState.Unchanged``rowState</code> argument, so only the two unchanged rows are bulk copied to the destination.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.DataRowState#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a connection to the AdventureWorks database.\n        using (SqlConnection connection =\n                   new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                connection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Create a table with some rows. \n            DataTable newProducts = MakeTable();\n            \n            // Make a change to one of the rows in the DataTable.\n            DataRow row = newProducts.Rows[0];\n            row.BeginEdit();\n            row[&quot;Name&quot;] = &quot;AAA&quot;;\n            row.EndEdit();\n\n            // Create the SqlBulkCopy object. \n            // Note that the column positions in the source DataTable \n            // match the column positions in the destination table so \n            // there is no need to map columns. \n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))\n            {\n                bulkCopy.DestinationTableName = \n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write unchanged rows from the source to the destination.\n                    bulkCopy.WriteToServer(newProducts, DataRowState.Unchanged);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static DataTable MakeTable()\n        // Create a new DataTable named NewProducts. \n    {\n        DataTable newProducts = new DataTable(&quot;NewProducts&quot;);\n\n        // Add three column objects to the table. \n        DataColumn productID = new DataColumn();\n        productID.DataType = System.Type.GetType(&quot;System.Int32&quot;);\n        productID.ColumnName = &quot;ProductID&quot;;\n        productID.AutoIncrement = true;\n        newProducts.Columns.Add(productID);\n\n        DataColumn productName = new DataColumn();\n        productName.DataType = System.Type.GetType(&quot;System.String&quot;);\n        productName.ColumnName = &quot;Name&quot;;\n        newProducts.Columns.Add(productName);\n\n        DataColumn productNumber = new DataColumn();\n        productNumber.DataType = System.Type.GetType(&quot;System.String&quot;);\n        productNumber.ColumnName = &quot;ProductNumber&quot;;\n        newProducts.Columns.Add(productNumber);\n\n        // Create an array for DataColumn objects.\n        DataColumn[] keys = new DataColumn[1];\n        keys[0] = productID;\n        newProducts.PrimaryKey = keys;\n\n        // Add some new rows to the collection. \n        DataRow row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-WH&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - White&quot;;\n\n        newProducts.Rows.Add(row);\n        row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-BK&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - Black&quot;;\n\n        newProducts.Rows.Add(row);\n        row = newProducts.NewRow();\n        row[&quot;Name&quot;] = &quot;CC-101-ST&quot;;\n        row[&quot;ProductNumber&quot;] = &quot;Cyclocomputer - Stainless&quot;;\n        newProducts.Rows.Add(row);\n        newProducts.AcceptChanges();\n\n        // Return the new DataTable. \n        return newProducts;\n    }\n    private static string GetConnectionString()\n        // To avoid storing the connection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.DataRowState#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using connection As SqlConnection = _\n           New SqlConnection(connectionString)\n            connection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                connection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Create a table with some rows.\n            Dim newProducts As DataTable = MakeTable()\n\n            &#39; Make a change to one of the rows in the DataTable.\n            Dim row As DataRow = newProducts.Rows(0)\n            row.BeginEdit()\n            row(&quot;Name&quot;) = &quot;AAA&quot;\n            row.EndEdit()\n\n            &#39; Set up the bulk copy object. \n            &#39; Note that the column positions in the source DataTable \n            &#39; match the column positions in the destination table, \n            &#39; so there is no need to map columns.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connection)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write unchanged rows from the source to the destination.\n                    bulkCopy.WriteToServer(newProducts, DataRowState.Unchanged)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function MakeTable() As DataTable\n        &#39; Create a new DataTable named NewProducts.\n        Dim newProducts As DataTable = _\n         New DataTable(&quot;NewProducts&quot;)\n\n        &#39; Add three column objects to the table.\n        Dim productID As DataColumn = New DataColumn()\n        productID.DataType = System.Type.GetType(&quot;System.Int32&quot;)\n        productID.ColumnName = &quot;ProductID&quot;\n        productID.AutoIncrement = True\n        newProducts.Columns.Add(productID)\n\n        Dim productName As DataColumn = New DataColumn()\n        productName.DataType = System.Type.GetType(&quot;System.String&quot;)\n        productName.ColumnName = &quot;Name&quot;\n        newProducts.Columns.Add(productName)\n\n        Dim productNumber As DataColumn = New DataColumn()\n        productNumber.DataType = System.Type.GetType(&quot;System.String&quot;)\n        productNumber.ColumnName = &quot;ProductNumber&quot;\n        newProducts.Columns.Add(productNumber)\n\n        &#39; Create an array for DataColumn objects.\n        Dim keys(0) As DataColumn\n        keys(0) = productID\n        newProducts.PrimaryKey = keys\n\n        &#39; Add some new rows to the collection.\n        Dim row As DataRow\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-WH&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - White&quot;\n        newProducts.Rows.Add(row)\n\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-BK&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - Black&quot;\n        newProducts.Rows.Add(row)\n\n        row = newProducts.NewRow()\n        row(&quot;Name&quot;) = &quot;CC-101-ST&quot;\n        row(&quot;ProductNumber&quot;) = &quot;Cyclocomputer - Stainless&quot;\n        newProducts.Rows.Add(row)\n        newProducts.AcceptChanges()\n\n        &#39; Return the new DataTable.\n        Return newProducts\n    End Function\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the connection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_Common_DbDataReader_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DbDataReader)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataRow___\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DataRow[])</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rows</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DataTable)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_IDataReader_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(IDataReader)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>&#39;s associated connection was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_Common_DbDataReader_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DbDataReader,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataRow___System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DataRow[],CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rows</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Data_DataRowState_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DataTable,DataRowState)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> enumeration. Only rows matching the row state are copied to the destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DataTable,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_IDataReader_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(IDataReader,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reader</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>&#39;s associated connection was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Data_DataRowState_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteToServerAsync(DataTable,DataRowState,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>table</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rowState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> enumeration. Only rows matching the row state are copied to the destination.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>A task representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></div>\r\n                  </div>\r\n                  <p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../Topic/Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_SqlRowsCopied\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SqlRowsCopied</div>        \r\n          </div>\r\n    \r\n            <p>Occurs every time that the number of rows specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.NotifyAfter*</span> property have been processed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Note that the settings of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_NotifyAfter_\" data-linktype=\"relative-path\">NotifyAfter</a> and <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_BatchSize_\" data-linktype=\"relative-path\">BatchSize</a> are independent. Receipt of a SqlRowsCopied event does not imply that any rows have been sent to the server or committed.  </p>\n<p> You cannot call SqlBulkCopy.Close (<a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_Close_\" data-linktype=\"relative-path\">Close</a>) or SqlConnection.Close (<a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a>) from this event. Doing this will cause an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> being thrown, and the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object state will not change. If the user wants to cancel the operation from the event, the <a class=\"xref\" href=\"system.data.sqlclient.sqlrowscopiedeventargs#System_Data_SqlClient_SqlRowsCopiedEventArgs_Abort_\" data-linktype=\"relative-path\">Abort</a> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlrowscopiedeventargs\" data-linktype=\"relative-path\">SqlRowsCopiedEventArgs</a> can be used. (See <a href=\"../Topic/Transaction%20and%20Bulk%20Copy%20Operations.md\" data-linktype=\"relative-path\">Transaction and Bulk Copy Operations</a> for examples that use the <a class=\"xref\" href=\"system.data.sqlclient.sqlrowscopiedeventargs#System_Data_SqlClient_SqlRowsCopiedEventArgs_Abort_\" data-linktype=\"relative-path\">Abort</a> property.)  </p>\n<p> No action, such as transaction activity, is supported in the connection during the execution of the bulk copy operation, and it is recommended that you not use the same connection used during the SqlRowsCopied event. However, you can open a different connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following console application demonstrates how to bulk load data using a connection that is already open. The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_NotifyAfter_\" data-linktype=\"relative-path\">NotifyAfter</a> property is set so that the event handler is called after every 50 rows copied to the table.  </p>\n<p> In this example, the connection is first used to read data from a SQL Server table to a <a class=\"xref\" href=\"system.data.sqlclient.sqldatareader\" data-linktype=\"relative-path\">SqlDataReader</a> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> or loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../Topic/Bulk%20Copy%20Example%20Setup.md\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.NotifyAfter#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;NotifyAfter Sample&quot;)\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Create the SqlBulkCopy object using a connection string. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connectionString)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                &#39; Set up the event handler to notify after 50 rows.\n                AddHandler bulkCopy.SqlRowsCopied, AddressOf OnSqlRowsCopied\n                bulkCopy.DestinationTableName = _\n                 &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n                bulkCopy.NotifyAfter = 50\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                Finally\n                    &#39; Close the SqlDataReader. The SqlBulkCopy\n                    &#39; object is automatically closed at the end\n                    &#39; of the Using block.\n                    reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Sub OnSqlRowsCopied(ByVal sender As Object, _\n        ByVal args As SqlRowsCopiedEventArgs)\n        Console.WriteLine(&quot;Copied {0} so far...&quot;, args.RowsCopied)\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.NotifyAfter#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;NotifyAfter Sample&quot;);\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Create the SqlBulkCopy object using a connection string. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connectionString))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                // Set up the event handler to notify after 50 rows.\n                bulkCopy.SqlRowsCopied +=\n                    new SqlRowsCopiedEventHandler(OnSqlRowsCopied);\n                bulkCopy.NotifyAfter = 50;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static void OnSqlRowsCopied(\n        object sender, SqlRowsCopiedEventArgs e)\n    {\n        Console.WriteLine(&quot;Copied {0} so far...&quot;, e.RowsCopied);\n    }\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Data_SqlClient_SqlBulkCopy_System_IDisposable_Dispose\">\r\n    \r\n            <a id=\"System_Data_SqlClient_SqlBulkCopy_System_IDisposable_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDisposable.Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDisposable.Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlBulkCopy.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlBulkCopy.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.Close\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.EnableStreaming\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.add_SqlRowsCopied\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.remove_SqlRowsCopied\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.IDisposable.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d764c59e-02eb-20de-83e4-5099b87b34a0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Lets you efficiently bulk load a SQL Server table with data from another source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Data.SqlClient/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlBulkCopy\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Data.SqlClient.SqlBulkCopy.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Data.SqlClient.SqlBulkCopy.yml","open_to_public_contributors":true,"api_name":["System.Data.SqlClient.SqlBulkCopy","System.Data.SqlClient.SqlBulkCopy..ctor","System.Data.SqlClient.SqlBulkCopy.BatchSize","System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout","System.Data.SqlClient.SqlBulkCopy.Close","System.Data.SqlClient.SqlBulkCopy.ColumnMappings","System.Data.SqlClient.SqlBulkCopy.DestinationTableName","System.Data.SqlClient.SqlBulkCopy.EnableStreaming","System.Data.SqlClient.SqlBulkCopy.NotifyAfter","System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.add_SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.remove_SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.IDisposable.Dispose","System.Data.SqlClient.SqlBulkCopy.WriteToServer","System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlBulkCopy","System::Data::SqlClient::SqlBulkCopy","System.Data.SqlClient.SqlBulkCopy.#ctor","System::Data::SqlClient::SqlBulkCopy::#ctor","System.Data.SqlClient.SqlBulkCopy.BatchSize","System::Data::SqlClient::SqlBulkCopy::BatchSize","System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout","System::Data::SqlClient::SqlBulkCopy::BulkCopyTimeout","System.Data.SqlClient.SqlBulkCopy.Close","System::Data::SqlClient::SqlBulkCopy::Close","System.Data.SqlClient.SqlBulkCopy.ColumnMappings","System::Data::SqlClient::SqlBulkCopy::ColumnMappings","System.Data.SqlClient.SqlBulkCopy.DestinationTableName","System::Data::SqlClient::SqlBulkCopy::DestinationTableName","System.Data.SqlClient.SqlBulkCopy.EnableStreaming","System::Data::SqlClient::SqlBulkCopy::EnableStreaming","System.Data.SqlClient.SqlBulkCopy.NotifyAfter","System::Data::SqlClient::SqlBulkCopy::NotifyAfter","System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied","System::Data::SqlClient::SqlBulkCopy::SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose","System::Data::SqlClient::SqlBulkCopy::System#IDisposable#Dispose","System.Data.SqlClient.SqlBulkCopy.WriteToServer","System::Data::SqlClient::SqlBulkCopy::WriteToServer","System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync","System::Data::SqlClient::SqlBulkCopy::WriteToServerAsync"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d764c59e-02eb-20de-83e4-5099b87b34a0","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Data.SqlClient/SqlBulkCopy.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlBulkCopy class | Microsoft Docs","_op_ogTitle":"SqlBulkCopy class","description":"Lets you efficiently bulk load a SQL Server table with data from another source.\n","toc_asset_id":"_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlBulkCopy","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlbulkcopy","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.data.sqlclient.sqlbulkcopy","fileRelativePath":"System.Data.SqlClient.SqlBulkCopy.html"},"themesRelativePathToOutputRoot":"_themes/"}