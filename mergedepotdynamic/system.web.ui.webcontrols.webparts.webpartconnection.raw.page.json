{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_WebParts_WebPartConnection\">\r\n      <span class=\"lang-csharp\">WebPartConnection</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides an object that enables two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls to form a connection. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]\n[System.Web.UI.ParseChildren(true, &quot;Transformers&quot;)]\npublic sealed class WebPartConnection</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">WebPartConnection</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>In the Web Parts control set, a connection is a link or association between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> (or other server or user) controls that enables them to share data. This ability to share data allows connected controls to be used in ways that exceed the functionality offered by the isolated controls. For example, if one control provides postal code data, and another control can read that data and provide local weather information based on the postal code, then the connected capability of the two controls provides more value to users. To extend this example, other controls could be created that also display information based on a postal code, such as a control with links to local news, and all these controls that can work with postal code data could share data with the single control that provides a postal code. End users of Web Parts applications can create and manage connections between all such compatible controls directly from a Web browser, using the standard connections user interface (UI) provided by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionszone\" data-linktype=\"relative-path\">ConnectionsZone</a> control, or using a custom UI provided by a developer.  </p>\n<p> This WebPartConnection class overview is a general statement of the basic details for creating a connection. For more on specific components and requirements involved in creating connections, see <a href=\"../Topic/Web%20Parts%20Connections%20Overview.md\" data-linktype=\"relative-path\">Web Parts Connections Overview</a>, or see the reference classes and code examples mentioned in the following discussion. There are several fundamental aspects of a Web Parts connection:  </p>\n<ul>\n<li><p>Two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. Every Web Parts connection consists of two controls. It is possible for a control to participate in more than one connection simultaneously, but every single connection consists of exactly two controls. The controls can derive directly from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> base class, or they can be other server controls, including ASP.NET controls, custom server controls, and user controls. Controls that do not derive from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class, if placed in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone, are automatically wrapped with a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.genericwebpart\" data-linktype=\"relative-path\">GenericWebPart</a> object at run time, which enables them to inherit from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class and function as run-time <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls.  </p>\n</li>\n<li><p>Controls residing in <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zones. Both <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls and any other type of server control must reside in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone to be able to participate in Web Parts connections (and most other Web Parts features).  </p>\n</li>\n<li><p>Consumers and providers. In every Web Parts connection there are two controls: a provider of data and a consumer of data. The provider furnishes data to the consumer through a specified callback method that returns data in the form of an interface. (For an example of how to create and specify the callback method, see the Example section of this topic.) This callback method is known as a provider connection point. The details of this connection point (its &quot;friendly&quot; name, an ID, and the type of the returned interface) are contained in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object associated with the provider control. The consumer receives the data through a specified method that can accept an instance of the interface. This method is known as a consumer connection point, and the details of the connection point (name, ID, and type of interface) are contained in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object associated with the consumer control.  </p>\n</li>\n<li><p>Compatible controls or a valid transformer. For a connection to work, the consumer and provider must either be compatible (meaning that their specified connection point methods can work with the same type of interface), or there must be a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object capable of translating the type offered by the provider into a type understood by the consumer.  </p>\n</li>\n<li><p>A WebPartConnection object. For a connection to exist, there must be an instance of the WebPartConnection class that contains references to the provider and consumer controls, along with the details of their connection points. If the provider and consumer are incompatible and instead use a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object to connect, the connection references the transformer.  </p>\n</li>\n<li><p>A means of establishing the connection. After compatible consumer and provider controls have been properly designed with connection point methods and placed in a zone, and a WebPartConnection object is available, the last basic step necessary is to initiate the connection. One way this can happen is for users to create the connection through the UI. If you place an <code>&lt;asp:connectionszone&gt;</code> element on the page, and the other required components for a connection are in place, at run time a user can switch the page into connect display mode, click a connect verb on the verbs menu of either the provider or consumer, and a connection UI (based on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionszone\" data-linktype=\"relative-path\">ConnectionsZone</a> control) will appear. Through this UI, the user can initiate the connection. Another way to initiate the connection is to do it programmatically. In either case, whether through the UI or programmatically, the underlying method that initiates the connection is the same. The application calls the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method (or the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method if using a transformer) on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control, passing to it the provider, the consumer, and their respective connection point objects, and the method returns a WebPartConnection object.  </p>\n<p>The WebPartConnection class defines an object that encapsulates the essential details of a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. The class consists almost entirely of properties related to the details of a particular connection. Several properties concern the consumer control in a connection. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_Consumer_\" data-linktype=\"relative-path\">Consumer</a> property references the consumer control itself, and the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerID_\" data-linktype=\"relative-path\">ConsumerID</a> property references the consumer&#39;s ID. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object, which contains the details of the consumer&#39;s connection point, is referenced by the consumer&#39;s <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPoint_\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> property. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPointID_\" data-linktype=\"relative-path\">ConsumerConnectionPointID</a> property references the ID of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object. All these consumer-related connection properties must have a value assigned to them to create a connection.  </p>\n<p>The WebPartConnection class also has several properties that relate to the provider control in a connection, and these correspond to the properties for a consumer. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_Provider_\" data-linktype=\"relative-path\">Provider</a> property references the provider control itself, while the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderID_\" data-linktype=\"relative-path\">ProviderID</a> property references its ID. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPoint_\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> property references the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object, and the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPointID_\" data-linktype=\"relative-path\">ProviderConnectionPointID</a> property references the ID of the provider&#39;s connection point.  </p>\n<p>Several properties concern the state of the connection. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsActive_\" data-linktype=\"relative-path\">IsActive</a> property indicates whether the connection is active (currently exchanging data) or inactive (still connected but not actively sharing data). The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsShared_\" data-linktype=\"relative-path\">IsShared</a> property indicates whether the connection is a shared (available to all users of a page) or a user-specific connection, and the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsStatic_\" data-linktype=\"relative-path\">IsStatic</a> property indicates whether the control is static (declared in the page markup and thus permanent) or dynamic (created programmatically, meaning that it can be deleted).</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection__ctor\" data-linktype=\"self-bookmark\">WebPartConnection()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_Consumer\" data-linktype=\"self-bookmark\">Consumer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> object that is acting as the consumer control in a connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPoint\" data-linktype=\"self-bookmark\">ConsumerConnectionPoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the object that serves as a connection point for a control that is acting as a consumer in a connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPointID\" data-linktype=\"self-bookmark\">ConsumerConnectionPointID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the property value on a connection that references the ID of the object serving as the consumer connection point for that connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerID\" data-linktype=\"self-bookmark\">ConsumerID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the property value on a connection that references the ID of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a consumer for that connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ID\" data-linktype=\"self-bookmark\">ID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the ID of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_IsActive\" data-linktype=\"self-bookmark\">IsActive</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object is currently established and able to exchange data between its provider and consumer controls.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_IsShared\" data-linktype=\"self-bookmark\">IsShared</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object is visible to all users or only to the current user.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_IsStatic\" data-linktype=\"self-bookmark\">IsStatic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object is declared in the markup of a Web page, or created programmatically.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_Provider\" data-linktype=\"self-bookmark\">Provider</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control that acts as the provider in a Web Parts connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPoint\" data-linktype=\"self-bookmark\">ProviderConnectionPoint</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the object that serves as a connection point for a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a provider for a connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPointID\" data-linktype=\"self-bookmark\">ProviderConnectionPointID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the property value on a connection that references the ID of the object serving as the provider connection point for that connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderID\" data-linktype=\"self-bookmark\">ProviderID</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the property value on a connection that references the ID of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a provider for that connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_Transformer\" data-linktype=\"self-bookmark\">Transformer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object that is used to transform data between two otherwise incompatible connection points in a Web Parts connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_Transformers\" data-linktype=\"self-bookmark\">Transformers</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> objects used internally by the Web Parts control set.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_WebParts_WebPartConnection_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides the inherited <span class=\"xref\">stem.Object.ToString*</span> method and returns a short type name for the connection object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection__ctor\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WebPartConnection()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public WebPartConnection ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The WebPartConnection constructor is public so that the ASP.NET parser can create an instance when a connection is declared in the markup of a Web page; this constructor is not intended to be used in developer code.  </p>\n<p> When you want to create a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object programmatically, you should use the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> or the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method provided in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control. These methods handle the many details of creating a connection, and return a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object.  </p>\n<p> The WebPartConnection constructor for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> class sets the values of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsShared_\" data-linktype=\"relative-path\">IsShared</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsStatic_\" data-linktype=\"relative-path\">IsStatic</a> properties to <code>true</code>. Thus the default state of a new connection is to be static (meaning that it is declared in the markup of the containing Web page) and shared (visible to all users of the page). This will be the case when you add a connection in the typical scenario, by declaring the connection in the markup of the page with an <code>&lt;asp:webpartconnection&gt;</code> element. However, in other circumstances a connection will have different values for these properties. For example, when you add a connection programmatically by creating the connection object in code, and the user is viewing the page in the default user personalization scope, the connection is created as a dynamic, per-user(visible only to the specific user) connection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsShared_\" data-linktype=\"relative-path\">IsShared</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_IsStatic_\" data-linktype=\"relative-path\">IsStatic</a> properties are read-only, and these properties that determine the nature of a connection are set internally by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control depending on how a connection is created (declaratively in the page markup, or programmatically through your code or the user interface).</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Consumer\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Consumer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Consumer</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> object that is acting as the consumer control in a connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> that represents the Web Parts control acting as the consumer in a connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The length of the <span class=\"xref\">stem.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*</span> property is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every Web Parts connection consists of two controls that share data. One control acts as the provider of data, and the other control acts as a consumer, receiving and processing the data from the provider. The Consumer property gets a reference to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a consumer in a connection relationship.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the programmatic use of the Consumer property.  </p>\n<p> The code example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_Consumer#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_Consumer#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_Consumer#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_Consumer#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the <code>Register</code> directives for the user control and the custom controls. Because this example uses dynamic compilation, the <code>Register</code> directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the <code>Button2_Click</code> method, the code accesses the connection object through the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control, and gets a reference to the consumer control.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_Consumer#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint = \n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {  \n    WebPart consumer = mgr.Connections[0].Consumer;\n\n    lbl2.Text = &quot;&lt;h3&gt;Consumer Control Details&lt;/h3&gt;&quot; +\n      &quot;ID: &quot; + consumer.ID +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Title: &quot; + consumer.Title;\n  }\n\n  protected void mgr_DisplayModeChanged(object sender, \n    WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; \n    OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot; /&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Display Consumer Info&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_Consumer#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim consumer as WebPart = mgr.Connections(0).Consumer\n\n    lbl2.Text = &quot;&lt;h3&gt;Consumer Control Details&lt;/h3&gt;&quot; &amp; _\n      &quot;ID: &quot; &amp; consumer.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Title: &quot; &amp; consumer.Title\n\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot;\n    OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot; /&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Display Consumer Info&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, use the <strong>Display Mode</strong> drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Use the <strong>Connect WebPart Controls</strong> button, or the provided connection user interface (UI), to create a connection between the two controls. Click the <strong>Display Consumer Info</strong> button to run the code that demonstrates the Consumer property.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPoint\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConsumerConnectionPoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the object that serves as a connection point for a control that is acting as a consumer in a connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> associated with the consumer control in a connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>One of the required steps for creating a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls is to create connection points for each control. The consumer connection point is an object that contains the information about how to connect to the control acting as a consumer. In the consumer&#39;s source code, one of the methods must be identified with the <code>ConnectionConsumer</code> attribute. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object that is associated with a consumer control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface the method can retrieve. This set of information about the consumer, its method for forming connections, and the type of interface it understands, collectively forms a consumer connection point.  </p>\n<p> By default, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object can connect to only one <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object at a time. A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time. In contrast, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> can connect to any number of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> objects. This default behavior can be changed by overriding the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute#System_Web_UI_WebControls_WebParts_ConnectionConsumerAttribute_AllowsMultipleConnections_\" data-linktype=\"relative-path\">AllowsMultipleConnections</a> property on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute\" data-linktype=\"relative-path\">ConnectionConsumerAttribute</a> attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerConnectionPoint#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerConnectionPoint#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerConnectionPoint#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerConnectionPoint#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><p>The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the <code>Button1_Click</code> method, all the objects required to form a connection are created, including a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object. These objects are all passed to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method to create the connection. In the <code>Button2_Click</code> method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerConnectionPoint#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint = \n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {  \n    ConsumerConnectionPoint connpoint = \n      mgr.Connections[0].ConsumerConnectionPoint;\n    lbl2.Text = &quot;&lt;h3&gt;Consumer Connection Points Details&lt;/h3&gt;&quot; +\n      &quot;Display name: &quot; + connpoint.DisplayName +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Control type: &quot; + connpoint.ControlType.FullName +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Connection Point ID: &quot; + connpoint.ID +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Interface type: &quot; + connpoint.InterfaceType.ToString();\n  }\n\n  protected void mgr_DisplayModeChanged(object sender, \n    WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; \n    OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot; /&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerConnectionPoint#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim connpoint As ConsumerConnectionPoint = _\n      mgr.Connections(0).ConsumerConnectionPoint\n\n    lbl2.Text = &quot;&lt;h3&gt;Consumer Connection Points Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Display name: &quot; &amp; connpoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Control type: &quot; &amp; connpoint.ControlType.FullName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Connection Point ID: &quot; &amp; connpoint.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Interface type: &quot; &amp; connpoint.InterfaceType.ToString()\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot;\n    OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot; /&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, use the <strong>Display Mode</strong> drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Use the <strong>Connect WebPart Controls</strong> button, or the provided connection UI, to create a connection between the two controls. Click the <strong>ConnectionPoint Details</strong> button to run the code that demonstrates the ConsumerConnectionPoint property.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPointID\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerConnectionPointID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConsumerConnectionPointID</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the property value on a connection that references the ID of the object serving as the consumer connection point for that connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ConsumerConnectionPointID { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the ID for the consumer connection point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a static connection declared in the markup of a Web page, developers can specify which consumer connection point will be used for the connection by assigning a value to the <code>ConsumerConnectionPointID</code> attribute on the <code>&lt;asp:webpartconnection&gt;</code> element. If a value is not assigned to the attribute, the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a> property value is used.  </p>\n<p> When you create dynamic (programmatic) connections, normally you should not set the value of the ConsumerConnectionPointID property. You can simply call the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control, passing to it the consumer and consumer connection point objects (along with the other required parameters), and that method determines the correct ID to use for the consumer&#39;s connection point. Similarly, when you disconnect, you can call the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_DisconnectWebParts_\" data-linktype=\"relative-path\">DisconnectWebParts</a> method without needing to specify the ConsumerConnectionPointID property value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The ID of a consumer&#39;s connection point can be determined when you designate a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> or other server control as a consumer. You must identify a method in the consumer that retrieves an instance of an interface furnished by either a provider control or a transformer. To identify the method, mark it with the <code>ConnectionConsumer</code> code attribute. When you add this attribute, you can add an optional string value parameter that serves as an ID for the consumer&#39;s <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object. If you supply a value for the optional ID parameter, that value becomes the value of the ConsumerConnectionPointID property for the connection. If you do not supply an ID value, the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a> property value is used.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerConnectionPointID#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerConnectionPointID#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerConnectionPointID#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Xml;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerConnectionPointID#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the <code>&lt;StaticConnections&gt;</code> and <code>&lt;asp:WebPartsConnection&gt;</code> elements. The connection declaration includes the required <code>ConsumerConnectionPointID</code> attribute. A second method for creating the connection appears in the <code>Button1_Click</code> method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the <code>Button2_Click</code> method, the code accesses the ConsumerConnectionPointID property.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerConnectionPointID#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n   \n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {\n\n    ConsumerConnectionPoint connpoint = \n      mgr.Connections[0].ConsumerConnectionPoint;\n    \n    lbl2.Text = &quot;&lt;h3&gt;Consumer Connection Points Details&lt;/h3&gt;&quot; +\n      &quot;Display name: &quot; + connpoint.DisplayName +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Connection Point ID: &quot; + mgr.Connections[0].ConsumerConnectionPointID;\n\n  }\n\n\n  protected void mgr_DisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n        Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerConnectionPointID#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim connpoint As ConsumerConnectionPoint = _\n      mgr.Connections(0).ConsumerConnectionPoint\n\n    lbl2.Text = &quot;&lt;h3&gt;Consumer Connection Points Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Display name: &quot; &amp; connpoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Connection Point ID: &quot; &amp; mgr.Connections(0).ConsumerConnectionPointID\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the <strong>Display Mode</strong> drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Click the <strong>Disconnect</strong> button. Use the <strong>Connect WebPart Controls</strong> button to recreate a connection between the two controls. Click the <strong>ConnectionPoint Details</strong> button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerID\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ConsumerID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConsumerID</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the property value on a connection that references the ID of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a consumer for that connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ConsumerID { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the ID of the control acting as a consumer in a connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ConsumerID property value is required when you create a connection between <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. If a value is not assigned to the property, an exception is thrown when the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control attempts to activate the connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the declarative and programmatic use of the ConsumerID property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerID#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerID#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerID#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Xml;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerID#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the <code>&lt;StaticConnections&gt;</code> and <code>&lt;asp:WebPartsConnection&gt;</code> elements. The connection declaration includes the required <code>ConsumerID</code> attribute. A second method for creating the connection appears in the <code>Button1_Click</code> method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the <code>Button2_Click</code> method, the code accesses the value of the ConsumerID property and displays it in a label.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ConsumerID#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn as WebPartConnection = mgr.Connections(0)\n\n    lbl2.Text = &quot;&lt;h3&gt;Consumer Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Consumer title: &quot; &amp; conn.Consumer.Title &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Consumer ID: &quot; &amp; conn.ConsumerID\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Consumer Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ConsumerID#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n   \n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {\n\n    WebPartConnection conn = mgr.Connections[0];\n    \n    lbl2.Text = &quot;&lt;h3&gt;Consumer Details&lt;/h3&gt;&quot; +\n      &quot;Consumer title: &quot; + conn.Consumer.Title +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Consumer ID: &quot; + conn.ConsumerID;\n\n  }\n\n\n  protected void mgr_DisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n        Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Consumer Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the <strong>Display Mode</strong> drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Click the <strong>Disconnect</strong> button. Use the <strong>Connect WebPart Controls</strong> button to recreate a connection between the two controls. Click the <strong>Consumer Details</strong> button to run the code that accesses the ConsumerID property value.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ID\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ID</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the ID of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ID { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the ID of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object has a unique value assigned to its ID property. This is to ensure that there is a way to distinguish between multiple connections.  </p>\n<p> If you create a static connection by declaring an <code>&lt;asp:webpartconnection&gt;</code> element in a Web page, and you do not assign a value to the <code>ID</code> attribute for the connection, an exception is thrown when the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control attempts to activate the connection.  </p>\n<p> When the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control creates a new dynamic connection, it calls the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_CreateDynamicConnectionID_\" data-linktype=\"relative-path\">CreateDynamicConnectionID</a> method to generate a unique ID for the connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the declarative and programmatic use of the ID property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ID#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ID#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ID#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Xml;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ID#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the <code>&lt;StaticConnections&gt;</code> and <code>&lt;asp:WebPartsConnection&gt;</code> elements. The connection declaration includes the required <code>ID</code> attribute. A second method for creating the connection appears in the <code>Button1_Click</code> method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control assigns an ID to the connection. In the <code>Button2_Click</code> method, the code accesses the value of the ID property and displays it in a label.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ID#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n   \n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {\n\n    WebPartConnection conn = mgr.Connections[0];\n    \n    lbl2.Text = &quot;&lt;h3&gt;Connection Details&lt;/h3&gt;&quot; +\n      &quot;Connection ID: &quot; + conn.ID +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Consumer ID: &quot; + conn.ConsumerID + \n      &quot;&lt;br /&gt;&quot; +\n      &quot;Provider ID: &quot; + conn.ProviderID;\n\n  }\n\n\n  protected void mgr_DisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n        Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ID#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn as WebPartConnection = mgr.Connections(0)\n\n    lbl2.Text = &quot;&lt;h3&gt;Connection Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Connection ID: &quot; &amp; conn.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Consumer ID: &quot; &amp; conn.ConsumerID &amp; _ \n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Provider ID: &quot; &amp; conn.ProviderID\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the <strong>Display Mode</strong> drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Click the <strong>Disconnect</strong> button. Use the <strong>Connect WebPart Controls</strong> button to recreate a connection between the two controls. Click the <strong>Connection Details</strong> button to run the code that accesses the ID property value.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_IsActive\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_IsActive_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsActive</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object is currently established and able to exchange data between its provider and consumer controls.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsActive { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the connection is active; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IsActive property indicates a state of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object. When the connection is in this state, the provider and consumer controls in the connection are communicating and able to exchange data through a common interface or a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object.  </p>\n<p> When a user views a rendered page that includes an established connection in normal browse mode, the connection is typically active (unless it failed to be activated due to some conflict or other issue when the page loaded). In the early stages of the page and control life cycle, the property value is <code>false</code>. The connection is activated just after the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectionsActivated\" data-linktype=\"relative-path\">ConnectionsActivated</a> event on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control is raised. Specifically, the connection is activated after the consumer has retrieved an instance of the specified interface from the provider or a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object.  </p>\n<p> It is useful to know whether a connection is active in situations where there might be conflicts or synchronization issues due to multiple connections on a page. For example, if there is some kind of conflict between two connections, the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control has the option of not activating one of the connections to avoid the conflict.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates use of the IsActive property.  </p>\n<p> The example has three parts:  </p>\n<ul>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsActive#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsActive#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The second part of the code example is the Web page. Near the top is a <code>Register</code> directive that refers to the source code for the two dynamically compiled <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. The static connection is declared within the <code>&lt;StaticConnections&gt;</code> element on the page. Within the <code>&lt;script&gt;</code> element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <a class=\"xref\" href=\"system.web.ui.webcontrols.label\" data-linktype=\"relative-path\">Label</a> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsActive#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ register tagprefix=&quot;aspSample&quot; \n    namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    WebPartConnection conn = mgr.StaticConnections[0];\n    \n    if (conn.IsActive)\n      lbl1.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;;\n    else\n      lbl1.Text += &quot;Connection 0 is inactive.&quot;;\n  }\n\n  protected void mgr_ConnectionsActivated(object sender, EventArgs e)\n  {\n    if(mgr.Connections[0].IsActive)\n      lbl2.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;;\n    else\n      lbl2.Text += &quot;Connection 0 is inactive.&quot;;\n  }\n\n  protected void mgr_ConnectionsActivating(object sender, EventArgs e)\n  {\n    if (mgr.Connections[0].IsActive)\n      lbl3.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;;\n    else\n      lbl3.Text += &quot;Connection 0 is inactive.&quot;;\n  }\n\n  protected void Page_PreRender(object sender, EventArgs e)\n  {\n    if (mgr.Connections[0].IsActive)\n      lbl4.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;;\n    else\n      lbl4.Text += &quot;Connection 0 is inactive.&quot;;\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; \n        onconnectionsactivated=&quot;mgr_ConnectionsActivated&quot; \n        onconnectionsactivating=&quot;mgr_ConnectionsActivating&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;   /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl1&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;Button_Click Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;ConnectionActivating Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl3&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;ConnectionActivated Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl4&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;ConnectionActivated Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsActive#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn As WebPartConnection = mgr.StaticConnections(0)\n    \n    If conn.IsActive Then\n      lbl1.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;\n    Else\n      lbl1.Text += &quot;Connection 0 is inactive.&quot;\n    End If\n    \n  End Sub\n    \n  Protected Sub mgr_ConnectionsActivated(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    If mgr.Connections(0).IsActive Then\n      lbl2.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;\n    Else\n      lbl2.Text += &quot;Connection 0 is inactive.&quot;\n    End If\n    \n  End Sub\n\n  Protected Sub mgr_ConnectionsActivating(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n\n    If mgr.Connections(0).IsActive Then\n      lbl3.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;\n    Else\n      lbl3.Text += &quot;Connection 0 is inactive.&quot;\n    End If\n    \n  End Sub\n\n  Protected Sub Page_PreRender(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n\n    If mgr.Connections(0).IsActive Then\n      lbl4.Text += &quot;&lt;em&gt;Connection 0 is active.&lt;/em&gt;&quot;\n    Else\n      lbl4.Text += &quot;Connection 0 is inactive.&quot;\n    End If\n    \n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; \n        OnConnectionsActivated=&quot;mgr_ConnectionsActivated&quot; \n        OnConnectionsActivating=&quot;mgr_ConnectionsActivating&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;   /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl1&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;Button_Click Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;ConnectionActivating Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl3&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;ConnectionActivated Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl4&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;ConnectionActivated Status&lt;/h3&gt;\n      &lt;/asp:Label&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the <strong>Connection Details</strong> button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectionsActivated\" data-linktype=\"relative-path\">ConnectionsActivated</a> event, and that it is still active (and will remain so) after the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_PreRender\" data-linktype=\"relative-path\">PreRender</a> event of the page.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_IsShared\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_IsShared_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsShared</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object is visible to all users or only to the current user.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsShared { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the connection is shared; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>As with individual <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object can be a shared or a per-user instance. A shared instance means that the connection is visible to all users of a Web page, and a per-user instance means the connection is visible only to a specific user.  </p>\n<p> In general, the way a connection is added to a page determines whether the connection is shared. If the connection is declared in the markup of a Web page, then the connection is shared and the IsShared property value is <code>true</code>. In addition, if the Web page is in shared personalization scope when a connection is added, the connection is also shared. Typically, when a user uses the <code>&lt;asp:connectionszone&gt;</code> user interface (UI) to add a connection, the page is in user personalization scope, so the connection is not shared and the IsShared property value is <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates programmatic use of the IsShared property.  </p>\n<p> The code example has five parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An entry in the Web.config file that is required to run the example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsShared#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsShared#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsShared#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Xml;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsShared#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The third part of the code example is the Web page. In the <code>Button2_Click</code> method, it checks the IsShared property of the existing connection and displays the result on the page.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsShared#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n   \n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {\n\n    WebPartConnection conn = mgr.Connections[0];\n    \n    if(conn.IsShared)\n    lbl2.Text = &quot;Shared&quot;;\n    else\n    lbl2.Text = &quot;Per-User&quot;;\n\n  }\n\n\n  protected void mgr_DisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n        Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsShared#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn as WebPartConnection = mgr.Connections(0)\n\n    If conn.IsShared Then\n    lbl2.Text = &quot;Shared&quot;\n    Else\n    lbl2.Text = &quot;Per-User&quot;\n    End If\n\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the <code>&lt;system.web&gt;</code> section that looks like the following example.  </p>\n</li>\n</ul>\n<pre><code>&lt;webParts&gt;  \n  &lt;personalization&gt;  \n    &lt;authorization&gt;  \n      &lt;allow users=&quot;UserAccount&quot;  \n             roles=&quot;admin&quot;  \n             verbs=&quot;enterSharedScope&quot;/&gt;  \n    &lt;/authorization&gt;            \n  &lt;/personalization&gt;  \n&lt;/webParts&gt;  \n</code></pre><p> After you load the page in a browser, use the <strong>Display Mode</strong> drop-down list control to switch the page to connect display mode. Click the <strong>Connect WebPart Controls</strong> button to form a connection. Next, click the <strong>Connection Details</strong> button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be <code>false</code> for the connection.  </p>\n<p> On the verbs menu of one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the <strong>Disconnect</strong> button to end the connection. Use the <strong>Display Mode</strong> control to return the page to browse mode.  </p>\n<p> In the <strong>Display Mode</strong> control, select the <strong>Shared</strong> option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the <strong>Connection Details</strong> button to display whether the connection is shared. In this case, the value of the IsShared property should be <code>true</code>.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_IsStatic\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_IsStatic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsStatic</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object is declared in the markup of a Web page, or created programmatically.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsStatic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the connection is static; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Connections between Web Parts controls can be either static or dynamic. A static connection is declared in the markup of a Web page, using an <code>&lt;asp:WebPartConnection&gt;</code> element. Dynamic connections are created programmatically or when a user creates a connection through the user interface (UI) defined by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionszone\" data-linktype=\"relative-path\">ConnectionsZone</a> control.  </p>\n<p> Static connections are shared objects, meaning they are available to all users of the Web page. Also, they are essentially permanent because, like a static <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, they cannot be permanently deleted.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> While a static connection object cannot be permanently deleted, it can be permanently disconnected. In this case, the disconnected object would exist on the server, but an end user would never be aware of the object&#39;s existence in a page.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the programmatic use of the IsStatic property.  </p>\n<p> The code example has three parts:  </p>\n<ul>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsStatic#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsStatic#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The second part of the code example is the Web page. Near the top is a <code>Register</code> directive that refers to the source code for the two dynamically compiled <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. The static connection is declared within the <code>&lt;StaticConnections&gt;</code> element on the page. The <code>Button1_Click</code> method accesses the IsStatic property to check whether the connection is static.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_IsStatic#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn As WebPartConnection = mgr.StaticConnections(0)\n    \n    If conn.IsStatic Then\n      lbl2.Text = &quot;The connection is static.&quot;\n    End If\n    \n  End Sub\n    \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_IsStatic#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    WebPartConnection conn = mgr.StaticConnections[0];\n    \n    if (conn.IsStatic)\n      lbl2.Text = &quot;The connection is static.&quot;;\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the <strong>Connection Details</strong> button to display the value of the IsStatic property.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Provider\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Provider_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Provider</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control that acts as the provider in a Web Parts connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> that acts as the provider of data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The length of the <span class=\"xref\">stem.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*</span> property value is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Every Web Parts connection consists of two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls--a consumer and a provider--and the Provider property returns a reference to the provider control in a connection.  </p>\n<p> Like its counterpart in a connection (the consumer control), the provider control is required to establish a connection. Whether you create the connection programmatically, or by declaring it in page persistence format, you must specify a control to act as the provider for a connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates use of the Provider property.  </p>\n<p> The code example has three parts:  </p>\n<ul>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_Provider#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_Provider#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><p>The second part of the code example is the Web page. Near the top is a <code>Register</code> directive that refers to the source code for the two dynamically compiled <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. The static connection is declared within the <code>&lt;StaticConnections&gt;</code> element on the page. Notice that in the <code>&lt;asp:webpartconnection&gt;</code> element, the <code>ProviderID</code> attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The <code>Button1_Click</code> method accesses the Provider property and writes some of its details to a label.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_Provider#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ register tagprefix=&quot;aspSample&quot; \n    namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    WebPartConnection conn = mgr.StaticConnections[0];\n    \n    lbl1.Text = &quot;&lt;h3&gt;Provider Details&lt;/h3&gt;&lt;br /&gt;&quot; +\n      &quot;ID: &quot; + conn.Provider.ID + \n      &quot;&lt;br /&gt;&quot; + \n      &quot;Display Title: &quot; + conn.Provider.Title + \n      &quot;&lt;br /&gt;&quot; + \n      &quot;Control type: &quot; + conn.Provider.GetType().FullName;\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;   /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Provider Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_Provider#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn As WebPartConnection = mgr.StaticConnections(0)\n    \n    lbl1.Text = &quot;&lt;h3&gt;Provider Details&lt;/h3&gt;&lt;br /&gt;&quot; &amp; _\n      &quot;ID: &quot; &amp; conn.Provider.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Display Title: &quot; &amp; conn.Provider.Title &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Control type: &quot; &amp; conn.Provider.GetType().FullName\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;   /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Provider Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the <strong>Provider Details</strong> button to display some of the property values accessed through the Provider property.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPoint\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPoint_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProviderConnectionPoint</div>        \r\n          </div>\r\n    \r\n            <p>Gets the object that serves as a connection point for a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a provider for a connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> associated with the provider control in a connection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>One of the required steps for creating a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls is to create connection points for each control. The provider connection point is an object that contains the information about how to connect to the control acting as a provider. In the provider&#39;s source code, one of the methods must be identified with the <code>ConnectionProvider</code> attribute. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> that is associated with a provider control contains details about the method and the attribute, including an ID for the method, a display name for use in the user interface (UI), and what type of interface instance the method can return to a consumer control. This set of information about the provider, its method for forming connections, and the type of interface it provides, collectively forms a provider connection point.  </p>\n<p> By default, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> can connect to only one <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object at a time. A consumer could have multiple methods identified as possible consumer connection points, but a consumer can only participate in one connection as a consumer (hence, only one of its consumer connection points can be active) at a time. In contrast, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> can connect to any number of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> objects by default. For example, a provider control that provides a postal code could be connected to multiple consumer controls that use a postal code to create various kinds of data based on a postal code, such as weather data, news, and so on. This default behavior can be changed by overriding the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute#System_Web_UI_WebControls_WebParts_ConnectionProviderAttribute_AllowsMultipleConnections_\" data-linktype=\"relative-path\">AllowsMultipleConnections</a> property on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute\" data-linktype=\"relative-path\">ConnectionProviderAttribute</a> attribute.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderConnectionPoint#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderConnectionPoint#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderConnectionPoint#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderConnectionPoint#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the <code>Button1_Click</code> method, all the objects required to form a connection are created, including a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object. Note the call to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_GetProviderConnectionPoints_\" data-linktype=\"relative-path\">GetProviderConnectionPoints</a> method on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control. The various created objects are all passed to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method to create the connection. In the <code>Button2_Click</code> method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderConnectionPoint#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint = \n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {  \n    ProviderConnectionPoint connpoint = \n      mgr.Connections[0].ProviderConnectionPoint;\n    lbl2.Text = &quot;&lt;h3&gt;Provider Connection Points Details&lt;/h3&gt;&quot; +\n      &quot;Display name: &quot; + connpoint.DisplayName +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Control type: &quot; + connpoint.ControlType.FullName +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Connection Point ID: &quot; + connpoint.ID +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Interface type: &quot; + connpoint.InterfaceType.ToString();\n  }\n\n  protected void mgr_DisplayModeChanged(object sender, \n    WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; \n    OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot; /&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderConnectionPoint#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim connpoint As ProviderConnectionPoint = _\n      mgr.Connections(0).ProviderConnectionPoint\n\n    lbl2.Text = &quot;&lt;h3&gt;Provider Connection Points Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Display name: &quot; &amp; connpoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Control type: &quot; &amp; connpoint.ControlType.FullName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Connection Point ID: &quot; &amp; connpoint.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Interface type: &quot; &amp; connpoint.InterfaceType.ToString()\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot;\n    OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot; /&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, use the <strong>Display Mode</strong> drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Use the <strong>Connect WebPart Controls</strong> button, or the provided connection UI, to create a connection between the two controls. Click the <strong>ConnectionPoint Details</strong> button to run the code that demonstrates the ProviderConnectionPoint property.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPointID\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderConnectionPointID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProviderConnectionPointID</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the property value on a connection that references the ID of the object serving as the provider connection point for that connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ProviderConnectionPointID { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the ID for a provider connection point object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a static connection declared in the markup of a Web page, developers can specify which provider connection point will be used for the connection by assigning a value to the <code>ProviderConnectionPointID</code> attribute on the <code>&lt;asp:webpartconnection&gt;</code> element. If a value is not assigned to the attribute, the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a> property value is used.  </p>\n<p> When you create dynamic (programmatic) connections, normally you should not set the value of the ProviderConnectionPointID property. You can simply call the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control, passing to it the provider and provider connection point objects (along with the other required parameters), and that method determines the correct ID to use for the provider&#39;s connection point. Similarly, when you disconnect, you can call the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_DisconnectWebParts_\" data-linktype=\"relative-path\">DisconnectWebParts</a> method without needing to specify the ProviderConnectionPointID property value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The ID of a provider&#39;s connection point can be determined when you designate a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> or other server control as a provider. You must identify a callback method in the provider that serves an instance of an interface containing data to a consumer. To identify the method, mark it with the <code>ConnectionProvider</code> code attribute. When you add this attribute, you can add an optional string value parameter that serves as an ID for the provider&#39;s <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object. If you supply a value for the optional ID parameter, that value becomes the value of the ProviderConnectionPointID property for the connection. If you do not supply an ID value, the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control assigns a default ID when the object is created.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderConnectionPointID#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderConnectionPointID#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderConnectionPointID#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderConnectionPointID#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Xml;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><p>The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the <code>&lt;StaticConnections&gt;</code> and <code>&lt;asp:WebPartsConnection&gt;</code> elements. The connection declaration includes the required <code>ProviderConnectionPointID</code> attribute. A second method for creating the connection appears in the <code>Button1_Click</code> method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the <code>Button2_Click</code> method, the code accesses the ProviderConnectionPointID property.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderConnectionPointID#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n   \n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {\n\n    ProviderConnectionPoint connpoint = \n      mgr.Connections[0].ProviderConnectionPoint;\n    \n    lbl2.Text = &quot;&lt;h3&gt;Provider Connection Points Details&lt;/h3&gt;&quot; +\n      &quot;Display name: &quot; + connpoint.DisplayName +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Connection Point ID: &quot; + mgr.Connections[0].ProviderConnectionPointID;\n\n  }\n\n\n  protected void mgr_DisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n        Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderConnectionPointID#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim connpoint As ProviderConnectionPoint = _\n      mgr.Connections(0).ProviderConnectionPoint\n\n    lbl2.Text = &quot;&lt;h3&gt;Provider Connection Points Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Display name: &quot; &amp; connpoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Connection Point ID: &quot; &amp; mgr.Connections(0).ProviderConnectionPointID\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;ConnectionPoint Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the <strong>Display Mode</strong> drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Click the <strong>Disconnect</strong> button. Use the <strong>Connect WebPart Controls</strong> button to recreate a connection between the two controls. Click the <strong>ConnectionPoint Details</strong> button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderID\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ProviderID_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProviderID</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the property value on a connection that references the ID of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control acting as a provider for that connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ProviderID { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the ID of the provider control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ProviderID property value is required when you create a connection between two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. If a value is not assigned to the property, an exception is thrown when the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control attempts to activate the connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows the declarative and programmatic use of the ProviderID property.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderID#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderID#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p>The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderID#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderID#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Xml;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><p>The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the <code>&lt;StaticConnections&gt;</code> and <code>&lt;asp:WebPartsConnection&gt;</code> elements. The connection declaration includes the required <code>ProviderID</code> attribute. A second method for creating the connection appears in the <code>Button1_Click</code> method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the <code>Button2_Click</code> method, the code accesses the value of the ProviderID property and displays it in a label.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ProviderID#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuCS&quot;\n    Src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n   \n    ProviderConnectionPoint provPoint = \n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n    WebPartConnection conn1 = mgr.ConnectWebParts(zip1, provPoint,\n      weather1, connPoint);\n  }\n\n  protected void Button2_Click(object sender, EventArgs e)\n  {\n\n    WebPartConnection conn = mgr.Connections[0];\n    \n    lbl2.Text = &quot;&lt;h3&gt;Provider Details&lt;/h3&gt;&quot; +\n      &quot;Provider title: &quot; + conn.Provider.Title +\n      &quot;&lt;br /&gt;&quot; +\n      &quot;Provider ID: &quot; + conn.ProviderID;\n\n  }\n\n\n  protected void mgr_DisplayModeChanged(object sender, WebPartDisplayModeEventArgs e)\n  {\n    if (mgr.DisplayMode == WebPartManager.ConnectDisplayMode)\n    {\n      Button1.Visible = true;\n      Button2.Visible = true;\n    }\n    else\n    {\n      Button1.Visible = false;\n      Button2.Visible = false;\n    }\n\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuCS ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n        Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Provider Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ProviderID#1\">&lt;%@ Page Language=&quot;vb&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;uc1&quot; \n    TagName=&quot;DisplayModeMenuVB&quot;\n    Src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n    mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n\n  End Sub\n\n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn as WebPartConnection = mgr.Connections(0)\n\n    lbl2.Text = &quot;&lt;h3&gt;Provider Details&lt;/h3&gt;&quot; &amp; _\n      &quot;Provider title: &quot; &amp; conn.Provider.Title &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;Provider ID: &quot; &amp; conn.ProviderID\n  End Sub\n\n  Protected Sub mgr_DisplayModeChanged (ByVal sender as Object, _\n    ByVal e as WebPartDisplayModeEventArgs)\n\n    If mgr.DisplayMode Is WebPartManager.ConnectDisplayMode Then\n      Button1.Visible = True\n      Button2.Visible = True\n    Else\n      Button1.Visible = False\n      Button2.Visible = False\n    End If\n\n  End Sub\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; OnDisplayModeChanged=&quot;mgr_DisplayModeChanged&quot;&gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;\n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:DisplayModeMenuVB ID=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot; /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connect WebPart Controls&quot; \n        OnClick=&quot;Button1_Click&quot; \n    Visible=&quot;false&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Provider Details&quot; \n        OnClick=&quot;Button2_Click&quot; \n        Visible=&quot;false&quot; /&gt; \n      &lt;br /&gt;   \n      &lt;asp:Label ID=&quot;lbl2&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the <strong>Display Mode</strong> drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls, and click the connect verb. Click the <strong>Disconnect</strong> button, and the controls are disconnected. Next, use the <strong>Connect WebPart Controls</strong> button to recreate a connection between the two controls. Click the <strong>Consumer Details</strong> button to run the code that accesses the ProviderID property value.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Transformer\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Transformer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Transformer</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object that is used to transform data between two otherwise incompatible connection points in a Web Parts connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a>. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a Web Parts connection, there are two ways in which the provider and consumer controls in the connection can connect. They can connect directly, through their respective <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> objects and an interface type that is understood by both controls. Or, if they are incompatible, they can connect indirectly, using a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object that transforms an interface instance from a provider into a type understood by a consumer.  </p>\n<p> When a transformer is needed as part of a connection, the Transformer property provides a reference to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object. You can add a transformer for a connection declaratively in the markup of a Web page, by adding a tag for a custom transformer (or one of the transformers provided with the Web Parts control set) within the <code>&lt;asp:WebPartConnection&gt;</code> element. You can also add a transformer programmatically, creating an instance of it in your code, and calling the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_System_Web_UI_WebControls_WebParts_WebPart_System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_System_Web_UI_WebControls_WebParts_WebPart_System_Web_UI_WebControls_WebParts_ConsumerConnectionPoint_System_Web_UI_WebControls_WebParts_WebPartTransformer_\" data-linktype=\"relative-path\">ConnectWebParts(WebPart,ProviderConnectionPoint,WebPart,ConsumerConnectionPoint,WebPartTransformer)</a> method on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control to create the connection, passing to it the transformer object along with the other required parameters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Transformers\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_Transformers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Transformers</div>        \r\n          </div>\r\n    \r\n            <p>Gets a collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> objects used internally by the Web Parts control set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformercollection\" data-linktype=\"relative-path\">WebPartTransformerCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformercollection\" data-linktype=\"relative-path\">WebPartTransformerCollection</a> containing <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Transformers property is never intended for use by developers. To access the transformer associated with a connection, developers should always use the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection#System_Web_UI_WebControls_WebParts_WebPartConnection_Transformer_\" data-linktype=\"relative-path\">Transformer</a> property.  </p>\n<p> The Transformers property is used internally by the Web Parts control set to enable page developers to declare transformer elements within the <code>&lt;asp:webpartconnection&gt;</code> element in the markup of a Web page.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ToString\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_WebParts_WebPartConnection_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Overrides the inherited <span class=\"xref\">stem.Object.ToString*</span> method and returns a short type name for the connection object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that contains the short (unqualified) type name of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is used mostly for convenience by control designers. It improves how connection objects appear in Design view by using the shorter type name, as opposed to a fully qualified type name. However, the method can be called at any point in your code where you want to know the type name of a connection object.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call the ToString method to return the short type name of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object.  </p>\n<p> The code example has three parts:  </p>\n<ul>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n<p>The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ToString#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ToString#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><p>The second part of the code example is the Web page. Near the top is a <code>Register</code> directive that refers to the source code for the two dynamically compiled <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls. The static connection is declared within the <code>&lt;StaticConnections&gt;</code> element on the page. The <code>Button1_Click</code> method calls the ToString method to write the type name of the connection to a label.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_WebPartConnection_ToString#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n  \n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    WebPartConnection conn = mgr.StaticConnections[0];\n\n    lbl1.Text = &quot;The connection type is: &quot; + conn.ToString();\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_WebPartConnection_ToString#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn As WebPartConnection = mgr.StaticConnections(0)\n\n    lbl1.Text = &quot;The connection type is: &quot; + conn.ToString()\n    \n  End Sub\n    \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Details&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lbl1&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the <strong>Connection Details</strong> button to execute the ToString method.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.WebParts.WebPartConnection.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.WebParts.WebPartConnection.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.Provider\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.ToString\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"42b1e6c0-0a98-3abf-80c4-267bbd7c0205\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an object that enables two  controls to form a connection. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls.WebParts/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.WebPartConnection\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.WebParts.WebPartConnection.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.WebParts.WebPartConnection.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.WebParts.WebPartConnection","System.Web.UI.WebControls.WebParts.WebPartConnection..ctor","System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer","System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint","System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID","System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID","System.Web.UI.WebControls.WebParts.WebPartConnection.ID","System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive","System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared","System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic","System.Web.UI.WebControls.WebParts.WebPartConnection.Provider","System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint","System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID","System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID","System.Web.UI.WebControls.WebParts.WebPartConnection.ToString","System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer","System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.WebPartConnection","System::Web::UI::WebControls::WebParts::WebPartConnection","System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor","System::Web::UI::WebControls::WebParts::WebPartConnection::#ctor","System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer","System::Web::UI::WebControls::WebParts::WebPartConnection::Consumer","System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint","System::Web::UI::WebControls::WebParts::WebPartConnection::ConsumerConnectionPoint","System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID","System::Web::UI::WebControls::WebParts::WebPartConnection::ConsumerConnectionPointID","System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID","System::Web::UI::WebControls::WebParts::WebPartConnection::ConsumerID","System.Web.UI.WebControls.WebParts.WebPartConnection.ID","System::Web::UI::WebControls::WebParts::WebPartConnection::ID","System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive","System::Web::UI::WebControls::WebParts::WebPartConnection::IsActive","System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared","System::Web::UI::WebControls::WebParts::WebPartConnection::IsShared","System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic","System::Web::UI::WebControls::WebParts::WebPartConnection::IsStatic","System.Web.UI.WebControls.WebParts.WebPartConnection.Provider","System::Web::UI::WebControls::WebParts::WebPartConnection::Provider","System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint","System::Web::UI::WebControls::WebParts::WebPartConnection::ProviderConnectionPoint","System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID","System::Web::UI::WebControls::WebParts::WebPartConnection::ProviderConnectionPointID","System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID","System::Web::UI::WebControls::WebParts::WebPartConnection::ProviderID","System.Web.UI.WebControls.WebParts.WebPartConnection.ToString","System::Web::UI::WebControls::WebParts::WebPartConnection::ToString","System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer","System::Web::UI::WebControls::WebParts::WebPartConnection::Transformer","System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers","System::Web::UI::WebControls::WebParts::WebPartConnection::Transformers"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"42b1e6c0-0a98-3abf-80c4-267bbd7c0205","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls.WebParts/WebPartConnection.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WebPartConnection class | Microsoft Docs","_op_ogTitle":"WebPartConnection class","description":"Provides an object that enables two  controls to form a connection. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.WebPartConnection","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.webparts.webpartconnection","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.webparts.webpartconnection","fileRelativePath":"System.Web.UI.WebControls.WebParts.WebPartConnection.html"},"themesRelativePathToOutputRoot":"_themes/"}