{"content":"    \r\n    <h1 id=\"System_Collections_SortedList\">\r\n      <span class=\"lang-csharp\">SortedList</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class SortedList : ICloneable, System.Collections.IDictionary</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SortedList</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>For the generic version of this collection, see <a class=\"xref\" href=\"system.collections.generic.sortedlist-2\" data-linktype=\"relative-path\">System.Collections.Generic.SortedList&lt;TKey,TValue&gt;</a>.  </p>\n<p> A SortedList element can be accessed by its key, like an element in any <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> implementation, or by its index, like an element in any <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> implementation.  </p>\n<p> A SortedList object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values. Each element is a key/value pair that can be accessed as a <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> object. A key cannot be <code>null</code>, but a value can be.  </p>\n<p> The capacity of a SortedList object is the number of elements the SortedList can hold. As elements are added to a SortedList, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a> or by setting the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property explicitly.  </p>\n<p> For very large SortedList objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <code>enabled</code> attribute of the  configuration element to <code>true</code> in the run-time environment.  </p>\n<p> The elements of a SortedList object are sorted by the keys either according to a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation specified when the SortedList is created or according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the keys themselves. In either case, a SortedList does not allow duplicate keys.  </p>\n<p> The index sequence is based on the sort sequence. When an element is added, it is inserted into SortedList in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the SortedList object.  </p>\n<p> Operations on a SortedList object tend to be slower than operations on a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object because of the sorting. However, the SortedList offers more flexibility by allowing access to the values either through the associated keys or through the indexes.  </p>\n<p> Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the SortedList object is a key/value pair, the element type is not the type of the key or the type of the value. Rather, the element type is <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a>. For example:  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList Example#2\">        for each (DictionaryEntry de in mySortedList)\n        {\n            //...\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList Example#2\">        foreach (DictionaryEntry de in mySortedList)\n        {\n            //...\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList Example#2\">        For Each de As DictionaryEntry In mySortedList\n            &#39;...\n        Next de\n</code></pre><p> The <code>foreach</code> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList__ctor\" data-linktype=\"self-bookmark\">SortedList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the default initial capacity, and is sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList__ctor_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">SortedList(IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the default initial capacity, and is sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList__ctor_System_Collections_IDictionary_\" data-linktype=\"self-bookmark\">SortedList(IDictionary)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList__ctor_System_Int32_\" data-linktype=\"self-bookmark\">SortedList(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the specified initial capacity, and is sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList__ctor_System_Collections_IComparer_System_Int32_\" data-linktype=\"self-bookmark\">SortedList(IComparer,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the specified initial capacity, and is sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList__ctor_System_Collections_IDictionary_System_Collections_IComparer_\" data-linktype=\"self-bookmark\">SortedList(IDictionary,IComparer)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Capacity\" data-linktype=\"self-bookmark\">Capacity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_IsFixedSize\" data-linktype=\"self-bookmark\">IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_IsSynchronized\" data-linktype=\"self-bookmark\">IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Item_System_Object_\" data-linktype=\"self-bookmark\">Item(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets and sets the value associated with a specific key in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Keys\" data-linktype=\"self-bookmark\">Keys</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keys in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_SyncRoot\" data-linktype=\"self-bookmark\">SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Values\" data-linktype=\"self-bookmark\">Values</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Add_System_Object_System_Object_\" data-linktype=\"self-bookmark\">Add(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an element with the specified key and value to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Clone\" data-linktype=\"self-bookmark\">Clone()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a shallow copy of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Contains_System_Object_\" data-linktype=\"self-bookmark\">Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_ContainsKey_System_Object_\" data-linktype=\"self-bookmark\">ContainsKey(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_ContainsValue_System_Object_\" data-linktype=\"self-bookmark\">ContainsValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> elements to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> object, starting at the specified index in the array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_GetByIndex_System_Int32_\" data-linktype=\"self-bookmark\">GetByIndex(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the value at the specified index of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object that iterates through a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_GetKey_System_Int32_\" data-linktype=\"self-bookmark\">GetKey(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the key at the specified index of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_GetKeyList\" data-linktype=\"self-bookmark\">GetKeyList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the keys in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_GetValueList\" data-linktype=\"self-bookmark\">GetValueList()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_IndexOfKey_System_Object_\" data-linktype=\"self-bookmark\">IndexOfKey(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the zero-based index of the specified key in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_IndexOfValue_System_Object_\" data-linktype=\"self-bookmark\">IndexOfValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the zero-based index of the first occurrence of the specified value in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Remove_System_Object_\" data-linktype=\"self-bookmark\">Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element with the specified key from a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_SetByIndex_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">SetByIndex(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the value at a specific index in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_Synchronized_System_Collections_SortedList_\" data-linktype=\"self-bookmark\">Synchronized(SortedList)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a synchronized (thread-safe) wrapper for a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_TrimToSize\" data-linktype=\"self-bookmark\">TrimToSize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity to the actual number of elements in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_SortedList_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList__ctor\">\r\n    \r\n            <a id=\"System_Collections_SortedList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the default initial capacity, and is sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. The elements are sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates collections using different <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> constructors and demonstrates the differences in the behavior of the collections.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.SortedList_ctor#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesSortedList\n{\n\n    public static void Main()\n    {\n\n        // Create a SortedList using the default comparer.\n        SortedList mySL1 = new SortedList();\n        Console.WriteLine(&quot;mySL1 (default):&quot;);\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL1);\n\n        // Create a SortedList using the specified case-insensitive comparer.\n        SortedList mySL2 = new SortedList(new CaseInsensitiveComparer());\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;);\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL2);\n\n        // Create a SortedList using the specified CaseInsensitiveComparer,\n        // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        // the uppercase version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        SortedList mySL3 = new SortedList(new CaseInsensitiveComparer(myCul));\n        Console.WriteLine(\n            &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL3);\n\n        // Create a SortedList using the\n        // StringComparer.InvariantCultureIgnoreCase value.\n        SortedList mySL4 = new SortedList(\n            StringComparer.InvariantCultureIgnoreCase);\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;);\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL4);\n\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;);\n        for (int i = 0; i &lt; myList.Count; i++)\n        {\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;,\n                myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.SortedList_ctor#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class SamplesSortedList\n\n    Public Shared Sub Main()\n\n        &#39; Create a SortedList using the default comparer.\n        Dim mySL1 As New SortedList()\n        Console.WriteLine(&quot;mySL1 (default):&quot;)\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL1)\n\n        &#39; Create a SortedList using the specified case-insensitive comparer.\n        Dim mySL2 As New SortedList(New CaseInsensitiveComparer())\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;)\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL2)\n\n        &#39; Create a SortedList using the specified CaseInsensitiveComparer,\n        &#39; which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        &#39; the uppercase version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim mySL3 As New SortedList(New CaseInsensitiveComparer(myCul))\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;)\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL3)\n\n        &#39; Create a SortedList using the\n        &#39; StringComparer.InvariantCultureIgnoreCase value.\n        Dim mySL4 As New SortedList( _\n            StringComparer.InvariantCultureIgnoreCase)\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;)\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL4)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(ByVal myList As SortedList)\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;     {0,-6}: {1}&quot;, _\n               myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesSortedList\n\n\n&#39;This code produces the following output.  Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;mySL1 (default):\n&#39;        -KEY-   -VALUE-\n&#39;        first : Ola!\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL2 (case-insensitive comparer):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL3 (case-insensitive comparer, Turkish culture):\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        first : Ola!\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL4 (InvariantCultureIgnoreCase):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.SortedList_ctor#1\">\n// The following code example creates SortedList instances using different constructors\n// and demonstrates the differences in the behavior of the SortedList instances.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;        -KEY-   -VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;        {0,-6}: {1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Create a SortedList using the default comparer.\n   SortedList^ mySL1 = gcnew SortedList;\n   Console::WriteLine( &quot;mySL1 (default):&quot; );\n   mySL1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL1-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL1 );\n   \n   // Create a SortedList using the specified case-insensitive comparer.\n   SortedList^ mySL2 = gcnew SortedList( gcnew CaseInsensitiveComparer );\n   Console::WriteLine( &quot;mySL2 (case-insensitive comparer):&quot; );\n   mySL2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL2-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL2 );\n   \n   // Create a SortedList using the specified KeyComparer.\n   // The KeyComparer uses a case-insensitive hash code provider and a case-insensitive comparer,\n   // which are based on the Turkish culture (tr-TR), where &quot;I&quot; is not the uppercase version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n   SortedList^ mySL3 = gcnew SortedList( gcnew CaseInsensitiveComparer( myCul ) );\n   Console::WriteLine( &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot; );\n   mySL3-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL3-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL3-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL3-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL3 );\n   \n   // Create a SortedList using the ComparisonType.InvariantCultureIgnoreCase value.\n   SortedList^ mySL4 = gcnew SortedList( StringComparer::InvariantCultureIgnoreCase );\n   Console::WriteLine( &quot;mySL4 (InvariantCultureIgnoreCase):&quot; );\n   mySL4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL4-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL4 );\n\n    Console::WriteLine(&quot;<br><br>Hit ENTER to return&quot;);\n    Console::ReadLine();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList__ctor_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_SortedList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList(IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the default initial capacity, and is sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing keys.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. If the <code>comparer</code> parameter is <code>null</code>, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key is used; therefore, each key must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates collections using different <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> constructors and demonstrates the differences in the behavior of the collections.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.SortedList_ctor#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesSortedList\n{\n\n    public static void Main()\n    {\n\n        // Create a SortedList using the default comparer.\n        SortedList mySL1 = new SortedList();\n        Console.WriteLine(&quot;mySL1 (default):&quot;);\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL1);\n\n        // Create a SortedList using the specified case-insensitive comparer.\n        SortedList mySL2 = new SortedList(new CaseInsensitiveComparer());\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;);\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL2);\n\n        // Create a SortedList using the specified CaseInsensitiveComparer,\n        // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        // the uppercase version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        SortedList mySL3 = new SortedList(new CaseInsensitiveComparer(myCul));\n        Console.WriteLine(\n            &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL3);\n\n        // Create a SortedList using the\n        // StringComparer.InvariantCultureIgnoreCase value.\n        SortedList mySL4 = new SortedList(\n            StringComparer.InvariantCultureIgnoreCase);\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;);\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL4);\n\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;);\n        for (int i = 0; i &lt; myList.Count; i++)\n        {\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;,\n                myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.SortedList_ctor#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class SamplesSortedList\n\n    Public Shared Sub Main()\n\n        &#39; Create a SortedList using the default comparer.\n        Dim mySL1 As New SortedList()\n        Console.WriteLine(&quot;mySL1 (default):&quot;)\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL1)\n\n        &#39; Create a SortedList using the specified case-insensitive comparer.\n        Dim mySL2 As New SortedList(New CaseInsensitiveComparer())\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;)\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL2)\n\n        &#39; Create a SortedList using the specified CaseInsensitiveComparer,\n        &#39; which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        &#39; the uppercase version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim mySL3 As New SortedList(New CaseInsensitiveComparer(myCul))\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;)\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL3)\n\n        &#39; Create a SortedList using the\n        &#39; StringComparer.InvariantCultureIgnoreCase value.\n        Dim mySL4 As New SortedList( _\n            StringComparer.InvariantCultureIgnoreCase)\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;)\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL4)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(ByVal myList As SortedList)\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;     {0,-6}: {1}&quot;, _\n               myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesSortedList\n\n\n&#39;This code produces the following output.  Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;mySL1 (default):\n&#39;        -KEY-   -VALUE-\n&#39;        first : Ola!\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL2 (case-insensitive comparer):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL3 (case-insensitive comparer, Turkish culture):\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        first : Ola!\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL4 (InvariantCultureIgnoreCase):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.SortedList_ctor#1\">\n// The following code example creates SortedList instances using different constructors\n// and demonstrates the differences in the behavior of the SortedList instances.\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\n\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;        -KEY-   -VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;        {0,-6}: {1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Create a SortedList using the default comparer.\n   SortedList^ mySL1 = gcnew SortedList;\n   Console::WriteLine( &quot;mySL1 (default):&quot; );\n   mySL1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL1-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL1 );\n   \n   // Create a SortedList using the specified case-insensitive comparer.\n   SortedList^ mySL2 = gcnew SortedList( gcnew CaseInsensitiveComparer );\n   Console::WriteLine( &quot;mySL2 (case-insensitive comparer):&quot; );\n   mySL2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL2-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL2 );\n   \n   // Create a SortedList using the specified KeyComparer.\n   // The KeyComparer uses a case-insensitive hash code provider and a case-insensitive comparer,\n   // which are based on the Turkish culture (tr-TR), where &quot;I&quot; is not the uppercase version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n   SortedList^ mySL3 = gcnew SortedList( gcnew CaseInsensitiveComparer( myCul ) );\n   Console::WriteLine( &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot; );\n   mySL3-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL3-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL3-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL3-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL3 );\n   \n   // Create a SortedList using the ComparisonType.InvariantCultureIgnoreCase value.\n   SortedList^ mySL4 = gcnew SortedList( StringComparer::InvariantCultureIgnoreCase );\n   Console::WriteLine( &quot;mySL4 (InvariantCultureIgnoreCase):&quot; );\n   mySL4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n\n   try   { mySL4-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; ); }\n   catch ( ArgumentException^ e ) { Console::WriteLine( e ); }\n\n   PrintKeysAndValues( mySL4 );\n\n    Console::WriteLine(&quot;<br><br>Hit ENTER to return&quot;);\n    Console::ReadLine();\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList__ctor_System_Collections_IDictionary_\">\r\n    \r\n            <a id=\"System_Collections_SortedList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList(IDictionary)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.IDictionary d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> implementation to copy to a new <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>One or more elements in <code>d</code> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. The elements are sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object is an example of an <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> implementation that can be passed to this constructor. The new <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a copy of the keys and values stored in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>d</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates collections using different <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> constructors and demonstrates the differences in the behavior of the collections.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.SortedList_ctorDictionary#1\">\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;        -KEY-   -VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;        {0,-6}: {1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Create the dictionary.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a SortedList using the default comparer.\n   SortedList^ mySL1 = gcnew SortedList( myHT );\n   Console::WriteLine( &quot;mySL1 (default):&quot; );\n   try\n   {\n      mySL1-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL1 );\n   \n   // Create a SortedList using the specified case-insensitive comparer.\n   SortedList^ mySL2 = gcnew SortedList( myHT,gcnew CaseInsensitiveComparer );\n   Console::WriteLine( &quot;mySL2 (case-insensitive comparer):&quot; );\n   try\n   {\n      mySL2-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL2 );\n   \n    // Create a SortedList using the specified CaseInsensitiveComparer,\n    // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n    // the uppercase version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n   SortedList^ mySL3 = gcnew SortedList( myHT, gcnew CaseInsensitiveComparer( myCul ) );\n   Console::WriteLine( &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot; );\n   try\n   {\n      mySL3-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL3 );\n   \n   // Create a SortedList using the ComparisonType.InvariantCultureIgnoreCase value.\n   SortedList^ mySL4 = gcnew SortedList( myHT, StringComparer::InvariantCultureIgnoreCase );\n   Console::WriteLine( &quot;mySL4 (InvariantCultureIgnoreCase):&quot; );\n   try\n   {\n      mySL4-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL4 );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.SortedList_ctorDictionary#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class SamplesSortedList\n\n    Public Shared Sub Main()\n\n        &#39; Create the dictionary.\n        Dim myHT As New Hashtable()\n        myHT.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a SortedList using the default comparer.\n        Dim mySL1 As New SortedList(myHT)\n        Console.WriteLine(&quot;mySL1 (default):&quot;)\n        Try\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL1)\n\n        &#39; Create a SortedList using the specified case-insensitive comparer.\n        Dim mySL2 As New SortedList(myHT, New CaseInsensitiveComparer())\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;)\n        Try\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL2)\n\n        &#39; Create a SortedList using the specified CaseInsensitiveComparer,\n        &#39; which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        &#39; the uppercase version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim mySL3 As New SortedList(myHT, New CaseInsensitiveComparer(myCul))\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;)\n        Try\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL3)\n\n        &#39; Create a SortedList using the \n        &#39; StringComparer.InvariantCultureIgnoreCase value.\n        Dim mySL4 As New SortedList(myHT, StringComparer.InvariantCultureIgnoreCase)\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;)\n        Try\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL4)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(ByVal myList As SortedList)\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;, _\n                myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesSortedList\n\n\n&#39;This code produces the following output.  Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;mySL1 (default):\n&#39;        -KEY-   -VALUE-\n&#39;        first : Ola!\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL2 (case-insensitive comparer):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL3 (case-insensitive comparer, Turkish culture):\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        first : Ola!\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL4 (InvariantCultureIgnoreCase):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.SortedList_ctorDictionary#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesSortedList\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        Hashtable myHT = new Hashtable();\n        myHT.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a SortedList using the default comparer.\n        SortedList mySL1 = new SortedList(myHT);\n        Console.WriteLine(&quot;mySL1 (default):&quot;);\n        try\n        {\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL1);\n\n        // Create a SortedList using the specified case-insensitive comparer.\n        SortedList mySL2 = new SortedList(myHT, new CaseInsensitiveComparer());\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;);\n        try\n        {\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL2);\n\n        // Create a SortedList using the specified CaseInsensitiveComparer,\n        // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        // the uppercase version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        SortedList mySL3 = new SortedList(myHT, new CaseInsensitiveComparer(myCul));\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n        try\n        {\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL3);\n\n        // Create a SortedList using the\n        // StringComparer.InvariantCultureIgnoreCase value.\n        SortedList mySL4 = new SortedList(\n            myHT, StringComparer.InvariantCultureIgnoreCase);\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;);\n        try\n        {\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL4);\n\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;);\n        for (int i = 0; i &lt; myList.Count; i++)\n        {\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;, \n                myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_SortedList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the specified initial capacity, and is sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface implemented by each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (int initialCapacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>initialCapacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>initialCapacity</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough available memory to create a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object with the specified <code>initialCapacity</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each key must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. The elements are sorted according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key added to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>initialCapacity</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates collections using different <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> constructors and demonstrates the differences in the behavior of the collections.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.SortedList_ctorInt#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesSortedList\n{\n\n    public static void Main()\n    {\n\n        // Create a SortedList using the default comparer.\n        SortedList mySL1 = new SortedList( 3 );\n        Console.WriteLine(&quot;mySL1 (default):&quot;);\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL1);\n\n        // Create a SortedList using the specified case-insensitive comparer.\n        SortedList mySL2 = new SortedList(new CaseInsensitiveComparer(), 3);\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;);\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL2);\n\n        // Create a SortedList using the specified CaseInsensitiveComparer,\n        // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        // the uppercase version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        SortedList mySL3 = \n            new SortedList(new CaseInsensitiveComparer(myCul), 3);\n\n        Console.WriteLine(\n            &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL3);\n\n        // Create a SortedList using the\n        // StringComparer.InvariantCultureIgnoreCase value.\n        SortedList mySL4 = new SortedList(\n            StringComparer.InvariantCultureIgnoreCase, 3);\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;);\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL4);\n\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;);\n        for (int i = 0; i &lt; myList.Count; i++)\n        {\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;,\n                myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.SortedList_ctorInt#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class SamplesSortedList\n\n    Public Shared Sub Main()\n\n        &#39; Create a SortedList using the default comparer.\n        Dim mySL1 As New SortedList( 3 )\n        Console.WriteLine(&quot;mySL1 (default):&quot;)\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL1)\n\n        &#39; Create a SortedList using the specified case-insensitive comparer.\n        Dim mySL2 As New SortedList(New CaseInsensitiveComparer(), 3)\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;)\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL2)\n\n        &#39; Create a SortedList using the specified CaseInsensitiveComparer,\n        &#39; which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        &#39; the uppercase version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim mySL3 As New SortedList(New CaseInsensitiveComparer(myCul), 3)\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;)\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL3)\n\n        &#39; Create a SortedList using the\n        &#39; StringComparer.InvariantCultureIgnoreCase value.\n        Dim mySL4 As New SortedList( _\n            StringComparer.InvariantCultureIgnoreCase, 3)\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;)\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL4)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(ByVal myList As SortedList)\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;     {0,-6}: {1}&quot;, _\n               myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesSortedList\n\n\n&#39;This code produces the following output.  Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;mySL1 (default):\n&#39;        -KEY-   -VALUE-\n&#39;        first : Ola!\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL2 (case-insensitive comparer):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL3 (case-insensitive comparer, Turkish culture):\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        first : Ola!\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL4 (InvariantCultureIgnoreCase):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.SortedList_ctorInt#1\">// The following code example creates SortedList instances using different constructors\n// and demonstrates the differences in the behavior of the SortedList instances.\n\n\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;        Capacity is {0}.&quot;, myList-&gt;Capacity );\n   Console::WriteLine( &quot;        -KEY-   -VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;        {0,-6}: {1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Create a SortedList using the default comparer.\n   SortedList^ mySL1 = gcnew SortedList( 3 );\n   Console::WriteLine( &quot;mySL1 (default):&quot; );\n   mySL1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   try\n   {\n      mySL1-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL1 );\n   \n   // Create a SortedList using the specified case-insensitive comparer.\n   SortedList^ mySL2 = gcnew SortedList( gcnew CaseInsensitiveComparer,3 );\n   Console::WriteLine( &quot;mySL2 (case-insensitive comparer):&quot; );\n   mySL2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   try\n   {\n      mySL2-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL2 );\n   \n    // Create a SortedList using the specified CaseInsensitiveComparer,\n    // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n    // the uppercase version of &quot;i&quot;.\n    CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n    SortedList^ mySL3 = gcnew SortedList(gcnew CaseInsensitiveComparer(myCul), 3);\n\n\tConsole::WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n\n    mySL3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n    mySL3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n    mySL3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n    try\n    {\n        mySL3-&gt;Add(&quot;first&quot;, &quot;Ola!&quot;);\n    }\n    catch (ArgumentException^ e)\n    {\n\t\tConsole::WriteLine(e);\n    }\n    PrintKeysAndValues(mySL3);\n\n    // Create a SortedList using the\n    // StringComparer.InvariantCultureIgnoreCase value.\n   SortedList^ mySL4 = gcnew SortedList( StringComparer::InvariantCultureIgnoreCase, 3 );\n   Console::WriteLine( &quot;mySL4 (InvariantCultureIgnoreCase):&quot; );\n   mySL4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   try\n   {\n      mySL4-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL4 );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        Capacity is 6.\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        Capacity is 3.\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        Capacity is 6.\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        Capacity is 3.\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList__ctor_System_Collections_IComparer_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_SortedList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList(IComparer,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that is empty, has the specified initial capacity, and is sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.IComparer comparer, int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing keys.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough available memory to create a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object with the specified <code>capacity</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. If the <code>comparer</code> parameter is <code>null</code>, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key is used; therefore, each key must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates collections using different <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> constructors and demonstrates the differences in the behavior of the collections.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.SortedList_ctorInt#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesSortedList\n{\n\n    public static void Main()\n    {\n\n        // Create a SortedList using the default comparer.\n        SortedList mySL1 = new SortedList( 3 );\n        Console.WriteLine(&quot;mySL1 (default):&quot;);\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL1);\n\n        // Create a SortedList using the specified case-insensitive comparer.\n        SortedList mySL2 = new SortedList(new CaseInsensitiveComparer(), 3);\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;);\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL2);\n\n        // Create a SortedList using the specified CaseInsensitiveComparer,\n        // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        // the uppercase version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        SortedList mySL3 = \n            new SortedList(new CaseInsensitiveComparer(myCul), 3);\n\n        Console.WriteLine(\n            &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL3);\n\n        // Create a SortedList using the\n        // StringComparer.InvariantCultureIgnoreCase value.\n        SortedList mySL4 = new SortedList(\n            StringComparer.InvariantCultureIgnoreCase, 3);\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;);\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;);\n        try\n        {\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL4);\n\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;);\n        for (int i = 0; i &lt; myList.Count; i++)\n        {\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;,\n                myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n\n\n/* \nThis code produces the following output.\nResults vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.SortedList_ctorInt#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class SamplesSortedList\n\n    Public Shared Sub Main()\n\n        &#39; Create a SortedList using the default comparer.\n        Dim mySL1 As New SortedList( 3 )\n        Console.WriteLine(&quot;mySL1 (default):&quot;)\n        mySL1.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL1.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL1.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL1)\n\n        &#39; Create a SortedList using the specified case-insensitive comparer.\n        Dim mySL2 As New SortedList(New CaseInsensitiveComparer(), 3)\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;)\n        mySL2.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL2.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL2.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL2)\n\n        &#39; Create a SortedList using the specified CaseInsensitiveComparer,\n        &#39; which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        &#39; the uppercase version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim mySL3 As New SortedList(New CaseInsensitiveComparer(myCul), 3)\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;)\n        mySL3.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL3.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL3.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL3)\n\n        &#39; Create a SortedList using the\n        &#39; StringComparer.InvariantCultureIgnoreCase value.\n        Dim mySL4 As New SortedList( _\n            StringComparer.InvariantCultureIgnoreCase, 3)\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;)\n        mySL4.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        mySL4.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        mySL4.Add(&quot;THIRD&quot;, &quot;!&quot;)\n        Try\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL4)\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(ByVal myList As SortedList)\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;     {0,-6}: {1}&quot;, _\n               myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesSortedList\n\n\n&#39;This code produces the following output.  Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;mySL1 (default):\n&#39;        -KEY-   -VALUE-\n&#39;        first : Ola!\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL2 (case-insensitive comparer):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL3 (case-insensitive comparer, Turkish culture):\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        first : Ola!\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL4 (InvariantCultureIgnoreCase):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.SortedList_ctorInt#1\">// The following code example creates SortedList instances using different constructors\n// and demonstrates the differences in the behavior of the SortedList instances.\n\n\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;        Capacity is {0}.&quot;, myList-&gt;Capacity );\n   Console::WriteLine( &quot;        -KEY-   -VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;        {0,-6}: {1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Create a SortedList using the default comparer.\n   SortedList^ mySL1 = gcnew SortedList( 3 );\n   Console::WriteLine( &quot;mySL1 (default):&quot; );\n   mySL1-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL1-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL1-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   try\n   {\n      mySL1-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL1 );\n   \n   // Create a SortedList using the specified case-insensitive comparer.\n   SortedList^ mySL2 = gcnew SortedList( gcnew CaseInsensitiveComparer,3 );\n   Console::WriteLine( &quot;mySL2 (case-insensitive comparer):&quot; );\n   mySL2-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL2-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL2-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   try\n   {\n      mySL2-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL2 );\n   \n    // Create a SortedList using the specified CaseInsensitiveComparer,\n    // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n    // the uppercase version of &quot;i&quot;.\n    CultureInfo^ myCul = gcnew CultureInfo(&quot;tr-TR&quot;);\n    SortedList^ mySL3 = gcnew SortedList(gcnew CaseInsensitiveComparer(myCul), 3);\n\n\tConsole::WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n\n    mySL3-&gt;Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n    mySL3-&gt;Add(&quot;SECOND&quot;, &quot;World&quot;);\n    mySL3-&gt;Add(&quot;THIRD&quot;, &quot;!&quot;);\n    try\n    {\n        mySL3-&gt;Add(&quot;first&quot;, &quot;Ola!&quot;);\n    }\n    catch (ArgumentException^ e)\n    {\n\t\tConsole::WriteLine(e);\n    }\n    PrintKeysAndValues(mySL3);\n\n    // Create a SortedList using the\n    // StringComparer.InvariantCultureIgnoreCase value.\n   SortedList^ mySL4 = gcnew SortedList( StringComparer::InvariantCultureIgnoreCase, 3 );\n   Console::WriteLine( &quot;mySL4 (InvariantCultureIgnoreCase):&quot; );\n   mySL4-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   mySL4-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   mySL4-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   try\n   {\n      mySL4-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL4 );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        Capacity is 6.\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        Capacity is 3.\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        Capacity is 6.\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        Capacity is 3.\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList__ctor_System_Collections_IDictionary_System_Collections_IComparer_\">\r\n    \r\n            <a id=\"System_Collections_SortedList__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SortedList(IDictionary,IComparer)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> implementation to copy to a new <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation to use when comparing keys.  </p>\n<p> -or-  </p>\n<p> <code>null</code> to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p><code>comparer</code> is <code>null</code>, and one or more elements in <code>d</code> do not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are sorted according to the specified <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation. If the <code>comparer</code> parameter is <code>null</code>, the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation of each key is used; therefore, each key must implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface to be capable of comparisons with every other key in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> A <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object is an example of an <a class=\"xref\" href=\"system.collections.idictionary\" data-linktype=\"relative-path\">IDictionary</a> implementation that can be passed to this constructor. The new <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a copy of the keys and values stored in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>.  </p>\n<p> The capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>d</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates collections using different <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> constructors and demonstrates the differences in the behavior of the collections.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.SortedList_ctorDictionary#1\">\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;        -KEY-   -VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;        {0,-6}: {1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Create the dictionary.\n   Hashtable^ myHT = gcnew Hashtable;\n   myHT-&gt;Add( &quot;FIRST&quot;, &quot;Hello&quot; );\n   myHT-&gt;Add( &quot;SECOND&quot;, &quot;World&quot; );\n   myHT-&gt;Add( &quot;THIRD&quot;, &quot;!&quot; );\n   \n   // Create a SortedList using the default comparer.\n   SortedList^ mySL1 = gcnew SortedList( myHT );\n   Console::WriteLine( &quot;mySL1 (default):&quot; );\n   try\n   {\n      mySL1-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL1 );\n   \n   // Create a SortedList using the specified case-insensitive comparer.\n   SortedList^ mySL2 = gcnew SortedList( myHT,gcnew CaseInsensitiveComparer );\n   Console::WriteLine( &quot;mySL2 (case-insensitive comparer):&quot; );\n   try\n   {\n      mySL2-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL2 );\n   \n    // Create a SortedList using the specified CaseInsensitiveComparer,\n    // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n    // the uppercase version of &quot;i&quot;.\n   CultureInfo^ myCul = gcnew CultureInfo( &quot;tr-TR&quot; );\n   SortedList^ mySL3 = gcnew SortedList( myHT, gcnew CaseInsensitiveComparer( myCul ) );\n   Console::WriteLine( &quot;mySL3 (case-insensitive comparer, Turkish culture):&quot; );\n   try\n   {\n      mySL3-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL3 );\n   \n   // Create a SortedList using the ComparisonType.InvariantCultureIgnoreCase value.\n   SortedList^ mySL4 = gcnew SortedList( myHT, StringComparer::InvariantCultureIgnoreCase );\n   Console::WriteLine( &quot;mySL4 (InvariantCultureIgnoreCase):&quot; );\n   try\n   {\n      mySL4-&gt;Add( &quot;first&quot;, &quot;Ola!&quot; );\n   }\n   catch ( ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   PrintKeysAndValues( mySL4 );\n}\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.SortedList_ctorDictionary#1\">Imports System\nImports System.Collections\nImports System.Globalization\n\nPublic Class SamplesSortedList\n\n    Public Shared Sub Main()\n\n        &#39; Create the dictionary.\n        Dim myHT As New Hashtable()\n        myHT.Add(&quot;FIRST&quot;, &quot;Hello&quot;)\n        myHT.Add(&quot;SECOND&quot;, &quot;World&quot;)\n        myHT.Add(&quot;THIRD&quot;, &quot;!&quot;)\n\n        &#39; Create a SortedList using the default comparer.\n        Dim mySL1 As New SortedList(myHT)\n        Console.WriteLine(&quot;mySL1 (default):&quot;)\n        Try\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL1)\n\n        &#39; Create a SortedList using the specified case-insensitive comparer.\n        Dim mySL2 As New SortedList(myHT, New CaseInsensitiveComparer())\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;)\n        Try\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL2)\n\n        &#39; Create a SortedList using the specified CaseInsensitiveComparer,\n        &#39; which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        &#39; the uppercase version of &quot;i&quot;.\n        Dim myCul As New CultureInfo(&quot;tr-TR&quot;)\n        Dim mySL3 As New SortedList(myHT, New CaseInsensitiveComparer(myCul))\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;)\n        Try\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL3)\n\n        &#39; Create a SortedList using the \n        &#39; StringComparer.InvariantCultureIgnoreCase value.\n        Dim mySL4 As New SortedList(myHT, StringComparer.InvariantCultureIgnoreCase)\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;)\n        Try\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;)\n        Catch e As ArgumentException\n            Console.WriteLine(e)\n        End Try\n        PrintKeysAndValues(mySL4)\n\n    End Sub &#39;Main\n\n    Public Shared Sub PrintKeysAndValues(ByVal myList As SortedList)\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;, _\n                myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintKeysAndValues\n\nEnd Class &#39;SamplesSortedList\n\n\n&#39;This code produces the following output.  Results vary depending on the system&#39;s culture settings.\n&#39;\n&#39;mySL1 (default):\n&#39;        -KEY-   -VALUE-\n&#39;        first : Ola!\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL2 (case-insensitive comparer):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL3 (case-insensitive comparer, Turkish culture):\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        first : Ola!\n&#39;        SECOND: World\n&#39;        THIRD : !\n&#39;\n&#39;mySL4 (InvariantCultureIgnoreCase):\n&#39;System.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;&#39;   at System.Collections.SortedList.Add(Object key, Object value)\n&#39;   at SamplesSortedList.Main()\n&#39;        -KEY-   -VALUE-\n&#39;        FIRST : Hello\n&#39;        SECOND: World\n&#39;        THIRD : !\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.SortedList_ctorDictionary#1\">using System;\nusing System.Collections;\nusing System.Globalization;\n\npublic class SamplesSortedList\n{\n\n    public static void Main()\n    {\n\n        // Create the dictionary.\n        Hashtable myHT = new Hashtable();\n        myHT.Add(&quot;FIRST&quot;, &quot;Hello&quot;);\n        myHT.Add(&quot;SECOND&quot;, &quot;World&quot;);\n        myHT.Add(&quot;THIRD&quot;, &quot;!&quot;);\n\n        // Create a SortedList using the default comparer.\n        SortedList mySL1 = new SortedList(myHT);\n        Console.WriteLine(&quot;mySL1 (default):&quot;);\n        try\n        {\n            mySL1.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL1);\n\n        // Create a SortedList using the specified case-insensitive comparer.\n        SortedList mySL2 = new SortedList(myHT, new CaseInsensitiveComparer());\n        Console.WriteLine(&quot;mySL2 (case-insensitive comparer):&quot;);\n        try\n        {\n            mySL2.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL2);\n\n        // Create a SortedList using the specified CaseInsensitiveComparer,\n        // which is based on the Turkish culture (tr-TR), where &quot;I&quot; is not\n        // the uppercase version of &quot;i&quot;.\n        CultureInfo myCul = new CultureInfo(&quot;tr-TR&quot;);\n        SortedList mySL3 = new SortedList(myHT, new CaseInsensitiveComparer(myCul));\n        Console.WriteLine(&quot;mySL3 (case-insensitive comparer, Turkish culture):&quot;);\n        try\n        {\n            mySL3.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL3);\n\n        // Create a SortedList using the\n        // StringComparer.InvariantCultureIgnoreCase value.\n        SortedList mySL4 = new SortedList(\n            myHT, StringComparer.InvariantCultureIgnoreCase);\n\n        Console.WriteLine(&quot;mySL4 (InvariantCultureIgnoreCase):&quot;);\n        try\n        {\n            mySL4.Add(&quot;first&quot;, &quot;Ola!&quot;);\n        }\n        catch (ArgumentException e)\n        {\n            Console.WriteLine(e);\n        }\n        PrintKeysAndValues(mySL4);\n\n    }\n\n    public static void PrintKeysAndValues(SortedList myList)\n    {\n        Console.WriteLine(&quot;        -KEY-   -VALUE-&quot;);\n        for (int i = 0; i &lt; myList.Count; i++)\n        {\n            Console.WriteLine(&quot;        {0,-6}: {1}&quot;, \n                myList.GetKey(i), myList.GetByIndex(i));\n        }\n        Console.WriteLine();\n    }\n}\n\n\n/* \nThis code produces the following output.  Results vary depending on the system&#39;s culture settings.\n\nmySL1 (default):\n        -KEY-   -VALUE-\n        first : Ola!\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL2 (case-insensitive comparer):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\nmySL3 (case-insensitive comparer, Turkish culture):\n        -KEY-   -VALUE-\n        FIRST : Hello\n        first : Ola!\n        SECOND: World\n        THIRD : !\n\nmySL4 (InvariantCultureIgnoreCase):\nSystem.ArgumentException: Item has already been added.  Key in dictionary: &#39;FIRST&#39;  Key being added: &#39;first&#39;\n   at System.Collections.SortedList.Add(Object key, Object value)\n   at SamplesSortedList.Main()\n        -KEY-   -VALUE-\n        FIRST : Hello\n        SECOND: World\n        THIRD : !\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Capacity\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Capacity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Capacity</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the capacity of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Capacity { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The value assigned is less than the current number of elements in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough memory available on the system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Capacity is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object can store. <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a> is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> Capacity is always greater than or equal to <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>. If <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a> or by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is an O(<code>n</code>) operation, where <code>n</code> is the new capacity.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Count\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Each element is a key/value pair that can be accessed as a <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> object.  </p>\n<p> <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object can store. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> is always greater than or equal to Count. If Count exceeds <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_SortedList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object has a fixed size; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_SortedList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_SortedList_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To guarantee the thread safety of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, all operations must be done through the wrapper returned by the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock a collection using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IsSynchronized Example#2\">        SortedList^ myCollection = gcnew SortedList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IsSynchronized Example#2\">        SortedList myCollection = new SortedList();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IsSynchronized Example#2\">        Dim myCollection As New SortedList()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.  </p>\n<p> The following code example shows how to synchronize a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, determine whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is synchronized, and use a synchronized <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IsSynchronized Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( (int^)0, &quot;zero&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   \n   // Creates a synchronized wrapper around the SortedList.\n   SortedList^ mySyncdSL = SortedList::Synchronized( mySL );\n   \n   // Displays the sychronization status of both SortedLists.\n   Console::WriteLine( &quot;mySL is {0}.&quot;, mySL-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n   Console::WriteLine( &quot;mySyncdSL is {0}.&quot;, mySyncdSL-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n}\n\n/*\nThis code produces the following output.\n\nmySL is not synchronized.\nmySyncdSL is synchronized.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n \n       // Creates a synchronized wrapper around the SortedList.\n       SortedList mySyncdSL = SortedList.Synchronized( mySL );\n \n       // Displays the sychronization status of both SortedLists.\n       Console.WriteLine( &quot;mySL is {0}.&quot;, mySL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdSL is {0}.&quot;, mySyncdSL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n mySL is not synchronized.\n mySyncdSL is synchronized.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IsSynchronized Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        \n        &#39; Creates a synchronized wrapper around the SortedList.\n        Dim mySyncdSL As SortedList = SortedList.Synchronized(mySL)\n        \n        &#39; Displays the sychronization status of both SortedLists.\n        Dim msg As String\n        If mySL.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySL is {0}.&quot;, msg)\n        If mySyncdSL.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySyncdSL is {0}.&quot;, msg)        \n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39;\n&#39; mySL is not synchronized.\n&#39; mySyncdSL is synchronized.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Item_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets and sets the value associated with a specific key in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object this[object key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key associated with the value to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value associated with the <code>key</code> parameter in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, if <code>key</code> is found; otherwise, <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set and the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The property is set, <code>key</code> does not exist in the collection, and the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> has a fixed size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough available memory to add the element to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The comparer throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the Item property to access a specific element in a collection by specifying the following syntax: <code>myCollection[key]</code>.  </p>\n<p> You can also use this property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object (for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue)</code>. However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, setting the Item property overwrites the old value. In contrast, the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Add_\" data-linktype=\"relative-path\">Add</a> method does not modify existing elements.  </p>\n<p> A key cannot be <code>null</code>, but a value can be. To distinguish between <code>null</code> that is returned because the specified key is not found and <code>null</code> that is returned because the value of the specified key is <code>null</code>, use the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Contains_\" data-linktype=\"relative-path\">Contains</a> method or the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a> method to determine if the key exists in the list.  </p>\n<p> The elements of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> are sorted by the keys either according to a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation specified when the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is created or according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the keys themselves.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Keys_\" data-linktype=\"relative-path\">Keys</a>property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>. Setting the property is an O(log <code>n</code>) operation if the key is already in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>. If the key is not in the list, setting the property is an O(<code>n</code>) operation for unsorted data, or O(log <code>n</code>) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<code>n</code>).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Keys\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Keys_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Keys</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keys in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ICollection Keys { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the keys in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is a read-only view of the keys of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. Modifications made to the underlying <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> are immediately reflected in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> The elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> are sorted in the same order as the keys of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> This property is similar to the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_GetKeyList_\" data-linktype=\"relative-path\">GetKeyList</a> method, but returns an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object instead of an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_SortedList_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To create a synchronized version of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, use the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Synchronized_\" data-linktype=\"relative-path\">Synchronized</a> method. However, derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, not directly on the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IsSynchronized Example#2\">        SortedList^ myCollection = gcnew SortedList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IsSynchronized Example#2\">        SortedList myCollection = new SortedList();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IsSynchronized Example#2\">        Dim myCollection As New SortedList()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Values\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Values_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Values</div>        \r\n          </div>\r\n    \r\n            <p>Gets the values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.ICollection Values { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object containing the values in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object is a read-only view of the values of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. Modifications made to the underlying <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> are immediately reflected in the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  </p>\n<p> The elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> are sorted in the same order as the values of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> This property is similar to the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_GetValueList_\" data-linktype=\"relative-path\">GetValueList</a> method, but returns an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object instead of an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Add_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an element with the specified key and value to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Add (object key, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value of the element to add. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>An element with the specified <code>key</code> already exists in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is set to use the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface, and <code>key</code> does not implement the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> interface.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> has a fixed size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></div>\r\n                  </div>\r\n                  <p>There is not enough available memory to add the element to the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The comparer throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The insertion point is determined based on the comparer selected, either explicitly or by default, when the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object was created.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a> already equals <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, the capacity of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> You can also use the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Item_\" data-linktype=\"relative-path\">Item</a> property to add new elements by setting the value of a key that does not exist in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object (for example, <code>myCollection[&quot;myNonexistentKey&quot;] = myValue</code>). However, if the specified key already exists in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, setting the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Item_\" data-linktype=\"relative-path\">Item</a> property overwrites the old value. In contrast, the Add method does not modify existing elements.  </p>\n<p> The elements of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object are sorted by the keys either according to a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation specified when the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is created or according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the keys themselves.  </p>\n<p> A key cannot be <code>null</code>, but a value can be.  </p>\n<p> This method is an O(<code>n</code>) operation for unsorted data, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>. It is an O(log <code>n</code>) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<code>n</code>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to add elements to a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.Add Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( &quot;one&quot;, &quot;The&quot; );\n   mySL-&gt;Add( &quot;two&quot;, &quot;quick&quot; );\n   mySL-&gt;Add( &quot;three&quot;, &quot;brown&quot; );\n   mySL-&gt;Add( &quot;four&quot;, &quot;fox&quot; );\n   \n   // Displays the SortedList.\n   Console::WriteLine(  &quot;The SortedList contains the following:&quot; );\n   PrintKeysAndValues( mySL );\n}\n\n/* \nThis code produces the following output.\n\nThe SortedList contains the following:\n        -KEY-   -VALUE-\n        four:   fox\n        one:    The\n        three:  brown\n        two:    quick\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.Add Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(&quot;one&quot;, &quot;The&quot;)\n        mySL.Add(&quot;two&quot;, &quot;quick&quot;)\n        mySL.Add(&quot;three&quot;, &quot;brown&quot;)\n        mySL.Add(&quot;four&quot;, &quot;fox&quot;)\n        \n        &#39; Displays the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the following:&quot;)\n        PrintKeysAndValues(mySL)\n    End Sub    \n    \n    Public Shared Sub PrintKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following:\n&#39;     -KEY-    -VALUE-\n&#39;     four:    fox\n&#39;     one:    The\n&#39;     three:    brown\n&#39;     two:    quick\n \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.Add Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( &quot;one&quot;, &quot;The&quot; );\n       mySL.Add( &quot;two&quot;, &quot;quick&quot; );\n       mySL.Add( &quot;three&quot;, &quot;brown&quot; );\n       mySL.Add( &quot;four&quot;, &quot;fox&quot; );\n \n       // Displays the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following:&quot; );\n       PrintKeysAndValues( mySL );\n    }\n \n \n    public static void PrintKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following:\n     -KEY-    -VALUE-\n     four:    fox\n     one:    The\n     three:    brown\n     two:    quick\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Clear\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero and references to other objects from elements of the collection are also released.  </p>\n<p> <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> remains unchanged. To reset the capacity of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, call <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_TrimToSize_\" data-linktype=\"relative-path\">TrimToSize</a> or set the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Capacity_\" data-linktype=\"relative-path\">Capacity</a> property directly. Trimming an empty <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to trim the unused portions of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object and how to clear the values of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.Clear Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( &quot;one&quot;, &quot;The&quot; );\n   mySL-&gt;Add( &quot;two&quot;, &quot;quick&quot; );\n   mySL-&gt;Add( &quot;three&quot;, &quot;brown&quot; );\n   mySL-&gt;Add( &quot;four&quot;, &quot;fox&quot; );\n   mySL-&gt;Add( &quot;five&quot;, &quot;jumped&quot; );\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;Initially,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Trims the SortedList.\n   mySL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;After TrimToSize,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Clears the SortedList.\n   mySL-&gt;Clear();\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;After Clear,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Trims the SortedList again.\n   mySL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;After the second TrimToSize,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n}\n\n/* \nThis code produces the following output.\n\nInitially,\n   Count    : 5\n   Capacity : 16\n   Values:\n        -KEY-   -VALUE-\n        five:   jumped\n        four:   fox\n        one:    The\n        three:  brown\n        two:    quick\n\nAfter TrimToSize,\n   Count    : 5\n   Capacity : 5\n   Values:\n        -KEY-   -VALUE-\n        five:   jumped\n        four:   fox\n        one:    The\n        three:  brown\n        two:    quick\n\nAfter Clear,\n   Count    : 0\n   Capacity : 16\n   Values:\n        -KEY-   -VALUE-\n\nAfter the second TrimToSize,\n   Count    : 0\n   Capacity : 16\n   Values:\n        -KEY-   -VALUE-\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.Clear Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( &quot;one&quot;, &quot;The&quot; );\n       mySL.Add( &quot;two&quot;, &quot;quick&quot; );\n       mySL.Add( &quot;three&quot;, &quot;brown&quot; );\n       mySL.Add( &quot;four&quot;, &quot;fox&quot; );\n       mySL.Add( &quot;five&quot;, &quot;jumped&quot; );\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Trims the SortedList.\n       mySL.TrimToSize();\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;After TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Clears the SortedList.\n       mySL.Clear();\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;After Clear,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Trims the SortedList again.\n       mySL.TrimToSize();\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;After the second TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n    }\n \n \n    public static void PrintKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Capacity : 16\n    Values:\n     -KEY-    -VALUE-\n     five:    jumped\n     four:    fox\n     one:    The\n     three:    brown\n     two:    quick\n \n After TrimToSize,\n    Count    : 5\n    Capacity : 5\n    Values:\n     -KEY-    -VALUE-\n     five:    jumped\n     four:    fox\n     one:    The\n     three:    brown\n     two:    quick\n \n After Clear,\n    Count    : 0\n    Capacity : 16\n    Values:\n     -KEY-    -VALUE-\n \n After the second TrimToSize,\n    Count    : 0\n    Capacity : 16\n    Values:\n     -KEY-    -VALUE-\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.Clear Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(&quot;one&quot;, &quot;The&quot;)\n        mySL.Add(&quot;two&quot;, &quot;quick&quot;)\n        mySL.Add(&quot;three&quot;, &quot;brown&quot;)\n        mySL.Add(&quot;four&quot;, &quot;fox&quot;)\n        mySL.Add(&quot;five&quot;, &quot;jumped&quot;)\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Trims the SortedList.\n        mySL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;After TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Clears the SortedList.\n        mySL.Clear()\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;After Clear,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Trims the SortedList again.\n        mySL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;After the second TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n    End Sub   \n    \n    \n    Public Shared Sub PrintKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initially,\n&#39;    Count    : 5\n&#39;    Capacity : 16\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n&#39;     five:    jumped\n&#39;     four:    fox\n&#39;     one:    The\n&#39;     three:    brown\n&#39;     two:    quick\n&#39;\n&#39; After TrimToSize,\n&#39;    Count    : 5\n&#39;    Capacity : 5\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n&#39;     five:    jumped\n&#39;     four:    fox\n&#39;     one:    The\n&#39;     three:    brown\n&#39;     two:    quick\n&#39; \n&#39; After Clear,\n&#39;    Count    : 0\n&#39;    Capacity : 16\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n&#39; \n&#39;\n&#39; After the second TrimToSize,\n&#39;    Count    : 0\n&#39;    Capacity : 16\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Clone\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Clone_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clone()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a shallow copy of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object Clone ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>A shallow copy of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  </p>\n<p> In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool Contains (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains an element with the specified <code>key</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The comparer throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object are sorted by the keys either according to a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation specified when the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is created or according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the keys themselves.  </p>\n<p> Contains implements <a class=\"xref\" href=\"system.collections.idictionary#System_Collections_IDictionary_Contains_\" data-linktype=\"relative-path\">Contains</a>. It behaves exactly as <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_ContainsKey_\" data-linktype=\"relative-path\">ContainsKey</a>.  </p>\n<p> This method uses a binary search algorithm; therefore, this method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic SortedList.Contains Example#1\"> using System;\n using System.Collections;\n \n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n \n       // Displays the values of the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL.ContainsKey( myKey ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n       myKey = 6;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL.ContainsKey( myKey ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL.ContainsValue( myValue ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n       myValue = &quot;nine&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL.ContainsValue( myValue ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following values:\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    three\n     [4]:    4    four\n \n The key &quot;2&quot; is in the SortedList.\n The key &quot;6&quot; is NOT in the SortedList.\n The value &quot;three&quot; is in the SortedList.\n The value &quot;nine&quot; is NOT in the SortedList.\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.Contains Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( (int^)0, &quot;zero&quot; );\n   \n   // Displays the values of the SortedList.\n   Console::WriteLine(  &quot;The SortedList contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine(  &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL-&gt;ContainsKey( myKey ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   myKey = 6;\n   Console::WriteLine(  &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL-&gt;ContainsKey( myKey ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine(  &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL-&gt;ContainsValue( myValue ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   myValue =  &quot;nine&quot;;\n   Console::WriteLine(  &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL-&gt;ContainsValue( myValue ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n}\n\n/* \nThis code produces the following output.\n\nThe SortedList contains the following values:\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       three\n        [4]:    4       four\n\nThe key &quot;2&quot; is in the SortedList.\nThe key &quot;6&quot; is NOT in the SortedList.\nThe value &quot;three&quot; is in the SortedList.\nThe value &quot;nine&quot; is NOT in the SortedList.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.Contains Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        \n        &#39; Displays the values of the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the following values:&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n        \n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Dim msg As String\n        If mySL.ContainsKey(myKey) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myKey, msg)\n        myKey = 6\n        If mySL.ContainsKey(myKey) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myKey, msg)        \n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        If mySL.ContainsValue(myValue) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myValue, msg)\n        myValue = &quot;nine&quot;\n        If mySL.ContainsValue(myValue) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myValue, msg)\n    End Sub   \n    \n    \n    Public Shared Sub PrintIndexAndKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-INDEX-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;[{0}]:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot; &amp; ControlChars.Tab &amp; &quot;{2}&quot;, i, myList.GetKey(i), _\n               myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following values:\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    three\n&#39;     [4]:    4    four\n&#39; \n&#39; The key &quot;2&quot; is in the SortedList.\n&#39; The key &quot;6&quot; is NOT in the SortedList.\n&#39; The value &quot;three&quot; is in the SortedList.\n&#39; The value &quot;nine&quot; is NOT in the SortedList. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_ContainsKey_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_ContainsKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsKey(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ContainsKey (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains an element with the specified <code>key</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The comparer throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object are sorted by the keys either according to a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation specified when the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is created or according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the keys themselves.  </p>\n<p> This method behaves exactly as the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Contains_\" data-linktype=\"relative-path\">Contains</a> method.  </p>\n<p> This method uses a binary search algorithm; therefore, this method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic SortedList.Contains Example#1\"> using System;\n using System.Collections;\n \n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n \n       // Displays the values of the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL.ContainsKey( myKey ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n       myKey = 6;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL.ContainsKey( myKey ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL.ContainsValue( myValue ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n       myValue = &quot;nine&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL.ContainsValue( myValue ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following values:\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    three\n     [4]:    4    four\n \n The key &quot;2&quot; is in the SortedList.\n The key &quot;6&quot; is NOT in the SortedList.\n The value &quot;three&quot; is in the SortedList.\n The value &quot;nine&quot; is NOT in the SortedList.\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.Contains Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( (int^)0, &quot;zero&quot; );\n   \n   // Displays the values of the SortedList.\n   Console::WriteLine(  &quot;The SortedList contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine(  &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL-&gt;ContainsKey( myKey ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   myKey = 6;\n   Console::WriteLine(  &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL-&gt;ContainsKey( myKey ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine(  &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL-&gt;ContainsValue( myValue ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   myValue =  &quot;nine&quot;;\n   Console::WriteLine(  &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL-&gt;ContainsValue( myValue ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n}\n\n/* \nThis code produces the following output.\n\nThe SortedList contains the following values:\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       three\n        [4]:    4       four\n\nThe key &quot;2&quot; is in the SortedList.\nThe key &quot;6&quot; is NOT in the SortedList.\nThe value &quot;three&quot; is in the SortedList.\nThe value &quot;nine&quot; is NOT in the SortedList.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.Contains Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        \n        &#39; Displays the values of the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the following values:&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n        \n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Dim msg As String\n        If mySL.ContainsKey(myKey) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myKey, msg)\n        myKey = 6\n        If mySL.ContainsKey(myKey) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myKey, msg)        \n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        If mySL.ContainsValue(myValue) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myValue, msg)\n        myValue = &quot;nine&quot;\n        If mySL.ContainsValue(myValue) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myValue, msg)\n    End Sub   \n    \n    \n    Public Shared Sub PrintIndexAndKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-INDEX-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;[{0}]:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot; &amp; ControlChars.Tab &amp; &quot;{2}&quot;, i, myList.GetKey(i), _\n               myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following values:\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    three\n&#39;     [4]:    4    four\n&#39; \n&#39; The key &quot;2&quot; is in the SortedList.\n&#39; The key &quot;6&quot; is NOT in the SortedList.\n&#39; The value &quot;three&quot; is in the SortedList.\n&#39; The value &quot;nine&quot; is NOT in the SortedList. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_ContainsValue_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_ContainsValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainsValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ContainsValue (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains an element with the specified <code>value</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The values of the elements of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object contains a specific element.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic SortedList.Contains Example#1\"> using System;\n using System.Collections;\n \n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n \n       // Displays the values of the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL.ContainsKey( myKey ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n       myKey = 6;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL.ContainsKey( myKey ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL.ContainsValue( myValue ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n       myValue = &quot;nine&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL.ContainsValue( myValue ) ? &quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following values:\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    three\n     [4]:    4    four\n \n The key &quot;2&quot; is in the SortedList.\n The key &quot;6&quot; is NOT in the SortedList.\n The value &quot;three&quot; is in the SortedList.\n The value &quot;nine&quot; is NOT in the SortedList.\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.Contains Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( (int^)0, &quot;zero&quot; );\n   \n   // Displays the values of the SortedList.\n   Console::WriteLine(  &quot;The SortedList contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine(  &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL-&gt;ContainsKey( myKey ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   myKey = 6;\n   Console::WriteLine(  &quot;The key \\&quot;{0}\\&quot; is {1}.&quot;, myKey, mySL-&gt;ContainsKey( myKey ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine(  &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL-&gt;ContainsValue( myValue ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n   myValue =  &quot;nine&quot;;\n   Console::WriteLine(  &quot;The value \\&quot;{0}\\&quot; is {1}.&quot;, myValue, mySL-&gt;ContainsValue( myValue ) ? (String^)&quot;in the SortedList&quot; : &quot;NOT in the SortedList&quot; );\n}\n\n/* \nThis code produces the following output.\n\nThe SortedList contains the following values:\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       three\n        [4]:    4       four\n\nThe key &quot;2&quot; is in the SortedList.\nThe key &quot;6&quot; is NOT in the SortedList.\nThe value &quot;three&quot; is in the SortedList.\nThe value &quot;nine&quot; is NOT in the SortedList.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.Contains Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        \n        &#39; Displays the values of the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the following values:&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n        \n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Dim msg As String\n        If mySL.ContainsKey(myKey) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myKey, msg)\n        myKey = 6\n        If mySL.ContainsKey(myKey) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myKey, msg)        \n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        If mySL.ContainsValue(myValue) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myValue, msg)\n        myValue = &quot;nine&quot;\n        If mySL.ContainsValue(myValue) Then\n            msg = &quot;in the SortedList&quot;\n        Else\n            msg = &quot;NOT in the SortedList&quot;\n        End If\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is {1}.&quot;, myValue, msg)\n    End Sub   \n    \n    \n    Public Shared Sub PrintIndexAndKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-INDEX-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;[{0}]:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot; &amp; ControlChars.Tab &amp; &quot;{2}&quot;, i, myList.GetKey(i), _\n               myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following values:\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    three\n&#39;     [4]:    4    four\n&#39; \n&#39; The key &quot;2&quot; is in the SortedList.\n&#39; The key &quot;6&quot; is NOT in the SortedList.\n&#39; The value &quot;three&quot; is in the SortedList.\n&#39; The value &quot;nine&quot; is NOT in the SortedList. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> elements to a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> object, starting at the specified index in the array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void CopyTo (Array array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> object that is the destination of the <a class=\"xref\" href=\"system.collections.dictionaryentry\" data-linktype=\"relative-path\">DictionaryEntry</a> objects copied from <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The key/value pairs are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> object in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> To copy only the keys in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, use <code>SortedList.Keys.CopyTo</code>.  </p>\n<p> To copy only the values in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>, use <code>SortedList.Values.CopyTo</code>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to copy the values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object into a one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic SortedList.CopyTo Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes the source SortedList.\n       SortedList mySourceList = new SortedList();\n       mySourceList.Add( 2, &quot;cats&quot; );\n       mySourceList.Add( 3, &quot;in&quot; );\n       mySourceList.Add( 1, &quot;napping&quot; );\n       mySourceList.Add( 4, &quot;the&quot; );\n       mySourceList.Add( 0, &quot;three&quot; );\n       mySourceList.Add( 5, &quot;barn&quot; );\n \n       // Creates and initializes the one-dimensional target Array.\n       String[] tempArray = new String[] { &quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumped&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot; };\n       DictionaryEntry[] myTargetArray = new DictionaryEntry[15];\n       int i = 0;\n       foreach ( String s in tempArray )  {\n          myTargetArray[i].Key = i;\n          myTargetArray[i].Value = s;\n          i++;\n       }\n\n       // Displays the values of the target Array.\n       Console.WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n       PrintValues( myTargetArray, &#39; &#39; );\n \n       // Copies the entire source SortedList to the target SortedList, starting at index 6.\n       mySourceList.CopyTo( myTargetArray, 6 );\n \n       // Displays the values of the target Array.\n       PrintValues( myTargetArray, &#39; &#39; );\n    }\n \n    public static void PrintValues( DictionaryEntry[] myArr, char mySeparator )  {\n       for ( int i = 0; i &lt; myArr.Length; i++ )\n          Console.Write( &quot;{0}{1}&quot;, mySeparator, myArr[i].Value );\n       Console.WriteLine();\n    }\n\n }\n\n\n/*\nThis code produces the following output.\n \nThe target Array contains the following (before and after copying):\n The quick brown fox jumped over the lazy dog      \n The quick brown fox jumped over three napping cats in the barn\n\n*/ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.CopyTo Example#1\">using namespace System;\nusing namespace System::Collections;\nvoid PrintValues( array&lt;DictionaryEntry&gt;^ myArr, Char mySeparator );\nint main()\n{\n   \n   // Creates and initializes the source SortedList.\n   SortedList^ mySourceList = gcnew SortedList;\n   mySourceList-&gt;Add( 2, &quot;cats&quot; );\n   mySourceList-&gt;Add( 3, &quot;in&quot; );\n   mySourceList-&gt;Add( 1, &quot;napping&quot; );\n   mySourceList-&gt;Add( 4, &quot;the&quot; );\n   mySourceList-&gt;Add( 0, &quot;three&quot; );\n   mySourceList-&gt;Add( 5, &quot;barn&quot; );\n   \n   // Creates and initializes the one-dimensional target Array.\n   array&lt;String^&gt;^tempArray = {&quot;The&quot;,&quot;quick&quot;,&quot;brown&quot;,&quot;fox&quot;,&quot;jumped&quot;,&quot;over&quot;,&quot;the&quot;,&quot;lazy&quot;,&quot;dog&quot;};\n   array&lt;DictionaryEntry&gt;^myTargetArray = gcnew array&lt;DictionaryEntry&gt;(15);\n   int i = 0;\n   IEnumerator^ myEnum = tempArray-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      myTargetArray[ i ].Key = i;\n      myTargetArray[ i ].Value = s;\n      i++;\n   }\n\n   \n   // Displays the values of the target Array.\n   Console::WriteLine( &quot;The target Array contains the following (before and after copying):&quot; );\n   PrintValues( myTargetArray, &#39; &#39; );\n   \n   // Copies the entire source SortedList to the target SortedList, starting at index 6.\n   mySourceList-&gt;CopyTo( myTargetArray, 6 );\n   \n   // Displays the values of the target Array.\n   PrintValues( myTargetArray, &#39; &#39; );\n}\n\nvoid PrintValues( array&lt;DictionaryEntry&gt;^ myArr, Char mySeparator )\n{\n   for ( int i = 0; i &lt; myArr-&gt;Length; i++ )\n      Console::Write( &quot;{0}{1}&quot;, mySeparator, myArr[ i ].Value );\n   Console::WriteLine();\n}\n\n/*\nThis code produces the following output.\n \nThe target Array contains the following (before and after copying):\n The quick brown fox jumped over the lazy dog      \n The quick brown fox jumped over three napping cats in the barn\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.CopyTo Example#1\">Imports System\nImports System.Collections\n\nPublic Class SamplesSortedList\n\n   Public Shared Sub Main()\n\n      &#39; Creates and initializes the source SortedList.\n      Dim mySourceList As New SortedList()\n      mySourceList.Add(2, &quot;cats&quot;)\n      mySourceList.Add(3, &quot;in&quot;)\n      mySourceList.Add(1, &quot;napping&quot;)\n      mySourceList.Add(4, &quot;the&quot;)\n      mySourceList.Add(0, &quot;three&quot;)\n      mySourceList.Add(5, &quot;barn&quot;)\n\n      &#39; Creates and initializes the one-dimensional target Array.\n      Dim tempArray() As String = {&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumped&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;}\n      Dim myTargetArray(14) As DictionaryEntry\n      Dim i As Integer = 0\n      Dim s As String\n      For Each s In  tempArray\n         myTargetArray(i).Key = i\n         myTargetArray(i).Value = s\n         i += 1\n      Next s\n\n      &#39; Displays the values of the target Array.\n      Console.WriteLine(&quot;The target Array contains the following (before and after copying):&quot;)\n      PrintValues(myTargetArray, &quot; &quot;c)\n\n      &#39; Copies the entire source SortedList to the target SortedList, starting at index 6.\n      mySourceList.CopyTo(myTargetArray, 6)\n\n      &#39; Displays the values of the target Array.\n      PrintValues(myTargetArray, &quot; &quot;c)\n\n   End Sub &#39;Main\n\n\n   Public Shared Sub PrintValues(myArr() As DictionaryEntry, mySeparator As Char)\n      Dim i As Integer\n      For i = 0 To myArr.Length - 1\n         Console.Write(&quot;{0}{1}&quot;, mySeparator, myArr(i).Value)\n      Next i\n      Console.WriteLine()\n  End Sub &#39;PrintValues\n\nEnd Class &#39;SamplesSortedList \n\n\n&#39;This code produces the following output.\n&#39; \n&#39;The target Array contains the following (before and after copying):\n&#39; The quick brown fox jumped over the lazy dog      \n&#39; The quick brown fox jumped over three napping cats in the barn\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_GetByIndex_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_GetByIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByIndex(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the value at the specified index of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetByIndex (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the value to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The value at the specified index of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to get one or all the keys or values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.GetByIndex Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 1.3, &quot;fox&quot; );\n   mySL-&gt;Add( 1.4, &quot;jumped&quot; );\n   mySL-&gt;Add( 1.5, &quot;over&quot; );\n   mySL-&gt;Add( 1.2, &quot;brown&quot; );\n   mySL-&gt;Add( 1.1, &quot;quick&quot; );\n   mySL-&gt;Add( 1.0, &quot;The&quot; );\n   mySL-&gt;Add( 1.6, &quot;the&quot; );\n   mySL-&gt;Add( 1.8, &quot;dog&quot; );\n   mySL-&gt;Add( 1.7, &quot;lazy&quot; );\n   \n   // Gets the key and the value based on the index.\n   int myIndex = 3;\n   Console::WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetKey( myIndex ) );\n   Console::WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetByIndex( myIndex ) );\n   \n   // Gets the list of keys and the list of values.\n   IList^ myKeyList = mySL-&gt;GetKeyList();\n   IList^ myValueList = mySL-&gt;GetValueList();\n   \n   // Prints the keys in the first column and the values in the second column.\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; mySL-&gt;Count; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[ i ], myValueList[ i ] );\n}\n\n/*\nThis code produces the following output.\n\nThe key   at index 3 is 1.3.\nThe value at index 3 is fox.\n        -KEY-   -VALUE-\n        1       The\n        1.1     quick\n        1.2     brown\n        1.3     fox\n        1.4     jumped\n        1.5     over\n        1.6     the\n        1.7     lazy\n        1.8     dog\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.GetByIndex Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 1.3, &quot;fox&quot; );\n       mySL.Add( 1.4, &quot;jumped&quot; );\n       mySL.Add( 1.5, &quot;over&quot; );\n       mySL.Add( 1.2, &quot;brown&quot; );\n       mySL.Add( 1.1, &quot;quick&quot; );\n       mySL.Add( 1.0, &quot;The&quot; );\n       mySL.Add( 1.6, &quot;the&quot; );\n       mySL.Add( 1.8, &quot;dog&quot; );\n       mySL.Add( 1.7, &quot;lazy&quot; );\n \n       // Gets the key and the value based on the index.\n       int myIndex=3;\n       Console.WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL.GetKey( myIndex ) );\n       Console.WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL.GetByIndex( myIndex ) );\n \n       // Gets the list of keys and the list of values.\n       IList myKeyList = mySL.GetKeyList();\n       IList myValueList = mySL.GetValueList();\n \n       // Prints the keys in the first column and the values in the second column.\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; mySL.Count; i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[i], myValueList[i] );\n    }\n }\n /* \n This code produces the following output.\n \n The key   at index 3 is 1.3.\n The value at index 3 is fox.\n     -KEY-    -VALUE-\n     1    The\n     1.1    quick\n     1.2    brown\n     1.3    fox\n     1.4    jumped\n     1.5    over\n     1.6    the\n     1.7    lazy\n     1.8    dog\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.GetByIndex Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList\n        \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(1.3, &quot;fox&quot;)\n        mySL.Add(1.4, &quot;jumped&quot;)\n        mySL.Add(1.5, &quot;over&quot;)\n        mySL.Add(1.2, &quot;brown&quot;)\n        mySL.Add(1.1, &quot;quick&quot;)\n        mySL.Add(1.0, &quot;The&quot;)\n        mySL.Add(1.6, &quot;the&quot;)\n        mySL.Add(1.8, &quot;dog&quot;)\n        mySL.Add(1.7, &quot;lazy&quot;)\n        \n        &#39; Gets the key and the value based on the index.\n        Dim myIndex As Integer = 3\n        Console.WriteLine(&quot;The key   at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetKey(myIndex))\n        Console.WriteLine(&quot;The value at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetByIndex(myIndex))\n        \n        &#39; Gets the list of keys and the list of values.\n        Dim myKeyList As IList = mySL.GetKeyList()\n        Dim myValueList As IList = mySL.GetValueList()\n        \n        &#39; Prints the keys in the first column and the values in the second column.\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To mySL.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myKeyList(i), myValueList(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The key   at index 3 is 1.3.\n&#39; The value at index 3 is fox.\n&#39;     -KEY-    -VALUE-\n&#39;     1    The\n&#39;     1.1    quick\n&#39;     1.2    brown\n&#39;     1.3    fox\n&#39;     1.4    jumped\n&#39;     1.5    over\n&#39;     1.6    the\n&#39;     1.7    lazy\n&#39;     1.8    dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_SortedList_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object that iterates through a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.idictionaryenumerator\" data-linktype=\"relative-path\">IDictionaryEnumerator</a> object for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_GetKey_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_GetKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetKey(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the key at the specified index of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetKey (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the key to get.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The key at the specified index of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to get one or all the keys or values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.GetByIndex Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 1.3, &quot;fox&quot; );\n   mySL-&gt;Add( 1.4, &quot;jumped&quot; );\n   mySL-&gt;Add( 1.5, &quot;over&quot; );\n   mySL-&gt;Add( 1.2, &quot;brown&quot; );\n   mySL-&gt;Add( 1.1, &quot;quick&quot; );\n   mySL-&gt;Add( 1.0, &quot;The&quot; );\n   mySL-&gt;Add( 1.6, &quot;the&quot; );\n   mySL-&gt;Add( 1.8, &quot;dog&quot; );\n   mySL-&gt;Add( 1.7, &quot;lazy&quot; );\n   \n   // Gets the key and the value based on the index.\n   int myIndex = 3;\n   Console::WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetKey( myIndex ) );\n   Console::WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetByIndex( myIndex ) );\n   \n   // Gets the list of keys and the list of values.\n   IList^ myKeyList = mySL-&gt;GetKeyList();\n   IList^ myValueList = mySL-&gt;GetValueList();\n   \n   // Prints the keys in the first column and the values in the second column.\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; mySL-&gt;Count; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[ i ], myValueList[ i ] );\n}\n\n/*\nThis code produces the following output.\n\nThe key   at index 3 is 1.3.\nThe value at index 3 is fox.\n        -KEY-   -VALUE-\n        1       The\n        1.1     quick\n        1.2     brown\n        1.3     fox\n        1.4     jumped\n        1.5     over\n        1.6     the\n        1.7     lazy\n        1.8     dog\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.GetByIndex Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 1.3, &quot;fox&quot; );\n       mySL.Add( 1.4, &quot;jumped&quot; );\n       mySL.Add( 1.5, &quot;over&quot; );\n       mySL.Add( 1.2, &quot;brown&quot; );\n       mySL.Add( 1.1, &quot;quick&quot; );\n       mySL.Add( 1.0, &quot;The&quot; );\n       mySL.Add( 1.6, &quot;the&quot; );\n       mySL.Add( 1.8, &quot;dog&quot; );\n       mySL.Add( 1.7, &quot;lazy&quot; );\n \n       // Gets the key and the value based on the index.\n       int myIndex=3;\n       Console.WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL.GetKey( myIndex ) );\n       Console.WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL.GetByIndex( myIndex ) );\n \n       // Gets the list of keys and the list of values.\n       IList myKeyList = mySL.GetKeyList();\n       IList myValueList = mySL.GetValueList();\n \n       // Prints the keys in the first column and the values in the second column.\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; mySL.Count; i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[i], myValueList[i] );\n    }\n }\n /* \n This code produces the following output.\n \n The key   at index 3 is 1.3.\n The value at index 3 is fox.\n     -KEY-    -VALUE-\n     1    The\n     1.1    quick\n     1.2    brown\n     1.3    fox\n     1.4    jumped\n     1.5    over\n     1.6    the\n     1.7    lazy\n     1.8    dog\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.GetByIndex Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList\n        \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(1.3, &quot;fox&quot;)\n        mySL.Add(1.4, &quot;jumped&quot;)\n        mySL.Add(1.5, &quot;over&quot;)\n        mySL.Add(1.2, &quot;brown&quot;)\n        mySL.Add(1.1, &quot;quick&quot;)\n        mySL.Add(1.0, &quot;The&quot;)\n        mySL.Add(1.6, &quot;the&quot;)\n        mySL.Add(1.8, &quot;dog&quot;)\n        mySL.Add(1.7, &quot;lazy&quot;)\n        \n        &#39; Gets the key and the value based on the index.\n        Dim myIndex As Integer = 3\n        Console.WriteLine(&quot;The key   at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetKey(myIndex))\n        Console.WriteLine(&quot;The value at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetByIndex(myIndex))\n        \n        &#39; Gets the list of keys and the list of values.\n        Dim myKeyList As IList = mySL.GetKeyList()\n        Dim myValueList As IList = mySL.GetValueList()\n        \n        &#39; Prints the keys in the first column and the values in the second column.\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To mySL.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myKeyList(i), myValueList(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The key   at index 3 is 1.3.\n&#39; The value at index 3 is fox.\n&#39;     -KEY-    -VALUE-\n&#39;     1    The\n&#39;     1.1    quick\n&#39;     1.2    brown\n&#39;     1.3    fox\n&#39;     1.4    jumped\n&#39;     1.5    over\n&#39;     1.6    the\n&#39;     1.7    lazy\n&#39;     1.8    dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_GetKeyList\">\r\n    \r\n            <a id=\"System_Collections_SortedList_GetKeyList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetKeyList()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the keys in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IList GetKeyList ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object containing the keys in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object is a read-only view of the keys of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. Modifications made to the underlying <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> are immediately reflected in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.  </p>\n<p> The elements of the returned <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> are sorted in the same order as the keys of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> This method is similar to the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Keys_\" data-linktype=\"relative-path\">Keys</a> property, but returns an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object instead of an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to get one or all the keys or values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.GetByIndex Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 1.3, &quot;fox&quot; );\n   mySL-&gt;Add( 1.4, &quot;jumped&quot; );\n   mySL-&gt;Add( 1.5, &quot;over&quot; );\n   mySL-&gt;Add( 1.2, &quot;brown&quot; );\n   mySL-&gt;Add( 1.1, &quot;quick&quot; );\n   mySL-&gt;Add( 1.0, &quot;The&quot; );\n   mySL-&gt;Add( 1.6, &quot;the&quot; );\n   mySL-&gt;Add( 1.8, &quot;dog&quot; );\n   mySL-&gt;Add( 1.7, &quot;lazy&quot; );\n   \n   // Gets the key and the value based on the index.\n   int myIndex = 3;\n   Console::WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetKey( myIndex ) );\n   Console::WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetByIndex( myIndex ) );\n   \n   // Gets the list of keys and the list of values.\n   IList^ myKeyList = mySL-&gt;GetKeyList();\n   IList^ myValueList = mySL-&gt;GetValueList();\n   \n   // Prints the keys in the first column and the values in the second column.\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; mySL-&gt;Count; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[ i ], myValueList[ i ] );\n}\n\n/*\nThis code produces the following output.\n\nThe key   at index 3 is 1.3.\nThe value at index 3 is fox.\n        -KEY-   -VALUE-\n        1       The\n        1.1     quick\n        1.2     brown\n        1.3     fox\n        1.4     jumped\n        1.5     over\n        1.6     the\n        1.7     lazy\n        1.8     dog\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.GetByIndex Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 1.3, &quot;fox&quot; );\n       mySL.Add( 1.4, &quot;jumped&quot; );\n       mySL.Add( 1.5, &quot;over&quot; );\n       mySL.Add( 1.2, &quot;brown&quot; );\n       mySL.Add( 1.1, &quot;quick&quot; );\n       mySL.Add( 1.0, &quot;The&quot; );\n       mySL.Add( 1.6, &quot;the&quot; );\n       mySL.Add( 1.8, &quot;dog&quot; );\n       mySL.Add( 1.7, &quot;lazy&quot; );\n \n       // Gets the key and the value based on the index.\n       int myIndex=3;\n       Console.WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL.GetKey( myIndex ) );\n       Console.WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL.GetByIndex( myIndex ) );\n \n       // Gets the list of keys and the list of values.\n       IList myKeyList = mySL.GetKeyList();\n       IList myValueList = mySL.GetValueList();\n \n       // Prints the keys in the first column and the values in the second column.\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; mySL.Count; i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[i], myValueList[i] );\n    }\n }\n /* \n This code produces the following output.\n \n The key   at index 3 is 1.3.\n The value at index 3 is fox.\n     -KEY-    -VALUE-\n     1    The\n     1.1    quick\n     1.2    brown\n     1.3    fox\n     1.4    jumped\n     1.5    over\n     1.6    the\n     1.7    lazy\n     1.8    dog\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.GetByIndex Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList\n        \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(1.3, &quot;fox&quot;)\n        mySL.Add(1.4, &quot;jumped&quot;)\n        mySL.Add(1.5, &quot;over&quot;)\n        mySL.Add(1.2, &quot;brown&quot;)\n        mySL.Add(1.1, &quot;quick&quot;)\n        mySL.Add(1.0, &quot;The&quot;)\n        mySL.Add(1.6, &quot;the&quot;)\n        mySL.Add(1.8, &quot;dog&quot;)\n        mySL.Add(1.7, &quot;lazy&quot;)\n        \n        &#39; Gets the key and the value based on the index.\n        Dim myIndex As Integer = 3\n        Console.WriteLine(&quot;The key   at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetKey(myIndex))\n        Console.WriteLine(&quot;The value at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetByIndex(myIndex))\n        \n        &#39; Gets the list of keys and the list of values.\n        Dim myKeyList As IList = mySL.GetKeyList()\n        Dim myValueList As IList = mySL.GetValueList()\n        \n        &#39; Prints the keys in the first column and the values in the second column.\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To mySL.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myKeyList(i), myValueList(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The key   at index 3 is 1.3.\n&#39; The value at index 3 is fox.\n&#39;     -KEY-    -VALUE-\n&#39;     1    The\n&#39;     1.1    quick\n&#39;     1.2    brown\n&#39;     1.3    fox\n&#39;     1.4    jumped\n&#39;     1.5    over\n&#39;     1.6    the\n&#39;     1.7    lazy\n&#39;     1.8    dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_GetValueList\">\r\n    \r\n            <a id=\"System_Collections_SortedList_GetValueList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValueList()</div>        \r\n          </div>\r\n    \r\n            <p>Gets the values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IList GetValueList ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object containing the values in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object is a read-only view of the values of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. Modifications made to the underlying <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> are immediately reflected in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.  </p>\n<p> The elements of the returned <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> are sorted in the same order as the values of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> This method is similar to the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Values_\" data-linktype=\"relative-path\">Values</a> property, but returns an <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> object instead of an <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to get one or all the keys or values in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.GetByIndex Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 1.3, &quot;fox&quot; );\n   mySL-&gt;Add( 1.4, &quot;jumped&quot; );\n   mySL-&gt;Add( 1.5, &quot;over&quot; );\n   mySL-&gt;Add( 1.2, &quot;brown&quot; );\n   mySL-&gt;Add( 1.1, &quot;quick&quot; );\n   mySL-&gt;Add( 1.0, &quot;The&quot; );\n   mySL-&gt;Add( 1.6, &quot;the&quot; );\n   mySL-&gt;Add( 1.8, &quot;dog&quot; );\n   mySL-&gt;Add( 1.7, &quot;lazy&quot; );\n   \n   // Gets the key and the value based on the index.\n   int myIndex = 3;\n   Console::WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetKey( myIndex ) );\n   Console::WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL-&gt;GetByIndex( myIndex ) );\n   \n   // Gets the list of keys and the list of values.\n   IList^ myKeyList = mySL-&gt;GetKeyList();\n   IList^ myValueList = mySL-&gt;GetValueList();\n   \n   // Prints the keys in the first column and the values in the second column.\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; mySL-&gt;Count; i++ )\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[ i ], myValueList[ i ] );\n}\n\n/*\nThis code produces the following output.\n\nThe key   at index 3 is 1.3.\nThe value at index 3 is fox.\n        -KEY-   -VALUE-\n        1       The\n        1.1     quick\n        1.2     brown\n        1.3     fox\n        1.4     jumped\n        1.5     over\n        1.6     the\n        1.7     lazy\n        1.8     dog\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.GetByIndex Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 1.3, &quot;fox&quot; );\n       mySL.Add( 1.4, &quot;jumped&quot; );\n       mySL.Add( 1.5, &quot;over&quot; );\n       mySL.Add( 1.2, &quot;brown&quot; );\n       mySL.Add( 1.1, &quot;quick&quot; );\n       mySL.Add( 1.0, &quot;The&quot; );\n       mySL.Add( 1.6, &quot;the&quot; );\n       mySL.Add( 1.8, &quot;dog&quot; );\n       mySL.Add( 1.7, &quot;lazy&quot; );\n \n       // Gets the key and the value based on the index.\n       int myIndex=3;\n       Console.WriteLine( &quot;The key   at index {0} is {1}.&quot;, myIndex, mySL.GetKey( myIndex ) );\n       Console.WriteLine( &quot;The value at index {0} is {1}.&quot;, myIndex, mySL.GetByIndex( myIndex ) );\n \n       // Gets the list of keys and the list of values.\n       IList myKeyList = mySL.GetKeyList();\n       IList myValueList = mySL.GetValueList();\n \n       // Prints the keys in the first column and the values in the second column.\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; mySL.Count; i++ )\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myKeyList[i], myValueList[i] );\n    }\n }\n /* \n This code produces the following output.\n \n The key   at index 3 is 1.3.\n The value at index 3 is fox.\n     -KEY-    -VALUE-\n     1    The\n     1.1    quick\n     1.2    brown\n     1.3    fox\n     1.4    jumped\n     1.5    over\n     1.6    the\n     1.7    lazy\n     1.8    dog\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.GetByIndex Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList\n        \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(1.3, &quot;fox&quot;)\n        mySL.Add(1.4, &quot;jumped&quot;)\n        mySL.Add(1.5, &quot;over&quot;)\n        mySL.Add(1.2, &quot;brown&quot;)\n        mySL.Add(1.1, &quot;quick&quot;)\n        mySL.Add(1.0, &quot;The&quot;)\n        mySL.Add(1.6, &quot;the&quot;)\n        mySL.Add(1.8, &quot;dog&quot;)\n        mySL.Add(1.7, &quot;lazy&quot;)\n        \n        &#39; Gets the key and the value based on the index.\n        Dim myIndex As Integer = 3\n        Console.WriteLine(&quot;The key   at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetKey(myIndex))\n        Console.WriteLine(&quot;The value at index {0} is {1}.&quot;, myIndex, _\n           mySL.GetByIndex(myIndex))\n        \n        &#39; Gets the list of keys and the list of values.\n        Dim myKeyList As IList = mySL.GetKeyList()\n        Dim myValueList As IList = mySL.GetValueList()\n        \n        &#39; Prints the keys in the first column and the values in the second column.\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To mySL.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myKeyList(i), myValueList(i))\n        Next i\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The key   at index 3 is 1.3.\n&#39; The value at index 3 is fox.\n&#39;     -KEY-    -VALUE-\n&#39;     1    The\n&#39;     1.1    quick\n&#39;     1.2    brown\n&#39;     1.3    fox\n&#39;     1.4    jumped\n&#39;     1.5    over\n&#39;     1.6    the\n&#39;     1.7    lazy\n&#39;     1.8    dog\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_IndexOfKey_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_IndexOfKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfKey(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the zero-based index of the specified key in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOfKey (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key to locate in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the <code>key</code> parameter, if <code>key</code> is found in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The comparer throws an exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object are sorted by the keys either according to a specific <a class=\"xref\" href=\"system.collections.icomparer\" data-linktype=\"relative-path\">IComparer</a> implementation specified when the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is created, or according to the <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a> implementation provided by the keys themselves.  </p>\n<p> The index sequence is based on the sort sequence. When an element is added, it is inserted into <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<p> This method uses a binary search algorithm; therefore, this method is an O(log <code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of a key or a value in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IndexOfKey Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   mySL-&gt;Add( 0, &quot;zero&quot; );\n   \n   // Displays the values of the SortedList.\n   Console::WriteLine( &quot;The SortedList contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is at index {1}.&quot;, myKey, mySL-&gt;IndexOfKey( myKey ) );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is at index {1}.&quot;, myValue, mySL-&gt;IndexOfValue( myValue ) );\n}\n\n/*\nThis code produces the following output.\n\nThe SortedList contains the following values:\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       three\n        [4]:    4       four\n\nThe key &quot;2&quot; is at index 2.\nThe value &quot;three&quot; is at index 3.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IndexOfKey Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        \n        &#39; Displays the values of the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the &quot; &amp; _\n           &quot;following values:&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n        \n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myKey, _\n           mySL.IndexOfKey(myKey))\n        \n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myValue, _\n           mySL.IndexOfValue(myValue))\n    End Sub    \n    \n    \n    Public Shared Sub PrintIndexAndKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-INDEX-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;[{0}]:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot; &amp; ControlChars.Tab &amp; &quot;{2}&quot;, i, myList.GetKey(i), _\n               myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following values:\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    three\n&#39;     [4]:    4    four\n&#39;\n&#39; The key &quot;2&quot; is at index 2.\n&#39; The value &quot;three&quot; is at index 3.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IndexOfKey Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n \n       // Displays the values of the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is at index {1}.&quot;, myKey, mySL.IndexOfKey( myKey ) );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is at index {1}.&quot;, myValue, mySL.IndexOfValue( myValue ) );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following values:\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    three\n     [4]:    4    four\n \n The key &quot;2&quot; is at index 2.\n The value &quot;three&quot; is at index 3.\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_IndexOfValue_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_IndexOfValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOfValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the zero-based index of the first occurrence of the specified value in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int IndexOfValue (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to locate in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of the <code>value</code> parameter, if <code>value</code> is found in the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> The values of the elements of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> are compared to the specified value using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> This method uses a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to determine the index of a key or a value in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IndexOfKey Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   mySL-&gt;Add( 0, &quot;zero&quot; );\n   \n   // Displays the values of the SortedList.\n   Console::WriteLine( &quot;The SortedList contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n   \n   // Searches for a specific key.\n   int myKey = 2;\n   Console::WriteLine( &quot;The key \\&quot;{0}\\&quot; is at index {1}.&quot;, myKey, mySL-&gt;IndexOfKey( myKey ) );\n   \n   // Searches for a specific value.\n   String^ myValue = &quot;three&quot;;\n   Console::WriteLine( &quot;The value \\&quot;{0}\\&quot; is at index {1}.&quot;, myValue, mySL-&gt;IndexOfValue( myValue ) );\n}\n\n/*\nThis code produces the following output.\n\nThe SortedList contains the following values:\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       three\n        [4]:    4       four\n\nThe key &quot;2&quot; is at index 2.\nThe value &quot;three&quot; is at index 3.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IndexOfKey Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        \n        &#39; Displays the values of the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the &quot; &amp; _\n           &quot;following values:&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n        \n        &#39; Searches for a specific key.\n        Dim myKey As Integer = 2\n        Console.WriteLine(&quot;The key &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myKey, _\n           mySL.IndexOfKey(myKey))\n        \n        &#39; Searches for a specific value.\n        Dim myValue As String = &quot;three&quot;\n        Console.WriteLine(&quot;The value &quot;&quot;{0}&quot;&quot; is at index {1}.&quot;, myValue, _\n           mySL.IndexOfValue(myValue))\n    End Sub    \n    \n    \n    Public Shared Sub PrintIndexAndKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-INDEX-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;[{0}]:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot; &amp; ControlChars.Tab &amp; &quot;{2}&quot;, i, myList.GetKey(i), _\n               myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following values:\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    three\n&#39;     [4]:    4    four\n&#39;\n&#39; The key &quot;2&quot; is at index 2.\n&#39; The value &quot;three&quot; is at index 3.\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IndexOfKey Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n \n       // Displays the values of the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n \n       // Searches for a specific key.\n       int myKey = 2;\n       Console.WriteLine( &quot;The key \\&quot;{0}\\&quot; is at index {1}.&quot;, myKey, mySL.IndexOfKey( myKey ) );\n \n       // Searches for a specific value.\n       String myValue = &quot;three&quot;;\n       Console.WriteLine( &quot;The value \\&quot;{0}\\&quot; is at index {1}.&quot;, myValue, mySL.IndexOfValue( myValue ) );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following values:\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    three\n     [4]:    4    four\n \n The key &quot;2&quot; is at index 2.\n The value &quot;three&quot; is at index 3.\n */ \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element with the specified key from a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Remove (object key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>key</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object does not contain an element with the specified key, the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> remains unchanged. No exception is thrown.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to remove elements from a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic SortedList.RemoveAt Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( &quot;3c&quot;, &quot;dog&quot; );\n       mySL.Add( &quot;2c&quot;, &quot;over&quot; );\n       mySL.Add( &quot;1c&quot;, &quot;brown&quot; );\n       mySL.Add( &quot;1a&quot;, &quot;The&quot; );\n       mySL.Add( &quot;1b&quot;, &quot;quick&quot; );\n       mySL.Add( &quot;3a&quot;, &quot;the&quot; );\n       mySL.Add( &quot;3b&quot;, &quot;lazy&quot; );\n       mySL.Add( &quot;2a&quot;, &quot;fox&quot; );\n       mySL.Add( &quot;2b&quot;, &quot;jumped&quot; );\n \n       // Displays the SortedList.\n       Console.WriteLine( &quot;The SortedList initially contains the following:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Removes the element with the key &quot;3b&quot;.\n       mySL.Remove( &quot;3b&quot; );\n \n       // Displays the current state of the SortedList.\n       Console.WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Removes the element at index 5.\n       mySL.RemoveAt( 5 );\n \n       // Displays the current state of the SortedList.\n       Console.WriteLine( &quot;After removing the element at index 5:&quot; );\n       PrintKeysAndValues( mySL );\n    }\n \n \n    public static void PrintKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList initially contains the following:\n     -KEY-    -VALUE-\n     1a:    The\n     1b:    quick\n     1c:    brown\n     2a:    fox\n     2b:    jumped\n     2c:    over\n     3a:    the\n     3b:    lazy\n     3c:    dog\n \n After removing &quot;lazy&quot;:\n     -KEY-    -VALUE-\n     1a:    The\n     1b:    quick\n     1c:    brown\n     2a:    fox\n     2b:    jumped\n     2c:    over\n     3a:    the\n     3c:    dog\n \n After removing the element at index 5:\n     -KEY-    -VALUE-\n     1a:    The\n     1b:    quick\n     1c:    brown\n     2a:    fox\n     2b:    jumped\n     3a:    the\n     3c:    dog\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.RemoveAt Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( &quot;3c&quot;, &quot;dog&quot; );\n   mySL-&gt;Add( &quot;2c&quot;, &quot;over&quot; );\n   mySL-&gt;Add( &quot;1c&quot;, &quot;brown&quot; );\n   mySL-&gt;Add( &quot;1a&quot;, &quot;The&quot; );\n   mySL-&gt;Add( &quot;1b&quot;, &quot;quick&quot; );\n   mySL-&gt;Add( &quot;3a&quot;, &quot;the&quot; );\n   mySL-&gt;Add( &quot;3b&quot;, &quot;lazy&quot; );\n   mySL-&gt;Add( &quot;2a&quot;, &quot;fox&quot; );\n   mySL-&gt;Add( &quot;2b&quot;, &quot;jumped&quot; );\n   \n   // Displays the SortedList.\n   Console::WriteLine( &quot;The SortedList initially contains the following:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Removes the element with the key &quot;3b&quot;.\n   mySL-&gt;Remove( &quot;3b&quot; );\n   \n   // Displays the current state of the SortedList.\n   Console::WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Removes the element at index 5.\n   mySL-&gt;RemoveAt( 5 );\n   \n   // Displays the current state of the SortedList.\n   Console::WriteLine( &quot;After removing the element at index 5:&quot; );\n   PrintKeysAndValues( mySL );\n}\n\n/*\nThis code produces the following output.\n\nThe SortedList initially contains the following:\n        -KEY-   -VALUE-\n        1a:     The\n        1b:     quick\n        1c:     brown\n        2a:     fox\n        2b:     jumped\n        2c:     over\n        3a:     the\n        3b:     lazy\n        3c:     dog\n\nAfter removing &quot;lazy&quot;:\n        -KEY-   -VALUE-\n        1a:     The\n        1b:     quick\n        1c:     brown\n        2a:     fox\n        2b:     jumped\n        2c:     over\n        3a:     the\n        3c:     dog\n\nAfter removing the element at index 5:\n        -KEY-   -VALUE-\n        1a:     The\n        1b:     quick\n        1c:     brown\n        2a:     fox\n        2b:     jumped\n        3a:     the\n        3c:     dog\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.RemoveAt Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(&quot;3c&quot;, &quot;dog&quot;)\n        mySL.Add(&quot;2c&quot;, &quot;over&quot;)\n        mySL.Add(&quot;1c&quot;, &quot;brown&quot;)\n        mySL.Add(&quot;1a&quot;, &quot;The&quot;)\n        mySL.Add(&quot;1b&quot;, &quot;quick&quot;)\n        mySL.Add(&quot;3a&quot;, &quot;the&quot;)\n        mySL.Add(&quot;3b&quot;, &quot;lazy&quot;)\n        mySL.Add(&quot;2a&quot;, &quot;fox&quot;)\n        mySL.Add(&quot;2b&quot;, &quot;jumped&quot;)\n        \n        &#39; Displays the SortedList.\n        Console.WriteLine(&quot;The SortedList initially contains the following:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Removes the element with the key &quot;3b&quot;.\n        mySL.Remove(&quot;3b&quot;)\n        \n        &#39; Displays the current state of the SortedList.\n        Console.WriteLine(&quot;After removing &quot;&quot;lazy&quot;&quot;:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Removes the element at index 5.\n        mySL.RemoveAt(5)\n        \n        &#39; Displays the current state of the SortedList.\n        Console.WriteLine(&quot;After removing the element at index 5:&quot;)\n        PrintKeysAndValues(mySL)\n    End Sub\n    \n    \n    Public Shared Sub PrintKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList initially contains the following:\n&#39;     -KEY-    -VALUE-\n&#39;     1a:    The\n&#39;     1b:    quick\n&#39;     1c:    brown\n&#39;     2a:    fox\n&#39;     2b:    jumped\n&#39;     2c:    over\n&#39;     3a:    the\n&#39;     3b:    lazy\n&#39;     3c:    dog\n&#39; \n&#39; After removing &quot;lazy&quot;:\n&#39;     -KEY-    -VALUE-\n&#39;     1a:    The\n&#39;     1b:    quick\n&#39;     1c:    brown\n&#39;     2a:    fox\n&#39;     2b:    jumped\n&#39;     2c:    over\n&#39;     3a:    the\n&#39;     3c:    dog\n&#39; \n&#39; After removing the element at index 5:\n&#39;     -KEY-    -VALUE-\n&#39;     1a:    The\n&#39;     1b:    quick\n&#39;     1c:    brown\n&#39;     2a:    fox\n&#39;     2b:    jumped\n&#39;     3a:    the\n&#39;     3c:    dog \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to remove elements from a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic SortedList.RemoveAt Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( &quot;3c&quot;, &quot;dog&quot; );\n       mySL.Add( &quot;2c&quot;, &quot;over&quot; );\n       mySL.Add( &quot;1c&quot;, &quot;brown&quot; );\n       mySL.Add( &quot;1a&quot;, &quot;The&quot; );\n       mySL.Add( &quot;1b&quot;, &quot;quick&quot; );\n       mySL.Add( &quot;3a&quot;, &quot;the&quot; );\n       mySL.Add( &quot;3b&quot;, &quot;lazy&quot; );\n       mySL.Add( &quot;2a&quot;, &quot;fox&quot; );\n       mySL.Add( &quot;2b&quot;, &quot;jumped&quot; );\n \n       // Displays the SortedList.\n       Console.WriteLine( &quot;The SortedList initially contains the following:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Removes the element with the key &quot;3b&quot;.\n       mySL.Remove( &quot;3b&quot; );\n \n       // Displays the current state of the SortedList.\n       Console.WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Removes the element at index 5.\n       mySL.RemoveAt( 5 );\n \n       // Displays the current state of the SortedList.\n       Console.WriteLine( &quot;After removing the element at index 5:&quot; );\n       PrintKeysAndValues( mySL );\n    }\n \n \n    public static void PrintKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList initially contains the following:\n     -KEY-    -VALUE-\n     1a:    The\n     1b:    quick\n     1c:    brown\n     2a:    fox\n     2b:    jumped\n     2c:    over\n     3a:    the\n     3b:    lazy\n     3c:    dog\n \n After removing &quot;lazy&quot;:\n     -KEY-    -VALUE-\n     1a:    The\n     1b:    quick\n     1c:    brown\n     2a:    fox\n     2b:    jumped\n     2c:    over\n     3a:    the\n     3c:    dog\n \n After removing the element at index 5:\n     -KEY-    -VALUE-\n     1a:    The\n     1b:    quick\n     1c:    brown\n     2a:    fox\n     2b:    jumped\n     3a:    the\n     3c:    dog\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.RemoveAt Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( &quot;3c&quot;, &quot;dog&quot; );\n   mySL-&gt;Add( &quot;2c&quot;, &quot;over&quot; );\n   mySL-&gt;Add( &quot;1c&quot;, &quot;brown&quot; );\n   mySL-&gt;Add( &quot;1a&quot;, &quot;The&quot; );\n   mySL-&gt;Add( &quot;1b&quot;, &quot;quick&quot; );\n   mySL-&gt;Add( &quot;3a&quot;, &quot;the&quot; );\n   mySL-&gt;Add( &quot;3b&quot;, &quot;lazy&quot; );\n   mySL-&gt;Add( &quot;2a&quot;, &quot;fox&quot; );\n   mySL-&gt;Add( &quot;2b&quot;, &quot;jumped&quot; );\n   \n   // Displays the SortedList.\n   Console::WriteLine( &quot;The SortedList initially contains the following:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Removes the element with the key &quot;3b&quot;.\n   mySL-&gt;Remove( &quot;3b&quot; );\n   \n   // Displays the current state of the SortedList.\n   Console::WriteLine( &quot;After removing \\&quot;lazy\\&quot;:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Removes the element at index 5.\n   mySL-&gt;RemoveAt( 5 );\n   \n   // Displays the current state of the SortedList.\n   Console::WriteLine( &quot;After removing the element at index 5:&quot; );\n   PrintKeysAndValues( mySL );\n}\n\n/*\nThis code produces the following output.\n\nThe SortedList initially contains the following:\n        -KEY-   -VALUE-\n        1a:     The\n        1b:     quick\n        1c:     brown\n        2a:     fox\n        2b:     jumped\n        2c:     over\n        3a:     the\n        3b:     lazy\n        3c:     dog\n\nAfter removing &quot;lazy&quot;:\n        -KEY-   -VALUE-\n        1a:     The\n        1b:     quick\n        1c:     brown\n        2a:     fox\n        2b:     jumped\n        2c:     over\n        3a:     the\n        3c:     dog\n\nAfter removing the element at index 5:\n        -KEY-   -VALUE-\n        1a:     The\n        1b:     quick\n        1c:     brown\n        2a:     fox\n        2b:     jumped\n        3a:     the\n        3c:     dog\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.RemoveAt Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(&quot;3c&quot;, &quot;dog&quot;)\n        mySL.Add(&quot;2c&quot;, &quot;over&quot;)\n        mySL.Add(&quot;1c&quot;, &quot;brown&quot;)\n        mySL.Add(&quot;1a&quot;, &quot;The&quot;)\n        mySL.Add(&quot;1b&quot;, &quot;quick&quot;)\n        mySL.Add(&quot;3a&quot;, &quot;the&quot;)\n        mySL.Add(&quot;3b&quot;, &quot;lazy&quot;)\n        mySL.Add(&quot;2a&quot;, &quot;fox&quot;)\n        mySL.Add(&quot;2b&quot;, &quot;jumped&quot;)\n        \n        &#39; Displays the SortedList.\n        Console.WriteLine(&quot;The SortedList initially contains the following:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Removes the element with the key &quot;3b&quot;.\n        mySL.Remove(&quot;3b&quot;)\n        \n        &#39; Displays the current state of the SortedList.\n        Console.WriteLine(&quot;After removing &quot;&quot;lazy&quot;&quot;:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Removes the element at index 5.\n        mySL.RemoveAt(5)\n        \n        &#39; Displays the current state of the SortedList.\n        Console.WriteLine(&quot;After removing the element at index 5:&quot;)\n        PrintKeysAndValues(mySL)\n    End Sub\n    \n    \n    Public Shared Sub PrintKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList initially contains the following:\n&#39;     -KEY-    -VALUE-\n&#39;     1a:    The\n&#39;     1b:    quick\n&#39;     1c:    brown\n&#39;     2a:    fox\n&#39;     2b:    jumped\n&#39;     2c:    over\n&#39;     3a:    the\n&#39;     3b:    lazy\n&#39;     3c:    dog\n&#39; \n&#39; After removing &quot;lazy&quot;:\n&#39;     -KEY-    -VALUE-\n&#39;     1a:    The\n&#39;     1b:    quick\n&#39;     1c:    brown\n&#39;     2a:    fox\n&#39;     2b:    jumped\n&#39;     2c:    over\n&#39;     3a:    the\n&#39;     3c:    dog\n&#39; \n&#39; After removing the element at index 5:\n&#39;     -KEY-    -VALUE-\n&#39;     1a:    The\n&#39;     1b:    quick\n&#39;     1c:    brown\n&#39;     2a:    fox\n&#39;     2b:    jumped\n&#39;     3a:    the\n&#39;     3c:    dog \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_SetByIndex_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_SetByIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetByIndex(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the value at a specific index in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void SetByIndex (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which to save <code>value</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to save into the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object. The value can be <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is outside the range of valid indexes for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to replace the value of an existing element in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic SortedList.SetByIndex Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        \n        &#39; Displays the values of the SortedList.\n        Console.WriteLine(&quot;The SortedList contains the following&quot; &amp; _\n           &quot;values:&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n        \n        &#39; Replaces the values at index 3 and index 4.\n        mySL.SetByIndex(3, &quot;III&quot;)\n        mySL.SetByIndex(4, &quot;IV&quot;)\n        \n        &#39; Displays the updated values of the SortedList.\n        Console.WriteLine(&quot;After replacing the value at index 3 and index 4,&quot;)\n        PrintIndexAndKeysAndValues(mySL)\n    End Sub &#39;Main\n    \n    \n    \n    Public Shared Sub PrintIndexAndKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-INDEX-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;[{0}]:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot; &amp; ControlChars.Tab &amp; &quot;{2}&quot;, i, myList.GetKey(i), _\n               myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; The SortedList contains the following values:\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    three\n&#39;     [4]:    4    four\n&#39; \n&#39; After replacing the value at index 3 and index 4,\n&#39;     -INDEX-    -KEY-    -VALUE-\n&#39;     [0]:    0    zero\n&#39;     [1]:    1    one\n&#39;     [2]:    2    two\n&#39;     [3]:    3    III\n&#39;     [4]:    4    IV\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.SetByIndex Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n \n       // Displays the values of the SortedList.\n       Console.WriteLine( &quot;The SortedList contains the following values:&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n \n       // Replaces the values at index 3 and index 4.\n       mySL.SetByIndex( 3, &quot;III&quot; );\n       mySL.SetByIndex( 4, &quot;IV&quot; );\n \n       // Displays the updated values of the SortedList.\n       Console.WriteLine( &quot;After replacing the value at index 3 and index 4,&quot; );\n       PrintIndexAndKeysAndValues( mySL );\n    }\n \n \n    public static void PrintIndexAndKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n The SortedList contains the following values:\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    three\n     [4]:    4    four\n \n After replacing the value at index 3 and index 4,\n     -INDEX-    -KEY-    -VALUE-\n     [0]:    0    zero\n     [1]:    1    one\n     [2]:    2    two\n     [3]:    3    III\n     [4]:    4    IV\n */ \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic SortedList.SetByIndex Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintIndexAndKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-INDEX-&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;[{0}]:&nbsp;&nbsp;&nbsp;&nbsp;{1}&nbsp;&nbsp;&nbsp;&nbsp;{2}&quot;, i, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( 0, &quot;zero&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   \n   // Displays the values of the SortedList.\n   Console::WriteLine( &quot;The SortedList contains the following values:&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n   \n   // Replaces the values at index 3 and index 4.\n   mySL-&gt;SetByIndex( 3, &quot;III&quot; );\n   mySL-&gt;SetByIndex( 4, &quot;IV&quot; );\n   \n   // Displays the updated values of the SortedList.\n   Console::WriteLine( &quot;After replacing the value at index 3 and index 4,&quot; );\n   PrintIndexAndKeysAndValues( mySL );\n}\n\n/*\nThis code produces the following output.\n\nThe SortedList contains the following values:\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       three\n        [4]:    4       four\n\nAfter replacing the value at index 3 and index 4,\n        -INDEX- -KEY-   -VALUE-\n        [0]:    0       zero\n        [1]:    1       one\n        [2]:    2       two\n        [3]:    3       III\n        [4]:    4       IV\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_Synchronized_System_Collections_SortedList_\">\r\n    \r\n            <a id=\"System_Collections_SortedList_Synchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Synchronized(SortedList)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a synchronized (thread-safe) wrapper for a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object to synchronize.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a></div>\r\n                  </div>\r\n                  <p>A synchronized (thread-safe) wrapper for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To guarantee the thread safety of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, all operations must be done through this wrapper only.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IsSynchronized Example#2\">        SortedList^ myCollection = gcnew SortedList();\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IsSynchronized Example#2\">        SortedList myCollection = new SortedList();\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IsSynchronized Example#2\">        Dim myCollection As New SortedList()\n        SyncLock myCollection.SyncRoot\n            For Each item In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> This method is an O(1) operation.  </p>\n<p> The following code example shows how to synchronize a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object, determine whether a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> is synchronized, and use a synchronized <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.IsSynchronized Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( 2, &quot;two&quot; );\n   mySL-&gt;Add( 3, &quot;three&quot; );\n   mySL-&gt;Add( 1, &quot;one&quot; );\n   mySL-&gt;Add( (int^)0, &quot;zero&quot; );\n   mySL-&gt;Add( 4, &quot;four&quot; );\n   \n   // Creates a synchronized wrapper around the SortedList.\n   SortedList^ mySyncdSL = SortedList::Synchronized( mySL );\n   \n   // Displays the sychronization status of both SortedLists.\n   Console::WriteLine( &quot;mySL is {0}.&quot;, mySL-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n   Console::WriteLine( &quot;mySyncdSL is {0}.&quot;, mySyncdSL-&gt;IsSynchronized ? (String^)&quot;synchronized&quot; : &quot;not synchronized&quot; );\n}\n\n/*\nThis code produces the following output.\n\nmySL is not synchronized.\nmySyncdSL is synchronized.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.IsSynchronized Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( 2, &quot;two&quot; );\n       mySL.Add( 3, &quot;three&quot; );\n       mySL.Add( 1, &quot;one&quot; );\n       mySL.Add( 0, &quot;zero&quot; );\n       mySL.Add( 4, &quot;four&quot; );\n \n       // Creates a synchronized wrapper around the SortedList.\n       SortedList mySyncdSL = SortedList.Synchronized( mySL );\n \n       // Displays the sychronization status of both SortedLists.\n       Console.WriteLine( &quot;mySL is {0}.&quot;, mySL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n       Console.WriteLine( &quot;mySyncdSL is {0}.&quot;, mySyncdSL.IsSynchronized ? &quot;synchronized&quot; : &quot;not synchronized&quot; );\n    }\n }\n /* \n This code produces the following output.\n \n mySL is not synchronized.\n mySyncdSL is synchronized.\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.IsSynchronized Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList\n    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(2, &quot;two&quot;)\n        mySL.Add(3, &quot;three&quot;)\n        mySL.Add(1, &quot;one&quot;)\n        mySL.Add(0, &quot;zero&quot;)\n        mySL.Add(4, &quot;four&quot;)\n        \n        &#39; Creates a synchronized wrapper around the SortedList.\n        Dim mySyncdSL As SortedList = SortedList.Synchronized(mySL)\n        \n        &#39; Displays the sychronization status of both SortedLists.\n        Dim msg As String\n        If mySL.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySL is {0}.&quot;, msg)\n        If mySyncdSL.IsSynchronized Then\n            msg = &quot;synchronized&quot;\n        Else\n            msg = &quot;not synchronized&quot;\n        End If\n        Console.WriteLine(&quot;mySyncdSL is {0}.&quot;, msg)        \n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39;\n&#39; mySL is not synchronized.\n&#39; mySyncdSL is synchronized.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_TrimToSize\">\r\n    \r\n            <a id=\"System_Collections_SortedList_TrimToSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimToSize()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity to the actual number of elements in a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void TrimToSize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to minimize a collection&#39;s memory overhead if no new elements will be added to the collection.  </p>\n<p> To reset a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object to its initial state, call the <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Clear_\" data-linktype=\"relative-path\">Clear</a> method before calling TrimToSize. Trimming an empty <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.sortedlist#System_Collections_SortedList_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to trim the unused portions of a <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a> object and how to clear its values.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SortedList.Clear Example#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nvoid PrintKeysAndValues( SortedList^ myList )\n{\n   Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n   for ( int i = 0; i &lt; myList-&gt;Count; i++ )\n   {\n      Console::WriteLine(  &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList-&gt;GetKey( i ), myList-&gt;GetByIndex( i ) );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   \n   // Creates and initializes a new SortedList.\n   SortedList^ mySL = gcnew SortedList;\n   mySL-&gt;Add( &quot;one&quot;, &quot;The&quot; );\n   mySL-&gt;Add( &quot;two&quot;, &quot;quick&quot; );\n   mySL-&gt;Add( &quot;three&quot;, &quot;brown&quot; );\n   mySL-&gt;Add( &quot;four&quot;, &quot;fox&quot; );\n   mySL-&gt;Add( &quot;five&quot;, &quot;jumped&quot; );\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;Initially,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Trims the SortedList.\n   mySL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;After TrimToSize,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Clears the SortedList.\n   mySL-&gt;Clear();\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;After Clear,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n   \n   // Trims the SortedList again.\n   mySL-&gt;TrimToSize();\n   \n   // Displays the count, capacity and values of the SortedList.\n   Console::WriteLine(  &quot;After the second TrimToSize,&quot; );\n   Console::WriteLine(  &quot;   Count    : {0}&quot;, mySL-&gt;Count );\n   Console::WriteLine(  &quot;   Capacity : {0}&quot;, mySL-&gt;Capacity );\n   Console::WriteLine(  &quot;   Values:&quot; );\n   PrintKeysAndValues( mySL );\n}\n\n/* \nThis code produces the following output.\n\nInitially,\n   Count    : 5\n   Capacity : 16\n   Values:\n        -KEY-   -VALUE-\n        five:   jumped\n        four:   fox\n        one:    The\n        three:  brown\n        two:    quick\n\nAfter TrimToSize,\n   Count    : 5\n   Capacity : 5\n   Values:\n        -KEY-   -VALUE-\n        five:   jumped\n        four:   fox\n        one:    The\n        three:  brown\n        two:    quick\n\nAfter Clear,\n   Count    : 0\n   Capacity : 16\n   Values:\n        -KEY-   -VALUE-\n\nAfter the second TrimToSize,\n   Count    : 0\n   Capacity : 16\n   Values:\n        -KEY-   -VALUE-\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SortedList.Clear Example#1\"> using System;\n using System.Collections;\n public class SamplesSortedList  {\n \n    public static void Main()  {\n \n       // Creates and initializes a new SortedList.\n       SortedList mySL = new SortedList();\n       mySL.Add( &quot;one&quot;, &quot;The&quot; );\n       mySL.Add( &quot;two&quot;, &quot;quick&quot; );\n       mySL.Add( &quot;three&quot;, &quot;brown&quot; );\n       mySL.Add( &quot;four&quot;, &quot;fox&quot; );\n       mySL.Add( &quot;five&quot;, &quot;jumped&quot; );\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;Initially,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Trims the SortedList.\n       mySL.TrimToSize();\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;After TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Clears the SortedList.\n       mySL.Clear();\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;After Clear,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n \n       // Trims the SortedList again.\n       mySL.TrimToSize();\n \n       // Displays the count, capacity and values of the SortedList.\n       Console.WriteLine( &quot;After the second TrimToSize,&quot; );\n       Console.WriteLine( &quot;   Count    : {0}&quot;, mySL.Count );\n       Console.WriteLine( &quot;   Capacity : {0}&quot;, mySL.Capacity );\n       Console.WriteLine( &quot;   Values:&quot; );\n       PrintKeysAndValues( mySL );\n    }\n \n \n    public static void PrintKeysAndValues( SortedList myList )  {\n       Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;-KEY-&nbsp;&nbsp;&nbsp;&nbsp;-VALUE-&quot; );\n       for ( int i = 0; i &lt; myList.Count; i++ )  {\n          Console.WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}:&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i) );\n       }\n       Console.WriteLine();\n    }\n }\n /* \n This code produces the following output.\n \n Initially,\n    Count    : 5\n    Capacity : 16\n    Values:\n     -KEY-    -VALUE-\n     five:    jumped\n     four:    fox\n     one:    The\n     three:    brown\n     two:    quick\n \n After TrimToSize,\n    Count    : 5\n    Capacity : 5\n    Values:\n     -KEY-    -VALUE-\n     five:    jumped\n     four:    fox\n     one:    The\n     three:    brown\n     two:    quick\n \n After Clear,\n    Count    : 0\n    Capacity : 16\n    Values:\n     -KEY-    -VALUE-\n \n After the second TrimToSize,\n    Count    : 0\n    Capacity : 16\n    Values:\n     -KEY-    -VALUE-\n */ \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SortedList.Clear Example#1\">Imports System\nImports System.Collections\nImports Microsoft.VisualBasic\n\nPublic Class SamplesSortedList    \n    \n    Public Shared Sub Main()\n        \n        &#39; Creates and initializes a new SortedList.\n        Dim mySL As New SortedList()\n        mySL.Add(&quot;one&quot;, &quot;The&quot;)\n        mySL.Add(&quot;two&quot;, &quot;quick&quot;)\n        mySL.Add(&quot;three&quot;, &quot;brown&quot;)\n        mySL.Add(&quot;four&quot;, &quot;fox&quot;)\n        mySL.Add(&quot;five&quot;, &quot;jumped&quot;)\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;Initially,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Trims the SortedList.\n        mySL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;After TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Clears the SortedList.\n        mySL.Clear()\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;After Clear,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n        \n        &#39; Trims the SortedList again.\n        mySL.TrimToSize()\n        \n        &#39; Displays the count, capacity and values of the SortedList.\n        Console.WriteLine(&quot;After the second TrimToSize,&quot;)\n        Console.WriteLine(&quot;   Count    : {0}&quot;, mySL.Count)\n        Console.WriteLine(&quot;   Capacity : {0}&quot;, mySL.Capacity)\n        Console.WriteLine(&quot;   Values:&quot;)\n        PrintKeysAndValues(mySL)\n    End Sub   \n    \n    \n    Public Shared Sub PrintKeysAndValues(myList As SortedList)\n        Console.WriteLine(ControlChars.Tab &amp; &quot;-KEY-&quot; &amp; ControlChars.Tab &amp; _\n           &quot;-VALUE-&quot;)\n        Dim i As Integer\n        For i = 0 To myList.Count - 1\n            Console.WriteLine(ControlChars.Tab &amp; &quot;{0}:&quot; &amp; ControlChars.Tab &amp; _\n               &quot;{1}&quot;, myList.GetKey(i), myList.GetByIndex(i))\n        Next i\n        Console.WriteLine()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output.\n&#39; \n&#39; Initially,\n&#39;    Count    : 5\n&#39;    Capacity : 16\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n&#39;     five:    jumped\n&#39;     four:    fox\n&#39;     one:    The\n&#39;     three:    brown\n&#39;     two:    quick\n&#39;\n&#39; After TrimToSize,\n&#39;    Count    : 5\n&#39;    Capacity : 5\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n&#39;     five:    jumped\n&#39;     four:    fox\n&#39;     one:    The\n&#39;     three:    brown\n&#39;     two:    quick\n&#39; \n&#39; After Clear,\n&#39;    Count    : 0\n&#39;    Capacity : 16\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n&#39; \n&#39;\n&#39; After the second TrimToSize,\n&#39;    Count    : 0\n&#39;    Capacity : 16\n&#39;    Values:\n&#39;     -KEY-    -VALUE-\n \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_SortedList_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_SortedList_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates through the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.sortedlist\" data-linktype=\"relative-path\">SortedList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position. At this position, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, calling <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> throws an exception. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> throws an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>. If the collection is modified between <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the element that it is set to, even if the enumerator is already invalidated.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.SortedList.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.SortedList.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Capacity\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Clone\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.ContainsKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.ContainsValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.GetByIndex\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.GetKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.GetKeyList\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.GetValueList\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.IndexOfKey\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.IndexOfValue\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Keys\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.SetByIndex\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Synchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.TrimToSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.SortedList.Values\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6a084267-9890-9fed-488e-0a84c0cbca76\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.SortedList\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.SortedList.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.SortedList.yml","open_to_public_contributors":true,"api_name":["System.Collections.SortedList","System.Collections.SortedList..ctor","System.Collections.SortedList.Add","System.Collections.SortedList.Capacity","System.Collections.SortedList.Clear","System.Collections.SortedList.Clone","System.Collections.SortedList.Contains","System.Collections.SortedList.ContainsKey","System.Collections.SortedList.ContainsValue","System.Collections.SortedList.CopyTo","System.Collections.SortedList.Count","System.Collections.SortedList.GetByIndex","System.Collections.SortedList.GetEnumerator","System.Collections.SortedList.GetKey","System.Collections.SortedList.GetKeyList","System.Collections.SortedList.GetValueList","System.Collections.SortedList.IndexOfKey","System.Collections.SortedList.IndexOfValue","System.Collections.SortedList.IsFixedSize","System.Collections.SortedList.IsReadOnly","System.Collections.SortedList.IsSynchronized","System.Collections.SortedList.Item","System.Collections.SortedList.Keys","System.Collections.SortedList.Remove","System.Collections.SortedList.RemoveAt","System.Collections.SortedList.SetByIndex","System.Collections.SortedList.Synchronized","System.Collections.SortedList.SyncRoot","System.Collections.SortedList.IEnumerable.GetEnumerator","System.Collections.SortedList.TrimToSize","System.Collections.SortedList.Values"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.SortedList","System::Collections::SortedList","System.Collections.SortedList.#ctor","System::Collections::SortedList::#ctor","System.Collections.SortedList.Add","System::Collections::SortedList::Add","System.Collections.SortedList.Capacity","System::Collections::SortedList::Capacity","System.Collections.SortedList.Clear","System::Collections::SortedList::Clear","System.Collections.SortedList.Clone","System::Collections::SortedList::Clone","System.Collections.SortedList.Contains","System::Collections::SortedList::Contains","System.Collections.SortedList.ContainsKey","System::Collections::SortedList::ContainsKey","System.Collections.SortedList.ContainsValue","System::Collections::SortedList::ContainsValue","System.Collections.SortedList.CopyTo","System::Collections::SortedList::CopyTo","System.Collections.SortedList.Count","System::Collections::SortedList::Count","System.Collections.SortedList.GetByIndex","System::Collections::SortedList::GetByIndex","System.Collections.SortedList.GetEnumerator","System::Collections::SortedList::GetEnumerator","System.Collections.SortedList.GetKey","System::Collections::SortedList::GetKey","System.Collections.SortedList.GetKeyList","System::Collections::SortedList::GetKeyList","System.Collections.SortedList.GetValueList","System::Collections::SortedList::GetValueList","System.Collections.SortedList.IndexOfKey","System::Collections::SortedList::IndexOfKey","System.Collections.SortedList.IndexOfValue","System::Collections::SortedList::IndexOfValue","System.Collections.SortedList.IsFixedSize","System::Collections::SortedList::IsFixedSize","System.Collections.SortedList.IsReadOnly","System::Collections::SortedList::IsReadOnly","System.Collections.SortedList.IsSynchronized","System::Collections::SortedList::IsSynchronized","System.Collections.SortedList.Item","System::Collections::SortedList::Item","System.Collections.SortedList.Keys","System::Collections::SortedList::Keys","System.Collections.SortedList.Remove","System::Collections::SortedList::Remove","System.Collections.SortedList.RemoveAt","System::Collections::SortedList::RemoveAt","System.Collections.SortedList.SetByIndex","System::Collections::SortedList::SetByIndex","System.Collections.SortedList.Synchronized","System::Collections::SortedList::Synchronized","System.Collections.SortedList.SyncRoot","System::Collections::SortedList::SyncRoot","System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator","System::Collections::SortedList::System#Collections#IEnumerable#GetEnumerator","System.Collections.SortedList.TrimToSize","System::Collections::SortedList::TrimToSize","System.Collections.SortedList.Values","System::Collections::SortedList::Values"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6a084267-9890-9fed-488e-0a84c0cbca76","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/SortedList.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SortedList class | Microsoft Docs","_op_ogTitle":"SortedList class","description":"Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.SortedList","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.sortedlist","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.sortedlist","fileRelativePath":"System.Collections.SortedList.html"},"themesRelativePathToOutputRoot":"_themes/"}