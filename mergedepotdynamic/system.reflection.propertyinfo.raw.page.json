{"content":"    \r\n    <h1 id=\"System_Reflection_PropertyInfo\">\r\n      <span class=\"lang-csharp\">PropertyInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Discovers the attributes of a property and provides access to property metadata.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyInfo))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">System.Reflection.MemberInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PropertyInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType\" data-linktype=\"relative-path\">DeclaringType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_IsDefined_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Module\" data-linktype=\"relative-path\">Module</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_ReflectedType\" data-linktype=\"relative-path\">ReflectedType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Properties are logically the same as fields. A property is a named aspect of an object&#39;s state whose value is typically accessible through <code>get</code> and <code>set</code> accessors. Properties may be read-only, in which case a set routine is not supported.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To determine whether a property is <code>static</code>, you must obtain the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the <code>get</code> or <code>set</code> accessor, by calling the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetGetMethod_\" data-linktype=\"relative-path\">GetGetMethod</a> or the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetSetMethod_\" data-linktype=\"relative-path\">GetSetMethod</a> method, and examine its <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_IsStatic_\" data-linktype=\"relative-path\">IsStatic</a> property.  </p>\n</div>\n<p> Several methods in this class assume that the <code>get</code> accessor and <code>set</code> accessor methods of a property have certain formats. The signatures of the <code>get</code> and <code>set</code> methods must match the following convention:  </p>\n<ul>\n<li><p>The return type of the <code>get</code> method and the last argument of the <code>set</code> method must be identical. This is the type of the property.  </p>\n</li>\n<li><p>The <code>get</code> and <code>set</code> methods must have the same number, type, and order of indices.  </p>\n<p>If this format is not followed, the behavior of the <code>GetValue</code> and <code>SetValue</code> methods is undefined.  </p>\n<p>Calling <a class=\"xref\" href=\"system.reflection.icustomattributeprovider#System_Reflection_ICustomAttributeProvider_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> on <code>PropertyInfo</code> when the <code>inherit</code> parameter of <code>GetCustomAttributes</code> is <code>true</code> does not walk the type hierarchy. Use <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">System.Attribute</a> to inherit custom attributes.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo__ctor\" data-linktype=\"self-bookmark\">PropertyInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_CanRead\" data-linktype=\"self-bookmark\">CanRead</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the property can be read.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_CanWrite\" data-linktype=\"self-bookmark\">CanWrite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the property can be written to.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetMethod\" data-linktype=\"self-bookmark\">GetMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <code>get</code> accessor for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_IsSpecialName\" data-linktype=\"self-bookmark\">IsSpecialName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the property is the special name.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_MemberType\" data-linktype=\"self-bookmark\">MemberType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_PropertyType\" data-linktype=\"self-bookmark\">PropertyType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the type of this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_SetMethod\" data-linktype=\"self-bookmark\">SetMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <code>set</code> accessor for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetAccessors\" data-linktype=\"self-bookmark\">GetAccessors()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array whose elements reflect the public <code>get</code> and <code>set</code> accessors of the property reflected by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetAccessors_System_Boolean_\" data-linktype=\"self-bookmark\">GetAccessors(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array whose elements reflect the public and, if specified, non-public <code>get</code> and <code>set</code> accessors of the property reflected by the current instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetConstantValue\" data-linktype=\"self-bookmark\">GetConstantValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a literal value associated with the property by a compiler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetGetMethod\" data-linktype=\"self-bookmark\">GetGetMethod()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public <code>get</code> accessor for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetGetMethod_System_Boolean_\" data-linktype=\"self-bookmark\">GetGetMethod(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the public or non-public <code>get</code> accessor for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetIndexParameters\" data-linktype=\"self-bookmark\">GetIndexParameters()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns an array of all the index parameters for the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetOptionalCustomModifiers\" data-linktype=\"self-bookmark\">GetOptionalCustomModifiers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of types representing the optional custom modifiers of the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetRawConstantValue\" data-linktype=\"self-bookmark\">GetRawConstantValue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a literal value associated with the property by a compiler.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetRequiredCustomModifiers\" data-linktype=\"self-bookmark\">GetRequiredCustomModifiers()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an array of types representing the required custom modifiers of the property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetSetMethod\" data-linktype=\"self-bookmark\">GetSetMethod()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public <code>set</code> accessor for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetSetMethod_System_Boolean_\" data-linktype=\"self-bookmark\">GetSetMethod(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the <code>set</code> accessor for this property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetValue_System_Object_\" data-linktype=\"self-bookmark\">GetValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the property value of a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetValue_System_Object_System_Object___\" data-linktype=\"self-bookmark\">GetValue(Object,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the property value of a specified object with optional index values for indexed properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_GetValue_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">GetValue(Object,BindingFlags,Binder,Object[],CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_SetValue_System_Object_System_Object_\" data-linktype=\"self-bookmark\">SetValue(Object,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the property value of a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_SetValue_System_Object_System_Object_System_Object___\" data-linktype=\"self-bookmark\">SetValue(Object,Object,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the property value of a specified object with optional index values for index properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_SetValue_System_Object_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">SetValue(Object,Object,BindingFlags,Binder,Object[],CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_op_Equality_System_Reflection_PropertyInfo_System_Reflection_PropertyInfo_\" data-linktype=\"self-bookmark\">op_Equality(PropertyInfo,PropertyInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_op_Inequality_System_Reflection_PropertyInfo_System_Reflection_PropertyInfo_\" data-linktype=\"self-bookmark\">op_Inequality(PropertyInfo,PropertyInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_PropertyInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetType\" data-linktype=\"self-bookmark\">_PropertyInfo.GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_PropertyInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_PropertyInfo.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_PropertyInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo__ctor\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PropertyInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected PropertyInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.PropertyAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyattributes\" data-linktype=\"relative-path\">PropertyAttributes</a></div>\r\n                  </div>\r\n                  <p>The attributes of this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Attributes property returns the attributes associated with the property represented by this <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object.  The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <code>SpecialName</code> property, and so on. Note that, for almost all properties found in types in the .NET Framework class library, the value of the Attributes property is <a class=\"xref\" href=\"system.reflection.propertyattributes\" data-linktype=\"relative-path\">System.Reflection.PropertyAttributes</a>.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> In most cases, you probably want to retrieve the custom attributes associated with a property. To do this, retrieve the value of the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes_\" data-linktype=\"relative-path\">CustomAttributes</a> property, or call one of the overloads of the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method.  </p>\n</div>\n<p> To get the Attributes property:  </p>\n<ol>\n<li><p>Get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type to which the property belongs.  </p>\n</li>\n<li><p>Get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object by calling an overload of the <a class=\"xref\" href=\"system.type#System_Type_GetProperty_\" data-linktype=\"relative-path\">GetProperty</a> method.  </p>\n</li>\n<li><p>Retrieve the property&#39;s attributes from the Attributes property.  </p>\n<p>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineProperty_\" data-linktype=\"relative-path\">DefineProperty</a> method and supplying a value for the <code>attributes</code> argument.</p>\n</li>\n</ol>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_CanRead\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_CanRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRead</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the property can be read.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool CanRead { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this property can be read; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the property does not have a <code>get</code> accessor, it cannot be read.  </p>\n<p> To get the <code>CanRead</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, get the <code>CanRead</code> value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines two properties. The first property is readable and the <code>CanRead</code> property is <code>true</code>. The second property is not readable (there is no get accessor), and the <code>CanRead</code> property is <code>false</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.CanRead Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define one readable property and one not readable.\npublic ref class Mypropertya\n{\nprivate:\n   String^ caption;\n\npublic:\n   Mypropertya()\n      : caption( &quot;A Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\npublic ref class Mypropertyb\n{\nprivate:\n   String^ caption;\n\npublic:\n   Mypropertyb()\n      : caption( &quot;B Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.PropertyInfo&quot; );\n   \n   // Define two properties.\n   Mypropertya^ mypropertya = gcnew Mypropertya;\n   Mypropertyb^ mypropertyb = gcnew Mypropertyb;\n   Console::Write( &quot;<br>Mypropertya-&gt;Caption = {0}&quot;, mypropertya-&gt;Caption );\n   \n   // Mypropertyb.Caption cannot be read, because\n   // there is no get accessor.\n   // Get the type and PropertyInfo.\n   Type^ MyTypea = Type::GetType( &quot;Mypropertya&quot; );\n   PropertyInfo^ Mypropertyinfoa = MyTypea-&gt;GetProperty( &quot;Caption&quot; );\n   Type^ MyTypeb = Type::GetType( &quot;Mypropertyb&quot; );\n   PropertyInfo^ Mypropertyinfob = MyTypeb-&gt;GetProperty( &quot;Caption&quot; );\n   \n   // Get and display the CanRead property.\n   Console::Write( &quot;<br>CanRead a - {0}&quot;, Mypropertyinfoa-&gt;CanRead );\n   Console::Write( &quot;<br>CanRead b - {0}&quot;, Mypropertyinfob-&gt;CanRead );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.CanRead Example#1\">using System;\nusing System.Reflection;\n \n// Define one readable property and one not readable.\npublic class Mypropertya\n{\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        set {if(caption!=value) {caption = value;}\n        }\n    }\n}\npublic class Mypropertyb\n{\n    private string caption = &quot;B Default caption&quot;;\n    public string Caption\n    {\n        set{if(caption!=value) {caption = value;}\n        }\n    }\n}\n  \nclass Mypropertyinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;<br>Reflection.PropertyInfo&quot;);\n  \n        // Define two properties.\n        Mypropertya Mypropertya = new Mypropertya();\n        Mypropertyb Mypropertyb = new Mypropertyb();\n  \n        Console.Write(&quot;<br>Mypropertya.Caption = &quot; + Mypropertya.Caption);\n        // Mypropertyb.Caption cannot be read, because\n        // there is no get accessor.\n  \n        // Get the type and PropertyInfo.\n        Type MyTypea = Type.GetType(&quot;Mypropertya&quot;);\n        PropertyInfo Mypropertyinfoa = MyTypea.GetProperty(&quot;Caption&quot;);\n        Type MyTypeb = Type.GetType(&quot;Mypropertyb&quot;);\n        PropertyInfo Mypropertyinfob = MyTypeb.GetProperty(&quot;Caption&quot;);\n  \n        // Get and display the CanRead property.\n        Console.Write(&quot;<br>CanRead a - &quot; + Mypropertyinfoa.CanRead);\n        Console.Write(&quot;<br>CanRead b - &quot; + Mypropertyinfob.CanRead);\n  \n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.CanRead Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define one readable property and one not readable.\nPublic Class Mypropertya\n    Private myCaption As String = &quot;A Default caption&quot;\n\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nPublic Class Mypropertyb\n    Private myCaption As String = &quot;B Default caption&quot;\n\n    Public WriteOnly Property Caption() As String\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nClass Mypropertyinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf &amp; &quot;Reflection.PropertyInfo&quot;)\n\n        &#39; Define two properties.\n        Dim Mypropertya As New Mypropertya()\n        Dim Mypropertyb As New Mypropertyb()\n\n        Console.Write(ControlChars.Cr &amp; &quot;Mypropertya.Caption = &quot; &amp; _\n           Mypropertya.Caption)\n        &#39; Mypropertyb.Caption cannot be read because\n        &#39; there is no get accessor.\n        &#39; Get the type and PropertyInfo.\n        Dim MyTypea As Type = Type.GetType(&quot;Mypropertya&quot;)\n        Dim Mypropertyinfoa As PropertyInfo = MyTypea.GetProperty(&quot;Caption&quot;)\n        Dim MyTypeb As Type = Type.GetType(&quot;Mypropertyb&quot;)\n        Dim Mypropertyinfob As PropertyInfo = MyTypeb.GetProperty(&quot;Caption&quot;)\n\n        &#39; Get and display the CanRead property.\n        Console.Write(ControlChars.CrLf &amp; &quot;CanRead a - &quot; &amp; _\n           Mypropertyinfoa.CanRead)\n\n        Console.Write(ControlChars.CrLf &amp; &quot;CanRead b - &quot; &amp; _\n           Mypropertyinfob.CanRead)\n\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_CanWrite\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_CanWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanWrite</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the property can be written to.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract bool CanWrite { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this property can be written to; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>CanWrite returns <code>true</code> if the property has a <code>set</code> accessor, even if the accessor is <code>private</code>, <code>internal</code> (or <code>Friend</code> in Visual Basic), or <code>protected</code>.   If the property does not have a <code>set</code> accessor, the method returns <code>false</code>.  </p>\n<p> To get the value of the CanWrite property:  </p>\n<ol>\n<li><p>Get the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object of the type that includes the property.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.type#System_Type_GetProperty_\" data-linktype=\"relative-path\">GetProperty</a> to get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object that represents the property.  </p>\n</li>\n<li><p>Retrieve the value of the CanWrite property.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines two properties. The first property is writable and the <code>CanWrite</code> property is <code>true</code>. The second property is not writable (there is no <code>set</code> accessor), and the <code>CanWrite</code> property is <code>false</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.CanWrite Example#1\">using System;\nusing System.Reflection;\n \n // Define one writable property and one not writable.\npublic class Mypropertya\n{\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        set {if(caption!=value) {caption = value;}\n        }\n    }\n}\npublic class Mypropertyb\n{\n    private string caption = &quot;B Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n    }\n}\n  \nclass Mypropertyinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;<br>Reflection.PropertyInfo&quot;);\n  \n        // Define two properties.\n        Mypropertya Mypropertya = new Mypropertya();\n        Mypropertyb Mypropertyb = new Mypropertyb();\n  \n        // Read and display the property.\n        Console.Write(&quot;<br>Mypropertya.Caption = &quot; + Mypropertya.Caption);\n        Console.Write(&quot;<br>Mypropertyb.Caption = &quot; + Mypropertyb.Caption);\n  \n        // Write to the property.\n        Mypropertya.Caption = &quot;A- No Change&quot;;\n        // Mypropertyb.Caption cannot be written to because\n        // there is no set accessor.\n  \n        // Read and display the property.\n        Console.Write(&quot;<br>Mypropertya.Caption = &quot; + Mypropertya.Caption);\n        Console.Write (&quot;<br>Mypropertyb.Caption = &quot; + Mypropertyb.Caption);\n  \n        // Get the type and PropertyInfo.\n        Type MyTypea = Type.GetType(&quot;Mypropertya&quot;);\n        PropertyInfo Mypropertyinfoa = MyTypea.GetProperty(&quot;Caption&quot;);\n        Type MyTypeb = Type.GetType(&quot;Mypropertyb&quot;);\n        PropertyInfo Mypropertyinfob = MyTypeb.GetProperty(&quot;Caption&quot;);\n  \n        // Get and display the CanWrite property.\n      \n        Console.Write(&quot;<br>CanWrite a - &quot; + Mypropertyinfoa.CanWrite);\n      \n        Console.Write(&quot;<br>CanWrite b - &quot; + Mypropertyinfob.CanWrite);\n  \n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.CanWrite Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define one writable property and one not writable.\npublic ref class Mypropertya\n{\nprivate:\n   String^ caption;\n\npublic:\n   Mypropertya()\n      : caption( &quot;A Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\npublic ref class Mypropertyb\n{\nprivate:\n   String^ caption;\n\npublic:\n   Mypropertyb()\n      : caption( &quot;B Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.PropertyInfo&quot; );\n   \n   // Define two properties.\n   Mypropertya^ mypropertya = gcnew Mypropertya;\n   Mypropertyb^ mypropertyb = gcnew Mypropertyb;\n   \n   // Read and display the property.\n   Console::Write( &quot;<br>Mypropertya-&gt;Caption = {0}&quot;, mypropertya-&gt;Caption );\n   Console::Write( &quot;<br>Mypropertyb-&gt;Caption = {0}&quot;, mypropertyb-&gt;Caption );\n   \n   // Write to the property.\n   mypropertya-&gt;Caption = &quot;A- No Change&quot;;\n   \n   // Mypropertyb.Caption cannot be written to because\n   // there is no set accessor.\n   // Read and display the property.\n   Console::Write( &quot;<br>Mypropertya-&gt;Caption = {0}&quot;, mypropertya-&gt;Caption );\n   Console::Write( &quot;<br>Mypropertyb-&gt;Caption = {0}&quot;, mypropertyb-&gt;Caption );\n   \n   // Get the type and PropertyInfo.\n   Type^ MyTypea = Type::GetType( &quot;Mypropertya&quot; );\n   PropertyInfo^ Mypropertyinfoa = MyTypea-&gt;GetProperty( &quot;Caption&quot; );\n   Type^ MyTypeb = Type::GetType( &quot;Mypropertyb&quot; );\n   PropertyInfo^ Mypropertyinfob = MyTypeb-&gt;GetProperty( &quot;Caption&quot; );\n   \n   // Get and display the CanWrite property.\n   Console::Write( &quot;<br>CanWrite a - {0}&quot;, Mypropertyinfoa-&gt;CanWrite );\n   Console::Write( &quot;<br>CanWrite b - {0}&quot;, Mypropertyinfob-&gt;CanWrite );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.CanWrite Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define one writable property and one not writable.\nPublic Class Mypropertya\n    Private myCaption As String = &quot;A Default caption&quot;\n\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nPublic Class Mypropertyb\n    Private myCaption As String = &quot;B Default caption&quot;\n\n    Public ReadOnly Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n    End Property\nEnd Class\n\nClass Mypropertyinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf &amp; &quot;Reflection.PropertyInfo&quot;)\n\n        &#39; Define two properties.\n        Dim Mypropertya As New Mypropertya()\n        Dim Mypropertyb As New Mypropertyb()\n\n        &#39; Read and display the property.\n        Console.Write(ControlChars.CrLf &amp; &quot;Mypropertya.Caption = &quot; &amp; _\n           Mypropertya.Caption)\n        Console.Write(ControlChars.CrLf &amp; &quot;Mypropertyb.Caption = &quot; &amp; _\n           Mypropertyb.Caption)\n\n        &#39; Write to the property.\n        Mypropertya.Caption = &quot;A- No Change&quot;\n        &#39; Mypropertyb.Caption cannot be written to because\n        &#39; there is no set accessor.\n        &#39; Read and display the property.\n        Console.Write(ControlChars.CrLf &amp; &quot;Mypropertya.Caption = &quot; &amp; _\n           Mypropertya.Caption)\n        Console.Write(ControlChars.CrLf &amp; &quot;Mypropertyb.Caption = &quot; &amp; _\n           Mypropertyb.Caption)\n\n        &#39; Get the type and PropertyInfo.\n        Dim MyTypea As Type = Type.GetType(&quot;Mypropertya&quot;)\n        Dim Mypropertyinfoa As PropertyInfo = MyTypea.GetProperty(&quot;Caption&quot;)\n        Dim MyTypeb As Type = Type.GetType(&quot;Mypropertyb&quot;)\n        Dim Mypropertyinfob As PropertyInfo = MyTypeb.GetProperty(&quot;Caption&quot;)\n\n        &#39; Get and display the CanWrite property.\n        Console.Write(ControlChars.CrLf &amp; &quot;CanWrite a - &quot; &amp; _\n           Mypropertyinfoa.CanWrite)\n\n        Console.Write(ControlChars.CrLf &amp; &quot;CanWrite b - &quot; &amp; _\n           Mypropertyinfob.CanWrite)\n\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetMethod\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <code>get</code> accessor for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo GetMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The <code>get</code> accessor for this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_IsSpecialName\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_IsSpecialName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSpecialName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the property is the special name.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSpecialName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this property is the special name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>SpecialName</code> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).  </p>\n<p> To get the <code>IsSpecialName</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, get the <code>IsSpecialName</code> value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_MemberType\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_MemberType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberTypes MemberType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is a property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property overrides <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a>. Therefore, when you examine a set of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects â€” for example, the array returned by <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a> â€” the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a> property returns <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> only when a given member is a property.  </p>\n<p> <code>MemberType</code> is a derived class of <code>MemberInfo</code> and specifies the type of member this is. Member types are constructors, properties, fields, and methods. Since this is a <code>PropertyInfo</code> property, the returned type is a property.  </p>\n<p> To get the <code>MemberType</code> property, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, get the <code>MemberType</code> value.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the type of the specified member.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.MemberType Example#1\">using System;\nusing System.Reflection;\n \nclass Mypropertyinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine(&quot;<br>Reflection.PropertyInfo&quot;);\n  \n        // Get the type and PropertyInfo.\n        Type MyType = Type.GetType(&quot;System.Reflection.MemberInfo&quot;);\n        PropertyInfo Mypropertyinfo = MyType.GetProperty(&quot;Name&quot;);\n  \n        // Read and display the MemberType property.\n        Console.Write(&quot;<br>MemberType = &quot; + Mypropertyinfo.MemberType.ToString());\n  \n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.MemberType Example#1\">using namespace System;\nusing namespace System::Reflection;\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.PropertyInfo&quot; );\n   \n   // Get the type and PropertyInfo.\n   Type^ MyType = Type::GetType( &quot;System.Reflection.MemberInfo&quot; );\n   PropertyInfo^ Mypropertyinfo = MyType-&gt;GetProperty( &quot;Name&quot; );\n   \n   // Read and display the MemberType property.\n   Console::Write( &quot;<br>MemberType = {0}&quot;, Mypropertyinfo-&gt;MemberType );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.MemberType Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nClass Mypropertyinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf &amp; &quot;Reflection.PropertyInfo&quot;)\n\n        &#39; Get the type and PropertyInfo.\n        Dim MyType As Type = Type.GetType(&quot;System.Reflection.MemberInfo&quot;)\n        Dim Mypropertyinfo As PropertyInfo = MyType.GetProperty(&quot;Name&quot;)\n\n        &#39; Read and display the MemberType property.\n        Console.WriteLine(&quot;MemberType = &quot; &amp; _\n           Mypropertyinfo.MemberType.ToString())\n\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_PropertyType\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_PropertyType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PropertyType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the type of this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract Type PropertyType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The type of this property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine the type of a particular property, do the following:  </p>\n<ol>\n<li><p>Get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <a class=\"xref\" href=\"system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  </p>\n</li>\n<li><p>Get a <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object that represents the property in which you&#39;re interested. You can do this by getting an array of all properties from the <a class=\"xref\" href=\"system.type#System_Type_GetProperties_\" data-linktype=\"relative-path\">GetProperties</a> method and then iterating the elements in the array, or you can retrieve the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object that represents the property directly by calling the <a class=\"xref\" href=\"system.type#System_Type_GetProperty_\" data-linktype=\"relative-path\">GetProperty</a> method and specifying the property name.  </p>\n</li>\n<li><p>Retrieve the value of the PropertyType property from the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines an <code>Employee</code> class that has five properties. It then uses retrieves an array of <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects that represent those properties and displays the name and type of each.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.PropertyInfo.PropertyType#1\">using System;\nusing System.Reflection;\n\npublic class Employee\n{\n   private string _id;\n\n   public String FirstName { get; set; }\n   public String MiddleName { get; set; }\n   public String LastName  { get; set; }\n   public DateTime HireDate  { get; set; }\n\n   public String ID\n   {\n      get { return _id; }\n      set {\n         if (ID.Trim().Length != 9)\n            throw new ArgumentException(&quot;The ID is invalid&quot;);\n         _id = value;\n      }\n   }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Type t = typeof(Employee);\n      Console.WriteLine(&quot;The {0} type has the following properties: &quot;,\n                        t.Name);\n      foreach (var prop in t.GetProperties())\n         Console.WriteLine(&quot;   {0} ({1})&quot;, prop.Name,\n                           prop.PropertyType.Name);\n   }\n}\n// The example displays the following output:\n//       The Employee type has the following properties:\n//          FirstName (String)\n//          MiddleName (String)\n//          LastName (String)\n//          HireDate (DateTime)\n//          ID (String)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.PropertyInfo.PropertyType#1\">Imports System.Reflection\n\nPublic Class Employee\n   Private _id As String\n\n   Public Property FirstName As String = String.Empty\n   Public Property MiddleName As String = String.Empty\n   Public Property LastName As String = String.Empty\n   Public Property HireDate As Date = Date.Today\n\n   Public Property ID As String\n      Get\n         Return _id\n      End Get\n      Set\n         If ID.Trim().Length &lt;&gt; 9 Then _\n            Throw New ArgumentException(&quot;The ID is invalid&quot;)\n         _id = value\n      End Set\n   End Property\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim t As Type = GetType(Employee)\n      Console.WriteLine(&quot;The {0} type has the following properties: &quot;,\n                        t.Name)\n      For Each prop In t.GetProperties()\n         Console.WriteLine(&quot;   {0} ({1})&quot;, prop.Name,\n                           prop.PropertyType.Name)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    The Employee type has the following properties:\n&#39;       FirstName (String)\n&#39;       MiddleName (String)\n&#39;       LastName (String)\n&#39;       HireDate (DateTime)\n&#39;       ID (String)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_SetMethod\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_SetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <code>set</code> accessor for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo SetMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The <code>set</code> accessor for this property, or <code>null</code> if the property is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of the SetMethod property is equivalent to calling the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetSetMethod_System_Boolean_\" data-linktype=\"relative-path\">GetSetMethod(Boolean)</a> method with a value of <code>true</code> for the <code>nonPublic</code> argument.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetAccessors\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetAccessors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessors()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array whose elements reflect the public <code>get</code> and <code>set</code> accessors of the property reflected by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo[] GetAccessors ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> objects that reflect the public <code>get</code> and <code>set</code> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To call the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetAccessors_\" data-linktype=\"relative-path\">GetAccessors</a> method:  </p>\n<ol>\n<li><p>Get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the class.  </p>\n</li>\n<li><p>From the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object.  </p>\n</li>\n<li><p>From the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object, call the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetAccessors_\" data-linktype=\"relative-path\">GetAccessors</a> method.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the public accessors of the <code>ClassWithProperty.Caption</code> property and displays information about them. It also calls the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method of the setter to set the property value and of the getter to retrieve the property value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Reflection.PropertyInfo.GetAccessors#1\">Imports System.Reflection\n\n&#39; Define a property.\nPublic Class ClassWithProperty\n    Private _caption As String = &quot;A Default caption&quot;\n\n    Public Property Caption As String\n        Get\n            Return _caption\n        End Get\n        Set\n            If _caption &lt;&gt; value Then _caption = value\n        End Set\n    End Property\nEnd Class\n\nModule Example\n    Public Sub Main()\n        Dim test As New ClassWithProperty()\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption)\n        Console.WriteLine(&quot;----------&quot;)\n        &#39; Get the type and PropertyInfo.\n        Dim t As Type = Type.GetType(&quot;ClassWithProperty&quot;)\n        Dim propInfo As PropertyInfo = t.GetProperty(&quot;Caption&quot;)\n\n        &#39; Get all the accessors.\n        Dim methInfos() As MethodInfo = propInfo.GetAccessors()\n        Console.WriteLine(&quot;There are {0} accessors.&quot;,\n                          methInfos.Length)\n        For ctr As Integer = 0 To methInfos.Length - 1\n           Dim m As MethodInfo = methInfos(ctr)\n           Console.WriteLine(&quot;Accessor #{0}:&quot;, ctr + 1)\n           Console.WriteLine(&quot;   Name: {0}&quot;, m.Name)\n           Console.WriteLine(&quot;   Visibility: {0}&quot;, GetVisibility(m))\n           Console.Write(&quot;   Property Type: &quot;)\n           &#39; Determine if this is the property getter or setter.\n&#39;&#39;           If (m.ReturnType == typeof(void))\n           If m.ReturnType Is GetType(Void) Then\n              Console.WriteLine(&quot;Setter&quot;)\n              Console.WriteLine(&quot;   Setting the property value.&quot;)\n              &#39; Set the value of the property.\n              m.Invoke(test, { &quot;The Modified Caption&quot; } )\n           Else\n              Console.WriteLine(&quot;Getter&quot;)\n              &#39; Get the value of the property.\n              Console.WriteLine(&quot;   Property Value: {0}&quot;,\n                                m.Invoke(test, {} ))\n           End If\n        Next\n        Console.WriteLine(&quot;----------&quot;)\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption)\n    End Sub\n    \n    Private Function GetVisibility(m As MethodInfo) As String\n       Dim visibility As String = &quot;&quot;\n       If m.IsPublic Then\n          Return &quot;Public&quot;\n       ElseIf m.IsPrivate Then\n          Return &quot;Private&quot;\n       Else\n          If m.IsFamily Then\n             visibility = &quot;Protected &quot;\n          ElseIf m.IsAssembly Then\n             visibility += &quot;Assembly&quot;\n          End If\n       End If\n       Return visibility\n    End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       The Caption property: A Default caption\n&#39;       ----------\n&#39;       There are 2 accessors.\n&#39;       Accessor #1:\n&#39;          Name: get_Caption\n&#39;          Visibility: Public\n&#39;          Property Type: Getter\n&#39;          Property Value: A Default caption\n&#39;       Accessor #2:\n&#39;          Name: set_Caption\n&#39;          Visibility: Public\n&#39;          Property Type: Setter\n&#39;          Setting the property value.\n&#39;       ----------\n&#39;       The Caption property: The Modified Caption\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Reflection.PropertyInfo.GetAccessors#1\">using System;\nusing System.Reflection;\n \n// Define a property.\npublic class ClassWithProperty\n{\n    private string _caption = &quot;A Default caption&quot;;\n\n    public string Caption\n    {\n        get { return _caption; }\n        set { if(_caption != value) _caption = value; }\n    }\n}\n \nclass Example\n{\n    public static void Main()\n    {\n        ClassWithProperty test = new ClassWithProperty();\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption);\n        Console.WriteLine(&quot;----------&quot;);\n        // Get the type and PropertyInfo.\n        Type t = Type.GetType(&quot;ClassWithProperty&quot;);\n        PropertyInfo propInfo = t.GetProperty(&quot;Caption&quot;);\n \n        // Get the public GetAccessors method.\n        MethodInfo[] methInfos = propInfo.GetAccessors();\n        Console.WriteLine(&quot;There are {0} accessors.&quot;,\n                          methInfos.Length);\n        for(int ctr = 0; ctr &lt; methInfos.Length; ctr++) {\n           MethodInfo m = methInfos[ctr];\n           Console.WriteLine(&quot;Accessor #{0}:&quot;, ctr + 1);\n           Console.WriteLine(&quot;   Name: {0}&quot;, m.Name);\n           Console.WriteLine(&quot;   Visibility: {0}&quot;, GetVisibility(m));\n           Console.Write(&quot;   Property Type: &quot;);\n           // Determine if this is the property getter or setter.\n           if (m.ReturnType == typeof(void)) {\n              Console.WriteLine(&quot;Setter&quot;);\n              Console.WriteLine(&quot;   Setting the property value.&quot;);\n              //  Set the value of the property.\n              m.Invoke(test, new object[] { &quot;The Modified Caption&quot; } );\n           }\n           else {\n              Console.WriteLine(&quot;Getter&quot;);\n              // Get the value of the property.\n              Console.WriteLine(&quot;   Property Value: {0}&quot;,\n                                m.Invoke(test, new object[] {} ));\n           }\n        }\n        Console.WriteLine(&quot;----------&quot;);\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption);\n    }\n\n    static string GetVisibility(MethodInfo m)\n    {\n       string visibility = &quot;&quot;;\n       if (m.IsPublic)\n          return &quot;Public&quot;;\n       else if (m.IsPrivate)\n          return &quot;Private&quot;;\n       else\n          if (m.IsFamily)\n             visibility = &quot;Protected &quot;;\n          else if (m.IsAssembly)\n             visibility += &quot;Assembly&quot;;\n       return visibility;\n    }\n}\n// The example displays the following output:\n//       The Caption property: A Default caption\n//       ----------\n//       There are 2 accessors.\n//       Accessor #1:\n//          Name: get_Caption\n//          Visibility: Public\n//          Property Type: Getter\n//          Property Value: A Default caption\n//       Accessor #2:\n//          Name: set_Caption\n//          Visibility: Public\n//          Property Type: Setter\n//          Setting the property value.\n//       ----------\n//       The Caption property: The Modified Caption\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetAccessors_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetAccessors_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAccessors(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array whose elements reflect the public and, if specified, non-public <code>get</code> and <code>set</code> accessors of the property reflected by the current instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates whether non-public methods should be returned in the returned array. <code>true</code> if non-public methods are to be included; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array whose elements reflect the <code>get</code> and <code>set</code> accessors of the property reflected by the current instance. If <code>nonPublic</code> is <code>true</code>, this array contains public and non-public <code>get</code> and <code>set</code>accessors. If <code>nonPublic</code> is <code>false</code>, this array contains only public <code>get</code> and <code>set</code> accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To call the GetAccessors method:  </p>\n<ol>\n<li><p>Get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the class.  </p>\n</li>\n<li><p>From the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object.  </p>\n</li>\n<li><p>From the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object, call the GetAccessors method.</p>\n</li>\n</ol>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example retrieves the accessors of the <code>ClassWithProperty.Caption</code> property and displays information about them. It also calls the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method of the setter to set the property value and of the getter to retrieve the property value.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.GetAccessors1 Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a property.\npublic ref class Myproperty\n{\nprivate:\n   String^ caption;\n\npublic:\n   Myproperty()\n      : caption( &quot;A Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.PropertyInfo&quot; );\n   \n   // Get the type and PropertyInfo.\n   Type^ MyType = Type::GetType( &quot;Myproperty&quot; );\n   PropertyInfo^ Mypropertyinfo = MyType-&gt;GetProperty( &quot;Caption&quot; );\n   \n   // Get the public GetAccessors method.\n   array&lt;MethodInfo^&gt;^Mymethodinfoarray = Mypropertyinfo-&gt;GetAccessors( true );\n   Console::Write( &quot;<br>There are {0} accessors (public).&quot;, Mymethodinfoarray-&gt;Length );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.GetAccessors1 Example#1\">using System;\nusing System.Reflection;\n \n// Define a property.\npublic class ClassWithProperty\n{\n    private string _caption = &quot;A Default caption&quot;;\n\n    public string Caption\n    {\n        get { return _caption; }\n        set { if(_caption != value) _caption = value; }\n    }\n}\n \nclass Example\n{\n    public static void Main()\n    {\n        ClassWithProperty test = new ClassWithProperty();\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption);\n        Console.WriteLine(&quot;----------&quot;);\n        // Get the type and PropertyInfo.\n        Type t = Type.GetType(&quot;ClassWithProperty&quot;);\n        PropertyInfo propInfo = t.GetProperty(&quot;Caption&quot;);\n \n        // Get the public GetAccessors method.\n        MethodInfo[] methInfos = propInfo.GetAccessors(true);\n        Console.WriteLine(&quot;There are {0} accessors.&quot;,\n                          methInfos.Length);\n        for(int ctr = 0; ctr &lt; methInfos.Length; ctr++) {\n           MethodInfo m = methInfos[ctr];\n           Console.WriteLine(&quot;Accessor #{0}:&quot;, ctr + 1);\n           Console.WriteLine(&quot;   Name: {0}&quot;, m.Name);\n           Console.WriteLine(&quot;   Visibility: {0}&quot;, GetVisibility(m));\n           Console.Write(&quot;   Property Type: &quot;);\n           // Determine if this is the property getter or setter.\n           if (m.ReturnType == typeof(void)) {\n              Console.WriteLine(&quot;Setter&quot;);\n              Console.WriteLine(&quot;   Setting the property value.&quot;);\n              //  Set the value of the property.\n              m.Invoke(test, new object[] { &quot;The Modified Caption&quot; } );\n           }\n           else {\n              Console.WriteLine(&quot;Getter&quot;);\n              // Get the value of the property.\n              Console.WriteLine(&quot;   Property Value: {0}&quot;,\n                                m.Invoke(test, new object[] {} ));\n           }\n        }\n        Console.WriteLine(&quot;----------&quot;);\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption);\n    }\n\n    static string GetVisibility(MethodInfo m)\n    {\n       string visibility = &quot;&quot;;\n       if (m.IsPublic)\n          return &quot;Public&quot;;\n       else if (m.IsPrivate)\n          return &quot;Private&quot;;\n       else\n          if (m.IsFamily)\n             visibility = &quot;Protected &quot;;\n          else if (m.IsAssembly)\n             visibility += &quot;Assembly&quot;;\n       return visibility;\n    }\n}\n// The example displays the following output:\n//       The Caption property: A Default caption\n//       ----------\n//       There are 2 accessors.\n//       Accessor #1:\n//          Name: get_Caption\n//          Visibility: Public\n//          Property Type: Getter\n//          Property Value: A Default caption\n//       Accessor #2:\n//          Name: set_Caption\n//          Visibility: Public\n//          Property Type: Setter\n//          Setting the property value.\n//       ----------\n//       The Caption property: The Modified Caption\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.GetAccessors1 Example#1\">Imports System.Reflection\n\n&#39; Define a property.\nPublic Class ClassWithProperty\n    Private _caption As String = &quot;A Default caption&quot;\n\n    Public Property Caption As String\n        Get\n            Return _caption\n        End Get\n        Set\n            If _caption &lt;&gt; value Then _caption = value\n        End Set\n    End Property\nEnd Class\n\nModule Example\n    Public Sub Main()\n        Dim test As New ClassWithProperty()\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption)\n        Console.WriteLine(&quot;----------&quot;)\n        &#39; Get the type and PropertyInfo.\n        Dim t As Type = Type.GetType(&quot;ClassWithProperty&quot;)\n        Dim propInfo As PropertyInfo = t.GetProperty(&quot;Caption&quot;)\n\n        &#39; Get all the accessors.\n        Dim methInfos() As MethodInfo = propInfo.GetAccessors(True)\n        Console.WriteLine(&quot;There are {0} accessors.&quot;,\n                          methInfos.Length)\n        For ctr As Integer = 0 To methInfos.Length - 1\n           Dim m As MethodInfo = methInfos(ctr)\n           Console.WriteLine(&quot;Accessor #{0}:&quot;, ctr + 1)\n           Console.WriteLine(&quot;   Name: {0}&quot;, m.Name)\n           Console.WriteLine(&quot;   Visibility: {0}&quot;, GetVisibility(m))\n           Console.Write(&quot;   Property Type: &quot;)\n           &#39; Determine if this is the property getter or setter.\n&#39;&#39;           If (m.ReturnType == typeof(void))\n           If m.ReturnType Is GetType(Void) Then\n              Console.WriteLine(&quot;Setter&quot;)\n              Console.WriteLine(&quot;   Setting the property value.&quot;)\n              &#39; Set the value of the property.\n              m.Invoke(test, { &quot;The Modified Caption&quot; } )\n           Else\n              Console.WriteLine(&quot;Getter&quot;)\n              &#39; Get the value of the property.\n              Console.WriteLine(&quot;   Property Value: {0}&quot;,\n                                m.Invoke(test, {} ))\n           End If\n        Next\n        Console.WriteLine(&quot;----------&quot;)\n        Console.WriteLine(&quot;The Caption property: {0}&quot;, test.Caption)\n    End Sub\n    \n    Private Function GetVisibility(m As MethodInfo) As String\n       Dim visibility As String = &quot;&quot;\n       If m.IsPublic Then\n          Return &quot;Public&quot;\n       ElseIf m.IsPrivate Then\n          Return &quot;Private&quot;\n       Else\n          If m.IsFamily Then\n             visibility = &quot;Protected &quot;\n          ElseIf m.IsAssembly Then\n             visibility += &quot;Assembly&quot;\n          End If\n       End If\n       Return visibility\n    End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       The Caption property: A Default caption\n&#39;       ----------\n&#39;       There are 2 accessors.\n&#39;       Accessor #1:\n&#39;          Name: get_Caption\n&#39;          Visibility: Public\n&#39;          Property Type: Getter\n&#39;          Property Value: A Default caption\n&#39;       Accessor #2:\n&#39;          Name: set_Caption\n&#39;          Visibility: Public\n&#39;          Property Type: Setter\n&#39;          Setting the property value.\n&#39;       ----------\n&#39;       The Caption property: The Modified Caption\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetConstantValue\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetConstantValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConstantValue()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a literal value associated with the property by a compiler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetConstantValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is provided for designers of managed compilers and code analyzers.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not use this method in the reflection-only context, because it might cause code to execute. Use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetRawConstantValue_\" data-linktype=\"relative-path\">GetRawConstantValue</a> method instead.  </p>\n</div>\n<p> In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetGetMethod\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetGetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGetMethod()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public <code>get</code> accessor for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetGetMethod ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object representing the public <code>get</code> accessor for this property, or <code>null</code> if the <code>get</code> accessor is non-public or does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that provides an implementation for the abstract <code>GetGetMethod</code> method with the <code>nonPublic</code> parameter set to <code>false</code>.  </p>\n<p> To use the <code>GetGetMethod</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>. From the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, use the <code>GetGetMethod</code> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetGetMethod_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetGetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetGetMethod(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the public or non-public <code>get</code> accessor for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates whether a non-public <code>get</code> accessor should be returned. <code>true</code> if a non-public accessor is to be returned; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object representing the <code>get</code> accessor for this property, if <code>nonPublic</code> is <code>true</code>. Returns <code>null</code> if <code>nonPublic</code> is <code>false</code> and the <code>get</code> accessor is non-public, or if <code>nonPublic</code> is <code>true</code> but no <code>get</code> accessors exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The requested method is non-public and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> to reflect on this non-public method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> representing the get accessor.  </p>\n<p> To use the <code>GetGetMethod</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>. From the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, use the <code>GetGetMethod</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the public or non-public <code>get</code> accessor for the specified property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.GetGetMethod1 Example#1\">using System;\nusing System.Reflection;\n \n// Define a property.\npublic class Myproperty   \n{\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        set {if(caption!=value) {caption = value;}\n        }\n    }\n}\n \nclass Mypropertyinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine (&quot;<br>Reflection.PropertyInfo&quot;);\n \n        // Get the type and PropertyInfo for two separate properties.\n        Type MyTypea = Type.GetType(&quot;Myproperty&quot;);\n        PropertyInfo Mypropertyinfoa = MyTypea.GetProperty(&quot;Caption&quot;);\n        Type MyTypeb = Type.GetType(&quot;System.Reflection.MethodInfo&quot;);\n        PropertyInfo Mypropertyinfob = MyTypeb.GetProperty(&quot;MemberType&quot;);\n \n        // Get and display the GetGetMethod method for each property.\n        MethodInfo Mygetmethodinfoa = Mypropertyinfoa.GetGetMethod();\n        Console.Write (&quot;<br>GetAccessor for &quot; + Mypropertyinfoa.Name\n            + &quot; returns a &quot; + Mygetmethodinfoa.ReturnType);\n        MethodInfo Mygetmethodinfob = Mypropertyinfob.GetGetMethod();\n        Console.Write (&quot;<br>GetAccessor for &quot; + Mypropertyinfob.Name\n            + &quot; returns a &quot; + Mygetmethodinfob.ReturnType);\n \n        // Display the GetGetMethod without using the MethodInfo.\n        Console.Write (&quot;<br>&quot; + MyTypea.FullName + &quot;.&quot; + Mypropertyinfoa.Name\n            + &quot; GetGetMethod - &quot; + Mypropertyinfoa.GetGetMethod());\n        Console.Write (&quot;<br>&quot; + MyTypeb.FullName + &quot;.&quot; + Mypropertyinfob.Name\n            + &quot; GetGetMethod - &quot; + Mypropertyinfob.GetGetMethod());\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.GetGetMethod1 Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a property.\nPublic Class Myproperty\n    Private myCaption As String = &quot;A Default caption&quot;\n\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nClass Mypropertyinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf &amp; &quot;Reflection.PropertyInfo&quot;)\n\n        &#39; Get the type and PropertyInfo for two separate properties.\n        Dim MyTypea As Type = Type.GetType(&quot;Myproperty&quot;)\n        Dim Mypropertyinfoa As PropertyInfo = MyTypea.GetProperty(&quot;Caption&quot;)\n        Dim MyTypeb As Type = Type.GetType(&quot;System.Reflection.MethodInfo&quot;)\n        Dim Mypropertyinfob As PropertyInfo = MyTypeb.GetProperty(&quot;MemberType&quot;)\n\n        &#39; Get and display the GetGetMethod Method for each property.\n        Dim Mygetmethodinfoa As MethodInfo = Mypropertyinfoa.GetGetMethod()\n        Console.WriteLine(&quot;GetAccessor for &quot; &amp; _\n           Mypropertyinfoa.Name &amp; &quot; returns a &quot; &amp; _\n           Mygetmethodinfoa.ReturnType.ToString())\n        Dim Mygetmethodinfob As MethodInfo = Mypropertyinfob.GetGetMethod()\n        Console.WriteLine(&quot;GetAccessor for &quot; &amp; _\n           Mypropertyinfob.Name &amp; &quot; returns a &quot; &amp; _\n           Mygetmethodinfob.ReturnType.ToString())\n\n        &#39; Display the GetGetMethod without using the MethodInfo.\n        Console.WriteLine(MyTypea.FullName &amp; &quot;.&quot; &amp; _\n           Mypropertyinfoa.Name &amp; &quot; GetGetMethod - &quot; &amp; _\n           Mypropertyinfoa.GetGetMethod().ToString())\n        Console.WriteLine(MyTypeb.FullName &amp; &quot;.&quot; &amp; _\n           Mypropertyinfob.Name &amp; &quot; GetGetMethod - &quot; &amp; _\n           Mypropertyinfob.GetGetMethod().ToString())\n        Return 0\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.GetGetMethod1 Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a property.\npublic ref class Myproperty\n{\nprivate:\n   String^ caption;\n\npublic:\n   Myproperty()\n      : caption( &quot;A Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.PropertyInfo&quot; );\n   \n   // Get the type and PropertyInfo for two separate properties.\n   Type^ MyTypea = Type::GetType( &quot;Myproperty&quot; );\n   PropertyInfo^ Mypropertyinfoa = MyTypea-&gt;GetProperty( &quot;Caption&quot; );\n   Type^ MyTypeb = Type::GetType( &quot;System.Reflection.MethodInfo&quot; );\n   PropertyInfo^ Mypropertyinfob = MyTypeb-&gt;GetProperty( &quot;MemberType&quot; );\n   \n   // Get and display the GetGetMethod method for each property.\n   MethodInfo^ Mygetmethodinfoa = Mypropertyinfoa-&gt;GetGetMethod();\n   Console::Write( &quot;<br>GetAccessor for {0} returns a {1}&quot;, Mypropertyinfoa-&gt;Name, Mygetmethodinfoa-&gt;ReturnType );\n   MethodInfo^ Mygetmethodinfob = Mypropertyinfob-&gt;GetGetMethod();\n   Console::Write( &quot;<br>GetAccessor for {0} returns a {1}&quot;, Mypropertyinfob-&gt;Name, Mygetmethodinfob-&gt;ReturnType );\n   \n   // Display the GetGetMethod without using the MethodInfo.\n   Console::Write( &quot;<br>{0}.{1} GetGetMethod - {2}&quot;, MyTypea-&gt;FullName, Mypropertyinfoa-&gt;Name, Mypropertyinfoa-&gt;GetGetMethod() );\n   Console::Write( &quot;<br>{0}.{1} GetGetMethod - {2}&quot;, MyTypeb-&gt;FullName, Mypropertyinfob-&gt;Name, Mypropertyinfob-&gt;GetGetMethod() );\n   return 0;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetIndexParameters\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetIndexParameters_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIndexParameters()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns an array of all the index parameters for the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <code>ParameterInfo</code> containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Extract any required parameter information from the returned array.  </p>\n<p> To use the <code>GetIndexParameters</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, use the <code>GetIndexParameters</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the index parameters of the specified property.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.GetIndexParameters Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// A class that contains some properties.\npublic ref class MyProperty\n{\nprivate:\n\n   // Define a simple string property.\n   String^ caption;\n\npublic:\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\nprivate:\n\n   // A very limited indexer that gets or sets one of four \n   // strings.\n   array&lt;String^&gt;^strings;\n\npublic:\n   MyProperty()\n   {\n      array&lt;String^&gt;^temp0 = {&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,&quot;jkl&quot;};\n      strings = temp0;\n   }\n\n\n   property String^ Item [int]\n   {\n      String^ get( int Index )\n      {\n         return strings[ Index ];\n      }\n\n      void set( int Index, String^ value )\n      {\n         strings[ Index ] = value;\n      }\n\n   }\n\n};\n\nint main()\n{\n   \n   // Get the type and PropertyInfo.\n   Type^ t = Type::GetType( &quot;MyProperty&quot; );\n   PropertyInfo^ pi = t-&gt;GetProperty( &quot;Caption&quot; );\n   \n   // Get the public GetIndexParameters method.\n   array&lt;ParameterInfo^&gt;^parms = pi-&gt;GetIndexParameters();\n   Console::WriteLine( &quot;<br>{0}.{1} has {2} parameters.&quot;, t-&gt;FullName, pi-&gt;Name, parms-&gt;GetLength( 0 ) );\n   \n   // Display a property that has parameters. \n   pi = t-&gt;GetProperty( &quot;Item&quot; );\n   parms = pi-&gt;GetIndexParameters();\n   Console::WriteLine( &quot;{0}.{1} has {2} parameters.&quot;, t-&gt;FullName, pi-&gt;Name, parms-&gt;GetLength( 0 ) );\n   for ( int i = 0; i &lt; parms-&gt;GetLength( 0 ); i++ )\n   {\n      Console::WriteLine( &quot;    Parameter: {0}&quot;, parms[ i ]-&gt;Name );\n\n   }\n   return 0;\n}\n\n/*\n This example produces the following output:\n MyProperty.Caption has 0 parameters.\n MyProperty.Item has 1 parameters.\n    Parameter: Index\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.GetIndexParameters Example#1\">Imports System\nImports System.Reflection\nImports System.Collections\nImports Microsoft.VisualBasic\n\n&#39; A test class that has some properties.\nPublic Class MyProperty\n\n    &#39; Define a simple string property.\n    Private myCaption As String = &quot;A Default caption&quot;\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\n\n    &#39; A very limited indexed default property that gets or\n    &#39; sets one of four string values.\n    Private strings() As String = {&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;}\n    Public Default Property Item(ByVal Index As Integer) As String\n        Get\n            Return strings(Index)\n        End Get\n        Set\n            strings(Index) = Value\n        End Set \n    End Property\nEnd Class\n\nPublic Class Example\n\n    Public Shared Function Main() As Integer\n\n        &#39; Get the type and PropertyInfo.\n        Dim t As Type = GetType(MyProperty)\n        Dim pi As PropertyInfo = t.GetProperty(&quot;Caption&quot;)\n\n        &#39; Get an array containing the parameters (if any).\n        Dim params As ParameterInfo() = pi.GetIndexParameters()\n        Console.WriteLine(vbCrLf &amp; t.FullName &amp; &quot;.&quot; &amp; pi.Name &amp; _\n           &quot; has &quot; &amp; params.GetLength(0) &amp; &quot; parameters.&quot;)\n\n        &#39; Display a property that has parameters.\n        pi = t.GetProperty(&quot;Item&quot;)\n        params = pi.GetIndexParameters()\n        Console.WriteLine(t.FullName &amp; &quot;.&quot; &amp; pi.Name &amp; _\n           &quot; has &quot; &amp; params.GetLength(0) &amp; &quot; parameters.&quot;)\n        For Each p As ParameterInfo In params\n            Console.WriteLine(&quot;   Parameter: &quot; &amp; p.Name)\n        Next\n\n        Return 0\n    End Function\nEnd Class\n\n&#39; This example produces the following output:\n&#39; MyProperty.Caption has 0 parameters.\n&#39; MyProperty.Item has 1 parameters.\n&#39;    Parameter: Index\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.GetIndexParameters Example#1\">using System;\nusing System.Reflection;\n \n// A class that contains some properties.\npublic class MyProperty   \n{\n    // Define a simple string property.\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        set {if(caption!=value) {caption = value;}\n        }\n    }\n\n    // A very limited indexer that gets or sets one of four \n    // strings.\n    private string[] strings = {&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;};\n    public string this[int Index]    \n    {\n        get\n        {\n            return strings[Index];\n        }\n        set\n        {\n            strings[Index] = value;\n        }\n    }\n}\n \nclass Mypropertyinfo\n{\n    public static int Main()\n    {\n        // Get the type and PropertyInfo.\n        Type t = Type.GetType(&quot;MyProperty&quot;);\n        PropertyInfo pi = t.GetProperty(&quot;Caption&quot;);\n \n        // Get the public GetIndexParameters method.\n        ParameterInfo[] parms = pi.GetIndexParameters();\n        Console.WriteLine(&quot;\\r<br>&quot; + t.FullName + &quot;.&quot; + pi.Name\n            + &quot; has &quot; + parms.GetLength(0) + &quot; parameters.&quot;);\n \n        // Display a property that has parameters. The default \n        // name of an indexer is &quot;Item&quot;.\n        pi = t.GetProperty(&quot;Item&quot;);\n        parms = pi.GetIndexParameters();\n        Console.WriteLine(t.FullName + &quot;.&quot; + pi.Name + &quot; has &quot; + \n            parms.GetLength(0) + &quot; parameters.&quot;);\n        foreach( ParameterInfo p in parms )\n        {\n            Console.WriteLine(&quot;   Parameter: &quot; + p.Name);\n        }\n\n        return 0;\n    }\n}\n/*\n This example produces the following output:\n MyProperty.Caption has 0 parameters.\n MyProperty.Item has 1 parameters.\n    Parameter: Index\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetOptionalCustomModifiers\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetOptionalCustomModifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOptionalCustomModifiers()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of types representing the optional custom modifiers of the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetOptionalCustomModifiers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that identify the optional custom modifiers of the current property, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isimplicitlydereferenced\" data-linktype=\"relative-path\">IsImplicitlyDereferenced</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetOptionalCustomModifiers and <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetRequiredCustomModifiers_\" data-linktype=\"relative-path\">GetRequiredCustomModifiers</a> methods are provided for designers of managed compilers. For more information on custom modifiers, see <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a> and related classes in the <a class=\"xref\" href=\"system.runtime.compilerservices\" data-linktype=\"relative-path\">System.Runtime.CompilerServices</a> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetRawConstantValue\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetRawConstantValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRawConstantValue()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a literal value associated with the property by a compiler.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetRawConstantValue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is provided for designers of managed compilers and code analyzers.  </p>\n<p> This method can be used in both the execution context and the reflection-only context.  </p>\n<p> In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetRequiredCustomModifiers\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetRequiredCustomModifiers_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRequiredCustomModifiers()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an array of types representing the required custom modifiers of the property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type[] GetRequiredCustomModifiers ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that identify the required custom modifiers of the current property, such as <a class=\"xref\" href=\"system.runtime.compilerservices.isconst\" data-linktype=\"relative-path\">IsConst</a> or <a class=\"xref\" href=\"system.runtime.compilerservices.isimplicitlydereferenced\" data-linktype=\"relative-path\">IsImplicitlyDereferenced</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetOptionalCustomModifiers_\" data-linktype=\"relative-path\">GetOptionalCustomModifiers</a> and GetRequiredCustomModifiers methods are provided for designers of managed compilers. For more information on custom modifiers, see <a class=\"xref\" href=\"system.runtime.compilerservices.isboxed\" data-linktype=\"relative-path\">IsBoxed</a> and related classes in the <a class=\"xref\" href=\"system.runtime.compilerservices\" data-linktype=\"relative-path\">System.Runtime.CompilerServices</a> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetSetMethod\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetSetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSetMethod()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public <code>set</code> accessor for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetSetMethod ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The <code>MethodInfo</code> object representing the <code>Set</code> method for this property if the <code>set</code> accessor is public, or <code>null</code> if the <code>set</code> accessor is not public.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This is a convenience method that provides an implementation for the abstract <code>GetSetMethod</code> method with the <code>nonPublic</code> parameter set to <code>false</code>.  </p>\n<p> To use the <code>GetSetMethod</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>. From the <code>PropertyInfo</code>, use the <code>GetSetMethod</code> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetSetMethod_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetSetMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSetMethod(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the <code>set</code> accessor for this property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates whether the accessor should be returned if it is non-public. <code>true</code> if a non-public accessor is to be returned; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>This property&#39;s <code>Set</code> method, or <code>null</code>, as shown in the following table.  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Condition<br>\n </th></tr></thead><tbody><tr><td> The <code>Set</code> method for this property.<br>\n </td><td> The <code>set</code> accessor is public.<br>\n -or-<br>\n <code>nonPublic</code> is <code>true</code> and the <code>set</code> accessor is non-public.<br>\n </td></tr><tr><td><code>null</code></td><td><code>nonPublic</code> is <code>true</code>, but the property is read-only.<br>\n -or-<br>\n <code>nonPublic</code> is <code>false</code> and the <code>set</code> accessor is non-public.<br>\n -or-<br>\n There is no <code>set</code> accessor.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The requested method is non-public and the caller does not have <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> to reflect on this non-public method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To use the <code>GetSetMethod</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>. From the <code>PropertyInfo</code>, use the <code>GetSetMethod</code> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the <code>set</code> accessor for the specified property.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.GetSetMethod1 Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a property.\npublic ref class Myproperty\n{\nprivate:\n   String^ caption;\n\npublic:\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;<br>Reflection.PropertyInfo&quot; );\n   \n   // Get the type and PropertyInfo for two separate properties.\n   Type^ MyTypea = Type::GetType( &quot;Myproperty&quot; );\n   PropertyInfo^ Mypropertyinfoa = MyTypea-&gt;GetProperty( &quot;Caption&quot; );\n   Type^ MyTypeb = Type::GetType( &quot;System.Text.StringBuilder&quot; );\n   PropertyInfo^ Mypropertyinfob = MyTypeb-&gt;GetProperty( &quot;Length&quot; );\n   \n   // Get and display the GetSetMethod method for each property.\n   MethodInfo^ Mygetmethodinfoa = Mypropertyinfoa-&gt;GetSetMethod();\n   Console::Write( &quot;<br>SetAccessor for {0} returns a {1}&quot;, Mypropertyinfoa-&gt;Name, Mygetmethodinfoa-&gt;ReturnType );\n   MethodInfo^ Mygetmethodinfob = Mypropertyinfob-&gt;GetSetMethod();\n   Console::Write( &quot;<br>SetAccessor for {0} returns a {1}&quot;, Mypropertyinfob-&gt;Name, Mygetmethodinfob-&gt;ReturnType );\n   \n   // Display the GetSetMethod without using the MethodInfo.\n   Console::Write( &quot;<br><br>{0}.{1} GetSetMethod - {2}&quot;, MyTypea-&gt;FullName, Mypropertyinfoa-&gt;Name, Mypropertyinfoa-&gt;GetSetMethod() );\n   Console::Write( &quot;<br>{0}.{1} GetSetMethod - {2}&quot;, MyTypeb-&gt;FullName, Mypropertyinfob-&gt;Name, Mypropertyinfob-&gt;GetSetMethod() );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.GetSetMethod1 Example#1\">using System;\nusing System.Reflection;\n \n// Define a property.\npublic class Myproperty   \n{\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        set {if(caption!=value) {caption = value;}\n        }\n    }\n}\n \nclass Mypropertyinfo\n{\n    public static int Main()\n    {\n        Console.WriteLine (&quot;<br>Reflection.PropertyInfo&quot;);\n \n        // Get the type and PropertyInfo for two separate properties.\n        Type MyTypea = Type.GetType(&quot;Myproperty&quot;);\n        PropertyInfo Mypropertyinfoa = MyTypea.GetProperty(&quot;Caption&quot;);\n        Type MyTypeb = Type.GetType(&quot;System.Text.StringBuilder&quot;);\n        PropertyInfo Mypropertyinfob = MyTypeb.GetProperty(&quot;Length&quot;);\n        // Get and display the GetSetMethod method for each property.\n        MethodInfo Mygetmethodinfoa = Mypropertyinfoa.GetSetMethod();\n        Console.Write (&quot;<br>SetAccessor for &quot; + Mypropertyinfoa.Name\n            + &quot; returns a &quot; + Mygetmethodinfoa.ReturnType);\n        MethodInfo Mygetmethodinfob = Mypropertyinfob.GetSetMethod();\n        Console.Write (&quot;<br>SetAccessor for &quot; + Mypropertyinfob.Name\n            + &quot; returns a &quot; + Mygetmethodinfob.ReturnType);\n \n        // Display the GetSetMethod without using the MethodInfo.\n        Console.Write (&quot;<br><br>&quot; + MyTypea.FullName + &quot;.&quot;\n            + Mypropertyinfoa.Name + &quot; GetSetMethod - &quot;\n            + Mypropertyinfoa.GetSetMethod());\n        Console.Write (&quot;<br>&quot; + MyTypeb.FullName + &quot;.&quot;\n            + Mypropertyinfob.Name + &quot; GetSetMethod - &quot;\n            + Mypropertyinfob.GetSetMethod());\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.GetSetMethod1 Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a property.\nPublic Class Myproperty\n    Private myCaption As String = &quot;A Default caption&quot;\n\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nClass Mypropertyinfo\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf &amp; &quot;Reflection.PropertyInfo&quot;)\n\n        &#39; Get the type and PropertyInfo for two separate properties.\n        Dim MyTypea As Type = Type.GetType(&quot;Myproperty&quot;)\n        Dim Mypropertyinfoa As PropertyInfo = MyTypea.GetProperty(&quot;Caption&quot;)\n        Dim MyTypeb As Type = Type.GetType(&quot;System.Text.StringBuilder&quot;)\n        Dim Mypropertyinfob As PropertyInfo = MyTypeb.GetProperty(&quot;Length&quot;)\n        &#39; Get and display the GetSetMethod method for each property.\n        Dim Mygetmethodinfoa As MethodInfo = Mypropertyinfoa.GetSetMethod()\n        Console.WriteLine(&quot;SetAccessor for &quot; &amp; Mypropertyinfoa.Name &amp; _\n           &quot; returns a &quot; &amp; Mygetmethodinfoa.ReturnType.ToString())\n        Dim Mygetmethodinfob As MethodInfo = Mypropertyinfob.GetSetMethod()\n        Console.WriteLine(&quot;SetAccessor for &quot; &amp; Mypropertyinfob.Name &amp; _\n           &quot; returns a &quot; &amp; Mygetmethodinfob.ReturnType.ToString())\n\n        &#39; Display the GetSetMethod without using the MethodInfo.\n        Console.WriteLine(MyTypea.FullName &amp; &quot;.&quot; &amp; Mypropertyinfoa.Name &amp; _\n           &quot; GetSetMethod - &quot; &amp; Mypropertyinfoa.GetSetMethod().ToString())\n        Console.WriteLine(MyTypeb.FullName &amp; &quot;.&quot; &amp; Mypropertyinfob.Name &amp; _\n           &quot; GetSetMethod - &quot; &amp; Mypropertyinfob.GetSetMethod().ToString())\n        Return 0\n    End Function\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetValue_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the property value of a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object GetValue (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose property value will be returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The property value of the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You call the GetValue overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <a class=\"xref\" href=\"system.reflection.targetparametercountexception\" data-linktype=\"relative-path\">TargetParameterCountException</a> exception. You can determine whether a property is indexed or not by calling the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetIndexParameters_\" data-linktype=\"relative-path\">GetIndexParameters</a> method. If the length of the returned <a class=\"xref\" href=\"system.reflection.parameterinfo\" data-linktype=\"relative-path\">ParameterInfo</a> array is zero, the property is not indexed.  </p>\n<p> This is a convenience method that provides an implementation for the abstract [GetValue(Object,â€‚BindingFlags,â€‚Binder,â€‚Object&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt; method with the <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a> parameter set to <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">System.Reflection.BindingFlags</a>, the <a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a> set to <code>null</code>, the object array of index values set to <code>null</code>, and the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> set to <code>null</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>Planet</code> class that has two properties: <code>Name</code>, the name of the planet; and <code>Distance</code>, the planet&#39;s distance from Earth. The example instantiates a <code>Planet</code> object that represents the planet Jupiter and passes it to a <code>GetPropertyValues</code> method that displays information about the properties and uses the GetValue method to get the value of each <code>Planet</code> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.PropertyInfo.GetValue#1\">using System;\nusing System.Reflection;\n\npublic class Planet\n{\n   private String planetName;\n   private Double distanceFromEarth;\n   \n   public Planet(String name, Double distance)\n   {\n      planetName = name;\n      distanceFromEarth = distance;\n   } \n\n   public String Name\n   { get { return planetName; } }\n   \n   public Double Distance \n   { get { return distanceFromEarth; }\n     set { distanceFromEarth = value; } }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Planet jupiter = new Planet(&quot;Jupiter&quot;, 3.65e08);\n      GetPropertyValues(jupiter);\n   }\n   \n   private static void GetPropertyValues(Object obj)\n   {\n      Type t = obj.GetType();\n      Console.WriteLine(&quot;Type is: {0}&quot;, t.Name);\n      PropertyInfo[] props = t.GetProperties();\n      Console.WriteLine(&quot;Properties (N = {0}):&quot;, \n                        props.Length);\n      foreach (var prop in props)\n         if (prop.GetIndexParameters().Length == 0)\n            Console.WriteLine(&quot;   {0} ({1}): {2}&quot;, prop.Name,\n                              prop.PropertyType.Name,\n                              prop.GetValue(obj));\n         else\n            Console.WriteLine(&quot;   {0} ({1}): &lt;Indexed&gt;&quot;, prop.Name,\n                              prop.PropertyType.Name);\n                                        \n   }\n}\n// The example displays the following output:\n//       Type is: Planet\n//       Properties (N = 2):\n//          Name (String): Jupiter\n//          Distance (Double): 365000000\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.PropertyInfo.GetValue#1\">Imports System.Reflection\n\nPublic Class Planet\n   Private planetName As String\n   Private distanceFromEarth As Double\n   \n   Public Sub New(name As String, distance As Double)\n      planetName = name\n      distanceFromEarth = distance\n   End Sub \n\n   Public ReadOnly Property Name As String\n      Get\n         Return planetName\n      End Get\n   End Property\n   \n   Public Property Distance As Double\n      Get\n         Return distanceFromEarth\n      End Get\n      Set\n         distanceFromEarth = value\n      End Set\n   End Property\nEnd Class\n\nModule Example\n   Public Sub Main()\n      Dim jupiter As New Planet(&quot;Jupiter&quot;, 3.65e08);\n      GetPropertyValues(jupiter)\n   End Sub\n   \n   Private Sub GetPropertyValues(obj As Object)\n      Dim t As Type = obj.GetType()\n      Console.WriteLine(&quot;Type is: {0}&quot;, t.Name)\n      Dim props() As PropertyInfo = t.GetProperties()\n      Console.WriteLine(&quot;Properties (N = {0}):&quot;, \n                        props.Length)\n      For Each prop In props\n         If prop.GetIndexParameters().Length = 0 Then\n            Console.WriteLine(&quot;   {0} ({1}): {2}&quot;, prop.Name,\n                              prop.PropertyType.Name,\n                              prop.GetValue(obj))\n         Else\n            Console.WriteLine(&quot;   {0} ({1}): &lt;Indexed&gt;&quot;, prop.Name,\n                              prop.PropertyType.Name)\n         End If                  \n      Next                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Type is: Planet\n&#39;       Properties (N = 2):\n&#39;          Name (String): Jupiter\n&#39;          Distance (Double): 365000000\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetValue_System_Object_System_Object___\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Object,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Returns the property value of a specified object with optional index values for indexed properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual object GetValue (object obj, object[] index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose property value will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be <code>null</code> for non-indexed properties.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The property value of the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>index</code> array does not contain the type of arguments needed.  </p>\n<p> -or-  </p>\n<p> The property&#39;s <code>get</code> accessor is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The object does not match the target type, or a property is an instance property but <code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetparametercountexception\" data-linktype=\"relative-path\">TargetParameterCountException</a></div>\r\n                  </div>\r\n                  <p>The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> There was an illegal attempt to access a private or protected method inside a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <span class=\"xref\">stem.Exception.InnerException*</span> property indicates the reason for the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine whether a property is indexed, use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetIndexParameters_\" data-linktype=\"relative-path\">GetIndexParameters</a> method. If the resulting array has 0 (zero) elements, the property is not indexed.  </p>\n<p> This is a convenience method that provides an implementation for the abstract <code>GetValue</code> method with a <code>BindingFlags</code> parameter of <code>Default</code>, the <code>Binder</code> set to <code>null</code>, and the <code>CultureInfo</code> set to <code>null</code>.  </p>\n<p> Because static properties belong to the type, not individual objects, get static properties by passing <code>null</code> as the object argument. For example, use the following code to get the static <code>CurrentCulture</code> property of <code>CultureInfo</code> :  </p>\n<pre><code>PropertyInfo CurCultProp =   \n    (typeof(CultureInfo)).GetProperty(&quot;CurrentCulture&quot;);   \nConsole.WriteLine(&quot;CurrCult: &quot; +  \n    CurCultProp.GetValue(null,null));  \n</code></pre><p> To use the <code>GetValue</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, use the <code>GetValue</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to get the value of an indexed property. The <a class=\"xref\" href=\"system.string#System_String_Chars_\" data-linktype=\"relative-path\">Chars</a> property is the default property (the indexer in C#) of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.PropertyInfo.GetValue Example#1\">using System;\nusing System.Reflection;\n\nclass Example\n{\n    public static void Main()\n    {\n        string test = &quot;abcdefghijklmnopqrstuvwxyz&quot;;\n\n        // Get a PropertyInfo object representing the Chars property.\n        PropertyInfo pinfo = typeof(string).GetProperty(&quot;Chars&quot;);\n\n        // Show the first, seventh, and last letters\n        ShowIndividualCharacters(pinfo, test, 0, 6, test.Length - 1);\n\n        // Show the complete string.\n        Console.Write(&quot;The entire string: &quot;);\n        for (int x = 0; x &lt; test.Length; x++)\n        {\n            Console.Write(pinfo.GetValue(test, new Object[] {x}));\n        }\n        Console.WriteLine();\n    }\n\n    static void ShowIndividualCharacters(PropertyInfo pinfo, \n                                         object value,\n                                         params int[] indexes)\n    {\n       foreach (var index in indexes) \n          Console.WriteLine(&quot;Character in position {0,2}: &#39;{1}&#39;&quot;,\n                            index, pinfo.GetValue(value, new object[] { index }));\n       Console.WriteLine();                          \n    }                                      \n}\n// The example displays the following output:\n//    Character in position  0: &#39;a&#39;\n//    Character in position  6: &#39;g&#39;\n//    Character in position 25: &#39;z&#39;\n//    \n//    The entire string: abcdefghijklmnopqrstuvwxyz\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.PropertyInfo.GetValue Example#1\">Imports System.Reflection\n\nModule Example\n    Sub Main()\n        Dim test As String = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n\n        &#39; Get a PropertyInfo object representing the Chars property.\n        Dim pinfo As PropertyInfo = GetType(String).GetProperty(&quot;Chars&quot;)\n\n        &#39; Show the first, seventh, and last characters.\n        ShowIndividualCharacters(pinfo, test, { 0, 6, test.Length - 1 })\n\n        &#39; Show the complete string.\n        Console.Write(&quot;The entire string: &quot;)\n        For x As Integer = 0 To test.Length - 1\n            Console.Write(pinfo.GetValue(test, { x }))\n        Next\n        Console.WriteLine()\n    End Sub\n\n    Sub ShowIndividualCharacters(pinfo As PropertyInfo, \n                                 value As Object, \n                                 ParamArray indexes() As Integer)\n       For Each index In indexes \n          Console.WriteLine(&quot;Character in position {0,2}: &#39;{1}&#39;&quot;,\n                            index, pinfo.GetValue(value, { index }))\n       Next\n       Console.WriteLine()                          \n    End Sub   \nEnd Module\n&#39; The example displays the following output:\n&#39;       Character in position  0: &#39;a&#39;\n&#39;       Character in position  6: &#39;g&#39;\n&#39;       Character in position 25: &#39;z&#39;\n&#39;       \n&#39;       The entire string: abcdefghijklmnopqrstuvwxyz\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_GetValue_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Object,BindingFlags,Binder,Object[],CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose property value will be returned.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the following enumeration members that specify the invocation attribute: <code>InvokeMethod</code>, <code>CreateInstance</code>, <code>Static</code>, <code>GetField</code>, <code>SetField</code>, <code>GetProperty</code>, and <code>SetProperty</code>. You must specify a suitable invocation attribute. For example, to invoke a static member, set the <code>Static</code> flag.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is <code>null</code>, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional index values for indexed properties. This value should be <code>null</code> for non-indexed properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The culture for which the resource is to be localized. If the resource is not localized for this culture, the <span class=\"xref\">stem.Globalization.CultureInfo.Parent*</span> property will be called successively in search of a match. If this value is <code>null</code>, the culture-specific information is obtained from the <span class=\"xref\">stem.Globalization.CultureInfo.CurrentUICulture*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The property value of the specified object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>index</code> array does not contain the type of arguments needed.  </p>\n<p> -or-  </p>\n<p> The property&#39;s <code>get</code> accessor is not found.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <p>The object does not match the target type, or a property is an instance property but <code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetparametercountexception\" data-linktype=\"relative-path\">TargetParameterCountException</a></div>\r\n                  </div>\r\n                  <p>The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>There was an illegal attempt to access a private or protected method inside a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <span class=\"xref\">stem.Exception.InnerException*</span> property indicates the reason for the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To determine whether a property is indexed, use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetIndexParameters_\" data-linktype=\"relative-path\">GetIndexParameters</a> method. If the resulting array has 0 (zero) elements, the property is not indexed.  </p>\n<p> Because static properties belong to the type, not individual objects, get static properties by passing <code>null</code> as the object argument. For example, use the following code to get the static <code>CurrentCulture</code> property of <code>CultureInfo</code> :  </p>\n<pre><code>PropertyInfo CurCultProp =   \n       (typeof(CultureInfo)).GetProperty(&quot;CurrentCulture&quot;);   \nConsole.WriteLine(&quot;CurrCult: &quot; +  \n       CurCultProp.GetValue(null,null));  \n</code></pre><p> To use the <code>GetValue</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, use the <code>GetValue</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_SetValue_System_Object_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the property value of a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetValue (object obj, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose property value will be set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new property value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property&#39;s <code>set</code> accessor is not found.  </p>\n<p> -or-  </p>\n<p> <code>value</code> cannot be converted to the type of <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The type of <code>obj</code> does not match the target type, or a property is an instance property but <code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> There was an illegal attempt to access a private or protected method inside a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while setting the property value. The <span class=\"xref\">stem.Exception.InnerException*</span> property indicates the reason for the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetValue overload sets the value of a non-indexed property. To determine whether a property is indexed, call the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetIndexParameters_\" data-linktype=\"relative-path\">GetIndexParameters</a> method. If the resulting array has 0 (zero) elements, the property is not indexed. To set the value of an indexed property, call the [SetValue(Object,â€‚Object,â€‚Object&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt; overload.  </p>\n<p> If the property type of this <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object is a value type and <code>value</code> is <code>null</code>, the property will be set to the default value for that type.  </p>\n<p> This is a convenience method that calls the runtime implementation of the abstract [SetValue(Object,â€‚Object,â€‚BindingFlags,â€‚Binder,â€‚Object&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt; method, specifying <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">System.Reflection.BindingFlags</a> for the <code>BindingFlags</code> parameter, <code>null</code> for <code>Binder</code>, <code>null</code> for <code>Object[]</code>, and <code>null</code> for <code>CultureInfo</code>.  </p>\n<p> To use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method, first get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the class. From the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object. From the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object, call the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example declares a class named <code>Example</code> with one <code>static</code> (<code>Shared</code> in Visual Basic) and one instance property. The example uses the SetValue method to change the original property values and displays the original and final values.  </p>\n<pre><code class=\"lang-cpp\" name=\"PropertyInfo.SetValue#2\">using namespace System;\nusing namespace System::Reflection;\n\nref class Example\n{\nprivate:\n    int static _sharedProperty = 41;\n    int _instanceProperty;\n\n\npublic:\n    Example()\n    {\n        _instanceProperty = 42;\n    };\n\n    static property int SharedProperty\n    {\n        int get() { return _sharedProperty; }\n        void set(int value) { _sharedProperty = value; }\n    };\n\n    property int InstanceProperty \n    {\n        int get() { return _instanceProperty; }\n        void set(int value) { _instanceProperty = value; }\n    };\n\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;Initial value of static property: {0}&quot;,\n                       Example::SharedProperty);\n\n    PropertyInfo^ piShared = \n        Example::typeid-&gt;GetProperty(&quot;SharedProperty&quot;);\n    piShared-&gt;SetValue(nullptr, 76, nullptr);\n                 \n    Console::WriteLine(&quot;New value of static property: {0}&quot;,\n                       Example::SharedProperty);\n\n\n    Example^ exam = gcnew Example();\n\n    Console::WriteLine(&quot;<br>Initial value of instance property: {0}&quot;, \n            exam-&gt;InstanceProperty);\n\n    PropertyInfo^ piInstance = \n        Example::typeid-&gt;GetProperty(&quot;InstanceProperty&quot;);\n    piInstance-&gt;SetValue(exam, 37, nullptr);\n                 \n    Console::WriteLine(&quot;New value of instance property: {0}&quot;,\n                       exam-&gt;InstanceProperty);\n};\n\n/* The example displays the following output:\n      Initial value of static property: 41\n      New value of static property: 76\n\n      Initial value of instance property: 42\n      New value of instance property: 37\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"PropertyInfo.SetValue#2\">using System;\nusing System.Reflection;\n\nclass Example\n{\n    private static int _staticProperty = 41;\n    private int _instanceProperty = 42;\n\n    // Declare a public static property.\n    public static int StaticProperty\n    {\n        get { return _staticProperty; }\n        set { _staticProperty = value; }\n    }\n\n    // Declare a public instance property.\n    public int InstanceProperty\n    {\n        get { return _instanceProperty; }\n        set { _instanceProperty = value; }\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;Initial value of static property: {0}&quot;,\n            Example.StaticProperty);\n\n        // Get a type object that represents the Example type.\n        Type examType = typeof(Example);\n\n        // Change the static property value.\n        PropertyInfo piShared = examType.GetProperty(&quot;StaticProperty&quot;);\n        piShared.SetValue(null, 76);\n                 \n        Console.WriteLine(&quot;New value of static property: {0}&quot;,\n                          Example.StaticProperty);\n\n        // Create an instance of the Example class.\n        Example exam = new Example();\n\n        Console.WriteLine(&quot;<br>Initial value of instance property: {0}&quot;, \n                          exam.InstanceProperty);\n\n        // Change the instance property value.\n        PropertyInfo piInstance = examType.GetProperty(&quot;InstanceProperty&quot;);\n        piInstance.SetValue(exam, 37);\n                 \n        Console.WriteLine(&quot;New value of instance property: {0}&quot;,\n                          exam.InstanceProperty);\n    }\n}\n// The example displays the following output:\n//       Initial value of static property: 41\n//       New value of static property: 76\n//\n//       Initial value of instance property: 42\n//       New value of instance property: 37\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertyInfo.SetValue#2\">Imports System.Reflection\n\nClass Example\n    Private Shared _sharedProperty As Integer = 41\n    Private _instanceProperty As Integer = 42\n\n    &#39; Declare a public static (shared) property.\n    Public Shared Property SharedProperty As Integer\n        Get \n            Return _sharedProperty\n        End Get\n        Set\n            _sharedProperty = Value\n        End Set\n    End Property\n\n    &#39; Declare a public instance property.\n    Public Property InstanceProperty As Integer\n        Get \n            Return _instanceProperty\n        End Get\n        Set\n            _instanceProperty = Value\n        End Set\n    End Property\n\n    Public Shared Sub Main()\n        Console.WriteLine(&quot;Initial value of shared property: {0}&quot;,\n                          Example.SharedProperty)\n\n        &#39; Get a type object that represents the Example type.\n        Dim examType As Type = GetType(Example)\n        \n        &#39; Change the static (shared) property value.\n        Dim piShared As PropertyInfo = examType.GetProperty(&quot;SharedProperty&quot;)\n        piShared.SetValue(Nothing, 76)\n                 \n        Console.WriteLine(&quot;New value of shared property: {0}&quot;,\n                          Example.SharedProperty)\n        Console.WriteLine()\n\n        &#39; Create an instance of the Example class.\n        Dim exam As New Example\n\n        Console.WriteLine(&quot;Initial value of instance property: {0}&quot;,\n                          exam.InstanceProperty)\n\n        &#39; Change the instance property value.\n        Dim piInstance As PropertyInfo = examType.GetProperty(&quot;InstanceProperty&quot;)\n        piInstance.SetValue(exam, 37)\n                 \n        Console.WriteLine(&quot;New value of instance property: {0}&quot;, _\n                          exam.InstanceProperty)\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Initial value of shared property: 41\n&#39;       New value of shared property: 76\n&#39;\n&#39;       Initial value of instance property: 42\n&#39;       New value of instance property: 37\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_SetValue_System_Object_System_Object_System_Object___\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Object,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets the property value of a specified object with optional index values for index properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void SetValue (object obj, object value, object[] index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose property value will be set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new property value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional index values for indexed properties. This value should be <code>null</code> for non-indexed properties.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>index</code> array does not contain the type of arguments needed.  </p>\n<p> -or-  </p>\n<p> The property&#39;s <code>set</code> accessor is not found.  </p>\n<p> -or-  </p>\n<p> <code>value</code> cannot be converted to the type of <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The object does not match the target type, or a property is an instance property but <code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetparametercountexception\" data-linktype=\"relative-path\">TargetParameterCountException</a></div>\r\n                  </div>\r\n                  <p>The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> There was an illegal attempt to access a private or protected method inside a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <span class=\"xref\">stem.Exception.InnerException*</span> property indicates the reason for the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object is a value type and <code>value</code> is <code>null</code>, then the property will be set to the default value for that type.  </p>\n<p> To determine whether a property is indexed, use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetIndexParameters_\" data-linktype=\"relative-path\">GetIndexParameters</a> method. If the resulting array has 0 (zero) elements, the property is not indexed.  </p>\n<p> This is a convenience method that calls the runtime implementation of the abstract [SetValue(Object,â€‚Object,â€‚BindingFlags,â€‚Binder,â€‚Object&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt; method, specifying <a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">System.Reflection.BindingFlags</a> for the <code>BindingFlags</code> parameter, <code>null</code> for <code>Binder</code>, and <code>null</code> for <code>CultureInfo</code>.  </p>\n<p> To use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method, first get a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the class. From the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>, get the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>. From the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>, use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a class named <code>TestClass</code> that has a read-write property named <code>Caption</code>. It  displays the default value of the <code>Caption</code> property, calls the SetValue method to change the property value, and displays the result.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PropertyInfo.SetValue1 Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define a property.\npublic ref class TestClass\n{\nprivate:\n   String^ caption;\n\npublic:\n   TestClass()\n   {\n      caption = &quot;A Default caption&quot;;\n   }\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\nint main()\n{\n   TestClass^ t = gcnew TestClass;\n   \n   // Get the type and PropertyInfo.\n   Type^ myType = t-&gt;GetType();\n   PropertyInfo^ pinfo = myType-&gt;GetProperty( &quot;Caption&quot; );\n   \n   // Display the property value, using the GetValue method.\n   Console::WriteLine( &quot;<br>GetValue: {0}&quot;, pinfo-&gt;GetValue( t, nullptr ) );\n   \n   // Use the SetValue method to change the caption.\n   pinfo-&gt;SetValue( t, &quot;This caption has been changed.&quot;, nullptr );\n   \n   // Display the caption again.\n   Console::WriteLine( &quot;GetValue: {0}&quot;, pinfo-&gt;GetValue( t, nullptr ) );\n   Console::WriteLine( &quot;<br>Press the Enter key to continue.&quot; );\n   Console::ReadLine();\n   return 0;\n}\n\n/*\nThis example produces the following output:\n \nGetValue: A Default caption\nGetValue: This caption has been changed\n\nPress the Enter key to continue.\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PropertyInfo.SetValue1 Example#1\">using System;\nusing System.Reflection;\n \n// Define a class with a property.\npublic class TestClass   \n{\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get { return caption; }\n        set \n        { \n            if (caption != value) \n            {\n                caption = value;\n            }\n        }\n    }\n}\n \nclass TestPropertyInfo\n{\n    public static void Main()\n    {\n        TestClass t = new TestClass();\n \n        // Get the type and PropertyInfo.\n        Type myType = t.GetType();\n        PropertyInfo pinfo = myType.GetProperty(&quot;Caption&quot;);\n \n        // Display the property value, using the GetValue method.\n        Console.WriteLine(&quot;<br>GetValue: &quot; + pinfo.GetValue(t, null));\n \n        // Use the SetValue method to change the caption.\n        pinfo.SetValue(t, &quot;This caption has been changed.&quot;, null);\n \n        //  Display the caption again.\n        Console.WriteLine(&quot;GetValue: &quot; + pinfo.GetValue(t, null));\n\n        Console.WriteLine(&quot;<br>Press the Enter key to continue.&quot;);\n        Console.ReadLine();\n    }\n}\n\n/*\nThis example produces the following output:\n \nGetValue: A Default caption\nGetValue: This caption has been changed\n\nPress the Enter key to continue.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyInfo.SetValue1 Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Define a class with a property.\nPublic Class TestClass\n    Private myCaption As String = &quot;A Default caption&quot;\n\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set\n            If myCaption &lt;&gt; value Then myCaption = value\n        End Set\n    End Property\nEnd Class\n\nPublic Class TestPropertyInfo\n    Public Shared Sub Main()\n        Dim t As New TestClass()\n\n        &#39; Get the type and PropertyInfo.\n        Dim myType As Type = t.GetType()\n        Dim pinfo As PropertyInfo = myType.GetProperty(&quot;Caption&quot;)\n\n        &#39; Display the property value, using the GetValue method.\n        Console.WriteLine(vbCrLf &amp; &quot;GetValue: &quot; &amp; pinfo.GetValue(t, Nothing))\n\n        &#39; Use the SetValue method to change the caption.\n        pinfo.SetValue(t, &quot;This caption has been changed.&quot;, Nothing)\n\n        &#39; Display the caption again.\n        Console.WriteLine(&quot;GetValue: &quot; &amp; pinfo.GetValue(t, Nothing))\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press the Enter key to continue.&quot;)\n        Console.ReadLine()\n    End Sub\nEnd Class\n\n&#39; This example produces the following output:\n&#39; \n&#39;GetValue: A Default caption\n&#39;GetValue: This caption has been changed\n&#39;\n&#39;Press the Enter key to continue.\n</code></pre><p> Note that, because the <code>Caption</code> property is not a parameter array, the <code>index</code> argument is <code>null</code>.  </p>\n<p> The following example declares a class named <code>Example</code> with three properties: a <code>static</code> property (<code>Shared</code> in Visual Basic), an instance property, and an indexed instance property. The example uses the SetValue method to change the default values of the properties and displays the original and final values.  </p>\n<p> The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.  </p>\n<ul>\n<li><p>In Visual Basic, the property name is always used to search for the property with reflection. You can use the <code>Default</code> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example. You can also use the property name.  </p>\n</li>\n<li><p>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code. By default, the name of the property is <code>Item</code>, and you must use that name when you search for the property with reflection. You can use the <a class=\"xref\" href=\"system.runtime.compilerservices.indexernameattribute\" data-linktype=\"relative-path\">IndexerNameAttribute</a> attribute to give the indexer a different name. In this example, the name is <code>IndexedInstanceProperty</code>.  </p>\n</li>\n<li><p>In C++, the <code>default</code> specifier can be used to make an indexed property a default indexed property (class indexer). In that case, the name of the property by default is <code>Item</code>, and you must use that name when you search for the property with reflection, as in this example. You can use the <a class=\"xref\" href=\"system.runtime.compilerservices.indexernameattribute\" data-linktype=\"relative-path\">IndexerNameAttribute</a> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code. An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.  </p>\n<pre><code class=\"lang-cpp\" name=\"PropertyInfo.SetValue#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\n\nref class Example\n{\nprivate:\n    int static _sharedProperty = 41;\n    int _instanceProperty;\n    Dictionary&lt;int, String^&gt;^ _indexedInstanceProperty;\n\npublic:\n    Example()\n    {\n        _instanceProperty = 42;\n        _indexedInstanceProperty = gcnew Dictionary&lt;int, String^&gt;();\n    };\n\n    static property int SharedProperty\n    {\n        int get() { return _sharedProperty; }\n        void set(int value) { _sharedProperty = value; }\n    };\n\n    property int InstanceProperty \n    {\n        int get() { return _instanceProperty; }\n        void set(int value) { _instanceProperty = value; }\n    };\n\n    // By default, the name of the default indexed property (class \n    // indexer) is Item, and that name must be used to search for the \n    // property with reflection. The property can be given a different\n    // name by using the IndexerNameAttribute attribute.\n    property String^ default[int]\n    { \n        String^ get(int key) \n        { \n            String^ returnValue;\n            if (_indexedInstanceProperty-&gt;TryGetValue(key, returnValue))\n            {\n                return returnValue;\n            }\n            else\n            {\n                return nullptr;\n            }\n        }\n        void set(int key, String^ value)\n        {\n            if (value == nullptr)\n            {\n                throw gcnew ApplicationException( \n                    &quot;IndexedInstanceProperty value can be the empty string, but it cannot be null.&quot;);\n            }\n            else\n            {\n                if (_indexedInstanceProperty-&gt;ContainsKey(key))\n                {\n                    _indexedInstanceProperty[key] = value;\n                }\n                else\n                {\n                    _indexedInstanceProperty-&gt;Add(key, value);\n                }\n            }\n        }\n    };\n};\n\nvoid main()\n{\n    Console::WriteLine(&quot;Initial value of class-level property: {0}&quot;, \n        Example::SharedProperty);\n\n    PropertyInfo^ piShared = \n        Example::typeid-&gt;GetProperty(&quot;SharedProperty&quot;);\n    piShared-&gt;SetValue(nullptr, 76, nullptr);\n                 \n    Console::WriteLine(&quot;Final value of class-level property: {0}&quot;, \n        Example::SharedProperty);\n\n\n    Example^ exam = gcnew Example();\n\n    Console::WriteLine(&quot;<br>Initial value of instance property: {0}&quot;, \n            exam-&gt;InstanceProperty);\n\n    PropertyInfo^ piInstance = \n        Example::typeid-&gt;GetProperty(&quot;InstanceProperty&quot;);\n    piInstance-&gt;SetValue(exam, 37, nullptr);\n                 \n    Console::WriteLine(&quot;Final value of instance property: {0}&quot;, \n        exam-&gt;InstanceProperty);\n\n\n    exam[17] = &quot;String number 17&quot;;\n    exam[46] = &quot;String number 46&quot;;\n    exam[9] = &quot;String number 9&quot;;\n\n    Console::WriteLine(\n        &quot;<br>Initial value of indexed instance property(17): &#39;{0}&#39;&quot;, \n        exam[17]);\n\n    // By default, the name of the default indexed property (class \n    // indexer) is Item, and that name must be used to search for the \n    // property with reflection. The property can be given a different\n    // name by using the IndexerNameAttribute attribute.\n    PropertyInfo^ piIndexedInstance =\n        Example::typeid-&gt;GetProperty(&quot;Item&quot;);\n    piIndexedInstance-&gt;SetValue(\n            exam, \n            &quot;New value for string number 17&quot;, \n            gcnew array&lt;Object^&gt; { 17 });\n                 \n    Console::WriteLine(&quot;Final value of indexed instance property(17): &#39;{0}&#39;&quot;, \n        exam[17]);\n};\n\n/* This example produces the following output:\n\nInitial value of class-level property: 41\nFinal value of class-level property: 76\n\nInitial value of instance property: 42\nFinal value of instance property: 37\n\nInitial value of indexed instance property(17): &#39;String number 17&#39;\nFinal value of indexed instance property(17): &#39;New value for string number 17&#39;\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"PropertyInfo.SetValue#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\nclass Example\n{\n    private static int _staticProperty = 41;\n    public static int StaticProperty    \n    {\n        get\n        {\n            return _staticProperty;\n        }\n        set\n        {\n            _staticProperty = value;\n        }\n    }\n\n    private int _instanceProperty = 42;\n    public int InstanceProperty    \n    {\n        get\n        {\n            return _instanceProperty;\n        }\n        set\n        {\n            _instanceProperty = value;\n        }\n    }\n\n    private Dictionary&lt;int, string&gt; _indexedInstanceProperty = \n        new Dictionary&lt;int, string&gt;();\n    // By default, the indexer is named Item, and that name must be used\n    // to search for the property. In this example, the indexer is given\n    // a different name by using the IndexerNameAttribute attribute.\n    [IndexerNameAttribute(&quot;IndexedInstanceProperty&quot;)]\n    public string this[int key]    \n    {\n        get\n        {\n            string returnValue = null;\n            if (_indexedInstanceProperty.TryGetValue(key, out returnValue))\n            {\n                return returnValue;\n            }\n            else\n            {\n                return null;\n            }\n        }\n        set\n        {\n            if (value == null)\n            {\n                throw new ApplicationException(&quot;IndexedInstanceProperty value can be the empty string, but it cannot be Nothing.&quot;);\n            }\n            else\n            {\n                if (_indexedInstanceProperty.ContainsKey(key))\n                {\n                    _indexedInstanceProperty[key] = value;\n                }\n                else\n                {\n                    _indexedInstanceProperty.Add(key, value);\n                }\n            }\n        }\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(&quot;Initial value of class-level property: {0}&quot;, \n            Example.StaticProperty);\n\n        PropertyInfo piShared = typeof(Example).GetProperty(&quot;StaticProperty&quot;);\n        piShared.SetValue(null, 76, null);\n                 \n        Console.WriteLine(&quot;Final value of class-level property: {0}&quot;, \n            Example.StaticProperty);\n\n\n        Example exam = new Example();\n\n        Console.WriteLine(&quot;<br>Initial value of instance property: {0}&quot;, \n            exam.InstanceProperty);\n\n        PropertyInfo piInstance = \n            typeof(Example).GetProperty(&quot;InstanceProperty&quot;);\n        piInstance.SetValue(exam, 37, null);\n                 \n        Console.WriteLine(&quot;Final value of instance property: {0}&quot;, \n            exam.InstanceProperty);\n\n\n        exam[17] = &quot;String number 17&quot;;\n        exam[46] = &quot;String number 46&quot;;\n        exam[9] = &quot;String number 9&quot;;\n\n        Console.WriteLine(\n            &quot;<br>Initial value of indexed instance property(17): &#39;{0}&#39;&quot;, \n            exam[17]);\n\n        // By default, the indexer is named Item, and that name must be used\n        // to search for the property. In this example, the indexer is given\n        // a different name by using the IndexerNameAttribute attribute.\n        PropertyInfo piIndexedInstance = \n            typeof(Example).GetProperty(&quot;IndexedInstanceProperty&quot;);\n        piIndexedInstance.SetValue(\n            exam, \n            &quot;New value for string number 17&quot;, \n            new object[] { (int) 17 });\n                 \n        Console.WriteLine(\n            &quot;Final value of indexed instance property(17): &#39;{0}&#39;&quot;, \n            exam[17]);       \n    }\n}\n\n/* This example produces the following output:\n\nInitial value of class-level property: 41\nFinal value of class-level property: 76\n\nInitial value of instance property: 42\nFinal value of instance property: 37\n\nInitial value of indexed instance property(17): &#39;String number 17&#39;\nFinal value of indexed instance property(17): &#39;New value for string number 17&#39;\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"PropertyInfo.SetValue#1\">Imports System.Reflection\nImports System.Collections.Generic\n\nClass Example\n\n    Private Shared _sharedProperty As Integer = 41\n    Public Shared Property SharedProperty As Integer\n        Get \n            Return _sharedProperty\n        End Get\n        Set\n            _sharedProperty = Value\n        End Set\n    End Property\n\n    Private _instanceProperty As Integer = 42\n    Public Property InstanceProperty As Integer\n        Get \n            Return _instanceProperty\n        End Get\n        Set\n            _instanceProperty = Value\n        End Set\n    End Property\n\n    Private _indexedInstanceProperty As New Dictionary(Of Integer, String)\n    Default Public Property IndexedInstanceProperty(ByVal key As Integer) As String\n        Get \n            Dim returnValue As String = Nothing\n            If _indexedInstanceProperty.TryGetValue(key, returnValue) Then\n                Return returnValue\n            Else\n                Return Nothing\n            End If\n        End Get\n        Set\n            If Value Is Nothing Then\n                Throw New ApplicationException( _\n                    &quot;IndexedInstanceProperty value can be the empty string, but it cannot be Nothing.&quot;)\n            Else\n                If _indexedInstanceProperty.ContainsKey(key) Then\n                    _indexedInstanceProperty(key) = Value\n                Else\n                    _indexedInstanceProperty.Add(key, Value)\n                End If\n            End If\n        End Set\n    End Property\n\n\n    Shared Sub Main()\n\n        Console.WriteLine(&quot;Initial value of class-level property: {0}&quot;, _\n            Example.SharedProperty)\n\n        Dim piShared As PropertyInfo = _\n            GetType(Example).GetProperty(&quot;SharedProperty&quot;)\n        piShared.SetValue( _\n            Nothing, _\n            76, _\n            Nothing)\n                 \n        Console.WriteLine(&quot;Final value of class-level property: {0}&quot;, _\n            Example.SharedProperty)\n\n\n        Dim exam As New Example\n\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Initial value of instance property: {0}&quot;, _\n            exam.InstanceProperty)\n\n        Dim piInstance As PropertyInfo = _\n            GetType(Example).GetProperty(&quot;InstanceProperty&quot;)\n        piInstance.SetValue( _\n            exam, _\n            37, _\n            Nothing)\n                 \n        Console.WriteLine(&quot;Final value of instance property: {0}&quot;, _\n            exam.InstanceProperty)\n\n\n        exam(17) = &quot;String number 17&quot;\n        exam(46) = &quot;String number 46&quot;\n        &#39; In Visual Basic, a default indexed property can also be referred\n        &#39; to by name.\n        exam.IndexedInstanceProperty(9) = &quot;String number 9&quot;\n\n        Console.WriteLine(vbCrLf &amp; _\n            &quot;Initial value of indexed instance property(17): &#39;{0}&#39;&quot;, _\n            exam(17))\n\n        Dim piIndexedInstance As PropertyInfo = _\n            GetType(Example).GetProperty(&quot;IndexedInstanceProperty&quot;)\n        piIndexedInstance.SetValue( _\n            exam, _\n            &quot;New value for string number 17&quot;, _\n            New Object() { CType(17, Integer) })\n                 \n        Console.WriteLine(&quot;Final value of indexed instance property(17): &#39;{0}&#39;&quot;, _\n            exam(17))\n        \n    End Sub\nEnd Class\n\n&#39; This example produces the following output:\n&#39;\n&#39;Initial value of class-level property: 41\n&#39;Final value of class-level property: 76\n&#39;\n&#39;Initial value of instance property: 42\n&#39;Final value of instance property: 37\n&#39;\n&#39;Initial value of indexed instance property(17): &#39;String number 17&#39;\n&#39;Final value of indexed instance property(17): &#39;New value for string number 17&#39;\n</code></pre></li>\n</ul>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_SetValue_System_Object_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Object___System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Object,BindingFlags,Binder,Object[],CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object whose property value will be set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new property value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of the following enumeration members that specify the invocation attribute: <code>InvokeMethod</code>, <code>CreateInstance</code>, <code>Static</code>, <code>GetField</code>, <code>SetField</code>, <code>GetProperty</code>, or <code>SetProperty</code>. You must specify a suitable invocation attribute. For example, to invoke a static member, set the <code>Static</code> flag.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects through reflection. If <code>binder</code> is <code>null</code>, the default binder is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Optional index values for indexed properties. This value should be <code>null</code> for non-indexed properties.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The culture for which the resource is to be localized. If the resource is not localized for this culture, the <span class=\"xref\">stem.Globalization.CultureInfo.Parent*</span> property will be called successively in search of a match. If this value is <code>null</code>, the culture-specific information is obtained from the <span class=\"xref\">stem.Globalization.CultureInfo.CurrentUICulture*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <code>index</code> array does not contain the type of arguments needed.  </p>\n<p> -or-  </p>\n<p> The property&#39;s <code>set</code> accessor is not found.  </p>\n<p> -or-  </p>\n<p> <code>value</code> cannot be converted to the type of <span class=\"xref\">stem.Reflection.PropertyInfo.PropertyType*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <p>The object does not match the target type, or a property is an instance property but <code>obj</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetparametercountexception\" data-linktype=\"relative-path\">TargetParameterCountException</a></div>\r\n                  </div>\r\n                  <p>The number of parameters in <code>index</code> does not match the number of parameters the indexed property takes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p>There was an illegal attempt to access a private or protected method inside a class.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetinvocationexception\" data-linktype=\"relative-path\">TargetInvocationException</a></div>\r\n                  </div>\r\n                  <p>An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <span class=\"xref\">stem.Exception.InnerException*</span> property indicates the reason for the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> object is a value type and <code>value</code> is <code>null</code>, then the property will be set to the default value for that type.  </p>\n<p> To determine whether a property is indexed, use the <a class=\"xref\" href=\"system.reflection.propertyinfo#System_Reflection_PropertyInfo_GetIndexParameters_\" data-linktype=\"relative-path\">GetIndexParameters</a> method. If the resulting array has 0 (zero) elements, the property is not indexed.  </p>\n<p> Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.  </p>\n<p> To use the <code>SetValue</code> method, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, use the <code>SetValue</code> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <a class=\"xref\" href=\"system.security.permissions.reflectionpermission\" data-linktype=\"relative-path\">ReflectionPermission</a> with the <a class=\"xref\" href=\"system.security.permissions.reflectionpermissionflag\" data-linktype=\"relative-path\">System.Security.Permissions.ReflectionPermissionFlag</a> flag and if the grant set of the non-public members is restricted to the callerâ€™s grant set, or a subset thereof. (See <a href=\"../Topic/Security%20Considerations%20for%20Reflection.md\" data-linktype=\"relative-path\">Security Considerations for Reflection</a>.)  </p>\n<p> To use this functionality, your application should target the  .NET Framework 3.5  or later.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_op_Equality_System_Reflection_PropertyInfo_System_Reflection_PropertyInfo_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(PropertyInfo,PropertyInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_op_Inequality_System_Reflection_PropertyInfo_System_Reflection_PropertyInfo_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(PropertyInfo,PropertyInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_PropertyInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetType\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_PropertyInfo.GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">Type _PropertyInfo.GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the <a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_PropertyInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_PropertyInfo.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_PropertyInfo_System_Runtime_InteropServices__PropertyInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_PropertyInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.PropertyInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.PropertyInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.CanRead\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.CanWrite\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetAccessors\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetConstantValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetGetMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetIndexParameters\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetOptionalCustomModifiers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetRawConstantValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetRequiredCustomModifiers\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetSetMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.IsSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.MemberType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.PropertyType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.SetMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo.SetValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo._PropertyInfo.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo._PropertyInfo.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo._PropertyInfo.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo._PropertyInfo.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyInfo._PropertyInfo.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"f3b7c7f3-d9b0-b837-90b5-a0a3835c704f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Discovers the attributes of a property and provides access to property metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.PropertyInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.PropertyInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.PropertyInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.PropertyInfo","System.Reflection.PropertyInfo..ctor","System.Reflection.PropertyInfo.Attributes","System.Reflection.PropertyInfo.CanRead","System.Reflection.PropertyInfo.CanWrite","System.Reflection.PropertyInfo.Equals","System.Reflection.PropertyInfo.GetAccessors","System.Reflection.PropertyInfo.GetConstantValue","System.Reflection.PropertyInfo.GetGetMethod","System.Reflection.PropertyInfo.GetHashCode","System.Reflection.PropertyInfo.GetIndexParameters","System.Reflection.PropertyInfo.GetMethod","System.Reflection.PropertyInfo.GetOptionalCustomModifiers","System.Reflection.PropertyInfo.GetRawConstantValue","System.Reflection.PropertyInfo.GetRequiredCustomModifiers","System.Reflection.PropertyInfo.GetSetMethod","System.Reflection.PropertyInfo.GetValue","System.Reflection.PropertyInfo.IsSpecialName","System.Reflection.PropertyInfo.MemberType","System.Reflection.PropertyInfo.op_Equality","System.Reflection.PropertyInfo.op_op_Equality","System.Reflection.PropertyInfo.op_Inequality","System.Reflection.PropertyInfo.op_op_Inequality","System.Reflection.PropertyInfo.PropertyType","System.Reflection.PropertyInfo.SetMethod","System.Reflection.PropertyInfo.SetValue","System.Reflection.PropertyInfo._PropertyInfo.GetIDsOfNames","System.Reflection.PropertyInfo._PropertyInfo.GetType","System.Reflection.PropertyInfo._PropertyInfo.GetTypeInfo","System.Reflection.PropertyInfo._PropertyInfo.GetTypeInfoCount","System.Reflection.PropertyInfo._PropertyInfo.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.PropertyInfo","System::Reflection::PropertyInfo","System.Reflection.PropertyInfo.#ctor","System::Reflection::PropertyInfo::#ctor","System.Reflection.PropertyInfo.Attributes","System::Reflection::PropertyInfo::Attributes","System.Reflection.PropertyInfo.CanRead","System::Reflection::PropertyInfo::CanRead","System.Reflection.PropertyInfo.CanWrite","System::Reflection::PropertyInfo::CanWrite","System.Reflection.PropertyInfo.Equals","System::Reflection::PropertyInfo::Equals","System.Reflection.PropertyInfo.GetAccessors","System::Reflection::PropertyInfo::GetAccessors","System.Reflection.PropertyInfo.GetConstantValue","System::Reflection::PropertyInfo::GetConstantValue","System.Reflection.PropertyInfo.GetGetMethod","System::Reflection::PropertyInfo::GetGetMethod","System.Reflection.PropertyInfo.GetHashCode","System::Reflection::PropertyInfo::GetHashCode","System.Reflection.PropertyInfo.GetIndexParameters","System::Reflection::PropertyInfo::GetIndexParameters","System.Reflection.PropertyInfo.GetMethod","System::Reflection::PropertyInfo::GetMethod","System.Reflection.PropertyInfo.GetOptionalCustomModifiers","System::Reflection::PropertyInfo::GetOptionalCustomModifiers","System.Reflection.PropertyInfo.GetRawConstantValue","System::Reflection::PropertyInfo::GetRawConstantValue","System.Reflection.PropertyInfo.GetRequiredCustomModifiers","System::Reflection::PropertyInfo::GetRequiredCustomModifiers","System.Reflection.PropertyInfo.GetSetMethod","System::Reflection::PropertyInfo::GetSetMethod","System.Reflection.PropertyInfo.GetValue","System::Reflection::PropertyInfo::GetValue","System.Reflection.PropertyInfo.IsSpecialName","System::Reflection::PropertyInfo::IsSpecialName","System.Reflection.PropertyInfo.MemberType","System::Reflection::PropertyInfo::MemberType","System.Reflection.PropertyInfo.op_Equality","System::Reflection::PropertyInfo::op_Equality","System.Reflection.PropertyInfo.op_Inequality","System::Reflection::PropertyInfo::op_Inequality","System.Reflection.PropertyInfo.PropertyType","System::Reflection::PropertyInfo::PropertyType","System.Reflection.PropertyInfo.SetMethod","System::Reflection::PropertyInfo::SetMethod","System.Reflection.PropertyInfo.SetValue","System::Reflection::PropertyInfo::SetValue","System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames","System::Reflection::PropertyInfo::System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames","System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType","System::Reflection::PropertyInfo::System#Runtime#InteropServices#_PropertyInfo#GetType","System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo","System::Reflection::PropertyInfo::System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo","System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount","System::Reflection::PropertyInfo::System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount","System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke","System::Reflection::PropertyInfo::System#Runtime#InteropServices#_PropertyInfo#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"f3b7c7f3-d9b0-b837-90b5-a0a3835c704f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/PropertyInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PropertyInfo class | Microsoft Docs","_op_ogTitle":"PropertyInfo class","description":"Discovers the attributes of a property and provides access to property metadata.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.PropertyInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.propertyinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.propertyinfo","fileRelativePath":"System.Reflection.PropertyInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}