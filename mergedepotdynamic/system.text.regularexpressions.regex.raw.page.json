{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Regex</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an immutable regular expression.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class Regex : System.Runtime.Serialization.ISerializable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Regex</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The Regex class represents the .NET Framework&#39;s regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <a class=\"xref\" href=\"system.configuration.regexstringvalidator\" data-linktype=\"relative-path\">System.Configuration.RegexStringValidator</a> class.  </p>\n</div>\n<p> To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>. Next, you can optionally instantiate a Regex object. Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For some common regular expression patterns, see <a href=\"../Topic/Regular%20Expression%20Examples.md\" data-linktype=\"relative-path\">Regular Expression Examples</a>. There are also a number of online libraries of regular expression patterns, such as the one at <a href=\"http://www.regular-expressions.info/examples.html\" data-linktype=\"external\">Regular-Expressions.info</a>.  </p>\n</div>\n<p><a name=\"remarks\"></a> For more information about using the Regex class, see the following sections in this topic:  </p>\n<ul>\n<li><p><a href=\"#regex_vs_string\" data-linktype=\"self-bookmark\">Regex vs. String Methods</a>  </p>\n</li>\n<li><p><a href=\"#static_vs_instance\" data-linktype=\"self-bookmark\">Static vs. Instance Methods</a>  </p>\n</li>\n<li><p><a href=\"#regex_ops\" data-linktype=\"self-bookmark\">Performing Regular Expression Operations</a>  </p>\n</li>\n<li><p><a href=\"#define_timeout\" data-linktype=\"self-bookmark\">Defining a Time-Out Value</a>  </p>\n<p>For more information about the regular expression language, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a> or download and print one of these brochures:  </p>\n<p><a href=\"http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx\" data-linktype=\"external\">Quick Reference in Word (.docx) format</a><br><a href=\"http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf\" data-linktype=\"external\">Quick Reference in PDF (.pdf) format</a>  </p>\n</li>\n</ul>\n<p><a name=\"regex_vs_string\"></a>   </p>\n<h2 id=\"regex-vs-string-methods\">Regex vs. String Methods</h2>\n<p> The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> class includes several search and comparison methods that you can use to perform pattern matching with text. For example, the <a class=\"xref\" href=\"system.string#System_String_Contains_\" data-linktype=\"relative-path\">Contains</a>, <a class=\"xref\" href=\"system.string#System_String_EndsWith_\" data-linktype=\"relative-path\">EndsWith</a>, and <a class=\"xref\" href=\"system.string#System_String_StartsWith_\" data-linktype=\"relative-path\">StartsWith</a> methods determine whether a string instance contains a specified substring; and the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a>, <a class=\"xref\" href=\"system.string#System_String_IndexOfAny_\" data-linktype=\"relative-path\">IndexOfAny</a>, <a class=\"xref\" href=\"system.string#System_String_LastIndexOf_\" data-linktype=\"relative-path\">LastIndexOf</a>, and <a class=\"xref\" href=\"system.string#System_String_LastIndexOfAny_\" data-linktype=\"relative-path\">LastIndexOfAny</a> methods return the starting position of a specified substring in a string. Use the methods of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> class when you are searching for a specific string. Use the Regex class when you are searching for a specific pattern in a string. For more information and examples, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a>.  </p>\n<p> <a href=\"#remarks\" data-linktype=\"self-bookmark\">Back to Remarks</a>  </p>\n<p><a name=\"static_vs_instance\"></a>   </p>\n<h2 id=\"static-vs-instance-methods\">Static vs. Instance Methods</h2>\n<p> After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:  </p>\n<ul>\n<li><p>By instantiating a Regex object that represents the regular expression. To do this, you pass the regular expression pattern to a <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_\" data-linktype=\"relative-path\">Regex</a> constructor. A Regex object is immutable; when you instantiate a Regex object with a regular expression, that object&#39;s regular expression cannot be changed.  </p>\n</li>\n<li><p>By supplying both the regular expression and the text to search to a <code>static</code> (<code>Shared</code> in Visual Basic) Regex method. This enables you to use a regular expression without explicitly creating a Regex object.  </p>\n<p>All Regex pattern identification methods include both static and instance overloads.  </p>\n<p>The regular expression engine must compile a particular pattern before the pattern can be used. Because Regex objects are immutable, this is a one-time procedure that occurs when a Regex class constructor or a static method is called. To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls. As a result, regular expression pattern-matching methods offer comparable performance for static and instance methods.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached. Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.  </p>\n</div>\n<p> However, caching can adversely affect performance in the following two cases:  </p>\n<ul>\n<li><p>When you use static method calls with a large number of regular expressions. By default, the regular expression engine caches the 15 most recently used static regular expressions. If your application uses more than 15 static regular expressions, some regular expressions must be recompiled. To prevent this recompilation, you can increase the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CacheSize_\" data-linktype=\"relative-path\">CacheSize</a> property.  </p>\n</li>\n<li><p>When you instantiate new Regex objects with regular expressions that have previously been compiled. For example, the following code defines a regular expression to locate duplicated words in a text stream. Although the example uses a single regular expression, it instantiates a new Regex object to process each line of text. This results in the recompilation of the regular expression with each iteration of the loop.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Class.Caching#1\">      Dim sr As New StreamReader(filename)\n      Dim input As String\n      Dim pattern As String = &quot;\\b(\\w+)\\s\\1\\b&quot;\n      Do While sr.Peek() &gt;= 0\n         input = sr.ReadLine()\n         Dim rgx As New Regex(pattern, RegexOptions.IgnoreCase)\n         Dim matches As MatchCollection = rgx.Matches(input)\n         If matches.Count &gt; 0 Then\n            Console.WriteLine(&quot;{0} ({1} matches):&quot;, input, matches.Count)\n            For Each match As Match In matches\n               Console.WriteLine(&quot;   &quot; + match.Value)\n            Next   \n         End If\n      Loop\n      sr.Close()   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Class.Caching#1\">      StreamReader sr = new StreamReader(filename);\n      string input;\n      string pattern = @&quot;\\b(\\w+)\\s\\1\\b&quot;;\n      while (sr.Peek() &gt;= 0)\n      {\n         input = sr.ReadLine();\n         Regex rgx = new Regex(pattern, RegexOptions.IgnoreCase);\n         MatchCollection matches = rgx.Matches(input);\n         if (matches.Count &gt; 0)\n         {\n            Console.WriteLine(&quot;{0} ({1} matches):&quot;, input, matches.Count);\n            foreach (Match match in matches)\n               Console.WriteLine(&quot;   &quot; + match.Value);\n         }\n      }\n      sr.Close();   \n</code></pre><p> To prevent recompilation, you should instantiate a single Regex object that is accessible to all code that requires it, as shown in the following rewritten example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Class.Caching#2\">      Dim sr As New StreamReader(filename)\n      Dim input As String\n      Dim pattern As String = &quot;\\b(\\w+)\\s\\1\\b&quot;\n      Dim rgx As New Regex(pattern, RegexOptions.IgnoreCase)\n      Do While sr.Peek() &gt;= 0\n         input = sr.ReadLine()\n         Dim matches As MatchCollection = rgx.Matches(input)\n         If matches.Count &gt; 0 Then\n            Console.WriteLine(&quot;{0} ({1} matches):&quot;, input, matches.Count)\n            For Each match As Match In matches\n               Console.WriteLine(&quot;   &quot; + match.Value)\n            Next   \n         End If\n      Loop\n      sr.Close()   \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Class.Caching#2\">      StreamReader sr = new StreamReader(filename);\n      string input;\n      string pattern = @&quot;\\b(\\w+)\\s\\1\\b&quot;;\n      Regex rgx = new Regex(pattern, RegexOptions.IgnoreCase);\n      \n      while (sr.Peek() &gt;= 0)\n      {\n         input = sr.ReadLine();\n         MatchCollection matches = rgx.Matches(input);\n         if (matches.Count &gt; 0)\n         {\n            Console.WriteLine(&quot;{0} ({1} matches):&quot;, input, matches.Count);\n            foreach (Match match in matches)\n               Console.WriteLine(&quot;   &quot; + match.Value);\n         }\n      }\n      sr.Close();   \n</code></pre><p><a href=\"#remarks\" data-linktype=\"self-bookmark\">Back to Remarks</a>  </p>\n</li>\n</ul>\n<p><a name=\"regex_ops\"></a>   </p>\n<h2 id=\"performing-regular-expression-operations\">Performing Regular Expression Operations</h2>\n<p> Whether you decide to instantiate a Regex object and call its methods or call static methods, the Regex class offers the following pattern-matching functionality:  </p>\n<ul>\n<li><p>Validation of a match. You call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a> method to determine whether a match is present.  </p>\n</li>\n<li><p>Retrieval of a single match. You call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> method to retrieve a <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object that represents the first match in a string or in part of a string. Subsequent matches can be retrieved by calling the <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method.  </p>\n</li>\n<li><p>Retrieval of all matches. You call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method to retrieve a <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">System.Text.RegularExpressions.MatchCollection</a> object that represents all the matches found in a string or in part of a string.  </p>\n</li>\n<li><p>Replacement of matched text. You call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_\" data-linktype=\"relative-path\">Replace</a> method to replace matched text. The replacement text can also be defined by a regular expression. In addition, some of the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_\" data-linktype=\"relative-path\">Replace</a> methods include a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> parameter that enables you to programmatically define the replacement text.  </p>\n</li>\n<li><p>Creation of a string array that is formed from parts of an input string. You call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> method to split an input string at positions that are defined by the regular expression.  </p>\n<p>In addition to its pattern-matching methods, the Regex class includes several special-purpose methods:  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Escape_\" data-linktype=\"relative-path\">Escape</a> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Unescape_\" data-linktype=\"relative-path\">Unescape</a> method removes these escape characters.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method creates an assembly that contains predefined regular expressions. The .NET Framework contains examples of these special-purpose assemblies in the <a class=\"xref\" href=\"system.web.regularexpressions\" data-linktype=\"relative-path\">System.Web.RegularExpressions</a> namespace.  </p>\n<p><a href=\"#remarks\" data-linktype=\"self-bookmark\">Back to Remarks</a>  </p>\n</li>\n</ul>\n<p><a name=\"define_timeout\"></a>   </p>\n<h2 id=\"defining-a-time-out-value\">Defining a Time-Out Value</h2>\n<p> The .NET Framework supports a full-featured regular expression language that provides substantial power and flexibility in pattern matching. However, the power and flexibility come at a cost: the risk of poor performance. Regular expressions that perform poorly are surprisingly easy to create. In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern. For more information about the .NET Framework regular expression engine, see <a href=\"../Topic/Details%20of%20Regular%20Expression%20Behavior.md\" data-linktype=\"relative-path\">Details of Regular Expression Behavior</a>. For more information about excessive backtracking, see <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>.  </p>\n<p> Starting with the .NET Framework 4.5, you can define a time-out interval for regular expression matches. If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern. It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.  </p>\n<p> How you handle the exception depends on the cause of the exception. If the exception occurs because the time-out interval is set too low or because of excessive machine load, you can increase the time-out interval and retry the matching operation. If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.  </p>\n<p> You can set a time-out interval by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Regex(String,RegexOptions,TimeSpan)</a> constructor when you instantiate a regular expression object. For static methods, you can set a time-out interval by calling an overload of a matching method that has a <code>matchTimeout</code> parameter. If you do not set a time-out value explicitly, the default time-out value  is determined as follows:  </p>\n<ul>\n<li><p>By using the application-wide time-out value, if one exists. This can be any time-out value that applies to the application domain in which the Regex object is instantiated or the static method call is made. You can set the application-wide time-out value by calling the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetData_\" data-linktype=\"relative-path\">SetData</a> method to assign the string representation of a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value to the &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; property.  </p>\n</li>\n<li><p>By using the value <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a>, if no application-wide time-out value has been set.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> We recommend that you set a time-out value in all regular expression pattern-matching operations. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a>.  </p>\n</div>\n<p> <a href=\"#remarks\" data-linktype=\"self-bookmark\">Back to Remarks</a></p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Regex()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected Regex ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Note that this constructor is protected; it can only be called by classes derived from the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Regex(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class for the specified regular expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Regex (string pattern);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a> topics.  </p>\n<p> Calling the Regex constructor is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">Regex(String,RegexOptions)</a> constructor with a value of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> for the <code>options</code> argument.  </p>\n<p> A <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is immutable, which means that it can be used only for the match pattern you define when you create it. However, it can be used any number of times without being recompiled.  </p>\n<p> This constructor instantiates a regular expression object that attempts a case-sensitive match of any alphabetical characters defined in <code>pattern</code>. For a case-insensitive match, use the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions)</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Regex(SerializationInfo,StreamingContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class by using serialized data.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>info</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that contains a serialized pattern and <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The destination for this serialization. (This parameter is not used; specify <code>null</code>.)</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The pattern that <code>info</code> contains is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>info</code> contains an invalid <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> flag.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Regex(String,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class for the specified regular expression, with options that modify the pattern.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that modify the regular expression.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> contains an invalid flag.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a> topics.  </p>\n<p> A <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is immutable, which means that it can be used only for the match parameters you define when you create it. However, it can be used any number of times without being recompiled.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Regex(String,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that modify the regular expression.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> value.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see the <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a> topics.  </p>\n<p> A <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is immutable, which means that it can be used only for the match pattern that you define when you create it. However, it can be used any number of times without being recompiled.  </p>\n<p> The <code>matchTimeout</code> parameter specifies how long a pattern-matching method should try to find a match before it times out. If no match is found in that time interval, the pattern-matching method throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. <code>matchTimeout</code> overrides any default time-out value defined for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. The instance pattern-matching methods that observe the <code>matchTimeout</code>time-out interval include the following:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_\" data-linktype=\"relative-path\">Replace</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a>  \n\n<p>Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a> and <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>. To set a reasonable time-out interval, consider the following factors:  </p>\n</li>\n<li><p>The length and complexity of the regular expression pattern. Longer and more complex regular expressions require more time than shorter and simpler ones.  </p>\n</li>\n<li><p>The expected machine load. Processing takes more time on systems that have high CPU and memory utilization.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_capnames\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">capnames</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected System.Collections.Hashtable capnames;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_caps\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">caps</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected System.Collections.Hashtable caps;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_capsize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">capsize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected int capsize;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_capslist\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">capslist</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected string[] capslist;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_factory\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">factory</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected System.Text.RegularExpressions.RegexRunnerFactory factory;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InfiniteMatchTimeout</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies that a pattern-matching operation should not time out.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly TimeSpan InfiniteMatchTimeout;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Regex(String,RegexOptions,TimeSpan)</a> class constructor and a number of static matching methods use the InfiniteMatchTimeout constant to indicate that the attempt to find a pattern match should not time out.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> Setting the regular expression engine&#39;s time-out value to InfiniteMatchTimeout can cause regular expressions that rely on excessive backtracking to appear to stop responding when processing text that nearly matches the regular expression pattern. If you disable time-outs, you should ensure that your regular expression does not rely on excessive backtracking and that it handles text that nearly matches the regular expression pattern.  </p>\n<p> For more information about handling backtracking, see <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>.  </p>\n</div>\n<p> The InfiniteMatchTimeout constant can be supplied as the value of the <code>matchTimeout</code> argument of the following members:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Regex(String,RegexOptions,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_String_System_String_System_Boolean_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">IsMatch(String,String,RegexOptions,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Match(String,String,RegexOptions,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Matches(String,String,RegexOptions,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Replace(String,String,String,RegexOptions,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Replace(String,String,MatchEvaluator,RegexOptions,TimeSpan)</a>  \n</li>\n<li><a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Split(String,String,RegexOptions,TimeSpan)</a></li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_internalMatchTimeout\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">internalMatchTimeout</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected TimeSpan internalMatchTimeout;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_pattern\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">pattern</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected string pattern;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_roptions\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">roptions</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected System.Text.RegularExpressions.RegexOptions roptions;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_CacheSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CacheSize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static int CacheSize { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of entries in the static cache.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value in a set operation is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.  </p>\n<p> By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the CacheSize property only when you want to turn off caching or when you have an unusually large cache.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_MatchTimeout\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MatchTimeout</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the time-out interval of the current instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TimeSpan MatchTimeout { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum time interval that can elapse in a pattern-matching operation before a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> is thrown, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> if time-outs are disabled.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The MatchTimeout property defines the approximate maximum time interval for a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> instance to execute a single matching operation before the operation times out. The regular expression engine throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception during its next timing check after the time-out interval has elapsed. This prevents the regular expression engine from processing input strings that require excessive backtracking. For more information, see <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a> and <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a>.  </p>\n<p> This property is read-only. You can set its value explicitly for an individual <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor; and you can set its value for all <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> matching operations in an application domain by calling the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetData_\" data-linktype=\"relative-path\">SetData</a> method and providing a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value for the &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; property, as the following example illustrates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.MatchTimeout#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      AppDomain domain = AppDomain.CurrentDomain;\n      // Set a timeout interval of 2 seconds.\n      domain.SetData(&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;, TimeSpan.FromSeconds(2));\n      Object timeout = domain.GetData(&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;);\n      Console.WriteLine(&quot;Default regex match timeout: {0}&quot;,\n                         timeout == null ? &quot;&lt;null&gt;&quot; : timeout);\n\n      Regex rgx = new Regex(&quot;[aeiouy]&quot;);\n      Console.WriteLine(&quot;Regular expression pattern: {0}&quot;, rgx.ToString());\n      Console.WriteLine(&quot;Timeout interval for this regex: {0} seconds&quot;,\n                        rgx.MatchTimeout.TotalSeconds);\n   }\n}\n// The example displays the following output:\n//       Default regex match timeout: 00:00:02\n//       Regular expression pattern: [aeiouy]\n//       Timeout interval for this regex: 2 seconds\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.MatchTimeout#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim domain As AppDomain = AppDomain.CurrentDomain\n      &#39; Set a timeout interval of 2 seconds.\n      domain.SetData(&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;, TimeSpan.FromSeconds(2))\n      Dim timeout As Object = domain.GetData(&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;)\n      Console.WriteLine(&quot;Default regex match timeout: {0}&quot;,\n                         If(timeout Is Nothing, &quot;&lt;null&gt;&quot;, timeout))\n\n      Dim rgx As New Regex(&quot;[aeiouy]&quot;)\n      Console.WriteLine(&quot;Regular expression pattern: {0}&quot;, rgx.ToString())\n      Console.WriteLine(&quot;Timeout interval for this regex: {0} seconds&quot;,\n                        rgx.MatchTimeout.TotalSeconds)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Default regex match timeout: 00:00:02\n&#39;       Regular expression pattern: [aeiouy]\n&#39;       Timeout interval for this regex: 2 seconds\n</code></pre><p> If you do not explicitly set a time-out interval, the default value <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a> is used, and matching operations do not time out.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Options\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Options</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the options that were passed into the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.RegexOptions Options { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One or more members of the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> enumeration that represent options that were passed to the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value of the Options property consists of one or more members of the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> enumeration. If no options were defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class constructor, its value is <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">System.Text.RegularExpressions.RegexOptions</a>. The available options are discussed in detail in the <a href=\"../Topic/Regular%20Expression%20Options.md\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.  </p>\n<p> Note that the Options property does not reflect inline options defined in the regular expression pattern itself.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_RightToLeft\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RightToLeft</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the regular expression searches from right to left.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool RightToLeft { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the regular expression searches from right to left; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>RightToLeft is <code>true</code> if the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> instance was created with the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> option.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_CompileToAssembly_System_Text_RegularExpressions_RegexCompilationInfo___System_Reflection_AssemblyName_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompileToAssembly(RegexCompilationInfo[],AssemblyName)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles one or more specified <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> objects to a named assembly.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>regexinfos</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that describes the regular expressions to compile.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyname</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The file name of the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the <code>assemblyname</code> parameter&#39;s <span class=\"xref\">stem.Reflection.AssemblyName.Name*</span> property is an empty or null string.  </p>\n<p> -or-  </p>\n<p> The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>assemblyname</code> or <code>regexinfos</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CompileToAssembly method generates a .NET Framework assembly in which each regular expression defined in the <code>regexinfos</code> array is represented by a class. Typically, the CompileToAssembly method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  </p>\n<ul>\n<li><p>It is derived from the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class.  </p>\n</li>\n<li><p>It is assigned the fully qualified name that is defined by the <code>fullnamespace</code> and <code>name</code> parameters of its corresponding <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> object.  </p>\n</li>\n<li><p>It has a default (or parameterless) constructor.  </p>\n<p>Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_CompileToAssembly_System_Text_RegularExpressions_RegexCompilationInfo___System_Reflection_AssemblyName_System_Reflection_Emit_CustomAttributeBuilder___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompileToAssembly(RegexCompilationInfo[],AssemblyName,CustomAttributeBuilder[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles one or more specified <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> objects to a named assembly with the specified attributes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>regexinfos</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that describes the regular expressions to compile.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyname</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The file name of the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>attributes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that defines the attributes to apply to the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the <code>assemblyname</code> parameter&#39;s <span class=\"xref\">stem.Reflection.AssemblyName.Name*</span> property is an empty or null string.  </p>\n<p> -or-  </p>\n<p> The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>assemblyname</code> or <code>regexinfos</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CompileToAssembly method generates a .NET Framework assembly in which each regular expression defined in the <code>regexinfos</code> array is represented by a class. Typically, the CompileToAssembly method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  </p>\n<ul>\n<li><p>It is derived from the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class.  </p>\n</li>\n<li><p>It is assigned the fully qualified name that is defined by the <code>fullnamespace</code> and <code>name</code> parameters of its corresponding <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> object.  </p>\n</li>\n<li><p>It has a default (or parameterless) constructor.  </p>\n<p>Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.  </p>\n<p>Because the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method generates a .NET Framework assembly from a method call instead of using a particular language&#39;s class definition keyword (such as <code>class</code> in C# or <code>Class</code>…<code>End Class</code> in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language&#39;s standard attribute syntax. The <code>attributes</code> parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:  </p>\n</li>\n</ul>\n<ol>\n<li><p>Create an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the parameter types of the attribute constructor that you want to call.  </p>\n</li>\n<li><p>Retrieve a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the attribute class that you want to apply to the new assembly.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method of the attribute <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to retrieve a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object representing the attribute constructor that you want to call. Pass the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method the array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represents the constructor&#39;s parameter types.  </p>\n</li>\n<li><p>Create a <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array that defines the parameters to pass to the attribute&#39;s constructor.  </p>\n</li>\n<li><p>Instantiate a <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> object by passing its constructor the <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object retrieved in step 3 and the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array created in step 4.  </p>\n<p>You can then pass an array of these <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> objects instead of the <code>attributes</code> parameter to the CompileToAssembly method.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_CompileToAssembly_System_Text_RegularExpressions_RegexCompilationInfo___System_Reflection_AssemblyName_System_Reflection_Emit_CustomAttributeBuilder___System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompileToAssembly(RegexCompilationInfo[],AssemblyName,CustomAttributeBuilder[],String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles one or more specified <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> objects and a specified resource file to a named assembly with the specified attributes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>regexinfos</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that describes the regular expressions to compile.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyname</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The file name of the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>attributes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that defines the attributes to apply to the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>resourceFile</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the Win32 resource file to include in the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value of the <code>assemblyname</code> parameter&#39;s <span class=\"xref\">stem.Reflection.AssemblyName.Name*</span> property is an empty or null string.  </p>\n<p> -or-  </p>\n<p> The regular expression pattern of one or more objects in <code>regexinfos</code> contains invalid syntax.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>assemblyname</code> or <code>regexinfos</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.comexception\" data-linktype=\"relative-path\">COMException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>resourceFile</code> parameter designates an invalid Win32 resource file.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The file designated by the <code>resourceFile</code> parameter cannot be found.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CompileToAssembly method generates a .NET Framework assembly in which each regular expression defined in the <code>regexinfos</code> array is represented by a class. Typically, the CompileToAssembly method is called from a separate application that generates an assembly of compiled regular expressions. Each regular expression included in the assembly has the following characteristics:  </p>\n<ul>\n<li><p>It is derived from the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class.  </p>\n</li>\n<li><p>It is assigned the fully qualified name that is defined by the <code>fullnamespace</code> and <code>name</code> parameters of its corresponding <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> object.  </p>\n</li>\n<li><p>It has a default (or parameterless) constructor.  </p>\n<p>Ordinarily, the code that instantiates and uses the compiled regular expression is found in an assembly or application that is separate from the code that creates the assembly.  </p>\n<p>Because the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method generates a .NET Framework assembly from a method call instead of using a particular language&#39;s class definition keyword (such as <code>class</code> in C# or <code>Class</code>…<code>End Class</code> in Visual Basic), it does not allow .NET Framework attributes to be assigned to the assembly by using the development language&#39;s standard attribute syntax. The <code>attributes</code> parameter provides an alternative method for defining the attributes that apply to the assembly. For each attribute that you want to apply to the assembly, do the following:  </p>\n</li>\n</ul>\n<ol>\n<li><p>Create an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects representing the parameter types of the attribute constructor that you want to call.  </p>\n</li>\n<li><p>Retrieve a <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object representing the attribute class that you want to apply to the new assembly.  </p>\n</li>\n<li><p>Call the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method of the attribute <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object to retrieve a <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object representing the attribute constructor that you want to call. Pass the <a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a> method the array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represents the constructor&#39;s parameter types  </p>\n</li>\n<li><p>Create a <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array that defines the parameters to pass to the attribute&#39;s constructor.  </p>\n</li>\n<li><p>Instantiate a <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> object by passing its constructor the <a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a> object retrieved in step 3 and the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> array created in step 4.  </p>\n<p>You can then pass an array of these <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a> objects instead of the <code>attributes</code> parameter to the CompileToAssembly method.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Escape_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Escape(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Escapes a minimal set of characters (\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Escape (string str);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input string that contains the text to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string of characters with metacharacters converted to their escaped form.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>str</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Escape converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets ([ and ]) from text. In the following example, the regular expression &quot;[(.*?)]&quot; is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Escape#1\">      Dim pattern As String = &quot;[(.*?)]&quot; \n      Dim input As String = &quot;The animal [what kind?] was visible [by whom?] from the window.&quot;\n      \n      Dim matches As MatchCollection = Regex.Matches(input, pattern)\n      Dim commentNumber As Integer = 0\n      Console.WriteLine(&quot;{0} produces the following matches:&quot;, pattern)\n      For Each match As Match In matches\n         commentNumber += 1\n         Console.WriteLine(&quot;{0}: {1}&quot;, commentNumber, match.Value)       \n      Next      \n      &#39; This example displays the following output:\n      &#39;       1: ?\n      &#39;       2: ?\n      &#39;       3: .\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Escape#1\">      string pattern = &quot;[(.*?)]&quot;; \n      string input = &quot;The animal [what kind?] was visible [by whom?] from the window.&quot;;\n      \n      MatchCollection matches = Regex.Matches(input, pattern);\n      int commentNumber = 0;\n      Console.WriteLine(&quot;{0} produces the following matches:&quot;, pattern);\n      foreach (Match match in matches)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ++commentNumber, match.Value);  \n\n      // This example displays the following output:\n      //       [(.*?)] produces the following matches:\n      //          1: ?\n      //          2: ?\n      //          3: .\n</code></pre><p> However, if the opening bracket is escaped by passing it to the Escape method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Escape#2\">      Dim pattern As String = Regex.Escape(&quot;[&quot;) + &quot;(.*?)]&quot; \n      Dim input As String = &quot;The animal [what kind?] was visible [by whom?] from the window.&quot;\n      \n      Dim matches As MatchCollection = Regex.Matches(input, pattern)\n      Dim commentNumber As Integer = 0\n      Console.WriteLine(&quot;{0} produces the following matches:&quot;, pattern)\n      For Each match As Match In matches\n         commentNumber += 1\n         Console.WriteLine(&quot;   {0}: {1}&quot;, commentNumber, match.Value)  \n      Next\n      &#39; This example displays the following output:\n      &#39;       \\[(.*?)] produces the following matches:\n      &#39;          1: [what kind?]\n      &#39;          2: [by whom?]\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Escape#2\">      string pattern = Regex.Escape(&quot;[&quot;) + &quot;(.*?)]&quot;; \n      string input = &quot;The animal [what kind?] was visible [by whom?] from the window.&quot;;\n      \n      MatchCollection matches = Regex.Matches(input, pattern);\n      int commentNumber = 0;\n      Console.WriteLine(&quot;{0} produces the following matches:&quot;, pattern);\n      foreach (Match match in matches)\n         Console.WriteLine(&quot;   {0}: {1}&quot;, ++commentNumber, match.Value);  \n\n      // This example displays the following output:\n      //       \\[(.*?)] produces the following matches:\n      //          1: [what kind?]\n      //          2: [by whom?]\n</code></pre><p> In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol (\\) as well as by calling the Escape method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the Escape method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If a regular expression pattern includes either the number sign (#) or literal white-space characters, they must be escaped if input text is parsed with the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">System.Text.RegularExpressions.RegexOptions</a> option enabled.  </p>\n</div>\n<p> While the Escape method escapes the straight opening bracket ([) and opening brace ({) characters, it does not escape their corresponding closing characters (] and }). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash (\\) character. For an illustration, see the Example section.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_GetGroupNames\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetGroupNames()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an array of capturing group names for the regular expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] GetGroupNames ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string array of group names.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The collection of group names contains the set of strings used to name capturing groups in the expression. Even if capturing groups are not explicitly named, they are automatically assigned numerical names (&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, and so on). The &quot;0&quot; named group represents all text matched by the regular expression pattern. Numbered groups precede explicitly named groups in the collection, and named groups appear in the order in which they are defined in the regular expression pattern.  </p>\n<p> You can use the <a class=\"xref\" href=\"system.array#System_Array_Length_\" data-linktype=\"relative-path\">Length</a> property on the array returned by this method to determine the number of groups in a regular expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_GetGroupNumbers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetGroupNumbers()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an array of capturing group numbers that correspond to group names in an array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int[] GetGroupNumbers ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer array of group numbers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Both unnamed and named capturing groups can be accessed by number. Unnamed groups are numbered from left to right starting with 1. (The capturing group in index 0 (zero) represents the match as a whole.)  Named groups are then numbered from left to right starting with a number that is one greater than the number of unnamed capturing groups.  </p>\n<p> Referencing a group by its number instead of by string name can provide faster access.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_GroupNameFromNumber_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GroupNameFromNumber(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the group name that corresponds to the specified group number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string GroupNameFromNumber (int i);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>i</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The group number to convert to the corresponding group name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <code>i</code>, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (<em>subexpression</em>) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?<code>&lt;</code><em>name</em><code>&gt;</code><em>subexpression</em>) or (?&#39;<em>name</em>&#39;<em>subexpression</em>), where <em>name</em> is the name by which the subexpression will be identified. (For more information, see <a href=\"../Topic/Grouping%20Constructs%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Grouping Constructs</a>.) The GroupNameFromNumber method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.  </p>\n<p> If <code>i</code> is the number of a named group, the method returns the name of the group. If <code>i</code> is the number of an unnamed group, the method returns the string representation of the number. For example, if <code>i</code> is 1, the method returns &quot;1&quot;. If <code>i</code> is not the number of a capturing group, the method returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a>.  </p>\n<p> If a pattern match is found, the value returned by this method can then be used to retrieve the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object that represents the captured group from the <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection#System_Text_RegularExpressions_GroupCollection_Item_\" data-linktype=\"relative-path\">Item</a> property. The <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection\" data-linktype=\"relative-path\">GroupCollection</a> object is returned by the <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_Groups_\" data-linktype=\"relative-path\">Groups</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_GroupNumberFromName_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GroupNumberFromName(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the group number that corresponds to the specified group name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int GroupNumberFromName (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The group name to convert to the corresponding group number.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The group number that corresponds to the specified group name, or -1 if <code>name</code> is not a valid group name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>name</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A regular expression pattern may contain either named or numbered capturing groups, which delineate subexpressions within a pattern match. Numbered groups are delimited by the syntax (<em>subexpression</em>) and are assigned numbers based on their order in the regular expression. Named groups are delimited by the syntax (?<code>&lt;</code><em>name</em><code>&gt;</code><em>subexpression</em>) or (?&#39;<em>name</em>&#39;<em>subexpression</em>), where <em>name</em> is the name by which the subexpression will be identified. (For more information, see <a href=\"../Topic/Grouping%20Constructs%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Grouping Constructs</a>.) The GroupNumberFromName method identifies both named groups and numbered groups by their ordinal positions in the regular expression. Ordinal position zero always represents the entire regular expression. All numbered groups are then counted before named groups, regardless of their actual position in the regular expression pattern.  </p>\n<p> If <code>name</code> is the string representation of a group number that is present in the regular expression pattern, the method returns that number. If <code>name</code> corresponds to a named capturing group that is present in the regular expression pattern, the method returns its corresponding number. The comparison of <code>name</code> with the group name is case-sensitive. If <code>name</code> does not correspond to the name of a capturing group or to the string representation of the number of a capturing group, the method returns -1.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_InitializeReferences\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InitializeReferences()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected void InitializeReferences ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>References have already been initialized.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_IsMatch_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMatch(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the regular expression specified in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor finds a match in a specified input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMatch (string input);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the regular expression finds a match; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_IsMatch_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMatch(String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the regular expression specified in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsMatch (string input, int startat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character position at which to start the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the regular expression finds a match; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startat</code> is less than zero or greater than the length of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_IsMatch_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMatch(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified regular expression finds a match in the specified input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsMatch (string input, string pattern);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the regular expression finds a match; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method.  </p>\n<p> The static IsMatch method is equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the regular expression pattern specified by <code>pattern</code> and calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_System_String_\" data-linktype=\"relative-path\">IsMatch(String)</a> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_IsMatch_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMatch(String,String,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the regular expression finds a match; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method.  </p>\n<p> The static IsMatch method is equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the regular expression pattern specified by <code>pattern</code> and the regular expression options specified by <code>options</code> and calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_System_String_\" data-linktype=\"relative-path\">IsMatch(String)</a> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_IsMatch_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsMatch(String,String,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the regular expression finds a match; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> value.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_\" data-linktype=\"relative-path\">IsMatch</a> method is typically used to validate a string or to ensure that a string conforms to a particular pattern without retrieving that string for subsequent manipulation. If you want to determine whether one or more strings match a regular expression pattern and then retrieve them for subsequent manipulation, call the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_\" data-linktype=\"relative-path\">Match</a> or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method.  </p>\n<p> The static IsMatch method is equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the regular expression pattern specified by <code>pattern</code> and the regular expression options specified by <code>options</code> and calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_System_String_\" data-linktype=\"relative-path\">IsMatch(String)</a> instance method. This regular expression pattern is cached for rapid retrieval by the regular expression engine.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The <code>matchTimeout</code> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a> and <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>. If no match is found in that time interval, the method throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. <code>matchTimeout</code> overrides any default time-out value defined for the application domain in which the method executes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Match_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for the first occurrence of the regular expression specified in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.Match Match (string input);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains information about the match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Match method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property. If a match is found, the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the substring from <code>input</code> that matches the regular expression pattern. If no match is found, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<p> This method returns the first substring in <code>input</code> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method. You can also retrieve all matches in a single method call by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String)</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Match_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.Match Match (string input, int startat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based character position at which to start the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains information about the match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startat</code> is less than zero or greater than the length of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Match method returns the first substring that matches a regular expression pattern, starting at or after the <code>startat</code> character position, in an input string. For information about the language elements used to build a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The regular expression pattern for which the Match method searches is defined by the call to one of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class constructors. For more information about the elements that can form a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> You can optionally specify a starting position in the string by using the <code>startat</code> parameter. When the regular expression engine parses from left to right (the default), the match and the scan move rightward, starting at the character specified in <code>startat</code>. When the regular expression engine parses from right to left (when the regular expression pattern is constructed with the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">System.Text.RegularExpressions.RegexOptions</a> option), the match and scan move in the opposite direction and begin with the character at <code>startat</code> -1. If you do not specify a starting position, the search begins at the default <code>startat</code> position. If the regular expression searches from left to right, the default <code>startat</code> position is at the left end of <code>input</code>; if it searches from right to left, the default <code>startat</code> position is at the right end of <code>input</code>.  </p>\n<p> If you want to restrict a match so that it begins at a particular character position in the string and the regular expression engine does not scan the remainder of the string for a match, anchor the regular expression with a <code>\\G</code> (at the left for a left-to-right pattern, or at the right for a right-to-left pattern). This restricts the match so it must start exactly at <code>startat</code>.  </p>\n<p> You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property. If a match is found, the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the substring from <code>input</code> that matches the regular expression pattern. If no match is found, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<p> This method returns the first substring found at or after the <code>startat</code> character position in <code>input</code> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method. You can also retrieve all matches in a single method call by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,Int32)</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exeeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Match_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for the first occurrence of the specified regular expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.Match Match (string input, string pattern);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains information about the match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Match method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The static Match method is equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_\" data-linktype=\"relative-path\">Match(String)</a> method. In this case, the regular expression engine caches the regular expression pattern.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property. If a match is found, the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the substring from <code>input</code> that matches the regular expression pattern. If no match is found, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<p> This method returns the first substring in <code>input</code> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method. You can also retrieve all matches in a single method call by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String)</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Match_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>beginning</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based character position in the input string that defines the leftmost position to be searched.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>length</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters in the substring to include in the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains information about the match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>beginning</code> is less than zero or greater than the length of <code>input</code>.  </p>\n<p> -or-  </p>\n<p> <code>length</code> is less than zero or greater than the length of <code>input</code>.  </p>\n<p> -or-  </p>\n<p> <code>beginning</code><code>+</code><code>length</code><code>–1</code> identifies a position that is outside the range of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Match method returns the first substring that matches a regular expression pattern in a portion of an input string. For information about the language elements used to build a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The regular expression pattern for which the Match method searches is defined by the call to one of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class constructors. For more information about the elements that can form a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The Match method searches the portion of <code>input</code> defined by the <code>beginning</code> and <code>length</code> parameters for the regular expression pattern. <code>beginning</code> always defines the index of the leftmost character to include in the search, and <code>length</code> defines the maximum number of characters to search. Together, they define the range of the search. If the search proceeds from left to right (the default), the regular expression engine searches from the character at index <code>beginning</code> to the character at index <code>beginning``+``length``– 1</code>. If the regular expression engine was instantiated by using the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">System.Text.RegularExpressions.RegexOptions</a> option so that the search proceeds from right to left, the regular expression engine searches from the character at index <code>beginning``+``length``– 1</code> to the character at index <code>beginning</code>. This method returns the first match that it finds within this range. You can retrieve subsequent matches by repeatedly calling the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method.  </p>\n<p> You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property. If a match is found, the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the substring from <code>input</code> that matches the regular expression pattern. If no match is found, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out value when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Match_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(String,String,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains information about the match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Match method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The static Match method is equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">Regex(String,RegexOptions)</a> constructor and calling the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_\" data-linktype=\"relative-path\">Match(String)</a> method.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property. If a match is found, the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the substring from <code>input</code> that matches the regular expression pattern. If no match is found, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<p> This method returns the first substring found in <code>input</code> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method. You can also retrieve all matches in a single method call by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String,RegexOptions)</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the matching operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Match_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(String,String,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains information about the match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Match method returns the first substring that matches a regular expression pattern in an input string. For information about the language elements used to build a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The static Match method is equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Regex(String,RegexOptions,TimeSpan)</a> constructor and calling the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_\" data-linktype=\"relative-path\">Match(String)</a> method.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Success_\" data-linktype=\"relative-path\">Success</a> property. If a match is found, the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.capture#System_Text_RegularExpressions_Capture_Value_\" data-linktype=\"relative-path\">Value</a> property contains the substring from <code>input</code> that matches the regular expression pattern. If no match is found, its value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<p> This method returns the first substring found in <code>input</code> that matches the regular expression pattern. You can retrieve subsequent matches by repeatedly calling the returned <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.match#System_Text_RegularExpressions_Match_NextMatch_\" data-linktype=\"relative-path\">NextMatch</a> method. You can also retrieve all matches in a single method call by calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String,RegexOptions)</a> method.  </p>\n<p> The <code>matchTimeout</code> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a> and <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>. If no match is found in that time interval, the method throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. <code>matchTimeout</code> overrides any default time-out value defined for the application domain in which the method executes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Matches_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Matches(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for all occurrences of a regular expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.MatchCollection Matches (string input);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Matches method is similar to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_\" data-linktype=\"relative-path\">Match(String)</a> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Matches#5\">      Match match = regex.Match(input);\n      while (match.Success) {\n            // Handle match here...\n\n            match = match.NextMatch();\n      }  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Matches#5\">      Dim match As Match = regex.Match(input)\n      Do While match.Success\n            &#39; Handle match here...\n\n            match = match.NextMatch()\n      Loop  \n</code></pre><p> The collection includes only matches and terminates at the first non-match.  </p>\n<p> The regular expression pattern for which the Matches method searches is defined by the call to one of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class constructors. For more information about the elements that can form a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The Matches method uses lazy evaluation to populate the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object. Accessing members of this collection such as <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_Count_\" data-linktype=\"relative-path\">Count</a> and <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <code>foreach</code> in C# and <code>For``Each</code>…<code>Next</code> in Visual Basic.  </p>\n<p> Because of its lazy evaluation, calling the Matches method does not throw a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. However, the exception is thrown when an operation is performed on the <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object returned by this method, if the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_MatchTimeout_\" data-linktype=\"relative-path\">MatchTimeout</a> property is not <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a> and a matching operation exceeds the time-out interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Matches_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Matches(String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character position in the input string at which to start the search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startat</code> is less than zero or greater than the length of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The  Matches method is similar to the  <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_Int32_\" data-linktype=\"relative-path\">Match(String,Int32)</a> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Matches#6\">      Match match = regex.Match(input, startAt);\n      while (match.Success) {\n            // Handle match here...\n\n            match = match.NextMatch();\n      }  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Matches#6\">      Dim match As Match = regex.Match(input, startAt)\n      Do While match.Success\n            &#39; Handle match here...\n\n            match = match.NextMatch()\n      Loop  \n</code></pre><p> The regular expression pattern for which the Matches method searches is defined by the call to one of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class constructors. For more information about the elements that can form a regular expression pattern, see <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The Matches method uses lazy evaluation to populate the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object. Accessing members of this collection such as <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_Count_\" data-linktype=\"relative-path\">Count</a> and <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <code>foreach</code> in C# and <code>For``Each</code>…<code>Next</code> in Visual Basic.  </p>\n<p> Because of its lazy evaluation, calling the Matches method does not throw a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. However, the exception is thrown when an operation is performed on the <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object returned by this method, if the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_MatchTimeout_\" data-linktype=\"relative-path\">MatchTimeout</a> property is not <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a> and a matching operation exceeds the time-out interval..</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Matches_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Matches(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for all occurrences of a specified regular expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Matches method is similar to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_String_\" data-linktype=\"relative-path\">Match(String,String)</a> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Matches#7\">      Match match = Regex.Match(input, pattern);\n      while (match.Success) {\n            // Handle match here...\n\n            match = match.NextMatch();\n      }  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Matches#7\">      Dim match As Match = Regex.Match(input, pattern)\n      Do While match.Success\n            &#39; Handle match here...\n\n            match = match.NextMatch()\n      Loop  \n</code></pre><p> The static <code>Matches</code> methods are equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance method <code>Matches</code>.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method uses lazy evaluation to populate the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object. Accessing members of this collection such as <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_Count_\" data-linktype=\"relative-path\">Count</a> and <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <code>foreach</code> in C# and <code>For``Each</code>…<code>Next</code> in Visual Basic.  </p>\n<p> Because of its lazy evaluation, calling the Matches method does not throw a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. However, the exception is thrown when an operation is performed on the <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object returned by this method, if a time-out interval is defined by the &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; property of the current application domain and a matching operation exceeds this time-out interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Matches(String,String,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that specify options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Matches method is similar to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">Match(String,String,RegexOptions)</a> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Matches#8\">      Match match = Regex.Match(input, pattern, options);\n      while (match.Success) {\n            // Handle match here...\n\n            match = match.NextMatch();\n      }  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Matches#8\">      Dim match As Match = Regex.Match(input, pattern, options)\n      Do While match.Success\n            &#39; Handle match here...\n\n            match = match.NextMatch()\n      Loop  \n</code></pre><p> The static <code>Matches</code> methods are equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance method <code>Matches</code>.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method uses lazy evaluation to populate the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object. Accessing members of this collection such as <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_Count_\" data-linktype=\"relative-path\">Count</a> and <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <code>foreach</code> in C# and <code>For``Each</code>…<code>Next</code> in Visual Basic.  </p>\n<p> Because of its lazy evaluation, calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_\" data-linktype=\"relative-path\">Matches(String,String)</a> method does not throw a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. However, the exception is thrown when an operation is performed on the <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object returned by this method, if a time-out interval is defined by the &quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot; property of the current application domain and a matching operation exceeds this time-out interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Matches(String,String,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that specify options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Matches method is similar to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">Match(String,String,RegexOptions,TimeSpan)</a> method, except that it returns information about all the matches found in the input string, instead of a single match. It is equivalent to the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Matches#10\">      try {\n         Match match = Regex.Match(input, pattern, options,\n                                   TimeSpan.FromSeconds(1));\n         while (match.Success) {\n               // Handle match here...\n   \n               match = match.NextMatch();\n         }  \n      }\n      catch (RegexMatchTimeoutException) {\n         // Do nothing: assume that exception represents no match.\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Matches#10\">      Try\n         Dim match As Match = Regex.Match(input, pattern, options, \n                                          TimeSpan.FromSeconds(1))\n         Do While match.Success\n               &#39; Handle match here...\n   \n               match = match.NextMatch()\n         Loop  \n      Catch e As RegexMatchTimeoutException\n         &#39; Do nothing: assume that exception represents no match.\n      End Try   \n</code></pre><p> The static <code>Matches</code> methods are equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance method <code>Matches</code>.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_\" data-linktype=\"relative-path\">Matches</a> method uses lazy evaluation to populate the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object. Accessing members of this collection such as <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_Count_\" data-linktype=\"relative-path\">Count</a> and <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection#System_Text_RegularExpressions_MatchCollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> causes the collection to be populated immediately. To take advantage of lazy evaluation, you should iterate the collection by using a construct such as <code>foreach</code> in C# and <code>For``Each</code>…<code>Next</code> in Visual Basic.  </p>\n<p> Because of its lazy evaluation, calling the Matches method does not throw a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. However, an exception is thrown when an operation is performed on the <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> object returned by this method, if a matching operation exceeds this time-out interval specified by the<code>matchTimeout</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string input, string replacement);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>replacement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>replacement</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The search for matches starts at the beginning of the <code>input</code> string. The regular expression is the pattern defined by the constructor for the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object.  </p>\n<p> The <code>replacement</code> parameter specifies the string that is to replace each match in <code>input</code>. <code>replacement</code> can consist of any combination of literal text and <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">substitutions</a>. For example, the replacement pattern <code>a*${test}b</code> inserts the string &quot;a<em>&quot; followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string &quot;b&quot;. The \\</em> character is not recognized as a metacharacter within a replacement pattern.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">character escapes</a>, are allowed in regular expression patterns only and are not recognized in replacement patterns.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown  </p>\n<p> Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_Text_RegularExpressions_MatchEvaluator_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,MatchEvaluator)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>evaluator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Replace method is useful for replacing a regular expression match if any of the following conditions is true:  </p>\n<ul>\n<li><p>The replacement string cannot readily be specified by a regular expression replacement pattern.  </p>\n</li>\n<li><p>The replacement string results from some processing done on the matched string.  </p>\n</li>\n<li><p>The replacement string results from conditional processing.  </p>\n<p>The method is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String)</a> method and passing each <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object in the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> collection to the <code>evaluator</code> delegate.  </p>\n<p>The regular expression is the pattern defined by the constructor for the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object.  </p>\n<p>The <code>evaluator</code> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   public string MatchEvaluatorMethod(Match match)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   Public Function MatchEvaluatorMethod(match As Match) As String\n</code></pre><p>Your custom method returns a string that replaces the matched input.  </p>\n<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown  </p>\n<p>Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string input, string replacement, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>replacement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of times the replacement can occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>replacement</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The search for matches starts at the beginning of the <code>input</code> string. The regular expression is the pattern that is defined by the constructor for the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object. If <code>count</code> is negative, replacements continue to the end of the string. If <code>count</code> exceeds the number of matches, all matches are replaced.  </p>\n<p> The <code>replacement</code> parameter specifies the string that is to replace the first <code>count</code> matches in <code>input</code>. <code>replacement</code> can consist of any combination of literal text and <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">substitutions</a>. For example, the replacement pattern <code>a*${test}b</code> inserts the string &quot;a<em>&quot; followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string &quot;b&quot;. The \\</em> character is not recognized as a metacharacter within a replacement pattern.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">character escapes</a>, are allowed in regular expression patterns only and are not recognized in replacement patterns.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown  </p>\n<p> Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Replace (string input, string pattern, string replacement);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>replacement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code>, <code>pattern</code>, or <code>replacement</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The static <code>Replace</code> methods are equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance method <code>Replace</code>.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>. The search for matches starts at the beginning of the <code>input</code> string.  </p>\n<p> The <code>replacement</code> parameter specifies the string that is to replace each match in <code>input</code>. <code>replacement</code> can consist of any combination of literal text and <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">substitutions</a>. For example, the replacement pattern <code>a*${test}b</code> inserts the string &quot;a<em>&quot; followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string &quot;b&quot;. The \\</em> character is not recognized as a metacharacter within a replacement pattern.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">character escapes</a>, are allowed in regular expression patterns only and are not recognized in replacement patterns.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.  </p>\n<p> Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,MatchEvaluator)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code>, <code>pattern</code>, or <code>evaluator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Replace method is useful for replacing a regular expression match if any of the following conditions is true:  </p>\n<ul>\n<li><p>The replacement string cannot readily be specified by a regular expression replacement pattern.  </p>\n</li>\n<li><p>The replacement string results from some processing done on the matched string.  </p>\n</li>\n<li><p>The replacement string results from conditional processing.  </p>\n<p>The method is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String)</a> method and passing each <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object in the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> collection to the <code>evaluator</code> delegate.  </p>\n<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p>The <code>evaluator</code> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   public string MatchEvaluatorMethod(Match match)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   Public Function MatchEvaluatorMethod(match As Match) As String\n</code></pre><p>Your custom method returns a string that replaces the matched input.  </p>\n<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.  </p>\n<p>Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,MatchEvaluator,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of times the replacement will occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>evaluator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Replace method is useful for replacing a regular expression match if any of the following conditions is true:  </p>\n<ul>\n<li><p>The replacement string cannot readily be specified by a regular expression replacement pattern.  </p>\n</li>\n<li><p>The replacement string results from some processing done on the matched string.  </p>\n</li>\n<li><p>The replacement string results from conditional processing.  </p>\n<p>The method is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String)</a> method and passing the first <code>count</code><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects in the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> collection to the <code>evaluator</code> delegate.  </p>\n<p>The regular expression is the pattern defined by the constructor for the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object.  </p>\n<p>The <code>evaluator</code> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   public string MatchEvaluatorMethod(Match match)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   Public Function MatchEvaluatorMethod(match As Match) As String\n</code></pre><p>Your custom method returns a string that replaces the matched input.  </p>\n<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown  </p>\n<p>Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string input, string replacement, int count, int startat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>replacement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Maximum number of times the replacement can occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character position in the input string where the search begins.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>replacement</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startat</code> is less than zero or greater than the length of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The search for matches starts in the <code>input</code> string at the position specified by the <code>startat</code> parameter. The regular expression is the pattern defined by the constructor for the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object. If <code>count</code> is negative, replacements continue to the end of the string. If <code>count</code> exceeds the number of matches, all matches are replaced.  </p>\n<p> The <code>replacement</code> parameter specifies the string that is to replace each match in <code>input</code>. <code>replacement</code> can consist of any combination of literal text and <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">substitutions</a>. For example, the replacement pattern <code>a*${test}b</code> inserts the string &quot;a<em>&quot; followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string &quot;b&quot;. The \\</em> character is not recognized as a metacharacter within a replacement pattern.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">character escapes</a>, are allowed in regular expression patterns only and are not recognized in replacement patterns.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown  </p>\n<p> Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,String,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>replacement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code>, <code>pattern</code>, or <code>replacement</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The static <code>Replace</code> methods are equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance method <code>Replace</code>.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>. If you specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> for the <code>options</code> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  </p>\n<p> The <code>replacement</code> parameter specifies the string that is to replace each match in <code>input</code>. <code>replacement</code> can consist of any combination of literal text and <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">substitutions</a>. For example, the replacement pattern <code>a*${test}b</code> inserts the string &quot;a<em>&quot; followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string &quot;b&quot;. The \\</em> character is not recognized as a metacharacter within a replacement pattern.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">character escapes</a>, are allowed in regular expression patterns only and are not recognized in replacement patterns.  </p>\n</div>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.  </p>\n<p> Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,MatchEvaluator,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate. Specified options modify the matching operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code>, <code>pattern</code>, or <code>evaluator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Replace method is useful for replacing a regular expression match in if any of the following conditions is true:  </p>\n<ul>\n<li><p>The replacement string cannot readily be specified by a regular expression replacement pattern.  </p>\n</li>\n<li><p>The replacement string results from some processing done on the matched string.  </p>\n</li>\n<li><p>The replacement string results from conditional processing.  </p>\n<p>The method is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String,RegexOptions)</a> method and passing each <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object in the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> collection to the <code>evaluator</code> delegate.  </p>\n<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p>The <code>evaluator</code> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   public string MatchEvaluatorMethod(Match match)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   Public Function MatchEvaluatorMethod(match As Match) As String\n</code></pre><p>Your custom method returns a string that replaces the matched input.  </p>\n<p>If you specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> for the <code>options</code> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  </p>\n<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.  </p>\n<p>Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,MatchEvaluator,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of times the replacement will occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character position in the input string where the search begins.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>evaluator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startat</code> is less than zero or greater than the length of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Replace method is useful for replacing a regular expression match if any of the following conditions is true:  </p>\n<ul>\n<li><p>The replacement string cannot readily be specified by a regular expression replacement pattern.  </p>\n</li>\n<li><p>The replacement string results from some processing done on the matched string.  </p>\n</li>\n<li><p>The replacement string results from conditional processing.  </p>\n<p>The method is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_Int32_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,Int32)</a> method and passing the first <code>count</code><a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> objects in the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> collection to the <code>evaluator</code> delegate.  </p>\n<p>The regular expression is the pattern defined by the constructor for the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object.  </p>\n<p>The <code>evaluator</code> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   public string MatchEvaluatorMethod(Match match)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   Public Function MatchEvaluatorMethod(match As Match) As String\n</code></pre><p>Your custom method returns a string that replaces the matched input.  </p>\n<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the replacement operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown  </p>\n<p>Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,String,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>replacement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code>, <code>pattern</code>, or <code>replacement</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The static <code>Replace</code> methods are equivalent to constructing a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object with the specified regular expression pattern and calling the instance method <code>Replace</code>.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>. If you specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> for the <code>options</code> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  </p>\n<p> The <code>replacement</code> parameter specifies the string that is to replace each match in <code>input</code>. <code>replacement</code> can consist of any combination of literal text and <a href=\"../Topic/Substitutions%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">substitutions</a>. For example, the replacement pattern <code>a*${test}b</code> inserts the string &quot;a<em>&quot; followed by the substring that is matched by the <code>test</code> capturing group, if any, followed by the string &quot;b&quot;. The \\</em> character is not recognized as a metacharacter within a replacement pattern.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Substitutions are the only regular expression language elements that are recognized in a replacement pattern. All other regular expression language elements, including <a href=\"../Topic/Character%20Escapes%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">character escapes</a>, are allowed in regular expression patterns only and are not recognized in replacement patterns.  </p>\n</div>\n<p> The <code>matchTimeout</code> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a> and <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>. If no match is found in that time interval, the method throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. <code>matchTimeout</code> overrides any default time-out value defined for the application domain in which the method executes.  </p>\n<p> Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Replace(String,String,MatchEvaluator,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to search for a match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <code>pattern</code> is not matched in the current instance, the method returns the current instance unchanged.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code>, <code>pattern</code>, or <code>evaluator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Replace(String,String,MatchEvaluator,RegexOptions)</a> method is useful for replacing a regular expression match if any of the following conditions is true:  </p>\n<ul>\n<li><p>If the replacement string cannot readily be specified by a regular expression replacement pattern.  </p>\n</li>\n<li><p>If the replacement string results from some processing performed on the matched string.  </p>\n</li>\n<li><p>If the replacement string results from conditional processing.  </p>\n<p>The method is equivalent to calling the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String,RegexOptions)</a> method and passing each <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object in the returned <a class=\"xref\" href=\"system.text.regularexpressions.matchcollection\" data-linktype=\"relative-path\">MatchCollection</a> collection to the <code>evaluator</code> delegate.  </p>\n<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<p>The <code>evaluator</code> parameter is the delegate for a custom method that you define and that examines each match. The custom method must have the following signature to match the <a class=\"xref\" href=\"system.text.regularexpressions.matchevaluator\" data-linktype=\"relative-path\">MatchEvaluator</a> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   public string MatchEvaluatorMethod(Match match)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Replace#1\">   Public Function MatchEvaluatorMethod(match As Match) As String\n</code></pre><p>Your custom method returns a string that replaces the matched input.  </p>\n<p>If you specify <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> for the <code>options</code> parameter, the search for matches begins at the end of the input string and moves left; otherwise, the search begins at the start of the input string and moves right.  </p>\n<p>The <code>matchTimeout</code> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to &quot;stop responding when they process input that contains near matches. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a> and <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>. If no match is found in that time interval, the method throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. <code>matchTimeout</code> overrides any default time-out value defined for the application domain in which the method executes.  </p>\n<p>Because the method returns <code>input</code> unchanged if there is no match, you can use the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method to determine whether the method has made any replacements to the input string.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Split_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (string input);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to split.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of strings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Split methods are similar to the [String.Split(Char&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName&gt; method, except that Split splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original input string.  </p>\n<p> If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Regex regex = new Regex(&quot;-&quot;);         // Split on hyphens.\n      string[] substrings = regex.Split(&quot;plum--pear&quot;);\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The example displays the following output:\n//    &#39;plum&#39;\n//    &#39;&#39;\n//    &#39;pear&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#1\">Imports System.Text.RegularExpressions\n\nModule RegexSplit\n   Public Sub Main()\n      Dim regex As Regex = New Regex(&quot;-&quot;)         &#39; Split on hyphens.\n      Dim substrings() As String = regex.Split(&quot;plum--pear&quot;)\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;plum&#39;\n&#39;    &#39;&#39;\n&#39;    &#39;pear&#39;      \n</code></pre><p> If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>\\d+</code> to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#21\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\d+&quot;;\n      Regex rgx = new Regex(pattern);\n      string input = &quot;123ABCDE456FGHIJKL789MNOPQ012&quot;;\n      \n      string[] result = rgx.Split(input);\n      for (int ctr = 0; ctr &lt; result.Length; ctr++) {\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result[ctr]);\n         if (ctr &lt; result.Length - 1) \n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL&#39;, &#39;MNOPQ&#39;, &#39;&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#21\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\d+&quot;\n      Dim rgx As New Regex(pattern)\n      Dim input As String = &quot;123ABCDE456FGHIJKL789MNOPQ012&quot;\n      \n      Dim result() As String = rgx.Split(input)\n      For ctr As Integer = 0 To result.Length - 1\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result(ctr))\n         If ctr &lt; result.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine()\n   End Sub               \nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL&#39;, &#39;MNOPQ&#39;, &#39;&#39;\n</code></pre><p> If capturing parentheses are used in a Split expression, any captured text is included in the resulting string array. For example, if you split the string &quot;plum-pear&quot; on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#2\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Regex regex = new Regex(&quot;(-)&quot;);         // Split on hyphens.\n      string[] substrings = regex.Split(&quot;plum-pear&quot;);\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The example displays the following output:\n//    &#39;plum&#39;\n//    &#39;-&#39;\n//    &#39;pear&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#2\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim regex As Regex = New Regex(&quot;(-)&quot;)          &#39; Split on hyphens.\n      Dim substrings() As String = regex.Split(&quot;plum-pear&quot;)\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;plum&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pear&#39;      \n</code></pre><p> However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#3\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = @&quot;07/14/2007&quot;;   \n      string pattern = @&quot;(-)|(/)&quot;;\n      Regex regex = new Regex(pattern);\n      foreach (string result in regex.Split(input)) \n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result);\n      }\n   }\n}\n// Under .NET 1.0 and 1.1, the method returns an array of\n// 3 elements, as follows:\n//    &#39;07&#39;\n//    &#39;14&#39;\n//    &#39;2007&#39;\n//\n// Under .NET 2.0 and later, the method returns an array of\n// 5 elements, as follows:\n//    &#39;07&#39;\n//    &#39;/&#39;\n//    &#39;14&#39;\n//    &#39;/&#39;\n//    &#39;2007&#39; \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#3\">Imports System\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;07/14/2007&quot;   \n      Dim pattern As String = &quot;(-)|(/)&quot;\n      Dim regex As Regex = New Regex(pattern)\n      For Each result As String In regex.Split(input) \n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result)\n      Next\n   End Sub\nEnd Module\n&#39; In .NET 1.0 and 1.1, the method returns an array of\n&#39; 3 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;2007&#39;\n&#39;\n&#39; In .NET 2.0 and later, the method returns an array of\n&#39; 5 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;2007&#39; \n</code></pre><p> If the regular expression can match the empty string, Split will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#11\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;characters&quot;;\n      Regex regex = new Regex(&quot;&quot;);\n      string[] substrings = regex.Split(input);\n      Console.Write(&quot;{&quot;);\n      for(int ctr = 0; ctr &lt; substrings.Length; ctr++)\n      {\n         Console.Write(substrings[ctr]);\n         if (ctr &lt; substrings.Length - 1)\n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine(&quot;}&quot;);\n   }\n}\n// The example displays the following output:   \n//    {, c, h, a, r, a, c, t, e, r, s, }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#11\">Imports System.Text.RegularExpressions\n\nModule Main\n   Public Sub Main()\n      Dim input As String = &quot;characters&quot;\n      Dim regex As New Regex(&quot;&quot;)\n      Dim substrings() As String = regex.Split(input)\n      Console.Write(&quot;{&quot;)\n      For ctr As Integer = 0 to substrings.Length - 1\n         Console.Write(substrings(ctr))\n         If ctr &lt; substrings.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine(&quot;}&quot;)\n   End Sub\nEnd Module\n&#39; The example produces the following output:   \n&#39;    {, c, h, a, r, a, c, t, e, r, s, }\n</code></pre><p> Note that the returned array also includes an empty string at the beginning and end of the array.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Split_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (string input, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to be split.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of times the split can occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of strings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are similar to the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method, except that <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> splits the string at a delimiter determined by a regular expression instead of a set of characters. The <code>count</code> parameter specifies the maximum number of substrings into which the <code>input</code> string can be split; the last string contains the unsplit remainder of the string. A <code>count</code> value of zero provides the default behavior of splitting as many times as possible.  </p>\n<p> If multiple matches are adjacent to one another or if a match is found at the beginning or end of <code>input</code>, and the number of matches found is at least two less than <code>count</code>, an empty string is inserted into the array. That is, empty strings that result from adjacent matches or from matches at the beginning or end of the input string are counted in determining whether the number of matched substrings equals <code>count</code>. In the following example, the regular expression <code>/d+</code> is used to split an input string that includes one or more decimal digits into a maximum of three substrings. Because the beginning of the input string matches the regular expression pattern, the first array element contains <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>, the second contains the first set of alphabetic characters in the input string, and the third contains the remainder of the string that follows the third match.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#25\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\d+&quot;\n      Dim rgx As New Regex(pattern)\n      Dim input As String = &quot;123ABCDE456FGHIJKL789MNOPQ012&quot;\n      \n      Dim result() As String = rgx.Split(input, 3)\n      For ctr As Integer = 0 To result.Length - 1\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result(ctr))\n         If ctr &lt; result.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine()\n   End Sub               \nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL789MNOPQ012&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#25\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\d+&quot;;\n      Regex rgx = new Regex(pattern);\n      string input = &quot;123ABCDE456FGHIJKL789MNOPQ012&quot;;\n      \n      string[] result = rgx.Split(input, 3);\n      for (int ctr = 0; ctr &lt; result.Length; ctr++) {\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result[ctr]);\n         if (ctr &lt; result.Length - 1) \n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL789MNOPQ012&#39;\n</code></pre><p> If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached <code>count</code>. For example, splitting the string &quot;apple-apricot-plum-pear-banana&quot; into a maximum of four substrings results in a seven-element array, as the following code shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#4\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;(-)&quot;\n      Dim input As String = &quot;apple-apricot-plum-pear-banana&quot;\n      Dim regex As Regex = New Regex(pattern)         &#39; Split on hyphens.\n      Dim substrings() As String = regex.Split(input, 4)\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;apple&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;apricot&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;plum&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pear-banana&#39;      \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#4\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = &quot;(-)&quot;;\n      string input = &quot;apple-apricot-plum-pear-banana&quot;;\n      Regex regex = new Regex(pattern);         // Split on hyphens.\n      string[] substrings = regex.Split(input, 4);\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The example displays the following output:\n//       &#39;apple&#39;\n//       &#39;-&#39;\n//       &#39;apricot&#39;\n//       &#39;-&#39;\n//       &#39;plum&#39;\n//       &#39;-&#39;\n//       &#39;pear-banana&#39;      \n</code></pre><p> However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, only captured text from the first set of capturing parentheses is included in the returned array. Starting with the .NET Framework 2.0, all captured text is added to the returned array. However, elements in the returned array that contain captured text are not counted in determining whether the number of matched substrings equals <code>count</code>. For example, in the following code, a regular expression uses two sets of capturing parentheses to extract the elements of a date from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. The call to the Split method then specifies a maximum of two elements in the returned array. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, the method returns a two-element string array. If it is compiled and run under the .NET Framework 2.0 or later versions, the method returns a three-element string array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#5\">Imports System\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;07/14/2007&quot;   \n      Dim pattern As String = &quot;(-)|(/)&quot;\n      Dim regex As Regex = New Regex(pattern)\n      For Each result As String In regex.Split(input, 2) \n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result)\n      Next\n   End Sub\nEnd Module\n&#39; In .NET 1.0 and 1.1, the method returns an array of\n&#39; 2 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;14/2007&#39;\n&#39;\n&#39; In .NET 2.0 and later, the method returns an array of\n&#39; 3 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;14/2007&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#5\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = @&quot;07/14/2007&quot;;   \n      string pattern = @&quot;(-)|(/)&quot;;\n      Regex regex = new Regex(pattern);\n      foreach (string result in regex.Split(input, 2)) \n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result);\n      }\n   }\n}\n// Under .NET 1.0 and 1.1, the method returns an array of\n// 2 elements, as follows:\n//    &#39;07&#39;\n//    &#39;14/2007&#39;\n//\n// Under .NET 2.0 and later, the method returns an array of\n// 3 elements, as follows:\n//    &#39;07&#39;\n//    &#39;/&#39;\n//    &#39;14/2007&#39; \n</code></pre><p> If the regular expression can match the empty string, Split will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string &quot;characters&quot; into as many elements as there are in the input string. Because the null string matches the beginning of the input string, a null string is inserted at the beginning of the returned array. This causes the tenth element to consist of the two characters at the end of the input string.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#12\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;characters&quot;\n      Dim regex As New Regex(&quot;&quot;)\n      Dim substrings() As String = regex.Split(input, input.Length)\n      Console.Write(&quot;{&quot;)\n      For ctr As Integer = 0 to substrings.Length - 1\n         Console.Write(substrings(ctr))\n         if ctr &lt; substrings.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine(&quot;}&quot;)\n   End Sub\nEnd Module\n&#39; The example displays the following output:   \n&#39;    {, c, h, a, r, a, c, t, e, rs}\n</code></pre><p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Split_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string[] Split (string input, string pattern);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to split.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of strings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are similar to the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method, except that <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> splits the string at a delimiter determined by a regular expression instead of a set of characters. The <code>input</code> string is split as many times as possible. If <code>pattern</code> is not found in the <code>input</code> string, the return value contains one element whose value is the original <code>input</code> string.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Compiled regular expressions used in calls to static <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods.  </p>\n</div>\n<p> If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found, as the following code shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#8\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;plum--pear&quot;;\n      string pattern = &quot;-&quot;;            // Split on hyphens\n      \n      string[] substrings = Regex.Split(input, pattern);\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The method displays the following output:\n//    &#39;plum&#39;\n//    &#39;&#39;\n//    &#39;pear&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#8\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;plum--pear&quot;\n      Dim pattern As String = &quot;-&quot;          &#39; Split on hyphens\n      \n      Dim substrings() As String = Regex.Split(input, pattern)\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub  \nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;plum&#39;\n&#39;    &#39;&#39;\n&#39;    &#39;pear&#39;      \n</code></pre><p> If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>\\d+</code> to split an input string on numeric characters. Because the string begins and ends with matching numeric characters, the value of the first and last element of the returned array is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#22\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\d+&quot;;\n      string input = &quot;123ABCDE456FGHIJKL789MNOPQ012&quot;;\n      string[] result = Regex.Split(input, pattern);\n      for (int ctr = 0; ctr &lt; result.Length; ctr++) {\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result[ctr]);\n         if (ctr &lt; result.Length - 1) \n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL&#39;, &#39;MNOPQ&#39;, &#39;&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#22\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\d+&quot;\n      Dim input As String = &quot;123ABCDE456FGHIJKL789MNOPQ012&quot;\n      Dim result() As String = Regex.Split(input, pattern)\n      For ctr As Integer = 0 To result.Length - 1\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result(ctr))\n         If ctr &lt; result.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine()\n   End Sub               \nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL&#39;, &#39;MNOPQ&#39;, &#39;&#39;\n</code></pre><p> If capturing parentheses are used in a <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> expression, any captured text is included in the resulting string array. For example, if you split the string &quot;plum-pear&quot; on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#9\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;plum-pear&quot;;\n      string pattern = &quot;(-)&quot;;\n\n      string[] substrings = Regex.Split(input, pattern);    // Split on hyphens\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The example displays the following output:\n//    &#39;plum&#39;\n//    &#39;-&#39;\n//    &#39;pear&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#9\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;plum-pear&quot;\n      Dim pattern As String = &quot;(-)&quot; \n      \n      Dim substrings() As String = Regex.Split(input, pattern)    &#39; Split on hyphens.\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; The method writes the following to the console:\n&#39;    &#39;plum&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pear&#39;      \n</code></pre><p> However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#10\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = @&quot;07/14/2007&quot;;   \n      string pattern = @&quot;(-)|(/)&quot;;\n\n      foreach (string result in Regex.Split(input, pattern)) \n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result);\n      }\n   }\n}\n// In .NET 1.0 and 1.1, the method returns an array of\n// 3 elements, as follows:\n//    &#39;07&#39;\n//    &#39;14&#39;\n//    &#39;2007&#39;\n//\n// In .NET 2.0 and later, the method returns an array of\n// 5 elements, as follows:\n//    &#39;07&#39;\n//    &#39;/&#39;\n//    &#39;14&#39;\n//    &#39;/&#39;\n//    &#39;2007&#39; \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#10\">Imports System\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;07/14/2007&quot;   \n      Dim pattern As String = &quot;(-)|(/)&quot;\n      For Each result As String In Regex.Split(input, pattern) \n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result)\n      Next\n   End Sub\nEnd Module\n&#39; In .NET 1.0 and 1.1, the method returns an array of\n&#39; 3 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;2007&#39;\n&#39;\n&#39; In .NET 2.0 and later, the method returns an array of\n&#39; 5 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;2007&#39; \n</code></pre><p> If the regular expression can match the empty string, <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#13\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;characters&quot;;\n      string[] substrings = Regex.Split(input, &quot;&quot;);\n      Console.Write(&quot;{&quot;);\n      for(int ctr = 0; ctr &lt; substrings.Length; ctr++)\n      {\n         Console.Write(&quot;&#39;{0}&#39;&quot;, substrings[ctr]);\n         if (ctr &lt; substrings.Length - 1)\n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine(&quot;}&quot;);\n   }\n}\n// The example produces the following output:   \n//    {&#39;&#39;, &#39;c&#39;, &#39;h&#39;, &#39;a&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;t&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;&#39;}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#13\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;characters&quot;\n      Dim substrings() As String = Regex.Split(input, &quot;&quot;)\n      Console.Write(&quot;{&quot;)\n      For ctr As Integer = 0 to substrings.Length - 1\n         Console.Write(&quot;&#39;{0}&#39;&quot;, substrings(ctr))\n         If ctr &lt; substrings.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine(&quot;}&quot;)\n   End Sub\nEnd Module\n&#39; The example produces the following output:   \n&#39;    {&#39;&#39;, &#39;c&#39;, &#39;h&#39;, &#39;a&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;t&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;&#39;}\n</code></pre><p> Note that the returned array also includes an empty string at the beginning and end of the array.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Split_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor. The search for the regular expression pattern starts at a specified character position in the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string[] Split (string input, int count, int startat);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to be split.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of times the split can occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>startat</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character position in the input string where the search will begin.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of strings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>startat</code> is less than zero or greater than the length of <code>input</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are similar to the <a class=\"xref\" href=\"system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method, except that <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> splits the string at a delimiter determined by a regular expression instead of a set of characters. The <code>count</code> parameter specifies the maximum number of substrings into which the <code>input</code> string is split; the last string contains the unsplit remainder of the string. A <code>count</code> value of zero provides the default behavior of splitting as many times as possible. The <code>startat</code> parameter defines the point at which the search for the first delimiter begins (this can be used for skipping leading white space).  </p>\n<p> If no matches are found from the <code>count</code>+1 position in the string, the method returns a one-element array that contains the <code>input</code> string. If one or more matches are found, the first element of the returned array contains the first portion of the string from the first character up to one character before the match.  </p>\n<p> If multiple matches are adjacent to one another and the number of matches found is at least two less than <code>count</code>, an empty string is inserted into the array. Similarly, if a match is found at <code>startat</code>, which is the first character in the string, the first element of the returned array is an empty string. That is, empty strings that result from adjacent matches are counted in determining whether the number of matched substrings equals <code>count</code>. In the following example, the regular expression <code>\\d+</code> is used to find the starting position of the first substring of numeric characters in a string, and then to split the string a maximum of three times starting at that position. Because the regular expression pattern matches the beginning of the input string, the returned string array consists of an empty string, a five-character alphabetic string, and the remainder of the string,  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#26\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\d+&quot;\n      Dim rgx As New Regex(pattern)\n      Dim input As String = &quot;123ABCDE456FGHIJ789KLMNO012PQRST&quot;\n      Dim m As Match = rgx.Match(input)\n      If m.Success Then \n         Dim startAt As Integer = m.Index\n         Dim result() As String = rgx.Split(input, 3, startAt)\n         For ctr As Integer = 0 To result.Length - 1\n            Console.Write(&quot;&#39;{0}&#39;&quot;, result(ctr))\n            If ctr &lt; result.Length - 1 Then Console.Write(&quot;, &quot;)\n         Next\n         Console.WriteLine()\n      End If\n   End Sub               \nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL789MNOPQ012&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#26\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\d+&quot;;\n      Regex rgx = new Regex(pattern);\n      string input = &quot;123ABCDE456FGHIJ789KLMNO012PQRST&quot;;\n      Match m = rgx.Match(input);\n      if (m.Success) { \n         int startAt = m.Index;\n         string[] result = rgx.Split(input, 3, startAt);\n         for (int ctr = 0; ctr &lt; result.Length; ctr++) {\n            Console.Write(&quot;&#39;{0}&#39;&quot;, result[ctr]);\n            if (ctr &lt; result.Length - 1)\n               Console.Write(&quot;, &quot;);\n         }\n         Console.WriteLine();\n      }\n   }\n}\n// The example displays the following output:\n//       &#39;&#39;, &#39;ABCDE&#39;, &#39;FGHIJKL789MNOPQ012&#39;\n</code></pre><p> If capturing parentheses are used in a regular expression, any captured text is included in the array of split strings. However, any array elements that contain captured text are not counted in determining whether the number of matches has reached <code>count</code>. For example, splitting the string &#39;&quot;apple-apricot-plum-pear-pomegranate-pineapple-peach&quot; into a maximum of four substrings beginning at character 15 in the string results in a seven-element array, as the following code shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#6\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;(-)&quot;\n      Dim input As String = &quot;apple-apricot-plum-pear-pomegranate-pineapple-peach&quot;\n\n      Dim regex As Regex = New Regex(pattern)    \n      &#39; Split on hyphens from 15th character on\n      Dim substrings() As String = regex.Split(input, 4, 15)\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub  \nEnd Module\n&#39; The example displays the following output:\n&#39;    &#39;apple-apricot-plum&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pear&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pomegranate&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pineapple-peach&#39;      \n</code></pre><p> However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the individual words in a string. The first set of capturing parentheses captures the hyphen, and the second set captures the vertical bar. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the vertical bar characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#7\">Imports System\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;(-)|([|])&quot;   &#39; possible delimiters found in string\n      Dim input As String = &quot;apple|apricot|plum|pear|pomegranate|pineapple|peach&quot;\n\n      Dim regex As Regex = New Regex(pattern)    \n      &#39; Split on delimiters from 15th character on\n      Dim substrings() As String = regex.Split(input, 4, 15)\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; In .NET 2.0, the method returns an array of\n&#39; 7 elements, as follows:\n&#39;    apple|apricot|plum&#39;\n&#39;    &#39;|&#39;\n&#39;    &#39;pear&#39;\n&#39;    &#39;|&#39;\n&#39;    &#39;pomegranate&#39;\n&#39;    &#39;|&#39;\n&#39;    &#39;pineapple|peach&#39;\n&#39; In .NET 1.0 and 1.1, the method returns an array of\n&#39; 4 elements, as follows:\n&#39;    &#39;apple|apricot|plum&#39;\n&#39;    &#39;pear&#39;\n&#39;    &#39;pomegranate&#39;\n&#39;    &#39;pineapple|peach&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#7\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = &quot;(-)|([|])&quot;;     // possible delimiters found in string\n      string input = &quot;apple|apricot|plum|pear|pomegranate|pineapple|peach&quot;;\n\n      Regex regex = new Regex(pattern);    \n      // Split on delimiters from 15th character on\n      string[] substrings = regex.Split(input, 4, 15);\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// In .NET 2.0 and later, the method returns an array of\n// 7 elements, as follows:\n//    apple|apricot|plum&#39;\n//    &#39;|&#39;\n//    &#39;pear&#39;\n//    &#39;|&#39;\n//    &#39;pomegranate&#39;\n//    &#39;|&#39;\n//    &#39;pineapple|peach&#39;\n// In .NET 1.0 and 1.1, the method returns an array of\n// 4 elements, as follows:\n//    &#39;apple|apricot|plum&#39;\n//    &#39;pear&#39;\n//    &#39;pomegranate&#39;\n//    &#39;pineapple|peach&#39;\n</code></pre><p> If the regular expression can match the empty string, <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> will split the string into an array of single-character strings because the empty string delimiter can be found at every location. The following example splits the string &quot;characters&quot; into as many elements as the input string contains, starting with the character &quot;a&quot;. Because the null string matches the end of the input string, a null string is inserted at the end of the returned array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#14\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;characters&quot;\n      Dim regex As New Regex(&quot;&quot;)\n      Dim substrings() As String = regex.Split(input, input.Length, _\n                                               input.IndexOf(&quot;a&quot;))\n      Console.Write(&quot;{&quot;)\n      For ctr As Integer = 0 to substrings.Length - 1\n         Console.Write(substrings(ctr))\n         If ctr &lt; substrings.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine(&quot;}&quot;)\n   End Sub\nEnd Module\n&#39; The example produces the following output:   \n&#39;    {, c, h, a, r, a, c, t, e, rs}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#14\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;characters&quot;;\n      Regex regex = new Regex(&quot;&quot;);\n      string[] substrings = regex.Split(input, input.Length, input.IndexOf(&quot;a&quot;));\n      Console.Write(&quot;{&quot;);\n      for(int ctr = 0; ctr &lt; substrings.Length; ctr++)\n      {\n         Console.Write(substrings[ctr]);\n         if (ctr &lt; substrings.Length - 1)\n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine(&quot;}&quot;);\n   }\n}\n// The example displays the following output:   \n//    {, c, h, a, r, a, c, t, e, rs}\n</code></pre><p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the split operation exceeds the time-out interval specified by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions,TimeSpan)</a> constructor. If you do not set a time-out interval when you call the constructor, the exception is thrown if the operation exceeds any time-out value established for the application domain in which the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object is created. If no time-out is defined in the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> constructor call or in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Split_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String,String,RegexOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to split.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of strings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are similar to the [String.Split(Char&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName&gt; method, except that <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original <code>input</code> string.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Compiled regular expressions used in calls to static <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods.  </p>\n</div>\n<p> If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.  </p>\n<p> If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>[a-z]+</code> to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#24\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = &quot;[a-z]+&quot;;\n      string input = &quot;Abc1234Def5678Ghi9012Jklm&quot;;\n      string[] result = Regex.Split(input, pattern, \n                                    RegexOptions.IgnoreCase);\n      for (int ctr = 0; ctr &lt; result.Length; ctr++) {\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result[ctr]);\n         if (ctr &lt; result.Length - 1) \n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       &#39;&#39;, &#39;1234&#39;, &#39;5678&#39;, &#39;9012&#39;, &#39;&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#24\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;[a-z]+&quot;\n      Dim input As String = &quot;Abc1234Def5678Ghi9012Jklm&quot;\n      Dim result() As String = Regex.Split(input, pattern, \n                                           RegexOptions.IgnoreCase)\n      For ctr As Integer = 0 To result.Length - 1\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result(ctr))\n         If ctr &lt; result.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine()\n   End Sub               \nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;&#39;, &#39;1234&#39;, &#39;5678&#39;, &#39;9012&#39;, &#39;&#39;\n</code></pre><p> If capturing parentheses are used in a <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> expression, any captured text is included in the resulting string array. For example, if you split the string &quot;plum-pear&quot; on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#9\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;plum-pear&quot;;\n      string pattern = &quot;(-)&quot;;\n\n      string[] substrings = Regex.Split(input, pattern);    // Split on hyphens\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The example displays the following output:\n//    &#39;plum&#39;\n//    &#39;-&#39;\n//    &#39;pear&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#9\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;plum-pear&quot;\n      Dim pattern As String = &quot;(-)&quot; \n      \n      Dim substrings() As String = Regex.Split(input, pattern)    &#39; Split on hyphens.\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; The method writes the following to the console:\n&#39;    &#39;plum&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pear&#39;      \n</code></pre><p> However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#10\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = @&quot;07/14/2007&quot;;   \n      string pattern = @&quot;(-)|(/)&quot;;\n\n      foreach (string result in Regex.Split(input, pattern)) \n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result);\n      }\n   }\n}\n// In .NET 1.0 and 1.1, the method returns an array of\n// 3 elements, as follows:\n//    &#39;07&#39;\n//    &#39;14&#39;\n//    &#39;2007&#39;\n//\n// In .NET 2.0 and later, the method returns an array of\n// 5 elements, as follows:\n//    &#39;07&#39;\n//    &#39;/&#39;\n//    &#39;14&#39;\n//    &#39;/&#39;\n//    &#39;2007&#39; \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#10\">Imports System\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;07/14/2007&quot;   \n      Dim pattern As String = &quot;(-)|(/)&quot;\n      For Each result As String In Regex.Split(input, pattern) \n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result)\n      Next\n   End Sub\nEnd Module\n&#39; In .NET 1.0 and 1.1, the method returns an array of\n&#39; 3 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;2007&#39;\n&#39;\n&#39; In .NET 2.0 and later, the method returns an array of\n&#39; 5 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;2007&#39; \n</code></pre><p> If the regular expression can match the empty string, <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.  </p>\n<p> The <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception is thrown if the execution time of the split operation exceeds the time-out interval specified for the application domain in which the method is called. If no time-out is defined in the application domain&#39;s properties, or if the time-out value is <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.InfiniteMatchTimeout</a>, no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Split_System_String_System_String_System_Text_RegularExpressions_RegexOptions_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Split(String,String,RegexOptions,TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>input</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string to split.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pattern</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The regular expression pattern to match.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that provide options for matching.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A time-out interval, or <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_InfiniteMatchTimeout\" data-linktype=\"relative-path\">InfiniteMatchTimeout</a> to indicate that the method should not time out.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string array.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A regular expression parsing error occurred.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>input</code> or <code>pattern</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>options</code> is not a valid bitwise combination of <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> values.  </p>\n<p> -or-  </p>\n<p> <code>matchTimeout</code> is negative, zero, or greater than approximately 24 days.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are similar to the [String.Split(Char&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName&gt; method, except that <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> splits the string at a delimiter determined by a regular expression instead of a set of characters. The string is split as many times as possible. If no delimiter is found, the return value contains one element whose value is the original <code>input</code> string.  </p>\n<p> The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Compiled regular expressions used in calls to static <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods are automatically cached. To manage the lifetime of compiled regular expressions yourself, use the instance <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> methods.  </p>\n</div>\n<p> If multiple matches are adjacent to one another, an empty string is inserted into the array. For example, splitting a string on a single hyphen causes the returned array to include an empty string in the position where two adjacent hyphens are found.  </p>\n<p> If a match is found at the beginning or the end of the input string, an empty string is included at the beginning or the end of the returned array. The following example uses the regular expression pattern <code>[a-z]+</code> to split an input string on any uppercase or lowercase alphabetic character. Because the string begins and ends with matching alphabetic characters, the value of the first and last element of the returned array is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">System.String.Empty</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#23\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;[a-z]+&quot;\n      Dim input As String = &quot;Abc1234Def5678Ghi9012Jklm&quot;\n      Dim result() As String = Regex.Split(input, pattern, \n                                           RegexOptions.IgnoreCase,\n                                           TimeSpan.FromMilliseconds(500))\n      For ctr As Integer = 0 To result.Length - 1\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result(ctr))\n         If ctr &lt; result.Length - 1 Then Console.Write(&quot;, &quot;)\n      Next\n      Console.WriteLine()\n   End Sub               \nEnd Module\n&#39; The example displays the following output:\n&#39;       &#39;&#39;, &#39;1234&#39;, &#39;5678&#39;, &#39;9012&#39;, &#39;&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#23\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = &quot;[a-z]+&quot;;\n      string input = &quot;Abc1234Def5678Ghi9012Jklm&quot;;\n      string[] result = Regex.Split(input, pattern, \n                                    RegexOptions.IgnoreCase,\n                                    TimeSpan.FromMilliseconds(500));\n      for (int ctr = 0; ctr &lt; result.Length; ctr++) {\n         Console.Write(&quot;&#39;{0}&#39;&quot;, result[ctr]);\n         if (ctr &lt; result.Length - 1) \n            Console.Write(&quot;, &quot;);\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//       &#39;&#39;, &#39;1234&#39;, &#39;5678&#39;, &#39;9012&#39;, &#39;&#39;\n</code></pre><p> If capturing parentheses are used in a <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> expression, any captured text is included in the resulting string array. For example, if you split the string &quot;plum-pear&quot; on a hyphen placed within capturing parentheses, the returned array includes a string element that contains the hyphen.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#9\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = &quot;plum-pear&quot;;\n      string pattern = &quot;(-)&quot;;\n\n      string[] substrings = Regex.Split(input, pattern);    // Split on hyphens\n      foreach (string match in substrings)\n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match);\n      }\n   }\n}\n// The example displays the following output:\n//    &#39;plum&#39;\n//    &#39;-&#39;\n//    &#39;pear&#39;      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#9\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;plum-pear&quot;\n      Dim pattern As String = &quot;(-)&quot; \n      \n      Dim substrings() As String = Regex.Split(input, pattern)    &#39; Split on hyphens.\n      For Each match As String In substrings\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, match)\n      Next\n   End Sub\nEnd Module\n&#39; The method writes the following to the console:\n&#39;    &#39;plum&#39;\n&#39;    &#39;-&#39;\n&#39;    &#39;pear&#39;      \n</code></pre><p> However, when the regular expression pattern includes multiple sets of capturing parentheses, the behavior of this method depends on the version of the .NET Framework. In the .NET Framework 1.0 and 1.1, if a match is not found within the first set of capturing parentheses, captured text from additional capturing parentheses is not included in the returned array. Starting with the .NET Framework 2.0, all captured text is also added to the returned array. For example, the following code uses two sets of capturing parentheses to extract the elements of a date, including the date delimiters, from a date string. The first set of capturing parentheses captures the hyphen, and the second set captures the forward slash. If the example code is compiled and run under the .NET Framework 1.0 or 1.1, it excludes the slash characters; if it is compiled and run under the .NET Framework 2.0 or later versions, it includes them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.Regex.Split#10\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string input = @&quot;07/14/2007&quot;;   \n      string pattern = @&quot;(-)|(/)&quot;;\n\n      foreach (string result in Regex.Split(input, pattern)) \n      {\n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result);\n      }\n   }\n}\n// In .NET 1.0 and 1.1, the method returns an array of\n// 3 elements, as follows:\n//    &#39;07&#39;\n//    &#39;14&#39;\n//    &#39;2007&#39;\n//\n// In .NET 2.0 and later, the method returns an array of\n// 5 elements, as follows:\n//    &#39;07&#39;\n//    &#39;/&#39;\n//    &#39;14&#39;\n//    &#39;/&#39;\n//    &#39;2007&#39; \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.Regex.Split#10\">Imports System\nImports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim input As String = &quot;07/14/2007&quot;   \n      Dim pattern As String = &quot;(-)|(/)&quot;\n      For Each result As String In Regex.Split(input, pattern) \n         Console.WriteLine(&quot;&#39;{0}&#39;&quot;, result)\n      Next\n   End Sub\nEnd Module\n&#39; In .NET 1.0 and 1.1, the method returns an array of\n&#39; 3 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;2007&#39;\n&#39;\n&#39; In .NET 2.0 and later, the method returns an array of\n&#39; 5 elements, as follows:\n&#39;    &#39;07&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;14&#39;\n&#39;    &#39;/&#39;\n&#39;    &#39;2007&#39; \n</code></pre><p> If the regular expression can match the empty string, <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_\" data-linktype=\"relative-path\">Split</a> will split the string into an array of single-character strings because the empty string delimiter can be found at every location.  </p>\n<p> The <code>matchTimeout</code> parameter specifies how long a pattern matching method should try to find a match before it times out. Setting a time-out interval prevents regular expressions that rely on excessive backtracking from appearing to stop responding when they process input that contains near matches. For more information, see <a href=\"../Topic/Best%20Practices%20for%20Regular%20Expressions%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Best Practices for Regular Expressions</a> and <a href=\"../Topic/Backtracking%20in%20Regular%20Expressions.md\" data-linktype=\"relative-path\">Backtracking</a>. If no match is found in that time interval, the method throws a <a class=\"xref\" href=\"system.text.regularexpressions.regexmatchtimeoutexception\" data-linktype=\"relative-path\">RegexMatchTimeoutException</a> exception. <code>matchTimeout</code> overrides any default time-out value defined for the application domain in which the method executes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the regular expression pattern that was passed into the <code>Regex</code> constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <code>pattern</code> parameter that was passed into the <code>Regex</code> constructor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>pattern</code> parameter consists of regular expression language elements that symbolically describe the string to match. For more information about regular expressions, see <a href=\"../Topic/.NET%20Framework%20Regular%20Expressions.md\" data-linktype=\"relative-path\">.NET Framework Regular Expressions</a> and <a href=\"../Topic/Regular%20Expression%20Language%20-%20Quick%20Reference.md\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_Unescape_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unescape(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts any escaped characters in the input string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Unescape (string str);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input string containing the text to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string of characters with any escaped characters converted to their unescaped form.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>str</code> includes an unrecognized escape sequence.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>str</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Unescape method performs one of the following two transformations:  </p>\n<ul>\n<li>It reverses the transformation performed by the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Escape_\" data-linktype=\"relative-path\">Escape</a> method by removing the escape character (&quot;\\&quot;) from each character escaped by the method. These include the \\, *, +, ?, &#124;, {, [, (,), ^, $,., #, and white space characters. In addition, the Unescape method unescapes the closing bracket (]) and closing brace (}) characters.  </li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Unescape cannot reverse an escaped string perfectly because it cannot deduce precisely which characters were escaped,  </p>\n</div>\n<ul>\n<li><p>It replaces the representation of unprintable characters with the characters themselves. For example, it replaces \\a with \\x07. The character representations it replaces are \\a, \\b, \\e, \\n, \\r, \\f, \\t, and \\v.  </p>\n<p>If the Unescape method encounters other escape sequences that it cannot convert, such as \\w or \\s, it throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_UseOptionC\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UseOptionC()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected bool UseOptionC ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <span class=\"xref\">stem.Text.RegularExpressions.Regex.Options*</span> property contains the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> option; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_UseOptionR\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UseOptionR()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Used by a <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object generated by the <span class=\"xref\">stem.Text.RegularExpressions.Regex.CompileToAssembly*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected bool UseOptionR ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <span class=\"xref\">stem.Text.RegularExpressions.Regex.Options*</span> property contains the <a class=\"xref\" href=\"system.text.regularexpressions.regexoptions\" data-linktype=\"relative-path\">RegexOptions</a> option; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_ValidateMatchTimeout_System_TimeSpan_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ValidateMatchTimeout(TimeSpan)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Checks whether a time-out interval is within an acceptable range.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected static void ValidateMatchTimeout (TimeSpan matchTimeout);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>matchTimeout</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The time-out interval to check.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_Regex_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the data necessary to deserialize the current <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>si</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to populate with serialization information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The place to store and retrieve serialized data. This parameter is reserved for future use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Regex.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Regex.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.CacheSize\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.capnames\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.caps\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.capsize\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.capslist\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.CompileToAssembly\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Escape\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.factory\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.GetGroupNames\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.GetGroupNumbers\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.GroupNameFromNumber\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.GroupNumberFromName\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.InitializeReferences\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.internalMatchTimeout\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.IsMatch\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Match\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Matches\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.MatchTimeout\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Options\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.pattern\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Replace\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.RightToLeft\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.roptions\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Split\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.ISerializable.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.ToString\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.Unescape\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.UseOptionC\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.UseOptionR\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.Regex.ValidateMatchTimeout\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"520b2d9a-a941-2961-2265-77d406128b9d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an immutable regular expression.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text.RegularExpressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.Regex\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.RegularExpressions.Regex.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.RegularExpressions.Regex.yml","open_to_public_contributors":true,"api_name":["System.Text.RegularExpressions.Regex","System.Text.RegularExpressions.Regex..ctor","System.Text.RegularExpressions.Regex.CacheSize","System.Text.RegularExpressions.Regex.capnames","System.Text.RegularExpressions.Regex.caps","System.Text.RegularExpressions.Regex.capsize","System.Text.RegularExpressions.Regex.capslist","System.Text.RegularExpressions.Regex.CompileToAssembly","System.Text.RegularExpressions.Regex.Escape","System.Text.RegularExpressions.Regex.factory","System.Text.RegularExpressions.Regex.GetGroupNames","System.Text.RegularExpressions.Regex.GetGroupNumbers","System.Text.RegularExpressions.Regex.GroupNameFromNumber","System.Text.RegularExpressions.Regex.GroupNumberFromName","System.Text.RegularExpressions.Regex.InfiniteMatchTimeout","System.Text.RegularExpressions.Regex.InitializeReferences","System.Text.RegularExpressions.Regex.internalMatchTimeout","System.Text.RegularExpressions.Regex.IsMatch","System.Text.RegularExpressions.Regex.Match","System.Text.RegularExpressions.Regex.Matches","System.Text.RegularExpressions.Regex.MatchTimeout","System.Text.RegularExpressions.Regex.Options","System.Text.RegularExpressions.Regex.pattern","System.Text.RegularExpressions.Regex.Replace","System.Text.RegularExpressions.Regex.RightToLeft","System.Text.RegularExpressions.Regex.roptions","System.Text.RegularExpressions.Regex.Split","System.Text.RegularExpressions.Regex.ISerializable.GetObjectData","System.Text.RegularExpressions.Regex.ToString","System.Text.RegularExpressions.Regex.Unescape","System.Text.RegularExpressions.Regex.UseOptionC","System.Text.RegularExpressions.Regex.UseOptionR","System.Text.RegularExpressions.Regex.ValidateMatchTimeout"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.Regex","System::Text::RegularExpressions::Regex","System.Text.RegularExpressions.Regex.#ctor","System::Text::RegularExpressions::Regex::#ctor","System.Text.RegularExpressions.Regex.CacheSize","System::Text::RegularExpressions::Regex::CacheSize","System.Text.RegularExpressions.Regex.capnames","System::Text::RegularExpressions::Regex::capnames","System.Text.RegularExpressions.Regex.caps","System::Text::RegularExpressions::Regex::caps","System.Text.RegularExpressions.Regex.capsize","System::Text::RegularExpressions::Regex::capsize","System.Text.RegularExpressions.Regex.capslist","System::Text::RegularExpressions::Regex::capslist","System.Text.RegularExpressions.Regex.CompileToAssembly","System::Text::RegularExpressions::Regex::CompileToAssembly","System.Text.RegularExpressions.Regex.Escape","System::Text::RegularExpressions::Regex::Escape","System.Text.RegularExpressions.Regex.factory","System::Text::RegularExpressions::Regex::factory","System.Text.RegularExpressions.Regex.GetGroupNames","System::Text::RegularExpressions::Regex::GetGroupNames","System.Text.RegularExpressions.Regex.GetGroupNumbers","System::Text::RegularExpressions::Regex::GetGroupNumbers","System.Text.RegularExpressions.Regex.GroupNameFromNumber","System::Text::RegularExpressions::Regex::GroupNameFromNumber","System.Text.RegularExpressions.Regex.GroupNumberFromName","System::Text::RegularExpressions::Regex::GroupNumberFromName","System.Text.RegularExpressions.Regex.InfiniteMatchTimeout","System::Text::RegularExpressions::Regex::InfiniteMatchTimeout","System.Text.RegularExpressions.Regex.InitializeReferences","System::Text::RegularExpressions::Regex::InitializeReferences","System.Text.RegularExpressions.Regex.internalMatchTimeout","System::Text::RegularExpressions::Regex::internalMatchTimeout","System.Text.RegularExpressions.Regex.IsMatch","System::Text::RegularExpressions::Regex::IsMatch","System.Text.RegularExpressions.Regex.Match","System::Text::RegularExpressions::Regex::Match","System.Text.RegularExpressions.Regex.Matches","System::Text::RegularExpressions::Regex::Matches","System.Text.RegularExpressions.Regex.MatchTimeout","System::Text::RegularExpressions::Regex::MatchTimeout","System.Text.RegularExpressions.Regex.Options","System::Text::RegularExpressions::Regex::Options","System.Text.RegularExpressions.Regex.pattern","System::Text::RegularExpressions::Regex::pattern","System.Text.RegularExpressions.Regex.Replace","System::Text::RegularExpressions::Regex::Replace","System.Text.RegularExpressions.Regex.RightToLeft","System::Text::RegularExpressions::Regex::RightToLeft","System.Text.RegularExpressions.Regex.roptions","System::Text::RegularExpressions::Regex::roptions","System.Text.RegularExpressions.Regex.Split","System::Text::RegularExpressions::Regex::Split","System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData","System::Text::RegularExpressions::Regex::System#Runtime#Serialization#ISerializable#GetObjectData","System.Text.RegularExpressions.Regex.ToString","System::Text::RegularExpressions::Regex::ToString","System.Text.RegularExpressions.Regex.Unescape","System::Text::RegularExpressions::Regex::Unescape","System.Text.RegularExpressions.Regex.UseOptionC","System::Text::RegularExpressions::Regex::UseOptionC","System.Text.RegularExpressions.Regex.UseOptionR","System::Text::RegularExpressions::Regex::UseOptionR","System.Text.RegularExpressions.Regex.ValidateMatchTimeout","System::Text::RegularExpressions::Regex::ValidateMatchTimeout"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"520b2d9a-a941-2961-2265-77d406128b9d","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text.RegularExpressions/Regex.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Regex class | Microsoft Docs","_op_ogTitle":"Regex class","description":"Represents an immutable regular expression.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.Regex","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.regex","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.regularexpressions.regex","fileRelativePath":"System.Text.RegularExpressions.Regex.html"},"themesRelativePathToOutputRoot":"_themes/"}