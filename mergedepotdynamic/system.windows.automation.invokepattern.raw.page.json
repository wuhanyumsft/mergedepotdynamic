{"content":"    \r\n    <h1 id=\"System_Windows_Automation_InvokePattern\">\r\n      <span class=\"lang-csharp\">InvokePattern</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class InvokePattern : System.Windows.Automation.BasePattern</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.automation.basepattern\" data-linktype=\"relative-path\">System.Windows.Automation.BasePattern</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">InvokePattern</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Controls support InvokePattern if the same behavior is not exposed through another control pattern. For example, if the <a class=\"xref\" href=\"system.windows.automation.invokepattern#System_Windows_Automation_InvokePattern_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method on a control performs the same action as the <a class=\"xref\" href=\"system.windows.automation.expandcollapsepattern#System_Windows_Automation_ExpandCollapsePattern_Expand_\" data-linktype=\"relative-path\">Expand</a> or <a class=\"xref\" href=\"system.windows.automation.expandcollapsepattern#System_Windows_Automation_ExpandCollapsePattern_Collapse_\" data-linktype=\"relative-path\">Collapse</a> method, the control will not support InvokePattern.  </p>\n<p> UI Automation elements that represent controls such as check boxes and radio buttons, which maintain a state, instead support <a class=\"xref\" href=\"system.windows.automation.togglepattern\" data-linktype=\"relative-path\">TogglePattern</a> or <a class=\"xref\" href=\"system.windows.automation.selectionitempattern\" data-linktype=\"relative-path\">SelectionItemPattern</a>.</p>\n\r\n    \r\n    \r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_InvokePattern_InvokedEvent\" data-linktype=\"self-bookmark\">InvokedEvent</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the event raised when a control is invoked or activated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_InvokePattern_Pattern\" data-linktype=\"self-bookmark\">Pattern</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.invokepattern\" data-linktype=\"relative-path\">InvokePattern</a> control pattern.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_InvokePattern_Invoke\" data-linktype=\"self-bookmark\">Invoke()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sends a request to activate a control and initiate its single, unambiguous action.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_InvokePattern_InvokedEvent\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InvokedEvent</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the event raised when a control is invoked or activated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.invokepatternidentifiers\" data-linktype=\"relative-path\">InvokePatternIdentifiers</a>.  </p>\n<p> The InvokedEvent identifier is passed as a parameter to <a class=\"xref\" href=\"system.windows.automation.automation#System_Windows_Automation_Automation_AddAutomationEventHandler_\" data-linktype=\"relative-path\">AddAutomationEventHandler</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, the event handler identifies the event as an Invoked event by comparing the <a class=\"xref\" href=\"system.windows.automation.automationeventargs#System_Windows_Automation_AutomationEventArgs_EventId_\" data-linktype=\"relative-path\">EventId</a> in the event arguments with the InvokedEvent identifier field.  </p>\n<pre><code class=\"lang-vb\" name=\"UIAClient_snip#101\">&#39; Member variables.\nPrivate ElementSubscribeButton As AutomationElement\nPrivate UIAeventHandler As AutomationEventHandler\n\n\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Register an event handler for InvokedEvent on the specified element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;elementButton&quot;&gt;The automation element.&lt;/param&gt;\nPublic Sub SubscribeToInvoke(ByVal elementButton As AutomationElement)\n    If (elementButton IsNot Nothing) Then\n        UIAeventHandler = New AutomationEventHandler(AddressOf OnUIAutomationEvent)\n        Automation.AddAutomationEventHandler(InvokePattern.InvokedEvent, elementButton, _\n        TreeScope.Element, UIAeventHandler)\n        ElementSubscribeButton = elementButton\n    End If\n\nEnd Sub &#39;SubscribeToInvoke\n\n\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; AutomationEventHandler delegate.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\nPrivate Sub OnUIAutomationEvent(ByVal src As Object, ByVal e As AutomationEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips can disappear\n    &#39; before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch ex As ElementNotAvailableException\n        Exit Sub\n    End Try\n    If e.EventId Is InvokePattern.InvokedEvent Then\n        &#39; TODO Add handling code.\n    Else\n    End If\n    &#39; TODO Handle any other events that have been subscribed to.\n    Console.WriteLine(&quot;Event: &quot; &amp; e.EventId.ProgrammaticName)\nEnd Sub &#39;OnUIAutomationEvent\n\nPrivate Sub ShutdownUIA()\n    If (UIAeventHandler IsNot Nothing) Then\n        Automation.RemoveAutomationEventHandler(InvokePattern.InvokedEvent, ElementSubscribeButton, UIAeventHandler)\n    End If\n\nEnd Sub &#39;ShutdownUIA\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAClient_snip#101\">// Member variables.\nAutomationElement ElementSubscribeButton;\nAutomationEventHandler UIAeventHandler;\n\n/// &lt;summary&gt;\n/// Register an event handler for InvokedEvent on the specified element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;elementButton&quot;&gt;The automation element.&lt;/param&gt;\npublic void SubscribeToInvoke(AutomationElement elementButton)\n{\n    if (elementButton != null)\n    {\n        Automation.AddAutomationEventHandler(InvokePattern.InvokedEvent,\n             elementButton, TreeScope.Element,\n             UIAeventHandler = new AutomationEventHandler(OnUIAutomationEvent));\n        ElementSubscribeButton = elementButton;\n    }\n}\n\n/// &lt;summary&gt;\n/// AutomationEventHandler delegate.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\nprivate void OnUIAutomationEvent(object src, AutomationEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n    if (e.EventId == InvokePattern.InvokedEvent)\n    {\n        // TODO Add handling code.\n    }\n    else\n    {\n        // TODO Handle any other events that have been subscribed to.\n    }\n}\n\nprivate void ShutdownUIA()\n{\n    if (UIAeventHandler != null)\n    {\n        Automation.RemoveAutomationEventHandler(InvokePattern.InvokedEvent,\n            ElementSubscribeButton, UIAeventHandler);\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_InvokePattern_Pattern\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Pattern</div>        \r\n          </div>\r\n    \r\n            <p>Identifies the <a class=\"xref\" href=\"system.windows.automation.invokepattern\" data-linktype=\"relative-path\">InvokePattern</a> control pattern.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly System.Windows.Automation.AutomationPattern Pattern;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This identifier is used by UI Automation client applications. UI Automation providers should use the equivalent field in <a class=\"xref\" href=\"system.windows.automation.invokepatternidentifiers\" data-linktype=\"relative-path\">InvokePatternIdentifiers</a>.  </p>\n<p> The pattern identifier is passed to methods such as <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_GetCurrentPattern_\" data-linktype=\"relative-path\">GetCurrentPattern</a> to retrieve the control pattern of interest from the specified <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example an <a class=\"xref\" href=\"system.windows.automation.invokepattern\" data-linktype=\"relative-path\">InvokePattern</a> control pattern is obtained from a control and the <a class=\"xref\" href=\"system.windows.automation.invokepattern#System_Windows_Automation_InvokePattern_Invoke_\" data-linktype=\"relative-path\">Invoke</a> method is called.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAInvokePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains an InvokePattern control pattern from a control\n/// and calls the InvokePattern.Invoke() method on the control.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The control of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void InvokeControl(AutomationElement targetControl)\n{\n    InvokePattern invokePattern = null;\n\n    try\n    {\n        invokePattern =\n            targetControl.GetCurrentPattern(InvokePattern.Pattern)\n            as InvokePattern;\n    }\n    catch (ElementNotEnabledException)\n    {\n        // Object is not enabled\n        return;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the InvokePattern control pattern\n        return;\n    }\n\n    invokePattern.Invoke();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAInvokePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains an InvokePattern control pattern from a control\n&#39;&#39;&#39; and calls the InvokePattern.Invoke() method on the control.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The control of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub InvokeControl(ByVal targetControl As AutomationElement) \n    Dim invokePattern As InvokePattern = Nothing\n    \n    Try\n        invokePattern = _\n        DirectCast(targetControl.GetCurrentPattern(invokePattern.Pattern), _\n        InvokePattern)\n    Catch e As ElementNotEnabledException\n        &#39; Object is not enabled.\n        Return\n    Catch e As InvalidOperationException\n        &#39; Object doesn&#39;t support the InvokePattern control pattern\n        Return\n    End Try\n    \n    invokePattern.Invoke()\n\nEnd Sub &#39;InvokeControl\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_InvokePattern_Invoke\">\r\n    \r\n            <a id=\"System_Windows_Automation_InvokePattern_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Invoke()</div>        \r\n          </div>\r\n    \r\n            <p>Sends a request to activate a control and initiate its single, unambiguous action.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Invoke ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The element does not support the <a class=\"xref\" href=\"system.windows.automation.invokepattern\" data-linktype=\"relative-path\">InvokePattern</a> control pattern or is hidden or blocked.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.elementnotenabledexception\" data-linktype=\"relative-path\">ElementNotEnabledException</a></div>\r\n                  </div>\r\n                  <p>The element is not enabled. Can be raised when a UI Automation provider has implemented its own handling of the <span class=\"xref\">stem.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calls to Invoke should return immediately without blocking. However, this behavior is entirely dependent on the Microsoft UI Automation provider implementation. In scenarios where calling Invoke causes a blocking issue (such as a modal dialog) a separate helper thread may be required to call the method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example an <a class=\"xref\" href=\"system.windows.automation.invokepattern\" data-linktype=\"relative-path\">InvokePattern</a>control pattern is obtained from a control and the Invoke method is called.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAInvokePattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains an InvokePattern control pattern from a control\n/// and calls the InvokePattern.Invoke() method on the control.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The control of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void InvokeControl(AutomationElement targetControl)\n{\n    InvokePattern invokePattern = null;\n\n    try\n    {\n        invokePattern =\n            targetControl.GetCurrentPattern(InvokePattern.Pattern)\n            as InvokePattern;\n    }\n    catch (ElementNotEnabledException)\n    {\n        // Object is not enabled\n        return;\n    }\n    catch (InvalidOperationException)\n    {\n        // object doesn&#39;t support the InvokePattern control pattern\n        return;\n    }\n\n    invokePattern.Invoke();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAInvokePattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains an InvokePattern control pattern from a control\n&#39;&#39;&#39; and calls the InvokePattern.Invoke() method on the control.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The control of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub InvokeControl(ByVal targetControl As AutomationElement) \n    Dim invokePattern As InvokePattern = Nothing\n    \n    Try\n        invokePattern = _\n        DirectCast(targetControl.GetCurrentPattern(invokePattern.Pattern), _\n        InvokePattern)\n    Catch e As ElementNotEnabledException\n        &#39; Object is not enabled.\n        Return\n    Catch e As InvalidOperationException\n        &#39; Object doesn&#39;t support the InvokePattern control pattern\n        Return\n    End Try\n    \n    invokePattern.Invoke()\n\nEnd Sub &#39;InvokeControl\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.InvokePattern.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.InvokePattern.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.InvokePattern\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.InvokePattern.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.InvokePattern.InvokedEvent\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.InvokePattern.Pattern\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7742022b-2eda-4f99-0b5d-2418428fe25a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.InvokePattern\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.InvokePattern.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.InvokePattern.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.InvokePattern","System.Windows.Automation.InvokePattern.Invoke","System.Windows.Automation.InvokePattern.InvokedEvent","System.Windows.Automation.InvokePattern.Pattern"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.InvokePattern","System::Windows::Automation::InvokePattern","System.Windows.Automation.InvokePattern.Invoke","System::Windows::Automation::InvokePattern::Invoke","System.Windows.Automation.InvokePattern.InvokedEvent","System::Windows::Automation::InvokePattern::InvokedEvent","System.Windows.Automation.InvokePattern.Pattern","System::Windows::Automation::InvokePattern::Pattern"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7742022b-2eda-4f99-0b5d-2418428fe25a","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation/InvokePattern.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"InvokePattern class | Microsoft Docs","_op_ogTitle":"InvokePattern class","description":"Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.\n","toc_asset_id":"_splitted/System.Windows.Automation/toc.json","toc_rel":"_splitted/System.Windows.Automation/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.InvokePattern","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.invokepattern","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.invokepattern","fileRelativePath":"System.Windows.Automation.InvokePattern.html"},"themesRelativePathToOutputRoot":"_themes/"}