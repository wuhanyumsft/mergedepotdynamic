{"content":"    \r\n    <h1 id=\"System_ServiceModel_Dispatcher_IErrorHandler\">\r\n      <span class=\"lang-csharp\">IErrorHandler</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IErrorHandler</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To explicitly control the behavior of the application when an exception is thrown, implement the IErrorHandler interface and add it to the <a class=\"xref\" href=\"system.servicemodel.dispatcher.channeldispatcher\" data-linktype=\"relative-path\">ChannelDispatcher</a>â€™s <a class=\"xref\" href=\"system.servicemodel.dispatcher.channeldispatcher#System_ServiceModel_Dispatcher_ChannelDispatcher_ErrorHandlers_\" data-linktype=\"relative-path\">ErrorHandlers</a> property. IErrorHandler enables you to explicitly control the SOAP fault generated, decide whether to send it back to the client, and perform associated tasks, such as logging. Error handlers are called in the order in which they were added to the <a class=\"xref\" href=\"system.servicemodel.dispatcher.channeldispatcher#System_ServiceModel_Dispatcher_ChannelDispatcher_ErrorHandlers_\" data-linktype=\"relative-path\">ErrorHandlers</a> property.  </p>\n<p> Implement the <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_\" data-linktype=\"relative-path\">ProvideFault</a> method to control the fault message that is returned to the client.  </p>\n<p> Implement the <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_HandleError_\" data-linktype=\"relative-path\">HandleError</a> method to ensure error-related behaviors, including error logging, assuring a fail fast, shutting down the application, and so on.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because the <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_HandleError_\" data-linktype=\"relative-path\">HandleError</a> method can be called from many different places there are no guarantees made about which thread the method is called on. Do not depend on <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_HandleError_\" data-linktype=\"relative-path\">HandleError</a> method being called on the operation thread.  </p>\n</div>\n<p> All <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_\" data-linktype=\"relative-path\">ProvideFault</a> implementations are called first, prior to sending a response message. When all <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_\" data-linktype=\"relative-path\">ProvideFault</a> implementations have been called and return, and if <code>fault</code> is non-<code>null</code>, it is sent back to the client according to the operation contract. If <code>fault</code> is <code>null</code> after all implementations have been called, the response message is controlled by the <a class=\"xref\" href=\"system.servicemodel.servicebehaviorattribute#System_ServiceModel_ServiceBehaviorAttribute_IncludeExceptionDetailInFaults_\" data-linktype=\"relative-path\">IncludeExceptionDetailInFaults</a> property value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Exceptions can occur after all <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_\" data-linktype=\"relative-path\">ProvideFault</a> implementations are called and a response message is handed to the channel. If a channel exception occurs (for example, difficulty serializing the message) IErrorHandler objects are notified. In this case, you should still make sure that your development environment catches and displays such exceptions to you or makes use of tracing to discover the problem. For more information about tracing, see <a href=\"../Topic/Using%20Tracing%20to%20Troubleshoot%20Your%20Application.md\" data-linktype=\"relative-path\">Using Tracing to Troubleshoot Your Application</a>.  </p>\n</div>\n<p> After the response message has been sent, all <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler#System_ServiceModel_Dispatcher_IErrorHandler_HandleError_\" data-linktype=\"relative-path\">HandleError</a> implementations are called in the same order.  </p>\n<p> Typically, an IErrorHandler implementation is added to the <a class=\"xref\" href=\"system.servicemodel.dispatcher.channeldispatcher#System_ServiceModel_Dispatcher_ChannelDispatcher_ErrorHandlers_\" data-linktype=\"relative-path\">ErrorHandlers</a> property on the service (and the client in the case of duplex communication).  </p>\n<p> You can add the IErrorHandler to the runtime by implementing a behavior (either an <a class=\"xref\" href=\"system.servicemodel.description.iservicebehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IServiceBehavior</a>, <a class=\"xref\" href=\"system.servicemodel.description.iendpointbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IEndpointBehavior</a>, <a class=\"xref\" href=\"system.servicemodel.description.icontractbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IContractBehavior</a>, or <a class=\"xref\" href=\"system.servicemodel.description.ioperationbehavior\" data-linktype=\"relative-path\">System.ServiceModel.Description.IOperationBehavior</a> object) and use the behavior programmatically, from a configuration file or with a custom attribute to attach your IErrorHandler.  </p>\n<p> For more information about using behaviors to modify the runtime, see <a href=\"../Topic/Configuring%20and%20Extending%20the%20Runtime%20with%20Behaviors.md\" data-linktype=\"relative-path\">Configuring and Extending the Runtime with Behaviors</a>.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Dispatcher_IErrorHandler_HandleError_System_Exception_\" data-linktype=\"self-bookmark\">HandleError(Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_System_Exception_System_ServiceModel_Channels_MessageVersion_System_ServiceModel_Channels_Message__\" data-linktype=\"self-bookmark\">ProvideFault(Exception,MessageVersion,Message)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Enables the creation of a custom <span class=\"xref\">stem.ServiceModel.FaultException`1</span> that is returned from an exception in the course of a service method.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Dispatcher_IErrorHandler_HandleError_System_Exception_\">\r\n    \r\n            <a id=\"System_ServiceModel_Dispatcher_IErrorHandler_HandleError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HandleError(Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Enables error-related processing and returns a value that indicates whether the dispatcher aborts the session and the instance context in certain cases.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool HandleError (Exception error);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>error</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception thrown during processing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/indigo1-md.md&quot; -->Windows Communication Foundation (WCF)<!--END INCLUDE --> should not abort the session (if there is one) and instance context if the instance context is not <a class=\"xref\" href=\"system.servicemodel.instancecontextmode\" data-linktype=\"relative-path\">InstanceContextMode</a>; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the HandleError method to implement error-related behaviors such as error logging, system notifications, shutting down the application, and so on, and return a value that specifies whether the exception has been handled appropriately.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Because the HandleError method can be called from many different places there are no guarantees made about which thread the method is called on. Do not depend on HandleError method being called on the operation thread.  </p>\n</div>\n<p> All <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler\" data-linktype=\"relative-path\">IErrorHandler</a> implementations are called. By default (when the return value is <code>false</code>), if there is an exception, the dispatcher aborts any session and aborts the <a class=\"xref\" href=\"system.servicemodel.instancecontext\" data-linktype=\"relative-path\">InstanceContext</a> if the <a class=\"xref\" href=\"system.servicemodel.instancecontextmode\" data-linktype=\"relative-path\">InstanceContextMode</a> is anything other than <a class=\"xref\" href=\"system.servicemodel.instancecontextmode\" data-linktype=\"relative-path\">InstanceContextMode</a>.  The exception is then considered unhandled and any state is considered corrupt.  </p>\n<p> Return <code>true</code> from HandleError to prevent this default behavior. If any error handler returns <code>true</code> it instructs <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/indigo2-md.md&quot; -->WCF<!--END INCLUDE --> that it is safe to continue using state associated with the failed request.  </p>\n<p> If no error handler returns <code>true</code> from the HandleError method the exception is considered unhandled and the default response applies, potentially resulting in an aborted <a class=\"xref\" href=\"system.servicemodel.instancecontext\" data-linktype=\"relative-path\">System.ServiceModel.InstanceContext</a> and channel when communicating on a session channel or the <a class=\"xref\" href=\"system.servicemodel.servicebehaviorattribute#System_ServiceModel_ServiceBehaviorAttribute_InstanceContextMode_\" data-linktype=\"relative-path\">InstanceContextMode</a> property is not set to <a class=\"xref\" href=\"system.servicemodel.instancecontextmode\" data-linktype=\"relative-path\">System.ServiceModel.InstanceContextMode</a>.  </p>\n<p> The <code>error</code> parameter is never <code>null</code> and contains the exception object that was thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a service that implements <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler\" data-linktype=\"relative-path\">IErrorHandler</a> that returns only <a class=\"xref\" href=\"system.servicemodel.faultexception-1\" data-linktype=\"relative-path\">FaultException&lt;TDetail&gt;</a> of type <code>GreetingFault</code> when a service method throws a managed exception.  </p>\n<pre><code class=\"lang-vb\" name=\"IErrorHandler#6\">#Region &quot;IErrorHandler Members&quot;\nPublic Function HandleError(ByVal [error] As Exception) As Boolean Implements IErrorHandler.HandleError\n  Console.WriteLine(&quot;HandleError called.&quot;)\n  &#39; Returning true indicates you performed your behavior.\n  Return True\nEnd Function\n\n&#39; This is a trivial implementation that converts Exception to FaultException&lt;GreetingFault&gt;.\nPublic Sub ProvideFault(ByVal [error] As Exception, ByVal ver As MessageVersion, ByRef msg As Message) Implements IErrorHandler.ProvideFault\n  Console.WriteLine(&quot;ProvideFault called. Converting Exception to GreetingFault....&quot;)\n  Dim fe As New FaultException(Of GreetingFault)(New GreetingFault([error].Message))\n  Dim fault As MessageFault = fe.CreateMessageFault()\n  msg = Message.CreateMessage(ver, fault, &quot;http://microsoft.wcf.documentation/ISampleService/SampleMethodGreetingFaultFault&quot;)\nEnd Sub\n#End Region\n</code></pre><pre><code class=\"lang-cs\" name=\"IErrorHandler#6\">#region IErrorHandler Members\npublic bool HandleError(Exception error)\n{\n  Console.WriteLine(&quot;HandleError called.&quot;);\n  // Returning true indicates you performed your behavior.\n  return true;\n}\n\n// This is a trivial implementation that converts Exception to FaultException&lt;GreetingFault&gt;.\npublic void ProvideFault(\n  Exception error,\n  MessageVersion ver,\n  ref Message msg\n)\n{\n  Console.WriteLine(&quot;ProvideFault called. Converting Exception to GreetingFault....&quot;);\n  FaultException&lt;GreetingFault&gt; fe \n    = new FaultException&lt;GreetingFault&gt;(new GreetingFault(error.Message));\n  MessageFault fault = fe.CreateMessageFault();\n  msg = Message.CreateMessage(\n    ver, \n    fault, \n    &quot;http://microsoft.wcf.documentation/ISampleService/SampleMethodGreetingFaultFault&quot;\n  );\n}\n#endregion\n</code></pre><p> The following code example shows how to use a service behavior to add the <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler\" data-linktype=\"relative-path\">IErrorHandler</a> implementation to the <a class=\"xref\" href=\"system.servicemodel.dispatcher.channeldispatcher#System_ServiceModel_Dispatcher_ChannelDispatcher_ErrorHandlers_\" data-linktype=\"relative-path\">ErrorHandlers</a> property.  </p>\n<pre><code class=\"lang-vb\" name=\"IErrorHandler#7\">&#39; This behavior modifies no binding parameters.\n#Region &quot;IServiceBehavior Members&quot;\nPublic Sub AddBindingParameters(ByVal description As ServiceDescription, ByVal serviceHostBase As ServiceHostBase, ByVal endpoints As System.Collections.ObjectModel.Collection(Of ServiceEndpoint), ByVal parameters As System.ServiceModel.Channels.BindingParameterCollection) Implements IServiceBehavior.AddBindingParameters\n  Return\nEnd Sub\n\n&#39; This behavior is an IErrorHandler implementation and \n&#39; must be applied to each ChannelDispatcher.\nPublic Sub ApplyDispatchBehavior(ByVal description As ServiceDescription, ByVal serviceHostBase As ServiceHostBase) Implements IServiceBehavior.ApplyDispatchBehavior\n  Console.WriteLine(&quot;The EnforceGreetingFaultBehavior has been applied.&quot;)\n  For Each chanDisp As ChannelDispatcher In serviceHostBase.ChannelDispatchers\n\tchanDisp.ErrorHandlers.Add(Me)\n  Next chanDisp\nEnd Sub\n\n&#39; This behavior requires that the contract have a SOAP fault with a detail type of GreetingFault.\nPublic Sub Validate(ByVal description As ServiceDescription, ByVal serviceHostBase As ServiceHostBase) Implements IServiceBehavior.Validate\n  Console.WriteLine(&quot;Validate is called.&quot;)\n  For Each se As ServiceEndpoint In description.Endpoints\n\t&#39; Must not examine any metadata endpoint.\n\tIf se.Contract.Name.Equals(&quot;IMetadataExchange&quot;) AndAlso se.Contract.Namespace.Equals(&quot;http://schemas.microsoft.com/2006/04/mex&quot;) Then\n\t  Continue For\n\tEnd If\n\tFor Each opDesc As OperationDescription In se.Contract.Operations\n\t  If opDesc.Faults.Count = 0 Then\n\t\tThrow New InvalidOperationException(String.Format(&quot;EnforceGreetingFaultBehavior requires a &quot; &amp; &quot;FaultContractAttribute(typeof(GreetingFault)) in each operation contract.  &quot; &amp; &quot;The &quot;&quot;{0}&quot;&quot; operation contains no FaultContractAttribute.&quot;, opDesc.Name))\n\t  End If\n\t  Dim gfExists As Boolean = False\n\t  For Each fault As FaultDescription In opDesc.Faults\n\t\tIf fault.DetailType.Equals(GetType(GreetingFault)) Then\n\t\t  gfExists = True\n\t\t  Continue For\n\t\tEnd If\n\t  Next fault\n\t  If gfExists = False Then\n\t\tThrow New InvalidOperationException(&quot;EnforceGreetingFaultBehavior requires a FaultContractAttribute(typeof(GreetingFault)) in an operation contract.&quot;)\n\t  End If\n\tNext opDesc\n  Next se\nEnd Sub\n#End Region\n</code></pre><pre><code class=\"lang-cs\" name=\"IErrorHandler#7\">// This behavior modifies no binding parameters.\n#region IServiceBehavior Members\npublic void AddBindingParameters(\n  ServiceDescription description, \n  ServiceHostBase serviceHostBase, \n  System.Collections.ObjectModel.Collection&lt;ServiceEndpoint&gt; endpoints, \n  System.ServiceModel.Channels.BindingParameterCollection parameters\n)\n{\n  return;\n}\n\n// This behavior is an IErrorHandler implementation and \n// must be applied to each ChannelDispatcher.\npublic void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)\n{\n  Console.WriteLine(&quot;The EnforceGreetingFaultBehavior has been applied.&quot;);\n  foreach(ChannelDispatcher chanDisp in serviceHostBase.ChannelDispatchers)\n  {\n    chanDisp.ErrorHandlers.Add(this);      \n  }\n}\n\n// This behavior requires that the contract have a SOAP fault with a detail type of GreetingFault.\npublic void Validate(ServiceDescription description, ServiceHostBase serviceHostBase)\n{\n  Console.WriteLine(&quot;Validate is called.&quot;);\n  foreach (ServiceEndpoint se in description.Endpoints)\n  {\n    // Must not examine any metadata endpoint.\n    if (se.Contract.Name.Equals(&quot;IMetadataExchange&quot;)\n      &amp;&amp; se.Contract.Namespace.Equals(&quot;http://schemas.microsoft.com/2006/04/mex&quot;))\n      continue;\n    foreach (OperationDescription opDesc in se.Contract.Operations)\n    {\n      if (opDesc.Faults.Count == 0)\n        throw new InvalidOperationException(String.Format(\n          &quot;EnforceGreetingFaultBehavior requires a &quot;  \n          + &quot;FaultContractAttribute(typeof(GreetingFault)) in each operation contract.  &quot;\n          + &quot;The \\&quot;{0}\\&quot; operation contains no FaultContractAttribute.&quot;,\n          opDesc.Name)\n        );\n      bool gfExists = false;\n      foreach (FaultDescription fault in opDesc.Faults)\n      {\n        if (fault.DetailType.Equals(typeof(GreetingFault)))\n        {\n          gfExists = true;\n          continue;\n        }\n      }\n      if (gfExists == false)\n      {\n        throw new InvalidOperationException(\n&quot;EnforceGreetingFaultBehavior requires a FaultContractAttribute(typeof(GreetingFault)) in an operation contract.&quot;\n        );\n      }\n    }\n  }\n}\n#endregion\n</code></pre><p> The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <a class=\"xref\" href=\"system.servicemodel.description.iservicebehavior\" data-linktype=\"relative-path\">IServiceBehavior</a>.  </p>\n<!-- Can not find reference ../CodeSnippet/VS_Snippets_CFX/ierrorhandler -->\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_System_Exception_System_ServiceModel_Channels_MessageVersion_System_ServiceModel_Channels_Message__\">\r\n    \r\n            <a id=\"System_ServiceModel_Dispatcher_IErrorHandler_ProvideFault_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProvideFault(Exception,MessageVersion,Message)</div>        \r\n          </div>\r\n    \r\n            <p>Enables the creation of a custom <span class=\"xref\">stem.ServiceModel.FaultException`1</span> that is returned from an exception in the course of a service method.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>error</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> object thrown in the course of the service operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>version</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.messageversion\" data-linktype=\"relative-path\">MessageVersion</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The SOAP version of the message.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>fault</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.servicemodel.channels.message\" data-linktype=\"relative-path\">Message</a> object that is returned to the client, or service, in the duplex case.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Implement the ProvideFault method to create a custom fault message that is returned to the client.  The ProvideFault method will always be called for exceptions that leave operations, except when the WCF runtime recognizes the exception as especially fatal and rethrows the exception itself. When all ProvideFault implementations have been called, the fault message is sent back to the client (if <code>fault</code> is non-<code>null</code>). If the <code>fault</code> parameter is <code>null</code> the default fault is sent to the client.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The inbound message that caused the processing error is available during this method from the <a class=\"xref\" href=\"system.servicemodel.operationcontext#System_ServiceModel_OperationContext_RequestContext_\" data-linktype=\"relative-path\">RequestContext</a> property.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Because the ProvideFault method can be called from many different places there are no guarantees made about which thread the method is called on. Do not depend on ProvideFault method being called on the operation thread.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a service that implements <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler\" data-linktype=\"relative-path\">IErrorHandler</a> that returns only <a class=\"xref\" href=\"system.servicemodel.faultexception-1\" data-linktype=\"relative-path\">FaultException&lt;TDetail&gt;</a> of type <code>GreetingFault</code> when a service method throws a managed exception.  </p>\n<pre><code class=\"lang-vb\" name=\"IErrorHandler#6\">#Region &quot;IErrorHandler Members&quot;\nPublic Function HandleError(ByVal [error] As Exception) As Boolean Implements IErrorHandler.HandleError\n  Console.WriteLine(&quot;HandleError called.&quot;)\n  &#39; Returning true indicates you performed your behavior.\n  Return True\nEnd Function\n\n&#39; This is a trivial implementation that converts Exception to FaultException&lt;GreetingFault&gt;.\nPublic Sub ProvideFault(ByVal [error] As Exception, ByVal ver As MessageVersion, ByRef msg As Message) Implements IErrorHandler.ProvideFault\n  Console.WriteLine(&quot;ProvideFault called. Converting Exception to GreetingFault....&quot;)\n  Dim fe As New FaultException(Of GreetingFault)(New GreetingFault([error].Message))\n  Dim fault As MessageFault = fe.CreateMessageFault()\n  msg = Message.CreateMessage(ver, fault, &quot;http://microsoft.wcf.documentation/ISampleService/SampleMethodGreetingFaultFault&quot;)\nEnd Sub\n#End Region\n</code></pre><pre><code class=\"lang-cs\" name=\"IErrorHandler#6\">#region IErrorHandler Members\npublic bool HandleError(Exception error)\n{\n  Console.WriteLine(&quot;HandleError called.&quot;);\n  // Returning true indicates you performed your behavior.\n  return true;\n}\n\n// This is a trivial implementation that converts Exception to FaultException&lt;GreetingFault&gt;.\npublic void ProvideFault(\n  Exception error,\n  MessageVersion ver,\n  ref Message msg\n)\n{\n  Console.WriteLine(&quot;ProvideFault called. Converting Exception to GreetingFault....&quot;);\n  FaultException&lt;GreetingFault&gt; fe \n    = new FaultException&lt;GreetingFault&gt;(new GreetingFault(error.Message));\n  MessageFault fault = fe.CreateMessageFault();\n  msg = Message.CreateMessage(\n    ver, \n    fault, \n    &quot;http://microsoft.wcf.documentation/ISampleService/SampleMethodGreetingFaultFault&quot;\n  );\n}\n#endregion\n</code></pre><p> The following code example shows how to use a service behavior to add the <a class=\"xref\" href=\"system.servicemodel.dispatcher.ierrorhandler\" data-linktype=\"relative-path\">IErrorHandler</a> implementation to the <a class=\"xref\" href=\"system.servicemodel.dispatcher.channeldispatcher#System_ServiceModel_Dispatcher_ChannelDispatcher_ErrorHandlers_\" data-linktype=\"relative-path\">ErrorHandlers</a> property.  </p>\n<pre><code class=\"lang-vb\" name=\"IErrorHandler#7\">&#39; This behavior modifies no binding parameters.\n#Region &quot;IServiceBehavior Members&quot;\nPublic Sub AddBindingParameters(ByVal description As ServiceDescription, ByVal serviceHostBase As ServiceHostBase, ByVal endpoints As System.Collections.ObjectModel.Collection(Of ServiceEndpoint), ByVal parameters As System.ServiceModel.Channels.BindingParameterCollection) Implements IServiceBehavior.AddBindingParameters\n  Return\nEnd Sub\n\n&#39; This behavior is an IErrorHandler implementation and \n&#39; must be applied to each ChannelDispatcher.\nPublic Sub ApplyDispatchBehavior(ByVal description As ServiceDescription, ByVal serviceHostBase As ServiceHostBase) Implements IServiceBehavior.ApplyDispatchBehavior\n  Console.WriteLine(&quot;The EnforceGreetingFaultBehavior has been applied.&quot;)\n  For Each chanDisp As ChannelDispatcher In serviceHostBase.ChannelDispatchers\n\tchanDisp.ErrorHandlers.Add(Me)\n  Next chanDisp\nEnd Sub\n\n&#39; This behavior requires that the contract have a SOAP fault with a detail type of GreetingFault.\nPublic Sub Validate(ByVal description As ServiceDescription, ByVal serviceHostBase As ServiceHostBase) Implements IServiceBehavior.Validate\n  Console.WriteLine(&quot;Validate is called.&quot;)\n  For Each se As ServiceEndpoint In description.Endpoints\n\t&#39; Must not examine any metadata endpoint.\n\tIf se.Contract.Name.Equals(&quot;IMetadataExchange&quot;) AndAlso se.Contract.Namespace.Equals(&quot;http://schemas.microsoft.com/2006/04/mex&quot;) Then\n\t  Continue For\n\tEnd If\n\tFor Each opDesc As OperationDescription In se.Contract.Operations\n\t  If opDesc.Faults.Count = 0 Then\n\t\tThrow New InvalidOperationException(String.Format(&quot;EnforceGreetingFaultBehavior requires a &quot; &amp; &quot;FaultContractAttribute(typeof(GreetingFault)) in each operation contract.  &quot; &amp; &quot;The &quot;&quot;{0}&quot;&quot; operation contains no FaultContractAttribute.&quot;, opDesc.Name))\n\t  End If\n\t  Dim gfExists As Boolean = False\n\t  For Each fault As FaultDescription In opDesc.Faults\n\t\tIf fault.DetailType.Equals(GetType(GreetingFault)) Then\n\t\t  gfExists = True\n\t\t  Continue For\n\t\tEnd If\n\t  Next fault\n\t  If gfExists = False Then\n\t\tThrow New InvalidOperationException(&quot;EnforceGreetingFaultBehavior requires a FaultContractAttribute(typeof(GreetingFault)) in an operation contract.&quot;)\n\t  End If\n\tNext opDesc\n  Next se\nEnd Sub\n#End Region\n</code></pre><pre><code class=\"lang-cs\" name=\"IErrorHandler#7\">// This behavior modifies no binding parameters.\n#region IServiceBehavior Members\npublic void AddBindingParameters(\n  ServiceDescription description, \n  ServiceHostBase serviceHostBase, \n  System.Collections.ObjectModel.Collection&lt;ServiceEndpoint&gt; endpoints, \n  System.ServiceModel.Channels.BindingParameterCollection parameters\n)\n{\n  return;\n}\n\n// This behavior is an IErrorHandler implementation and \n// must be applied to each ChannelDispatcher.\npublic void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase)\n{\n  Console.WriteLine(&quot;The EnforceGreetingFaultBehavior has been applied.&quot;);\n  foreach(ChannelDispatcher chanDisp in serviceHostBase.ChannelDispatchers)\n  {\n    chanDisp.ErrorHandlers.Add(this);      \n  }\n}\n\n// This behavior requires that the contract have a SOAP fault with a detail type of GreetingFault.\npublic void Validate(ServiceDescription description, ServiceHostBase serviceHostBase)\n{\n  Console.WriteLine(&quot;Validate is called.&quot;);\n  foreach (ServiceEndpoint se in description.Endpoints)\n  {\n    // Must not examine any metadata endpoint.\n    if (se.Contract.Name.Equals(&quot;IMetadataExchange&quot;)\n      &amp;&amp; se.Contract.Namespace.Equals(&quot;http://schemas.microsoft.com/2006/04/mex&quot;))\n      continue;\n    foreach (OperationDescription opDesc in se.Contract.Operations)\n    {\n      if (opDesc.Faults.Count == 0)\n        throw new InvalidOperationException(String.Format(\n          &quot;EnforceGreetingFaultBehavior requires a &quot;  \n          + &quot;FaultContractAttribute(typeof(GreetingFault)) in each operation contract.  &quot;\n          + &quot;The \\&quot;{0}\\&quot; operation contains no FaultContractAttribute.&quot;,\n          opDesc.Name)\n        );\n      bool gfExists = false;\n      foreach (FaultDescription fault in opDesc.Faults)\n      {\n        if (fault.DetailType.Equals(typeof(GreetingFault)))\n        {\n          gfExists = true;\n          continue;\n        }\n      }\n      if (gfExists == false)\n      {\n        throw new InvalidOperationException(\n&quot;EnforceGreetingFaultBehavior requires a FaultContractAttribute(typeof(GreetingFault)) in an operation contract.&quot;\n        );\n      }\n    }\n  }\n}\n#endregion\n</code></pre><p> The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <a class=\"xref\" href=\"system.servicemodel.description.iservicebehavior\" data-linktype=\"relative-path\">IServiceBehavior</a>.  </p>\n<!-- Can not find reference ../CodeSnippet/VS_Snippets_CFX/ierrorhandler -->\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ServiceModel.Dispatcher.IErrorHandler.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ServiceModel.Dispatcher.IErrorHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IErrorHandler\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IErrorHandler.HandleError\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault\">\r\n<meta name=\"APILocation\" content=\"System.ServiceModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8f9541b6-2410-b060-05fc-33de38b060d2\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.ServiceModel.Dispatcher\\IErrorHandler.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.ServiceModel.Dispatcher/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ServiceModel.Dispatcher.IErrorHandler\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.ServiceModel.Dispatcher.IErrorHandler.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.ServiceModel.Dispatcher.IErrorHandler.yml","open_to_public_contributors":true,"api_name":["System.ServiceModel.Dispatcher.IErrorHandler","System.ServiceModel.Dispatcher.IErrorHandler.HandleError","System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault"],"api_location":["System.ServiceModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ServiceModel.Dispatcher.IErrorHandler","System::ServiceModel::Dispatcher::IErrorHandler","System.ServiceModel.Dispatcher.IErrorHandler.HandleError","System::ServiceModel::Dispatcher::IErrorHandler::HandleError","System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault","System::ServiceModel::Dispatcher::IErrorHandler::ProvideFault"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8f9541b6-2410-b060-05fc-33de38b060d2","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.ServiceModel.Dispatcher\\IErrorHandler.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.ServiceModel.Dispatcher/IErrorHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IErrorHandler interface | Microsoft Docs","_op_ogTitle":"IErrorHandler interface","description":"Allows an implementer to control the fault message returned to the caller and optionally perform custom error processing such as logging.\n","toc_asset_id":"_splitted/System.ServiceModel.Dispatcher/toc.json","toc_rel":"_splitted/System.ServiceModel.Dispatcher/toc.json","source_url":"","ms.assetid":"System.ServiceModel.Dispatcher.IErrorHandler","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.servicemodel.dispatcher.ierrorhandler","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.servicemodel.dispatcher.ierrorhandler","fileRelativePath":"System.ServiceModel.Dispatcher.IErrorHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}