{"content":"    \r\n    <h1 id=\"System_Decimal\">\r\n      <span class=\"lang-csharp\">Decimal</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a decimal number.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct Decimal : IComparable, IComparable&lt;decimal&gt;, IConvertible, IEquatable&lt;decimal&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Decimal</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Decimal value type represents decimal numbers ranging from positive 79,228,162,514,264,337,593,543,950,335 to negative 79,228,162,514,264,337,593,543,950,335. The Decimal value type is appropriate for financial calculations that require large numbers of significant integral and fractional digits and no round-off errors. The Decimal type does not eliminate the need for rounding. Rather, it minimizes errors due to rounding. For example, the following code produces a result of 0.9999999999999999999999999999 instead of 1.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Class#1\">using namespace System;\n\nvoid main()\n{\n   Decimal dividend = Decimal::One;\n   Decimal divisor = 3;\n   // The following displays 0.9999999999999999999999999999 to the console\n   Console::WriteLine(dividend/divisor * divisor);   \n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Class#1\">      decimal dividend = Decimal.One;\n      decimal divisor = 3;\n      // The following displays 0.9999999999999999999999999999 to the console\n      Console.WriteLine(dividend/divisor * divisor);   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Class#1\">      Dim dividend As Decimal = Decimal.One\n      Dim divisor As Decimal = 3\n      &#39; The following displays 0.9999999999999999999999999999 to the console\n      Console.WriteLine(dividend/divisor * divisor)   \n</code></pre><p> When the result of the division and multiplication is passed to the <a class=\"xref\" href=\"system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a> method, the result suffers no loss of precision, as the following code shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Class#2\">      decimal dividend = Decimal.One;\n      decimal divisor = 3;\n      // The following displays 1.00 to the console\n      Console.WriteLine(Math.Round(dividend/divisor * divisor, 2));   \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Class#2\">      Dim dividend As Decimal = Decimal.One\n      Dim divisor As Decimal = 3\n      &#39; The following displays 1.00 to the console\n      Console.WriteLine(Math.Round(dividend/divisor * divisor, 2))   \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Decimal.Class#2\">using namespace System;\n\n\nvoid main()\n{\n   Decimal dividend = Decimal::One;\n   Decimal divisor = 3;\n   // The following displays 1.00 to the console\n   Console::WriteLine(Math::Round(dividend/divisor * divisor, 2));   \t\n}\n</code></pre><p> A decimal number is a floating-point value that consists of a sign, a numeric value where each digit in the value ranges from 0 to 9, and a scaling factor that indicates the position of a floating decimal point that separates the integral and fractional parts of the numeric value.  </p>\n<p> The binary representation of a Decimal value consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the 96-bit integer and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28. Therefore, the binary representation of a Decimal value  the form, ((-2<sup>96</sup> to 2<sup>96</sup>) / 10<sup>(0 to 28)</sup>), where -(2<sup>96</sup>-1) is equal to <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, and 2<sup>96</sup>-1 is equal to <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>. For more information about the binary representation of Decimal values and an example, see the [Decimal(Int32&lt;xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29&gt; constructor and the <a class=\"xref\" href=\"system.decimal#System_Decimal_GetBits_\" data-linktype=\"relative-path\">GetBits</a> method.  </p>\n<p> The scaling factor  also preserves any trailing zeros in a Decimal number. Trailing zeros do not affect the value of a Decimal number in arithmetic or comparison operations. However, trailing zeros might be revealed by the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_\" data-linktype=\"relative-path\">ToString</a> method if an appropriate format string is applied.  </p>\n<h2 id=\"conversion-considerations\">Conversion Considerations</h2>\n<p> This type provides methods that convert Decimal values to and from <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>, <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>, <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>, <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>, <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>, <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>, <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>, and <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values. Conversions from these integral types to Decimal are widening conversions that never lose information or throw exceptions.  </p>\n<p> Conversions from Decimal to any of the integral types are narrowing conversions that round the Decimal value to the nearest integer value toward zero. Some languages, such as C#, also support the conversion of Decimal values to <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a> values. If the result of these conversions cannot be represented in the destination type, an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> exception is thrown.  </p>\n<p> The Decimal type also provides methods that convert Decimal values to and from <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Conversions from Decimal to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> are narrowing conversions that might lose precision but not information about the magnitude of the converted value. The conversion does not throw an exception.  </p>\n<p> Conversions from <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> or <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> to Decimal throw an <a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> exception if the result of the conversion cannot be represented as a Decimal.  </p>\n<h2 id=\"performing-operations-on-decimal-values\">Performing Operations on Decimal Values</h2>\n<p> The Decimal type supports standard mathematical operations such as addition, subtraction, division, multiplication, and unary negation. You can also work directly with the binary representation of a Decimal value by calling the <a class=\"xref\" href=\"system.decimal#System_Decimal_GetBits_\" data-linktype=\"relative-path\">GetBits</a> method.  </p>\n<p> To compare two Decimal values, you can use the standard numeric comparison operators, or you can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> or <a class=\"xref\" href=\"system.decimal#System_Decimal_Equals_\" data-linktype=\"relative-path\">Equals</a> method.  </p>\n<p> You can also call the members of the <a class=\"xref\" href=\"system.math\" data-linktype=\"relative-path\">Math</a> class to perform a wide range of numeric operations, including getting the absolute value of a number, determining the maximum or minimum value of two Decimal values, getting the sign of a number, and rounding a number.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_Double_\" data-linktype=\"self-bookmark\">Decimal(Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_Int32_\" data-linktype=\"self-bookmark\">Decimal(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_Int32___\" data-linktype=\"self-bookmark\">Decimal(Int32[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to a decimal value represented in binary and contained in a specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_Int64_\" data-linktype=\"self-bookmark\">Decimal(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_Single_\" data-linktype=\"self-bookmark\">Decimal(Single)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_UInt32_\" data-linktype=\"self-bookmark\">Decimal(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_UInt64_\" data-linktype=\"self-bookmark\">Decimal(UInt64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal__ctor_System_Int32_System_Int32_System_Int32_System_Boolean_System_Byte_\" data-linktype=\"self-bookmark\">Decimal(Int32,Int32,Int32,Boolean,Byte)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> from parameters specifying the instance&#39;s constituent parts.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_MaxValue\" data-linktype=\"self-bookmark\">MaxValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the largest possible value of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>. This field is constant and read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_MinusOne\" data-linktype=\"self-bookmark\">MinusOne</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number negative one (-1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_MinValue\" data-linktype=\"self-bookmark\">MinValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the smallest possible value of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>. This field is constant and read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_One\" data-linktype=\"self-bookmark\">One</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number one (1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Zero\" data-linktype=\"self-bookmark\">Zero</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the number zero (0).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Add_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Add(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Ceiling_System_Decimal_\" data-linktype=\"self-bookmark\">Ceiling(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the smallest integral value that is greater than or equal to the specified decimal number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Compare_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Compare(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_CompareTo_System_Decimal_\" data-linktype=\"self-bookmark\">CompareTo(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object and returns a comparison of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_CompareTo_System_Object_\" data-linktype=\"self-bookmark\">CompareTo(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares this instance to a specified object and returns a comparison of their relative values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Divide_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Divide(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Equals_System_Decimal_\" data-linktype=\"self-bookmark\">Equals(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object represent the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> represent the same type and value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Equals_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Equals(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether two specified instances of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> represent the same value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Floor_System_Decimal_\" data-linktype=\"self-bookmark\">Floor(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rounds a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number to the closest integer toward negative infinity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_FromOACurrency_System_Int64_\" data-linktype=\"self-bookmark\">FromOACurrency(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_GetBits_System_Decimal_\" data-linktype=\"self-bookmark\">GetBits(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of a specified instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to its equivalent binary representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_GetTypeCode\" data-linktype=\"self-bookmark\">GetTypeCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Multiply_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Multiply(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Negate_System_Decimal_\" data-linktype=\"self-bookmark\">Negate(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the result of multiplying the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value by negative one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number in a specified style to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Parse_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent using the specified culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"self-bookmark\">Parse(String,NumberStyles,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent using the specified style and culture-specific format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Remainder_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Remainder(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes the remainder after dividing two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Round_System_Decimal_\" data-linktype=\"self-bookmark\">Round(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rounds a decimal value to the nearest integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Round_System_Decimal_System_Int32_\" data-linktype=\"self-bookmark\">Round(Decimal,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rounds a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a specified number of decimal places.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Round_System_Decimal_System_MidpointRounding_\" data-linktype=\"self-bookmark\">Round(Decimal,MidpointRounding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Round_System_Decimal_System_Int32_System_MidpointRounding_\" data-linktype=\"self-bookmark\">Round(Decimal,Int32,MidpointRounding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Subtract_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">Subtract(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts one specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value from another.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToByte_System_Decimal_\" data-linktype=\"self-bookmark\">ToByte(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 8-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToDouble_System_Decimal_\" data-linktype=\"self-bookmark\">ToDouble(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent double-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToInt16_System_Decimal_\" data-linktype=\"self-bookmark\">ToInt16(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 16-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToInt32_System_Decimal_\" data-linktype=\"self-bookmark\">ToInt32(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 32-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToInt64_System_Decimal_\" data-linktype=\"self-bookmark\">ToInt64(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToOACurrency_System_Decimal_\" data-linktype=\"self-bookmark\">ToOACurrency(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToSByte_System_Decimal_\" data-linktype=\"self-bookmark\">ToSByte(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 8-bit signed integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToSingle_System_Decimal_\" data-linktype=\"self-bookmark\">ToSingle(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent single-precision floating-point number.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToString_System_String_\" data-linktype=\"self-bookmark\">ToString(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToUInt16_System_Decimal_\" data-linktype=\"self-bookmark\">ToUInt16(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 16-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToUInt32_System_Decimal_\" data-linktype=\"self-bookmark\">ToUInt32(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 32-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_ToUInt64_System_Decimal_\" data-linktype=\"self-bookmark\">ToUInt64(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 64-bit unsigned integer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_Truncate_System_Decimal_\" data-linktype=\"self-bookmark\">Truncate(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the integral digits of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>; any fractional digits are discarded.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_TryParse_System_String_System_Decimal__\" data-linktype=\"self-bookmark\">TryParse(String,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Decimal__\" data-linktype=\"self-bookmark\">TryParse(String,NumberStyles,IFormatProvider,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Addition_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Addition(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Decrement_System_Decimal_\" data-linktype=\"self-bookmark\">op_Decrement(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decrements the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand by one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Division_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Division(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Divides two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Equality_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Equality(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Byte_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Char_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Double_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Int16_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Int32_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Int64_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_SByte_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_Single_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_UInt16_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_UInt32_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Decimal_to_System_UInt64_\" data-linktype=\"self-bookmark\">op_Explicit(Decimal)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Double_to_System_Decimal_\" data-linktype=\"self-bookmark\">op_Explicit(Double)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Explicit_System_Single_to_System_Decimal_\" data-linktype=\"self-bookmark\">op_Explicit(Single)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_GreaterThan_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_GreaterThan(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is greater than another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_GreaterThanOrEqual_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_GreaterThanOrEqual(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is greater than or equal to another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_Byte_\" data-linktype=\"self-bookmark\">op_Implicit(Byte)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_Char_\" data-linktype=\"self-bookmark\">op_Implicit(Char)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_Int16_\" data-linktype=\"self-bookmark\">op_Implicit(Int16)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_Int32_\" data-linktype=\"self-bookmark\">op_Implicit(Int32)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_Int64_\" data-linktype=\"self-bookmark\">op_Implicit(Int64)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_SByte_\" data-linktype=\"self-bookmark\">op_Implicit(SByte)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_UInt16_\" data-linktype=\"self-bookmark\">op_Implicit(UInt16)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_UInt32_\" data-linktype=\"self-bookmark\">op_Implicit(UInt32)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td colspan=\"2\">\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Implicit_System_UInt64_\" data-linktype=\"self-bookmark\">op_Implicit(UInt64)</a></div>\r\n          </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Increment_System_Decimal_\" data-linktype=\"self-bookmark\">op_Increment(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Increments the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand by 1.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Inequality_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Inequality(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> objects have different values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_LessThan_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_LessThan(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is less than another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_LessThanOrEqual_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_LessThanOrEqual(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is less than or equal to another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Modulus_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Modulus(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the remainder resulting from dividing two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Multiply_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Multiply(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_Subtraction_System_Decimal_System_Decimal_\" data-linktype=\"self-bookmark\">op_Subtraction(Decimal,Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subtracts two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_UnaryNegation_System_Decimal_\" data-linktype=\"self-bookmark\">op_UnaryNegation(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Negates the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_op_UnaryPlus_System_Decimal_\" data-linktype=\"self-bookmark\">op_UnaryPlus(Decimal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the value of the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand (the sign of the operand is unchanged).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToBoolean_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToBoolean(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToChar_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToChar(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToDateTime_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDateTime(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToDecimal_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDecimal(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToDouble_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToDouble(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToSByte_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSByte(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToSingle_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToSingle(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToType_System_Type_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToType(Type,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToUInt16_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt16(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToUInt32_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt32(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_IConvertible_ToUInt64_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IConvertible.ToUInt64(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Decimal_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">IDeserializationCallback.OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Runs when the deserialization of an object has been completed.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_Double_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(Double)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">NaN</a>, <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>, or <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor rounds <code>value</code> to 15 significant digits using rounding to nearest. This is done even if the number has more than 15 digits and the less significant digits are zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Reals#2\">&#39; Example of the Decimal( Double ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorDoDemo\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( value As Double, valToStr As String )\n\n        &#39; Format and display the constructor.\n        Console.Write( &quot;{0,-34}&quot;, _\n            String.Format( &quot;Decimal( {0} )&quot;, valToStr ) )\n\n        &#39; Construct the Decimal value.\n        Try\n            Dim decimalNum As New Decimal( value )\n\n            &#39; Display the value if it was created successfully.\n            Console.WriteLine( &quot;{0,31}&quot;, decimalNum )\n\n        &#39; Display the exception type if an exception was thrown.\n        Catch ex As Exception\n            Console.WriteLine( &quot;{0,31}&quot;, GetExceptionType( ex ) )\n        End Try\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( Double ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-34}{1,31}&quot;, &quot;Constructor&quot;, _\n            &quot;Value or Exception&quot; )\n        Console.WriteLine( &quot;{0,-34}{1,31}&quot;, &quot;-----------&quot;, _\n            &quot;------------------&quot; )\n\n        &#39; Construct Decimal objects from Double values.\n        CreateDecimal( 1.23456789E+5, &quot;1.23456789E+5&quot; )                \n        CreateDecimal( 1.234567890123E+15, &quot;1.234567890123E+15&quot; )                \n        CreateDecimal( 1.2345678901234567E+25, _\n            &quot;1.2345678901234567E+25&quot; )\n        CreateDecimal( 1.2345678901234567E+35, _\n            &quot;1.2345678901234567E+35&quot; )\n        CreateDecimal( 1.23456789E-5, &quot;1.23456789E-5&quot; )                \n        CreateDecimal( 1.234567890123E-15, &quot;1.234567890123E-15&quot; )      \n        CreateDecimal( 1.2345678901234567E-25, _\n            &quot;1.2345678901234567E-25&quot; ) \n        CreateDecimal( 1.2345678901234567E-35, _\n            &quot;1.2345678901234567E-35&quot; ) \n        CreateDecimal( 1.0 / 7.0, &quot;1.0 / 7.0&quot; ) \n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( Double ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                    Value or Exception\n&#39; -----------                                    ------------------\n&#39; Decimal( 1.23456789E+5 )                               123456.789\n&#39; Decimal( 1.234567890123E+15 )                    1234567890123000\n&#39; Decimal( 1.2345678901234567E+25 )      12345678901234600000000000\n&#39; Decimal( 1.2345678901234567E+35 )               OverflowException\n&#39; Decimal( 1.23456789E-5 )                          0.0000123456789\n&#39; Decimal( 1.234567890123E-15 )       0.000000000000001234567890123\n&#39; Decimal( 1.2345678901234567E-25 )  0.0000000000000000000000001235\n&#39; Decimal( 1.2345678901234567E-35 )                               0\n&#39; Decimal( 1.0 / 7.0 )                            0.142857142857143\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Reals#2\">// Example of the decimal( double ) constructor.\nusing System;\n\nclass DecimalCtorDoDemo\n{\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; )+1 );\n    }\n\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( double value, string valToStr )\n    {\n        // Format and display the constructor.\n        Console.Write( &quot;{0,-34}&quot;, \n            String.Format( &quot;decimal( {0} )&quot;, valToStr ) );\n\n        try\n        {\n            // Construct the decimal value.\n            decimal decimalNum = new decimal( value );\n\n            // Display the value if it was created successfully.\n            Console.WriteLine( &quot;{0,31}&quot;, decimalNum );\n        }\n        catch( Exception ex )\n        {\n            // Display the exception type if an exception was thrown.\n            Console.WriteLine( &quot;{0,31}&quot;, GetExceptionType( ex ) );\n        }\n    }\n    \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the decimal( double ) &quot; +\n            &quot;constructor <br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-34}{1,31}&quot;, &quot;Constructor&quot;, \n            &quot;Value or Exception&quot; );\n        Console.WriteLine( &quot;{0,-34}{1,31}&quot;, &quot;-----------&quot;, \n            &quot;------------------&quot; );\n\n        // Construct decimal objects from double values.\n        CreateDecimal( 1.23456789E+5, &quot;1.23456789E+5&quot; );\n        CreateDecimal( 1.234567890123E+15, &quot;1.234567890123E+15&quot; );\n        CreateDecimal( 1.2345678901234567E+25, \n            &quot;1.2345678901234567E+25&quot; );\n        CreateDecimal( 1.2345678901234567E+35, \n            &quot;1.2345678901234567E+35&quot; );\n        CreateDecimal( 1.23456789E-5, &quot;1.23456789E-5&quot; );\n        CreateDecimal( 1.234567890123E-15, &quot;1.234567890123E-15&quot; );\n        CreateDecimal( 1.2345678901234567E-25, \n            &quot;1.2345678901234567E-25&quot; );\n        CreateDecimal( 1.2345678901234567E-35, \n            &quot;1.2345678901234567E-35&quot; );\n        CreateDecimal( 1.0 / 7.0, &quot;1.0 / 7.0&quot; );\n    }\n}\n\n/*\nThis example of the decimal( double ) constructor\ngenerates the following output.\n\nConstructor                                    Value or Exception\n-----------                                    ------------------\ndecimal( 1.23456789E+5 )                               123456.789\ndecimal( 1.234567890123E+15 )                    1234567890123000\ndecimal( 1.2345678901234567E+25 )      12345678901234600000000000\ndecimal( 1.2345678901234567E+35 )               OverflowException\ndecimal( 1.23456789E-5 )                          0.0000123456789\ndecimal( 1.234567890123E-15 )       0.000000000000001234567890123\ndecimal( 1.2345678901234567E-25 )  0.0000000000000000000000001235\ndecimal( 1.2345678901234567E-35 )                               0\ndecimal( 1.0 / 7.0 )                            0.142857142857143\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Reals#2\">// Example of the Decimal( double ) constructor.\nusing namespace System;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( double value, String^ valToStr )\n{\n   \n   // Format and display the constructor.\n   Console::Write( &quot;{0,-34}&quot;, String::Format( &quot;Decimal( {0} )&quot;, valToStr ) );\n   try\n   {\n      \n      // Construct the Decimal value.\n      Decimal decimalNum = Decimal(value);\n      \n      // Display the value if it was created successfully.\n      Console::WriteLine( &quot;{0,31}&quot;, decimalNum );\n   }\n   catch ( Exception^ ex ) \n   {\n      \n      // Display the exception type if an exception was thrown.\n      Console::WriteLine( &quot;{0,31}&quot;, GetExceptionType( ex ) );\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( double ) &quot;\n   &quot;constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-34}{1,31}&quot;, &quot;Constructor&quot;, &quot;Value or Exception&quot; );\n   Console::WriteLine( &quot;{0,-34}{1,31}&quot;, &quot;-----------&quot;, &quot;------------------&quot; );\n   \n   // Construct Decimal objects from double values.\n   CreateDecimal( 1.23456789E+5, &quot;1.23456789E+5&quot; );\n   CreateDecimal( 1.234567890123E+15, &quot;1.234567890123E+15&quot; );\n   CreateDecimal( 1.2345678901234567E+25, &quot;1.2345678901234567E+25&quot; );\n   CreateDecimal( 1.2345678901234567E+35, &quot;1.2345678901234567E+35&quot; );\n   CreateDecimal( 1.23456789E-5, &quot;1.23456789E-5&quot; );\n   CreateDecimal( 1.234567890123E-15, &quot;1.234567890123E-15&quot; );\n   CreateDecimal( 1.2345678901234567E-25, &quot;1.2345678901234567E-25&quot; );\n   CreateDecimal( 1.2345678901234567E-35, &quot;1.2345678901234567E-35&quot; );\n   CreateDecimal( 1.0 / 7.0, &quot;1.0 / 7.0&quot; );\n}\n\n/*\nThis example of the Decimal( double ) constructor\ngenerates the following output.\n\nConstructor                                    Value or Exception\n-----------                                    ------------------\nDecimal( 1.23456789E+5 )                               123456.789\nDecimal( 1.234567890123E+15 )                    1234567890123000\nDecimal( 1.2345678901234567E+25 )      12345678901234600000000000\nDecimal( 1.2345678901234567E+35 )               OverflowException\nDecimal( 1.23456789E-5 )                          0.0000123456789\nDecimal( 1.234567890123E-15 )       0.000000000000001234567890123\nDecimal( 1.2345678901234567E-25 )  0.0000000000000000000000001235\nDecimal( 1.2345678901234567E-35 )                               0\nDecimal( 1.0 / 7.0 )                            0.142857142857143\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Ints#1\">// Example of the Decimal( int ) constructor.\nusing namespace System;\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( int value, String^ valToStr )\n{\n   Decimal decimalNum = Decimal(value);\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;Decimal( {0} )&quot;, valToStr );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-30}{1,16}&quot;, ctor, decimalNum );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( int ) &quot;\n   &quot;constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-30}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-30}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   \n   // Construct Decimal objects from int values.\n   CreateDecimal( Int32::MinValue, &quot;Int32::MinValue&quot; );\n   CreateDecimal( Int32::MaxValue, &quot;Int32::MaxValue&quot; );\n   CreateDecimal( 0, &quot;0&quot; );\n   CreateDecimal( 999999999, &quot;999999999&quot; );\n   CreateDecimal( 0x40000000, &quot;0x40000000&quot; );\n   CreateDecimal( (int)0xC0000000, &quot;(int)0xC0000000&quot; );\n}\n\n/*\nThis example of the Decimal( int ) constructor\ngenerates the following output.\n\nConstructor                              Value\n-----------                              -----\nDecimal( Int32::MinValue )         -2147483648\nDecimal( Int32::MaxValue )          2147483647\nDecimal( 0 )                                 0\nDecimal( 999999999 )                 999999999\nDecimal( 0x40000000 )               1073741824\nDecimal( (int)0xC0000000 )         -1073741824\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Ints#1\">// Example of the decimal( int ) constructor.\nusing System;\n\nclass DecimalCtorIDemo\n{\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( int value, string valToStr )\n    {\n        decimal decimalNum = new decimal( value );\n\n        // Format the constructor for display.\n        string ctor = String.Format( &quot;decimal( {0} )&quot;, valToStr );\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-30}{1,16}&quot;, ctor, decimalNum );\n    }\n    \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the decimal( int ) &quot; +\n            &quot;constructor <br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-30}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-30}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        // Construct decimal objects from int values.\n        CreateDecimal( int.MinValue, &quot;int.MinValue&quot; );\n        CreateDecimal( int.MaxValue, &quot;int.MaxValue&quot; );\n        CreateDecimal( 0, &quot;0&quot; );\n        CreateDecimal( 999999999, &quot;999999999&quot; );\n        CreateDecimal( 0x40000000, &quot;0x40000000&quot; );\n        CreateDecimal( unchecked( (int)0xC0000000 ), \n            &quot;(int)0xC0000000&quot; );\n    }\n}\n\n/*\nThis example of the decimal( int ) constructor\ngenerates the following output.\n\nConstructor                              Value\n-----------                              -----\ndecimal( int.MinValue )            -2147483648\ndecimal( int.MaxValue )             2147483647\ndecimal( 0 )                                 0\ndecimal( 999999999 )                 999999999\ndecimal( 0x40000000 )               1073741824\ndecimal( (int)0xC0000000 )         -1073741824\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Ints#1\">&#39; Example of the Decimal( Integer ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorIDemo\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( value As Integer, valToStr As String )\n\n        Dim decimalNum As New Decimal( value )\n\n        &#39; Format the constructor for display.\n        Dim ctor As String = _\n            String.Format( &quot;Decimal( {0} )&quot;, valToStr )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, ctor, decimalNum )\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( Integer ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        &#39; Construct Decimal objects from Integer values.\n        CreateDecimal( Integer.MinValue, &quot;Integer.MinValue&quot; )                \n        CreateDecimal( Integer.MaxValue, &quot;Integer.MaxValue&quot; )                \n        CreateDecimal( 0, &quot;0&quot; )                \n        CreateDecimal( 999999999, &quot;999999999&quot; )                \n        CreateDecimal( &amp;H40000000, &quot;&amp;H40000000&quot; )                \n        CreateDecimal( &amp;HC0000000, &quot;&amp;HC0000000&quot; )                \n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( Integer ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                 Value\n&#39; -----------                                 -----\n&#39; Decimal( Integer.MinValue )           -2147483648\n&#39; Decimal( Integer.MaxValue )            2147483647\n&#39; Decimal( 0 )                                    0\n&#39; Decimal( 999999999 )                    999999999\n&#39; Decimal( &amp;H40000000 )                  1073741824\n&#39; Decimal( &amp;HC0000000 )                 -1073741824\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_Int32___\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(Int32[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to a decimal value represented in binary and contained in a specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (int[] bits);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>bits</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of 32-bit signed integers containing a representation of a decimal value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>bits</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The length of the <code>bits</code> is not 4.  </p>\n<p> -or-  </p>\n<p> The representation of the decimal value in <code>bits</code> is not valid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The binary representation of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.  </p>\n<p> <code>bits</code> is a four-element long array of 32-bit signed integers.  </p>\n<p> <code>bits</code> [0], <code>bits</code> [1], and <code>bits</code> [2] contain the low, middle, and high 32 bits of the 96-bit integer number.  </p>\n<p> <code>bits</code> [3] contains the scale factor and sign, and consists of following parts:  </p>\n<p> Bits 0 to 15, the lower word, are unused and must be zero.  </p>\n<p> Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.  </p>\n<p> Bits 24 to 30 are unused and must be zero.  </p>\n<p> Bit 31 contains the sign; 0 meaning positive, and 1 meaning negative.  </p>\n<p> A numeric value might have several possible binary representations; all are equally valid and numerically equivalent. Note that the bit representation differentiates between negative and positive zero. These values are treated as being equal in all operations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with an array of four <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Arrays#1\">// Example of the Decimal( int __gc [ ] ) constructor.\nusing namespace System;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( array&lt;int&gt;^bits )\n{\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;Decimal( {{ 0x{0:X}&quot;, bits[ 0 ] );\n   String^ valOrExc;\n   for ( int index = 1; index &lt; bits-&gt;Length; index++ )\n      ctor = String::Concat( ctor, String::Format( &quot;, 0x{0:X}&quot;, bits[ index ] ) );\n   ctor = String::Concat( ctor, &quot; } )&quot; );\n   try\n   {\n      \n      // Construct the Decimal value.\n      Decimal decimalNum = Decimal(bits);\n      \n      // Format the Decimal value for display.\n      valOrExc = decimalNum.ToString();\n   }\n   catch ( Exception^ ex ) \n   {\n      \n      // Save the exception type if an exception was thrown.\n      valOrExc = GetExceptionType( ex );\n   }\n\n   \n   // Display the constructor and Decimal value or exception.\n   int ctorLen = 76 - valOrExc-&gt;Length;\n   \n   // Display the data on one line if it will fit.\n   if ( ctorLen &gt; ctor-&gt;Length )\n      Console::WriteLine( &quot;{0}{1}&quot;, ctor-&gt;PadRight( ctorLen ), valOrExc );\n   // Otherwise, display the data on two lines.\n   else\n   {\n      Console::WriteLine( &quot;{0}&quot;, ctor );\n      Console::WriteLine( &quot;{0,76}&quot;, valOrExc );\n   }\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( int __gc [ ] ) &quot;\n   &quot;constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;Constructor&quot;, &quot;Value or Exception&quot; );\n   Console::WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;-----------&quot;, &quot;------------------&quot; );\n   \n   // Construct Decimal objects from integer arrays.\n   array&lt;Int32&gt;^zero = {0,0,0,0};\n   CreateDecimal( zero );\n   array&lt;Int32&gt;^arrayShort = {0,0,0};\n   CreateDecimal( arrayShort );\n   array&lt;Int32&gt;^arrayLong = {0,0,0,0,0};\n   CreateDecimal( arrayLong );\n   array&lt;Int32&gt;^word0Data = {1000000000,0,0,0};\n   CreateDecimal( word0Data );\n   array&lt;Int32&gt;^word1Data = {0,1000000000,0,0};\n   CreateDecimal( word1Data );\n   array&lt;Int32&gt;^word2Data = {0,0,1000000000,0};\n   CreateDecimal( word2Data );\n   array&lt;Int32&gt;^word3Data = {0,0,0,1000000000};\n   CreateDecimal( word3Data );\n   array&lt;Int32&gt;^decMax = { -1,-1,-1,0};\n   CreateDecimal( decMax );\n   array&lt;Int32&gt;^decMin = { -1,-1,-1,0x80000000};\n   CreateDecimal( decMin );\n   array&lt;Int32&gt;^fracDig16 = { -1,0,0,0x100000};\n   CreateDecimal( fracDig16 );\n   array&lt;Int32&gt;^fracDig28 = { -1,0,0,0x1C0000};\n   CreateDecimal( fracDig28 );\n   array&lt;Int32&gt;^fracDig29 = { -1,0,0,0x1D0000};\n   CreateDecimal( fracDig29 );\n   array&lt;Int32&gt;^reserved = { -1,0,0,0x1C0001};\n   CreateDecimal( reserved );\n   array&lt;Int32&gt;^Same4Words = {0xF0000,0xF0000,0xF0000,0xF0000};\n   CreateDecimal( Same4Words );\n}\n\n/*\nThis example of the Decimal( int __gc [ ] ) constructor\ngenerates the following output.\n\nConstructor                                               Value or Exception\n-----------                                               ------------------\nDecimal( { 0x0, 0x0, 0x0, 0x0 } )                                          0\nDecimal( { 0x0, 0x0, 0x0 } )                               ArgumentException\nDecimal( { 0x0, 0x0, 0x0, 0x0, 0x0 } )                     ArgumentException\nDecimal( { 0x3B9ACA00, 0x0, 0x0, 0x0 } )                          1000000000\nDecimal( { 0x0, 0x3B9ACA00, 0x0, 0x0 } )                 4294967296000000000\nDecimal( { 0x0, 0x0, 0x3B9ACA00, 0x0 } )       18446744073709551616000000000\nDecimal( { 0x0, 0x0, 0x0, 0x3B9ACA00 } )                   ArgumentException\nDecimal( { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0 } )\n                                               79228162514264337593543950335\nDecimal( { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000 } )\n                                              -79228162514264337593543950335\nDecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x100000 } )             0.0000004294967295\nDecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x1C0000 } ) 0.0000000000000000004294967295\nDecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x1D0000 } )              ArgumentException\nDecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x1C0001 } )              ArgumentException\nDecimal( { 0xF0000, 0xF0000, 0xF0000, 0xF0000 } )\n                                                 18133887298.441562272235520\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Arrays#1\">&#39; Example of the Decimal( Integer( ) ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorIArrDemo\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( ByVal bits( ) As Integer )\n\n        &#39; Format and save the constructor.\n        Dim ctor As String = String.Format( &quot;Decimal( {{ &amp;H{0:X}&quot;, bits( 0 ) )\n        Dim valOrExc As String\n        Dim index As Integer\n        For index = 1 to bits.Length - 1\n            ctor &amp;= String.Format( &quot;, &amp;H{0:X}&quot;, bits( index ) )\n        Next index\n        ctor &amp;= &quot; } )&quot;\n\n        &#39; Construct the Decimal value.\n        Try\n            Dim decimalNum As New Decimal( bits )\n\n            &#39; Format the Decimal value for display.\n            valOrExc = decimalNum.ToString( )\n\n        &#39; Save the exception type if an exception was thrown.\n        Catch ex As Exception\n            valOrExc =  GetExceptionType( ex ) \n        End Try\n\n        &#39; Display the constructor and Decimal value or exception.\n        Dim ctorLen As Integer = 76 - valOrExc.Length\n        If ctorLen &gt; ctor.Length Then\n\n            &#39; Display the data on one line if it will fit.\n            Console.WriteLine( &quot;{0}{1}&quot;, ctor.PadRight( ctorLen ), _\n                valOrExc )\n\n        &#39; Otherwise, display the data on two lines.\n        Else\n            Console.WriteLine( &quot;{0}&quot;, ctor )\n            Console.WriteLine( &quot;{0,76}&quot;, valOrExc )\n        End If\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;Decimal( Integer( ) ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;Constructor&quot;, _\n            &quot;Value or Exception&quot; )\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;-----------&quot;, _\n            &quot;------------------&quot; )\n\n        &#39; Construct Decimal objects from Integer arrays.\n        CreateDecimal( New Integer( ) { 0, 0, 0, 0 } )\n        CreateDecimal( New Integer( ) { 0, 0, 0 } )\n        CreateDecimal( New Integer( ) { 0, 0, 0, 0, 0 } )\n        CreateDecimal( New Integer( ) { 1000000000, 0, 0, 0 } )\n        CreateDecimal( New Integer( ) { 0, 1000000000, 0, 0 } )\n        CreateDecimal( New Integer( ) { 0, 0, 1000000000, 0 } )\n        CreateDecimal( New Integer( ) { 0, 0, 0, 1000000000 } )\n        CreateDecimal( New Integer( ) { -1, -1, -1, 0 } )\n        CreateDecimal( New Integer( ) { -1, -1, -1, &amp;H80000000 } )\n        CreateDecimal( New Integer( ) { -1, 0, 0, &amp;H100000 } )\n        CreateDecimal( New Integer( ) { -1, 0, 0, &amp;H1C0000 } )\n        CreateDecimal( New Integer( ) { -1, 0, 0, &amp;H1D0000 } )\n        CreateDecimal( New Integer( ) { -1, 0, 0, &amp;H1C0001 } )\n        CreateDecimal( New Integer( ) _\n            { &amp;HF0000, &amp;HF0000, &amp;HF0000, &amp;HF0000 } )\n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( Integer( ) ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                               Value or Exception\n&#39; -----------                                               ------------------\n&#39; Decimal( { &amp;H0, &amp;H0, &amp;H0, &amp;H0 } )                                          0\n&#39; Decimal( { &amp;H0, &amp;H0, &amp;H0 } )                               ArgumentException\n&#39; Decimal( { &amp;H0, &amp;H0, &amp;H0, &amp;H0, &amp;H0 } )                     ArgumentException\n&#39; Decimal( { &amp;H3B9ACA00, &amp;H0, &amp;H0, &amp;H0 } )                          1000000000\n&#39; Decimal( { &amp;H0, &amp;H3B9ACA00, &amp;H0, &amp;H0 } )                 4294967296000000000\n&#39; Decimal( { &amp;H0, &amp;H0, &amp;H3B9ACA00, &amp;H0 } )       18446744073709551616000000000\n&#39; Decimal( { &amp;H0, &amp;H0, &amp;H0, &amp;H3B9ACA00 } )                   ArgumentException\n&#39; Decimal( { &amp;HFFFFFFFF, &amp;HFFFFFFFF, &amp;HFFFFFFFF, &amp;H0 } )\n&#39;                                                79228162514264337593543950335\n&#39; Decimal( { &amp;HFFFFFFFF, &amp;HFFFFFFFF, &amp;HFFFFFFFF, &amp;H80000000 } )\n&#39;                                               -79228162514264337593543950335\n&#39; Decimal( { &amp;HFFFFFFFF, &amp;H0, &amp;H0, &amp;H100000 } )             0.0000004294967295\n&#39; Decimal( { &amp;HFFFFFFFF, &amp;H0, &amp;H0, &amp;H1C0000 } ) 0.0000000000000000004294967295\n&#39; Decimal( { &amp;HFFFFFFFF, &amp;H0, &amp;H0, &amp;H1D0000 } )              ArgumentException\n&#39; Decimal( { &amp;HFFFFFFFF, &amp;H0, &amp;H0, &amp;H1C0001 } )              ArgumentException\n&#39; Decimal( { &amp;HF0000, &amp;HF0000, &amp;HF0000, &amp;HF0000 } )\n&#39;                                                  18133887298.441562272235520\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Arrays#1\">// Example of the decimal( int[ ] ) constructor.\nusing System;\n\nclass DecimalCtorIArrDemo\n{\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( int[ ] bits )\n    {\n        // Format the constructor for display.\n        string ctor = String.Format( \n            &quot;decimal( {{ 0x{0:X}&quot;, bits[ 0 ] );\n        string valOrExc;\n        \n        for( int index = 1; index &lt; bits.Length; index++ )\n            ctor += String.Format( &quot;, 0x{0:X}&quot;, bits[ index ] );\n        ctor += &quot; } )&quot;;\n\n        try\n        {\n            // Construct the decimal value.\n            decimal decimalNum = new decimal( bits );\n\n            // Format the decimal value for display.\n            valOrExc = decimalNum.ToString( );\n        }\n        catch( Exception ex )\n        {\n            // Save the exception type if an exception was thrown.\n            valOrExc = GetExceptionType( ex );\n        }\n\n        // Display the constructor and decimal value or exception.\n        int ctorLen = 76 - valOrExc.Length;\n\n        // Display the data on one line if it will fit.\n        if( ctorLen &gt; ctor.Length )\n            Console.WriteLine( &quot;{0}{1}&quot;, ctor.PadRight( ctorLen ), \n                valOrExc );\n\n        // Otherwise, display the data on two lines.\n        else\n        {\n            Console.WriteLine( &quot;{0}&quot;, ctor );\n            Console.WriteLine( &quot;{0,76}&quot;, valOrExc );\n        }\n    }\n    \n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the decimal( int[ ] ) constructor &quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;Constructor&quot;, \n            &quot;Value or Exception&quot; );\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;-----------&quot;, \n            &quot;------------------&quot; );\n\n        // Construct decimal objects from integer arrays.\n        CreateDecimal( new int[ ] { 0, 0, 0, 0 } );\n        CreateDecimal( new int[ ] { 0, 0, 0 } );\n        CreateDecimal( new int[ ] { 0, 0, 0, 0, 0 } );\n        CreateDecimal( new int[ ] { 1000000000, 0, 0, 0 } );\n        CreateDecimal( new int[ ] { 0, 1000000000, 0, 0 } );\n        CreateDecimal( new int[ ] { 0, 0, 1000000000, 0 } );\n        CreateDecimal( new int[ ] { 0, 0, 0, 1000000000 } );\n        CreateDecimal( new int[ ] { -1, -1, -1, 0 } );\n        CreateDecimal( new int[ ] \n            { -1, -1, -1, unchecked( (int)0x80000000 ) } );\n        CreateDecimal( new int[ ] { -1, 0, 0, 0x100000 } );\n        CreateDecimal( new int[ ] { -1, 0, 0, 0x1C0000 } );\n        CreateDecimal( new int[ ] { -1, 0, 0, 0x1D0000 } );\n        CreateDecimal( new int[ ] { -1, 0, 0, 0x1C0001 } );\n        CreateDecimal( new int[ ] \n            { 0xF0000, 0xF0000, 0xF0000, 0xF0000 } );\n    }\n}\n\n/*\nThis example of the decimal( int[ ] ) constructor\ngenerates the following output.\n\nConstructor                                               Value or Exception\n-----------                                               ------------------\ndecimal( { 0x0, 0x0, 0x0, 0x0 } )                                          0\ndecimal( { 0x0, 0x0, 0x0 } )                               ArgumentException\ndecimal( { 0x0, 0x0, 0x0, 0x0, 0x0 } )                     ArgumentException\ndecimal( { 0x3B9ACA00, 0x0, 0x0, 0x0 } )                          1000000000\ndecimal( { 0x0, 0x3B9ACA00, 0x0, 0x0 } )                 4294967296000000000\ndecimal( { 0x0, 0x0, 0x3B9ACA00, 0x0 } )       18446744073709551616000000000\ndecimal( { 0x0, 0x0, 0x0, 0x3B9ACA00 } )                   ArgumentException\ndecimal( { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0 } )\n                                               79228162514264337593543950335\ndecimal( { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000 } )\n                                              -79228162514264337593543950335\ndecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x100000 } )             0.0000004294967295\ndecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x1C0000 } ) 0.0000000000000000004294967295\ndecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x1D0000 } )              ArgumentException\ndecimal( { 0xFFFFFFFF, 0x0, 0x0, 0x1C0001 } )              ArgumentException\ndecimal( { 0xF0000, 0xF0000, 0xF0000, 0xF0000 } )\n                                                 18133887298.441562272235520\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_Int64_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with an <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Ints#3\">// Example of the Decimal( __int64 ) constructor.\nusing namespace System;\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( __int64 value, String^ valToStr )\n{\n   Decimal decimalNum = Decimal(value);\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;Decimal( {0} )&quot;, valToStr );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-35}{1,22}&quot;, ctor, decimalNum );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( __int64 ) &quot;\n   &quot;constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-35}{1,22}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-35}{1,22}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   \n   // Construct Decimal objects from __int64 values.\n   CreateDecimal( Int64::MinValue, &quot;Int64::MinValue&quot; );\n   CreateDecimal( Int64::MaxValue, &quot;Int64::MaxValue&quot; );\n   CreateDecimal( 0, &quot;0&quot; );\n   CreateDecimal( 999999999999999999, &quot;999999999999999999&quot; );\n   CreateDecimal( 0x2000000000000000, &quot;0x2000000000000000&quot; );\n   CreateDecimal( 0xE000000000000000, &quot;0xE000000000000000&quot; );\n}\n\n/*\nThis example of the Decimal( __int64 ) constructor\ngenerates the following output.\n\nConstructor                                         Value\n-----------                                         -----\nDecimal( Int64::MinValue )           -9223372036854775808\nDecimal( Int64::MaxValue )            9223372036854775807\nDecimal( 0 )                                            0\nDecimal( 999999999999999999 )          999999999999999999\nDecimal( 0x2000000000000000 )         2305843009213693952\nDecimal( 0xE000000000000000 )        -2305843009213693952\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Ints#3\">// Example of the decimal( long ) constructor.\nusing System;\n\nclass DecimalCtorLDemo\n{\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( long value, string valToStr )\n    {\n        decimal decimalNum = new decimal( value );\n\n        // Format the constructor for display.\n        string ctor = String.Format( &quot;decimal( {0} )&quot;, valToStr );\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-35}{1,22}&quot;, ctor, decimalNum );\n    }\n    \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the decimal( long ) &quot; +\n            &quot;constructor <br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-35}{1,22}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-35}{1,22}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        // Construct decimal objects from long values.\n        CreateDecimal( long.MinValue, &quot;long.MinValue&quot; );\n        CreateDecimal( long.MaxValue, &quot;long.MaxValue&quot; );\n        CreateDecimal( 0L, &quot;0L&quot; );\n        CreateDecimal( 999999999999999999, &quot;999999999999999999&quot; );\n        CreateDecimal( 0x2000000000000000, &quot;0x2000000000000000&quot; );\n        CreateDecimal( unchecked( (long)0xE000000000000000 ), \n            &quot;(long)0xE000000000000000&quot; );\n    }\n}\n\n/*\nThis example of the decimal( long ) constructor\ngenerates the following output.\n\nConstructor                                         Value\n-----------                                         -----\ndecimal( long.MinValue )             -9223372036854775808\ndecimal( long.MaxValue )              9223372036854775807\ndecimal( 0 )                                            0\ndecimal( 999999999999999999 )          999999999999999999\ndecimal( 0x2000000000000000 )         2305843009213693952\ndecimal( (long)0xE000000000000000 )  -2305843009213693952\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Ints#3\">&#39; Example of the Decimal( Long ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorLDemo\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( value As Long, valToStr As String )\n\n        Dim decimalNum As New Decimal( value )\n\n        &#39; Format the constructor for display.\n        Dim ctor As String = _\n            String.Format( &quot;Decimal( {0} )&quot;, valToStr )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-30}{1,22}&quot;, ctor, decimalNum )\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( Long ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-30}{1,22}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-30}{1,22}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        &#39; Construct Decimal objects from Long values.\n        CreateDecimal( Long.MinValue, &quot;Long.MinValue&quot; )                \n        CreateDecimal( Long.MaxValue, &quot;Long.MaxValue&quot; )                \n        CreateDecimal( 0L, &quot;0&quot; )                \n        CreateDecimal( 999999999999999999, &quot;999999999999999999&quot; )                \n        CreateDecimal( &amp;H2000000000000000, &quot;&amp;H2000000000000000&quot; )                \n        CreateDecimal( &amp;HE000000000000000, &quot;&amp;HE000000000000000&quot; )                \n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( Long ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                    Value\n&#39; -----------                                    -----\n&#39; Decimal( Long.MinValue )        -9223372036854775808\n&#39; Decimal( Long.MaxValue )         9223372036854775807\n&#39; Decimal( 0 )                                       0\n&#39; Decimal( 999999999999999999 )     999999999999999999\n&#39; Decimal( &amp;H2000000000000000 )    2305843009213693952\n&#39; Decimal( &amp;HE000000000000000 )   -2305843009213693952\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_Single_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(Single)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> or less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>.  </p>\n<p> -or-  </p>\n<p> <code>value</code> is <a class=\"xref\" href=\"system.single#System_Single_NaN\" data-linktype=\"relative-path\">NaN</a>, <a class=\"xref\" href=\"system.single#System_Single_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>, or <a class=\"xref\" href=\"system.single#System_Single_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor rounds <code>value</code> to 7 significant digits using rounding to nearest. This is done even if the number has more than 7 digits and the less significant digits are zero.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Reals#1\">// Example of the Decimal( float ) constructor.\nusing namespace System;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( float value, String^ valToStr )\n{\n   \n   // Format and display the constructor.\n   Console::Write( &quot;{0,-27}&quot;, String::Format( &quot;Decimal( {0} )&quot;, valToStr ) );\n   try\n   {\n      \n      // Construct the Decimal value.\n      Decimal decimalNum = Decimal(value);\n      \n      // Display the value if it was created successfully.\n      Console::WriteLine( &quot;{0,31}&quot;, decimalNum );\n   }\n   catch ( Exception^ ex ) \n   {\n      \n      // Display the exception type if an exception was thrown.\n      Console::WriteLine( &quot;{0,31}&quot;, GetExceptionType( ex ) );\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( float ) &quot;\n   &quot;constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-27}{1,31}&quot;, &quot;Constructor&quot;, &quot;Value or Exception&quot; );\n   Console::WriteLine( &quot;{0,-27}{1,31}&quot;, &quot;-----------&quot;, &quot;------------------&quot; );\n   \n   // Construct Decimal objects from float values.\n   CreateDecimal( 1.2345E+5, &quot;1.2345E+5&quot; );\n   CreateDecimal( 1.234567E+15, &quot;1.234567E+15&quot; );\n   CreateDecimal( 1.23456789E+25, &quot;1.23456789E+25&quot; );\n   CreateDecimal( 1.23456789E+35, &quot;1.23456789E+35&quot; );\n   CreateDecimal( 1.2345E-5, &quot;1.2345E-5&quot; );\n   CreateDecimal( 1.234567E-15, &quot;1.234567E-15&quot; );\n   CreateDecimal( 1.23456789E-25, &quot;1.23456789E-25&quot; );\n   CreateDecimal( 1.23456789E-35, &quot;1.23456789E-35&quot; );\n   CreateDecimal( 1.0 / 7.0, &quot;1.0 / 7.0&quot; );\n}\n\n/*\nThis example of the Decimal( float ) constructor\ngenerates the following output.\n\nConstructor                             Value or Exception\n-----------                             ------------------\nDecimal( 1.2345E+5 )                                123450\nDecimal( 1.234567E+15 )                   1234567000000000\nDecimal( 1.23456789E+25 )       12345680000000000000000000\nDecimal( 1.23456789E+35 )                OverflowException\nDecimal( 1.2345E-5 )                           0.000012345\nDecimal( 1.234567E-15 )            0.000000000000001234567\nDecimal( 1.23456789E-25 )   0.0000000000000000000000001235\nDecimal( 1.23456789E-35 )                                0\nDecimal( 1.0 / 7.0 )                             0.1428571\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Reals#1\">// Example of the decimal( float ) constructor.\nusing System;\n\nclass DecimalCtorSDemo\n{\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( float value, string valToStr )\n    {\n        // Format and display the constructor.\n        Console.Write( &quot;{0,-27}&quot;, \n            String.Format( &quot;decimal( {0} )&quot;, valToStr ) );\n\n        try\n        {\n            // Construct the decimal value.\n            decimal decimalNum = new decimal( value );\n\n            // Display the value if it was created successfully.\n            Console.WriteLine( &quot;{0,31}&quot;, decimalNum );\n        }\n        catch( Exception ex )\n        {\n            // Display the exception type if an exception was thrown.\n            Console.WriteLine( &quot;{0,31}&quot;, GetExceptionType( ex ) );\n        }\n    }\n    \n    public static void Main( )\n    {\n\n        Console.WriteLine( &quot;This example of the decimal( float ) &quot; +\n            &quot;constructor <br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-27}{1,31}&quot;, &quot;Constructor&quot;, \n            &quot;Value or Exception&quot; );\n        Console.WriteLine( &quot;{0,-27}{1,31}&quot;, &quot;-----------&quot;, \n            &quot;------------------&quot; );\n\n        // Construct decimal objects from float values.\n        CreateDecimal( 1.2345E+5F, &quot;1.2345E+5F&quot; );\n        CreateDecimal( 1.234567E+15F, &quot;1.234567E+15F&quot; );\n        CreateDecimal( 1.23456789E+25F, &quot;1.23456789E+25F&quot; );\n        CreateDecimal( 1.23456789E+35F, &quot;1.23456789E+35F&quot; );\n        CreateDecimal( 1.2345E-5F, &quot;1.2345E-5F&quot; );\n        CreateDecimal( 1.234567E-15F, &quot;1.234567E-15F&quot; );\n        CreateDecimal( 1.23456789E-25F, &quot;1.23456789E-25F&quot; );\n        CreateDecimal( 1.23456789E-35F, &quot;1.23456789E-35F&quot; );\n        CreateDecimal( 1.0F / 7.0F, &quot;1.0F / 7.0F&quot; );\n    }\n}\n\n/*\nThis example of the decimal( float ) constructor\ngenerates the following output.\n\nConstructor                             Value or Exception\n-----------                             ------------------\ndecimal( 1.2345E+5F )                               123450\ndecimal( 1.234567E+15F )                  1234567000000000\ndecimal( 1.23456789E+25F )      12345680000000000000000000\ndecimal( 1.23456789E+35F )               OverflowException\ndecimal( 1.2345E-5F )                          0.000012345\ndecimal( 1.234567E-15F )           0.000000000000001234567\ndecimal( 1.23456789E-25F )  0.0000000000000000000000001235\ndecimal( 1.23456789E-35F )                               0\ndecimal( 1.0F / 7.0F )                           0.1428571\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Reals#1\">&#39; Example of the Decimal( Single ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorSDemo\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( value As Single, valToStr As String )\n\n        &#39; Format and display the constructor.\n        Console.Write( &quot;{0,-27}&quot;, _\n            String.Format( &quot;Decimal( {0} )&quot;, valToStr ) )\n\n        &#39; Construct the Decimal value.\n        Try\n            Dim decimalNum As New Decimal( value )\n\n            &#39; Display the value if it was created successfully.\n            Console.WriteLine( &quot;{0,31}&quot;, decimalNum )\n\n        &#39; Display the exception type if an exception was thrown.\n        Catch ex As Exception\n            Console.WriteLine( &quot;{0,31}&quot;, GetExceptionType( ex ) )\n        End Try\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( Single ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-27}{1,31}&quot;, &quot;Constructor&quot;, &quot;Value or Exception&quot; )\n        Console.WriteLine( &quot;{0,-27}{1,31}&quot;, &quot;-----------&quot;, &quot;------------------&quot; )\n\n        &#39; Construct Decimal objects from Single values.\n        CreateDecimal( 1.2345E+5, &quot;1.2345E+5&quot; )                \n        CreateDecimal( 1.234567E+15, &quot;1.234567E+15&quot; )                \n        CreateDecimal( 1.23456789E+25, &quot;1.23456789E+25&quot; )                \n        CreateDecimal( 1.23456789E+35, &quot;1.23456789E+35&quot; )                \n        CreateDecimal( 1.2345E-5, &quot;1.2345E-5&quot; )                \n        CreateDecimal( 1.234567E-15, &quot;1.234567E-15&quot; )                \n        CreateDecimal( 1.23456789E-25, &quot;1.23456789E-25&quot; )                \n        CreateDecimal( 1.23456789E-35, &quot;1.23456789E-35&quot; )                \n        CreateDecimal( 1.0 / 7.0, &quot;1.0 / 7.0&quot; )                \n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( Single ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                             Value or Exception\n&#39; -----------                             ------------------\n&#39; Decimal( 1.2345E+5 )                                123450\n&#39; Decimal( 1.234567E+15 )                   1234567000000000\n&#39; Decimal( 1.23456789E+25 )       12345680000000000000000000\n&#39; Decimal( 1.23456789E+35 )                OverflowException\n&#39; Decimal( 1.2345E-5 )                           0.000012345\n&#39; Decimal( 1.234567E-15 )            0.000000000000001234567\n&#39; Decimal( 1.23456789E-25 )   0.0000000000000000000000001235\n&#39; Decimal( 1.23456789E-35 )                                0\n&#39; Decimal( 1.0 / 7.0 )                             0.1428571\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_UInt32_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Ints#2\">// Example of the Decimal( unsigned int ) constructor.\nusing namespace System;\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( unsigned int value, String^ valToStr )\n{\n   Decimal decimalNum = Decimal(value);\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;Decimal( {0} )&quot;, valToStr );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-30}{1,16}&quot;, ctor, decimalNum );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( unsigned &quot;\n   &quot;int ) constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-30}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-30}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   \n   // Construct Decimal objects from unsigned int values.\n   CreateDecimal( UInt32::MinValue, &quot;UInt32::MinValue&quot; );\n   CreateDecimal( UInt32::MaxValue, &quot;UInt32::MaxValue&quot; );\n   CreateDecimal( Int32::MaxValue, &quot;Int32::MaxValue&quot; );\n   CreateDecimal( 999999999, &quot;999999999&quot; );\n   CreateDecimal( 0x40000000, &quot;0x40000000&quot; );\n   CreateDecimal( 0xC0000000, &quot;0xC0000000&quot; );\n}\n\n/*\nThis example of the Decimal( unsigned int ) constructor\ngenerates the following output.\n\nConstructor                              Value\n-----------                              -----\nDecimal( UInt32::MinValue )                  0\nDecimal( UInt32::MaxValue )         4294967295\nDecimal( Int32::MaxValue )          2147483647\nDecimal( 999999999 )                 999999999\nDecimal( 0x40000000 )               1073741824\nDecimal( 0xC0000000 )               3221225472\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Ints#2\">// Example of the decimal( uint ) constructor.\nusing System;\n\nclass DecimalCtorUIDemo\n{\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( uint value, string valToStr )\n    {\n        decimal decimalNum = new decimal( value );\n\n        // Format the constructor for display.\n        string ctor = String.Format( &quot;decimal( {0} )&quot;, valToStr );\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, ctor, decimalNum );\n    }\n    \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the decimal( uint ) &quot; +\n            &quot;constructor <br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        // Construct decimal objects from uint values.\n        CreateDecimal( uint.MinValue, &quot;uint.MinValue&quot; );\n        CreateDecimal( uint.MaxValue, &quot;uint.MaxValue&quot; );\n        CreateDecimal( (uint)int.MaxValue, &quot;(uint)int.MaxValue&quot; );\n        CreateDecimal( 999999999U, &quot;999999999U&quot; );\n        CreateDecimal( 0x40000000U, &quot;0x40000000U&quot; );\n        CreateDecimal( 0xC0000000, &quot;0xC0000000&quot; );\n    }\n}\n\n/*\nThis example of the decimal( uint ) constructor\ngenerates the following output.\n\nConstructor                                 Value\n-----------                                 -----\ndecimal( uint.MinValue )                        0\ndecimal( uint.MaxValue )               4294967295\ndecimal( (uint)int.MaxValue )          2147483647\ndecimal( 999999999U )                   999999999\ndecimal( 0x40000000U )                 1073741824\ndecimal( 0xC0000000 )                  3221225472\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Ints#2\">&#39; Example of the Decimal( UInt32 ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorUIDemo\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( value As UInt32, valToStr As String )\n\n        Dim decimalNum As New Decimal( value )\n\n        &#39; Format the constructor for display.\n        Dim ctor As String = _\n            String.Format( &quot;Decimal( {0} )&quot;, valToStr )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, ctor, decimalNum )\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( UInt32 ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-33}{1,16}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        &#39; Construct Decimal objects from UInt32 values.\n        &#39; UInt32.MinValue and UInt32.MaxValue are not defined in VB.\n        CreateDecimal( Convert.ToUInt32( 0 ), &quot;&quot;&quot;UInt32.MinValue&quot;&quot;&quot; )\n        CreateDecimal( Convert.ToUInt32( 4294967295 ), _\n            &quot;&quot;&quot;UInt32.MaxValue&quot;&quot;&quot; )\n        CreateDecimal( Convert.ToUInt32( Integer.MaxValue ), _\n            &quot;Integer.MaxValue&quot; )              \n        CreateDecimal( Convert.ToUInt32( 999999999 ), &quot;999999999&quot; ) \n        CreateDecimal( Convert.ToUInt32( &amp;H40000000 ), &quot;&amp;H40000000&quot; ) \n        CreateDecimal( Convert.ToUInt32( &amp;HC0000000L ), &quot;&amp;HC0000000&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( UInt32 ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                 Value\n&#39; -----------                                 -----\n&#39; Decimal( &quot;UInt32.MinValue&quot; )                    0\n&#39; Decimal( &quot;UInt32.MaxValue&quot; )           4294967295\n&#39; Decimal( Integer.MaxValue )            2147483647\n&#39; Decimal( 999999999 )                    999999999\n&#39; Decimal( &amp;H40000000 )                  1073741824\n&#39; Decimal( &amp;HC0000000 )                  3221225472\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_UInt64_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(UInt64)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the value of the specified 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to represent as a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> value.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Ints#4\">// Example of the Decimal( unsigned __int64 ) constructor.\nusing namespace System;\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( unsigned __int64 value, String^ valToStr )\n{\n   Decimal decimalNum = Decimal(value);\n   \n   // Format the constructor for display.\n   String^ ctor = String::Format( &quot;Decimal( {0} )&quot;, valToStr );\n   \n   // Display the constructor and its value.\n   Console::WriteLine( &quot;{0,-33}{1,22}&quot;, ctor, decimalNum );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( unsigned &quot;\n   &quot;__int64 ) constructor <br>generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-33}{1,22}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n   Console::WriteLine( &quot;{0,-33}{1,22}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n   \n   // Construct Decimal objects from unsigned __int64 values.\n   CreateDecimal( UInt64::MinValue, &quot;UInt64::MinValue&quot; );\n   CreateDecimal( UInt64::MaxValue, &quot;UInt64::MaxValue&quot; );\n   CreateDecimal( Int64::MaxValue, &quot;Int64::MaxValue&quot; );\n   CreateDecimal( 999999999999999999, &quot;999999999999999999&quot; );\n   CreateDecimal( 0x2000000000000000, &quot;0x2000000000000000&quot; );\n   CreateDecimal( 0xE000000000000000, &quot;0xE000000000000000&quot; );\n}\n\n/*\nThis example of the Decimal( unsigned __int64 ) constructor\ngenerates the following output.\n\nConstructor                                       Value\n-----------                                       -----\nDecimal( UInt64::MinValue )                           0\nDecimal( UInt64::MaxValue )        18446744073709551615\nDecimal( Int64::MaxValue )          9223372036854775807\nDecimal( 999999999999999999 )        999999999999999999\nDecimal( 0x2000000000000000 )       2305843009213693952\nDecimal( 0xE000000000000000 )      16140901064495857664\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Ints#4\">// Example of the decimal( ulong ) constructor.\nusing System;\n\nclass DecimalCtorLDemo\n{\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( ulong value, string valToStr )\n    {\n        decimal decimalNum = new decimal( value );\n\n        // Format the constructor for display.\n        string ctor = String.Format( &quot;decimal( {0} )&quot;, valToStr );\n\n        // Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-35}{1,22}&quot;, ctor, decimalNum );\n    }\n    \n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the decimal( ulong ) &quot; +\n            &quot;constructor <br>generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-35}{1,22}&quot;, &quot;Constructor&quot;, &quot;Value&quot; );\n        Console.WriteLine( &quot;{0,-35}{1,22}&quot;, &quot;-----------&quot;, &quot;-----&quot; );\n\n        // Construct decimal objects from ulong values.\n        CreateDecimal( ulong.MinValue, &quot;ulong.MinValue&quot; );\n        CreateDecimal( ulong.MaxValue, &quot;ulong.MaxValue&quot; );\n        CreateDecimal( long.MaxValue, &quot;long.MaxValue&quot; );\n        CreateDecimal( 999999999999999999, &quot;999999999999999999&quot; );\n        CreateDecimal( 0x2000000000000000, &quot;0x2000000000000000&quot; );\n        CreateDecimal( 0xE000000000000000, &quot;0xE000000000000000&quot; );\n    }\n}\n\n/*\nThis example of the decimal( ulong ) constructor\ngenerates the following output.\n\nConstructor                                         Value\n-----------                                         -----\ndecimal( ulong.MinValue )                               0\ndecimal( ulong.MaxValue )            18446744073709551615\ndecimal( long.MaxValue )              9223372036854775807\ndecimal( 999999999999999999 )          999999999999999999\ndecimal( 0x2000000000000000 )         2305843009213693952\ndecimal( 0xE000000000000000 )        16140901064495857664\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Ints#4\">&#39; Example of the Decimal( UInt64 ) constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorULDemo\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( value As UInt64, valToStr As String )\n\n        Dim decimalNum As New Decimal( value )\n\n        &#39; Format the constructor for display.\n        Dim ctor As String = _\n            String.Format( &quot;Decimal( {0} )&quot;, valToStr )\n\n        &#39; Display the constructor and its value.\n        Console.WriteLine( &quot;{0,-33}{1,22}&quot;, ctor, decimalNum )\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( UInt64 ) constructor &quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-33}{1,22}&quot;, &quot;Constructor&quot;, &quot;Value&quot; )\n        Console.WriteLine( &quot;{0,-33}{1,22}&quot;, &quot;-----------&quot;, &quot;-----&quot; )\n\n        &#39; Construct Decimal objects from UInt64 values.\n        &#39; UInt64.MinValue and UInt64.MaxValue are not defined in VB.\n        CreateDecimal( Convert.ToUInt64( 0 ), &quot;&quot;&quot;UInt64.MinValue&quot;&quot;&quot; )\n        CreateDecimal( Convert.ToUInt64( 18446744073709551615D ), _\n            &quot;&quot;&quot;UInt64.MaxValue&quot;&quot;&quot; )\n        CreateDecimal( Convert.ToUInt64( Long.MaxValue ), _\n            &quot;Long.MaxValue&quot; )              \n        CreateDecimal( Convert.ToUInt64( 999999999999999999 ), _\n            &quot;999999999999999999&quot; )                \n        CreateDecimal( Convert.ToUInt64( &amp;H2000000000000000 ), _\n            &quot;&amp;H2000000000000000&quot; )                \n        CreateDecimal( Convert.ToUInt64( 16140901064495857664.0 ), _\n            &quot;16140901064495857664.0&quot; )                \n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( UInt64 ) constructor\n&#39; generates the following output.\n&#39; \n&#39; Constructor                                       Value\n&#39; -----------                                       -----\n&#39; Decimal( &quot;UInt64.MinValue&quot; )                          0\n&#39; Decimal( &quot;UInt64.MaxValue&quot; )       18446744073709551615\n&#39; Decimal( Long.MaxValue )            9223372036854775807\n&#39; Decimal( 999999999999999999 )        999999999999999999\n&#39; Decimal( &amp;H2000000000000000 )       2305843009213693952\n&#39; Decimal( 16140901064495857664.0 )  16140901064495857664\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal__ctor_System_Int32_System_Int32_System_Int32_System_Boolean_System_Byte_\">\r\n    \r\n            <a id=\"System_Decimal__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Decimal(Int32,Int32,Int32,Boolean,Byte)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> from parameters specifying the instance&#39;s constituent parts.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Decimal (int lo, int mid, int hi, bool isNegative, byte scale);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>lo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The low 32 bits of a 96-bit integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The middle 32 bits of a 96-bit integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hi</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The high 32 bits of a 96-bit integer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>isNegative</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate a negative number; <code>false</code> to indicate a positive number.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scale</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A power of 10 ranging from 0 to 28.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>scale</code> is greater than 28.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The binary representation of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10 raised to an exponent ranging from 0 to 28.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several <code>Decimal</code> numbers using the constructor overload that initializes a <code>Decimal</code> structure with three <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value words, a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> sign, and a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> scale factor.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Ctor.Arrays#2\">// Example of the Decimal( int, int, int, bool, unsigned char ) \n// constructor.\nusing namespace System;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Create a Decimal object and display its value.\nvoid CreateDecimal( int low, int mid, int high, bool isNeg, unsigned char scale )\n{\n   \n   // Format the constructor for display.\n   array&lt;Object^&gt;^boxedParams = gcnew array&lt;Object^&gt;(5);\n   boxedParams[ 0 ] = low;\n   boxedParams[ 1 ] = mid;\n   boxedParams[ 2 ] = high;\n   boxedParams[ 3 ] = isNeg;\n   boxedParams[ 4 ] = scale;\n   String^ ctor = String::Format( &quot;Decimal( {0}, {1}, {2}, {3}, {4} )&quot;, boxedParams );\n   String^ valOrExc;\n   try\n   {\n      \n      // Construct the Decimal value.\n      Decimal decimalNum = Decimal(low,mid,high,isNeg,scale);\n      \n      // Format and save the Decimal value.\n      valOrExc = decimalNum.ToString();\n   }\n   catch ( Exception^ ex ) \n   {\n      \n      // Save the exception type if an exception was thrown.\n      valOrExc = GetExceptionType( ex );\n   }\n\n   \n   // Display the constructor and Decimal value or exception.\n   int ctorLen = 76 - valOrExc-&gt;Length;\n   \n   // Display the data on one line if it will fit.\n   if ( ctorLen &gt; ctor-&gt;Length )\n      Console::WriteLine( &quot;{0}{1}&quot;, ctor-&gt;PadRight( ctorLen ), valOrExc );\n   // Otherwise, display the data on two lines.\n   else\n   {\n      Console::WriteLine( &quot;{0}&quot;, ctor );\n      Console::WriteLine( &quot;{0,76}&quot;, valOrExc );\n   }\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal( int, int, &quot;\n   &quot;int, bool, unsigned char ) <br>constructor &quot;\n   &quot;generates the following output.<br>&quot; );\n   Console::WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;Constructor&quot;, &quot;Value or Exception&quot; );\n   Console::WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;-----------&quot;, &quot;------------------&quot; );\n   \n   // Construct Decimal objects from double values.\n   CreateDecimal( 0, 0, 0, false, 0 );\n   CreateDecimal( 0, 0, 0, false, 27 );\n   CreateDecimal( 0, 0, 0, true, 0 );\n   CreateDecimal( 1000000000, 0, 0, false, 0 );\n   CreateDecimal( 0, 1000000000, 0, false, 0 );\n   CreateDecimal( 0, 0, 1000000000, false, 0 );\n   CreateDecimal( 1000000000, 1000000000, 1000000000, false, 0 );\n   CreateDecimal(  -1, -1, -1, false, 0 );\n   CreateDecimal(  -1, -1, -1, true, 0 );\n   CreateDecimal(  -1, -1, -1, false, 15 );\n   CreateDecimal(  -1, -1, -1, false, 28 );\n   CreateDecimal(  -1, -1, -1, false, 29 );\n   CreateDecimal( Int32::MaxValue, 0, 0, false, 18 );\n   CreateDecimal( Int32::MaxValue, 0, 0, false, 28 );\n   CreateDecimal( Int32::MaxValue, 0, 0, true, 28 );\n}\n\n/*\nThis example of the Decimal( int, int, int, bool, unsigned char )\nconstructor generates the following output.\n\nConstructor                                               Value or Exception\n-----------                                               ------------------\nDecimal( 0, 0, 0, False, 0 )                                               0\nDecimal( 0, 0, 0, False, 27 )                                              0\nDecimal( 0, 0, 0, True, 0 )                                                0\nDecimal( 1000000000, 0, 0, False, 0 )                             1000000000\nDecimal( 0, 1000000000, 0, False, 0 )                    4294967296000000000\nDecimal( 0, 0, 1000000000, False, 0 )          18446744073709551616000000000\nDecimal( 1000000000, 1000000000, 1000000000, False, 0 )\n                                               18446744078004518913000000000\nDecimal( -1, -1, -1, False, 0 )                79228162514264337593543950335\nDecimal( -1, -1, -1, True, 0 )                -79228162514264337593543950335\nDecimal( -1, -1, -1, False, 15 )              79228162514264.337593543950335\nDecimal( -1, -1, -1, False, 28 )              7.9228162514264337593543950335\nDecimal( -1, -1, -1, False, 29 )                 ArgumentOutOfRangeException\nDecimal( 2147483647, 0, 0, False, 18 )                  0.000000002147483647\nDecimal( 2147483647, 0, 0, False, 28 )        0.0000000000000000002147483647\nDecimal( 2147483647, 0, 0, True, 28 )        -0.0000000000000000002147483647\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor.Arrays#2\">// Example of the decimal( int, int, int, bool, byte ) constructor.\nusing System;\n\nclass DecimalCtorIIIBByDemo\n{\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    // Create a decimal object and display its value.\n    public static void CreateDecimal( int low, int mid, int high, \n        bool isNeg, byte scale )\n    {\n        // Format the constructor for display.\n        string ctor = String.Format( \n            &quot;decimal( {0}, {1}, {2}, {3}, {4} )&quot;, \n            low, mid, high, isNeg, scale );\n        string valOrExc;\n\n        try\n        {\n            // Construct the decimal value.\n            decimal decimalNum = new decimal( \n                low, mid, high, isNeg, scale );\n\n            // Format and save the decimal value.\n            valOrExc = decimalNum.ToString( );\n        }\n        catch( Exception ex )\n        {\n            // Save the exception type if an exception was thrown.\n            valOrExc = GetExceptionType( ex );\n        }\n\n        // Display the constructor and decimal value or exception.\n        int ctorLen = 76 - valOrExc.Length;\n\n        // Display the data on one line if it will fit.\n        if ( ctorLen &gt; ctor.Length )\n            Console.WriteLine( &quot;{0}{1}&quot;, ctor.PadRight( ctorLen ), \n                valOrExc );\n\n        // Otherwise, display the data on two lines.\n        else\n        {\n            Console.WriteLine( &quot;{0}&quot;, ctor );\n            Console.WriteLine( &quot;{0,76}&quot;, valOrExc );\n        }\n    }\n    \n    public static void Main( )\n    {\n\n        Console.WriteLine( &quot;This example of the decimal( int, int, &quot; +\n            &quot;int, bool, byte ) <br>constructor &quot; +\n            &quot;generates the following output.<br>&quot; );\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;Constructor&quot;, \n            &quot;Value or Exception&quot; );\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;-----------&quot;, \n            &quot;------------------&quot; );\n\n        // Construct decimal objects from the component fields.\n        CreateDecimal( 0, 0, 0, false, 0 );\n        CreateDecimal( 0, 0, 0, false, 27 );\n        CreateDecimal( 0, 0, 0, true, 0 );\n        CreateDecimal( 1000000000, 0, 0, false, 0 );\n        CreateDecimal( 0, 1000000000, 0, false, 0 );\n        CreateDecimal( 0, 0, 1000000000, false, 0 );\n        CreateDecimal( 1000000000, 1000000000, 1000000000, false, 0 );\n        CreateDecimal( -1, -1, -1, false, 0 );\n        CreateDecimal( -1, -1, -1, true, 0 );\n        CreateDecimal( -1, -1, -1, false, 15 );\n        CreateDecimal( -1, -1, -1, false, 28 );\n        CreateDecimal( -1, -1, -1, false, 29 );\n        CreateDecimal( int.MaxValue, 0, 0, false, 18 );\n        CreateDecimal( int.MaxValue, 0, 0, false, 28 );\n        CreateDecimal( int.MaxValue, 0, 0, true, 28 );\n    }\n}\n\n/*\nThis example of the decimal( int, int, int, bool, byte )\nconstructor generates the following output.\n\nConstructor                                               Value or Exception\n-----------                                               ------------------\ndecimal( 0, 0, 0, False, 0 )                                               0\ndecimal( 0, 0, 0, False, 27 )                                              0\ndecimal( 0, 0, 0, True, 0 )                                                0\ndecimal( 1000000000, 0, 0, False, 0 )                             1000000000\ndecimal( 0, 1000000000, 0, False, 0 )                    4294967296000000000\ndecimal( 0, 0, 1000000000, False, 0 )          18446744073709551616000000000\ndecimal( 1000000000, 1000000000, 1000000000, False, 0 )\n                                               18446744078004518913000000000\ndecimal( -1, -1, -1, False, 0 )                79228162514264337593543950335\ndecimal( -1, -1, -1, True, 0 )                -79228162514264337593543950335\ndecimal( -1, -1, -1, False, 15 )              79228162514264.337593543950335\ndecimal( -1, -1, -1, False, 28 )              7.9228162514264337593543950335\ndecimal( -1, -1, -1, False, 29 )                 ArgumentOutOfRangeException\ndecimal( 2147483647, 0, 0, False, 18 )                  0.000000002147483647\ndecimal( 2147483647, 0, 0, False, 28 )        0.0000000000000000002147483647\ndecimal( 2147483647, 0, 0, True, 28 )        -0.0000000000000000002147483647\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor.Arrays#2\">&#39; Example of the Decimal( Integer, Integer, Integer, Boolean, Byte ) \n&#39; constructor.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalCtorIIIBByDemo\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Create a Decimal object and display its value.\n    Sub CreateDecimal( low As Integer, mid As Integer, _\n        high As Integer, isNeg As Boolean, scale as Byte )\n\n        &#39; Format the constructor for display.\n        Dim ctor As String = String.Format( _\n            &quot;Decimal( {0}, {1}, {2}, {3}, {4} )&quot;, _\n            low, mid, high, isNeg, scale )\n        Dim valOrExc As String\n\n        &#39; Construct the Decimal value.\n        Try\n            Dim decimalNum As New Decimal( _\n                low, mid, high, isNeg, scale )\n\n            &#39; Format and save the Decimal value.\n            valOrExc = decimalNum.ToString( )\n\n        &#39; Save the exception type if an exception was thrown.\n        Catch ex As Exception\n            valOrExc =  GetExceptionType( ex ) \n        End Try\n\n        &#39; Display the constructor and Decimal value or exception.\n        Dim ctorLen = 76 - valOrExc.Length\n        If ctorLen &gt; ctor.Length Then\n\n            &#39; Display the data on one line if it will fit.\n            Console.WriteLine( &quot;{0}{1}&quot;, ctor.PadRight( ctorLen ), _\n                valOrExc )\n\n        &#39; Otherwise, display the data on two lines.\n        Else\n            Console.WriteLine( &quot;{0}&quot;, ctor )\n            Console.WriteLine( &quot;{0,76}&quot;, valOrExc )\n        End If\n    End Sub\n    \n    Sub Main( )\n\n        Console.WriteLine( _\n            &quot;This example of the Decimal( Integer, Integer, &quot; &amp; _\n            &quot;Integer, Boolean, Byte ) &quot; &amp; vbCrLf &amp; &quot;constructor &quot; &amp; _\n            &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;Constructor&quot;, _\n            &quot;Value or Exception&quot; )\n        Console.WriteLine( &quot;{0,-38}{1,38}&quot;, &quot;-----------&quot;, _\n            &quot;------------------&quot; )\n\n        &#39; Construct Decimal objects from the component fields.\n        CreateDecimal( 0, 0, 0, False, 0 )                \n        CreateDecimal( 0, 0, 0, False, 27 )                \n        CreateDecimal( 0, 0, 0, True, 0 )                \n        CreateDecimal( 1000000000, 0, 0, False, 0 )                \n        CreateDecimal( 0, 1000000000, 0, False, 0 )                \n        CreateDecimal( 0, 0, 1000000000, False, 0 )                \n        CreateDecimal( 1000000000, 1000000000, 1000000000, False, 0 )\n        CreateDecimal( -1, -1, -1, False, 0 )                \n        CreateDecimal( -1, -1, -1, True, 0 )                \n        CreateDecimal( -1, -1, -1, False, 15 )                \n        CreateDecimal( -1, -1, -1, False, 28 )                \n        CreateDecimal( -1, -1, -1, False, 29 )                \n        CreateDecimal( Integer.MaxValue, 0, 0, False, 18 )                \n        CreateDecimal( Integer.MaxValue, 0, 0, False, 28 )                \n        CreateDecimal( Integer.MaxValue, 0, 0, True, 28 )                \n    End Sub \nEnd Module \n\n&#39; This example of the Decimal( Integer, Integer, Integer, Boolean, Byte )\n&#39; constructor generates the following output.\n&#39; \n&#39; Constructor                                               Value or Exception\n&#39; -----------                                               ------------------\n&#39; Decimal( 0, 0, 0, False, 0 )                                               0\n&#39; Decimal( 0, 0, 0, False, 27 )                                              0\n&#39; Decimal( 0, 0, 0, True, 0 )                                                0\n&#39; Decimal( 1000000000, 0, 0, False, 0 )                             1000000000\n&#39; Decimal( 0, 1000000000, 0, False, 0 )                    4294967296000000000\n&#39; Decimal( 0, 0, 1000000000, False, 0 )          18446744073709551616000000000\n&#39; Decimal( 1000000000, 1000000000, 1000000000, False, 0 )\n&#39;                                                18446744078004518913000000000\n&#39; Decimal( -1, -1, -1, False, 0 )                79228162514264337593543950335\n&#39; Decimal( -1, -1, -1, True, 0 )                -79228162514264337593543950335\n&#39; Decimal( -1, -1, -1, False, 15 )              79228162514264.337593543950335\n&#39; Decimal( -1, -1, -1, False, 28 )              7.9228162514264337593543950335\n&#39; Decimal( -1, -1, -1, False, 29 )                 ArgumentOutOfRangeException\n&#39; Decimal( 2147483647, 0, 0, False, 18 )                  0.000000002147483647\n&#39; Decimal( 2147483647, 0, 0, False, 28 )        0.0000000000000000002147483647\n&#39; Decimal( 2147483647, 0, 0, True, 28 )        -0.0000000000000000002147483647\n</code></pre><p> The following example uses the <a class=\"xref\" href=\"system.decimal#System_Decimal_GetBits_\" data-linktype=\"relative-path\">GetBits</a> method to retrieve the component parts of an array. It then uses this array in the call to the Decimal constructor to instantiate a new <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal[] values = { 1234.96m, -1234.96m };\n      foreach (var value in values) {\n         int[] parts = Decimal.GetBits(value);\n         bool sign = (parts[3] &amp; 0x80000000) != 0;\n   \n         byte scale = (byte) ((parts[3] &gt;&gt; 16) &amp; 0x7F); \n         Decimal newValue = new Decimal(parts[0], parts[1], parts[2], sign, scale);\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, newValue);\n      }\n   }\n}\n// The example displays the following output:\n//       1234.96 --&gt; 1234.96\n//       -1234.96 --&gt; -1234.96\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 1234.96d, -1234.96d }\n      For Each value In values\n         Dim parts() = Decimal.GetBits(value)\n         Dim sign As Boolean = (parts(3) And &amp;h80000000) &lt;&gt; 0\n         Dim scale As Byte = CByte((parts(3) &gt;&gt; 16) And &amp;H7F)\n   \n         Dim newValue As New Decimal(parts(0), parts(1), parts(2), sign, scale)    \n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, newValue)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    1234.96 --&gt; 1234.96\n&#39;    -1234.96 --&gt; -1234.96\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_MaxValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MaxValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the largest possible value of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>. This field is constant and read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly decimal MaxValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is positive 79,228,162,514,264,337,593,543,950,335.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>MaxValue</code> :  </p>\n<pre><code class=\"lang-cpp\" name=\"Decimal Example#2\">   public ref class PiggyBank\n   {\n   public:\n      Decimal Capacity()\n      {\n         return MyFortune.MaxValue;\n      }\n\n      void AddPenny()\n      {\n         MyFortune = Decimal::Add(MyFortune, (Decimal).01);\n      }\n\n   protected:\n      Decimal MyFortune;\n   };\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Decimal Example#2\">    Class PiggyBank\n        Public ReadOnly Property Capacity() As Decimal\n            Get\n                Return [Decimal].MaxValue\n            End Get\n        End Property\n\n        Protected MyFortune As Decimal\n\n        Public Sub AddPenny()\n            MyFortune += 0.01D\n        End Sub\n    End Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Decimal Example#2\">\tclass PiggyBank {\n\t\tpublic decimal Capacity {\n\t\t\tget {\n\t\t\t\treturn Decimal.MaxValue;\n\t\t\t}\n\t\t}\n\n\t\tprotected decimal MyFortune;\n\n\t\tpublic void AddPenny() {\n\t\t\tMyFortune += .01m;\n\t\t}\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_MinusOne\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinusOne</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number negative one (-1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly decimal MinusOne;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <code>MinusOne</code> field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing namespace System;\nint main()\n{\n   String^ numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n   String^ exprFmt = &quot;{0,-55}{1,15}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the Decimal structure &quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n   \n   // Display the values of the Decimal fields.\n   Console::WriteLine( numberFmt, &quot;Decimal::MaxValue&quot;, Decimal::MaxValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinValue&quot;, Decimal::MinValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinusOne&quot;, Decimal::MinusOne );\n   Console::WriteLine( numberFmt, &quot;Decimal::One&quot;, Decimal::One );\n   Console::WriteLine( numberFmt, &quot;Decimal::Zero&quot;, Decimal::Zero );\n   Console::WriteLine();\n   \n   // Display the values of expressions of the Decimal fields.\n   Console::WriteLine( exprFmt, &quot;( Decimal::MinusOne + Decimal::One ) == Decimal::Zero&quot;, (Decimal::MinusOne + Decimal::One) == Decimal::Zero );\n   Console::WriteLine( exprFmt, &quot;Decimal::MaxValue + Decimal::MinValue&quot;, Decimal::MaxValue + Decimal::MinValue );\n   Console::WriteLine( exprFmt, &quot;Decimal::MinValue / Decimal::MaxValue&quot;, Decimal::MinValue / Decimal::MaxValue );\n   Console::WriteLine( &quot;{0,-40}{1,30}&quot;, &quot;100000000000000M / Decimal::MaxValue&quot;, Convert::ToDecimal( 100000000000000 ) / Decimal::MaxValue );\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal::MaxValue               79,228,162,514,264,337,593,543,950,335\nDecimal::MinValue              -79,228,162,514,264,337,593,543,950,335\nDecimal::MinusOne                                                   -1\nDecimal::One                                                         1\nDecimal::Zero                                                        0\n\n( Decimal::MinusOne + Decimal::One ) == Decimal::Zero             True\nDecimal::MaxValue + Decimal::MinValue                                0\nDecimal::MinValue / Decimal::MaxValue                               -1\n100000000000000M / Decimal::MaxValue    0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing System;\n\nclass DecimalFieldsDemo\n{\n    public static void Main( )\n    {\n        const string numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n        const string exprFmt = &quot;{0,-55}{1,15}&quot;;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the Decimal structure &quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n\n        // Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, \n            Decimal.MaxValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, \n            Decimal.MinValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, \n            Decimal.MinusOne );\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, Decimal.One );\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, Decimal.Zero );\n        Console.WriteLine( );\n\n        // Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, \n            &quot;( Decimal.MinusOne + Decimal.One ) == Decimal.Zero&quot;, \n            (Decimal.MinusOne + Decimal.One ) == Decimal.Zero );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, \n            Decimal.MaxValue + Decimal.MinValue );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, \n            Decimal.MinValue / Decimal.MaxValue );\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, \n            &quot;100000000000000M / Decimal.MaxValue&quot;, \n            100000000000000M / Decimal.MaxValue );\n    }\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal.MaxValue                79,228,162,514,264,337,593,543,950,335\nDecimal.MinValue               -79,228,162,514,264,337,593,543,950,335\nDecimal.MinusOne                                                    -1\nDecimal.One                                                          1\nDecimal.Zero                                                         0\n\n( Decimal.MinusOne + Decimal.One ) == Decimal.Zero                True\nDecimal.MaxValue + Decimal.MinValue                                  0\nDecimal.MinValue / Decimal.MaxValue                                 -1\n100000000000000M / Decimal.MaxValue     0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Fields#1\">&#39; Example of the Decimal fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFieldsDemo\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-25}{1,45:N0}&quot;\n        Const exprFmt As String = &quot;{0,-55}{1,15}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the Decimal structure&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; )\n\n        &#39; Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, _\n            Decimal.MaxValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, _\n            Decimal.MinValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, _\n            Decimal.MinusOne )\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, _\n            Decimal.One )\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, _\n            Decimal.Zero )\n        Console.WriteLine( )\n\n        &#39; Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, _\n            &quot;( Decimal.MinusOne + Decimal.One ) = Decimal.Zero&quot;, _\n            ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, _\n            Decimal.MaxValue + Decimal.MinValue )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, _\n            Decimal.MinValue/Decimal.MaxValue )\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, _\n            &quot;100000000000000D / Decimal.MaxValue&quot;, _\n            100000000000000D / Decimal.MaxValue )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the Decimal structure\n&#39; generates the following output.\n&#39; \n&#39; Field or Expression                                              Value\n&#39; -------------------                                              -----\n&#39; Decimal.MaxValue                79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinValue               -79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinusOne                                                    -1\n&#39; Decimal.One                                                          1\n&#39; Decimal.Zero                                                         0\n&#39; \n&#39; ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero                 True\n&#39; Decimal.MaxValue + Decimal.MinValue                                  0\n&#39; Decimal.MinValue / Decimal.MaxValue                                 -1\n&#39; 100000000000000D / Decimal.MaxValue     0.0000000000000012621774483536\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_MinValue\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinValue</div>        \r\n          </div>\r\n    \r\n            <p>Represents the smallest possible value of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>. This field is constant and read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly decimal MinValue;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of this constant is negative 79,228,162,514,264,337,593,543,950,335.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <code>MinValue</code> field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing namespace System;\nint main()\n{\n   String^ numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n   String^ exprFmt = &quot;{0,-55}{1,15}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the Decimal structure &quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n   \n   // Display the values of the Decimal fields.\n   Console::WriteLine( numberFmt, &quot;Decimal::MaxValue&quot;, Decimal::MaxValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinValue&quot;, Decimal::MinValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinusOne&quot;, Decimal::MinusOne );\n   Console::WriteLine( numberFmt, &quot;Decimal::One&quot;, Decimal::One );\n   Console::WriteLine( numberFmt, &quot;Decimal::Zero&quot;, Decimal::Zero );\n   Console::WriteLine();\n   \n   // Display the values of expressions of the Decimal fields.\n   Console::WriteLine( exprFmt, &quot;( Decimal::MinusOne + Decimal::One ) == Decimal::Zero&quot;, (Decimal::MinusOne + Decimal::One) == Decimal::Zero );\n   Console::WriteLine( exprFmt, &quot;Decimal::MaxValue + Decimal::MinValue&quot;, Decimal::MaxValue + Decimal::MinValue );\n   Console::WriteLine( exprFmt, &quot;Decimal::MinValue / Decimal::MaxValue&quot;, Decimal::MinValue / Decimal::MaxValue );\n   Console::WriteLine( &quot;{0,-40}{1,30}&quot;, &quot;100000000000000M / Decimal::MaxValue&quot;, Convert::ToDecimal( 100000000000000 ) / Decimal::MaxValue );\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal::MaxValue               79,228,162,514,264,337,593,543,950,335\nDecimal::MinValue              -79,228,162,514,264,337,593,543,950,335\nDecimal::MinusOne                                                   -1\nDecimal::One                                                         1\nDecimal::Zero                                                        0\n\n( Decimal::MinusOne + Decimal::One ) == Decimal::Zero             True\nDecimal::MaxValue + Decimal::MinValue                                0\nDecimal::MinValue / Decimal::MaxValue                               -1\n100000000000000M / Decimal::MaxValue    0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing System;\n\nclass DecimalFieldsDemo\n{\n    public static void Main( )\n    {\n        const string numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n        const string exprFmt = &quot;{0,-55}{1,15}&quot;;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the Decimal structure &quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n\n        // Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, \n            Decimal.MaxValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, \n            Decimal.MinValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, \n            Decimal.MinusOne );\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, Decimal.One );\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, Decimal.Zero );\n        Console.WriteLine( );\n\n        // Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, \n            &quot;( Decimal.MinusOne + Decimal.One ) == Decimal.Zero&quot;, \n            (Decimal.MinusOne + Decimal.One ) == Decimal.Zero );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, \n            Decimal.MaxValue + Decimal.MinValue );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, \n            Decimal.MinValue / Decimal.MaxValue );\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, \n            &quot;100000000000000M / Decimal.MaxValue&quot;, \n            100000000000000M / Decimal.MaxValue );\n    }\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal.MaxValue                79,228,162,514,264,337,593,543,950,335\nDecimal.MinValue               -79,228,162,514,264,337,593,543,950,335\nDecimal.MinusOne                                                    -1\nDecimal.One                                                          1\nDecimal.Zero                                                         0\n\n( Decimal.MinusOne + Decimal.One ) == Decimal.Zero                True\nDecimal.MaxValue + Decimal.MinValue                                  0\nDecimal.MinValue / Decimal.MaxValue                                 -1\n100000000000000M / Decimal.MaxValue     0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Fields#1\">&#39; Example of the Decimal fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFieldsDemo\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-25}{1,45:N0}&quot;\n        Const exprFmt As String = &quot;{0,-55}{1,15}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the Decimal structure&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; )\n\n        &#39; Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, _\n            Decimal.MaxValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, _\n            Decimal.MinValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, _\n            Decimal.MinusOne )\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, _\n            Decimal.One )\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, _\n            Decimal.Zero )\n        Console.WriteLine( )\n\n        &#39; Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, _\n            &quot;( Decimal.MinusOne + Decimal.One ) = Decimal.Zero&quot;, _\n            ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, _\n            Decimal.MaxValue + Decimal.MinValue )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, _\n            Decimal.MinValue/Decimal.MaxValue )\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, _\n            &quot;100000000000000D / Decimal.MaxValue&quot;, _\n            100000000000000D / Decimal.MaxValue )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the Decimal structure\n&#39; generates the following output.\n&#39; \n&#39; Field or Expression                                              Value\n&#39; -------------------                                              -----\n&#39; Decimal.MaxValue                79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinValue               -79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinusOne                                                    -1\n&#39; Decimal.One                                                          1\n&#39; Decimal.Zero                                                         0\n&#39; \n&#39; ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero                 True\n&#39; Decimal.MaxValue + Decimal.MinValue                                  0\n&#39; Decimal.MinValue / Decimal.MaxValue                                 -1\n&#39; 100000000000000D / Decimal.MaxValue     0.0000000000000012621774483536\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_One\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">One</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number one (1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly decimal One;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <code>One</code> field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing namespace System;\nint main()\n{\n   String^ numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n   String^ exprFmt = &quot;{0,-55}{1,15}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the Decimal structure &quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n   \n   // Display the values of the Decimal fields.\n   Console::WriteLine( numberFmt, &quot;Decimal::MaxValue&quot;, Decimal::MaxValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinValue&quot;, Decimal::MinValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinusOne&quot;, Decimal::MinusOne );\n   Console::WriteLine( numberFmt, &quot;Decimal::One&quot;, Decimal::One );\n   Console::WriteLine( numberFmt, &quot;Decimal::Zero&quot;, Decimal::Zero );\n   Console::WriteLine();\n   \n   // Display the values of expressions of the Decimal fields.\n   Console::WriteLine( exprFmt, &quot;( Decimal::MinusOne + Decimal::One ) == Decimal::Zero&quot;, (Decimal::MinusOne + Decimal::One) == Decimal::Zero );\n   Console::WriteLine( exprFmt, &quot;Decimal::MaxValue + Decimal::MinValue&quot;, Decimal::MaxValue + Decimal::MinValue );\n   Console::WriteLine( exprFmt, &quot;Decimal::MinValue / Decimal::MaxValue&quot;, Decimal::MinValue / Decimal::MaxValue );\n   Console::WriteLine( &quot;{0,-40}{1,30}&quot;, &quot;100000000000000M / Decimal::MaxValue&quot;, Convert::ToDecimal( 100000000000000 ) / Decimal::MaxValue );\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal::MaxValue               79,228,162,514,264,337,593,543,950,335\nDecimal::MinValue              -79,228,162,514,264,337,593,543,950,335\nDecimal::MinusOne                                                   -1\nDecimal::One                                                         1\nDecimal::Zero                                                        0\n\n( Decimal::MinusOne + Decimal::One ) == Decimal::Zero             True\nDecimal::MaxValue + Decimal::MinValue                                0\nDecimal::MinValue / Decimal::MaxValue                               -1\n100000000000000M / Decimal::MaxValue    0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing System;\n\nclass DecimalFieldsDemo\n{\n    public static void Main( )\n    {\n        const string numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n        const string exprFmt = &quot;{0,-55}{1,15}&quot;;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the Decimal structure &quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n\n        // Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, \n            Decimal.MaxValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, \n            Decimal.MinValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, \n            Decimal.MinusOne );\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, Decimal.One );\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, Decimal.Zero );\n        Console.WriteLine( );\n\n        // Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, \n            &quot;( Decimal.MinusOne + Decimal.One ) == Decimal.Zero&quot;, \n            (Decimal.MinusOne + Decimal.One ) == Decimal.Zero );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, \n            Decimal.MaxValue + Decimal.MinValue );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, \n            Decimal.MinValue / Decimal.MaxValue );\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, \n            &quot;100000000000000M / Decimal.MaxValue&quot;, \n            100000000000000M / Decimal.MaxValue );\n    }\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal.MaxValue                79,228,162,514,264,337,593,543,950,335\nDecimal.MinValue               -79,228,162,514,264,337,593,543,950,335\nDecimal.MinusOne                                                    -1\nDecimal.One                                                          1\nDecimal.Zero                                                         0\n\n( Decimal.MinusOne + Decimal.One ) == Decimal.Zero                True\nDecimal.MaxValue + Decimal.MinValue                                  0\nDecimal.MinValue / Decimal.MaxValue                                 -1\n100000000000000M / Decimal.MaxValue     0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Fields#1\">&#39; Example of the Decimal fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFieldsDemo\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-25}{1,45:N0}&quot;\n        Const exprFmt As String = &quot;{0,-55}{1,15}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the Decimal structure&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; )\n\n        &#39; Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, _\n            Decimal.MaxValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, _\n            Decimal.MinValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, _\n            Decimal.MinusOne )\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, _\n            Decimal.One )\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, _\n            Decimal.Zero )\n        Console.WriteLine( )\n\n        &#39; Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, _\n            &quot;( Decimal.MinusOne + Decimal.One ) = Decimal.Zero&quot;, _\n            ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, _\n            Decimal.MaxValue + Decimal.MinValue )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, _\n            Decimal.MinValue/Decimal.MaxValue )\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, _\n            &quot;100000000000000D / Decimal.MaxValue&quot;, _\n            100000000000000D / Decimal.MaxValue )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the Decimal structure\n&#39; generates the following output.\n&#39; \n&#39; Field or Expression                                              Value\n&#39; -------------------                                              -----\n&#39; Decimal.MaxValue                79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinValue               -79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinusOne                                                    -1\n&#39; Decimal.One                                                          1\n&#39; Decimal.Zero                                                         0\n&#39; \n&#39; ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero                 True\n&#39; Decimal.MaxValue + Decimal.MinValue                                  0\n&#39; Decimal.MinValue / Decimal.MaxValue                                 -1\n&#39; 100000000000000D / Decimal.MaxValue     0.0000000000000012621774483536\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Zero\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Zero</div>        \r\n          </div>\r\n    \r\n            <p>Represents the number zero (0).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly decimal Zero;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example illustrates the use of the <code>Zero</code> field.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing namespace System;\nint main()\n{\n   String^ numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n   String^ exprFmt = &quot;{0,-55}{1,15}&quot;;\n   Console::WriteLine( &quot;This example of the fields of the Decimal structure &quot;\n   &quot;<br>generates the following output.<br>&quot; );\n   Console::WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n   Console::WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n   \n   // Display the values of the Decimal fields.\n   Console::WriteLine( numberFmt, &quot;Decimal::MaxValue&quot;, Decimal::MaxValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinValue&quot;, Decimal::MinValue );\n   Console::WriteLine( numberFmt, &quot;Decimal::MinusOne&quot;, Decimal::MinusOne );\n   Console::WriteLine( numberFmt, &quot;Decimal::One&quot;, Decimal::One );\n   Console::WriteLine( numberFmt, &quot;Decimal::Zero&quot;, Decimal::Zero );\n   Console::WriteLine();\n   \n   // Display the values of expressions of the Decimal fields.\n   Console::WriteLine( exprFmt, &quot;( Decimal::MinusOne + Decimal::One ) == Decimal::Zero&quot;, (Decimal::MinusOne + Decimal::One) == Decimal::Zero );\n   Console::WriteLine( exprFmt, &quot;Decimal::MaxValue + Decimal::MinValue&quot;, Decimal::MaxValue + Decimal::MinValue );\n   Console::WriteLine( exprFmt, &quot;Decimal::MinValue / Decimal::MaxValue&quot;, Decimal::MinValue / Decimal::MaxValue );\n   Console::WriteLine( &quot;{0,-40}{1,30}&quot;, &quot;100000000000000M / Decimal::MaxValue&quot;, Convert::ToDecimal( 100000000000000 ) / Decimal::MaxValue );\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal::MaxValue               79,228,162,514,264,337,593,543,950,335\nDecimal::MinValue              -79,228,162,514,264,337,593,543,950,335\nDecimal::MinusOne                                                   -1\nDecimal::One                                                         1\nDecimal::Zero                                                        0\n\n( Decimal::MinusOne + Decimal::One ) == Decimal::Zero             True\nDecimal::MaxValue + Decimal::MinValue                                0\nDecimal::MinValue / Decimal::MaxValue                               -1\n100000000000000M / Decimal::MaxValue    0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Fields#1\">// Example of the Decimal fields.\nusing System;\n\nclass DecimalFieldsDemo\n{\n    public static void Main( )\n    {\n        const string numberFmt = &quot;{0,-25}{1,45:N0}&quot;;\n        const string exprFmt = &quot;{0,-55}{1,15}&quot;;\n\n        Console.WriteLine( \n            &quot;This example of the fields of the Decimal structure &quot; +\n            &quot;<br>generates the following output.<br>&quot; );\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; );\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; );\n\n        // Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, \n            Decimal.MaxValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, \n            Decimal.MinValue );\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, \n            Decimal.MinusOne );\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, Decimal.One );\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, Decimal.Zero );\n        Console.WriteLine( );\n\n        // Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, \n            &quot;( Decimal.MinusOne + Decimal.One ) == Decimal.Zero&quot;, \n            (Decimal.MinusOne + Decimal.One ) == Decimal.Zero );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, \n            Decimal.MaxValue + Decimal.MinValue );\n        Console.WriteLine( exprFmt, \n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, \n            Decimal.MinValue / Decimal.MaxValue );\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, \n            &quot;100000000000000M / Decimal.MaxValue&quot;, \n            100000000000000M / Decimal.MaxValue );\n    }\n}\n\n/*\nThis example of the fields of the Decimal structure\ngenerates the following output.\n\nField or Expression                                              Value\n-------------------                                              -----\nDecimal.MaxValue                79,228,162,514,264,337,593,543,950,335\nDecimal.MinValue               -79,228,162,514,264,337,593,543,950,335\nDecimal.MinusOne                                                    -1\nDecimal.One                                                          1\nDecimal.Zero                                                         0\n\n( Decimal.MinusOne + Decimal.One ) == Decimal.Zero                True\nDecimal.MaxValue + Decimal.MinValue                                  0\nDecimal.MinValue / Decimal.MaxValue                                 -1\n100000000000000M / Decimal.MaxValue     0.0000000000000012621774483536\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Fields#1\">&#39; Example of the Decimal fields.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFieldsDemo\n    \n    Sub Main( )\n\n        Const numberFmt As String = &quot;{0,-25}{1,45:N0}&quot;\n        Const exprFmt As String = &quot;{0,-55}{1,15}&quot;\n\n        Console.WriteLine( _\n            &quot;This example of the fields of the Decimal structure&quot; &amp; _\n            vbCrLf &amp; &quot;generates the following output.&quot; &amp; vbCrLf )\n        Console.WriteLine( numberFmt, &quot;Field or Expression&quot;, &quot;Value&quot; )\n        Console.WriteLine( numberFmt, &quot;-------------------&quot;, &quot;-----&quot; )\n\n        &#39; Display the values of the Decimal fields.\n        Console.WriteLine( numberFmt, &quot;Decimal.MaxValue&quot;, _\n            Decimal.MaxValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinValue&quot;, _\n            Decimal.MinValue )\n        Console.WriteLine( numberFmt, &quot;Decimal.MinusOne&quot;, _\n            Decimal.MinusOne )\n        Console.WriteLine( numberFmt, &quot;Decimal.One&quot;, _\n            Decimal.One )\n        Console.WriteLine( numberFmt, &quot;Decimal.Zero&quot;, _\n            Decimal.Zero )\n        Console.WriteLine( )\n\n        &#39; Display the values of expressions of the Decimal fields.\n        Console.WriteLine( exprFmt, _\n            &quot;( Decimal.MinusOne + Decimal.One ) = Decimal.Zero&quot;, _\n            ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MaxValue + Decimal.MinValue&quot;, _\n            Decimal.MaxValue + Decimal.MinValue )\n        Console.WriteLine( exprFmt, _\n            &quot;Decimal.MinValue / Decimal.MaxValue&quot;, _\n            Decimal.MinValue/Decimal.MaxValue )\n        Console.WriteLine( &quot;{0,-40}{1,30}&quot;, _\n            &quot;100000000000000D / Decimal.MaxValue&quot;, _\n            100000000000000D / Decimal.MaxValue )\n    End Sub \nEnd Module \n\n&#39; This example of the fields of the Decimal structure\n&#39; generates the following output.\n&#39; \n&#39; Field or Expression                                              Value\n&#39; -------------------                                              -----\n&#39; Decimal.MaxValue                79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinValue               -79,228,162,514,264,337,593,543,950,335\n&#39; Decimal.MinusOne                                                    -1\n&#39; Decimal.One                                                          1\n&#39; Decimal.Zero                                                         0\n&#39; \n&#39; ( Decimal.MinusOne + Decimal.One ) = Decimal.Zero                 True\n&#39; Decimal.MaxValue + Decimal.MinValue                                  0\n&#39; Decimal.MinValue / Decimal.MaxValue                                 -1\n&#39; 100000000000000D / Decimal.MaxValue     0.0000000000000012621774483536\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Add_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Add (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>d1</code> and <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The sum of <code>d1</code> and <code>d2</code> is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>Add</code> :  </p>\n<pre><code class=\"lang-cpp\" name=\"Decimal Example#5\">   public ref class PiggyBank\n   {\n   public:\n      void AddPenny()\n      {\n         MyFortune = Decimal::Add( MyFortune, (Decimal).01 );\n      }\n\n      virtual System::String^ ToString() override\n      {\n         return MyFortune.ToString(&quot;C&quot;)+&quot; in piggy bank&quot;;\n      }\n\n   protected:\n      Decimal MyFortune;\n   };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Decimal Example#5\">    Class PiggyBank\n\n        Public Sub AddPenny()\n            MyFortune = [Decimal].Add(MyFortune, 0.01D)\n        End Sub\n\n        Public Overrides Function ToString() As String\n            Return MyFortune.ToString(&quot;C&quot;) + &quot; in piggy bank&quot;\n        End Function\n\n        Protected MyFortune As Decimal\n    End Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Decimal Example#5\">\tclass PiggyBank {\n\t\tpublic void AddPenny() {\n\t\t\tMyFortune = Decimal.Add(MyFortune, .01m);\n\t\t}\n\n\t\tpublic override string ToString() {\n\t\t\treturn MyFortune.ToString(&quot;C&quot;)+&quot; in piggy bank&quot;;\n\t\t}\n\n\t\tprotected decimal MyFortune;\n\t}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Ceiling_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Ceiling_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Ceiling(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the smallest integral value that is greater than or equal to the specified decimal number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Ceiling (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A decimal number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The smallest integral value that is greater than or equal to the <code>d</code> parameter. Note that this method returns a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instead of an integral type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if <code>d</code> is positive, the presence of any fractional component causes <code>d</code> to be rounded to the next highest integer. If <code>d</code> is negative, the rounding operation causes any fractional component of <code>d</code> to be discarded. The operation of this method differs from the <a class=\"xref\" href=\"system.decimal#System_Decimal_Floor_\" data-linktype=\"relative-path\">Floor</a> method, which supports rounding toward negative infinity.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Ceiling method and contrasts it with the <a class=\"xref\" href=\"system.decimal#System_Decimal_Floor_\" data-linktype=\"relative-path\">Floor</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Ceiling#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      decimal[] values = {12.6m, 12.1m, 9.5m, 8.16m, .1m, -.1m,  -1.1m, \n                          -1.9m, -3.9m};\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}<br>&quot;, \n                        &quot;Value&quot;, &quot;Ceiling&quot;, &quot;Floor&quot;);\n      foreach (decimal value in values)\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}&quot;, value,\n                        Decimal.Ceiling(value), Decimal.Floor(value));\n\n   }\n}\n// The example displays the following output:\n//       Value       Ceiling      Floor\n//       \n//       12.6             13         12\n//       12.1             13         12\n//       9.5              10          9\n//       8.16              9          8\n//       0.1               1          0\n//       -0.1              0         -1\n//       -1.1             -1         -2\n//       -1.9             -1         -2\n//       -3.9             -3         -4\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ceiling#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = {12.6d, 12.1d, 9.5d, 8.16d, .1d, -.1d,  \n                                 -1.1d, -1.9d, -3.9d}\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}&quot;, \n                        &quot;Value&quot;, &quot;Ceiling&quot;, &quot;Floor&quot;)\n      Console.WriteLine()\n      For Each value As Decimal In values\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}&quot;, value,\n                        Decimal.Ceiling(value), Decimal.Floor(value))\n      Next                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value       Ceiling      Floor\n&#39;       \n&#39;       12.6             13         12\n&#39;       12.1             13         12\n&#39;       9.5              10          9\n&#39;       8.16              9          8\n&#39;       0.1               1          0\n&#39;       -0.1              0         -1\n&#39;       -1.1             -1         -2\n&#39;       -1.9             -1         -2\n&#39;       -3.9             -3         -4      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Compare_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Compare_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Compare(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int Compare (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of <code>d1</code> and <code>d2</code>.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td><code>d1</code> is less than <code>d2</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td><code>d1</code> and <code>d2</code> are equal.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td><code>d1</code> is greater than <code>d2</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example compares several <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. Note that the first comparison indicates that the two values are equal despite the subtraction operation performed on the <code>value2</code> variable. This is because the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> type has 29 digits of precision, whereas a difference between these two values can be detected only with 30 digits of precision.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Compare#1\">Public Enum Relationship As Integer\n    LessThan = -1\n    Equals = 0\n    GreaterThan = 1\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      Dim value1 As Decimal = Decimal.MaxValue\n      Dim value2 As Decimal = value1 - .01d\n      Console.WriteLine(&quot;{0} {2} {1}&quot;, value1, value2, \n                        CType(Decimal.Compare(value1, value2), Relationship))   \n   \n      value2 = value1 / 12d - .1d\n      value1 = value1 / 12d\n      Console.WriteLine(&quot;{0} {2} {1}&quot;, value1, value2, \n                        CType(Decimal.Compare(value1, value2), Relationship))   \n   \n      value1 = value1 - .2d\n      value2 = value2 + .1d\n      Console.WriteLine(&quot;{0} {2} {1}&quot;, value1, value2, \n                        CType(Decimal.Compare(value1, value2), Relationship))   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     79228162514264337593543950335 Equals 79228162514264337593543950335\n&#39;     6602346876188694799461995861.2 GreaterThan 6602346876188694799461995861.1\n&#39;     6602346876188694799461995861.0 LessThan 6602346876188694799461995861.2\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Compare#1\">using System;\n\npublic enum Relationship\n{  LessThan = -1, Equals = 0, GreaterThan = 1 }\n\npublic class Example\n{\n   public static void Main()\n   {\n      decimal value1 = Decimal.MaxValue;\n      decimal value2 = value1 - .01m;\n      Console.WriteLine(&quot;{0} {2} {1}&quot;, value1, value2, \n                        (Relationship) Decimal.Compare(value1, value2));   \n   \n      value2 = value1 / 12m - .1m;\n      value1 = value1 / 12m;\n      Console.WriteLine(&quot;{0} {2} {1}&quot;, value1, value2, \n                        (Relationship) Decimal.Compare(value1, value2));   \n   \n      value1 = value1 - .2m;\n      value2 = value2 + .1m;\n      Console.WriteLine(&quot;{0} {2} {1}&quot;, value1, value2, \n                        (Relationship) Decimal.Compare(value1, value2));   \n   }\n}\n// The example displays the following output:\n//     79228162514264337593543950335 Equals 79228162514264337593543950335\n//     6602346876188694799461995861.2 GreaterThan 6602346876188694799461995861.1\n//     6602346876188694799461995861.0 LessThan 6602346876188694799461995861.2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_CompareTo_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object and returns a comparison of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> interface and performs slightly better than the <a class=\"xref\" href=\"system.decimal#System_Decimal_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> Depending on your programming language, it might be possible to code a <a class=\"xref\" href=\"system.decimal#System_Decimal_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and the parameter type is <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. The Microsoft C# compiler generates instructions to represent the parameter as an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> object, then generates a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to compare the values of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance and the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> parameter representation.  </p>\n<p> Consult your programming language&#39;s documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates generic and nongeneric versions of the <a class=\"xref\" href=\"system.decimal#System_Decimal_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method for several value and reference types.  </p>\n<pre><code class=\"lang-vb\" name=\"T.CompareTo#1\">&#39; This example demonstrates the generic and non-generic versions of the \n&#39; CompareTo method for several base types.\n&#39; The non-generic version takes a parameter of type Object, while the generic\n&#39; version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nImports System\n\nClass Sample\n   Public Shared Sub Main()\n      Dim nl As String = Environment.NewLine\n      Dim msg As String = _\n          &quot;{0}The following is the result of using the generic and non-generic{0}&quot; &amp; _\n          &quot;versions of the CompareTo method for several base types:{0}&quot;\n      \n      Dim now As DateTime = DateTime.Now\n      &#39; Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n      Dim tsX As New TimeSpan(11, 22, 33, 44)\n      &#39; Version = 1.2.333.4\n      Dim versX As New Version(&quot;1.2.333.4&quot;)\n      &#39; Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n      Dim guidX As New Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;)\n      \n      Dim a1 As [Boolean] = True,    a2 As [Boolean] = True\n      Dim b1 As [Byte] = 1,          b2 As [Byte] = 1\n      Dim c1 As Int16 = -2,          c2 As Int16 = 2\n      Dim d1 As Int32 = 3,           d2 As Int32 = 3\n      Dim e1 As Int64 = 4,           e2 As Int64 = -4\n      Dim f1 As [Decimal] = -5.5D,   f2 As [Decimal] = 5.5D\n      Dim g1 As [Single] = 6.6F,     g2 As [Single] = 6.6F\n      Dim h1 As [Double] = 7.7,      h2 As [Double] = -7.7\n      Dim i1 As [Char] = &quot;A&quot;c,       i2 As [Char] = &quot;A&quot;c\n      Dim j1 As String = &quot;abc&quot;,      j2 As String = &quot;abc&quot;\n      Dim k1 As DateTime = now,      k2 As DateTime = now\n      Dim l1 As TimeSpan = tsX,      l2 As TimeSpan = tsX\n      Dim m1 As Version = versX,     m2 As New Version(&quot;2.0&quot;)\n      Dim n1 As Guid = guidX,        n2 As Guid = guidX\n      \n      &#39; The following types are not CLS-compliant.\n      &#39; SByte, UInt16, UInt32, UInt64\n\n      Console.WriteLine(msg, nl)\n      Try\n         &#39; The second and third Show method call parameters are automatically boxed because\n         &#39; the second and third Show method declaration arguments expect type Object.\n\n         Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo(CObj(a2)))\n         Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo(CObj(b2)))\n         Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo(CObj(c2)))\n         Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo(CObj(d2)))\n         Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo(CObj(e2)))\n         Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo(CObj(f2)))\n         Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo(CObj(g2)))\n         Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo(CObj(h2)))\n         Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo(CObj(i2)))\n         Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo(CObj(j2)))\n         Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo(CObj(k2)))\n         Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo(CObj(l2)))\n         Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo(CObj(m2)))\n         Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo(CObj(n2)))\n         &#39;\n         Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl)\n         Console.WriteLine(&quot;SByte, UInt16, UInt32, UInt64&quot;)\n\n      Catch e As Exception\n         Console.WriteLine(e)\n      End Try\n   End Sub &#39;Main\n   \n   Public Shared Sub Show(caption As String, var1 As [Object], var2 As [Object], _\n                          resultGeneric As Integer, resultNonGeneric As Integer)\n      Dim relation As String\n      \n      Console.Write(caption)\n      If resultGeneric = resultNonGeneric Then\n         If resultGeneric &lt; 0 Then\n            relation = &quot;less than&quot;\n         ElseIf resultGeneric &gt; 0 Then\n            relation = &quot;greater than&quot;\n         Else\n            relation = &quot;equal to&quot;\n         End If\n         Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2)\n      \n      &#39; The following condition will never occur because the generic and non-generic\n      &#39; CompareTo methods are equivalent.\n\n      Else\n         Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, _\n                            resultGeneric, resultNonGeneric)\n      End If\n   End Sub &#39;Show\nEnd Class &#39;Sample\n&#39;\n&#39;This example produces the following results:\n&#39;\n&#39;The following is the result of using the generic and non-generic versions of the\n&#39;CompareTo method for several base types:\n&#39;\n&#39;Boolean:  True is equal to True\n&#39;Byte:     1 is equal to 1\n&#39;Int16:    -2 is less than 2\n&#39;Int32:    3 is equal to 3\n&#39;Int64:    4 is greater than -4\n&#39;Decimal:  -5.5 is less than 5.5\n&#39;Single:   6.6 is equal to 6.6\n&#39;Double:   7.7 is greater than -7.7\n&#39;Char:     A is equal to A\n&#39;String:   abc is equal to abc\n&#39;DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n&#39;TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n&#39;Version:  1.2.333.4 is less than 2.0\n&#39;Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n&#39;aa0057b223\n&#39;\n&#39;The following types are not CLS-compliant:\n&#39;SByte, UInt16, UInt32, UInt64\n&#39;\n</code></pre><pre><code class=\"lang-cpp\" name=\"T.CompareTo#1\">// This example demonstrates the two versions of the \n// CompareTo method for several base types.\n// The general version takes a parameter of type Object, while the specific\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\nusing namespace System;\n\nvoid Show( String^ caption, Object^ var1, Object^ var2, int resultGeneric, int resultNonGeneric )\n{\n   String^ relation;\n   Console::Write( caption );\n   if ( resultGeneric == resultNonGeneric )\n   {\n      if ( resultGeneric &lt; 0 )\n            relation = &quot;less than&quot;;\n      else\n      if ( resultGeneric &gt; 0 )\n            relation = &quot;greater than&quot;;\n      else\n            relation = &quot;equal to&quot;;\n      Console::WriteLine( &quot;{0} is {1} {2}&quot;, var1, relation, var2 );\n   }\n   // The following condition will never occur because the generic and non-generic\n   // CompareTo methods are equivalent.\n   else\n   {\n      Console::WriteLine( &quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, resultGeneric, resultNonGeneric );\n   }\n}\n\nint main()\n{\n   String^ nl = Environment::NewLine;\n   String^ msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot;\n   &quot;versions of the CompareTo method for several base types:{0}&quot;;\n   Object^ obj; // An Object used to insure CompareTo(Object) is called.\n\n   DateTime now = DateTime::Now;\n   \n   // Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n   TimeSpan tsX = TimeSpan(11,22,33,44);\n   \n   // Version = 1.2.333.4\n   Version^ versX = gcnew Version(  &quot;1.2.333.4&quot; );\n   \n   // Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n   Guid guidX = Guid( &quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n   Boolean a1 = true,a2 = true;\n   Byte b1 = 1,b2 = 1;\n   Int16 c1 = -2,c2 = 2;\n   Int32 d1 = 3,d2 = 3;\n   Int64 e1 = 4,e2 = -4;\n   Decimal f1 = Decimal(-5.5), f2 = Decimal(5.5);\n   Single g1 = 6.6f,g2 = 6.6f;\n   Double h1 = 7.7,h2 = -7.7;\n   Char i1 = &#39;A&#39;,i2 = &#39;A&#39;;\n   String^ j1 = &quot;abc&quot;, ^j2 = &quot;abc&quot;;\n   DateTime k1 = now,k2 = now;\n   TimeSpan l1 = tsX,l2 = tsX;\n   Version^ m1 = versX, ^m2 = gcnew Version(  &quot;2.0&quot; );\n   Guid n1 = guidX,n2 = guidX;\n   \n   // The following types are not CLS-compliant.\n   SByte w1 = 8,w2 = 8;\n   UInt16 x1 = 9,x2 = 9;\n   UInt32 y1 = 10,y2 = 10;\n   UInt64 z1 = 11,z2 = 11;\n   \n   //\n   Console::WriteLine( msg, nl );\n   try\n   {\n      Show( &quot;Boolean: &quot;, a1, a2, a1.CompareTo( a2 ), a1.CompareTo( a2 ) );\n      Show( &quot;Byte:    &quot;, b1, b2, b1.CompareTo( b2 ), b1.CompareTo( b2 ) );\n      Show( &quot;Int16:   &quot;, c1, c2, c1.CompareTo( c2 ), c1.CompareTo( c2 ) );\n      Show( &quot;Int32:   &quot;, d1, d2, d1.CompareTo( d2 ), d1.CompareTo( d2 ) );\n      Show( &quot;Int64:   &quot;, e1, e2, e1.CompareTo( e2 ), e1.CompareTo( e2 ) );\n      Show( &quot;Decimal: &quot;, f1, f2, f1.CompareTo( f2 ), f1.CompareTo( f2 ) );\n      Show( &quot;Single:  &quot;, g1, g2, g1.CompareTo( g2 ), g1.CompareTo( g2 ) );\n      Show( &quot;Double:  &quot;, h1, h2, h1.CompareTo( h2 ), h1.CompareTo( h2 ) );\n      Show( &quot;Char:    &quot;, i1, i2, i1.CompareTo( i2 ), i1.CompareTo( i2 ) );\n      \n      // Use an anonymous object to hide the String object.\n      obj = j2;\n      Show( &quot;String:  &quot;, j1, j2, j1-&gt;CompareTo( j2 ), j1-&gt;CompareTo( obj ) );\n      Show( &quot;DateTime:&quot;, k1, k2, k1.CompareTo( k2 ), k1.CompareTo( k2 ) );\n      Show(  &quot;TimeSpan: &quot;, l1, l2, l1.CompareTo( l2 ), l1.CompareTo( l2 ) );\n      \n      // Use an anonymous object to hide the Version object.\n      obj = m2;\n      Show(  &quot;Version:  &quot;, m1, m2, m1-&gt;CompareTo( m2 ), m1-&gt;CompareTo( obj ) );\n      Show(  &quot;Guid:     &quot;, n1, n2, n1.CompareTo( n2 ), n1.CompareTo( n2 ) );\n      \n      //\n      Console::WriteLine( &quot;{0}The following types are not CLS-compliant:&quot;, nl );\n      Show( &quot;SByte:   &quot;, w1, w2, w1.CompareTo( w2 ), w1.CompareTo( w2 ) );\n      Show( &quot;UInt16:  &quot;, x1, x2, x1.CompareTo( x2 ), x1.CompareTo( x2 ) );\n      Show( &quot;UInt32:  &quot;, y1, y2, y1.CompareTo( y2 ), y1.CompareTo( y2 ) );\n      Show( &quot;UInt64:  &quot;, z1, z2, z1.CompareTo( z2 ), z1.CompareTo( z2 ) );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n}\n//     This example displays the following output:\n//     \n//     The following is the result of using the generic and non-generic versions of the\n//     CompareTo method for several base types:\n//     \n//     Boolean:  True is equal to True\n//     Byte:     1 is equal to 1\n//     Int16:    -2 is less than 2\n//     Int32:    3 is equal to 3\n//     Int64:    4 is greater than -4\n//     Decimal:  -5.5 is less than 5.5\n//     Single:   6.6 is equal to 6.6\n//     Double:   7.7 is greater than -7.7\n//     Char:     A is equal to A\n//     String:   abc is equal to abc\n//     DateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\n//     TimeSpan: 11.22:33:44 is equal to 11.22:33:44\n//     Version:  1.2.333.4 is less than 2.0\n//     Guid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\n//     aa0057b223\n//     \n//     The following types are not CLS-compliant:\n//     SByte:    8 is equal to 8\n//     UInt16:   9 is equal to 9\n//     UInt32:   10 is equal to 10\n//     UInt64:   11 is equal to 11\n</code></pre><pre><code class=\"lang-cs\" name=\"T.CompareTo#1\">// This example demonstrates the generic and non-generic versions of the \n// CompareTo method for several base types.\n// The non-generic version takes a parameter of type Object, while the generic\n// version takes a type-specific parameter, such as Boolean, Int32, or Double.\n\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    string    nl = Environment.NewLine;\n    string    msg = &quot;{0}The following is the result of using the generic and non-generic{0}&quot; +\n                    &quot;versions of the CompareTo method for several base types:{0}&quot;;\n\n    DateTime  now = DateTime.Now;\n// Time span = 11 days, 22 hours, 33 minutes, 44 seconds\n    TimeSpan  tsX = new TimeSpan(11, 22, 33, 44); \n// Version = 1.2.333.4\n    Version   versX = new Version(&quot;1.2.333.4&quot;);  \n// Guid = CA761232-ED42-11CE-BACD-00AA0057B223\n    Guid      guidX = new Guid(&quot;{CA761232-ED42-11CE-BACD-00AA0057B223}&quot;);\n\n    Boolean  a1 = true,  a2 = true;\n    Byte     b1 = 1,     b2 = 1;\n    Int16    c1 = -2,    c2 = 2;\n    Int32    d1 = 3,     d2 = 3;\n    Int64    e1 = 4,     e2 = -4;\n    Decimal  f1 = -5.5m, f2 = 5.5m;\n    Single   g1 = 6.6f,  g2 = 6.6f;\n    Double   h1 = 7.7d,  h2 = -7.7d;\n    Char     i1 = &#39;A&#39;,   i2 = &#39;A&#39;;\n    String   j1 = &quot;abc&quot;, j2 = &quot;abc&quot;;\n    DateTime k1 = now,   k2 = now;\n    TimeSpan l1 = tsX,   l2 = tsX;\n    Version  m1 = versX, m2 = new Version(&quot;2.0&quot;);\n    Guid     n1 = guidX, n2 = guidX;\n\n// The following types are not CLS-compliant.\n    SByte    w1 = 8,     w2 = 8;\n    UInt16   x1 = 9,     x2 = 9;\n    UInt32   y1 = 10,    y2 = 10;\n    UInt64   z1 = 11,    z2 = 11;\n//\n    Console.WriteLine(msg, nl);\n    try \n        {\n// The second and third Show method call parameters are automatically boxed because\n// the second and third Show method declaration arguments expect type Object.\n\n        Show(&quot;Boolean:  &quot;, a1, a2, a1.CompareTo(a2), a1.CompareTo((Object)a2));\n        Show(&quot;Byte:     &quot;, b1, b2, b1.CompareTo(b2), b1.CompareTo((Object)b2));\n        Show(&quot;Int16:    &quot;, c1, c2, c1.CompareTo(c2), c1.CompareTo((Object)c2));\n        Show(&quot;Int32:    &quot;, d1, d2, d1.CompareTo(d2), d1.CompareTo((Object)d2));\n        Show(&quot;Int64:    &quot;, e1, e2, e1.CompareTo(e2), e1.CompareTo((Object)e2));\n        Show(&quot;Decimal:  &quot;, f1, f2, f1.CompareTo(f2), f1.CompareTo((Object)f2));\n        Show(&quot;Single:   &quot;, g1, g2, g1.CompareTo(g2), g1.CompareTo((Object)g2));\n        Show(&quot;Double:   &quot;, h1, h2, h1.CompareTo(h2), h1.CompareTo((Object)h2));\n        Show(&quot;Char:     &quot;, i1, i2, i1.CompareTo(i2), i1.CompareTo((Object)i2));\n        Show(&quot;String:   &quot;, j1, j2, j1.CompareTo(j2), j1.CompareTo((Object)j2));\n        Show(&quot;DateTime: &quot;, k1, k2, k1.CompareTo(k2), k1.CompareTo((Object)k2));\n        Show(&quot;TimeSpan: &quot;, l1, l2, l1.CompareTo(l2), l1.CompareTo((Object)l2));\n        Show(&quot;Version:  &quot;, m1, m2, m1.CompareTo(m2), m1.CompareTo((Object)m2));\n        Show(&quot;Guid:     &quot;, n1, n2, n1.CompareTo(n2), n1.CompareTo((Object)n2));\n//\n        Console.WriteLine(&quot;{0}The following types are not CLS-compliant:&quot;, nl);\n        Show(&quot;SByte:    &quot;, w1, w2, w1.CompareTo(w2), w1.CompareTo((Object)w2));\n        Show(&quot;UInt16:   &quot;, x1, x2, x1.CompareTo(x2), x1.CompareTo((Object)x2));\n        Show(&quot;UInt32:   &quot;, y1, y2, y1.CompareTo(y2), y1.CompareTo((Object)y2));\n        Show(&quot;UInt64:   &quot;, z1, z2, z1.CompareTo(z2), z1.CompareTo((Object)z2));\n        }\n    catch (Exception e)\n        {\n        Console.WriteLine(e);\n        }\n    }\n\n    public static void Show(string caption, Object var1, Object var2, \n                            int resultGeneric, int resultNonGeneric)\n    {\n    string relation;\n\n    Console.Write(caption);\n    if (resultGeneric == resultNonGeneric) \n        {\n        if      (resultGeneric &lt; 0) relation = &quot;less than&quot;;\n        else if (resultGeneric &gt; 0) relation = &quot;greater than&quot;;\n        else                        relation = &quot;equal to&quot;;\n        Console.WriteLine(&quot;{0} is {1} {2}&quot;, var1, relation, var2);\n        }\n\n// The following condition will never occur because the generic and non-generic\n// CompareTo methods are equivalent.\n\n    else\n        {\n        Console.WriteLine(&quot;Generic CompareTo = {0}; non-generic CompareTo = {1}&quot;, \n                           resultGeneric, resultNonGeneric);\n        }\n   }\n}\n/*\nThis example produces the following results:\n\nThe following is the result of using the generic and non-generic versions of the\nCompareTo method for several base types:\n\nBoolean:  True is equal to True\nByte:     1 is equal to 1\nInt16:    -2 is less than 2\nInt32:    3 is equal to 3\nInt64:    4 is greater than -4\nDecimal:  -5.5 is less than 5.5\nSingle:   6.6 is equal to 6.6\nDouble:   7.7 is greater than -7.7\nChar:     A is equal to A\nString:   abc is equal to abc\nDateTime: 12/1/2003 5:37:46 PM is equal to 12/1/2003 5:37:46 PM\nTimeSpan: 11.22:33:44 is equal to 11.22:33:44\nVersion:  1.2.333.4 is less than 2.0\nGuid:     ca761232-ed42-11ce-bacd-00aa0057b223 is equal to ca761232-ed42-11ce-bacd-00\naa0057b223\n\nThe following types are not CLS-compliant:\nSByte:    8 is equal to 8\nUInt16:   9 is equal to 9\nUInt32:   10 is equal to 10\nUInt64:   11 is equal to 11\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_CompareTo_System_Object_\">\r\n    \r\n            <a id=\"System_Decimal_CompareTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CompareTo(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Compares this instance to a specified object and returns a comparison of their relative values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CompareTo (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A signed number indicating the relative values of this instance and <code>value</code>.  </p>\n <table><thead><tr><th> Return value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance is less than <code>value</code>.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance is equal to <code>value</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance is greater than <code>value</code>.<br>\n -or-<br>\n <code>value</code> is <code>null</code>.<br>\n </td></tr></tbody></table>\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is not a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Any instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, regardless of its value, is considered greater than <code>null</code>.  </p>\n<p> Parameter <code>value</code> must be <code>null</code> or an instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>; otherwise, an exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares several <code>Decimal</code> and other objects to a reference <code>Decimal</code> value using the <code>CompareTo</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Compare_Equals#1\">// Example of the Decimal::CompareTo and Decimal::Equals instance \n// methods.\nusing namespace System;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Compare the Decimal to the Object parameters, \n// and display the Object parameters with the results.\nvoid CompDecimalToObject( Decimal Left, Object^ Right, String^ RightText )\n{\n   Console::WriteLine( &quot;{0,-46}{1}&quot;, String::Concat( &quot;Object: &quot;, RightText ), Right );\n   Console::WriteLine( &quot;{0,-46}{1}&quot;, &quot;Left.Equals( Object )&quot;, Left.Equals( Right ) );\n   Console::Write( &quot;{0,-46}&quot;, &quot;Left.CompareTo( Object )&quot; );\n   try\n   {\n      \n      // Catch the exception if CompareTo( ) throws one.\n      Console::WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;{0}<br>&quot;, GetExceptionType( ex ) );\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal::Equals( Object* ) and <br>&quot;\n   &quot;Decimal::CompareTo( Object* ) methods generates the <br>&quot;\n   &quot;following output. It creates several different &quot;\n   &quot;Decimal <br>values and compares them with the following &quot;\n   &quot;reference value.<br>&quot; );\n   \n   // Create a reference Decimal value.\n   Decimal Left = Decimal(987.654);\n   Console::WriteLine( &quot;{0,-46}{1}<br>&quot;, &quot;Left: Decimal( 987.654 )&quot;, Left );\n   \n   // Create objects to compare with the reference.\n   CompDecimalToObject( Left, Decimal(9.8765400E+2), &quot;Decimal( 9.8765400E+2 )&quot; );\n   CompDecimalToObject( Left, Decimal::Parse( &quot;987.6541&quot; ), &quot;Decimal::Parse( \\&quot;987.6541\\&quot; )&quot; );\n   CompDecimalToObject( Left, Decimal::Parse( &quot;987.6539&quot; ), &quot;Decimal::Parse( \\&quot;987.6539\\&quot; )&quot; );\n   CompDecimalToObject( Left, Decimal(987654000,0,0,false,6), &quot;Decimal( 987654000, 0, 0, false, 6 )&quot; );\n   CompDecimalToObject( Left, 9.8765400E+2, &quot;Double 9.8765400E+2&quot; );\n   CompDecimalToObject( Left, &quot;987.654&quot;, &quot;String \\&quot;987.654\\&quot;&quot; );\n}\n\n/*\nThis example of the Decimal::Equals( Object* ) and\nDecimal::CompareTo( Object* ) methods generates the\nfollowing output. It creates several different Decimal\nvalues and compares them with the following reference value.\n\nLeft: Decimal( 987.654 )                      987.654\n\nObject: Decimal( 9.8765400E+2 )               987.654\nLeft.Equals( Object )                         True\nLeft.CompareTo( Object )                      0\n\nObject: Decimal::Parse( &quot;987.6541&quot; )          987.6541\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      -1\n\nObject: Decimal::Parse( &quot;987.6539&quot; )          987.6539\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      1\n\nObject: Decimal( 987654000, 0, 0, false, 6 )  987.654000\nLeft.Equals( Object )                         True\nLeft.CompareTo( Object )                      0\n\nObject: Double 9.8765400E+2                   987.654\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      ArgumentException\n\nObject: String &quot;987.654&quot;                      987.654\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      ArgumentException\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Compare_Equals#1\">// Example of the decimal.CompareTo and decimal.Equals instance \n// methods.\nusing System;\n\nclass DecCompToEqualsObjDemo\n{\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    // Compare the decimal to the object parameters, \n    // and display the object parameters with the results.\n    public static void CompDecimalToObject( decimal Left, \n        object Right, string RightText )\n    {\n\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;object: &quot;+RightText, \n            Right );\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;Left.Equals( object )&quot;, \n            Left.Equals( Right ) );\n        Console.Write( &quot;{0,-46}&quot;, &quot;Left.CompareTo( object )&quot; );\n\n        try\n        {\n            // Catch the exception if CompareTo( ) throws one.\n            Console.WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n        }\n        catch( Exception ex )\n        {\n            Console.WriteLine( &quot;{0}<br>&quot;, GetExceptionType( ex ) );\n        }\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the decimal.Equals( object ) and <br>&quot; +\n            &quot;decimal.CompareTo( object ) methods generates the <br>&quot; +\n            &quot;following output. It creates several different &quot; +\n            &quot;decimal <br>values and compares them with the following &quot; +\n            &quot;reference value.<br>&quot; );\n\n        // Create a reference decimal value.\n        decimal Left = new decimal( 987.654 );\n\n        Console.WriteLine( &quot;{0,-46}{1}<br>&quot;, \n            &quot;Left: decimal( 987.654 )&quot;, Left );\n\n        // Create objects to compare with the reference.\n        CompDecimalToObject( Left, new decimal( 9.8765400E+2 ), \n            &quot;decimal( 9.8765400E+2 )&quot; );\n        CompDecimalToObject( Left, 987.6541M, &quot;987.6541D&quot; );\n        CompDecimalToObject( Left, 987.6539M, &quot;987.6539D&quot; );\n        CompDecimalToObject( Left, \n            new decimal( 987654000, 0, 0, false, 6 ), \n            &quot;decimal( 987654000, 0, 0, false, 6 )&quot; );\n        CompDecimalToObject( Left, 9.8765400E+2, \n            &quot;Double 9.8765400E+2&quot; );\n        CompDecimalToObject( Left, &quot;987.654&quot;, &quot;String \\&quot;987.654\\&quot;&quot; );\n    }\n}\n\n/*\nThis example of the decimal.Equals( object ) and\ndecimal.CompareTo( object ) methods generates the\nfollowing output. It creates several different decimal\nvalues and compares them with the following reference value.\n\nLeft: decimal( 987.654 )                      987.654\n\nobject: decimal( 9.8765400E+2 )               987.654\nLeft.Equals( object )                         True\nLeft.CompareTo( object )                      0\n\nobject: 987.6541D                             987.6541\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      -1\n\nobject: 987.6539D                             987.6539\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      1\n\nobject: decimal( 987654000, 0, 0, false, 6 )  987.654000\nLeft.Equals( object )                         True\nLeft.CompareTo( object )                      0\n\nobject: Double 9.8765400E+2                   987.654\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      ArgumentException\n\nobject: String &quot;987.654&quot;                      987.654\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      ArgumentException\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Compare_Equals#1\">&#39; Example of the Decimal.CompareTo and Decimal.Equals instance methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecCompToEqualsObjDemo\n    \n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Compare the Decimal to the Object parameters, \n    &#39; and display the Object parameters with the results.\n    Sub CompDecimalToObject( Left as Decimal, Right as Object, _\n        RightText as String )\n\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;Object: &quot; &amp; RightText, _\n            Right )\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;Left.Equals( Object )&quot;, _\n            Left.Equals( Right ) )\n        Console.Write( &quot;{0,-46}&quot;, &quot;Left.CompareTo( Object )&quot; )\n\n        &#39; Catch the exception if CompareTo( ) throws one.\n        Try\n            Console.WriteLine( &quot;{0}&quot; &amp; vbCrLf, _\n                Left.CompareTo( Right ) )\n        Catch ex As Exception\n            Console.WriteLine( &quot;{0}&quot; &amp; vbCrLf, _\n                GetExceptionType( ex ) )\n        End Try\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Decimal.Equals( Object ) &quot; &amp; _\n            &quot;and &quot; &amp; vbCrLf &amp; &quot;Decimal.CompareTo( Object ) &quot; &amp; _\n            &quot;methods generates the &quot; &amp; vbCrLf &amp; _\n            &quot;following output. It creates several different &quot; &amp; _\n            &quot;Decimal &quot; &amp; vbCrLf &amp; &quot;values and compares them &quot; &amp; _\n            &quot;with the following reference value.&quot; &amp; vbCrLf )\n\n        &#39; Create a reference Decimal value.\n        Dim Left as New Decimal( 987.654 )\n\n        Console.WriteLine( &quot;{0,-46}{1}&quot; &amp; vbCrLf, _\n            &quot;Left: Decimal( 987.654 )&quot;, Left )\n\n        &#39; Create objects to compare with the reference.\n        CompDecimalToObject( Left, New Decimal( 9.8765400E+2 ), _\n            &quot;Decimal( 9.8765400E+2 )&quot; )\n        CompDecimalToObject( Left, 987.6541D, &quot;987.6541D&quot; )\n        CompDecimalToObject( Left, 987.6539D, &quot;987.6539D&quot; )\n        CompDecimalToObject( Left, _\n            New Decimal( 987654000, 0, 0, false, 6 ), _\n            &quot;Decimal( 987654000, 0, 0, false, 6 )&quot; )\n        CompDecimalToObject( Left, 9.8765400E+2, _\n            &quot;Double 9.8765400E+2&quot; )\n        CompDecimalToObject( Left, &quot;987.654&quot;, _\n            &quot;String &quot;&quot;987.654&quot;&quot;&quot; )\n    End Sub\nEnd Module \n\n&#39; This example of the Decimal.Equals( Object ) and\n&#39; Decimal.CompareTo( Object ) methods generates the\n&#39; following output. It creates several different Decimal\n&#39; values and compares them with the following reference value.\n&#39; \n&#39; Left: Decimal( 987.654 )                      987.654\n&#39; \n&#39; Object: Decimal( 9.8765400E+2 )               987.654\n&#39; Left.Equals( Object )                         True\n&#39; Left.CompareTo( Object )                      0\n&#39; \n&#39; Object: 987.6541D                             987.6541\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      -1\n&#39; \n&#39; Object: 987.6539D                             987.6539\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      1\n&#39; \n&#39; Object: Decimal( 987654000, 0, 0, false, 6 )  987.654000\n&#39; Left.Equals( Object )                         True\n&#39; Left.CompareTo( Object )                      0\n&#39; \n&#39; Object: Double 9.8765400E+2                   987.654\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      ArgumentException\n&#39; \n&#39; Object: String &quot;987.654&quot;                      987.654\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      ArgumentException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Divide_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Divide_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Divide(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Divides two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Divide (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dividend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The divisor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of dividing <code>d1</code> by <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></div>\r\n                  </div>\r\n                  <p><code>d2</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value (that is, the quotient) is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls the Divide method to divide a range of values by 22.1.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Divide#1\">Module Example\n   Public Sub Main()\n      &#39; Divide a series of numbers by 22.1\n      Dim dividend As Decimal = 1230.0d\n      Dim divisor As Decimal = 22.1d\n      For ctr As Integer = 0 To 10\n         Console.WriteLine(&quot;{0:N1} / {1:N1} = {2:N4}&quot;, dividend, divisor,\n                           Decimal.Divide(dividend, divisor))\n         dividend += .1d \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       1,230.0 / 22.1 = 55.6561\n&#39;       1,230.1 / 22.1 = 55.6606\n&#39;       1,230.2 / 22.1 = 55.6652\n&#39;       1,230.3 / 22.1 = 55.6697\n&#39;       1,230.4 / 22.1 = 55.6742\n&#39;       1,230.5 / 22.1 = 55.6787\n&#39;       1,230.6 / 22.1 = 55.6833\n&#39;       1,230.7 / 22.1 = 55.6878\n&#39;       1,230.8 / 22.1 = 55.6923\n&#39;       1,230.9 / 22.1 = 55.6968\n&#39;       1,231.0 / 22.1 = 55.7014\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Divide#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Divide a series of numbers by 22.1\n      Decimal dividend = 1230.0m;\n      Decimal divisor = 22.1m;\n      for (int ctr = 0; ctr &lt;= 10; ctr++) {\n         Console.WriteLine(&quot;{0:N1} / {1:N1} = {2:N4}&quot;, dividend, divisor,\n                           Decimal.Divide(dividend, divisor));\n         dividend += .1m; \n      }\n   }\n}\n// The example displays the following output:\n//       1,230.0 / 22.1 = 55.6561\n//       1,230.1 / 22.1 = 55.6606\n//       1,230.2 / 22.1 = 55.6652\n//       1,230.3 / 22.1 = 55.6697\n//       1,230.4 / 22.1 = 55.6742\n//       1,230.5 / 22.1 = 55.6787\n//       1,230.6 / 22.1 = 55.6833\n//       1,230.7 / 22.1 = 55.6878\n//       1,230.8 / 22.1 = 55.6923\n//       1,230.9 / 22.1 = 55.6968\n//       1,231.0 / 22.1 = 55.7014\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Equals_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object represent the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare to this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is equal to this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, and performs slightly better than <a class=\"xref\" href=\"system.decimal#System_Decimal_Equals_\" data-linktype=\"relative-path\">Equals</a> because it does not have to convert the <code>value</code> parameter to an object.  </p>\n<p> If <code>value</code> has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.  </p>\n<p> For example, suppose the instance type is <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and the parameter type is <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> object, then generates a <a class=\"xref\" href=\"system.int32#System_Int32_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method to compare the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> instance and parameter representation.  </p>\n<p> Consult your programming language&#39;s documentation to determine whether its compiler performs implicit widening conversions on numeric types.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Decimal_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether this instance and a specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> represent the same type and value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare with this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>value</code> is a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> and equal to this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares several <code>Decimal</code> and other objects to a reference <code>Decimal</code> value using the <code>Equals</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Compare_Equals#1\">// Example of the Decimal::CompareTo and Decimal::Equals instance \n// methods.\nusing namespace System;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Compare the Decimal to the Object parameters, \n// and display the Object parameters with the results.\nvoid CompDecimalToObject( Decimal Left, Object^ Right, String^ RightText )\n{\n   Console::WriteLine( &quot;{0,-46}{1}&quot;, String::Concat( &quot;Object: &quot;, RightText ), Right );\n   Console::WriteLine( &quot;{0,-46}{1}&quot;, &quot;Left.Equals( Object )&quot;, Left.Equals( Right ) );\n   Console::Write( &quot;{0,-46}&quot;, &quot;Left.CompareTo( Object )&quot; );\n   try\n   {\n      \n      // Catch the exception if CompareTo( ) throws one.\n      Console::WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;{0}<br>&quot;, GetExceptionType( ex ) );\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal::Equals( Object* ) and <br>&quot;\n   &quot;Decimal::CompareTo( Object* ) methods generates the <br>&quot;\n   &quot;following output. It creates several different &quot;\n   &quot;Decimal <br>values and compares them with the following &quot;\n   &quot;reference value.<br>&quot; );\n   \n   // Create a reference Decimal value.\n   Decimal Left = Decimal(987.654);\n   Console::WriteLine( &quot;{0,-46}{1}<br>&quot;, &quot;Left: Decimal( 987.654 )&quot;, Left );\n   \n   // Create objects to compare with the reference.\n   CompDecimalToObject( Left, Decimal(9.8765400E+2), &quot;Decimal( 9.8765400E+2 )&quot; );\n   CompDecimalToObject( Left, Decimal::Parse( &quot;987.6541&quot; ), &quot;Decimal::Parse( \\&quot;987.6541\\&quot; )&quot; );\n   CompDecimalToObject( Left, Decimal::Parse( &quot;987.6539&quot; ), &quot;Decimal::Parse( \\&quot;987.6539\\&quot; )&quot; );\n   CompDecimalToObject( Left, Decimal(987654000,0,0,false,6), &quot;Decimal( 987654000, 0, 0, false, 6 )&quot; );\n   CompDecimalToObject( Left, 9.8765400E+2, &quot;Double 9.8765400E+2&quot; );\n   CompDecimalToObject( Left, &quot;987.654&quot;, &quot;String \\&quot;987.654\\&quot;&quot; );\n}\n\n/*\nThis example of the Decimal::Equals( Object* ) and\nDecimal::CompareTo( Object* ) methods generates the\nfollowing output. It creates several different Decimal\nvalues and compares them with the following reference value.\n\nLeft: Decimal( 987.654 )                      987.654\n\nObject: Decimal( 9.8765400E+2 )               987.654\nLeft.Equals( Object )                         True\nLeft.CompareTo( Object )                      0\n\nObject: Decimal::Parse( &quot;987.6541&quot; )          987.6541\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      -1\n\nObject: Decimal::Parse( &quot;987.6539&quot; )          987.6539\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      1\n\nObject: Decimal( 987654000, 0, 0, false, 6 )  987.654000\nLeft.Equals( Object )                         True\nLeft.CompareTo( Object )                      0\n\nObject: Double 9.8765400E+2                   987.654\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      ArgumentException\n\nObject: String &quot;987.654&quot;                      987.654\nLeft.Equals( Object )                         False\nLeft.CompareTo( Object )                      ArgumentException\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Compare_Equals#1\">// Example of the decimal.CompareTo and decimal.Equals instance \n// methods.\nusing System;\n\nclass DecCompToEqualsObjDemo\n{\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    // Compare the decimal to the object parameters, \n    // and display the object parameters with the results.\n    public static void CompDecimalToObject( decimal Left, \n        object Right, string RightText )\n    {\n\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;object: &quot;+RightText, \n            Right );\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;Left.Equals( object )&quot;, \n            Left.Equals( Right ) );\n        Console.Write( &quot;{0,-46}&quot;, &quot;Left.CompareTo( object )&quot; );\n\n        try\n        {\n            // Catch the exception if CompareTo( ) throws one.\n            Console.WriteLine( &quot;{0}<br>&quot;, Left.CompareTo( Right ) );\n        }\n        catch( Exception ex )\n        {\n            Console.WriteLine( &quot;{0}<br>&quot;, GetExceptionType( ex ) );\n        }\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( \n            &quot;This example of the decimal.Equals( object ) and <br>&quot; +\n            &quot;decimal.CompareTo( object ) methods generates the <br>&quot; +\n            &quot;following output. It creates several different &quot; +\n            &quot;decimal <br>values and compares them with the following &quot; +\n            &quot;reference value.<br>&quot; );\n\n        // Create a reference decimal value.\n        decimal Left = new decimal( 987.654 );\n\n        Console.WriteLine( &quot;{0,-46}{1}<br>&quot;, \n            &quot;Left: decimal( 987.654 )&quot;, Left );\n\n        // Create objects to compare with the reference.\n        CompDecimalToObject( Left, new decimal( 9.8765400E+2 ), \n            &quot;decimal( 9.8765400E+2 )&quot; );\n        CompDecimalToObject( Left, 987.6541M, &quot;987.6541D&quot; );\n        CompDecimalToObject( Left, 987.6539M, &quot;987.6539D&quot; );\n        CompDecimalToObject( Left, \n            new decimal( 987654000, 0, 0, false, 6 ), \n            &quot;decimal( 987654000, 0, 0, false, 6 )&quot; );\n        CompDecimalToObject( Left, 9.8765400E+2, \n            &quot;Double 9.8765400E+2&quot; );\n        CompDecimalToObject( Left, &quot;987.654&quot;, &quot;String \\&quot;987.654\\&quot;&quot; );\n    }\n}\n\n/*\nThis example of the decimal.Equals( object ) and\ndecimal.CompareTo( object ) methods generates the\nfollowing output. It creates several different decimal\nvalues and compares them with the following reference value.\n\nLeft: decimal( 987.654 )                      987.654\n\nobject: decimal( 9.8765400E+2 )               987.654\nLeft.Equals( object )                         True\nLeft.CompareTo( object )                      0\n\nobject: 987.6541D                             987.6541\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      -1\n\nobject: 987.6539D                             987.6539\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      1\n\nobject: decimal( 987654000, 0, 0, false, 6 )  987.654000\nLeft.Equals( object )                         True\nLeft.CompareTo( object )                      0\n\nobject: Double 9.8765400E+2                   987.654\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      ArgumentException\n\nobject: String &quot;987.654&quot;                      987.654\nLeft.Equals( object )                         False\nLeft.CompareTo( object )                      ArgumentException\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Compare_Equals#1\">&#39; Example of the Decimal.CompareTo and Decimal.Equals instance methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecCompToEqualsObjDemo\n    \n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Compare the Decimal to the Object parameters, \n    &#39; and display the Object parameters with the results.\n    Sub CompDecimalToObject( Left as Decimal, Right as Object, _\n        RightText as String )\n\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;Object: &quot; &amp; RightText, _\n            Right )\n        Console.WriteLine( &quot;{0,-46}{1}&quot;, &quot;Left.Equals( Object )&quot;, _\n            Left.Equals( Right ) )\n        Console.Write( &quot;{0,-46}&quot;, &quot;Left.CompareTo( Object )&quot; )\n\n        &#39; Catch the exception if CompareTo( ) throws one.\n        Try\n            Console.WriteLine( &quot;{0}&quot; &amp; vbCrLf, _\n                Left.CompareTo( Right ) )\n        Catch ex As Exception\n            Console.WriteLine( &quot;{0}&quot; &amp; vbCrLf, _\n                GetExceptionType( ex ) )\n        End Try\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Decimal.Equals( Object ) &quot; &amp; _\n            &quot;and &quot; &amp; vbCrLf &amp; &quot;Decimal.CompareTo( Object ) &quot; &amp; _\n            &quot;methods generates the &quot; &amp; vbCrLf &amp; _\n            &quot;following output. It creates several different &quot; &amp; _\n            &quot;Decimal &quot; &amp; vbCrLf &amp; &quot;values and compares them &quot; &amp; _\n            &quot;with the following reference value.&quot; &amp; vbCrLf )\n\n        &#39; Create a reference Decimal value.\n        Dim Left as New Decimal( 987.654 )\n\n        Console.WriteLine( &quot;{0,-46}{1}&quot; &amp; vbCrLf, _\n            &quot;Left: Decimal( 987.654 )&quot;, Left )\n\n        &#39; Create objects to compare with the reference.\n        CompDecimalToObject( Left, New Decimal( 9.8765400E+2 ), _\n            &quot;Decimal( 9.8765400E+2 )&quot; )\n        CompDecimalToObject( Left, 987.6541D, &quot;987.6541D&quot; )\n        CompDecimalToObject( Left, 987.6539D, &quot;987.6539D&quot; )\n        CompDecimalToObject( Left, _\n            New Decimal( 987654000, 0, 0, false, 6 ), _\n            &quot;Decimal( 987654000, 0, 0, false, 6 )&quot; )\n        CompDecimalToObject( Left, 9.8765400E+2, _\n            &quot;Double 9.8765400E+2&quot; )\n        CompDecimalToObject( Left, &quot;987.654&quot;, _\n            &quot;String &quot;&quot;987.654&quot;&quot;&quot; )\n    End Sub\nEnd Module \n\n&#39; This example of the Decimal.Equals( Object ) and\n&#39; Decimal.CompareTo( Object ) methods generates the\n&#39; following output. It creates several different Decimal\n&#39; values and compares them with the following reference value.\n&#39; \n&#39; Left: Decimal( 987.654 )                      987.654\n&#39; \n&#39; Object: Decimal( 9.8765400E+2 )               987.654\n&#39; Left.Equals( Object )                         True\n&#39; Left.CompareTo( Object )                      0\n&#39; \n&#39; Object: 987.6541D                             987.6541\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      -1\n&#39; \n&#39; Object: 987.6539D                             987.6539\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      1\n&#39; \n&#39; Object: Decimal( 987654000, 0, 0, false, 6 )  987.654000\n&#39; Left.Equals( Object )                         True\n&#39; Left.CompareTo( Object )                      0\n&#39; \n&#39; Object: Double 9.8765400E+2                   987.654\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      ArgumentException\n&#39; \n&#39; Object: String &quot;987.654&quot;                      987.654\n&#39; Left.Equals( Object )                         False\n&#39; Left.CompareTo( Object )                      ArgumentException\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Equals_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether two specified instances of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> represent the same value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> and <code>d2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example compares several <code>Decimal</code> values to a reference <code>Decimal</code> value using the static <code>Equals</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Compare_Equals#2\">// Example of the Decimal::Compare and static Decimal::Equals methods.\nusing namespace System;\nconst __wchar_t * protoFmt = L&quot;{0,-45}{1}&quot;;\n\n// Compare Decimal parameters, and display them with the results.\nvoid CompareDecimals( Decimal Left, Decimal Right, String^ RightText )\n{\n   String^ dataFmt = gcnew String( protoFmt );\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, String::Concat( &quot;Right: &quot;, RightText ), Right );\n   Console::WriteLine( dataFmt, &quot;Decimal::Equals( Left, Right )&quot;, Decimal::Equals( Left, Right ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Compare( Left, Right )&quot;, Decimal::Compare( Left, Right ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the Decimal::Equals( Decimal, Decimal &quot;\n   &quot;) and <br>Decimal::Compare( Decimal, Decimal ) &quot;\n   &quot;methods generates the <br>following output. It creates &quot;\n   &quot;several different Decimal <br>values and compares them &quot;\n   &quot;with the following reference value.<br>&quot; );\n   \n   // Create a reference Decimal value.\n   Decimal Left = Decimal(123.456);\n   Console::WriteLine( gcnew String( protoFmt ), &quot;Left: Decimal( 123.456 )&quot;, Left );\n   \n   // Create Decimal values to compare with the reference.\n   CompareDecimals( Left, Decimal(1.2345600E+2), &quot;Decimal( 1.2345600E+2 )&quot; );\n   CompareDecimals( Left, Decimal::Parse( &quot;123.4561&quot; ), &quot;Decimal::Parse( \\&quot;123.4561\\&quot; )&quot; );\n   CompareDecimals( Left, Decimal::Parse( &quot;123.4559&quot; ), &quot;Decimal::Parse( \\&quot;123.4559\\&quot; )&quot; );\n   CompareDecimals( Left, Decimal::Parse( &quot;123.456000&quot; ), &quot;Decimal::Parse( \\&quot;123.456000\\&quot; )&quot; );\n   CompareDecimals( Left, Decimal(123456000,0,0,false,6), &quot;Decimal( 123456000, 0, 0, false, 6 )&quot; );\n}\n\n/*\nThis example of the Decimal::Equals( Decimal, Decimal ) and\nDecimal::Compare( Decimal, Decimal ) methods generates the\nfollowing output. It creates several different Decimal\nvalues and compares them with the following reference value.\n\nLeft: Decimal( 123.456 )                     123.456\n\nRight: Decimal( 1.2345600E+2 )               123.456\nDecimal::Equals( Left, Right )               True\nDecimal::Compare( Left, Right )              0\n\nRight: Decimal::Parse( &quot;123.4561&quot; )          123.4561\nDecimal::Equals( Left, Right )               False\nDecimal::Compare( Left, Right )              -1\n\nRight: Decimal::Parse( &quot;123.4559&quot; )          123.4559\nDecimal::Equals( Left, Right )               False\nDecimal::Compare( Left, Right )              1\n\nRight: Decimal::Parse( &quot;123.456000&quot; )        123.456000\nDecimal::Equals( Left, Right )               True\nDecimal::Compare( Left, Right )              0\n\nRight: Decimal( 123456000, 0, 0, false, 6 )  123.456000\nDecimal::Equals( Left, Right )               True\nDecimal::Compare( Left, Right )              0\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Compare_Equals#2\">// Example of the decimal.Compare and static decimal.Equals methods.\nusing System;\n\nclass DecCompareEqualsDemo\n{\n    const string dataFmt = &quot;{0,-45}{1}&quot;;\n\n    // Compare decimal parameters, and display them with the results.\n    public static void CompareDecimals( decimal Left, decimal Right, \n        string RightText )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;Right: &quot;+RightText, Right );\n        Console.WriteLine( dataFmt, &quot;decimal.Equals( Left, Right )&quot;, \n            Decimal.Equals( Left, Right ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Compare( Left, Right )&quot;, \n            Decimal.Compare( Left, Right ) );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;decimal.Equals( decimal, decimal ) and <br>&quot; +\n            &quot;decimal.Compare( decimal, decimal ) methods &quot; +\n            &quot;generates the <br>following output. It creates several &quot; +\n            &quot;different decimal <br>values and compares them with &quot; +\n            &quot;the following reference value.<br>&quot; );\n\n        // Create a reference decimal value.\n        decimal Left = new decimal( 123.456 );\n\n        Console.WriteLine( dataFmt, &quot;Left: decimal( 123.456 )&quot;, \n            Left );\n\n        // Create decimal values to compare with the reference.\n        CompareDecimals( Left, new decimal( 1.2345600E+2 ), \n            &quot;decimal( 1.2345600E+2 )&quot; );\n        CompareDecimals( Left, 123.4561M, &quot;123.4561M&quot; );\n        CompareDecimals( Left, 123.4559M, &quot;123.4559M&quot; );\n        CompareDecimals( Left, 123.456000M, &quot;123.456000M&quot; );\n        CompareDecimals( Left, \n            new decimal( 123456000, 0, 0, false, 6 ), \n            &quot;decimal( 123456000, 0, 0, false, 6 )&quot; );\n    }\n}\n\n/*\nThis example of the decimal.Equals( decimal, decimal ) and\ndecimal.Compare( decimal, decimal ) methods generates the\nfollowing output. It creates several different decimal\nvalues and compares them with the following reference value.\n\nLeft: decimal( 123.456 )                     123.456\n\nRight: decimal( 1.2345600E+2 )               123.456\ndecimal.Equals( Left, Right )                True\ndecimal.Compare( Left, Right )               0\n\nRight: 123.4561M                             123.4561\ndecimal.Equals( Left, Right )                False\ndecimal.Compare( Left, Right )               -1\n\nRight: 123.4559M                             123.4559\ndecimal.Equals( Left, Right )                False\ndecimal.Compare( Left, Right )               1\n\nRight: 123.456000M                           123.456000\ndecimal.Equals( Left, Right )                True\ndecimal.Compare( Left, Right )               0\n\nRight: decimal( 123456000, 0, 0, false, 6 )  123.456000\ndecimal.Equals( Left, Right )                True\ndecimal.Compare( Left, Right )               0\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Compare_Equals#2\">&#39; Example of the Decimal.Compare and static Decimal.Equals methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecCompareEqualsDemo\n    \n    Const dataFmt As String = &quot;{0,-45}{1}&quot;\n\n    &#39; Compare Decimal parameters, and display them with the results.\n    Sub CompareDecimals( Left as Decimal, Right as Decimal, _\n        RightText as String )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Right: &quot; &amp; RightText, Right )\n        Console.WriteLine( dataFmt, &quot;Decimal.Equals( Left, Right )&quot;, _\n            Decimal.Equals( Left, Right ) )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Compare( Left, Right )&quot;, _\n            Decimal.Compare( Left, Right ) )\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( _\n            &quot;This example of the Decimal.Equals( Decimal, &quot; &amp; _\n            &quot;Decimal ) and &quot; &amp; vbCrLf &amp; &quot;Decimal.Compare( &quot; &amp; _\n            &quot;Decimal, Decimal ) methods generates the &quot; &amp; vbCrLf &amp; _\n            &quot;following output. It creates several different &quot; &amp; _\n            &quot;Decimal &quot; &amp; vbCrLf &amp; &quot;values and compares them &quot; &amp; _\n            &quot;with the following reference value.&quot; &amp; vbCrLf )\n\n        &#39; Create a reference Decimal value.\n        Dim Left as New Decimal( 123.456 )\n\n        Console.WriteLine( dataFmt, &quot;Left: Decimal( 123.456 )&quot;, Left )\n\n        &#39; Create Decimal values to compare with the reference.\n        CompareDecimals( Left, New Decimal( 1.2345600E+2 ), _\n            &quot;Decimal( 1.2345600E+2 )&quot; )\n        CompareDecimals( Left, 123.4561D, &quot;123.4561D&quot; )\n        CompareDecimals( Left, 123.4559D, &quot;123.4559D&quot; )\n        CompareDecimals( Left, 123.456000D, &quot;123.456000D&quot; )\n        CompareDecimals( Left, _\n            New Decimal( 123456000, 0, 0, false, 6 ), _\n            &quot;Decimal( 123456000, 0, 0, false, 6 )&quot; )\n    End Sub \nEnd Module \n\n&#39; This example of the Decimal.Equals( Decimal, Decimal ) and\n&#39; Decimal.Compare( Decimal, Decimal ) methods generates the\n&#39; following output. It creates several different Decimal\n&#39; values and compares them with the following reference value.\n&#39; \n&#39; Left: Decimal( 123.456 )                     123.456\n&#39; \n&#39; Right: Decimal( 1.2345600E+2 )               123.456\n&#39; Decimal.Equals( Left, Right )                True\n&#39; Decimal.Compare( Left, Right )               0\n&#39; \n&#39; Right: 123.4561D                             123.4561\n&#39; Decimal.Equals( Left, Right )                False\n&#39; Decimal.Compare( Left, Right )               -1\n&#39; \n&#39; Right: 123.4559D                             123.4559\n&#39; Decimal.Equals( Left, Right )                False\n&#39; Decimal.Compare( Left, Right )               1\n&#39; \n&#39; Right: 123.456000D                           123.456\n&#39; Decimal.Equals( Left, Right )                True\n&#39; Decimal.Compare( Left, Right )               0\n&#39; \n&#39; Right: Decimal( 123456000, 0, 0, false, 6 )  123.456000\n&#39; Decimal.Equals( Left, Right )                True\n&#39; Decimal.Compare( Left, Right )               0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Floor_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Floor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Floor(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Rounds a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number to the closest integer toward negative infinity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Floor (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to round.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>If <code>d</code> has a fractional part, the next whole <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number toward negative infinity that is less than <code>d</code>.  </p>\n<p> -or-  </p>\n<p> If <code>d</code> doesn&#39;t have a fractional part, <code>d</code> is returned unchanged. Note that the method returns an integral value of type <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of this method follows IEEE Standard 754, Section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if <code>d</code> is positive, any fractional component is truncated. If <code>d</code> is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <a class=\"xref\" href=\"system.decimal#System_Decimal_Ceiling_\" data-linktype=\"relative-path\">Ceiling</a> method, which supports rounding toward positive infinity.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the Floor method and contrasts it with the <a class=\"xref\" href=\"system.decimal#System_Decimal_Ceiling_\" data-linktype=\"relative-path\">Ceiling</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Ceiling#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      decimal[] values = {12.6m, 12.1m, 9.5m, 8.16m, .1m, -.1m,  -1.1m, \n                          -1.9m, -3.9m};\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}<br>&quot;, \n                        &quot;Value&quot;, &quot;Ceiling&quot;, &quot;Floor&quot;);\n      foreach (decimal value in values)\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}&quot;, value,\n                        Decimal.Ceiling(value), Decimal.Floor(value));\n\n   }\n}\n// The example displays the following output:\n//       Value       Ceiling      Floor\n//       \n//       12.6             13         12\n//       12.1             13         12\n//       9.5              10          9\n//       8.16              9          8\n//       0.1               1          0\n//       -0.1              0         -1\n//       -1.1             -1         -2\n//       -1.9             -1         -2\n//       -3.9             -3         -4\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ceiling#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = {12.6d, 12.1d, 9.5d, 8.16d, .1d, -.1d,  \n                                 -1.1d, -1.9d, -3.9d}\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}&quot;, \n                        &quot;Value&quot;, &quot;Ceiling&quot;, &quot;Floor&quot;)\n      Console.WriteLine()\n      For Each value As Decimal In values\n      Console.WriteLine(&quot;{0,-8} {1,10} {2,10}&quot;, value,\n                        Decimal.Ceiling(value), Decimal.Floor(value))\n      Next                                     \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value       Ceiling      Floor\n&#39;       \n&#39;       12.6             13         12\n&#39;       12.1             13         12\n&#39;       9.5              10          9\n&#39;       8.16              9          8\n&#39;       0.1               1          0\n&#39;       -0.1              0         -1\n&#39;       -1.1             -1         -2\n&#39;       -1.9             -1         -2\n&#39;       -3.9             -3         -4      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_FromOACurrency_System_Int64_\">\r\n    \r\n            <a id=\"System_Decimal_FromOACurrency_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FromOACurrency(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal FromOACurrency (long cy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An OLE Automation Currency value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> that contains the equivalent of <code>cy</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <code>FromOACurrency</code> method to convert <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> fields that contain OLE Automation Currency values to the equivalent <code>Decimal</code> numbers.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.OACurrency#2\">// Example of the Decimal::FromOACurrency method. \nusing namespace System;\n#define dataFmt &quot;{0,21}{1,25}&quot;\n\n// Display the Decimal::FromOACurrency parameter and Decimal result.\nvoid ShowDecimalFromOACurrency( __int64 Argument )\n{\n   Decimal decCurrency = Decimal::FromOACurrency( Argument );\n   Console::WriteLine( dataFmt, Argument, decCurrency );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Decimal::FromOACurrency( ) method generates <br>the &quot;\n   &quot;following output. It displays the OLE Automation &quot;\n   &quot;Currency <br>value as an __int64 and the result as a &quot;\n   &quot;Decimal.<br>&quot; );\n   Console::WriteLine( dataFmt, &quot;OA Currency&quot;, &quot;Decimal Value&quot; );\n   Console::WriteLine( dataFmt, &quot;-----------&quot;, &quot;-------------&quot; );\n   \n   // Convert OLE Automation Currency values to Decimal objects.\n   ShowDecimalFromOACurrency( 0L );\n   ShowDecimalFromOACurrency( 1L );\n   ShowDecimalFromOACurrency( 100000L );\n   ShowDecimalFromOACurrency( 100000000000L );\n   ShowDecimalFromOACurrency( 1000000000000000000L );\n   ShowDecimalFromOACurrency( 1000000000000000001L );\n   ShowDecimalFromOACurrency( Int64::MaxValue );\n   ShowDecimalFromOACurrency( Int64::MinValue );\n   ShowDecimalFromOACurrency( 123456789L );\n   ShowDecimalFromOACurrency( 1234567890000L );\n   ShowDecimalFromOACurrency( 1234567890987654321 );\n   ShowDecimalFromOACurrency( 4294967295L );\n}\n\n/*\nThis example of the Decimal::FromOACurrency( ) method generates\nthe following output. It displays the OLE Automation Currency\nvalue as an __int64 and the result as a Decimal.\n\n          OA Currency            Decimal Value\n          -----------            -------------\n                    0                        0\n                    1                   0.0001\n               100000                       10\n         100000000000                 10000000\n  1000000000000000000          100000000000000\n  1000000000000000001     100000000000000.0001\n  9223372036854775807     922337203685477.5807\n -9223372036854775808    -922337203685477.5808\n            123456789               12345.6789\n        1234567890000                123456789\n  1234567890987654321     123456789098765.4321\n           4294967295              429496.7295\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.OACurrency#2\">// Example of the decimal.FromOACurrency method. \nusing System;\n\nclass DecimalFromOACurrencyDemo\n{\n    const string dataFmt = &quot;{0,21}{1,25}&quot;;\n\n    // Display the decimal.FromOACurrency parameter and decimal result.\n    public static void ShowDecimalFromOACurrency( long Argument )\n    {\n        decimal decCurrency = decimal.FromOACurrency( Argument );\n\n        Console.WriteLine( dataFmt, Argument, decCurrency );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;decimal.FromOACurrency( ) method generates <br>the &quot; +\n            &quot;following output. It displays the OLE Automation &quot; +\n            &quot;Currency <br>value as a long and the result as a &quot; +\n            &quot;decimal.<br>&quot; );\n        Console.WriteLine( dataFmt, &quot;OA Currency&quot;, &quot;Decimal Value&quot; );\n        Console.WriteLine( dataFmt, &quot;-----------&quot;, &quot;-------------&quot; );\n\n        // Convert OLE Automation Currency values to decimal objects.\n        ShowDecimalFromOACurrency( 0L );\n        ShowDecimalFromOACurrency( 1L );\n        ShowDecimalFromOACurrency( 100000L );\n        ShowDecimalFromOACurrency( 100000000000L );\n        ShowDecimalFromOACurrency( 1000000000000000000L );\n        ShowDecimalFromOACurrency( 1000000000000000001L );\n        ShowDecimalFromOACurrency( long.MaxValue );\n        ShowDecimalFromOACurrency( long.MinValue );\n        ShowDecimalFromOACurrency( 123456789L );\n        ShowDecimalFromOACurrency( 1234567890000L );\n        ShowDecimalFromOACurrency( 1234567890987654321 );\n        ShowDecimalFromOACurrency( 4294967295L );\n    }\n}\n\n/*\nThis example of the decimal.FromOACurrency( ) method generates\nthe following output. It displays the OLE Automation Currency\nvalue as a long and the result as a decimal.\n\n          OA Currency            Decimal Value\n          -----------            -------------\n                    0                        0\n                    1                   0.0001\n               100000                       10\n         100000000000                 10000000\n  1000000000000000000          100000000000000\n  1000000000000000001     100000000000000.0001\n  9223372036854775807     922337203685477.5807\n -9223372036854775808    -922337203685477.5808\n            123456789               12345.6789\n        1234567890000                123456789\n  1234567890987654321     123456789098765.4321\n           4294967295              429496.7295\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.OACurrency#2\">&#39; Example of the Decimal.FromOACurrency method. \nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFromOACurrencyDemo\n    \n    Const dataFmt As String = &quot;{0,21}{1,25}&quot;\n\n    &#39; Display the Decimal.FromOACurrency parameter and Decimal result.\n    Sub ShowDecimalFromOACurrency( Argument As Long )\n\n        Dim decCurrency As Decimal = _\n            Decimal.FromOACurrency( Argument )\n\n        Console.WriteLine( dataFmt, Argument, decCurrency )\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;Decimal.FromOACurrency( ) method generates &quot; &amp; vbCrLf &amp; _\n            &quot;the following output. It displays the OLE Automation &quot; &amp; _\n            &quot;Currency &quot; &amp; vbCrLf &amp; &quot;value as a Long and the &quot; &amp; _\n            &quot;result as a Decimal.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;OA Currency&quot;, &quot;Decimal Value&quot; )\n        Console.WriteLine( dataFmt, &quot;-----------&quot;, &quot;-------------&quot; )\n\n        &#39; Convert OLE Automation Currency values to Decimal objects.\n        ShowDecimalFromOACurrency( 0L )\n        ShowDecimalFromOACurrency( 1L )\n        ShowDecimalFromOACurrency( 100000L )\n        ShowDecimalFromOACurrency( 100000000000L )\n        ShowDecimalFromOACurrency( 1000000000000000000L )\n        ShowDecimalFromOACurrency( 1000000000000000001L )\n        ShowDecimalFromOACurrency( Long.MaxValue )\n        ShowDecimalFromOACurrency( Long.MinValue )\n        ShowDecimalFromOACurrency( 123456789L )\n        ShowDecimalFromOACurrency( 1234567890000L )\n        ShowDecimalFromOACurrency( 1234567890987654321 )\n        ShowDecimalFromOACurrency( 4294967295L ) \n    End Sub\nEnd Module \n\n&#39; This example of the Decimal.FromOACurrency( ) method generates\n&#39; the following output. It displays the OLE Automation Currency\n&#39; value as a Long and the result as a Decimal.\n&#39; \n&#39;           OA Currency            Decimal Value\n&#39;           -----------            -------------\n&#39;                     0                        0\n&#39;                     1                   0.0001\n&#39;                100000                       10\n&#39;          100000000000                 10000000\n&#39;   1000000000000000000          100000000000000\n&#39;   1000000000000000001     100000000000000.0001\n&#39;   9223372036854775807     922337203685477.5807\n&#39;  -9223372036854775808    -922337203685477.5808\n&#39;             123456789               12345.6789\n&#39;         1234567890000                123456789\n&#39;   1234567890987654321     123456789098765.4321\n&#39;            4294967295              429496.7295\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_GetBits_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_GetBits_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBits(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of a specified instance of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to its equivalent binary representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int[] GetBits (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>[]</div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer array with four elements that contain the binary representation of <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The binary representation of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28.  </p>\n<p> The return value is a four-element array of 32-bit signed integers.  </p>\n<p> The first, second, and third elements of the returned array contain the low, middle, and high 32 bits of the 96-bit integer number.  </p>\n<p> The fourth element of the returned array contains the scale factor and sign. It consists of the following parts:  </p>\n<p> Bits 0 to 15, the lower word, are unused and must be zero.  </p>\n<p> Bits 16 to 23 must contain an exponent between 0 and 28, which indicates the power of 10 to divide the integer number.  </p>\n<p> Bits 24 to 30 are unused and must be zero.  </p>\n<p> Bit 31 contains the sign: 0 mean positive, and 1 means negative.  </p>\n<p> Note that the bit representation differentiates between negative and positive zero. These values are treated as being equal in all operations.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <code>GetBits</code> method to convert several <code>Decimal</code> values to their equivalent binary representations. It then displays the decimal values and the hexadecimal value of the elements in the array returned by the GetBits method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Get_Bits_Hash_Type#2\">using namespace System;\n\nint main()\n{\n   // Define an array of Decimal values.\n   array&lt;Decimal&gt;^ values = gcnew array&lt;Decimal&gt;  { Decimal::One, \n                                  Decimal::Parse(&quot;100000000000000&quot;), \n                                  Decimal::Parse(&quot;10000000000000000000000000000&quot;),\n                                  Decimal::Parse(&quot;100000000000000.00000000000000&quot;), \n                                  Decimal::Parse(&quot;1.0000000000000000000000000000&quot;),\n                                  Decimal::Parse(&quot;123456789&quot;), \n                                  Decimal::Parse(&quot;0.123456789&quot;), \n                                  Decimal::Parse(&quot;0.000000000123456789&quot;), \n                                  Decimal::Parse(&quot;0.000000000000000000123456789&quot;), \n                                  Decimal::Parse(&quot;4294967295.0&quot;), \n                                  Decimal::Parse(&quot;18446744073709551615.0&quot;), \n                                  Decimal::MaxValue, Decimal::MinValue, \n                                  Decimal::Parse(&quot;-7.9228162514264337593543950335&quot;) }; \n\n   Console::WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                      &quot;Argument&quot;, &quot;Bits[3]&quot;, &quot;Bits[2]&quot;, &quot;Bits[1]&quot;, &quot;Bits[0]&quot; );\n   Console::WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                      &quot;--------&quot;, &quot;-------&quot;, &quot;-------&quot;, &quot;-------&quot;, &quot;-------&quot; );\n   \n   for each (Decimal value in values)\n   {\n      array&lt;int&gt;^ bits = Decimal::GetBits(value); \n      Console::WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                         value, bits[3], bits[2], bits[1], bits[0] );\n   }\n}\n\n/*\nThis example of the Decimal::GetBits( Decimal ) method\ngenerates the following output. It displays the argument\nas a Decimal and the result array in hexadecimal.\n\n                       Argument     Bits[3]   Bits[2]   Bits[1]   Bits[0]\n                       --------     -------   -------   -------   -------\n                              1    00000000  00000000  00000000  00000001\n                100000000000000    00000000  00000000  00005AF3  107A4000\n  10000000000000000000000000000    00000000  204FCE5E  3E250261  10000000\n 100000000000000.00000000000000    000E0000  204FCE5E  3E250261  10000000\n 1.0000000000000000000000000000    001C0000  204FCE5E  3E250261  10000000\n                      123456789    00000000  00000000  00000000  075BCD15\n                    0.123456789    00090000  00000000  00000000  075BCD15\n           0.000000000123456789    00120000  00000000  00000000  075BCD15\n  0.000000000000000000123456789    001B0000  00000000  00000000  075BCD15\n                     4294967295    00000000  00000000  00000000  FFFFFFFF\n           18446744073709551615    00000000  00000000  FFFFFFFF  FFFFFFFF\n  79228162514264337593543950335    00000000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n -79228162514264337593543950335    80000000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n-7.9228162514264337593543950335    801C0000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Get_Bits_Hash_Type#2\">using System;\n\nclass Example\n{\n   public static void Main()\n   {\n      // Define an array of Decimal values.\n      Decimal[] values = { 1M, 100000000000000M, 10000000000000000000000000000M,\n                           100000000000000.00000000000000M, 1.0000000000000000000000000000M,\n                           123456789M, 0.123456789M, 0.000000000123456789M,\n                           0.000000000000000000123456789M, 4294967295M,\n                           18446744073709551615M, Decimal.MaxValue,\n                           Decimal.MinValue, -7.9228162514264337593543950335M }; \n      \n      Console.WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                        &quot;Argument&quot;, &quot;Bits[3]&quot;, &quot;Bits[2]&quot;, &quot;Bits[1]&quot;, \n                        &quot;Bits[0]&quot; );\n      Console.WriteLine( &quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                         &quot;--------&quot;, &quot;-------&quot;, &quot;-------&quot;, &quot;-------&quot;, \n                         &quot;-------&quot; );\n\n      // Iterate each element and display its binary representation\n      foreach (var value in values) {\n        int[] bits = decimal.GetBits(value);\n        Console.WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                          value, bits[3], bits[2], bits[1], bits[0]);\n      }\n   }\n}\n// The example displays the following output:\n//                           Argument     Bits[3]   Bits[2]   Bits[1]   Bits[0]\n//                           --------     -------   -------   -------   -------\n//                                  1    00000000  00000000  00000000  00000001\n//                    100000000000000    00000000  00000000  00005AF3  107A4000\n//      10000000000000000000000000000    00000000  204FCE5E  3E250261  10000000\n//     100000000000000.00000000000000    000E0000  204FCE5E  3E250261  10000000\n//     1.0000000000000000000000000000    001C0000  204FCE5E  3E250261  10000000\n//                          123456789    00000000  00000000  00000000  075BCD15\n//                        0.123456789    00090000  00000000  00000000  075BCD15\n//               0.000000000123456789    00120000  00000000  00000000  075BCD15\n//      0.000000000000000000123456789    001B0000  00000000  00000000  075BCD15\n//                         4294967295    00000000  00000000  00000000  FFFFFFFF\n//               18446744073709551615    00000000  00000000  FFFFFFFF  FFFFFFFF\n//      79228162514264337593543950335    00000000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n//     -79228162514264337593543950335    80000000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n//    -7.9228162514264337593543950335    801C0000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Get_Bits_Hash_Type#2\">Module Example\n   Public Sub Main()\n      &#39; Define an array of decimal values.\n      Dim values() As Decimal = { 1d, 100000000000000d, \n                                  10000000000000000000000000000d,\n                                  100000000000000.00000000000000d, \n                                  1.0000000000000000000000000000d,\n                                  123456789d, 0.123456789d, \n                                  0.000000000123456789d,\n                                  0.000000000000000000123456789d, \n                                  4294967295d,\n                                  18446744073709551615d, \n                                  Decimal.MaxValue, Decimal.MinValue, \n                                  -7.9228162514264337593543950335d }\n\n      Console.WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                        &quot;Argument&quot;, &quot;Bits[3]&quot;, &quot;Bits[2]&quot;, &quot;Bits[1]&quot;, \n                        &quot;Bits[0]&quot; )\n      Console.WriteLine( &quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                         &quot;--------&quot;, &quot;-------&quot;, &quot;-------&quot;, &quot;-------&quot;, \n                         &quot;-------&quot; )\n\n      &#39; Iterate each element and display its binary representation\n      For Each value In values\n         Dim bits() As Integer = Decimal.GetBits(value)\n        Console.WriteLine(&quot;{0,31}  {1,10:X8}{2,10:X8}{3,10:X8}{4,10:X8}&quot;, \n                          value, bits(3), bits(2), bits(1), bits(0))\n\n       Next\n    End Sub\nEnd Module \n&#39; The example displays the following output:\n&#39;\n&#39;                        Argument     Bits(3)   Bits(2)   Bits(1)   Bits(0)\n&#39;                        --------     -------   -------   -------   -------\n&#39;                               1    00000000  00000000  00000000  00000001\n&#39;                 100000000000000    00000000  00000000  00005AF3  107A4000\n&#39;   10000000000000000000000000000    00000000  204FCE5E  3E250261  10000000\n&#39;  100000000000000.00000000000000    000E0000  204FCE5E  3E250261  10000000\n&#39;  1.0000000000000000000000000000    001C0000  204FCE5E  3E250261  10000000\n&#39;                       123456789    00000000  00000000  00000000  075BCD15\n&#39;                     0.123456789    00090000  00000000  00000000  075BCD15\n&#39;            0.000000000123456789    00120000  00000000  00000000  075BCD15\n&#39;   0.000000000000000000123456789    001B0000  00000000  00000000  075BCD15\n&#39;                      4294967295    00000000  00000000  00000000  FFFFFFFF\n&#39;            18446744073709551615    00000000  00000000  FFFFFFFF  FFFFFFFF\n&#39;   79228162514264337593543950335    00000000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n&#39;  -79228162514264337593543950335    80000000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n&#39; -7.9228162514264337593543950335    801C0000  FFFFFFFF  FFFFFFFF  FFFFFFFF\n</code></pre><p> The following example uses the GetBits method to retrieve the component parts of an array. It then uses this array in the call to the <a class=\"xref\" href=\"system.decimal#System_Decimal__ctor_System_Int32_System_Int32_System_Int32_System_Boolean_System_Byte_\" data-linktype=\"relative-path\">Decimal(Int32,Int32,Int32,Boolean,Byte)</a> constructor to instantiate a new <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Ctor#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal[] values = { 1234.96m, -1234.96m };\n      foreach (var value in values) {\n         int[] parts = Decimal.GetBits(value);\n         bool sign = (parts[3] &amp; 0x80000000) != 0;\n   \n         byte scale = (byte) ((parts[3] &gt;&gt; 16) &amp; 0x7F); \n         Decimal newValue = new Decimal(parts[0], parts[1], parts[2], sign, scale);\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, newValue);\n      }\n   }\n}\n// The example displays the following output:\n//       1234.96 --&gt; 1234.96\n//       -1234.96 --&gt; -1234.96\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Ctor#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 1234.96d, -1234.96d }\n      For Each value In values\n         Dim parts() = Decimal.GetBits(value)\n         Dim sign As Boolean = (parts(3) And &amp;h80000000) &lt;&gt; 0\n         Dim scale As Byte = CByte((parts(3) &gt;&gt; 16) And &amp;H7F)\n   \n         Dim newValue As New Decimal(parts(0), parts(1), parts(2), sign, scale)    \n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, newValue)\n      Next   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    1234.96 --&gt; 1234.96\n&#39;    -1234.96 --&gt; -1234.96\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_GetHashCode\">\r\n    \r\n            <a id=\"System_Decimal_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_GetTypeCode\">\r\n    \r\n            <a id=\"System_Decimal_GetTypeCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetTypeCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a> for value type <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeCode GetTypeCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a></div>\r\n                  </div>\r\n                  <p>The enumerated constant <a class=\"xref\" href=\"system.typecode\" data-linktype=\"relative-path\">TypeCode</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <code>GetTypeCode</code> method to return the type code for <code>Decimal</code> value type.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Get_Bits_Hash_Type#3\">// Example of the Decimal::GetTypeCode method. \nusing namespace System;\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Decimal::GetTypeCode( ) <br>method &quot;\n   &quot;generates the following output.<br>&quot; );\n   \n   // Create a Decimal object and get its type code.\n   Decimal aDecimal = Decimal(1.0);\n   TypeCode typCode = aDecimal.GetTypeCode();\n   Console::WriteLine( &quot;Type Code:      \\&quot;{0}\\&quot;&quot;, typCode );\n   Console::WriteLine( &quot;Numeric value:  {0}&quot;, (int)typCode );\n}\n\n/*\nThis example of the Decimal::GetTypeCode( )\nmethod generates the following output.\n\nType Code:      &quot;Decimal&quot;\nNumeric value:  15\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Get_Bits_Hash_Type#3\">// Example of the decimal.GetTypeCode method. \nusing System;\n\nclass DecimalGetTypeCodeDemo\n{\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;decimal.GetTypeCode( ) <br>method &quot; +\n            &quot;generates the following output.<br>&quot; );\n\n        // Create a decimal object and get its type code.\n        decimal aDecimal = new decimal( 1.0 );\n        TypeCode typCode = aDecimal.GetTypeCode( );\n\n        Console.WriteLine( &quot;Type Code:      \\&quot;{0}\\&quot;&quot;, typCode );\n        Console.WriteLine( &quot;Numeric value:  {0}&quot;, (int)typCode );\n    }\n}\n\n/*\nThis example of the decimal.GetTypeCode( )\nmethod generates the following output.\n\nType Code:      &quot;Decimal&quot;\nNumeric value:  15\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Get_Bits_Hash_Type#3\">&#39; Example of the Decimal.GetTypeCode method. \nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalGetTypeCodeDemo\n    \n    Sub Main( )\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;Decimal.GetTypeCode( ) &quot; &amp; vbCrLf &amp; &quot;method &quot; &amp; _\n            &quot;generates the following output.&quot; &amp; vbCrLf )\n\n        &#39; Create a Decimal object and get its type code.\n        Dim aDecimal    As Decimal  = New Decimal( 1.0 )\n        Dim typCode     As TypeCode = aDecimal.GetTypeCode( )\n\n        Console.WriteLine( &quot;Type Code:      &quot;&quot;{0}&quot;&quot;&quot;, typCode )\n        Console.WriteLine( &quot;Numeric value:  {0}&quot;, CInt( typCode ) )\n    End Sub\nEnd Module \n\n&#39; This example of the Decimal.GetTypeCode( )\n&#39; method generates the following output.\n&#39; \n&#39; Type Code:      &quot;Decimal&quot;\n&#39; Numeric value:  15\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Multiply_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Multiply(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Multiply (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The multiplicand.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The multiplier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of multiplying <code>d1</code> and <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates several pairs of <code>Decimal</code> values and calculates their products with the <code>Multiply</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Mul_Div_Rem#1\">// Example of the Decimal::Multiply, Decimal::Divide, and \n// Decimal::Remainder methods. \nusing namespace System;\n\n// Display Decimal parameters and their product, quotient, and \n// remainder.\nvoid ShowDecimalProQuoRem( Decimal Left, Decimal Right )\n{\n   String^ dataFmt = &quot;{0,-35}{1,31}&quot;;\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, &quot;Decimal Left&quot;, Left );\n   Console::WriteLine( dataFmt, &quot;Decimal Right&quot;, Right );\n   Console::WriteLine( dataFmt, &quot;Decimal::Multiply( Left, Right )&quot;, Decimal::Multiply( Left, Right ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Divide( Left, Right )&quot;, Decimal::Divide( Left, Right ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Remainder( Left, Right )&quot;, Decimal::Remainder( Left, Right ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the <br>&quot;\n   &quot;  Decimal::Multiply( Decimal, Decimal ), <br>&quot;\n   &quot;  Decimal::Divide( Decimal, Decimal ), and <br>&quot;\n   &quot;  Decimal::Remainder( Decimal, Decimal ) <br>&quot;\n   &quot;methods generates the following output. It displays &quot;\n   &quot;the product, <br>quotient, and remainder of several &quot;\n   &quot;pairs of Decimal objects.&quot; );\n   \n   // Create pairs of Decimal objects.\n   ShowDecimalProQuoRem( Decimal::Parse( &quot;1000&quot; ), Decimal::Parse( &quot;7&quot; ) );\n   ShowDecimalProQuoRem( Decimal::Parse( &quot;-1000&quot; ), Decimal::Parse( &quot;7&quot; ) );\n   ShowDecimalProQuoRem( Decimal(1230000000,0,0,false,7), Decimal::Parse( &quot;0.0012300&quot; ) );\n   ShowDecimalProQuoRem( Decimal::Parse( &quot;12345678900000000&quot; ), Decimal::Parse( &quot;0.0000000012345678&quot; ) );\n   ShowDecimalProQuoRem( Decimal::Parse( &quot;123456789.0123456789&quot; ), Decimal::Parse( &quot;123456789.1123456789&quot; ) );\n}\n\n/*\nThis example of the\n  Decimal::Multiply( Decimal, Decimal ),\n  Decimal::Divide( Decimal, Decimal ), and\n  Decimal::Remainder( Decimal, Decimal )\nmethods generates the following output. It displays the product,\nquotient, and remainder of several pairs of Decimal objects.\n\nDecimal Left                                                  1000\nDecimal Right                                                    7\nDecimal::Multiply( Left, Right )                              7000\nDecimal::Divide( Left, Right )      142.85714285714285714285714286\nDecimal::Remainder( Left, Right )                                6\n\nDecimal Left                                                 -1000\nDecimal Right                                                    7\nDecimal::Multiply( Left, Right )                             -7000\nDecimal::Divide( Left, Right )     -142.85714285714285714285714286\nDecimal::Remainder( Left, Right )                               -6\n\nDecimal Left                                           123.0000000\nDecimal Right                                            0.0012300\nDecimal::Multiply( Left, Right )                  0.15129000000000\nDecimal::Divide( Left, Right )                              100000\nDecimal::Remainder( Left, Right )                                0\n\nDecimal Left                                     12345678900000000\nDecimal Right                                   0.0000000012345678\nDecimal::Multiply( Left, Right )         15241577.6390794200000000\nDecimal::Divide( Left, Right )      10000000729000059778004901.796\nDecimal::Remainder( Left, Right )                   0.000000000983\n\nDecimal Left                                  123456789.0123456789\nDecimal Right                                 123456789.1123456789\nDecimal::Multiply( Left, Right )    15241578765584515.651425087878\nDecimal::Divide( Left, Right )      0.9999999991899999933660999449\nDecimal::Remainder( Left, Right )             123456789.0123456789\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Mul_Div_Rem#1\">// Example of the decimal.Multiply, decimal.Divide, and \n// decimal.Remainder methods. \nusing System;\nusing Microsoft.VisualBasic;\n\nclass DecimalMulDivRemDemo\n{\n    const string dataFmt = &quot;{0,-35}{1,31}&quot;;\n\n    // Display decimal parameters and their product, quotient, and \n    // remainder.\n    public static void ShowDecimalProQuoRem( decimal Left, decimal Right )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;decimal Left&quot;, Left );\n        Console.WriteLine( dataFmt, &quot;decimal Right&quot;, Right );\n        Console.WriteLine( dataFmt, &quot;decimal.Multiply( Left, Right )&quot;, \n            decimal.Multiply( Left, Right ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Divide( Left, Right )&quot;, \n            decimal.Divide( Left, Right ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Remainder( Left, Right )&quot;, \n            decimal.Remainder( Left, Right ) );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the <br>&quot; +\n            &quot;  decimal.Multiply( decimal, decimal ), <br>&quot; +\n            &quot;  decimal.Divide( decimal, decimal ), and <br>&quot; +\n            &quot;  decimal.Remainder( decimal, decimal ) <br>&quot; +\n            &quot;methods generates the following output. It displays &quot; +\n            &quot;the product, <br>quotient, and remainder of several &quot; +\n            &quot;pairs of decimal objects.&quot; );\n\n        // Create pairs of decimal objects.\n        ShowDecimalProQuoRem( 1000M, 7M );\n        ShowDecimalProQuoRem( -1000M, 7M );\n        ShowDecimalProQuoRem( \n            new decimal( 1230000000, 0, 0, false, 7 ), 0.0012300M );\n        ShowDecimalProQuoRem( 12345678900000000M, \n            0.0000000012345678M );\n        ShowDecimalProQuoRem( 123456789.0123456789M, \n            123456789.1123456789M );\n    }\n}\n\n/*\nThis example of the\n  decimal.Multiply( decimal, decimal ),\n  decimal.Divide( decimal, decimal ), and\n  decimal.Remainder( decimal, decimal )\nmethods generates the following output. It displays the product,\nquotient, and remainder of several pairs of decimal objects.\n\ndecimal Left                                                  1000\ndecimal Right                                                    7\ndecimal.Multiply( Left, Right )                               7000\ndecimal.Divide( Left, Right )       142.85714285714285714285714286\ndecimal.Remainder( Left, Right )                                 6\n\ndecimal Left                                                 -1000\ndecimal Right                                                    7\ndecimal.Multiply( Left, Right )                              -7000\ndecimal.Divide( Left, Right )      -142.85714285714285714285714286\ndecimal.Remainder( Left, Right )                                -6\n\ndecimal Left                                           123.0000000\ndecimal Right                                            0.0012300\ndecimal.Multiply( Left, Right )                   0.15129000000000\ndecimal.Divide( Left, Right )                               100000\ndecimal.Remainder( Left, Right )                                 0\n\ndecimal Left                                     12345678900000000\ndecimal Right                                   0.0000000012345678\ndecimal.Multiply( Left, Right )          15241577.6390794200000000\ndecimal.Divide( Left, Right )       10000000729000059778004901.796\ndecimal.Remainder( Left, Right )                    0.000000000983\n\ndecimal Left                                  123456789.0123456789\ndecimal Right                                 123456789.1123456789\ndecimal.Multiply( Left, Right )     15241578765584515.651425087878\ndecimal.Divide( Left, Right )       0.9999999991899999933660999449\ndecimal.Remainder( Left, Right )              123456789.0123456789\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Mul_Div_Rem#1\">Module DecimalMulDivRemDemo\n    Const dataFmt As String = &quot;{0,-35}{1,31}&quot;\n\n    &#39; Display Decimal parameters and their product, quotient, and \n    &#39; remainder.\n    Sub ShowDecimalProQuoRem(left as Decimal, right as Decimal)\n        Console.WriteLine()\n        Console.WriteLine(dataFmt, &quot;Decimal left&quot;, left )\n        Console.WriteLine( dataFmt, &quot;Decimal right&quot;, right )\n        Console.WriteLine( dataFmt, \n            &quot;Decimal.Multiply( left, right )&quot;, \n            Decimal.Multiply( left, right ) )\n        Console.WriteLine( dataFmt, \n            &quot;Decimal.Divide( left, right )&quot;, \n            Decimal.Divide( left, right ) )\n        Console.WriteLine( dataFmt, \n            &quot;Decimal.Remainder( left, right )&quot;, \n            Decimal.Remainder( left, right ) )\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( &quot;This example of the &quot; &amp; vbCrLf &amp; \n            &quot;  Decimal.Multiply( Decimal, Decimal ), &quot; &amp; vbCrLf &amp; \n            &quot;  Decimal.Divide( Decimal, Decimal ), and &quot; &amp; vbCrLf &amp; \n            &quot;  Decimal.Remainder( Decimal, Decimal ) &quot; &amp; vbCrLf &amp; \n            &quot;methods generates the following output. It displays &quot; &amp; \n            &quot;the product, &quot; &amp; vbCrLf &amp; &quot;quotient, and remainder &quot; &amp; \n            &quot;of several pairs of Decimal objects.&quot; )\n\n        &#39; Create pairs of Decimal objects.\n        ShowDecimalProQuoRem( 1000D, 7D ) \n        ShowDecimalProQuoRem( -1000D, 7D ) \n        ShowDecimalProQuoRem( \n            new Decimal( 1230000000, 0, 0, False, 7 ), \n            0.0012300D )\n        ShowDecimalProQuoRem( 12345678900000000D, \n            0.0000000012345678D )\n        ShowDecimalProQuoRem( 123456789.0123456789D, \n            123456789.1123456789D )\n    End Sub\nEnd Module \n\n&#39; This example of the\n&#39;   Decimal.Multiply( Decimal, Decimal ),\n&#39;   Decimal.Divide( Decimal, Decimal ), and\n&#39;   Decimal.Remainder( Decimal, Decimal )\n&#39; methods generates the following output. It displays the product,\n&#39; quotient, and remainder of several pairs of Decimal objects.\n&#39; \n&#39; Decimal left                                                  1000\n&#39; Decimal right                                                    7\n&#39; Decimal.Multiply( left, right )                               7000\n&#39; Decimal.Divide( left, right )       142.85714285714285714285714286\n&#39; Decimal.Remainder( left, right )                                 6\n&#39; \n&#39; Decimal left                                                 -1000\n&#39; Decimal right                                                    7\n&#39; Decimal.Multiply( left, right )                              -7000\n&#39; Decimal.Divide( left, right )      -142.85714285714285714285714286\n&#39; Decimal.Remainder( left, right )                                -6\n&#39; \n&#39; Decimal left                                           123.0000000\n&#39; Decimal right                                              0.00123\n&#39; Decimal.Multiply( left, right )                     0.151290000000\n&#39; Decimal.Divide( left, right )                            100000.00\n&#39; Decimal.Remainder( left, right )                                 0\n&#39; \n&#39; Decimal left                                     12345678900000000\n&#39; Decimal right                                   0.0000000012345678\n&#39; Decimal.Multiply( left, right )          15241577.6390794200000000\n&#39; Decimal.Divide( left, right )       10000000729000059778004901.796\n&#39; Decimal.Remainder( left, right )                    0.000000000983\n&#39; \n&#39; Decimal left                                  123456789.0123456789\n&#39; Decimal right                                 123456789.1123456789\n&#39; Decimal.Multiply( left, right )     15241578765584515.651425087878\n&#39; Decimal.Divide( left, right )       0.9999999991899999933660999449\n&#39; Decimal.Remainder( left, right )              123456789.0123456789\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Negate_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Negate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Negate(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the result of multiplying the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value by negative one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Negate (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to negate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal number with the value of <code>d</code>, but the opposite sign.  </p>\n<p> -or-  </p>\n<p> Zero, if <code>d</code> is zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <code>Negate</code> method to change the sign of several <code>Decimal</code> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Flr_Neg_Rnd_Trnc#1\">// Example of the Decimal::Negate, Decimal::Floor, and \n// Decimal::Truncate methods. \nusing namespace System;\n\n// Display Decimal parameters and the method results.\nvoid ShowDecimalFloorNegTrunc( Decimal Argument )\n{\n   String^ dataFmt = &quot;{0,-30}{1,26}&quot;;\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, &quot;Decimal Argument&quot;, Argument );\n   Console::WriteLine( dataFmt, &quot;Decimal::Negate( Argument )&quot;, Decimal::Negate( Argument ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Floor( Argument )&quot;, Decimal::Floor( Argument ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Truncate( Argument )&quot;, Decimal::Truncate( Argument ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the <br>&quot;\n   &quot;  Decimal::Negate( Decimal ), <br>&quot;\n   &quot;  Decimal::Floor( Decimal ), and <br>&quot;\n   &quot;  Decimal::Truncate( Decimal ) <br>&quot;\n   &quot;methods generates the following output.&quot; );\n   \n   // Create pairs of Decimal objects.\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;0&quot; ) );\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;123.456&quot; ) );\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;-123.456&quot; ) );\n   ShowDecimalFloorNegTrunc( Decimal(1230000000,0,0,true,7) );\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;-9999999999.9999999999&quot; ) );\n}\n\n/*\nThis example of the\n  Decimal::Negate( Decimal ),\n  Decimal::Floor( Decimal ), and\n  Decimal::Truncate( Decimal )\nmethods generates the following output.\n\nDecimal Argument                                       0\nDecimal::Negate( Argument )                            0\nDecimal::Floor( Argument )                             0\nDecimal::Truncate( Argument )                          0\n\nDecimal Argument                                 123.456\nDecimal::Negate( Argument )                     -123.456\nDecimal::Floor( Argument )                           123\nDecimal::Truncate( Argument )                        123\n\nDecimal Argument                                -123.456\nDecimal::Negate( Argument )                      123.456\nDecimal::Floor( Argument )                          -124\nDecimal::Truncate( Argument )                       -123\n\nDecimal Argument                            -123.0000000\nDecimal::Negate( Argument )                  123.0000000\nDecimal::Floor( Argument )                          -123\nDecimal::Truncate( Argument )                       -123\n\nDecimal Argument                  -9999999999.9999999999\nDecimal::Negate( Argument )        9999999999.9999999999\nDecimal::Floor( Argument )                  -10000000000\nDecimal::Truncate( Argument )                -9999999999\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Flr_Neg_Rnd_Trnc#1\">// Example of the decimal.Negate, decimal.Floor, and decimal.Truncate \n// methods. \nusing System;\n\nclass DecimalFloorNegTruncDemo\n{\n    const string dataFmt = &quot;{0,-30}{1,26}&quot;;\n\n    // Display decimal parameters and the method results.\n    public static void ShowDecimalFloorNegTrunc( decimal Argument )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;decimal Argument&quot;, Argument );\n        Console.WriteLine( dataFmt, &quot;decimal.Negate( Argument )&quot;, \n            decimal.Negate( Argument ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Floor( Argument )&quot;, \n            decimal.Floor( Argument ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Truncate( Argument )&quot;, \n            decimal.Truncate( Argument ) );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the <br>&quot; +\n            &quot;  decimal.Negate( decimal ), <br>&quot; +\n            &quot;  decimal.Floor( decimal ), and <br>&quot; +\n            &quot;  decimal.Truncate( decimal ) <br>&quot; +\n            &quot;methods generates the following output.&quot; );\n\n        // Create pairs of decimal objects.\n        ShowDecimalFloorNegTrunc( 0M );\n        ShowDecimalFloorNegTrunc( 123.456M );\n        ShowDecimalFloorNegTrunc( -123.456M );\n        ShowDecimalFloorNegTrunc( \n            new decimal( 1230000000, 0, 0, true, 7 ) );\n        ShowDecimalFloorNegTrunc( -9999999999.9999999999M );\n    }\n}\n\n/*\nThis example of the\n  decimal.Negate( decimal ),\n  decimal.Floor( decimal ), and\n  decimal.Truncate( decimal )\nmethods generates the following output.\n\ndecimal Argument                                       0\ndecimal.Negate( Argument )                             0\ndecimal.Floor( Argument )                              0\ndecimal.Truncate( Argument )                           0\n\ndecimal Argument                                 123.456\ndecimal.Negate( Argument )                      -123.456\ndecimal.Floor( Argument )                            123\ndecimal.Truncate( Argument )                         123\n\ndecimal Argument                                -123.456\ndecimal.Negate( Argument )                       123.456\ndecimal.Floor( Argument )                           -124\ndecimal.Truncate( Argument )                        -123\n\ndecimal Argument                            -123.0000000\ndecimal.Negate( Argument )                   123.0000000\ndecimal.Floor( Argument )                           -123\ndecimal.Truncate( Argument )                        -123\n\ndecimal Argument                  -9999999999.9999999999\ndecimal.Negate( Argument )         9999999999.9999999999\ndecimal.Floor( Argument )                   -10000000000\ndecimal.Truncate( Argument )                 -9999999999\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Flr_Neg_Rnd_Trnc#1\">&#39; Example of the Decimal.Negate, Decimal.Floor, and Decimal.Truncate \n&#39; methods. \nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFloorNegTruncDemo\n    \n    Const dataFmt As String = &quot;{0,-30}{1,26}&quot;\n\n    &#39; Display Decimal parameters and their product, quotient, and \n    &#39; remainder.\n    Sub ShowDecimalFloorNegTrunc( Argument as Decimal )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Decimal Argument&quot;, Argument )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Negate( Argument )&quot;, _\n            Decimal.Negate( Argument ) )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Floor( Argument )&quot;, _\n            Decimal.Floor( Argument ) )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Truncate( Argument )&quot;, _\n            Decimal.Truncate( Argument ) )\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( &quot;This example of the &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.Negate( Decimal ), &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.Floor( Decimal ), and &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.Truncate( Decimal ) &quot; &amp; vbCrLf &amp; _\n            &quot;methods generates the following output.&quot; )\n\n        &#39; Create pairs of Decimal objects.\n        ShowDecimalFloorNegTrunc( 0D ) \n        ShowDecimalFloorNegTrunc( 123.456D ) \n        ShowDecimalFloorNegTrunc( -123.456D ) \n        ShowDecimalFloorNegTrunc( _\n            new Decimal( 1230000000, 0, 0, True, 7 ) )\n        ShowDecimalFloorNegTrunc( -9999999999.9999999999D )\n    End Sub\nEnd Module \n\n&#39; This example of the\n&#39;   Decimal.Negate( Decimal ),\n&#39;   Decimal.Floor( Decimal ), and\n&#39;   Decimal.Truncate( Decimal )\n&#39; methods generates the following output.\n&#39; \n&#39; Decimal Argument                                       0\n&#39; Decimal.Negate( Argument )                             0\n&#39; Decimal.Floor( Argument )                              0\n&#39; Decimal.Truncate( Argument )                           0\n&#39; \n&#39; Decimal Argument                                 123.456\n&#39; Decimal.Negate( Argument )                      -123.456\n&#39; Decimal.Floor( Argument )                            123\n&#39; Decimal.Truncate( Argument )                         123\n&#39; \n&#39; Decimal Argument                                -123.456\n&#39; Decimal.Negate( Argument )                       123.456\n&#39; Decimal.Floor( Argument )                           -124\n&#39; Decimal.Truncate( Argument )                        -123\n&#39; \n&#39; Decimal Argument                            -123.0000000\n&#39; Decimal.Negate( Argument )                   123.0000000\n&#39; Decimal.Floor( Argument )                           -123\n&#39; Decimal.Truncate( Argument )                        -123\n&#39; \n&#39; Decimal Argument                  -9999999999.9999999999\n&#39; Decimal.Negate( Argument )         9999999999.9999999999\n&#39; Decimal.Floor( Argument )                   -10000000000\n&#39; Decimal.Truncate( Argument )                 -9999999999\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Decimal_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Parse (string s);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The equivalent to the number contained in <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not in the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Parameter <code>s</code> contains a number of the form:  </p>\n<p> [ws][sign][digits,]digits[.fractional-digits][ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> Parameter <code>s</code> is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <code>s</code>, use either the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_\" data-linktype=\"relative-path\">System.Decimal.Parse(String,NumberStyles)</a> or the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> Parameter <code>s</code> is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string using the formatting information of some other culture, use the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.Parse(String,IFormatProvider)</a> or <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> If necessary, the value of <code>s</code> is rounded using rounding to nearest.  </p>\n<p> A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> has 29 digits of precision. If <code>s</code> represents a number that has more than 29 digits, but has a fractional part and is within the range of <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> and <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, the number is rounded, not truncated, to 29 digits using rounding to nearest.  </p>\n<p> If during a parse operation a separator is encountered in the <code>s</code> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Parse method to parse string representations of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Parse#1\">      string value;\n      decimal number;\n      // Parse an integer with thousands separators. \n      value = &quot;16,523,421&quot;;\n      number = Decimal.Parse(value);\n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays: \n      //    16,523,421&#39; converted to 16523421.\n      \n      // Parse a floating point value with thousands separators\n      value = &quot;25,162.1378&quot;;\n      number = Decimal.Parse(value);\n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays: \n      //    25,162.1378&#39; converted to 25162.1378.\n      \n      // Parse a floating point number with US currency symbol.\n      value = &quot;$16,321,421.75&quot;;\n      try\n      {\n         number = Decimal.Parse(value);\n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      }   \n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);\n      }\n      // Displays:\n      //    Unable to parse &#39;$16,321,421.75&#39;.   \n\n      // Parse a number in exponential notation\n      value = &quot;1.62345e-02&quot;;\n      try\n      {\n         number = Decimal.Parse(value);\n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      }   \n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);\n      }\n      // Displays: \n      //    Unable to parse &#39;1.62345e-02&#39;. \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Parse#1\">      Dim value As String\n      Dim number As Decimal\n      \n      &#39; Parse an integer with thousands separators. \n      value = &quot;16,523,421&quot;\n      number = Decimal.Parse(value)\n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays: \n      &#39;    16,523,421&#39; converted to 16523421.\n      \n      &#39; Parse a floating point value with thousands separators\n      value = &quot;25,162.1378&quot;\n      number = Decimal.Parse(value)\n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays:\n      &#39;    25,162.1378&#39; converted to 25162.1378.\n      \n      &#39; Parse a floating point number with US currency symbol.\n      value = &quot;$16,321,421.75&quot;\n      Try\n         number = Decimal.Parse(value)\n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)\n      End Try\n      &#39; Displays:\n      &#39;    Unable to parse &#39;$16,321,421.75&#39;.  \n      \n      &#39; Parse a number in exponential notation\n      value = &quot;1.62345e-02&quot;\n      Try\n         number = Decimal.Parse(value)\n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)\n      End Try\n      &#39; Displays: \n      &#39;    Unable to parse &#39;1.62345e-02&#39;. \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Parse_System_String_System_Globalization_NumberStyles_\">\r\n    \r\n            <a id=\"System_Decimal_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number in a specified style to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Parse (string s, System.Globalization.NumberStyles style);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number equivalent to the number contained in <code>s</code> as specified by <code>style</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not in the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a> or greater than <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the style elements (such as thousands separators, white space, and currency symbols) that are allowed in the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The following <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members are not supported:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>  \n\n<p>Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws]  </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the current culture. The current culture&#39;s currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol. The current culture&#39;s thousands separator can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The current culture&#39;s decimal point symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A sequence of digits ranging from 0 to 9. Fractional digits can appear in <code>s</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The &#39;e&#39; or &#39;E&#39; character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style) always parses successfully. The remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>.</em> and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation. This flag supports values in the form <em>digits</em>E<em>digits</em>; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>,</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All. The <code>s</code> parameter cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the <em>.</em> symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, <em>,</em>, and <em>.</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All styles, except <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>.  </p>\n<p> A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> has 29 digits of precision. If <code>s</code> represents a number that has more than 29 digits, but has a fractional part and is within the range of <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> and <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, the number is rounded, not truncated, to 29 digits using rounding to nearest.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, <code>styles</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> and <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> values, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Parse method to parse the string representations of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values using the en-US culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Parse#2\">      string value;\n      decimal number;\n      NumberStyles style;\n      \n      // Parse string with a floating point value using NumberStyles.None. \n      value = &quot;8694.12&quot;;\n      style = NumberStyles.None;\n      try\n      {\n         number = Decimal.Parse(value, style);  \n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);\n      }\n      // Displays:\n      //    Unable to parse &#39;8694.12&#39;.\n      \n      // Parse string with a floating point value and allow decimal point. \n      style = NumberStyles.AllowDecimalPoint;\n      number = Decimal.Parse(value, style);  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays:\n      //    &#39;8694.12&#39; converted to 8694.12.\n      \n      // Parse string with negative value in parentheses\n      value = &quot;(1,789.34)&quot;;\n      style = NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | \n              NumberStyles.AllowParentheses; \n      number = Decimal.Parse(value, style);  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays:\n      //    &#39;(1,789.34)&#39; converted to -1789.34.\n      \n      // Parse string using Number style\n      value = &quot; -17,623.49 &quot;;\n      style = NumberStyles.Number;\n      number = Decimal.Parse(value, style);  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays:\n      //    &#39; -17,623.49 &#39; converted to -17623.49.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Parse#2\">      Dim value As String\n      Dim number As Decimal\n      Dim style As NumberStyles\n      \n      &#39; Parse string with a floating point value using NumberStyles.None. \n      value = &quot;8694.12&quot;\n      style = NumberStyles.None\n      Try\n         number = Decimal.Parse(value, style)  \n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)\n      End Try\n      &#39; Displays:\n      &#39;    Unable to parse &#39;8694.12&#39;.\n      \n      &#39; Parse string with a floating point value and allow decimal point. \n      style = NumberStyles.AllowDecimalPoint\n      number = Decimal.Parse(value, style)  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays:\n      &#39;    &#39;8694.12&#39; converted to 8694.12.\n      \n      &#39; Parse string with negative value in parentheses\n      value = &quot;(1,789.34)&quot;\n      style = NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands Or _\n              NumberStyles.AllowParentheses \n      number = Decimal.Parse(value, style)  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays:\n      &#39;    &#39;(1,789.34)&#39; converted to -1789.34.\n      \n      &#39; Parse string using Number style\n      value = &quot; -17,623.49 &quot;\n      style = NumberStyles.Number\n      number = Decimal.Parse(value, style)  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays:\n      &#39;    &#39; -17,623.49 &#39; converted to -17623.49.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Parse_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent using the specified culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Parse (string s, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> that supplies culture-specific parsing information about <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number equivalent to the number contained in <code>s</code> as specified by <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not of the correct format</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload of the Parse method is commonly used to convert text that can be formatted in a variety of ways to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.  </p>\n<p> The <code>s</code> parameter contains a number of the form:  </p>\n<p> [ws][sign][digits,]digits[.fractional-digits][ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>s</code> parameter is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.Parse(String,NumberStyles,IFormatProvider)</a> method.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in parsing. If <code>provider</code> is <code>null</code>, the thread current culture is used.  </p>\n<p> A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object has 29 digits of precision. If <code>s</code> represents a number that has more than 29 digits, but has a fractional part and is within the range of <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> and <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, the number is rounded, not truncated, to 29 digits using rounding to nearest.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is the button click event handler of a Web form. It uses the array returned by the <a class=\"xref\" href=\"system.web.httprequest#System_Web_HttpRequest_UserLanguages_\" data-linktype=\"relative-path\">UserLanguages</a> property to determine the user&#39;s locale. It then instantiates a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that corresponds to that locale. The <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object that belongs to that <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object is then passed to the Parse method to convert the user&#39;s input to a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.  </p>\n<pre><code class=\"lang-cs\" name=\"ParseMethod#3\">protected void OkToDecimal_Click(object sender, EventArgs e)\n{\n   string locale;\n   decimal number;\n   CultureInfo culture;\n\n   // Return if string is empty\n   if (String.IsNullOrEmpty(this.inputNumber.Text))\n      return;\n\n   // Get locale of web request to determine possible format of number\n   if (Request.UserLanguages.Length == 0)\n      return;\n   locale = Request.UserLanguages[0];\n   if (String.IsNullOrEmpty(locale))\n      return;\n\n  // Instantiate CultureInfo object for the user&#39;s locale\n   culture = new CultureInfo(locale);\n\n   // Convert user input from a string to a number\n   try\n   {\n      number = Decimal.Parse(this.inputNumber.Text, culture.NumberFormat);\n   }\n   catch (FormatException)\n   {\n      return;\n   }\n   catch (Exception)\n   {\n      return;\n   }\n   // Output number to label on web form\n   this.outputNumber.Text = &quot;Number is &quot; + number.ToString();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ParseMethod#3\">Protected Sub OkToDecimal_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles OkToDecimal.Click\n   Dim locale As String\n   Dim culture As CultureInfo\n   Dim number As Decimal\n\n   &#39; Return if string is empty\n   If String.IsNullOrEmpty(Me.inputNumber.Text) Then Exit Sub\n\n   &#39; Get locale of web request to determine possible format of number\n   If Request.UserLanguages.Length = 0 Then Exit Sub\n   locale = Request.UserLanguages(0)\n   If String.IsNullOrEmpty(locale) Then Exit Sub\n\n   &#39; Instantiate CultureInfo object for the user&#39;s locale\n   culture = New CultureInfo(locale)\n\n   &#39; Convert user input from a string to a number\n   Try\n      number = Decimal.Parse(Me.inputNumber.Text, culture.NumberFormat)\n   Catch ex As FormatException\n      Exit Sub\n   Catch ex As Exception\n      Exit Sub\n   End Try\n\n   &#39; Output number to label on web form\n   Me.outputNumber.Text = &quot;Number is &quot; &amp; number.ToString()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String,NumberStyles,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent using the specified style and culture-specific format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> values that indicates the style elements that can be present in <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object that supplies culture-specific information about the format of <code>s</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> number equivalent to the number contained in <code>s</code> as specified by <code>style</code> and <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is not in the correct format.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> represents a number less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>s</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>style</code> parameter defines the allowable format of the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The following <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members are not supported:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>  \n\n<p>Depending on the value of <code>style</code>, the <code>s</code> parameter may include the following elements:  </p>\n<p>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws]  </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign. The sign can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag, and it can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. Parentheses can be used in <code>s</code> to indicate a negative value if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol. The thousands separator of the culture defined by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol. The decimal point symbol of the culture defined by <code>provider</code> can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A sequence of digits ranging from 0 to 9. Fractional digits can appear in <code>s</code> only if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>e</em></td>\n<td>The &#39;e&#39; or &#39;E&#39; character, which indicates that the value is represented in exponential notation. The <code>s</code> parameter can represent a number in exponential notation if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n</tbody>\n</table>\n<p> A string with digits only (which corresponds to the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> style) always parses successfully. The remaining <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members affect the elements that may be present in <code>s</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>NumberStyles value</th>\n<th>Elements permitted in s in addition to digits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>digits</em> element only.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>.</em> and <em>fractional-digits</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>s</code> parameter can also use exponential notation.  This flag supports values in the form <em>digits</em>E<em>digits</em>; additional flags are needed to successfully parse strings with elements such as positive or negative signs and decimal point symbols.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the beginning of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element at the end of <code>s</code>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>sign</em> element in the form of parentheses enclosing the numeric value.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>,</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>$</em> element.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All. The <code>s</code> parameter cannot represent a hexadecimal number or a number in exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <em>ws</em> element at the beginning or end of <code>s</code>, <em>sign</em> at the beginning of <code>s</code>, and the <em>.</em>symbol. The <code>s</code> parameter can also use exponential notation.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>The <code>ws</code>, <code>sign</code>, <em>,</em>, and <em>.</em> elements.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></td>\n<td>All styles, except <code>s</code> cannot represent a hexadecimal number.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation, such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in parsing. If <code>provider</code> is <code>null</code>, the thread current culture is used.  </p>\n<p> A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object has 29 digits of precision. If <code>s</code> represents a number that has more than 29 digits, but has a fractional part and is within the range of <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> and <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, the number is rounded, not truncated, to 29 digits using rounding to nearest.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a variety of <code>style</code> and <code>provider</code> parameters to parse the string representations of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Parse#3\">      string value;\n      decimal number;\n      NumberStyles style;\n      CultureInfo provider;\n      \n      // Parse string using &quot;.&quot; as the thousands separator \n      // and &quot; &quot; as the decimal separator. \n      value = &quot;892 694,12&quot;;\n      style = NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands;\n      provider = new CultureInfo(&quot;fr-FR&quot;);\n\n      number = Decimal.Parse(value, style, provider);  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays: \n      //    892 694,12&#39; converted to 892694.12.\n\n      try\n      {\n         number = Decimal.Parse(value, style, CultureInfo.InvariantCulture);  \n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      }   \n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);\n      }\n      // Displays: \n      //    Unable to parse &#39;892 694,12&#39;.  \n      \n      // Parse string using &quot;$&quot; as the currency symbol for en-GB and  \n      // en-us cultures.\n      value = &quot;$6,032.51&quot;;\n      style = NumberStyles.Number | NumberStyles.AllowCurrencySymbol;\n      provider = new CultureInfo(&quot;en-GB&quot;);\n\n      try\n      {\n         number = Decimal.Parse(value, style, provider);  \n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      }   \n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);\n      }\n      // Displays: \n      //    Unable to parse &#39;$6,032.51&#39;.\n\n      provider = new CultureInfo(&quot;en-US&quot;);\n      number = Decimal.Parse(value, style, provider);  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number);\n      // Displays: \n      //    &#39;$6,032.51&#39; converted to 6032.51.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Parse#3\">      Dim value As String\n      Dim number As Decimal\n      Dim style As NumberStyles\n      Dim provider As CultureInfo\n      \n      &#39; Parse string using &quot;.&quot; as the thousands separator \n      &#39; and &quot; &quot; as the decimal separator. \n      value = &quot;892 694,12&quot;\n      style = NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands\n      provider = New CultureInfo(&quot;fr-FR&quot;)\n\n      number = Decimal.Parse(value, style, provider)  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays: \n      &#39;    892 694,12&#39; converted to 892694.12.\n\n      Try\n         number = Decimal.Parse(value, style, CultureInfo.InvariantCulture)  \n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)\n      End Try\n      &#39; Displays: \n      &#39;    Unable to parse &#39;892 694,12&#39;.  \n      \n      &#39; Parse string using &quot;$&quot; as the currency symbol for en-GB and\n      &#39; en-us cultures.\n      value = &quot;$6,032.51&quot;\n      style = NumberStyles.Number Or NumberStyles.AllowCurrencySymbol\n      provider = New CultureInfo(&quot;en-GB&quot;)\n\n      Try\n         number = Decimal.Parse(value, style, provider)  \n         Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)\n      End Try\n      &#39; Displays: \n      &#39;    Unable to parse &#39;$6,032.51&#39;.\n\n      provider = New CultureInfo(&quot;en-US&quot;)\n      number = Decimal.Parse(value, style, provider)  \n      Console.WriteLine(&quot;&#39;{0}&#39; converted to {1}.&quot;, value, number)\n      &#39; Displays: \n      &#39;    &#39;$6,032.51&#39; converted to 6032.51.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Remainder_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Remainder_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remainder(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Computes the remainder after dividing two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Remainder (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dividend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The divisor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The remainder after dividing <code>d1</code> by <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></div>\r\n                  </div>\r\n                  <p><code>d2</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Remainder method to calculate the remainder in a series of division operations.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Remainder#1\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create parallel arrays of Decimals to use as the dividend and divisor.\n        Decimal[] dividends = { 79m, 1000m, -1000m, 123m, 1234567800000m,\n                                1234.0123m };\n        Decimal[] divisors = { 11m, 7m, 7m, .00123m, 0.12345678m, 1234.5678m };\n        \n        for (int ctr = 0; ctr &lt; dividends.Length; ctr++) \n        {\n           Decimal dividend = dividends[ctr];\n           Decimal divisor = divisors[ctr];\n           Console.WriteLine(&quot;{0:N3} / {1:N3} = {2:N3} Remainder {3:N3}&quot;, dividend,\n                             divisor, Decimal.Divide(dividend, divisor),\n                             Decimal.Remainder(dividend, divisor)); \n        }\n    }\n} \n// The example displays the following output:\n//       79.000 / 11.000 = 7.182 Remainder 2.000\n//       1,000.000 / 7.000 = 142.857 Remainder 6.000\n//       -1,000.000 / 7.000 = -142.857 Remainder -6.000\n//       123.000 / 0.001 = 100,000.000 Remainder 0.000\n//       1,234,567,800,000.000 / 0.123 = 10,000,000,000,000.000 Remainder 0.000\n//       1,234.012 / 1,234.568 = 1.000 Remainder 1,234.012\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Remainder#1\">Module Example\n    Sub Main( )\n        &#39; Create parallel arrays of Decimals to use as the dividend and divisor.\n        Dim dividends() As Decimal = { 79d, 1000d, -1000d, 123d, 1234567800000d,\n                                       1234.0123d }\n        Dim divisors() As Decimal = { 11d, 7d, 7d, .00123d, 0.12345678d,\n                                      1234.5678d }\n        \n        For ctr As Integer = 0 To dividends.Length - 1\n           Dim dividend As Decimal = dividends(ctr)\n           Dim divisor As Decimal = divisors(ctr)\n           Console.WriteLine(&quot;{0:N3} / {1:N3} = {2:N3} Remainder {3:N3}&quot;, dividend,\n                             divisor, Decimal.Divide(dividend, divisor),\n                             Decimal.Remainder(dividend, divisor)) \n        Next\n    End Sub\nEnd Module \n&#39; The example displays the following output:\n&#39;       79.000 / 11.000 = 7.182 Remainder 2.000\n&#39;       1,000.000 / 7.000 = 142.857 Remainder 6.000\n&#39;       -1,000.000 / 7.000 = -142.857 Remainder -6.000\n&#39;       123.000 / 0.001 = 100,000.000 Remainder 0.000\n&#39;       1,234,567,800,000.000 / 0.123 = 10,000,000,000,000.000 Remainder 0.000\n&#39;       1,234.012 / 1,234.568 = 1.000 Remainder 1,234.012\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Round_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Round_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Round(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Rounds a decimal value to the nearest integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Round (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A decimal number to round.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The integer that is nearest to the <code>d</code> parameter. If <code>d</code> is halfway between two integers, one of which is even and the other odd, the even number is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The result is outside the range of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called <em>round half to even</em> or <em>banker&#39;s rounding</em>. It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction. It is equivalent to calling the <a class=\"xref\" href=\"system.decimal#System_Decimal_Round_System_Decimal_System_MidpointRounding_\" data-linktype=\"relative-path\">Round(Decimal,MidpointRounding)</a> method with a <code>mode</code> argument of <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">System.MidpointRounding</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example rounds a range of <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values between 100 and 102 to the nearest integer. Because the method uses banker&#39;s rounding, note that 100.5 rounds to 100 and 101.5 rounds to 102.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Round#1\">Module Example\n   Public Sub Main()\n      For value As Decimal = 100d To 102d Step .1d\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, Decimal.Round(value))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     100 --&gt; 100\n&#39;     100.1 --&gt; 100\n&#39;     100.2 --&gt; 100\n&#39;     100.3 --&gt; 100\n&#39;     100.4 --&gt; 100\n&#39;     100.5 --&gt; 100\n&#39;     100.6 --&gt; 101\n&#39;     100.7 --&gt; 101\n&#39;     100.8 --&gt; 101\n&#39;     100.9 --&gt; 101\n&#39;     101.0 --&gt; 101\n&#39;     101.1 --&gt; 101\n&#39;     101.2 --&gt; 101\n&#39;     101.3 --&gt; 101\n&#39;     101.4 --&gt; 101\n&#39;     101.5 --&gt; 102\n&#39;     101.6 --&gt; 102\n&#39;     101.7 --&gt; 102\n&#39;     101.8 --&gt; 102\n&#39;     101.9 --&gt; 102\n&#39;     102.0 --&gt; 102\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Round#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      for (decimal value = 100m; value &lt;= 102m; value += .1m)\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, Decimal.Round(value));\n\n   }\n}\n// The example displays the following output:\n//     100 --&gt; 100\n//     100.1 --&gt; 100\n//     100.2 --&gt; 100\n//     100.3 --&gt; 100\n//     100.4 --&gt; 100\n//     100.5 --&gt; 100\n//     100.6 --&gt; 101\n//     100.7 --&gt; 101\n//     100.8 --&gt; 101\n//     100.9 --&gt; 101\n//     101.0 --&gt; 101\n//     101.1 --&gt; 101\n//     101.2 --&gt; 101\n//     101.3 --&gt; 101\n//     101.4 --&gt; 101\n//     101.5 --&gt; 102\n//     101.6 --&gt; 102\n//     101.7 --&gt; 102\n//     101.8 --&gt; 102\n//     101.9 --&gt; 102\n//     102.0 --&gt; 102\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Round_System_Decimal_System_Int32_\">\r\n    \r\n            <a id=\"System_Decimal_Round_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Round(Decimal,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Rounds a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a specified number of decimal places.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Round (decimal d, int decimals);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A decimal number to round.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>decimals</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value from 0 to 28 that specifies the number of decimal places to round to.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The decimal number equivalent to <code>d</code> rounded to <code>decimals</code> number of decimal places.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>decimals</code> is not a value from 0 to 28.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is equivalent to calling the <a class=\"xref\" href=\"system.decimal#System_Decimal_Round_System_Decimal_System_Int32_System_MidpointRounding_\" data-linktype=\"relative-path\">Round(Decimal,Int32,MidpointRounding)</a> method with a <code>mode</code> argument of <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">System.MidpointRounding</a>.When <code>d</code> is exactly halfway between two rounded values, the result is the rounded value that has an even digit in the far right decimal position. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36. This process is known as <em>rounding toward even</em>, or <em>banker&#39;s rounding</em>. It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example rounds several <code>Decimal</code> values to a specified number of decimal places using the <code>Round</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Round#12\">using System;\n\nclass Example\n{\n   public static void Main()\n   {\n      // Define a set of Decimal values.\n      decimal[] values = { 1.45m, 1.55m, 123.456789m, 123.456789m, \n                           123.456789m, -123.456m, \n                           new Decimal(1230000000, 0, 0, true, 7 ),\n                           new Decimal(1230000000, 0, 0, true, 7 ), \n                           -9999999999.9999999999m, \n                           -9999999999.9999999999m };\n      // Define a set of integers to for decimals argument.\n      int[] decimals = { 1, 1, 4, 6, 8, 0, 3, 11, 9, 10};\n      \n      Console.WriteLine(&quot;{0,26}{1,8}{2,26}&quot;, \n                        &quot;Argument&quot;, &quot;Digits&quot;, &quot;Result&quot; );\n      Console.WriteLine(&quot;{0,26}{1,8}{2,26}&quot;, \n                        &quot;--------&quot;, &quot;------&quot;, &quot;------&quot; );\n      for (int ctr = 0; ctr &lt; values.Length; ctr++)\n        Console.WriteLine(&quot;{0,26}{1,8}{2,26}&quot;, \n                          values[ctr], decimals[ctr], \n                          Decimal.Round(values[ctr], decimals[ctr]));\n    }\n}\n// The example displays the following output:\n//                   Argument  Digits                    Result\n//                   --------  ------                    ------\n//                       1.45       1                       1.4\n//                       1.55       1                       1.6\n//                 123.456789       4                  123.4568\n//                 123.456789       6                123.456789\n//                 123.456789       8                123.456789\n//                   -123.456       0                      -123\n//               -123.0000000       3                  -123.000\n//               -123.0000000      11              -123.0000000\n//     -9999999999.9999999999       9    -10000000000.000000000\n//     -9999999999.9999999999      10    -9999999999.9999999999\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Round#12\">Public Module Example\n   Public Sub Main()\n      &#39; Define a set of Decimal values.\n      Dim values() As Decimal = { 1.45d, 1.55d, 123.456789d, 123.456789d, \n                                  123.456789d, -123.456d, \n                                  New Decimal(1230000000, 0, 0, true, 7 ),\n                                  New Decimal(1230000000, 0, 0, true, 7 ), \n                                  -9999999999.9999999999d, \n                                  -9999999999.9999999999d }\n      &#39; Define a set of integers to for decimals argument.\n      Dim decimals() As Integer = { 1, 1, 4, 6, 8, 0, 3, 11, 9, 10}\n      \n      Console.WriteLine(&quot;{0,26}{1,8}{2,26}&quot;, \n                        &quot;Argument&quot;, &quot;Digits&quot;, &quot;Result&quot; )\n      Console.WriteLine(&quot;{0,26}{1,8}{2,26}&quot;, \n                        &quot;--------&quot;, &quot;------&quot;, &quot;------&quot; )\n      For ctr As Integer = 0 To values.Length - 1\n        Console.WriteLine(&quot;{0,26}{1,8}{2,26}&quot;, \n                          values(ctr), decimals(ctr), \n                          Decimal.Round(values(ctr), decimals(ctr)))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;                   Argument  Digits                    Result\n&#39;                   --------  ------                    ------\n&#39;                       1.45       1                       1.4\n&#39;                       1.55       1                       1.6\n&#39;                 123.456789       4                  123.4568\n&#39;                 123.456789       6                123.456789\n&#39;                 123.456789       8                123.456789\n&#39;                   -123.456       0                      -123\n&#39;               -123.0000000       3                  -123.000\n&#39;               -123.0000000      11              -123.0000000\n&#39;     -9999999999.9999999999       9    -10000000000.000000000\n&#39;     -9999999999.9999999999      10    -9999999999.9999999999\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Round_System_Decimal_System_MidpointRounding_\">\r\n    \r\n            <a id=\"System_Decimal_Round_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Round(Decimal,MidpointRounding)</div>        \r\n          </div>\r\n    \r\n            <p>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two other numbers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Round (decimal d, MidpointRounding mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A decimal number to round.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that specifies how to round <code>d</code> if it is midway between two other numbers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The integer that is nearest to the <code>d</code> parameter. If <code>d</code> is halfway between two numbers, one of which is even and the other odd, the <code>mode</code> parameter determines which of the two numbers is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code> is not a <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The result is outside the range of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers. For example, 7.5 is a midpoint value if it is to be rounded to an integer. For midpoint values, the nearest value can&#39;t be easily identified without a rounding convention, which is specified by the <code>mode</code> argument. The Round method supports two rounding conventions for handling midpoint values.  </p>\n<p> Rounding away from zero.<br> Midpoint values are rounded to the next number away from zero. For example, 3.5 rounds to 4, 4.5 rounds to 5, -3.5 rounds to -4, and -4.5 rounds to -5. This form of rounding is represented by the <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">System.MidpointRounding</a> enumeration member.  </p>\n<p> Rounding away from zero is the most widely known form of rounding.  </p>\n<p> Rounding to even, or banker&#39;s rounding<br> Midpoint values are rounded to the nearest even number. For example, both 3.5 and 4.5 round to 4, and both -3.5 and -4.5 round to -4. This form of rounding is represented by the <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">System.MidpointRounding</a> enumeration member.  </p>\n<p> Rounding to nearest is the standard form of rounding used in financial and statistical operations. It conforms to IEEE Standard 754, section 4. When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction. In some cases, this rounding error can be significant.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays values returned by the <a class=\"xref\" href=\"system.math#System_Math_Round_System_Decimal_\" data-linktype=\"relative-path\">Round(Decimal)</a> method, the <a class=\"xref\" href=\"system.math#System_Math_Round_System_Decimal_System_MidpointRounding_\" data-linktype=\"relative-path\">Round(Decimal,MidpointRounding)</a> method with a <code>mode</code> argument of <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a>, and the <a class=\"xref\" href=\"system.math#System_Math_Round_System_Decimal_System_MidpointRounding_\" data-linktype=\"relative-path\">Round(Decimal,MidpointRounding)</a> method with a <code>mode</code> argument of <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Math.Round.Overload#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Console.WriteLine(&quot;{0,-10} {1,-10} {2,-10} {3,-15}&quot;, &quot;Value&quot;, &quot;Default&quot;, \n                        &quot;ToEven&quot;, &quot;AwayFromZero&quot;);\n      for (decimal value = 12.0m; value &lt;= 13.0m; value += 0.1m)\n         Console.WriteLine(&quot;{0,-10} {1,-10} {2,-10} {3,-15}&quot;,\n                           value, Math.Round(value), \n                           Math.Round(value, MidpointRounding.ToEven),\n                           Math.Round(value, MidpointRounding.AwayFromZero));\n   }\n}\n// The example displays the following output:\n//       Value      Default    ToEven     AwayFromZero\n//       12         12         12         12\n//       12.1       12         12         12\n//       12.2       12         12         12\n//       12.3       12         12         12\n//       12.4       12         12         12\n//       12.5       12         12         13\n//       12.6       13         13         13\n//       12.7       13         13         13\n//       12.8       13         13         13\n//       12.9       13         13         13\n//       13.0       13         13         13\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Math.Round.Overload#5\">Module Example\n   Public Sub Main()\n      Console.WriteLine(&quot;{0,-10} {1,-10} {2,-10} {3,-15}&quot;, &quot;Value&quot;, &quot;Default&quot;, \n                        &quot;ToEven&quot;, &quot;AwayFromZero&quot;)\n      For value As Decimal = 12.0d To 13.0d Step .1d\n         Console.WriteLine(&quot;{0,-10} {1,-10} {2,-10} {3,-15}&quot;,\n                           value, Math.Round(value), \n                           Math.Round(value, MidpointRounding.ToEven),\n                           Math.Round(value, MidpointRounding.AwayFromZero))\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Value      Default    ToEven     AwayFromZero\n&#39;       12         12         12         12\n&#39;       12.1       12         12         12\n&#39;       12.2       12         12         12\n&#39;       12.3       12         12         12\n&#39;       12.4       12         12         12\n&#39;       12.5       12         12         13\n&#39;       12.6       13         13         13\n&#39;       12.7       13         13         13\n&#39;       12.8       13         13         13\n&#39;       12.9       13         13         13\n&#39;       13.0       13         13         13\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Round_System_Decimal_System_Int32_System_MidpointRounding_\">\r\n    \r\n            <a id=\"System_Decimal_Round_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Round(Decimal,Int32,MidpointRounding)</div>        \r\n          </div>\r\n    \r\n            <p>Rounds a decimal value to a specified precision. A parameter specifies how to round the value if it is midway between two other numbers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Round (decimal d, int decimals, MidpointRounding mode);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A decimal number to round.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>decimals</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of significant decimal places (precision) in the return value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>mode</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A value that specifies how to round <code>d</code> if it is midway between two other numbers.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The number that is nearest to the <code>d</code> parameter with a precision equal to the <code>decimals</code> parameter. If <code>d</code> is halfway between two numbers, one of which is even and the other odd, the <code>mode</code> parameter determines which of the two numbers is returned. If the precision of <code>d</code> is less than <code>decimals</code>, <code>d</code> is returned unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>decimals</code> is less than 0 or greater than 28.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>mode</code> is not a <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a> value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The result is outside the range of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>decimals</code> parameter specifies the number of significant decimal places in the return value and ranges from 0 to 28. If <code>decimals</code> is zero, an integer is returned.  </p>\n<p> In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers. For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer. In these cases, the nearest value can&#39;t be easily identified without a rounding convention, which is specified by the <code>mode</code> argument. The Round method supports two rounding conventions for handling midpoint values.  </p>\n<p> Rounding away from zero.<br> Midpoint values are rounded to the next number away from zero. For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9. This form of rounding is represented by the <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">System.MidpointRounding</a> enumeration member.  </p>\n<p> Rounding away from zero is the most widely known form of rounding.  </p>\n<p> Rounding to even, or banker&#39;s rounding<br> Midpoint values are rounded to the nearest even number. For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8. This form of rounding is represented by the <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">System.MidpointRounding</a> enumeration member.  </p>\n<p> Rounding to nearest is the standard form of rounding used in financial and statistical operations. It conforms to IEEE Standard 754, section 4. When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction. In some cases, this rounding error can be significant.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the <a class=\"xref\" href=\"system.math#System_Math_Round_System_Decimal_System_Int32_System_MidpointRounding_\" data-linktype=\"relative-path\">Round(Decimal,Int32,MidpointRounding)</a> method with the <a class=\"xref\" href=\"system.midpointrounding\" data-linktype=\"relative-path\">MidpointRounding</a> enumeration.  </p>\n<pre><code class=\"lang-cs\" name=\"math.midpointrounding#1\">// This example demonstrates the Math.Round() method in conjunction \n// with the MidpointRounding enumeration.\nusing System;\n\nclass Sample \n{\n    public static void Main() \n    {\n    decimal result = 0.0m;\n    decimal posValue =  3.45m;\n    decimal negValue = -3.45m;\n\n// By default, round a positive and a negative value to the nearest even number. \n// The precision of the result is 1 decimal place.\n\n    result = Math.Round(posValue, 1);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, posValue);\n    result = Math.Round(negValue, 1);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, negValue);\n    Console.WriteLine();\n\n// Round a positive value to the nearest even number, then to the nearest number away from zero. \n// The precision of the result is 1 decimal place.\n\n    result = Math.Round(posValue, 1, MidpointRounding.ToEven);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, result, posValue);\n    result = Math.Round(posValue, 1, MidpointRounding.AwayFromZero);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, result, posValue);\n    Console.WriteLine();\n\n// Round a negative value to the nearest even number, then to the nearest number away from zero. \n// The precision of the result is 1 decimal place.\n\n    result = Math.Round(negValue, 1, MidpointRounding.ToEven);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, result, negValue);\n    result = Math.Round(negValue, 1, MidpointRounding.AwayFromZero);\n    Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, result, negValue);\n    Console.WriteLine();\n    }\n}\n/*\nThis code example produces the following results:\n\n 3.4 = Math.Round( 3.45, 1)\n-3.4 = Math.Round(-3.45, 1)\n\n 3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)\n 3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)\n\n-3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)\n-3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"math.midpointrounding#1\">// This example demonstrates the Math.Round() method in conjunction \n// with the MidpointRounding enumeration.\nusing namespace System;\n\nvoid main()\n{\n    Decimal result = (Decimal) 0.0;\n    Decimal posValue = (Decimal) 3.45;\n    Decimal negValue = (Decimal) -3.45;\n\n    // By default, round a positive and a negative value to the nearest\n    // even number. The precision of the result is 1 decimal place.\n    result = Math::Round(posValue, 1);\n    Console::WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, posValue);\n    result = Math::Round(negValue, 1);\n    Console::WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, negValue);\n    Console::WriteLine();\n\n    // Round a positive value to the nearest even number, then to the\n    // nearest number away from zero. The precision of the result is 1\n    // decimal place.\n    result = Math::Round(posValue, 1, MidpointRounding::ToEven);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;,\n        result, posValue);\n    result = Math::Round(posValue, 1, MidpointRounding::AwayFromZero);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;,\n        result, posValue);\n    Console::WriteLine();\n\n    // Round a negative value to the nearest even number, then to the\n    // nearest number away from zero. The precision of the result is 1\n    // decimal place.\n    result = Math::Round(negValue, 1, MidpointRounding::ToEven);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;,\n        result, negValue);\n    result = Math::Round(negValue, 1, MidpointRounding::AwayFromZero);\n    Console::WriteLine(\n        &quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;,\n        result, negValue);\n    Console::WriteLine();\n}\n\n/*\nThis code example produces the following results:\n\n3.4 = Math.Round( 3.45, 1)\n-3.4 = Math.Round(-3.45, 1)\n\n3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)\n3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)\n\n-3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)\n-3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"math.midpointrounding#1\">&#39; This example demonstrates the Math.Round() method in conjunction \n&#39; with the MidpointRounding enumeration.\nImports System\n\nClass Sample\n    Public Shared Sub Main() \n        Dim result As Decimal = 0D\n        Dim posValue As Decimal = 3.45D\n        Dim negValue As Decimal = -3.45D\n        \n        &#39; By default, round a positive and a negative value to the nearest even number. \n        &#39; The precision of the result is 1 decimal place.\n        result = Math.Round(posValue, 1)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, posValue)\n        result = Math.Round(negValue, 1)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1)&quot;, result, negValue)\n        Console.WriteLine()\n        \n        &#39; Round a positive value to the nearest even number, then to the nearest number \n        &#39; away from zero. The precision of the result is 1 decimal place.\n        result = Math.Round(posValue, 1, MidpointRounding.ToEven)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, _\n                           result, posValue)\n        result = Math.Round(posValue, 1, MidpointRounding.AwayFromZero)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, _\n                           result, posValue)\n        Console.WriteLine()\n        \n        &#39; Round a negative value to the nearest even number, then to the nearest number \n        &#39; away from zero. The precision of the result is 1 decimal place.\n        result = Math.Round(negValue, 1, MidpointRounding.ToEven)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.ToEven)&quot;, _\n                            result, negValue)\n        result = Math.Round(negValue, 1, MidpointRounding.AwayFromZero)\n        Console.WriteLine(&quot;{0,4} = Math.Round({1,5}, 1, MidpointRounding.AwayFromZero)&quot;, _\n                           result, negValue)\n        Console.WriteLine()\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39; 3.4 = Math.Round( 3.45, 1)\n&#39;-3.4 = Math.Round(-3.45, 1)\n&#39;\n&#39; 3.4 = Math.Round( 3.45, 1, MidpointRounding.ToEven)\n&#39; 3.5 = Math.Round( 3.45, 1, MidpointRounding.AwayFromZero)\n&#39;\n&#39;-3.4 = Math.Round(-3.45, 1, MidpointRounding.ToEven)\n&#39;-3.5 = Math.Round(-3.45, 1, MidpointRounding.AwayFromZero)\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Subtract_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Subtract_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Subtract(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts one specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value from another.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Subtract (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minuend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The subtrahend.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of subtracting <code>d2</code> from <code>d1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example illustrates the use of <code>Subtract</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Decimal Example#4\">   public ref class PiggyBank\n   {\n   public:\n      Decimal Cents()\n      {\n         return Decimal::Subtract( MyFortune, Decimal::Floor( MyFortune ) );\n      }\n\n      void AddPenny()\n      {\n         MyFortune = Decimal::Add(MyFortune, (Decimal).01);\n      }\n\n   protected:\n      Decimal MyFortune;\n   };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Decimal Example#4\">    Class PiggyBank\n        Public ReadOnly Property Cents() As Decimal\n            Get\n                Return [Decimal].Subtract(MyFortune, [Decimal].Floor(MyFortune))\n            End Get\n        End Property\n\n        Protected MyFortune As Decimal\n\n        Public Sub AddPenny()\n            MyFortune += 0.01D\n        End Sub\n    End Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Decimal Example#4\">\tclass PiggyBank {\n\t\tpublic decimal Cents {\n\t\t\tget {\n\t\t\t\treturn Decimal.Subtract(MyFortune, Decimal.Floor(MyFortune));\n\t\t\t}\n\t\t}\n\n\t\tprotected decimal MyFortune;\n\n\t\tpublic void AddPenny() {\n\t\t\tMyFortune += .01m;\n\t\t}\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToByte_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToByte(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 8-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte ToByte (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit unsigned integer equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Parameter <code>value</code> is rounded to the nearest integer value toward zero, and that result is returned.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to an 8-bit unsigned integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToByte method to convert decimal numbers to <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.ToByte#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 78d, New Decimal(78000, 0, 0, false, 3), \n                                  78.999d, 255.999d, 256d,\n                                  127.999d, 128d, -0.999d, \n                                  -1d,  -128.999d, -129d }\n\n      For Each value In values\n         Try\n            Dim number As Byte = Decimal.ToByte(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     78 --&gt; 78\n&#39;     78.000 --&gt; 78\n&#39;     78.999 --&gt; 78\n&#39;     255.999 --&gt; 255\n&#39;     OverflowException: 256\n&#39;     127.999 --&gt; 127\n&#39;     128 --&gt; 128\n&#39;     -0.999 --&gt; 0\n&#39;     OverflowException: -1\n&#39;     OverflowException: -128.999\n&#39;     OverflowException: -129\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.ToByte#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new Decimal(78000, 0, 0, false, 3),\n                           78.999m, 255.999m, 256m,             \n                           127.999m, 128m, -0.999m,              \n                           -1m,  -128.999m, -129m };\n\n      foreach (var value in values) {\n         try {\n            byte number = Decimal.ToByte(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//     78 --&gt; 78\n//     78.000 --&gt; 78\n//     78.999 --&gt; 78\n//     255.999 --&gt; 255\n//     OverflowException: 256\n//     127.999 --&gt; 127\n//     128 --&gt; 128\n//     -0.999 --&gt; 0\n//     OverflowException: -1\n//     OverflowException: -128.999\n//     OverflowException: -129\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToDouble_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToDouble(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent double-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double ToDouble (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A double-precision floating-point number equivalent to <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation can produce round-off errors because a double-precision floating-point number has fewer significant digits than a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the conversion can entail a loss of precision, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts <code>Decimal</code> numbers to <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values using <code>ToDouble</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.ToXXX#5\">// Example of the Decimal::ToSingle and Decimal::ToDouble methods.\nusing namespace System;\n#define formatter &quot;{0,30}{1,17}{2,23}&quot;\n\n// Convert the Decimal argument; no exceptions are thrown.\nvoid DecimalToSgl_Dbl( Decimal argument )\n{\n   Object^ SingleValue;\n   Object^ DoubleValue;\n   \n   // Convert the argument to a float value.\n   SingleValue = Decimal::ToSingle( argument );\n   \n   // Convert the argument to a double value.\n   DoubleValue = Decimal::ToDouble( argument );\n   Console::WriteLine( formatter, argument, SingleValue, DoubleValue );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the <br>&quot;\n   &quot;  Decimal::ToSingle( Decimal ) and <br>&quot;\n   &quot;  Decimal::ToDouble( Decimal ) <br>methods &quot;\n   &quot;generates the following output. It <br>displays &quot;\n   &quot;several converted Decimal values.<br>&quot; );\n   Console::WriteLine( formatter, &quot;Decimal argument&quot;, &quot;float&quot;, &quot;double&quot; );\n   Console::WriteLine( formatter, &quot;----------------&quot;, &quot;-----&quot;, &quot;------&quot; );\n   \n   // Convert Decimal values and display the results.\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;0.0000000000000000000000000001&quot; ) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;0.0000000000123456789123456789&quot; ) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;123&quot; ) );\n   DecimalToSgl_Dbl( Decimal(123000000,0,0,false,6) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;123456789.123456789&quot; ) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;123456789123456789123456789&quot; ) );\n   DecimalToSgl_Dbl( Decimal::MinValue );\n   DecimalToSgl_Dbl( Decimal::MaxValue );\n}\n\n/*\nThis example of the\n  Decimal::ToSingle( Decimal ) and\n  Decimal::ToDouble( Decimal )\nmethods generates the following output. It\ndisplays several converted Decimal values.\n\n              Decimal argument            float                 double\n              ----------------            -----                 ------\n0.0000000000000000000000000001            1E-28                  1E-28\n0.0000000000123456789123456789     1.234568E-11   1.23456789123457E-11\n                           123              123                    123\n                    123.000000              123                    123\n           123456789.123456789     1.234568E+08       123456789.123457\n   123456789123456789123456789     1.234568E+26   1.23456789123457E+26\n-79228162514264337593543950335    -7.922816E+28  -7.92281625142643E+28\n 79228162514264337593543950335     7.922816E+28   7.92281625142643E+28\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToXXX#5\">&#39; Example of the Decimal.ToSingle and Decimal.ToDouble methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalToSgl_DblDemo\n\n    Dim formatter As String = &quot;{0,30}{1,17}{2,23}&quot;\n\n    &#39; Convert the Decimal argument; no exceptions are thrown.\n    Sub DecimalToSgl_Dbl( argument As Decimal )\n\n        Dim SingleValue   As Object\n        Dim DoubleValue   As Object\n\n        &#39; Convert the argument to a Single value.\n        SingleValue = Decimal.ToSingle( argument )\n\n        &#39; Convert the argument to a Double value.\n        DoubleValue = Decimal.ToDouble( argument )\n\n        Console.WriteLine( formatter, argument, _\n            SingleValue, DoubleValue )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of the &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.ToSingle( Decimal ) and &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.ToDouble( Decimal ) &quot; &amp; vbCrLf &amp; &quot;methods &quot; &amp; _\n            &quot;generates the following output. It &quot; &amp; vbCrLf &amp; _\n            &quot;displays several converted Decimal values.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Decimal argument&quot;, _\n            &quot;Single&quot;, &quot;Double&quot; )\n        Console.WriteLine( formatter, &quot;----------------&quot;, _\n            &quot;------&quot;, &quot;------&quot; )\n\n        &#39; Convert Decimal values and display the results.\n        DecimalToSgl_Dbl( 0.0000000000000000000000000001D )\n        DecimalToSgl_Dbl( 0.0000000000112233445566778899D )\n        DecimalToSgl_Dbl( 123D )\n        DecimalToSgl_Dbl( New Decimal( 123000000, 0, 0, False, 6 ) )\n        DecimalToSgl_Dbl( 123456789.123456789D )\n        DecimalToSgl_Dbl( 123456789123456789123456789D )\n        DecimalToSgl_Dbl( Decimal.MinValue )\n        DecimalToSgl_Dbl( Decimal.MaxValue )\n    End Sub \nEnd Module \n\n&#39; This example of the\n&#39;   Decimal.ToSingle( Decimal ) and\n&#39;   Decimal.ToDouble( Decimal )\n&#39; methods generates the following output. It\n&#39; displays several converted Decimal values.\n&#39; \n&#39;               Decimal argument           Single                 Double\n&#39;               ----------------           ------                 ------\n&#39; 0.0000000000000000000000000001            1E-28                  1E-28\n&#39; 0.0000000000112233445566778899     1.122334E-11   1.12233445566779E-11\n&#39;                            123              123                    123\n&#39;                     123.000000              123                    123\n&#39;            123456789.123456789     1.234568E+08       123456789.123457\n&#39;    123456789123456789123456789     1.234568E+26   1.23456789123457E+26\n&#39; -79228162514264337593543950335    -7.922816E+28  -7.92281625142643E+28\n&#39;  79228162514264337593543950335     7.922816E+28   7.92281625142643E+28\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.ToXXX#5\">// Example of the decimal.ToSingle and decimal.ToDouble methods.\nusing System;\n\nclass DecimalToSgl_DblDemo\n{\n    static string formatter = &quot;{0,30}{1,17}{2,23}&quot;;\n\n    // Convert the decimal argument; no exceptions are thrown.\n    public static void DecimalToSgl_Dbl( decimal argument )\n    {\n        object SingleValue;\n        object DoubleValue;\n\n        // Convert the argument to a float value.\n        SingleValue = decimal.ToSingle( argument );\n\n        // Convert the argument to a double value.\n        DoubleValue = decimal.ToDouble( argument );\n\n        Console.WriteLine( formatter, argument, \n            SingleValue, DoubleValue );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the <br>&quot; +\n            &quot;  decimal.ToSingle( decimal ) and <br>&quot; +\n            &quot;  decimal.ToDouble( decimal ) <br>methods &quot; +\n            &quot;generates the following output. It <br>displays &quot; +\n            &quot;several converted decimal values.<br>&quot; );\n        Console.WriteLine( formatter, &quot;decimal argument&quot;, \n            &quot;float&quot;, &quot;double&quot; );\n        Console.WriteLine( formatter, &quot;----------------&quot;, \n            &quot;-----&quot;, &quot;------&quot; );\n\n        // Convert decimal values and display the results.\n        DecimalToSgl_Dbl( 0.0000000000000000000000000001M );\n        DecimalToSgl_Dbl( 0.0000000000123456789123456789M );\n        DecimalToSgl_Dbl( 123M );\n        DecimalToSgl_Dbl( new decimal( 123000000, 0, 0, false, 6 ) );\n        DecimalToSgl_Dbl( 123456789.123456789M );\n        DecimalToSgl_Dbl( 123456789123456789123456789M );\n        DecimalToSgl_Dbl( decimal.MinValue );\n        DecimalToSgl_Dbl( decimal.MaxValue );\n    }\n}\n\n/*\nThis example of the\n  decimal.ToSingle( decimal ) and\n  decimal.ToDouble( decimal )\nmethods generates the following output. It\ndisplays several converted decimal values.\n\n              decimal argument            float                 double\n              ----------------            -----                 ------\n0.0000000000000000000000000001            1E-28                  1E-28\n0.0000000000123456789123456789     1.234568E-11   1.23456789123457E-11\n                           123              123                    123\n                    123.000000              123                    123\n           123456789.123456789     1.234568E+08       123456789.123457\n   123456789123456789123456789     1.234568E+26   1.23456789123457E+26\n-79228162514264337593543950335    -7.922816E+28  -7.92281625142643E+28\n 79228162514264337593543950335     7.922816E+28   7.92281625142643E+28\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToInt16_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt16(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 16-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short ToInt16 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit signed integer equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a 16-bit integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToInt16 method to convert decimal numbers to <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToInt16#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new Decimal(123000, 0, 0, false, 3),\n                           123.999m, 65535.999m, 65536m,             \n                           32767.999m, 32768m, -0.999m,              \n                           -1m,  -32768.999m, -32769m };\n\n      foreach (var value in values) {\n         try {\n            short number = Decimal.ToInt16(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//     123 --&gt; 123\n//     123.000 --&gt; 123\n//     123.999 --&gt; 123\n//     OverflowException: 65535.999\n//     OverflowException: 65536\n//     32767.999 --&gt; 32767\n//     OverflowException: 32768\n//     -0.999 --&gt; 0\n//     -1 --&gt; -1\n//     -32768.999 --&gt; -32768\n//     OverflowException: -32769\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToInt16#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 123d, New Decimal(123000, 0, 0, false, 3), \n                                  123.999d, 65535.999d, 65536d,\n                                  32767.999d, 32768d, -0.999d, \n                                  -1d,  -32768.999d, -32769d }\n\n      For Each value In values\n         Try\n            Dim number As Short = Decimal.ToInt16(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     123 --&gt; 123\n&#39;     123.000 --&gt; 123\n&#39;     123.999 --&gt; 123\n&#39;     OverflowException: 65535.999\n&#39;     OverflowException: 65536\n&#39;     32767.999 --&gt; 32767\n&#39;     OverflowException: 32768\n&#39;     -0.999 --&gt; 0\n&#39;     -1 --&gt; -1\n&#39;     -32768.999 --&gt; -32768\n&#39;     OverflowException: -32769\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToInt32_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt32(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 32-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int ToInt32 (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer equivalent to the value of <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the integral part of the decimal value; fractional digits are truncated.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a 32-bit integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToInt32 method to convert decimal numbers to <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.ToInt32#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 123d, New Decimal(123000, 0, 0, false, 3), \n                                  123.999d, 4294967295.999d, 4294967296d,\n                                  4294967296d, 2147483647.999d, 2147483648d, \n                                  -0.999d, -1d, -2147483648.999d, -2147483649d }\n\n      For Each value In values\n         Try\n            Dim number As Integer = Decimal.ToInt32(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       123 --&gt; 123\n&#39;       123.000 --&gt; 123\n&#39;       123.999 --&gt; 123\n&#39;       OverflowException: 4294967295.999\n&#39;       OverflowException: 4294967296\n&#39;       OverflowException: 4294967296\n&#39;       2147483647.999 --&gt; 2147483647\n&#39;       OverflowException: 2147483648\n&#39;       -0.999 --&gt; 0\n&#39;       -1 --&gt; -1\n&#39;       -2147483648.999 --&gt; -2147483648\n&#39;       OverflowException: -2147483649\n&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.ToInt32#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new decimal(123000, 0, 0, false, 3), \n                           123.999m, 4294967295.999m, 4294967296m,\n                           4294967296m, 2147483647.999m, 2147483648m, \n                           -0.999m, -1m, -2147483648.999m, -2147483649m };\n\n      foreach (var value in values) {\n         try {\n            int number = Decimal.ToInt32(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//      123 --&gt; 123\n//      123.000 --&gt; 123\n//      123.999 --&gt; 123\n//      OverflowException: 4294967295.999\n//      OverflowException: 4294967296\n//      OverflowException: 4294967296\n//      2147483647.999 --&gt; 2147483647\n//      OverflowException: 2147483648\n//      -0.999 --&gt; 0\n//      -1 --&gt; -1\n//      -2147483648.999 --&gt; -2147483648\n//      OverflowException: -2147483649\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToInt64_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToInt64(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToInt64 (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer equivalent to the value of <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the integral part of the decimal value; fractional digits are truncated.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a 64-bit integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToInt64 method to convert decimal numbers to <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToInt64#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new Decimal(123000, 0, 0, false, 3), \n                           123.999m, 18446744073709551615.999m, \n                           18446744073709551616m, 9223372036854775807.999m, \n                           9223372036854775808m, -0.999m, -1m, \n                           -9223372036854775808.999m, \n                           -9223372036854775809m };\n                     \n      foreach (var value in values) {\n         try {             \n            long number = Decimal.ToInt64(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//   123 --&gt; 123\n//   123.000 --&gt; 123\n//   123.999 --&gt; 123\n//   OverflowException: 18446744073709551615.999\n//   OverflowException: 18446744073709551616\n//   9223372036854775807.999 --&gt; 9223372036854775807\n//   OverflowException: 9223372036854775808\n//   -0.999 --&gt; 0\n//   -1 --&gt; -1\n//   -9223372036854775808.999 --&gt; -9223372036854775808\n//   OverflowException: -9223372036854775809\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToInt64#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 123d, New Decimal(123000, 0, 0, false, 3), \n                                  123.999d, 18446744073709551615.999d, \n                                  18446744073709551616d, 9223372036854775807.999d, \n                                  9223372036854775808d, -0.999d, -1d, \n                                  -9223372036854775808.999d, \n                                  -9223372036854775809d }\n\n      For Each value In values\n         Try\n            Dim number As Long = Decimal.ToInt64(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   123 --&gt; 123\n&#39;   123.000 --&gt; 123\n&#39;   123.999 --&gt; 123\n&#39;   OverflowException: 18446744073709551615.999\n&#39;   OverflowException: 18446744073709551616\n&#39;   9223372036854775807.999 --&gt; 9223372036854775807\n&#39;   OverflowException: 9223372036854775808\n&#39;   -0.999 --&gt; 0\n&#39;   -1 --&gt; -1\n&#39;   -9223372036854775808.999 --&gt; -9223372036854775808\n&#39;   OverflowException: -9223372036854775809\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToOACurrency_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToOACurrency_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToOACurrency(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long ToOACurrency (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit signed integer that contains the OLE Automation equivalent of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <code>ToOACurrency</code> method to convert <code>Decimal</code> numbers to the equivalent OLE Automation Currency values that are contained in <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> fields.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.OACurrency#1\">// Example of the decimal.ToOACurrency method. \nusing System;\n\nclass DecimalToOACurrencyDemo\n{\n    const string dataFmt = &quot;{0,31}{1,27}&quot;;\n\n    // Get the exception type name; remove the namespace prefix.\n    public static string GetExceptionType( Exception ex )\n    {\n        string exceptionType = ex.GetType( ).ToString( );\n        return exceptionType.Substring( \n            exceptionType.LastIndexOf( &#39;.&#39; ) + 1 );\n    }\n\n    // Display the decimal.ToOACurrency parameter and the result \n    // or exception.\n    public static void ShowDecimalToOACurrency( decimal Argument )\n    {\n        // Catch the exception if ToOACurrency( ) throws one.\n        try\n        {\n            long oaCurrency = decimal.ToOACurrency( Argument );\n            Console.WriteLine( dataFmt, Argument, oaCurrency );\n        }\n        catch( Exception ex )\n        {\n            Console.WriteLine( dataFmt, Argument, \n                GetExceptionType( ex ) );\n        }\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the &quot; +\n            &quot;decimal.ToOACurrency( ) method generates <br>the &quot; +\n            &quot;following output. It displays the argument as a &quot; +\n            &quot;decimal <br>and the OLE Automation Currency value &quot; +\n            &quot;as a long.<br>&quot; );\n        Console.WriteLine( dataFmt, &quot;Argument&quot;, \n            &quot;OA Currency or Exception&quot; );\n        Console.WriteLine( dataFmt, &quot;--------&quot;, \n            &quot;------------------------&quot; );\n\n        // Convert decimal values to OLE Automation Currency values.\n        ShowDecimalToOACurrency( 0M );\n        ShowDecimalToOACurrency( 1M );\n        ShowDecimalToOACurrency( 1.0000000000000000000000000000M );\n        ShowDecimalToOACurrency( 100000000000000M );\n        ShowDecimalToOACurrency( 100000000000000.00000000000000M );\n        ShowDecimalToOACurrency( 10000000000000000000000000000M );\n        ShowDecimalToOACurrency( 0.000000000123456789M );\n        ShowDecimalToOACurrency( 0.123456789M );\n        ShowDecimalToOACurrency( 123456789M );\n        ShowDecimalToOACurrency( 123456789000000000M );\n        ShowDecimalToOACurrency( 4294967295M );\n        ShowDecimalToOACurrency( 18446744073709551615M );\n        ShowDecimalToOACurrency( -79.228162514264337593543950335M );\n        ShowDecimalToOACurrency( -79228162514264.337593543950335M );\n    }\n}\n\n/*\nThis example of the decimal.ToOACurrency( ) method generates\nthe following output. It displays the argument as a decimal\nand the OLE Automation Currency value as a long.\n\n                       Argument   OA Currency or Exception\n                       --------   ------------------------\n                              0                          0\n                              1                      10000\n 1.0000000000000000000000000000                      10000\n                100000000000000        1000000000000000000\n 100000000000000.00000000000000        1000000000000000000\n  10000000000000000000000000000          OverflowException\n           0.000000000123456789                          0\n                    0.123456789                       1235\n                      123456789              1234567890000\n             123456789000000000          OverflowException\n                     4294967295             42949672950000\n           18446744073709551615          OverflowException\n-79.228162514264337593543950335                    -792282\n-79228162514264.337593543950335        -792281625142643376\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Decimal.OACurrency#1\">// Example of the Decimal::ToOACurrency method. \nusing namespace System;\n#define dataFmt &quot;{0,31}{1,27}&quot;\n\n// Get the exception type name; remove the namespace prefix.\nString^ GetExceptionType( Exception^ ex )\n{\n   String^ exceptionType = ex-&gt;GetType()-&gt;ToString();\n   return exceptionType-&gt;Substring( exceptionType-&gt;LastIndexOf( &#39;.&#39; ) + 1 );\n}\n\n\n// Display the Decimal::ToOACurrency parameter and the result \n// or exception.\nvoid ShowDecimalToOACurrency( Decimal Argument )\n{\n   \n   // Catch the exception if ToOACurrency( ) throws one.\n   try\n   {\n      __int64 oaCurrency = Decimal::ToOACurrency( Argument );\n      Console::WriteLine( dataFmt, Argument, oaCurrency );\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( dataFmt, Argument, GetExceptionType( ex ) );\n   }\n\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the &quot;\n   &quot;Decimal::ToOACurrency( ) method generates <br>the &quot;\n   &quot;following output. It displays the argument as a &quot;\n   &quot;Decimal <br>and the OLE Automation Currency value &quot;\n   &quot;as an __int64.<br>&quot; );\n   Console::WriteLine( dataFmt, &quot;Argument&quot;, &quot;OA Currency or Exception&quot; );\n   Console::WriteLine( dataFmt, &quot;--------&quot;, &quot;------------------------&quot; );\n   \n   // Convert Decimal values to OLE Automation Currency values.\n   ShowDecimalToOACurrency( Decimal(0) );\n   ShowDecimalToOACurrency( Decimal(1) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;1.0000000000000000000000000000&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;100000000000000&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;100000000000000.00000000000000&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;10000000000000000000000000000&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;0.000000000123456789&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;0.123456789&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;123456789&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;123456789000000000&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;4294967295&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;18446744073709551615&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;-79.228162514264337593543950335&quot; ) );\n   ShowDecimalToOACurrency( Decimal::Parse( &quot;-79228162514264.337593543950335&quot; ) );\n}\n\n/*\nThis example of the Decimal::ToOACurrency( ) method generates\nthe following output. It displays the argument as a Decimal\nand the OLE Automation Currency value as an __int64.\n\n                       Argument   OA Currency or Exception\n                       --------   ------------------------\n                              0                          0\n                              1                      10000\n 1.0000000000000000000000000000                      10000\n                100000000000000        1000000000000000000\n 100000000000000.00000000000000        1000000000000000000\n  10000000000000000000000000000          OverflowException\n           0.000000000123456789                          0\n                    0.123456789                       1235\n                      123456789              1234567890000\n             123456789000000000          OverflowException\n                     4294967295             42949672950000\n           18446744073709551615          OverflowException\n-79.228162514264337593543950335                    -792282\n-79228162514264.337593543950335        -792281625142643376\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.OACurrency#1\">&#39; Example of the Decimal.ToOACurrency method. \nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalToOACurrencyDemo\n    \n    Const dataFmt As String = &quot;{0,31}{1,27}&quot;\n\n    &#39; Get the exception type name; remove the namespace prefix.\n    Function GetExceptionType( ex As Exception ) As String\n\n        Dim exceptionType   As String = ex.GetType( ).ToString( )\n        Return exceptionType.Substring( _\n            exceptionType.LastIndexOf( &quot;.&quot;c ) + 1 )\n    End Function\n\n    &#39; Display the Decimal.ToOACurrency parameter and the result \n    &#39; or exception.\n    Sub ShowDecimalToOACurrency( Argument As Decimal )\n\n        &#39; Catch the exception if ToOACurrency( ) throws one.\n        Try\n            Dim oaCurrency As Long = Decimal.ToOACurrency( Argument )\n            Console.WriteLine( dataFmt, Argument, _\n                oaCurrency )\n\n        Catch ex As Exception\n            Console.WriteLine( dataFmt, Argument, _\n                GetExceptionType( ex ) )\n        End Try\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( &quot;This example of the &quot; &amp; _\n            &quot;Decimal.ToOACurrency( ) method generates &quot; &amp; vbCrLf &amp; _\n            &quot;the following output. It displays the argument as &quot; &amp; _\n            &quot;a Decimal &quot; &amp; vbCrLf &amp; &quot;and the OLE Automation &quot; &amp; _\n            &quot;Currency value as a Long.&quot; &amp; vbCrLf )\n        Console.WriteLine( dataFmt, &quot;Argument&quot;, _\n            &quot;OA Currency or Exception&quot; )\n        Console.WriteLine( dataFmt, &quot;--------&quot;, _\n            &quot;------------------------&quot; )\n\n        &#39; Convert Decimal values to OLE Automation Currency values.\n        ShowDecimalToOACurrency( 0D )\n        ShowDecimalToOACurrency( 1D )\n        ShowDecimalToOACurrency( _\n            Decimal.Parse( &quot;1.0000000000000000000000000000&quot; ) )\n        ShowDecimalToOACurrency( 100000000000000D )\n        ShowDecimalToOACurrency( _\n            Decimal.Parse( &quot;100000000000000.00000000000000&quot; ) )\n        ShowDecimalToOACurrency( 10000000000000000000000000000D )\n        ShowDecimalToOACurrency( 0.000000000123456789D ) \n        ShowDecimalToOACurrency( 0.123456789D ) \n        ShowDecimalToOACurrency( 123456789D ) \n        ShowDecimalToOACurrency( 123456789000000000D ) \n        ShowDecimalToOACurrency( 4294967295D ) \n        ShowDecimalToOACurrency( 18446744073709551615D ) \n        ShowDecimalToOACurrency( -79.228162514264337593543950335D ) \n        ShowDecimalToOACurrency( -79228162514264.337593543950335D ) \n    End Sub\nEnd Module \n\n&#39; This example of the Decimal.ToOACurrency( ) method generates\n&#39; the following output. It displays the argument as a Decimal\n&#39; and the OLE Automation Currency value as a Long.\n&#39; \n&#39;                        Argument   OA Currency or Exception\n&#39;                        --------   ------------------------\n&#39;                               0                          0\n&#39;                               1                      10000\n&#39;  1.0000000000000000000000000000                      10000\n&#39;                 100000000000000        1000000000000000000\n&#39;  100000000000000.00000000000000        1000000000000000000\n&#39;   10000000000000000000000000000          OverflowException\n&#39;            0.000000000123456789                          0\n&#39;                     0.123456789                       1235\n&#39;                       123456789              1234567890000\n&#39;              123456789000000000          OverflowException\n&#39;                      4294967295             42949672950000\n&#39;            18446744073709551615          OverflowException\n&#39; -79.228162514264337593543950335                    -792282\n&#39; -79228162514264.337593543950335        -792281625142643376\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToSByte_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSByte(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 8-bit signed integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte ToSByte (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>An 8-bit signed integer equivalent to <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to an 8-bit signed integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToSByte method to convert decimal numbers to <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToSByte#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new Decimal(78000, 0, 0, false, 3),\n                           78.999m, 255.999m, 256m,             \n                           127.999m, 128m, -0.999m,              \n                           -1m,  -128.999m, -129m };\n\n      foreach (var value in values) {\n         try {\n            sbyte number = Decimal.ToSByte(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//     78 --&gt; 78\n//     78.000 --&gt; 78\n//     78.999 --&gt; 78\n//     OverflowException: 255.999\n//     OverflowException: 256\n//     127.999 --&gt; 127\n//     OverflowException: 128\n//     -0.999 --&gt; 0\n//     -1 --&gt; -1\n//     -128.999 --&gt; -128\n//     OverflowException: -129\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToSByte#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 78d, New Decimal(78000, 0, 0, false, 3), \n                                  78.999d, 255.999d, 256d,\n                                  127.999d, 128d, -0.999d, \n                                  -1d,  -128.999d, -129d }\n\n      For Each value In values\n         Try\n            Dim number As SByte = Decimal.ToSByte(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     78 --&gt; 78\n&#39;     78.000 --&gt; 78\n&#39;     78.999 --&gt; 78\n&#39;     OverflowException: 255.999\n&#39;     OverflowException: 256\n&#39;     127.999 --&gt; 127\n&#39;     OverflowException: 128\n&#39;     -0.999 --&gt; 0\n&#39;     -1 --&gt; -1\n&#39;     -128.999 --&gt; -128\n&#39;     OverflowException: -129\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToSingle_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToSingle(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent single-precision floating-point number.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float ToSingle (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A single-precision floating-point number equivalent to the value of <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation can produce round-off errors because a single-precision floating-point number has fewer significant digits than a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> value by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the conversion can entail a loss of precision, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example converts <code>Decimal</code> numbers to <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a> values using the <code>ToSingle</code> method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.ToXXX#5\">// Example of the Decimal::ToSingle and Decimal::ToDouble methods.\nusing namespace System;\n#define formatter &quot;{0,30}{1,17}{2,23}&quot;\n\n// Convert the Decimal argument; no exceptions are thrown.\nvoid DecimalToSgl_Dbl( Decimal argument )\n{\n   Object^ SingleValue;\n   Object^ DoubleValue;\n   \n   // Convert the argument to a float value.\n   SingleValue = Decimal::ToSingle( argument );\n   \n   // Convert the argument to a double value.\n   DoubleValue = Decimal::ToDouble( argument );\n   Console::WriteLine( formatter, argument, SingleValue, DoubleValue );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the <br>&quot;\n   &quot;  Decimal::ToSingle( Decimal ) and <br>&quot;\n   &quot;  Decimal::ToDouble( Decimal ) <br>methods &quot;\n   &quot;generates the following output. It <br>displays &quot;\n   &quot;several converted Decimal values.<br>&quot; );\n   Console::WriteLine( formatter, &quot;Decimal argument&quot;, &quot;float&quot;, &quot;double&quot; );\n   Console::WriteLine( formatter, &quot;----------------&quot;, &quot;-----&quot;, &quot;------&quot; );\n   \n   // Convert Decimal values and display the results.\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;0.0000000000000000000000000001&quot; ) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;0.0000000000123456789123456789&quot; ) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;123&quot; ) );\n   DecimalToSgl_Dbl( Decimal(123000000,0,0,false,6) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;123456789.123456789&quot; ) );\n   DecimalToSgl_Dbl( Decimal::Parse(  &quot;123456789123456789123456789&quot; ) );\n   DecimalToSgl_Dbl( Decimal::MinValue );\n   DecimalToSgl_Dbl( Decimal::MaxValue );\n}\n\n/*\nThis example of the\n  Decimal::ToSingle( Decimal ) and\n  Decimal::ToDouble( Decimal )\nmethods generates the following output. It\ndisplays several converted Decimal values.\n\n              Decimal argument            float                 double\n              ----------------            -----                 ------\n0.0000000000000000000000000001            1E-28                  1E-28\n0.0000000000123456789123456789     1.234568E-11   1.23456789123457E-11\n                           123              123                    123\n                    123.000000              123                    123\n           123456789.123456789     1.234568E+08       123456789.123457\n   123456789123456789123456789     1.234568E+26   1.23456789123457E+26\n-79228162514264337593543950335    -7.922816E+28  -7.92281625142643E+28\n 79228162514264337593543950335     7.922816E+28   7.92281625142643E+28\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToXXX#5\">&#39; Example of the Decimal.ToSingle and Decimal.ToDouble methods.\nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalToSgl_DblDemo\n\n    Dim formatter As String = &quot;{0,30}{1,17}{2,23}&quot;\n\n    &#39; Convert the Decimal argument; no exceptions are thrown.\n    Sub DecimalToSgl_Dbl( argument As Decimal )\n\n        Dim SingleValue   As Object\n        Dim DoubleValue   As Object\n\n        &#39; Convert the argument to a Single value.\n        SingleValue = Decimal.ToSingle( argument )\n\n        &#39; Convert the argument to a Double value.\n        DoubleValue = Decimal.ToDouble( argument )\n\n        Console.WriteLine( formatter, argument, _\n            SingleValue, DoubleValue )\n    End Sub\n\n    Sub Main( )\n\n        Console.WriteLine( &quot;This example of the &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.ToSingle( Decimal ) and &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.ToDouble( Decimal ) &quot; &amp; vbCrLf &amp; &quot;methods &quot; &amp; _\n            &quot;generates the following output. It &quot; &amp; vbCrLf &amp; _\n            &quot;displays several converted Decimal values.&quot; &amp; vbCrLf )\n        Console.WriteLine( formatter, &quot;Decimal argument&quot;, _\n            &quot;Single&quot;, &quot;Double&quot; )\n        Console.WriteLine( formatter, &quot;----------------&quot;, _\n            &quot;------&quot;, &quot;------&quot; )\n\n        &#39; Convert Decimal values and display the results.\n        DecimalToSgl_Dbl( 0.0000000000000000000000000001D )\n        DecimalToSgl_Dbl( 0.0000000000112233445566778899D )\n        DecimalToSgl_Dbl( 123D )\n        DecimalToSgl_Dbl( New Decimal( 123000000, 0, 0, False, 6 ) )\n        DecimalToSgl_Dbl( 123456789.123456789D )\n        DecimalToSgl_Dbl( 123456789123456789123456789D )\n        DecimalToSgl_Dbl( Decimal.MinValue )\n        DecimalToSgl_Dbl( Decimal.MaxValue )\n    End Sub \nEnd Module \n\n&#39; This example of the\n&#39;   Decimal.ToSingle( Decimal ) and\n&#39;   Decimal.ToDouble( Decimal )\n&#39; methods generates the following output. It\n&#39; displays several converted Decimal values.\n&#39; \n&#39;               Decimal argument           Single                 Double\n&#39;               ----------------           ------                 ------\n&#39; 0.0000000000000000000000000001            1E-28                  1E-28\n&#39; 0.0000000000112233445566778899     1.122334E-11   1.12233445566779E-11\n&#39;                            123              123                    123\n&#39;                     123.000000              123                    123\n&#39;            123456789.123456789     1.234568E+08       123456789.123457\n&#39;    123456789123456789123456789     1.234568E+26   1.23456789123457E+26\n&#39; -79228162514264337593543950335    -7.922816E+28  -7.92281625142643E+28\n&#39;  79228162514264337593543950335     7.922816E+28   7.92281625142643E+28\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.ToXXX#5\">// Example of the decimal.ToSingle and decimal.ToDouble methods.\nusing System;\n\nclass DecimalToSgl_DblDemo\n{\n    static string formatter = &quot;{0,30}{1,17}{2,23}&quot;;\n\n    // Convert the decimal argument; no exceptions are thrown.\n    public static void DecimalToSgl_Dbl( decimal argument )\n    {\n        object SingleValue;\n        object DoubleValue;\n\n        // Convert the argument to a float value.\n        SingleValue = decimal.ToSingle( argument );\n\n        // Convert the argument to a double value.\n        DoubleValue = decimal.ToDouble( argument );\n\n        Console.WriteLine( formatter, argument, \n            SingleValue, DoubleValue );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the <br>&quot; +\n            &quot;  decimal.ToSingle( decimal ) and <br>&quot; +\n            &quot;  decimal.ToDouble( decimal ) <br>methods &quot; +\n            &quot;generates the following output. It <br>displays &quot; +\n            &quot;several converted decimal values.<br>&quot; );\n        Console.WriteLine( formatter, &quot;decimal argument&quot;, \n            &quot;float&quot;, &quot;double&quot; );\n        Console.WriteLine( formatter, &quot;----------------&quot;, \n            &quot;-----&quot;, &quot;------&quot; );\n\n        // Convert decimal values and display the results.\n        DecimalToSgl_Dbl( 0.0000000000000000000000000001M );\n        DecimalToSgl_Dbl( 0.0000000000123456789123456789M );\n        DecimalToSgl_Dbl( 123M );\n        DecimalToSgl_Dbl( new decimal( 123000000, 0, 0, false, 6 ) );\n        DecimalToSgl_Dbl( 123456789.123456789M );\n        DecimalToSgl_Dbl( 123456789123456789123456789M );\n        DecimalToSgl_Dbl( decimal.MinValue );\n        DecimalToSgl_Dbl( decimal.MaxValue );\n    }\n}\n\n/*\nThis example of the\n  decimal.ToSingle( decimal ) and\n  decimal.ToDouble( decimal )\nmethods generates the following output. It\ndisplays several converted decimal values.\n\n              decimal argument            float                 double\n              ----------------            -----                 ------\n0.0000000000000000000000000001            1E-28                  1E-28\n0.0000000000123456789123456789     1.234568E-11   1.23456789123457E-11\n                           123              123                    123\n                    123.000000              123                    123\n           123456789.123456789     1.234568E+08       123456789.123457\n   123456789123456789123456789     1.234568E+26   1.23456789123457E+26\n-79228162514264337593543950335    -7.922816E+28  -7.92281625142643E+28\n 79228162514264337593543950335     7.922816E+28   7.92281625142643E+28\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToString\">\r\n    \r\n            <a id=\"System_Decimal_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string that represents the value of this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value in the default (&quot;G&quot;, or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value using the default ToString method. It also displays the string representations of the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value that result from using a number of standard format specifiers.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToString#2\">      decimal value = -16325.62m;\n      // Display value using default ToString method.\n      Console.WriteLine(value.ToString());            // Displays -16325.62\n      // Display value using some standard format specifiers.\n      Console.WriteLine(value.ToString(&quot;G&quot;));         // Displays -16325.62\n      Console.WriteLine(value.ToString(&quot;C&quot;));         // Displays ($16,325.62)\n      Console.WriteLine(value.ToString(&quot;F&quot;));         // Displays -16325.62      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToString#2\">      Dim value As Decimal = -16325.62d\n      &#39; Display value using default ToString method.\n      Console.WriteLine(value.ToString())            &#39; Displays -16325.62\n      &#39; Display value using some standard format specifiers.\n      Console.WriteLine(value.ToString(&quot;G&quot;))         &#39; Displays -16325.62\n      Console.WriteLine(value.ToString(&quot;C&quot;))         &#39; Displays ($16,325.62)\n      Console.WriteLine(value.ToString(&quot;F&quot;))         &#39; Displays -16325.62      \n</code></pre><p> The following example displays the amount of money in an account.  </p>\n<pre><code class=\"lang-cpp\" name=\"Decimal Example#5\">   public ref class PiggyBank\n   {\n   public:\n      void AddPenny()\n      {\n         MyFortune = Decimal::Add( MyFortune, (Decimal).01 );\n      }\n\n      virtual System::String^ ToString() override\n      {\n         return MyFortune.ToString(&quot;C&quot;)+&quot; in piggy bank&quot;;\n      }\n\n   protected:\n      Decimal MyFortune;\n   };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Decimal Example#5\">    Class PiggyBank\n\n        Public Sub AddPenny()\n            MyFortune = [Decimal].Add(MyFortune, 0.01D)\n        End Sub\n\n        Public Overrides Function ToString() As String\n            Return MyFortune.ToString(&quot;C&quot;) + &quot; in piggy bank&quot;\n        End Function\n\n        Protected MyFortune As Decimal\n    End Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Decimal Example#5\">\tclass PiggyBank {\n\t\tpublic void AddPenny() {\n\t\t\tMyFortune = Decimal.Add(MyFortune, .01m);\n\t\t}\n\n\t\tpublic override string ToString() {\n\t\t\treturn MyFortune.ToString(&quot;C&quot;)+&quot; in piggy bank&quot;;\n\t\t}\n\n\t\tprotected decimal MyFortune;\n\t}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value in the default (&quot;G&quot;, or general) format of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. Typically, <code>provider</code> is a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object or a <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in formatting. If <code>provider</code> is <code>null</code>, the thread current culture is used.  </p>\n<p>To convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to its string representation using a specified culture and a specific format string, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.ToString(String,IFormatProvider)</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays the string representation of a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value using <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> objects that represent several different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToString#3\">      decimal value = -16325.62m;\n      // Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture));\n      // Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)));\n      // Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)));\n      // This example displays the following output to the console:\n      //       -16325.62\n      //       -16325.62\n      //       -16325,62\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToString#3\">      Dim value As Decimal = -16325.62d\n      &#39; Display value using the invariant culture.\n      Console.WriteLine(value.ToString(CultureInfo.InvariantCulture))\n      &#39; Display value using the en-GB culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)))\n      &#39; Display value using the de-DE culture.\n      Console.WriteLine(value.ToString(CultureInfo.CreateSpecificCulture(&quot;de-DE&quot;)))\n      &#39; This example displays the following output to the console:\n      &#39;       -16325.62\n      &#39;       -16325.62\n      &#39;       -16325,62\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToString_System_String_\">\r\n    \r\n            <a id=\"System_Decimal_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A standard or custom numeric format string (see Remarks).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ToString method formats a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value in a specified format by using the conventions of the current culture. If you want to use the default (&quot;G&quot;, or general) format or specify a different culture, use the other overloads of the ToString method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The ToString method uses the standard or custom numeric format string specified by the <code>format</code> parameter to convert the value of the current instance into its string representation. The <code>format</code> parameter can be any valid <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">standard numeric format specifier</a> except for D, R, and X, as well as any combination of <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">custom numeric format specifiers</a>. If <code>format</code> is <code>null</code> or an empty string, the return value of this instance is formatted with the general numeric format specifier (G).  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The return value is formatted by using the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object for the current culture. To apply the formatting conventions of a specified culture, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a> method.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value using each of the supported standard numeric format specifiers, together with two custom numeric format strings. In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToString#4\">      decimal value = 16325.62m;\n      string specifier;\n      \n      // Use standard numeric format specifiers.\n      specifier = &quot;G&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    G: 16325.62\n      specifier = &quot;C&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    C: $16,325.62\n      specifier = &quot;E04&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    E04: 1.6326E+004\n      specifier = &quot;F&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    F: 16325.62\n      specifier = &quot;N&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    N: 16,325.62\n      specifier = &quot;P&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value/10000).ToString(specifier));\n      // Displays:    P: 163.26 %\n      \n      // Use custom numeric format specifiers.\n      specifier = &quot;0,0.000&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier));\n      // Displays:    0,0.000: 16,325.620\n      specifier = &quot;#,#.00#;(#,#.00#)&quot;;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value*-1).ToString(specifier));\n      // Displays:    #,#.00#;(#,#.00#): (16,325.62)\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToString#4\">      Dim value As Decimal = 16325.62d\n      Dim specifier As String\n      \n      &#39; Use standard numeric format specifiers.\n      specifier = &quot;G&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    G: 16325.62\n      specifier = &quot;C&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    C: $16,325.62\n      specifier = &quot;E04&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    E04: 1.6326E+004\n      specifier = &quot;F&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    F: 16325.62\n      specifier = &quot;N&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    N: 16,325.62\n      specifier = &quot;P&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value/10000).ToString(specifier))\n      &#39; Displays:    P: 163.26 %\n      \n      &#39; Use custom numeric format specifiers.\n      specifier = &quot;0,0.000&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, value.ToString(specifier))\n      &#39; Displays:    0,0.000: 16,325.620\n      specifier = &quot;#,#.00#;(#,#.00#)&quot;\n      Console.WriteLine(&quot;{0}: {1}&quot;, specifier, (value*-1).ToString(specifier))\n      &#39; Displays:    #,#.00#;(#,#.00#): (16,325.62)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A numeric format string (see Remarks).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string representation of the value of this instance as specified by <code>format</code> and <code>provider</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.double#System_Double_ToString_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(String,IFormatProvider)</a> method formats a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> value in a specified format of a specified culture. If you want to use default format or culture settings, use the other overloads of the <a class=\"xref\" href=\"system.double#System_Double_ToString_\" data-linktype=\"relative-path\">ToString</a> method, as follows:  </p>\n<table>\n<thead>\n<tr>\n<th>To use format</th>\n<th>For culture</th>\n<th>Use the overload</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.double#System_Double_ToString\" data-linktype=\"relative-path\">ToString()</a></td>\n</tr>\n<tr>\n<td>Default (&quot;G&quot;) format</td>\n<td>A specific culture</td>\n<td><a class=\"xref\" href=\"system.double#System_Double_ToString_System_IFormatProvider_\" data-linktype=\"relative-path\">ToString(IFormatProvider)</a></td>\n</tr>\n<tr>\n<td>A specific format</td>\n<td>Default (current) culture</td>\n<td><a class=\"xref\" href=\"system.double#System_Double_ToString_System_String_\" data-linktype=\"relative-path\">ToString(String)</a></td>\n</tr>\n</tbody>\n</table>\n<p> The <code>format</code> parameter can be any valid standard numeric format specifier except for D, R, and X, as well as any combination of custom numeric format specifiers. If <code>format</code> is <code>null</code> or an empty string, the return value for this instance is formatted with the general numeric format specifier (&quot;G&quot;).  </p>\n<p> The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  </p>\n<ul>\n<li><p>For more information about numeric format specifiers, see <a href=\"../Topic/Standard%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Standard Numeric Format Strings</a> and <a href=\"../Topic/Custom%20Numeric%20Format%20Strings.md\" data-linktype=\"relative-path\">Custom Numeric Format Strings</a>.  </p>\n</li>\n<li><p>For more information about formatting, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.  </p>\n<p>The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation whose <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method returns a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object. Typically, <code>provider</code> is a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in formatting. If <code>provider</code> is <code>null</code>, the thread current culture is used.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example displays a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value using each of the supported standard numeric format specifiers for several different cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToString#5\">      decimal value = 16325.62m;\n      string specifier;\n      CultureInfo culture;\n      \n      // Use standard numeric format specifiers.\n      specifier = &quot;G&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;eu-ES&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16325,62\n      Console.WriteLine(value.ToString(specifier, CultureInfo.InvariantCulture));\n      // Displays:    16325.62\n      \n      specifier = &quot;C&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    $16,325.62\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    &#163;16,325.62\n      \n      specifier = &quot;E04&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;sv-SE&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays: 1,6326E+004   \n       culture = CultureInfo.CreateSpecificCulture(&quot;en-NZ&quot;);\n       Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    1.6326E+004   \n\n      specifier = &quot;F&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16325,62\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-CA&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16325.62\n\n      specifier = &quot;N&quot;;\n      culture = CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16.325,62\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-CA&quot;);\n      Console.WriteLine(value.ToString(specifier, culture));\n      // Displays:    16&#160;325,62\n\n      specifier = &quot;P&quot;;\n      culture = CultureInfo.InvariantCulture;\n      Console.WriteLine((value/10000).ToString(specifier, culture));\n      // Displays:    163.26 %\n      culture = CultureInfo.CreateSpecificCulture(&quot;ar-EG&quot;);\n      Console.WriteLine((value/10000).ToString(specifier, culture));\n      // Displays:    163.256 %\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToString#5\">      Dim value As Decimal = 16325.62d\n      Dim specifier As String\n      Dim culture As CultureInfo\n      \n      &#39; Use standard numeric format specifiers.\n      specifier = &quot;G&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;eu-ES&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16325,62\n      Console.WriteLine(value.ToString(specifier, CultureInfo.InvariantCulture))\n      &#39; Displays:    16325.62\n      \n      specifier = &quot;C&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-US&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    $16,325.62\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    &#163;16,325.62\n      \n      specifier = &quot;E04&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;sv-SE&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays: 1,6326E+004   \n       culture = CultureInfo.CreateSpecificCulture(&quot;en-NZ&quot;)\n       Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    1.6326E+004   \n\n      specifier = &quot;F&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16325,62\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-CA&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16325.62\n\n      specifier = &quot;N&quot;\n      culture = CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16.325,62\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-CA&quot;)\n      Console.WriteLine(value.ToString(specifier, culture))\n      &#39; Displays:    16&#160;325,62\n\n      specifier = &quot;P&quot;\n      culture = CultureInfo.InvariantCulture\n      Console.WriteLine((value/10000).ToString(specifier, culture))\n      &#39; Displays:    163.26 %\n      culture = CultureInfo.CreateSpecificCulture(&quot;ar-EG&quot;)\n      Console.WriteLine((value/10000).ToString(specifier, culture))\n      &#39; Displays:    163.256 %\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToUInt16_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt16(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 16-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort ToUInt16 (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 16-bit unsigned integer equivalent to the value of <code>value</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> or less than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the integral part of the decimal value; fractional digits are truncated.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to a 16-bit unsigned integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToUInt16 method to convert decimal numbers to <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.ToUInt16#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 123d, New Decimal(123000, 0, 0, false, 3), \n                                  123.999d, 65535.999d, 65536d,\n                                  32767.999d, 32768d, -0.999d, \n                                  -1d,  -32768.999d, -32769d }\n\n      For Each value In values\n         Try\n            Dim number As UShort = Decimal.ToUInt16(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     123 --&gt; 123\n&#39;     123.000 --&gt; 123\n&#39;     123.999 --&gt; 123\n&#39;     65535.999 --&gt; 65535\n&#39;     OverflowException: 65536\n&#39;     32767.999 --&gt; 32767\n&#39;     32768 --&gt; 32768\n&#39;     -0.999 --&gt; 0\n&#39;     OverflowException: -1\n&#39;     OverflowException: -32768.999\n&#39;     OverflowException: -32769\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.ToUInt16#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new Decimal(123000, 0, 0, false, 3),\n                           123.999m, 65535.999m, 65536m,             \n                           32767.999m, 32768m, -0.999m,              \n                           -1m,  -32768.999m, -32769m };\n\n      foreach (var value in values) {\n         try {\n            ushort number = Decimal.ToUInt16(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//     123 --&gt; 123\n//     123.000 --&gt; 123\n//     123.999 --&gt; 123\n//     65535.999 --&gt; 65535\n//     OverflowException: 65536\n//     32767.999 --&gt; 32767\n//     32768 --&gt; 32768\n//     -0.999 --&gt; 0\n//     OverflowException: -1\n//     OverflowException: -32768.999\n//     OverflowException: -32769\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToUInt32_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt32(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 32-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint ToUInt32 (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit unsigned integer equivalent to the value of <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is negative or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the integral part of the decimal value; fractional digits are truncated.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to an 32-bit unsigned integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToUInt32 method to convert decimal numbers to <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> values.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.ToUInt32#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 123d, New Decimal(123000, 0, 0, false, 3), \n                                  123.999d, 4294967295.999d, 4294967296d,\n                                  4294967296d, 2147483647.999d, 2147483648d, \n                                  -0.999d, -1d, -2147483648.999d, -2147483649d }\n\n      For Each value In values\n         Try\n            Dim number As UInteger = Decimal.ToUInt32(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     123 --&gt; 123\n&#39;     123.000 --&gt; 123\n&#39;     123.999 --&gt; 123\n&#39;     4294967295.999 --&gt; 4294967295\n&#39;     OverflowException: 4294967296\n&#39;     OverflowException: 4294967296\n&#39;     2147483647.999 --&gt; 2147483647\n&#39;     2147483648 --&gt; 2147483648\n&#39;     -0.999 --&gt; 0\n&#39;     OverflowException: -1\n&#39;     OverflowException: -2147483648.999\n&#39;     OverflowException: -2147483649\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.ToUInt32#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new decimal(123000, 0, 0, false, 3), \n                           123.999m, 4294967295.999m, 4294967296m,\n                           4294967296m, 2147483647.999m, 2147483648m, \n                           -0.999m, -1m, -2147483648.999m, -2147483649m };\n\n      foreach (var value in values) {\n         try {\n            uint number = Decimal.ToUInt32(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//     123 --&gt; 123\n//     123.000 --&gt; 123\n//     123.999 --&gt; 123\n//     4294967295.999 --&gt; 4294967295\n//     OverflowException: 4294967296\n//     OverflowException: 4294967296\n//     2147483647.999 --&gt; 2147483647\n//     2147483648 --&gt; 2147483648\n//     -0.999 --&gt; 0\n//     OverflowException: -1\n//     OverflowException: -2147483648.999\n//     OverflowException: -2147483649\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_ToUInt64_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToUInt64(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> to the equivalent 64-bit unsigned integer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong ToUInt64 (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to convert.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>A 64-bit unsigned integer equivalent to the value of <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p><code>d</code> is negative or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The return value is the integral part of the decimal value; fractional digits are truncated.  </p>\n<p> You can also convert a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value to an 64-bit unsigned integer by using the <a class=\"xref\" href=\"system.decimal#System_Decimal_op_Explicit_\" data-linktype=\"relative-path\">op_Explicit</a> assignment operator. Because the operator performs a narrowing conversion, you must use a casting operator in C# or a conversion function in Visual Basic.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the ToUInt64 method to convert decimal numbers to <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.ToUInt64#1\">using System;\n\nclass Example\n{\n   public static void Main( )\n   {\n      decimal[] values = { 123m, new Decimal(123000, 0, 0, false, 3), \n                           123.999m, 18446744073709551615.999m, \n                           18446744073709551616m, 9223372036854775807.999m, \n                           9223372036854775808m, -0.999m, -1m, \n                           -9223372036854775808.999m, \n                           -9223372036854775809m };\n                     \n      foreach (var value in values) {\n         try {             \n            ulong number = Decimal.ToUInt64(value);\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number);       \n         }\n         catch (OverflowException e)\n         {\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value);\n         }   \n      }\n   }\n}\n// The example displays the following output:\n//     123 --&gt; 123\n//     123.000 --&gt; 123\n//     123.999 --&gt; 123\n//     18446744073709551615.999 --&gt; 18446744073709551615\n//     OverflowException: 18446744073709551616\n//     9223372036854775807.999 --&gt; 9223372036854775807\n//     9223372036854775808 --&gt; 9223372036854775808\n//     -0.999 --&gt; 0\n//     OverflowException: -1\n//     OverflowException: -9223372036854775808.999\n//     OverflowException: -9223372036854775809\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.ToUInt64#1\">Module Example\n   Public Sub Main()\n      Dim values() As Decimal = { 123d, New Decimal(123000, 0, 0, false, 3), \n                                  123.999d, 18446744073709551615.999d, \n                                  18446744073709551616d, 9223372036854775807.999d, \n                                  9223372036854775808d, -0.999d, -1d, \n                                  -9223372036854775808.999d, \n                                  -9223372036854775809d }\n\n      For Each value In values\n         Try\n            Dim number As ULong = Decimal.ToUInt64(value)\n            Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, number)       \n         Catch e As OverflowException\n             Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, value)\n         End Try   \n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;     123 --&gt; 123\n&#39;     123.000 --&gt; 123\n&#39;     123.999 --&gt; 123\n&#39;     18446744073709551615.999 --&gt; 18446744073709551615\n&#39;     OverflowException: 18446744073709551616\n&#39;     9223372036854775807.999 --&gt; 9223372036854775807\n&#39;     9223372036854775808 --&gt; 9223372036854775808\n&#39;     -0.999 --&gt; 0\n&#39;     OverflowException: -1\n&#39;     OverflowException: -9223372036854775808.999\n&#39;     OverflowException: -9223372036854775809\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_Truncate_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_Truncate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Truncate(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the integral digits of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>; any fractional digits are discarded.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal Truncate (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The decimal number to truncate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of <code>d</code> rounded toward zero, to the nearest whole number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method rounds <code>d</code> toward zero, to the nearest whole number, which corresponds to discarding any digits after the decimal point.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <code>Truncate</code> method to discard the fractional digits of several <code>Decimal</code> values.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Decimal.Flr_Neg_Rnd_Trnc#1\">// Example of the Decimal::Negate, Decimal::Floor, and \n// Decimal::Truncate methods. \nusing namespace System;\n\n// Display Decimal parameters and the method results.\nvoid ShowDecimalFloorNegTrunc( Decimal Argument )\n{\n   String^ dataFmt = &quot;{0,-30}{1,26}&quot;;\n   Console::WriteLine();\n   Console::WriteLine( dataFmt, &quot;Decimal Argument&quot;, Argument );\n   Console::WriteLine( dataFmt, &quot;Decimal::Negate( Argument )&quot;, Decimal::Negate( Argument ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Floor( Argument )&quot;, Decimal::Floor( Argument ) );\n   Console::WriteLine( dataFmt, &quot;Decimal::Truncate( Argument )&quot;, Decimal::Truncate( Argument ) );\n}\n\nint main()\n{\n   Console::WriteLine( &quot;This example of the <br>&quot;\n   &quot;  Decimal::Negate( Decimal ), <br>&quot;\n   &quot;  Decimal::Floor( Decimal ), and <br>&quot;\n   &quot;  Decimal::Truncate( Decimal ) <br>&quot;\n   &quot;methods generates the following output.&quot; );\n   \n   // Create pairs of Decimal objects.\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;0&quot; ) );\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;123.456&quot; ) );\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;-123.456&quot; ) );\n   ShowDecimalFloorNegTrunc( Decimal(1230000000,0,0,true,7) );\n   ShowDecimalFloorNegTrunc( Decimal::Parse( &quot;-9999999999.9999999999&quot; ) );\n}\n\n/*\nThis example of the\n  Decimal::Negate( Decimal ),\n  Decimal::Floor( Decimal ), and\n  Decimal::Truncate( Decimal )\nmethods generates the following output.\n\nDecimal Argument                                       0\nDecimal::Negate( Argument )                            0\nDecimal::Floor( Argument )                             0\nDecimal::Truncate( Argument )                          0\n\nDecimal Argument                                 123.456\nDecimal::Negate( Argument )                     -123.456\nDecimal::Floor( Argument )                           123\nDecimal::Truncate( Argument )                        123\n\nDecimal Argument                                -123.456\nDecimal::Negate( Argument )                      123.456\nDecimal::Floor( Argument )                          -124\nDecimal::Truncate( Argument )                       -123\n\nDecimal Argument                            -123.0000000\nDecimal::Negate( Argument )                  123.0000000\nDecimal::Floor( Argument )                          -123\nDecimal::Truncate( Argument )                       -123\n\nDecimal Argument                  -9999999999.9999999999\nDecimal::Negate( Argument )        9999999999.9999999999\nDecimal::Floor( Argument )                  -10000000000\nDecimal::Truncate( Argument )                -9999999999\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Flr_Neg_Rnd_Trnc#1\">// Example of the decimal.Negate, decimal.Floor, and decimal.Truncate \n// methods. \nusing System;\n\nclass DecimalFloorNegTruncDemo\n{\n    const string dataFmt = &quot;{0,-30}{1,26}&quot;;\n\n    // Display decimal parameters and the method results.\n    public static void ShowDecimalFloorNegTrunc( decimal Argument )\n    {\n        Console.WriteLine( );\n        Console.WriteLine( dataFmt, &quot;decimal Argument&quot;, Argument );\n        Console.WriteLine( dataFmt, &quot;decimal.Negate( Argument )&quot;, \n            decimal.Negate( Argument ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Floor( Argument )&quot;, \n            decimal.Floor( Argument ) );\n        Console.WriteLine( dataFmt, &quot;decimal.Truncate( Argument )&quot;, \n            decimal.Truncate( Argument ) );\n    }\n\n    public static void Main( )\n    {\n        Console.WriteLine( &quot;This example of the <br>&quot; +\n            &quot;  decimal.Negate( decimal ), <br>&quot; +\n            &quot;  decimal.Floor( decimal ), and <br>&quot; +\n            &quot;  decimal.Truncate( decimal ) <br>&quot; +\n            &quot;methods generates the following output.&quot; );\n\n        // Create pairs of decimal objects.\n        ShowDecimalFloorNegTrunc( 0M );\n        ShowDecimalFloorNegTrunc( 123.456M );\n        ShowDecimalFloorNegTrunc( -123.456M );\n        ShowDecimalFloorNegTrunc( \n            new decimal( 1230000000, 0, 0, true, 7 ) );\n        ShowDecimalFloorNegTrunc( -9999999999.9999999999M );\n    }\n}\n\n/*\nThis example of the\n  decimal.Negate( decimal ),\n  decimal.Floor( decimal ), and\n  decimal.Truncate( decimal )\nmethods generates the following output.\n\ndecimal Argument                                       0\ndecimal.Negate( Argument )                             0\ndecimal.Floor( Argument )                              0\ndecimal.Truncate( Argument )                           0\n\ndecimal Argument                                 123.456\ndecimal.Negate( Argument )                      -123.456\ndecimal.Floor( Argument )                            123\ndecimal.Truncate( Argument )                         123\n\ndecimal Argument                                -123.456\ndecimal.Negate( Argument )                       123.456\ndecimal.Floor( Argument )                           -124\ndecimal.Truncate( Argument )                        -123\n\ndecimal Argument                            -123.0000000\ndecimal.Negate( Argument )                   123.0000000\ndecimal.Floor( Argument )                           -123\ndecimal.Truncate( Argument )                        -123\n\ndecimal Argument                  -9999999999.9999999999\ndecimal.Negate( Argument )         9999999999.9999999999\ndecimal.Floor( Argument )                   -10000000000\ndecimal.Truncate( Argument )                 -9999999999\n*/ \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Flr_Neg_Rnd_Trnc#1\">&#39; Example of the Decimal.Negate, Decimal.Floor, and Decimal.Truncate \n&#39; methods. \nImports System\nImports Microsoft.VisualBasic\n\nModule DecimalFloorNegTruncDemo\n    \n    Const dataFmt As String = &quot;{0,-30}{1,26}&quot;\n\n    &#39; Display Decimal parameters and their product, quotient, and \n    &#39; remainder.\n    Sub ShowDecimalFloorNegTrunc( Argument as Decimal )\n\n        Console.WriteLine( )\n        Console.WriteLine( dataFmt, &quot;Decimal Argument&quot;, Argument )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Negate( Argument )&quot;, _\n            Decimal.Negate( Argument ) )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Floor( Argument )&quot;, _\n            Decimal.Floor( Argument ) )\n        Console.WriteLine( dataFmt, _\n            &quot;Decimal.Truncate( Argument )&quot;, _\n            Decimal.Truncate( Argument ) )\n    End Sub\n\n    Sub Main( )\n        Console.WriteLine( &quot;This example of the &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.Negate( Decimal ), &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.Floor( Decimal ), and &quot; &amp; vbCrLf &amp; _\n            &quot;  Decimal.Truncate( Decimal ) &quot; &amp; vbCrLf &amp; _\n            &quot;methods generates the following output.&quot; )\n\n        &#39; Create pairs of Decimal objects.\n        ShowDecimalFloorNegTrunc( 0D ) \n        ShowDecimalFloorNegTrunc( 123.456D ) \n        ShowDecimalFloorNegTrunc( -123.456D ) \n        ShowDecimalFloorNegTrunc( _\n            new Decimal( 1230000000, 0, 0, True, 7 ) )\n        ShowDecimalFloorNegTrunc( -9999999999.9999999999D )\n    End Sub\nEnd Module \n\n&#39; This example of the\n&#39;   Decimal.Negate( Decimal ),\n&#39;   Decimal.Floor( Decimal ), and\n&#39;   Decimal.Truncate( Decimal )\n&#39; methods generates the following output.\n&#39; \n&#39; Decimal Argument                                       0\n&#39; Decimal.Negate( Argument )                             0\n&#39; Decimal.Floor( Argument )                              0\n&#39; Decimal.Truncate( Argument )                           0\n&#39; \n&#39; Decimal Argument                                 123.456\n&#39; Decimal.Negate( Argument )                      -123.456\n&#39; Decimal.Floor( Argument )                            123\n&#39; Decimal.Truncate( Argument )                         123\n&#39; \n&#39; Decimal Argument                                -123.456\n&#39; Decimal.Negate( Argument )                       123.456\n&#39; Decimal.Floor( Argument )                           -124\n&#39; Decimal.Truncate( Argument )                        -123\n&#39; \n&#39; Decimal Argument                            -123.0000000\n&#39; Decimal.Negate( Argument )                   123.0000000\n&#39; Decimal.Floor( Argument )                           -123\n&#39; Decimal.Truncate( Argument )                        -123\n&#39; \n&#39; Decimal Argument                  -9999999999.9999999999\n&#39; Decimal.Negate( Argument )         9999999999.9999999999\n&#39; Decimal.Floor( Argument )                   -10000000000\n&#39; Decimal.Truncate( Argument )                 -9999999999\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_TryParse_System_String_System_Decimal__\">\r\n    \r\n            <a id=\"System_Decimal_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, out decimal result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload differs from the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_\" data-linktype=\"relative-path\">System.Decimal.Parse(String)</a> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> in the event that <code>s</code> is invalid and cannot be successfully parsed.  </p>\n<p> Parameter <code>s</code> contains a number of the form:  </p>\n<p> [ws][sign][digits,]digits[.fractional-digits][ws]  </p>\n<p> Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n<tr>\n<td><em>,</em></td>\n<td>A culture-specific thousands separator symbol.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> Parameter <code>s</code> is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <code>s</code>, use the <a class=\"xref\" href=\"system.decimal#System_Decimal_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Decimal__\" data-linktype=\"relative-path\">System.Decimal.TryParse(String,NumberStyles,IFormatProvider,Decimal)</a> method overload.  </p>\n<p> Parameter <code>s</code> is parsed using the formatting information in a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object initialized for the current system culture. For more information, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrentInfo_\" data-linktype=\"relative-path\">CurrentInfo</a>. To parse a string using the formatting information of some other specified culture, use the <a class=\"xref\" href=\"system.decimal#System_Decimal_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Decimal__\" data-linktype=\"relative-path\">System.Decimal.TryParse(String,NumberStyles,IFormatProvider,Decimal)</a> method overload.  </p>\n<p> If necessary, the value of <code>s</code> is rounded using rounding to nearest.  </p>\n<p> A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object has 29 digits of precision. If <code>s</code> represents a number that has more than 29 digits, but has a fractional part and is within the range of <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> and <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, the number is rounded, not truncated, to 29 digits using rounding to nearest.  </p>\n<p> If during a parse operation a separator is encountered in the <code>s</code> parameter, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the TryParse method to convert the string representations of numeric values to <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It assumes that en-US is the current culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.TryParse#1\">      string value;\n      decimal number;\n      \n      // Parse a floating-point value with a thousands separator.\n      value = &quot;1,643.57&quot;;\n      if (Decimal.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);      \n      \n      // Parse a floating-point value with a currency symbol and a \n      // thousands separator.\n      value = &quot;$1,643.57&quot;;\n      if (Decimal.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);   \n      \n      // Parse value in exponential notation.\n      value = &quot;-1.643e6&quot;;\n      if (Decimal.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);   \n      \n      // Parse a negative integer value.\n      value = &quot;-1689346178821&quot;;\n      if (Decimal.TryParse(value, out number))\n         Console.WriteLine(number);\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value);   \n      // The example displays the following output to the console:\n      //       1643.57\n      //       Unable to parse &#39;$1,643.57&#39;.\n      //       Unable to parse &#39;-1.643e6&#39;.\n      //       -1689346178821      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.TryParse#1\">      Dim value As String\n      Dim number As Decimal\n      \n      &#39; Parse a floating-point value with a thousands separator.\n      value = &quot;1,643.57&quot;\n      If Decimal.TryParse(value, number) Then\n         Console.WriteLine(number)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)      \n      End If   \n      \n      &#39; Parse a floating-point value with a currency symbol and a \n      &#39; thousands separator.\n      value = &quot;$1,643.57&quot;\n      If Decimal.TryParse(value, number) Then\n         Console.WriteLine(number)  \n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End If\n      \n      &#39; Parse value in exponential notation.\n      value = &quot;-1.643e6&quot;\n      If Decimal.TryParse(value, number)\n         Console.WriteLine(number)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End If\n      \n      &#39; Parse a negative integer value.\n      value = &quot;-1689346178821&quot;\n      If Decimal.TryParse(value, number)\n         Console.WriteLine(number)\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;.&quot;, value)   \n      End If\n      &#39; The example displays the following output to the console:\n      &#39;       1643.57\n      &#39;       Unable to parse &#39;$1,643.57&#39;.\n      &#39;       Unable to parse &#39;-1.643e6&#39;.\n      &#39;       -1689346178821      \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_TryParse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_System_Decimal__\">\r\n    \r\n            <a id=\"System_Decimal_TryParse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TryParse(String,NumberStyles,IFormatProvider,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the string representation of a number to its <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out decimal result);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>s</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the number to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>style</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A bitwise combination of enumeration values that indicates the permitted format of <code>s</code>. A typical value to specify is <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that supplies culture-specific parsing information about <code>s</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>result</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>s</code> was converted successfully; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>style</code> is not a <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.  </p>\n<p> -or-  </p>\n<p> <code>style</code> is the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This overload differs from the <a class=\"xref\" href=\"system.decimal#System_Decimal_Parse_System_String_System_Globalization_NumberStyles_System_IFormatProvider_\" data-linktype=\"relative-path\">System.Decimal.Parse(String,NumberStyles,IFormatProvider)</a> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a> in the event that <code>s</code> is invalid and cannot be successfully parsed.  </p>\n<p> The <code>style</code> parameter defines the allowable format of the <code>s</code> parameter for the parse operation to succeed. It must be a combination of bit flags from the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumeration. The following <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> members are not supported:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>  \n</li>\n<li><a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a>  \n\n<p>Depending on the value of style, the <code>s</code> parameter may include the following elements:  </p>\n<p>[ws][$][sign][digits,]digits[.fractional-digits][e[sign]digits][ws]  </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>ws</em></td>\n<td>Optional white space. White space can appear at the beginning of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag. It can appear at the end of <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>$</em></td>\n<td>A culture-specific currency symbol. Its position in the string is defined by the <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyNegativePattern_\" data-linktype=\"relative-path\">CurrencyNegativePattern</a> or <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyPositivePattern_\" data-linktype=\"relative-path\">CurrencyPositivePattern</a> properties of the <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object returned by the <a class=\"xref\" href=\"system.iformatprovider#System_IFormatProvider_GetFormat_\" data-linktype=\"relative-path\">GetFormat</a> method of the <code>provider</code> parameter. The currency symbol can appear in <code>s</code> if <code>style</code> includes the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> flag.</td>\n</tr>\n<tr>\n<td><em>sign</em></td>\n<td>An optional sign.</td>\n</tr>\n<tr>\n<td><em>digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n<tr>\n<td><em>.</em></td>\n<td>A culture-specific decimal point symbol.</td>\n</tr>\n<tr>\n<td><em>fractional-digits</em></td>\n<td>A sequence of digits ranging from 0 to 9.</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>style</code> parameter specifies the permitted format of the <code>s</code> parameter, and can be one or more <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">NumberStyles</a> enumerated constants combined using a bitwise OR operation. If <code>style</code> is null, <code>s</code> is interpreted using the <a class=\"xref\" href=\"system.globalization.numberstyles\" data-linktype=\"relative-path\">System.Globalization.NumberStyles</a> style.  </p>\n<p> The <code>provider</code> parameter is an <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation such as a <a class=\"xref\" href=\"system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> or <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object. The <code>provider</code> parameter supplies culture-specific information used in parsing. If <code>provider</code> is <code>null</code>, the thread current culture is used.  </p>\n<p> A <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object has 29 digits of precision. If <code>s</code> represents a number that has more than 29 digits, but has a fractional part and is within the range of <a class=\"xref\" href=\"system.decimal#System_Decimal_MaxValue\" data-linktype=\"relative-path\">MaxValue</a> and <a class=\"xref\" href=\"system.decimal#System_Decimal_MinValue\" data-linktype=\"relative-path\">MinValue</a>, the number is rounded, not truncated, to 29 digits using rounding to nearest.  </p>\n<p> If a separator is encountered in the <code>s</code> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_\" data-linktype=\"relative-path\">CurrencyDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberDecimalSeparator_\" data-linktype=\"relative-path\">NumberDecimalSeparator</a>, <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_\" data-linktype=\"relative-path\">CurrencyGroupSeparator</a>, and <a class=\"xref\" href=\"system.globalization.numberformatinfo#System_Globalization_NumberFormatInfo_NumberGroupSeparator_\" data-linktype=\"relative-path\">NumberGroupSeparator</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the use of the TryParse method to parse the string representation of a number that has a particular style and is formatted using the conventions of a particular culture.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.TryParse#2\">      string value;\n      NumberStyles style;\n      CultureInfo culture;\n      decimal number;\n      \n      // Parse currency value using en-GB culture.\n      value = &quot;&#163;1,097.63&quot;;\n      style = NumberStyles.Number | NumberStyles.AllowCurrencySymbol;\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);\n      if (Decimal.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      // Displays: \n      //       Converted &#39;&#163;1,097.63&#39; to 1097.63.\n      \n      value = &quot;1345,978&quot;;\n      style = NumberStyles.AllowDecimalPoint;\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;);\n      if (Decimal.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      // Displays:\n      //       Converted &#39;1345,978&#39; to 1345.978.\n\n      value = &quot;1.345,978&quot;;\n      style = NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands;\n      culture = CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;);\n      if (Decimal.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      // Displays: \n      //       Converted &#39;1.345,978&#39; to 1345.978.\n      \n      value = &quot;1 345,978&quot;;\n      if (Decimal.TryParse(value, style, culture, out number))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number);\n      else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value);\n      // Displays:\n      //       Unable to convert &#39;1 345,978&#39;.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.TryParse#2\">      Dim value As String\n      Dim style As NumberStyles\n      Dim culture As CultureInfo\n      Dim number As Decimal\n      \n      &#39; Parse currency value using en-GB culture.\n      value = &quot;&#163;1,097.63&quot;\n      style = NumberStyles.Number Or NumberStyles.AllowCurrencySymbol\n      culture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;)\n      If Decimal.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      &#39; Displays: \n      &#39;       Converted &#39;&#163;1,097.63&#39; to 1097.63.\n      \n      value = &quot;1345,978&quot;\n      style = NumberStyles.AllowDecimalPoint\n      culture = CultureInfo.CreateSpecificCulture(&quot;fr-FR&quot;)\n      If Decimal.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      &#39; Displays:\n      &#39;       Converted &#39;1345,978&#39; to 1345.978.\n\n      value = &quot;1.345,978&quot;\n      style = NumberStyles.AllowDecimalPoint Or NumberStyles.AllowThousands\n      culture = CultureInfo.CreateSpecificCulture(&quot;es-ES&quot;)\n      If Decimal.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      &#39; Displays: \n      &#39;       Converted &#39;1.345,978&#39; to 1345.978.\n      \n      value = &quot;1 345,978&quot;\n      If Decimal.TryParse(value, style, culture, number) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}.&quot;, value, number)\n      Else\n         Console.WriteLine(&quot;Unable to convert &#39;{0}&#39;.&quot;, value)\n      End If    \n      &#39; Displays:\n      &#39;       Unable to convert &#39;1 345,978&#39;.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Addition_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Addition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Addition(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Adds two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Addition (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to add.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to add.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of adding <code>d1</code> and <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Addition method defines the operation of the addition operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 120.07m;\n      Decimal number2 = 163.19m;\n      Decimal number3 = number1 + number2;\n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, \n                        number1, number2, number3);\n   }\n}\n// The example displays the following output:\n//        120.07 + 163.19 = 283.26\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#3\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 120.07d \n      Dim number2 As Decimal = 163.19d \n      Dim number3 As Decimal = number1 + number2\n      Console.WriteLine(&quot;{0} + {1} = {2}&quot;, \n                        number1, number2, number3)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       120.07 + 163.19 = 283.26\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Add_\" data-linktype=\"relative-path\">Add</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Decrement_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Decrement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Decrement(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Decrements the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand by one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Decrement (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to decrement.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of <code>d</code> decremented by 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Decrement method defines the operation of the decrement operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#4\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number = 1079.8m;\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number);\n      Console.WriteLine(&quot;Decremented value: {0:N}&quot;, --number); \n   }\n}\n// The example displays the following output:\n//       Original value:    1,079.80\n//       Decremented value: 1,078.80\n</code></pre><p> Some languages (such as Visual Basic) that lack an increment operator can call the Decrement method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#5\">Module Example\n   Public Sub Main()\n      Dim number As Decimal = 1079.8d\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number)\n      Console.WriteLine(&quot;Decremented value: {0:N}&quot;, Decimal.op_Decrement(number))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original value:    1,079.80\n&#39;       Decremented value: 1,078.80\n</code></pre><p> If your language does not support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Subtract_\" data-linktype=\"relative-path\">Subtract</a> method instead, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number = 1079.8m;\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number);\n      Console.WriteLine(&quot;Decremented value: {0:N}&quot;, Decimal.Subtract(number, 1)); \n   }\n}\n// The example displays the following output:\n//       Original value:    1,079.80\n//       Decremented value: 1,078.80\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#6\">Module Example\n   Public Sub Main()\n      Dim number As Decimal = 1079.8d\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number)\n      Console.WriteLine(&quot;Decremented value: {0:N}&quot;, Decimal.Subtract(number, 1))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original value:    1,079.80\n&#39;       Decremented value: 1,078.80\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Division_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Division_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Division(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Divides two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Division (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dividend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The divisor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of dividing <code>d1</code> by <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></div>\r\n                  </div>\r\n                  <p><code>d2</code> is zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Division method defines the operation of the division operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#7\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16.8m;\n      Decimal number2 = 4.1m;\n      Decimal number3 = number1 / number2;\n      Console.WriteLine(&quot;{0:N2} / {1:N2} = {2:N2}&quot;, \n                        number1, number2, number3);\n   }\n}\n// The example displays the following output:\n//        16.80 / 4.10 = 4.10\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#7\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16.8d \n      Dim number2 As Decimal = 4.1d \n      Dim number3 As Decimal = number1 / number2\n      Console.WriteLine(&quot;{0:N2} / {1:N2} = {2:N2}&quot;, \n                        number1, number2, number3)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16.80 / 4.10 = 4.10\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Divide_\" data-linktype=\"relative-path\">Divide</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Equality_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> and <code>d2</code> are equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Equality method defines the operation of the equality operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#1\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16354.0695m;\n      Decimal number2 = 16354.0699m;\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, number1, \n                        number2, number1 == number2);\n\n      number1 = Decimal.Round(number1, 2);\n      number2 = Decimal.Round(number2, 2);\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, number1, \n                        number2, number1 == number2);\n   }\n}\n// The example displays the following output:\n//       16354.0695 = 16354.0699: False\n//       16354.07 = 16354.07: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#1\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0695d\n      Dim number2 As Decimal = 16354.0699d\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, number1, \n                        number2, number1 = number2)\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} = {1}: {2}&quot;, number1, \n                        number2, number1 = number2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0695 = 16354.0699: False\n&#39;       16354.07 = 16354.07: True\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Equals_\" data-linktype=\"relative-path\">Equals</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Byte_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static byte op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Char_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static char op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Double_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static double op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Int16_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static short op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Int32_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Int64_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static long op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_SByte_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static sbyte op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_Single_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static float op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_UInt16_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ushort op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_UInt32_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static uint op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Decimal_to_System_UInt64_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Decimal)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static ulong op_Explicit (decimal value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Double_to_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Double)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Explicit (double value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Explicit_System_Single_to_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Explicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Explicit(Single)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Explicit (float value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_GreaterThan_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_GreaterThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThan(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is greater than another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThan (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> is greater than <code>d2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GreaterThan method defines the operation of the greater than operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#8\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16354.0699m;\n      Decimal number2 = 16354.0695m;\n      Console.WriteLine(&quot;{0} &gt; {1}: {2}&quot;, number1, \n                        number2, number1 &gt; number2);\n\n      number1 = Decimal.Round(number1, 2);\n      number2 = Decimal.Round(number2, 2);\n      Console.WriteLine(&quot;{0} &gt; {1}: {2}&quot;, number1, \n                        number2, number1 &gt; number2);\n   }\n}\n// The example displays the following output:\n//       16354.0699 &gt; 16354.0695: True\n//       16354.07 &gt; 16354.07: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#8\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &gt; {1}: {2}&quot;, number1, \n                        number2, number1 &gt; number2)\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &gt; {1}: {2}&quot;, number1, \n                        number2, number1 &gt; number2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &gt; 16354.0695: True\n&#39;       16354.07 &gt; 16354.07: False\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. They may also be able to call the GreaterThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#9\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &gt; {1}: {2}&quot;, number1, number2, \n                        Decimal.op_GreaterThan(number1, number2))\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &gt; {1}: {2}&quot;, number1, number2, \n                        Decimal.op_GreaterThan(number1, number2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &gt; 16354.0695: True\n&#39;       16354.07 &gt; 16354.07: False\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_GreaterThanOrEqual_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_GreaterThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_GreaterThanOrEqual(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is greater than or equal to another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_GreaterThanOrEqual (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> is greater than or equal to <code>d2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GreaterThanOrEqual method defines the operation of the greater than or equal operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#10\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16354.0699m;\n      Decimal number2 = 16354.0695m;\n      Console.WriteLine(&quot;{0} &gt;= {1}: {2}&quot;, number1, \n                        number2, number1 &gt;= number2);\n\n      number1 = Decimal.Round(number1, 2);\n      number2 = Decimal.Round(number2, 2);\n      Console.WriteLine(&quot;{0} &gt;= {1}: {2}&quot;, number1, \n                        number2, number1 &gt;= number2);\n   }\n}\n// The example displays the following output:\n//       16354.0699 &gt;= 16354.0695: True\n//       16354.07 &gt;= 16354.07: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#10\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &gt;= {1}: {2}&quot;, number1, \n                        number2, number1 &gt;= number2)\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &gt;= {1}: {2}&quot;, number1, \n                        number2, number1 &gt;= number2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &gt;= 16354.0695: True\n&#39;       16354.07 &gt;= 16354.07: True\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. They may also be able to call the GreaterThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#11\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &gt;= {1}: {2}&quot;, number1, number2, \n                        Decimal.op_GreaterThanOrEqual(number1, number2))\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &gt;= {1}: {2}&quot;, number1, number2, \n                        Decimal.op_GreaterThanOrEqual(number1, number2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &gt;= 16354.0695: True\n&#39;       16354.07 &gt;= 16354.07: True\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_Byte_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Byte)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (byte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_Char_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Char)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (char value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_Int16_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Int16)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (short value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_Int32_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Int32)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_Int64_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(Int64)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_SByte_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(SByte)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (sbyte value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_UInt16_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(UInt16)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (ushort value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_UInt32_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(UInt32)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (uint value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Implicit_System_UInt64_\">\r\n    \r\n            <a id=\"System_Decimal_op_Implicit_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Implicit(UInt64)</div>        \r\n          </div>\r\n    \r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Implicit (ulong value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>To be added.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Increment_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Increment_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Increment(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Increments the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand by 1.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Increment (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to increment.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of <code>d</code> incremented by 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Increment method defines the operation of the increment operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#12\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number = 1079.8m;\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number);\n      Console.WriteLine(&quot;Incremented value: {0:N}&quot;, ++number); \n   }\n}\n// The example displays the following output:\n//       Original value:    1,079.80\n//       Incremented value: 1,080.80\n</code></pre><p> Some languages (such as Visual Basic) that lack an increment operator can call the Increment method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#13\">Module Example\n   Public Sub Main()\n      Dim number As Decimal = 1079.8d\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number)\n      Console.WriteLine(&quot;Incremented value: {0:N}&quot;, Decimal.op_Increment(number))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original value:    1,079.80\n&#39;       Incremented value: 1,080.80\n</code></pre><p> If your language does not support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Add_\" data-linktype=\"relative-path\">Add</a> method instead, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#14\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number = 1079.8m;\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number);\n      Console.WriteLine(&quot;Incremented value: {0:N}&quot;, Decimal.Add(number, 1)); \n   }\n}\n// The example displays the following output:\n//       Original value:    1,079.80\n//       Incremented value: 1,080.80\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#14\">Module Example\n   Public Sub Main()\n      Dim number As Decimal = 1079.8d\n      Console.WriteLine(&quot;Original value:    {0:N}&quot;, number)\n      Console.WriteLine(&quot;Incremented value: {0:N}&quot;, Decimal.Add(number, 1))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Original value:    1,079.80\n&#39;       Incremented value: 1,080.80\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Inequality_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> objects have different values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> and <code>d2</code> are not equal; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Inequality method defines the operation of the inequality operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16354.0695m;\n      Decimal number2 = 16354.0699m;\n      Console.WriteLine(&quot;{0} &lt;&gt; {1}: {2}&quot;, number1, \n                        number2, number1 != number2);\n\n      number1 = Decimal.Round(number1, 2);\n      number2 = Decimal.Round(number2, 2);\n      Console.WriteLine(&quot;{0} &lt;&gt; {1}: {2}&quot;, number1, \n                        number2, number1 != number2);\n   }\n}\n// The example displays the following output:\n//       16354.0695 = 16354.0699: True\n//       16354.07 = 16354.07: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#2\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0695d\n      Dim number2 As Decimal = 16354.0699d\n      Console.WriteLine(&quot;{0} &lt;&gt; {1}: {2}&quot;, number1, \n                        number2, number1 &lt;&gt; number2)\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &lt;&gt; {1}: {2}&quot;, number1, \n                        number2, number1 &lt;&gt; number2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0695 = 16354.0699: True\n&#39;       16354.07 = 16354.07: False\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, you can test for inequality by using one of the following techniques:  </p>\n<ul>\n<li><p>Calling the <a class=\"xref\" href=\"system.decimal#System_Decimal_Compare_\" data-linktype=\"relative-path\">Compare</a> method, which indicates the relationship between two <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.  </p>\n</li>\n<li><p>Calling the <a class=\"xref\" href=\"system.decimal#System_Decimal_Equals_\" data-linktype=\"relative-path\">Equals</a> method and reversing its value.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_LessThan_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_LessThan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThan(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is less than another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThan (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> is less than <code>d2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LessThan method defines the operation of the less than operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#15\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16354.0699m;\n      Decimal number2 = 16354.0695m;\n      Console.WriteLine(&quot;{0} &lt; {1}: {2}&quot;, number1, \n                        number2, number1 &lt; number2);\n\n      number1 = Decimal.Round(number1, 2);\n      number2 = Decimal.Round(number2, 2);\n      Console.WriteLine(&quot;{0} &lt; {1}: {2}&quot;, number1, \n                        number2, number1 &lt; number2);\n   }\n}\n// The example displays the following output:\n//       16354.0699 &lt; 16354.0695: False\n//       16354.07 &lt; 16354.07: False\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#15\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &lt; {1}: {2}&quot;, number1, \n                        number2, number1 &lt; number2)\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &lt; {1}: {2}&quot;, number1, \n                        number2, number1 &lt; number2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &lt; 16354.0695: False\n&#39;       16354.07 &lt; 16354.07: False\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. They may also be able to call the LessThan method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#16\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &lt; {1}: {2}&quot;, number1, number2, \n                        Decimal.op_LessThan(number1, number2))\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &lt; {1}: {2}&quot;, number1, number2, \n                        Decimal.op_LessThan(number1, number2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &lt; 16354.0695: False\n&#39;       16354.07 &lt; 16354.07: False\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_LessThanOrEqual_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_LessThanOrEqual_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_LessThanOrEqual(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value indicating whether a specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> is less than or equal to another specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_LessThanOrEqual (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>d1</code> is less than or equal to <code>d2</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LessThanOrEqual method defines the operation of the less than or equal operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#17\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16354.0699m;\n      Decimal number2 = 16354.0695m;\n      Console.WriteLine(&quot;{0} &lt;= {1}: {2}&quot;, number1, \n                        number2, number1 &lt;= number2);\n\n      number1 = Decimal.Round(number1, 2);\n      number2 = Decimal.Round(number2, 2);\n      Console.WriteLine(&quot;{0} &lt;= {1}: {2}&quot;, number1, \n                        number2, number1 &lt;= number2);\n   }\n}\n// The example displays the following output:\n//       16354.0699 &lt;= 16354.0695: False\n//       16354.07 &lt;= 16354.07: True\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#17\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &lt;= {1}: {2}&quot;, number1, \n                        number2, number1 &lt;= number2)\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &lt;= {1}: {2}&quot;, number1, \n                        number2, number1 &lt;= number2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &lt;= 16354.0695: False\n&#39;       16354.07 &lt;= 16354.07: True\n</code></pre><p> Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Compare_\" data-linktype=\"relative-path\">Compare</a> method instead. They may also be able to call the LessThanOrEqual method directly, as the following example shows.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#18\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16354.0699d\n      Dim number2 As Decimal = 16354.0695d\n      Console.WriteLine(&quot;{0} &lt;= {1}: {2}&quot;, number1, number2, \n                        Decimal.op_LessThanOrEqual(number1, number2))\n\n      number1 = Decimal.Round(number1, 2)\n      number2 = Decimal.Round(number2, 2)\n      Console.WriteLine(&quot;{0} &lt;= {1}: {2}&quot;, number1, number2, \n                        Decimal.op_LessThanOrEqual(number1, number2))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16354.0699 &gt;= 16354.0695: False\n&#39;       16354.07 &gt;= 16354.07: True\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Modulus_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Modulus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Modulus(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the remainder resulting from dividing two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Modulus (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The dividend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The divisor.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The remainder resulting from dividing <code>d1</code> by <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a></div>\r\n                  </div>\r\n                  <p><code>d2</code> is <code>zero</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Modulus method defines the operation of the modulus operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#19\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16.8d \n      Dim number2 As Decimal = 4.1d \n      Dim number3 As Decimal = number1 Mod number2\n      Console.WriteLine(&quot;{0:N2} Mod {1:N2} = {2:N2}&quot;, \n                        number1, number2, number3)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16.80 Mod 4.10 = 0.40\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#19\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16.8m;\n      Decimal number2 = 4.1m;\n      Decimal number3 = number1 % number2;\n      Console.WriteLine(&quot;{0:N2} % {1:N2} = {2:N2}&quot;, \n                        number1, number2, number3);\n   }\n}\n// The example displays the following output:\n//        16.80 % 4.10 = 0.40\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Remainder_\" data-linktype=\"relative-path\">Remainder</a> method instead.  </p>\n<p> The sign of the value return by the modulus operation depends on the sign of dividend. If dividend is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Multiply_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Multiply_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Multiply(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Multiply (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first value to multiply.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second value to multiply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of multiplying <code>d1</code> by <code>d2</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Multiply method defines the operation of the multiplication operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#20\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 16.8m;\n      Decimal number2 = 4.1m;\n      Decimal number3 = number1 * number2;\n      Console.WriteLine(&quot;{0:N2} x {1:N2} = {2:N2}&quot;, \n                        number1, number2, number3);\n   }\n}\n// The example displays the following output:\n//        16.80 x 4.10 = 68.88\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#20\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 16.8d \n      Dim number2 As Decimal = 4.1d \n      Dim number3 As Decimal = number1 * number2\n      Console.WriteLine(&quot;{0:N2} x {1:N2} = {2:N2}&quot;, \n                        number1, number2, number3)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       16.80 x 4.10 = 68.88\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Multiply_\" data-linktype=\"relative-path\">Multiply</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_Subtraction_System_Decimal_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_Subtraction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Subtraction(Decimal,Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Subtracts two specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_Subtraction (decimal d1, decimal d2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The minuend.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>d2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The subtrahend.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of subtracting <code>d2</code> from <code>d1</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The return value is less than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> or greater than <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Subtraction method defines the operation of the subtraction operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. It enables code such as the following:  </p>\n<pre><code class=\"lang-cs\" name=\"System.Decimal.Operators#21\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Decimal number1 = 120.07m;\n      Decimal number2 = 163.19m;\n      Decimal number3 = number1 - number2;\n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, \n                        number1, number2, number3);\n   }\n}\n// The example displays the following output:\n//        120.07 - 163.19 = -43.12\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Decimal.Operators#21\">Module Example\n   Public Sub Main()\n      Dim number1 As Decimal = 120.07d \n      Dim number2 As Decimal = 163.19d \n      Dim number3 As Decimal = number1 - number2\n      Console.WriteLine(&quot;{0} - {1} = {2}&quot;, \n                        number1, number2, number3)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       120.07 - 163.19 = -43.12\n</code></pre><p> If the language you&#39;re using doesn&#39;t support custom operators, call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Subtract_\" data-linktype=\"relative-path\">Subtract</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_UnaryNegation_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_UnaryNegation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_UnaryNegation(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Negates the value of the specified <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_UnaryNegation (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to negate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The result of <code>d</code> multiplied by negative one (-1).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.decimal#System_Decimal_op_UnaryPlus_\" data-linktype=\"relative-path\">op_UnaryPlus</a> method defines the operation of the unary negation operator (or the additive inverse operator) for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <a class=\"xref\" href=\"system.decimal#System_Decimal_Negate_\" data-linktype=\"relative-path\">Negate</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_op_UnaryPlus_System_Decimal_\">\r\n    \r\n            <a id=\"System_Decimal_op_UnaryPlus_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_UnaryPlus(Decimal)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the value of the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> operand (the sign of the operand is unchanged).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static decimal op_UnaryPlus (decimal d);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>d</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The operand to return.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of the operand, <code>d</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The UnaryPlus method defines the operation of the unary positive operator for <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> values.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToBoolean_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToBoolean(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToBoolean*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IConvertible.ToBoolean (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the value of the current instance is not zero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <a class=\"xref\" href=\"system.convert#System_Convert_ToBoolean_System_Decimal_\" data-linktype=\"relative-path\">System.Convert.ToBoolean(Decimal)</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">byte IConvertible.ToByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> or greater than <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToByte_\" data-linktype=\"relative-path\">ToByte</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToByte_\" data-linktype=\"relative-path\">ToByte</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToChar_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToChar(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">char IConvertible.ToChar (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>None. This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToDateTime_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToDateTime_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDateTime(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>This conversion is not supported. Attempting to use this method throws an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">DateTime IConvertible.ToDateTime (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></div>\r\n                  </div>\r\n                  <p>None. This conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>In all cases.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToDecimal_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDecimal(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDecimal*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">decimal IConvertible.ToDecimal (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, unchanged.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToDouble_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToDouble(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToDouble*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">double IConvertible.ToDouble (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToDouble_\" data-linktype=\"relative-path\">ToDouble</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToDouble_\" data-linktype=\"relative-path\">ToDouble</a> method.  </p>\n<p> Because a <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> has fewer significant digits than a <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a>, this operation may produce round-off errors.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">short IConvertible.ToInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a> or greater than <a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToInt16_\" data-linktype=\"relative-path\">ToInt16</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt16_\" data-linktype=\"relative-path\">ToInt16</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value is rounded toward zero to the nearest integer value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IConvertible.ToInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> or greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt32_\" data-linktype=\"relative-path\">ToInt32</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value is rounded toward zero to the nearest integer value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">long IConvertible.ToInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> or greater than <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToInt64_\" data-linktype=\"relative-path\">ToInt64</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToInt64_\" data-linktype=\"relative-path\">ToInt64</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToSByte_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSByte(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSByte*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">sbyte IConvertible.ToSByte (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a> or greater than <a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToSByte_\" data-linktype=\"relative-path\">ToSByte</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToSByte_\" data-linktype=\"relative-path\">ToSByte</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToSingle_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToSingle(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToSingle*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">float IConvertible.ToSingle (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToSingle_\" data-linktype=\"relative-path\">ToSingle</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToType_System_Type_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToType(Type,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToType*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object IConvertible.ToType (Type type, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>type</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type to which to convert the value of this <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> implementation that supplies culture-specific information about the format of the returned value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <code>type</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>type</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The requested type conversion is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call the <code>static</code> (<code>Shared</code> in Visual Basic) <a class=\"xref\" href=\"system.convert#System_Convert_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a> method instead.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToUInt16_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt16(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToUInt16*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ushort IConvertible.ToUInt16 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a> or greater than <a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToUInt16_\" data-linktype=\"relative-path\">ToUInt16</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt16_\" data-linktype=\"relative-path\">ToUInt16</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToUInt32_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt32(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt32*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">uint IConvertible.ToUInt32 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a> or greater than <a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value is rounded toward zero to the nearest integer value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_IConvertible_ToUInt64_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Decimal_System_IConvertible_ToUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IConvertible.ToUInt64(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.IConvertible.ToInt64*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">ulong IConvertible.ToUInt64 (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This parameter is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>The value of the current instance, converted to a <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a></div>\r\n                  </div>\r\n                  <p>The resulting integer value is less than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a> or greater than <a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> instance is cast to an <a class=\"xref\" href=\"system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a> interface. The recommended alternative is to call either the <a class=\"xref\" href=\"system.decimal#System_Decimal_ToUInt64_\" data-linktype=\"relative-path\">ToUInt64</a> method or the <a class=\"xref\" href=\"system.convert#System_Convert_ToUInt64_\" data-linktype=\"relative-path\">ToUInt64</a> method.  </p>\n<p> The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> value is rounded toward zero to the nearest integer value.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Decimal_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_Decimal_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IDeserializationCallback.OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Runs when the deserialization of an object has been completed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IDeserializationCallback.OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that initiated the callback. The functionality for this parameter is not currently implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a> object contains invalid or corrupted data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Decimal.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Decimal.yml\">\r\n<meta name=\"APIName\" content=\"System.Decimal\">\r\n<meta name=\"APIName\" content=\"System.Decimal..ctor\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Add\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Ceiling\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Compare\">\r\n<meta name=\"APIName\" content=\"System.Decimal.CompareTo\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Divide\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Equals\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Floor\">\r\n<meta name=\"APIName\" content=\"System.Decimal.FromOACurrency\">\r\n<meta name=\"APIName\" content=\"System.Decimal.GetBits\">\r\n<meta name=\"APIName\" content=\"System.Decimal.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Decimal.GetTypeCode\">\r\n<meta name=\"APIName\" content=\"System.Decimal.MaxValue\">\r\n<meta name=\"APIName\" content=\"System.Decimal.MinusOne\">\r\n<meta name=\"APIName\" content=\"System.Decimal.MinValue\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Multiply\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Negate\">\r\n<meta name=\"APIName\" content=\"System.Decimal.One\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Addition\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Decrement\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Decrement\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Division\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Division\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Explicit\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_GreaterThan\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_GreaterThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Implicit\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Increment\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Increment\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_LessThan\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_LessThanOrEqual\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Modulus\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Modulus\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Multiply\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_Subtraction\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_UnaryNegation\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.Decimal.op_op_UnaryPlus\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Parse\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Remainder\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Round\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Subtract\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToBoolean\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToChar\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToDateTime\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToDecimal\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToType\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IConvertible.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Decimal.IDeserializationCallback.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToByte\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToDouble\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToInt16\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToInt32\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToInt64\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToOACurrency\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToSByte\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToSingle\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToString\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToUInt16\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToUInt32\">\r\n<meta name=\"APIName\" content=\"System.Decimal.ToUInt64\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Truncate\">\r\n<meta name=\"APIName\" content=\"System.Decimal.TryParse\">\r\n<meta name=\"APIName\" content=\"System.Decimal.Zero\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"610839d2-e8f7-a6a8-f6a0-90b8d85ef1ab\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a decimal number.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Decimal\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Decimal.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Decimal.yml","open_to_public_contributors":true,"api_name":["System.Decimal","System.Decimal..ctor","System.Decimal.Add","System.Decimal.Ceiling","System.Decimal.Compare","System.Decimal.CompareTo","System.Decimal.Divide","System.Decimal.Equals","System.Decimal.Floor","System.Decimal.FromOACurrency","System.Decimal.GetBits","System.Decimal.GetHashCode","System.Decimal.GetTypeCode","System.Decimal.MaxValue","System.Decimal.MinusOne","System.Decimal.MinValue","System.Decimal.Multiply","System.Decimal.Negate","System.Decimal.One","System.Decimal.op_Addition","System.Decimal.op_op_Addition","System.Decimal.op_Decrement","System.Decimal.op_op_Decrement","System.Decimal.op_Division","System.Decimal.op_op_Division","System.Decimal.op_Equality","System.Decimal.op_op_Equality","System.Decimal.op_Explicit","System.Decimal.op_op_Explicit","System.Decimal.op_GreaterThan","System.Decimal.op_op_GreaterThan","System.Decimal.op_GreaterThanOrEqual","System.Decimal.op_op_GreaterThanOrEqual","System.Decimal.op_Implicit","System.Decimal.op_op_Implicit","System.Decimal.op_Increment","System.Decimal.op_op_Increment","System.Decimal.op_Inequality","System.Decimal.op_op_Inequality","System.Decimal.op_LessThan","System.Decimal.op_op_LessThan","System.Decimal.op_LessThanOrEqual","System.Decimal.op_op_LessThanOrEqual","System.Decimal.op_Modulus","System.Decimal.op_op_Modulus","System.Decimal.op_Multiply","System.Decimal.op_op_Multiply","System.Decimal.op_Subtraction","System.Decimal.op_op_Subtraction","System.Decimal.op_UnaryNegation","System.Decimal.op_op_UnaryNegation","System.Decimal.op_UnaryPlus","System.Decimal.op_op_UnaryPlus","System.Decimal.Parse","System.Decimal.Remainder","System.Decimal.Round","System.Decimal.Subtract","System.Decimal.IConvertible.ToBoolean","System.Decimal.IConvertible.ToByte","System.Decimal.IConvertible.ToChar","System.Decimal.IConvertible.ToDateTime","System.Decimal.IConvertible.ToDecimal","System.Decimal.IConvertible.ToDouble","System.Decimal.IConvertible.ToInt16","System.Decimal.IConvertible.ToInt32","System.Decimal.IConvertible.ToInt64","System.Decimal.IConvertible.ToSByte","System.Decimal.IConvertible.ToSingle","System.Decimal.IConvertible.ToType","System.Decimal.IConvertible.ToUInt16","System.Decimal.IConvertible.ToUInt32","System.Decimal.IConvertible.ToUInt64","System.Decimal.IDeserializationCallback.OnDeserialization","System.Decimal.ToByte","System.Decimal.ToDouble","System.Decimal.ToInt16","System.Decimal.ToInt32","System.Decimal.ToInt64","System.Decimal.ToOACurrency","System.Decimal.ToSByte","System.Decimal.ToSingle","System.Decimal.ToString","System.Decimal.ToUInt16","System.Decimal.ToUInt32","System.Decimal.ToUInt64","System.Decimal.Truncate","System.Decimal.TryParse","System.Decimal.Zero"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Decimal","System::Decimal","System.Decimal.#ctor","System::Decimal::#ctor","System.Decimal.Add","System::Decimal::Add","System.Decimal.Ceiling","System::Decimal::Ceiling","System.Decimal.Compare","System::Decimal::Compare","System.Decimal.CompareTo","System::Decimal::CompareTo","System.Decimal.Divide","System::Decimal::Divide","System.Decimal.Equals","System::Decimal::Equals","System.Decimal.Floor","System::Decimal::Floor","System.Decimal.FromOACurrency","System::Decimal::FromOACurrency","System.Decimal.GetBits","System::Decimal::GetBits","System.Decimal.GetHashCode","System::Decimal::GetHashCode","System.Decimal.GetTypeCode","System::Decimal::GetTypeCode","System.Decimal.MaxValue","System::Decimal::MaxValue","System.Decimal.MinusOne","System::Decimal::MinusOne","System.Decimal.MinValue","System::Decimal::MinValue","System.Decimal.Multiply","System::Decimal::Multiply","System.Decimal.Negate","System::Decimal::Negate","System.Decimal.One","System::Decimal::One","System.Decimal.op_Addition","System::Decimal::op_Addition","System.Decimal.op_Decrement","System::Decimal::op_Decrement","System.Decimal.op_Division","System::Decimal::op_Division","System.Decimal.op_Equality","System::Decimal::op_Equality","System.Decimal.op_Explicit","System::Decimal::op_Explicit","System.Decimal.op_GreaterThan","System::Decimal::op_GreaterThan","System.Decimal.op_GreaterThanOrEqual","System::Decimal::op_GreaterThanOrEqual","System.Decimal.op_Implicit","System::Decimal::op_Implicit","System.Decimal.op_Increment","System::Decimal::op_Increment","System.Decimal.op_Inequality","System::Decimal::op_Inequality","System.Decimal.op_LessThan","System::Decimal::op_LessThan","System.Decimal.op_LessThanOrEqual","System::Decimal::op_LessThanOrEqual","System.Decimal.op_Modulus","System::Decimal::op_Modulus","System.Decimal.op_Multiply","System::Decimal::op_Multiply","System.Decimal.op_Subtraction","System::Decimal::op_Subtraction","System.Decimal.op_UnaryNegation","System::Decimal::op_UnaryNegation","System.Decimal.op_UnaryPlus","System::Decimal::op_UnaryPlus","System.Decimal.Parse","System::Decimal::Parse","System.Decimal.Remainder","System::Decimal::Remainder","System.Decimal.Round","System::Decimal::Round","System.Decimal.Subtract","System::Decimal::Subtract","System.Decimal.System#IConvertible#ToBoolean","System::Decimal::System#IConvertible#ToBoolean","System.Decimal.System#IConvertible#ToByte","System::Decimal::System#IConvertible#ToByte","System.Decimal.System#IConvertible#ToChar","System::Decimal::System#IConvertible#ToChar","System.Decimal.System#IConvertible#ToDateTime","System::Decimal::System#IConvertible#ToDateTime","System.Decimal.System#IConvertible#ToDecimal","System::Decimal::System#IConvertible#ToDecimal","System.Decimal.System#IConvertible#ToDouble","System::Decimal::System#IConvertible#ToDouble","System.Decimal.System#IConvertible#ToInt16","System::Decimal::System#IConvertible#ToInt16","System.Decimal.System#IConvertible#ToInt32","System::Decimal::System#IConvertible#ToInt32","System.Decimal.System#IConvertible#ToInt64","System::Decimal::System#IConvertible#ToInt64","System.Decimal.System#IConvertible#ToSByte","System::Decimal::System#IConvertible#ToSByte","System.Decimal.System#IConvertible#ToSingle","System::Decimal::System#IConvertible#ToSingle","System.Decimal.System#IConvertible#ToType","System::Decimal::System#IConvertible#ToType","System.Decimal.System#IConvertible#ToUInt16","System::Decimal::System#IConvertible#ToUInt16","System.Decimal.System#IConvertible#ToUInt32","System::Decimal::System#IConvertible#ToUInt32","System.Decimal.System#IConvertible#ToUInt64","System::Decimal::System#IConvertible#ToUInt64","System.Decimal.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System::Decimal::System#Runtime#Serialization#IDeserializationCallback#OnDeserialization","System.Decimal.ToByte","System::Decimal::ToByte","System.Decimal.ToDouble","System::Decimal::ToDouble","System.Decimal.ToInt16","System::Decimal::ToInt16","System.Decimal.ToInt32","System::Decimal::ToInt32","System.Decimal.ToInt64","System::Decimal::ToInt64","System.Decimal.ToOACurrency","System::Decimal::ToOACurrency","System.Decimal.ToSByte","System::Decimal::ToSByte","System.Decimal.ToSingle","System::Decimal::ToSingle","System.Decimal.ToString","System::Decimal::ToString","System.Decimal.ToUInt16","System::Decimal::ToUInt16","System.Decimal.ToUInt32","System::Decimal::ToUInt32","System.Decimal.ToUInt64","System::Decimal::ToUInt64","System.Decimal.Truncate","System::Decimal::Truncate","System.Decimal.TryParse","System::Decimal::TryParse","System.Decimal.Zero","System::Decimal::Zero"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"610839d2-e8f7-a6a8-f6a0-90b8d85ef1ab","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Decimal.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Decimal struct | Microsoft Docs","_op_ogTitle":"Decimal struct","description":"Represents a decimal number.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Decimal","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.decimal","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.decimal","fileRelativePath":"System.Decimal.html"},"themesRelativePathToOutputRoot":"_themes/"}