{"content":"    \r\n    <h1 id=\"System_Threading_Tasks_Task_1\">\r\n      <span class=\"lang-csharp\">Task&lt;TResult&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents an asynchronous operation that can return a value.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_FutureDebugView`1))]\npublic class Task&lt;TResult&gt; : System.Threading.Tasks.Task</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tTResult\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of the result produced by this Task(TResult).</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Task&lt;TResult&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_AsyncState\" data-linktype=\"relative-path\">AsyncState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CompletedTask\" data-linktype=\"relative-path\">CompletedTask</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task,Object&gt;,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task,Object&gt;,Object,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task,Object&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task,Object&gt;,Object,TaskContinuationOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task,Object&gt;,Object,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task&gt;,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task&gt;,TaskContinuationOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task__System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task&gt;,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,TaskContinuationOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task___0__System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,TResult&gt;,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,TaskContinuationOptions)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith__1_System_Func_System_Threading_Tasks_Task_System_Object___0__System_Object_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">ContinueWith&lt;TResult&gt;(Func&lt;Task,Object,TResult&gt;,Object,TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CreationOptions\" data-linktype=\"relative-path\">CreationOptions</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_CurrentId\" data-linktype=\"relative-path\">CurrentId</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_\" data-linktype=\"relative-path\">Delay(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Delay(Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_TimeSpan_\" data-linktype=\"relative-path\">Delay(TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Delay_System_TimeSpan_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Delay(TimeSpan,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_FromCanceled_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">FromCanceled(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_FromCanceled__1_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">FromCanceled&lt;TResult&gt;(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_FromException_System_Exception_\" data-linktype=\"relative-path\">FromException(Exception)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_FromException__1_System_Exception_\" data-linktype=\"relative-path\">FromException&lt;TResult&gt;(Exception)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_FromResult__1___0_\" data-linktype=\"relative-path\">FromResult&lt;TResult&gt;(TResult)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Id\" data-linktype=\"relative-path\">Id</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsCanceled\" data-linktype=\"relative-path\">IsCanceled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsCompleted\" data-linktype=\"relative-path\">IsCompleted</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsFaulted\" data-linktype=\"relative-path\">IsFaulted</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Action_\" data-linktype=\"relative-path\">Run(Action)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Action_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Run(Action,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__\" data-linktype=\"relative-path\">Run(Func&lt;Task&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_System_Func_System_Threading_Tasks_Task__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Run(Func&lt;Task&gt;,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__\" data-linktype=\"relative-path\">Run&lt;TResult&gt;(Func&lt;TResult&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Run&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func_System_Threading_Tasks_Task___0___\" data-linktype=\"relative-path\">Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func_System_Threading_Tasks_Task___0___System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_RunSynchronously\" data-linktype=\"relative-path\">RunSynchronously()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_RunSynchronously_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">RunSynchronously(TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Start\" data-linktype=\"relative-path\">Start()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Start_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">Start(TaskScheduler)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status\" data-linktype=\"relative-path\">Status</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_System_IAsyncResult_AsyncWaitHandle\" data-linktype=\"relative-path\">IAsyncResult.AsyncWaitHandle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_System_IAsyncResult_CompletedSynchronously\" data-linktype=\"relative-path\">IAsyncResult.CompletedSynchronously</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait\" data-linktype=\"relative-path\">Wait()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_Int32_\" data-linktype=\"relative-path\">Wait(Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Wait(Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">Wait(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_System_TimeSpan_\" data-linktype=\"relative-path\">Wait(TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___\" data-linktype=\"relative-path\">WaitAll(Task[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_\" data-linktype=\"relative-path\">WaitAll(Task[],Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">WaitAll(Task[],Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_Threading_CancellationToken_\" data-linktype=\"relative-path\">WaitAll(Task[],CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAll_System_Threading_Tasks_Task___System_TimeSpan_\" data-linktype=\"relative-path\">WaitAll(Task[],TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___\" data-linktype=\"relative-path\">WaitAny(Task[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_\" data-linktype=\"relative-path\">WaitAny(Task[],Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">WaitAny(Task[],Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_Threading_CancellationToken_\" data-linktype=\"relative-path\">WaitAny(Task[],CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WaitAny_System_Threading_Tasks_Task___System_TimeSpan_\" data-linktype=\"relative-path\">WaitAny(Task[],TimeSpan)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\" data-linktype=\"relative-path\">WhenAll(IEnumerable&lt;Task&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_System_Threading_Tasks_Task___\" data-linktype=\"relative-path\">WhenAll(Task[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll__1_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task___0___\" data-linktype=\"relative-path\">WhenAll&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll__1_System_Threading_Tasks_Task___0____\" data-linktype=\"relative-path\">WhenAll&lt;TResult&gt;(Task&lt;TResult&gt;[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAny_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task__\" data-linktype=\"relative-path\">WhenAny(IEnumerable&lt;Task&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAny_System_Threading_Tasks_Task___\" data-linktype=\"relative-path\">WhenAny(Task[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAny__1_System_Collections_Generic_IEnumerable_System_Threading_Tasks_Task___0___\" data-linktype=\"relative-path\">WhenAny&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_WhenAny__1_System_Threading_Tasks_Task___0____\" data-linktype=\"relative-path\">WhenAny&lt;TResult&gt;(Task&lt;TResult&gt;[])</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Yield\" data-linktype=\"relative-path\">Yield()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Task(TResult) class represents a single operation that returns a value and that usually executes asynchronously. Task(TResult) objects are one of the central components of the  first introduced in the .NET Framework 4. Because the work performed by a Task(TResult) object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property, as well as the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsCanceled_\" data-linktype=\"relative-path\">IsCanceled</a>, <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsCompleted_\" data-linktype=\"relative-path\">IsCompleted</a>, and <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_IsFaulted_\" data-linktype=\"relative-path\">IsFaulted</a> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  </p>\n<p> Task(TResult) instances may be created in a variety of ways. The most common approach, which is available starting with the .NET Framework 4.5, is to call the static <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run&lt;TResult&gt;(Func&lt;TResult&gt;)</a> or <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</a> method. These methods provide a simple way to start a task by using default values and without acquiring additional parameters. The following example uses the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run&lt;TResult&gt;(Func&lt;TResult&gt;)</a> method to start a task that loops and then displays the number of loop iterations:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task`1#6\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t As Task(Of Integer) = Task.Run(Function()\n                                  Dim max As Integer = 1000000\n                                  Dim ctr As Integer\n                                  For ctr = 0 to max\n                                     If ctr = max \\ 2 And Date.Now.Hour &lt;= 12 Then\n                                        ctr += 1\n                                        Exit For\n                                     End If\n                                  Next\n                                  Return ctr\n                               End Function)\n      Console.WriteLine(&quot;Finished {0:N0} iterations.&quot;, t.Result)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Finished 1,000,001 loop iterations\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task`1#6\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var t = Task&lt;int&gt;.Run( () =&gt; {\n                                      // Just loop.\n                                      int max = 1000000;\n                                      int ctr = 0;\n                                      for (ctr = 0; ctr &lt;= max; ctr++) {\n                                         if (ctr == max / 2 &amp;&amp; DateTime.Now.Hour &lt;= 12) {\n                                            ctr++;\n                                            break;\n                                         }\n                                      }\n                                      return ctr;\n                                    } );\n      Console.WriteLine(&quot;Finished {0:N0} iterations.&quot;, t.Result);\n   }\n}\n// The example displays output like the following:\n//        Finished 1,000,001 loop iterations.\n</code></pre><p> An alternative, and the most common way to start a task in the .NET Framework 4, is to call the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew_\" data-linktype=\"relative-path\">StartNew</a> or <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method. The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Factory_\" data-linktype=\"relative-path\">Factory</a> property returns a <a class=\"xref\" href=\"system.threading.tasks.taskfactory\" data-linktype=\"relative-path\">TaskFactory</a> object, and the <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_Factory_\" data-linktype=\"relative-path\">Factory</a> property returns a <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1\" data-linktype=\"relative-path\">TaskFactory&lt;TResult&gt;</a> object. Overloads of their <code>StartNew</code> method let you pass arguments, define task creation options, and specify a task scheduler. The following example uses the <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func__0__\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;TResult&gt;)</a> method to start a task. It is functionally equivalent to the code in the previous example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task`1#7\">using System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var t = Task&lt;int&gt;.Factory.StartNew( () =&gt; {\n                                      // Just loop.\n                                      int max = 1000000;\n                                      int ctr = 0;\n                                      for (ctr = 0; ctr &lt;= max; ctr++) {\n                                         if (ctr == max / 2 &amp;&amp; DateTime.Now.Hour &lt;= 12) {\n                                            ctr++;\n                                            break;\n                                         }\n                                      }\n                                      return ctr;\n                               } );\n      Console.WriteLine(&quot;Finished {0:N0} iterations.&quot;, t.Result);\n   }\n}\n// The example displays the following output:\n//        Finished 1000001 loop iterations\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task`1#7\">Imports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim t = Task(Of Integer).Factory.StartNew(Function()\n                                  Dim max As Integer = 1000000\n                                  Dim ctr As Integer\n                                  For ctr = 0 to max\n                                     If ctr = max \\ 2 And Date.Now.Hour &lt;= 12 Then\n                                       ctr += 1\n                                       Exit For\n                                     End If\n                                  Next\n                                  Return ctr\n                               End Function)\n      Console.WriteLine(&quot;Finished {0:N0} iterations.&quot;, t.Result)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Finished 1,000,001 iterations\n</code></pre><p> For more complete examples, see <a href=\"../Topic/Task-based%20Asynchronous%20Programming.md\" data-linktype=\"relative-path\">Task-based Asynchronous Programming</a>.  </p>\n<p> The Task(TResult) class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> and <code>StartNew</code> methods are the preferred mechanism for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task&#39;s <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Start_\" data-linktype=\"relative-path\">Start</a> method may then be used to schedule the task for execution at a later time.  </p>\n<p> Starting with desktop apps that target the .NET Framework 4.6, the culture of the thread that creates and invokes a task becomes part of the thread&#39;s context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the .NET Framework 4.6, the culture of the task is the culture of the thread on which the task executes. For more information, see the &quot;Culture and task-based asynchronous operations&quot; section in the <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> topic. Note that Store apps follow the Windows Runtime in setting and getting the default culture.  </p>\n<p> For operations that do not return a value, you use the <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> class.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func__0__\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;TResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function and state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func__0__System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func__0__System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;TResult&gt;,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function and creation options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified action, state, and options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified action, state, and options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func__0__System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function and creation options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"self-bookmark\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object,CancellationToken,TaskCreationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified action, state, and options.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_Factory\" data-linktype=\"self-bookmark\">Factory</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to factory methods for creating and configuring <span class=\"xref\">stem.Threading.Tasks.Task`1</span> instances.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_Result\" data-linktype=\"self-bookmark\">Result</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the result value of this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ConfigureAwait_System_Boolean_\" data-linktype=\"self-bookmark\">ConfigureAwait(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Configures an awaiter used to await this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target task completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that that is passed state information and that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a cancelable continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_CancellationToken_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,CancellationToken)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_Tasks_TaskContinuationOptions_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,TaskContinuationOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"self-bookmark\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Threading_Tasks_Task_1_GetAwaiter\" data-linktype=\"self-bookmark\">GetAwaiter()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an awaiter used to await this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func__0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;TResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;TResult&gt; function);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run&lt;TResult&gt;(Func&lt;TResult&gt;)</a> and <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func__0__\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;TResult&gt;)</a> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example counts the approximate number of words in text files that represent published books. Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression. The [Task.WaitAll(Task&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName&gt; method is called to ensure that all tasks have completed before displaying the word count of each book to the console.  </p>\n<p> Object instantiation is separated from object execution in this example so that the example can ensure that each file exists. If they do not,  it displays the name of the missing file. Otherwise, it calls the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Start_\" data-linktype=\"relative-path\">Start</a> method to launch each task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.ctor#2\">using System;\nusing System.IO;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\p{P}*\\s+&quot;;\n      string[] titles = { &quot;Sister Carrie&quot;, &quot;The Financier&quot; };\n      Task&lt;int&gt;[] tasks = new Task&lt;int&gt;[titles.Length];\n\n      for (int ctr = 0; ctr &lt; titles.Length; ctr++) {\n         string s = titles[ctr];\n         tasks[ctr] = new Task&lt;int&gt;( () =&gt; {\n                                   // Number of words.\n                                   int nWords = 0;\n                                   // Create filename from title.\n                                   string fn = s + &quot;.txt&quot;;\n\n                                   StreamReader sr = new StreamReader(fn);\n                                   string input = sr.ReadToEndAsync().Result;\n                                   sr.Close();\n                                   nWords = Regex.Matches(input, pattern).Count;\n                                   return nWords;\n                                } );\n      }\n      // Ensure files exist before launching tasks.\n      bool allExist = true;\n      foreach (var title in titles) {\n         string fn = title + &quot;.txt&quot;;\n         if (! File.Exists(fn)) {\n            allExist = false;\n            Console.WriteLine(&quot;Cannot find &#39;{0}&#39;&quot;, fn);\n            break;\n         }   \n      }\n      // Launch tasks \n      if (allExist) {\n         foreach (var t in tasks)\n            t.Start();\n      \n        Task.WaitAll(tasks);\n  \n        Console.WriteLine(&quot;Word Counts:<br>&quot;);\n        for (int ctr = 0; ctr &lt; titles.Length; ctr++)\n           Console.WriteLine(&quot;{0}: {1,10:N0} words&quot;, titles[ctr], tasks[ctr].Result);\n      }   \n   }\n}\n// The example displays the following output:\n//       Sister Carrie:    159,374 words\n//       The Financier:    196,362 words\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.ctor#2\">Imports System.IO\nImports System.Text.RegularExpressions\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;\\p{P}*\\s+&quot;\n      Dim titles() As String = { &quot;Sister Carrie&quot;,\n                                 &quot;The Financier&quot; }\n      Dim tasks(titles.Length - 1) As Task(Of Integer)\n\n      For ctr As Integer = 0 To titles.Length - 1\n         Dim s As String = titles(ctr)\n         tasks(ctr) = New Task(Of Integer)( Function()\n                                   &#39; Number of words.\n                                   Dim nWords As Integer = 0\n                                   &#39; Create filename from title.\n                                   Dim fn As String = s + &quot;.txt&quot;\n\n                                   Dim sr As New StreamReader(fn)\n                                   Dim input As String = sr.ReadToEndAsync().Result\n                                   sr.Close()\n                                   nWords = Regex.Matches(input, pattern).Count\n                                   Return nWords\n                                End Function)\n      Next\n\n      &#39; Ensure files exist before launching tasks.\n      Dim allExist As Boolean = True\n      For Each title In titles\n         Dim fn As String = title + &quot;.txt&quot;\n         If Not File.Exists(fn) Then\n            allExist = false\n            Console.WriteLine(&quot;Cannot find &#39;{0}&#39;&quot;, fn)\n            Exit For\n         End If   \n      Next\n      &#39; Launch tasks \n      If allExist Then\n         For Each t in tasks\n            t.Start()\n         Next\n         Task.WaitAll(tasks)\n\n         Console.WriteLine(&quot;Word Counts:&quot;)\n         Console.WriteLine()\n         For ctr As Integer = 0 To titles.Length - 1\n         Console.WriteLine(&quot;{0}: {1,10:N0} words&quot;, titles(ctr), tasks(ctr).Result)\n         Next\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Sister Carrie:    159,374 words\n&#39;       The Financier:    196,362 words\n</code></pre><p> The regular expression pattern <code>\\p{P}*\\s+</code> matches zero, one, or more punctuation characters followed by one or more whitespace characters. It assumes that the total number of matches equals the approximate word count.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function and state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;object,TResult&gt; function, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func_System_Object__0__System_Object_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;Object,TResult&gt;,Object)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func__0__System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> to be assigned to this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created<code> cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run__1_System_Func___0__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.Task.Run&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken)</a> and <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func__0__System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;TResult&gt;,CancellationToken)</a> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func__0__System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;TResult&gt;,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function and creation options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func__0__System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;TResult&gt;,TaskCreationOptions)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified action, state, and options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> to be assigned to the new task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created<code> cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func_System_Object__0__System_Object_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;Object,TResult&gt;,Object,CancellationToken)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified action, state, and options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func_System_Object__0__System_Object_System_Threading_Tasks_TaskCreationOptions_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;Object,TResult&gt;,Object,TaskCreationOptions)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func__0__System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified function and creation options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func<tresult></tresult></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created<code> cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory#System_Threading_Tasks_TaskFactory_StartNew__1_System_Func___0__System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory.StartNew&lt;TResult&gt;(Func&lt;TResult&gt;,CancellationToken,TaskCreationOptions,TaskScheduler)</a> method.  The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1__ctor_System_Func_System_Object__0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Task&lt;TResult&gt;(Func&lt;Object,TResult&gt;,Object,CancellationToken,TaskCreationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new <span class=\"xref\">stem.Threading.Tasks.Task`1</span> with the specified action, state, and options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Task (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>function</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate that represents the code to execute in the task. When the function has completed, the task&#39;s <span class=\"xref\">stem.Threading.Tasks.Task`1.Result*</span> property will be set to return the result value of the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> to be assigned to the new task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>creationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a> used to customize the task&#39;s behavior.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created<code> cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>creationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">TaskCreationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>function</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Rather than calling this constructor, the most common way to instantiate a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object and launch a task is by calling the static <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_System_Func_System_Object__0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskCreationOptions_System_Threading_Tasks_TaskScheduler_\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.StartNew(Func&lt;Object,TResult&gt;,Object,CancellationToken,TaskCreationOptions,TaskScheduler)</a> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_Factory\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_Factory_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Factory</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to factory methods for creating and configuring <span class=\"xref\">stem.Threading.Tasks.Task`1</span> instances.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Threading.Tasks.TaskFactory&lt;TResult&gt; Factory { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskfactory-1\" data-linktype=\"relative-path\">TaskFactory<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>A factory object that can create a variety of <span class=\"xref\">stem.Threading.Tasks.Task`1</span> objects.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns a default instance of the <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1\" data-linktype=\"relative-path\">TaskFactory&lt;TResult&gt;</a> class that is identical to the one created by calling the parameterless <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1__ctor\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskFactory&lt;TResult&gt;.TaskFactory&lt;TResult&gt;()</a> constructor. It has the following property values:  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_CancellationToken_\" data-linktype=\"relative-path\">CancellationToken</a></td>\n<td><a class=\"xref\" href=\"system.threading.cancellationtoken#System_Threading_CancellationToken_None_\" data-linktype=\"relative-path\">None</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_ContinuationOptions_\" data-linktype=\"relative-path\">ContinuationOptions</a></td>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskContinuationOptions</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_CreationOptions_\" data-linktype=\"relative-path\">CreationOptions</a></td>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskcreationoptions\" data-linktype=\"relative-path\">System.Threading.Tasks.TaskCreationOptions</a></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_Scheduler_\" data-linktype=\"relative-path\">Scheduler</a></td>\n<td><code>null</code>, or <a class=\"xref\" href=\"system.threading.tasks.taskscheduler#System_Threading_Tasks_TaskScheduler_Current_\" data-linktype=\"relative-path\">Current</a></td>\n</tr>\n</tbody>\n</table>\n<p> The most common use of this property is to create and start a new task in a single call to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Starting with the .NET Framework 4.5, the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Run_\" data-linktype=\"relative-path\">Run</a> method provides the easiest way to create a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> object with default configuration values.  </p>\n</div>\n<p> The following example uses the static Factory property to make three calls to the <a class=\"xref\" href=\"system.threading.tasks.taskfactory-1#System_Threading_Tasks_TaskFactory_1_StartNew_\" data-linktype=\"relative-path\">StartNew</a> method. The first starts a <code>Task&lt;Int32&gt;</code> object, which executes a lambda expression that returns 1. The second starts a <code>Task&lt;Test&gt;</code> object, which executes a lambda expression that instantiates a new <code>Test</code> instance. The third starts a <code>Task&lt;String[]&gt;</code> object, which enumerates the files in the C:\\Users\\Public\\Pictures\\Sample Pictures\\ directory. (Note that successful execution of the example requires that the directory exist and that it contain files.  </p>\n<pre><code class=\"lang-cs\" name=\"TPL#10\">using System;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main()\n    {\n        // Return a value type with a lambda expression\n        Task&lt;int&gt; task1 = Task&lt;int&gt;.Factory.StartNew(() =&gt; 1);\n        int i = task1.Result;\n\n        // Return a named reference type with a multi-line statement lambda.\n        Task&lt;Test&gt; task2 = Task&lt;Test&gt;.Factory.StartNew(() =&gt;\n        {\n            string s = &quot;.NET&quot;;\n            double d = 4.0;\n            return new Test { Name = s, Number = d };\n        });\n        Test test = task2.Result;\n\n        // Return an array produced by a PLINQ query\n        Task&lt;string[]&gt; task3 = Task&lt;string[]&gt;.Factory.StartNew(() =&gt;\n        {\n            string path = @&quot;C:\\Users\\Public\\Pictures\\Sample Pictures\\&quot;;\n            string[] files = System.IO.Directory.GetFiles(path);\n\n            var result = (from file in files.AsParallel()\n                          let info = new System.IO.FileInfo(file)\n                          where info.Extension == &quot;.jpg&quot;\n                          select file).ToArray();\n\n            return result;\n        });\n\n        foreach (var name in task3.Result)\n            Console.WriteLine(name);\n\n    }\n    class Test\n    {\n        public string Name { get; set; }\n        public double Number { get; set; }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TPL#10\">Imports System.Threading.Tasks\n\nModule Module1\n\n    Sub Main()\n        ReturnAValue()\n\n        Console.WriteLine(&quot;Press any key to exit.&quot;)\n        Console.ReadKey()\n\n    End Sub\n\n    Sub ReturnAValue()\n\n        &#39; Return a value type with a lambda expression\n        Dim task1 = Task(Of Integer).Factory.StartNew(Function() 1)\n        Dim i As Integer = task1.Result\n\n        &#39; Return a named reference type with a multi-line statement lambda.\n        Dim task2 As Task(Of Test) = Task.Factory.StartNew(Function()\n                                                               Dim s As String = &quot;.NET&quot;\n                                                               Dim d As Integer = 4\n                                                               Return New Test With {.Name = s, .Number = d}\n                                                           End Function)\n\n        Dim myTest As Test = task2.Result\n        Console.WriteLine(myTest.Name &amp; &quot;: &quot; &amp; myTest.Number)\n\n        &#39; Return an array produced by a PLINQ query.\n        Dim task3 As Task(Of String())= Task(Of String()).Factory.StartNew(Function()\n\n                                                           Dim path = &quot;C:\\Users\\Public\\Pictures\\Sample Pictures\\&quot;\n                                                           Dim files = System.IO.Directory.GetFiles(path)\n\n                                                           Dim result = (From file In files.AsParallel()\n                                                                Let info = New System.IO.FileInfo(file)\n                                                                Where info.Extension = &quot;.jpg&quot;\n                                                                Select file).ToArray()\n                                                           Return result\n                                                       End Function)\n\n        For Each name As String In task3.Result\n            Console.WriteLine(name)\n        Next\n    End Sub\n\n    Class Test\n        Public Name As String\n        Public Number As Double\n    End Class\nEnd Module\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_Result\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_Result_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Result</div>        \r\n          </div>\r\n    \r\n            <p>Gets the result value of this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TResult Result { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">TResult</span></div>\r\n                  </div>\r\n                  <p>The result value of this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>, which is the same type as the task&#39;s type parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a></div>\r\n                  </div>\r\n                  <p>The task was canceled. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains a <a class=\"xref\" href=\"system.threading.tasks.taskcanceledexception\" data-linktype=\"relative-path\">TaskCanceledException</a> object.  </p>\n<p> -or-  </p>\n<p> An exception was thrown during the execution of the task. The <span class=\"xref\">stem.AggregateException.InnerExceptions*</span> collection contains information about the exception or exceptions.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Accessing the property&#39;s get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Wait_\" data-linktype=\"relative-path\">Wait</a> method.  </p>\n<p> Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the Result property. Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the Result property does not return a value. Instead, attempting to access the property value throws an <a class=\"xref\" href=\"system.aggregateexception\" data-linktype=\"relative-path\">AggregateException</a> exception.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. If the directory contains files, it executes a lambda expression that instantiates a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> object for each file in the directory and retrieves the value of its <a class=\"xref\" href=\"system.io.filestream#System_IO_FileStream_Length_\" data-linktype=\"relative-path\">Length</a> property. If a directory contains no files, it simply calls the &lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt; method to create a task whose Result property is zero (0). When the tasks finish, the total number of bytes in all a directory&#39;s files is available from the Result property.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.FromResult#1\">Imports System.Collections.Generic\nImports System.IO\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim args() As String = Environment.GetCommandLineArgs()\n      If args.Length &gt; 1 Then\n         Dim tasks As New List(Of Task(Of Long))\n         For ctr = 1 To args.Length - 1\n            tasks.Add(GetFileLengthsAsync(args(ctr)))\n         Next\n         Try\n            Task.WaitAll(tasks.ToArray())\n         &#39; Ignore exceptions here.\n         Catch e As AggregateException\n         End Try\n\n         For ctr As Integer = 0 To tasks.Count - 1\n            If tasks(ctr).Status = TaskStatus.Faulted Then\n               Console.WriteLine(&quot;{0} does not exist&quot;, args(ctr + 1))\n            Else\n               Console.WriteLine(&quot;{0:N0} bytes in files in &#39;{1}&#39;&quot;,\n                                 tasks(ctr).Result, args(ctr + 1))\n            End If\n         Next\n      Else\n         Console.WriteLine(&quot;Syntax error: Include one or more file paths.&quot;)\n      End If\n   End Sub\n   \n   Private Function GetFileLengthsAsync(filePath As String) As Task(Of Long)\n      If Not Directory.Exists(filePath) Then\n         Return Task.FromException(Of Long)(\n                     New DirectoryNotFoundException(&quot;Invalid directory name.&quot;))\n      Else\n         Dim files As String() = Directory.GetFiles(filePath)\n         If files.Length = 0 Then\n            Return Task.FromResult(0L)\n         Else\n            Return Task.Run( Function()\n                                Dim total As Long = 0\n                                Dim lockObj As New Object\n                                Parallel.ForEach(files, Sub(fileName)\n                                                           Dim fs As New FileStream(fileName, FileMode.Open,\n                                                                     FileAccess.Read, FileShare.ReadWrite,\n                                                                     256, True)\n                                                           Dim length As Long = fs.Length\n                                                           Interlocked.Add(total, length)\n                                                           fs.Close()\n                                                        End Sub)\n                                Return total\n                             End Function )\n         End If\n      End If\n   End Function\nEnd Module\n&#39; When launched with the following command line arguments:\n&#39;      subdir . newsubdir\n&#39; the example displays output like the following:\n&#39;       0 bytes in files in &#39;subdir&#39;\n&#39;       2,059 bytes in files in &#39;.&#39;\n&#39;       newsubdir does not exist\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.FromResult#1\">using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] args = Environment.GetCommandLineArgs();\n      if (args.Length &gt; 1) {\n         List&lt;Task&lt;long&gt;&gt; tasks = new List&lt;Task&lt;long&gt;&gt;();\n         for (int ctr = 1; ctr &lt; args.Length; ctr++)\n            tasks.Add(GetFileLengthsAsync(args[ctr]));\n\n         try {\n            Task.WaitAll(tasks.ToArray());\n         }\n         // Ignore exceptions here.\n         catch (AggregateException) {}\n\n         for (int ctr = 0 ; ctr &lt; tasks.Count; ctr++) {\n            if (tasks[ctr].Status == TaskStatus.Faulted)\n               Console.WriteLine(&quot;{0} does not exist&quot;, args[ctr + 1]);\n            else\n               Console.WriteLine(&quot;{0:N0} bytes in files in &#39;{1}&#39;&quot;,\n                                 tasks[ctr].Result, args[ctr + 1]);\n         }\n      }\n      else {\n         Console.WriteLine(&quot;Syntax error: Include one or more file paths.&quot;);\n      }\n   }\n\n   private static Task&lt;long&gt; GetFileLengthsAsync(string filePath)\n   {\n      if (! Directory.Exists(filePath)) {\n         return Task.FromException&lt;long&gt;(\n                     new DirectoryNotFoundException(&quot;Invalid directory name.&quot;));\n      }\n      else {\n         string[] files = Directory.GetFiles(filePath);\n         if (files.Length == 0)\n            return Task.FromResult(0L);\n         else\n            return Task.Run( () =&gt; { long total = 0;\n                                     Parallel.ForEach(files, (fileName) =&gt; {\n                                                 var fs = new FileStream(fileName, FileMode.Open,\n                                                                         FileAccess.Read, FileShare.ReadWrite,\n                                                                         256, true);\n                                                 long length = fs.Length;\n                                                 Interlocked.Add(ref total, length);\n                                                 fs.Close(); } );\n                                     return total;\n                                   } );\n      }\n   }\n}\n// When launched with the following command line arguments:\n//      subdir . newsubdir\n// the example displays output like the following:\n//       0 bytes in files in &#39;subdir&#39;\n//       2,059 bytes in files in &#39;.&#39;\n//       newsubdir does not exist\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ConfigureAwait_System_Boolean_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ConfigureAwait_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConfigureAwait(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Configures an awaiter used to await this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.CompilerServices.ConfiguredTaskAwaitable&lt;TResult&gt; ConfigureAwait (bool continueOnCapturedContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continueOnCapturedContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>true to attempt to marshal the continuation back to the original context captured; otherwise, false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.configuredtaskawaitable-1\" data-linktype=\"relative-path\">ConfiguredTaskAwaitable<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>An object used to await this task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target task completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the antecedent <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user. An array is used to hold information about the prime numbers. The array index represents the number, and the element&#39;s value indicates whether that number is composite (its value is <code>true</code>) or prime (its value is <code>false</code>). This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task`1.ContinueWith#2\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main(string[] args)\n   {\n      int upperBound = args.Length &gt;= 1 ? Int32.Parse(args[0]) : 200;\n\n      var t1 = Task.Run(() =&gt; { // True = composite.\n                                // False = prime.\n                                bool[] values = new bool[upperBound + 1];\n                                for (int ctr = 2; ctr &lt;= (int) Math.Sqrt(upperBound); ctr++) {\n                                   if (values[ctr] == false) {\n                                      for (int product = ctr * ctr; product &lt;= upperBound;\n                                                                    product = product + ctr)\n                                         values[product] = true;\n                                   }\n                                }\n                                return values; });\n      var t2 = t1.ContinueWith( (antecedent) =&gt; { // Create a list of prime numbers.\n                                                  var  primes = new List&lt;int&gt;();\n                                                  bool[] numbers = antecedent.Result;\n                                                  string output = String.Empty;\n\n                                                  for (int ctr = 1; ctr &lt;= numbers.GetUpperBound(0); ctr++)\n                                                     if (numbers[ctr] == false)\n                                                        primes.Add(ctr);\n\n                                                  // Create the output string.\n                                                  for (int ctr = 0; ctr &lt; primes.Count; ctr++) {\n                                                     output += primes[ctr].ToString(&quot;N0&quot;);\n                                                     if (ctr &lt; primes.Count - 1)\n                                                        output += &quot;,  &quot;;\n                                                     if ((ctr + 1) % 8 == 0)\n                                                        output += Environment.NewLine;\n                                                  }\n                                                  //Display the result.\n                                                  Console.WriteLine(&quot;Prime numbers from 1 to {0}:<br>&quot;,\n                                                                    upperBound);\n                                                  Console.WriteLine(output);\n                                                });\n      try {\n         t2.Wait();\n      }\n      catch (AggregateException ae) {\n         foreach (var e in ae.InnerExceptions)\n            Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message);\n      }\n   }\n}\n// The example displays output like the following:\n//       Prime numbers from 1 to 400:\n//\n//       1,  2,  3,  5,  7,  11,  13,  17,\n//       19,  23,  29,  31,  37,  41,  43,  47,\n//       53,  59,  61,  67,  71,  73,  79,  83,\n//       89,  97,  101,  103,  107,  109,  113,  127,\n//       131,  137,  139,  149,  151,  157,  163,  167,\n//       173,  179,  181,  191,  193,  197,  199,  211,\n//       223,  227,  229,  233,  239,  241,  251,  257,\n//       263,  269,  271,  277,  281,  283,  293,  307,\n//       311,  313,  317,  331,  337,  347,  349,  353,\n//       359,  367,  373,  379,  383,  389,  397,  401\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task`1.ContinueWith#2\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main(args() As String)\n      Dim upperBound As Integer = If(args.Length &gt;= 1, CInt(args(0)), 200)\n\n      Dim t1 = Task.Run(Function()\n                          &#39; True = composite.\n                          &#39; False = prime.\n                          Dim values(upperBound) As Boolean\n                          For ctr = 2 To CInt(Math.Sqrt(upperBound))\n                             If values(ctr) = False Then\n                                For product = ctr * ctr To upperBound Step ctr\n                                   values(product) = True\n                                Next\n                             End If\n                          Next\n                          Return values\n                       End Function)\n\n      Dim t2 = t1.ContinueWith(Sub(antecedent)\n                                  &#39; Create a list of prime numbers.\n                                  Dim primes As New List(Of Integer)()\n                                  Dim numbers As Boolean() = antecedent.Result\n                                  Dim output As String = String.Empty\n                                  \n                                  For ctr As Integer = 1 To numbers.GetUpperBound(0)\n                                     If numbers(ctr) = False Then primes.Add(ctr)\n                                  Next\n\n                                  &#39; Create the output string.\n                                  For ctr As Integer = 0 To primes.Count - 1\n                                     output += primes(ctr).ToString(&quot;N0&quot;)\n                                     If ctr &lt; primes.Count - 1 Then output += &quot;,  &quot;\n                                     If (ctr + 1) Mod 8 = 0 Then output += vbCrLf\n                                  Next\n                                  &#39;Display the result.\n                                  Console.WriteLine(&quot;Prime numbers from 1 to {0}:{1}&quot;,\n                                                    upperBound, vbCrLf)\n                                  Console.WriteLine(output)\n                               End Sub)\n      Try\n         t2.Wait()\n      Catch ae As AggregateException\n         For Each e In ae.InnerExceptions\n            Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n         Next\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Prime numbers from 1 to 400:\n&#39;\n&#39;       1,  2,  3,  5,  7,  11,  13,  17,\n&#39;       19,  23,  29,  31,  37,  41,  43,  47,\n&#39;       53,  59,  61,  67,  71,  73,  79,  83,\n&#39;       89,  97,  101,  103,  107,  109,  113,  127,\n&#39;       131,  137,  139,  149,  151,  157,  163,  167,\n&#39;       173,  179,  181,  191,  193,  197,  199,  211,\n&#39;       223,  227,  229,  233,  239,  241,  251,  257,\n&#39;       263,  269,  271,  277,  281,  283,  293,  307,\n&#39;       311,  313,  317,  331,  337,  347,  349,  353,\n&#39;       359,  367,  373,  379,  383,  389,  397,  401\n&#39; If cancellation is requested, the example displays output like the following:\n&#39;       The operation was cancelled.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that that is passed state information and that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a task that is passed an integer between 2 and 20 and returns an array that contains the first ten exponents (from n<sup>1</sup> to n<sup>10</sup>) of that number. A continuation task is then responsible for displaying the exponents. It is passed both the antecedent and the original number whose exponents the antecedent generates.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task`1.ContinueWith#3\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var cts = new CancellationTokenSource();\n      var token = cts.Token;\n\n      // Get an integer to generate a list of its exponents.\n      var rnd = new Random();\n      var number = rnd.Next(2, 21);\n      \n      var t = Task.Factory.StartNew( (value) =&gt; { int n = (int) value;\n                                                  long[] values = new long[10];\n                                                  for (int ctr = 1; ctr &lt;= 10; ctr++)\n                                                     values[ctr - 1] = (long) Math.Pow(n, ctr);\n                                                     \n                                                  return values;\n                                                }, number);\n      var continuation = t.ContinueWith( (antecedent, value) =&gt; { Console.WriteLine(&quot;Exponents of {0}:&quot;, value);\n                                                                  for (int ctr = 0; ctr &lt;= 9; ctr++)\n                                                                     Console.WriteLine(&quot;   {0} {1} {2} = {3:N0}&quot;,\n                                                                                       value, &quot;\\u02C6&quot;, ctr + 1,\n                                                                                       antecedent.Result[ctr]);\n                                                                  Console.WriteLine();\n                                                                }, number);\n      continuation.Wait();\n      cts.Dispose();\n   }\n}\n// The example displays output like the following:\n//       Exponents of 2:\n//          2 ^ 1 = 2\n//          2 ^ 2 = 4\n//          2 ^ 3 = 8\n//          2 ^ 4 = 16\n//          2 ^ 5 = 32\n//          2 ^ 6 = 64\n//          2 ^ 7 = 128\n//          2 ^ 8 = 256\n//          2 ^ 9 = 512\n//          2 ^ 10 = 1,024\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task`1.ContinueWith#3\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim cts As New CancellationTokenSource()\n      Dim token As CancellationToken = cts.Token\n\n      &#39; Get an integer to generate a list of its exponents.\n      Dim rnd As New Random()\n      Dim number As Integer = rnd.Next(2, 21)\n\n      Dim t = Task.Factory.StartNew( Function(value)\n                                        Dim n As Integer = CInt(value)\n                                        Dim values(9) As Long\n                                        For ctr As Integer = 1 To 10\n                                           values(ctr - 1) = CLng(Math.Pow(n, ctr))\n                                        Next\n                                        return values\n                                     End Function, number)\n      Dim continuation = t.ContinueWith( Sub(antecedent, value)\n                                            Console.WriteLine(&quot;Exponents of {0}:&quot;, value)\n                                            For ctr As Integer = 0 To 9\n                                               Console.WriteLine(&quot;   {0} {1} {2} = {3:N0}&quot;,\n                                                                 value, ChrW(&amp;h02C6), ctr + 1,\n                                                                 antecedent.Result(ctr))\n                                            Next\n                                            Console.WriteLine()\n                                         End Sub, number)\n      continuation.Wait()\n\n      cts.Dispose()\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Exponents of 2:\n&#39;          2 ^ 1 = 2\n&#39;          2 ^ 2 = 4\n&#39;          2 ^ 3 = 8\n&#39;          2 ^ 4 = 16\n&#39;          2 ^ 5 = 32\n&#39;          2 ^ 6 = 64\n&#39;          2 ^ 7 = 128\n&#39;          2 ^ 8 = 256\n&#39;          2 ^ 9 = 512\n&#39;          2 ^ 10 = 1,024\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a cancelable continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate is passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cancellation token that is passed to the new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created <code>cancellationToken</code> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user. An array is used to hold information about the prime numbers. The array index represents the number, and the element&#39;s value indicates whether that number is composite (its value is <code>true</code>) or prime (its value is <code>false</code>). This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.  </p>\n<p> A cancellation token is passed to both the antecedent and the continuation task. A <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">System.Timers.Timer</a> object is used to define a timeout value of 100 milliseconds. If the event fires, the <a class=\"xref\" href=\"system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_Cancel_\" data-linktype=\"relative-path\">Cancel</a> method is called, and the cancellation token is used to request cancellation of the tasks.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task`1.ContinueWith#1\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Timers = System.Timers;\n\npublic class Example\n{\n   static CancellationTokenSource ts;\n   \n   public static void Main(string[] args)\n   {\n      int upperBound = args.Length &gt;= 1 ? Int32.Parse(args[0]) : 200;\n      ts = new CancellationTokenSource();\n      CancellationToken token = ts.Token;\n      Timers.Timer timer = new Timers.Timer(3000);\n      timer.Elapsed += TimedOutEvent;\n      timer.AutoReset = false;\n      timer.Enabled = true;\n\n      var t1 = Task.Run(() =&gt; { // True = composite.\n                                // False = prime.\n                                bool[] values = new bool[upperBound + 1];\n                                for (int ctr = 2; ctr &lt;= (int) Math.Sqrt(upperBound); ctr++) {\n                                   if (values[ctr] == false) {\n                                      for (int product = ctr * ctr; product &lt;= upperBound;\n                                                                    product = product + ctr)\n                                         values[product] = true;\n                                   }\n                                   token.ThrowIfCancellationRequested();\n                                }\n                                return values; }, token);\n\n      var t2 = t1.ContinueWith( (antecedent) =&gt; { // Create a list of prime numbers.\n                                                  var  primes = new List&lt;int&gt;();\n                                                  token.ThrowIfCancellationRequested();\n                                                  bool[] numbers = antecedent.Result;\n                                                  string output = String.Empty;\n\n                                                  for (int ctr = 1; ctr &lt;= numbers.GetUpperBound(0); ctr++)\n                                                     if (numbers[ctr] == false)\n                                                        primes.Add(ctr);\n\n                                                  // Create the output string.\n                                                  for (int ctr = 0; ctr &lt; primes.Count; ctr++) {\n                                                     token.ThrowIfCancellationRequested();\n                                                     output += primes[ctr].ToString(&quot;N0&quot;);\n                                                     if (ctr &lt; primes.Count - 1)\n                                                        output += &quot;,  &quot;;\n                                                     if ((ctr + 1) % 8 == 0)\n                                                        output += Environment.NewLine;\n                                                  }\n                                                  //Display the result.\n                                                  Console.WriteLine(&quot;Prime numbers from 1 to {0}:<br>&quot;,\n                                                                    upperBound);\n                                                  Console.WriteLine(output);\n                                                }, token);\n      try {\n         t2.Wait();\n      }\n      catch (AggregateException ae) {\n         foreach (var e in ae.InnerExceptions) {\n            if (e.GetType() == typeof(TaskCanceledException))\n               Console.WriteLine(&quot;The operation was cancelled.&quot;);\n            else\n               Console.WriteLine(&quot;ELSE: {0}: {1}&quot;, e.GetType().Name, e.Message);\n         }\n      }\n      finally {\n         ts.Dispose();\n      }\n   }\n\n   private static void TimedOutEvent(Object source, Timers.ElapsedEventArgs e)\n   {\n      ts.Cancel();\n   }\n}\n// If cancellation is not requested, the example displays output like the following:\n//       Prime numbers from 1 to 400:\n//\n//       1,  2,  3,  5,  7,  11,  13,  17,\n//       19,  23,  29,  31,  37,  41,  43,  47,\n//       53,  59,  61,  67,  71,  73,  79,  83,\n//       89,  97,  101,  103,  107,  109,  113,  127,\n//       131,  137,  139,  149,  151,  157,  163,  167,\n//       173,  179,  181,  191,  193,  197,  199,  211,\n//       223,  227,  229,  233,  239,  241,  251,  257,\n//       263,  269,  271,  277,  281,  283,  293,  307,\n//       311,  313,  317,  331,  337,  347,  349,  353,\n//       359,  367,  373,  379,  383,  389,  397,  401\n// If cancellation is requested, the example displays output like the following:\n//       The operation was cancelled.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task`1.ContinueWith#1\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\nImports Timers = System.Timers\n\nModule Example\n   Dim ts As CancellationTokenSource\n\n   Public Sub Main(args() As String)\n      Dim upperBound As Integer = If(args.Length &gt;= 1, CInt(args(0)), 200)\n      ts = New CancellationTokenSource()\n      Dim token As CancellationToken = ts.Token\n      Dim timer As New Timers.Timer(100)\n      AddHandler timer.Elapsed, AddressOf TimedOutEvent\n      timer.AutoReset = False\n      timer.Enabled = True\n\n      Dim t1 = Task.Run(Function()\n                          &#39; True = composite.\n                          &#39; False = prime.\n                          Dim values(upperBound) As Boolean\n                          For ctr = 2 To CInt(Math.Sqrt(upperBound))\n                             If values(ctr) = False Then\n                                For product = ctr * ctr To upperBound Step ctr\n                                   values(product) = True\n                                Next\n                             End If\n                             token.ThrowIfCancellationRequested()\n                          Next\n                          Return values\n                       End Function, token)\n\n      Dim t2 = t1.ContinueWith(Sub(antecedent)\n                                  &#39; Create a list of prime numbers.\n                                  Dim primes As New List(Of Integer)()\n                                  token.ThrowIfCancellationRequested()\n                                  Dim numbers As Boolean() = antecedent.Result\n                                  Dim output As String = String.Empty\n                                  \n                                  For ctr As Integer = 1 To numbers.GetUpperBound(0)\n                                     If numbers(ctr) = False Then primes.Add(ctr)\n                                  Next\n\n                                  &#39; Create the output string.\n                                  For ctr As Integer = 0 To primes.Count - 1\n                                     token.ThrowIfCancellationRequested()\n                                     output += primes(ctr).ToString(&quot;N0&quot;)\n                                     If ctr &lt; primes.Count - 1 Then output += &quot;,  &quot;\n                                     If (ctr + 1) Mod 8 = 0 Then output += vbCrLf\n                                  Next\n                                  &#39;Display the result.\n                                  Console.WriteLine(&quot;Prime numbers from 1 to {0}:{1}&quot;,\n                                                    upperBound, vbCrLf)\n                                  Console.WriteLine(output)\n                               End Sub, token)\n      Try\n         t2.Wait()\n      Catch ae As AggregateException\n         For Each e In ae.InnerExceptions\n            If e.GetType Is GetType(TaskCanceledException) Then\n               Console.WriteLine(&quot;The operation was cancelled.&quot;)\n            Else\n               Console.WriteLine(&quot;{0}: {1}&quot;, e.GetType().Name, e.Message)\n            End If\n         Next\n      Finally\n         ts.Dispose()\n      End Try\n   End Sub\n   \n   Private Sub TimedOutEvent(source As Object, e As Timers.ElapsedEventArgs)\n      ts.Cancel()\n   End Sub\nEnd Module\n&#39; If cancellation is not requested, the example displays output like the following:\n&#39;       Prime numbers from 1 to 400:\n&#39;\n&#39;       1,  2,  3,  5,  7,  11,  13,  17,\n&#39;       19,  23,  29,  31,  37,  41,  43,  47,\n&#39;       53,  59,  61,  67,  71,  73,  79,  83,\n&#39;       89,  97,  101,  103,  107,  109,  113,  127,\n&#39;       131,  137,  139,  149,  151,  157,  163,  167,\n&#39;       173,  179,  181,  191,  193,  197,  199,  211,\n&#39;       223,  227,  229,  233,  239,  241,  251,  257,\n&#39;       263,  269,  271,  277,  281,  283,  293,  307,\n&#39;       311,  313,  317,  331,  337,  347,  349,  353,\n&#39;       359,  367,  373,  379,  383,  389,  397,  401\n&#39; If cancellation is requested, the example displays output like the following:\n&#39;       The operation was cancelled.\n</code></pre><p> Typically, supplying a value of about 100,000 causes the timeout interval to expire and the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">System.Timers.Timer.Elapsed</a> event to fire, and the cancellation request to be set.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.  </p>\n<p> For more information, see <a href=\"../Topic/Chaining%20Tasks%20by%20Using%20Continuation%20Tasks.md\" data-linktype=\"relative-path\">Chaining Tasks by Using Continuation Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0___System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created <code>cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationAction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has completed. If the criteria specified through the <code>continuationOptions</code> parameter are not met, the continuation task will be canceled instead of scheduled. For more information, see <a href=\"../Topic/Chaining%20Tasks%20by%20Using%20Continuation%20Tasks.md\" data-linktype=\"relative-path\">Chaining Tasks by Using Continuation Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith_System_Action_System_Threading_Tasks_Task__0__System_Object__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith(Action&lt;Task&lt;TResult&gt;,Object&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationAction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-2\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An action to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation action.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new continuation task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as  well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its  execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">System.Threading.Tasks.Task</a></div>\r\n                  </div>\r\n                  <p>A new continuation <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> will not be scheduled for execution until the current task has  completed. If the criteria specified through the <code>continuationOptions</code> parameter  are not met, the continuation task will be canceled instead of scheduled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a chain of continuation tasks. Each task provides the current time, a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object, for the state argument of the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_ContinueWith_System_Action_System_Threading_Tasks_Task_System_Object__System_Object_\" data-linktype=\"relative-path\">ContinueWith(Action&lt;Task,Object&gt;,Object)</a> method. Each <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value represents the time at which the continue task is created. Each task produces as its result a second <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value that represents the time at which the task finishes. After all tasks finish, the example displays the date and times at which each continuation task starts and finishes.  </p>\n<pre><code class=\"lang-vb\" name=\"TPL_ContinuationState#1\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\n&#39; Demonstrates how to associate state with task continuations.\nPublic Module ContinuationState\n   &#39; Simluates a lengthy operation and returns the time at which\n   &#39; the operation completed.\n   Public Function DoWork() As Date\n      &#39; Simulate work by suspending the current thread \n      &#39; for two seconds.\n      Thread.Sleep(2000)\n\n      &#39; Return the current time.\n      Return Date.Now\n   End Function\n\n   Public Sub Main()\n      &#39; Start a root task that performs work.\n      Dim t As Task(Of Date) = Task(Of Date).Run(Function() DoWork())\n\n      &#39; Create a chain of continuation tasks, where each task is\n      &#39; followed by another task that performs work.\n      Dim continuations As New List(Of Task(Of DateTime))()\n      For i As Integer = 0 To 4\n         &#39; Provide the current time as the state of the continuation.\n         t = t.ContinueWith(Function(antecedent, state) DoWork(), DateTime.Now)\n         continuations.Add(t)\n      Next\n\n      &#39; Wait for the last task in the chain to complete.\n      t.Wait()\n\n      &#39; Display the creation time of each continuation (the state object)\n      &#39; and the completion time (the result of that task) to the console.\n      For Each continuation In continuations\n         Dim start As DateTime = CDate(continuation.AsyncState)\n         Dim [end] As DateTime = continuation.Result\n\n         Console.WriteLine(&quot;Task was created at {0} and finished at {1}.&quot;,\n            start.TimeOfDay, [end].TimeOfDay)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Task was created at 10:56:21.1561762 and finished at 10:56:25.1672062.\n&#39;       Task was created at 10:56:21.1610677 and finished at 10:56:27.1707646.\n&#39;       Task was created at 10:56:21.1610677 and finished at 10:56:29.1743230.\n&#39;       Task was created at 10:56:21.1610677 and finished at 10:56:31.1779883.\n&#39;       Task was created at 10:56:21.1610677 and finished at 10:56:33.1837083.\n</code></pre><pre><code class=\"lang-cs\" name=\"TPL_ContinuationState#1\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n// Demonstrates how to associate state with task continuations.\nclass ContinuationState\n{\n   // Simluates a lengthy operation and returns the time at which\n   // the operation completed.\n   public static DateTime DoWork()\n   {\n      // Simulate work by suspending the current thread \n      // for two seconds.\n      Thread.Sleep(2000);\n\n      // Return the current time.\n      return DateTime.Now;\n   }\n\n   static void Main(string[] args)\n   {\n      // Start a root task that performs work.\n      Task&lt;DateTime&gt; t = Task&lt;DateTime&gt;.Run(delegate { return DoWork(); });\n\n      // Create a chain of continuation tasks, where each task is \n      // followed by another task that performs work.\n      List&lt;Task&lt;DateTime&gt;&gt; continuations = new List&lt;Task&lt;DateTime&gt;&gt;();\n      for (int i = 0; i &lt; 5; i++)\n      {\n         // Provide the current time as the state of the continuation.\n         t = t.ContinueWith(delegate { return DoWork(); }, DateTime.Now);\n         continuations.Add(t);\n      }\n\n      // Wait for the last task in the chain to complete.\n      t.Wait();\n\n      // Print the creation time of each continuation (the state object)\n      // and the completion time (the result of that task) to the console.\n      foreach (var continuation in continuations)\n      {\n         DateTime start = (DateTime)continuation.AsyncState;\n         DateTime end = continuation.Result;\n\n         Console.WriteLine(&quot;Task was created at {0} and finished at {1}.&quot;,\n            start.TimeOfDay, end.TimeOfDay);\n      }\n   }\n}\n\n/* Sample output:\nTask was created at 10:56:21.1561762 and finished at 10:56:25.1672062.\nTask was created at 10:56:21.1610677 and finished at 10:56:27.1707646.\nTask was created at 10:56:21.1610677 and finished at 10:56:29.1743230.\nTask was created at 10:56:21.1610677 and finished at 10:56:31.1779883.\nTask was created at 10:56:21.1610677 and finished at 10:56:33.1837083.\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created<code> cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run according the condition specified in <code>continuationOptions</code>.  </p>\n<p> When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  </p>\n<p> The <code>continuationFunction</code>, when executed, should return a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>..</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes asynchronously when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task as an argument.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_CancellationToken_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,CancellationToken)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new task.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_Tasks_TaskContinuationOptions_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,TaskContinuationOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.  </p>\n<p> The <code>continuationFunction</code>, when executed, should return a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>. This task&#39;s completion state will be transferred to the task returned from the ContinueWith call.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0____0__System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,TNewResult&gt;,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,TNewResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run according the condition specified in <code>continuationOptions</code>.  </p>\n<p> When run, the delegate will be passed as an argument this completed task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Threading.Tasks.Task`1</span> has been disposed.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a> that created<code> cancellationToken</code> has already been disposed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationFunction</code> argument is null.  </p>\n<p> -or-  </p>\n<p> The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  </p>\n<p> The <code>continuationFunction</code>, when executed, should return a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_ContinueWith__1_System_Func_System_Threading_Tasks_Task__0__System_Object___0__System_Object_System_Threading_CancellationToken_System_Threading_Tasks_TaskContinuationOptions_System_Threading_Tasks_TaskScheduler_\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_ContinueWith_TNewResult__\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContinueWith&lt;TNewResult&gt;(Func&lt;Task&lt;TResult&gt;,Object,TNewResult&gt;,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a continuation that executes when the target <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Threading.Tasks.Task&lt;TNewResult&gt; ContinueWith&lt;TNewResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;,object,TNewResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationFunction</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TResult</span>&gt;,<a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>,<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A function to run when the <span class=\"xref\">stem.Threading.Tasks.Task`1</span> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>state</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object representing data to be used by the continuation function.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cancellationToken</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> that will be assigned to the new task.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>continuationOptions</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>, as well as execution options, such as <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scheduler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.threading.tasks.taskscheduler\" data-linktype=\"relative-path\">TaskScheduler</a> to associate with the continuation task and to use for its execution.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task</a>&lt;<span class=\"xref\">TNewResult</span>&gt;</div>\r\n                  </div>\r\n                  <p>A new continuation <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>scheduler</code> argument is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The  <code>continuationOptions</code> argument specifies an invalid value for <a class=\"xref\" href=\"system.threading.tasks.taskcontinuationoptions\" data-linktype=\"relative-path\">TaskContinuationOptions</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The provided <a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> has already been disposed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.  </p>\n<p> The <code>continuationFunction</code>, when executed, should return a <a class=\"xref\" href=\"system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>. This task&#39;s completion state will be transferred to the task returned from the <a class=\"xref\" href=\"system.threading.tasks.task-1#System_Threading_Tasks_Task_1_ContinueWith_\" data-linktype=\"relative-path\">ContinueWith</a> call.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Threading_Tasks_Task_1_GetAwaiter\">\r\n    \r\n            <a id=\"System_Threading_Tasks_Task_1_GetAwaiter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAwaiter()</div>        \r\n          </div>\r\n    \r\n            <p>Gets an awaiter used to await this <span class=\"xref\">stem.Threading.Tasks.Task`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt; GetAwaiter ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.taskawaiter-1\" data-linktype=\"relative-path\">TaskAwaiter<tresult></tresult></a></div>\r\n                  </div>\r\n                  <p>An awaiter instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is intended for compiler user rather than use directly in code.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Tasks.Task-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.Task-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;.ConfigureAwait\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;.ContinueWith\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;.ContinueWith&lt;TNewResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;.Factory\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;.GetAwaiter\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.Task&lt;TResult&gt;.Result\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"18053839-9cb1-37a5-de5d-248dc7f7e4b8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an asynchronous operation that can return a value.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Threading.Tasks/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.Task`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Threading.Tasks.Task-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Threading.Tasks.Task-1.yml","open_to_public_contributors":true,"api_name":["System.Threading.Tasks.Task<TResult>","System.Threading.Tasks.Task<TResult>..ctor","System.Threading.Tasks.Task<TResult>.ConfigureAwait","System.Threading.Tasks.Task<TResult>.ContinueWith","System.Threading.Tasks.Task<TResult>.ContinueWith<TNewResult>","System.Threading.Tasks.Task<TResult>.Factory","System.Threading.Tasks.Task<TResult>.GetAwaiter","System.Threading.Tasks.Task<TResult>.Result"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.Task`1","System::Threading::Tasks::Task`1","System.Threading.Tasks.Task`1.#ctor","System::Threading::Tasks::Task`1::#ctor","System.Threading.Tasks.Task`1.ConfigureAwait","System::Threading::Tasks::Task`1::ConfigureAwait","System.Threading.Tasks.Task`1.ContinueWith","System::Threading::Tasks::Task`1::ContinueWith","System.Threading.Tasks.Task`1.ContinueWith``1","System::Threading::Tasks::Task`1::ContinueWith``1","System.Threading.Tasks.Task`1.Factory","System::Threading::Tasks::Task`1::Factory","System.Threading.Tasks.Task`1.GetAwaiter","System::Threading::Tasks::Task`1::GetAwaiter","System.Threading.Tasks.Task`1.Result","System::Threading::Tasks::Task`1::Result"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"18053839-9cb1-37a5-de5d-248dc7f7e4b8","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Threading.Tasks/Task`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Task<TResult> class | Microsoft Docs","_op_ogTitle":"Task<TResult> class","description":"Represents an asynchronous operation that can return a value.\n","toc_asset_id":"_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.Task`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.task-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.threading.tasks.task-1","fileRelativePath":"System.Threading.Tasks.Task-1.html"},"themesRelativePathToOutputRoot":"_themes/"}