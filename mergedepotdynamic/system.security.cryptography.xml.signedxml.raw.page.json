{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_Xml_SignedXml\">\r\n      <span class=\"lang-csharp\">SignedXml</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a wrapper on a core XML signature object to facilitate creating XML signatures.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class SignedXml</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SignedXml</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The SignedXml class is the .NET Framework implementation of the World Wide Web Consortium (W3C) <a href=\"http://www.w3.org/TR/xmldsig-core/\" data-linktype=\"external\">XML Signature Syntax and Processing Specification</a>, also known as XMLDSIG (XML Digital Signature).  XMLDSIG is a standards-based, interoperable way to sign and verify all or part of an XML document or other data that is addressable from a Uniform Resource Identifier (URI).  </p>\n<p> Use the SignedXml class whenever you need to share signed XML data between applications or organizations in a standard way.  Any data signed using this class can be verified by any conforming implementation of the W3C specification for XMLDSIG.  </p>\n<p> The SignedXml class allows you to create the following three kinds of XML digital signatures:  </p>\n<table>\n<thead>\n<tr>\n<th>Signature Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enveloped signature</td>\n<td>The signature is contained within the XML element being signed.</td>\n</tr>\n<tr>\n<td>Enveloping signature</td>\n<td>The signed XML is contained within the &lt;<code>Signature</code>&gt; element.</td>\n</tr>\n<tr>\n<td>Internal detached signature</td>\n<td>The signature and signed XML are in the same document, but neither element contains the other.</td>\n</tr>\n</tbody>\n</table>\n<p> There is also a fourth kind of signature called an external detached signature which is when the data and signature are in separate XML documents. External detached signatures are not supported by the SignedXml class.  </p>\n<h2 id=\"the-structure-of-an--xml-signature\">The structure of an  XML Signature</h2>\n<p> XMLDSIG creates a &lt;<code>Signature</code>&gt; element, which contains a digital signature of an XML document or other data that is addressable from a URI.  The &lt;<code>Signature</code>&gt; element can optionally contain information about where to find a key that will verify the signature and which cryptographic algorithm was used for signing. The basic structure is as follows:  </p>\n<pre><code class=\"lang-xml\">\n&lt;Signature xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;  \n    &lt;SignedInfo&gt;  \n      &lt;CanonicalizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot;/&gt;  \n      &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;/&gt;  \n      &lt;Reference URI=&quot;&quot;&gt;  \n        &lt;Transforms&gt;  \n          &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;/&gt;  \n        &lt;/Transforms&gt;  \n        &lt;DigestMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#sha1&quot;/&gt;  \n        &lt;DigestValue&gt;Base64EncodedValue==&lt;/DigestValue&gt;  \n      &lt;/Reference&gt;  \n    &lt;/SignedInfo&gt;  \n    &lt;SignatureValue&gt;AnotherBase64EncodedValue===&lt;/SignatureValue&gt;  \n  &lt;/Signature&gt;\n</code></pre><p> The main parts of this structure are:  </p>\n<p> The &lt;<code>CanonicalizationMethod</code>&gt; element<br> Specifies the rules for rewriting the <code>Signature</code> element from XML/text into bytes for signature validation. The default value in the .NET Framework is <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a>, which identifies a trustworthy algorithm. This element is represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo#System_Security_Cryptography_Xml_SignedInfo_CanonicalizationMethod_\" data-linktype=\"relative-path\">CanonicalizationMethod</a> property.  </p>\n<p> The &lt;<code>SignatureMethod</code>&gt; element<br> Specifies the algorithm used for signature generation and validation, which was applied to the &lt;<code>Signature</code>&gt; element to produce the value in &lt;<code>SignatureValue</code>&gt;. In the example above, the value <a href=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#rsa-sha1</a> identifies an RSA PKCS1 SHA-1 signature. This element is represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SignatureMethod_\" data-linktype=\"relative-path\">SignatureMethod</a> property.  </p>\n<p> The &lt;<code>SignatureValue</code>&gt; element<br> Specifies the cryptographic signature for the &lt;<code>Signature</code>&gt; element. If this signature does not verify, then some portion of the &lt;<code>Signature</code>&gt; block was tampered with, and the document is considered invalid. As long as the &lt;<code>CanonicalizationMethod</code>&gt; value is trustworthy, this value is highly resistant to tampering. This element is represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SignatureValue_\" data-linktype=\"relative-path\">SignatureValue</a> property.  </p>\n<p> The <code>URI</code> attribute of the &lt;<code>Reference</code>&gt; element<br> Specifies a data object using a URI reference. This attribute is represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.reference#System_Security_Cryptography_Xml_Reference_Uri_\" data-linktype=\"relative-path\">Uri</a> property.  </p>\n<ul>\n<li><p>Not specifying the <code>URI</code> attribute, that is, setting the  <a class=\"xref\" href=\"system.security.cryptography.xml.reference#System_Security_Cryptography_Xml_Reference_Uri_\" data-linktype=\"relative-path\">Uri</a> property to <code>null</code>, means that the receiving application is expected to know the identity of the object. In most cases, a <code>null</code> URI will result in an exception being thrown. Do not use a <code>null</code> URI, unless your application is interoperating with a protocol which requires it.  </p>\n</li>\n<li><p>Setting the <code>URI</code> attribute to an empty string indicates that the root element of the document is being signed, a form of enveloped signature.  </p>\n</li>\n<li><p>If the value of <code>URI</code> attribute starts with #, then the value must resolve to an element in the current document. This form can be used with any of the supported signature types (enveloped signature, enveloping signature or internal detached signature).  </p>\n</li>\n<li><p>Anything else is considered an external resource detached signature and is not supported by the SignedXml class.  </p>\n<p>The &lt;<code>Transforms</code>&gt; element<br>Contains an ordered list of &lt;<code>Transform</code>&gt; elements that describe how the signer obtained the data object that was digested. A transform algorithm is similar to the canonicalization method, but instead of rewriting the &lt;<code>Signature</code>&gt; element, it rewrites the content identified by the <code>URI</code> attribute of the &lt;<code>Reference</code>&gt; element. The &lt;<code>Transforms</code>&gt; element is represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.transformchain\" data-linktype=\"relative-path\">TransformChain</a> class.  </p>\n</li>\n<li><p>Each transform algorithm is defined as taking either XML (an XPath node-set) or bytes as input. If the format of the current data differs from the transform input requirements, conversion rules are applied.  </p>\n</li>\n<li><p>Each transform algorithm is defined as producing either XML or bytes as the output.  </p>\n</li>\n<li><p>If the output of the last transform algorithm is not defined in bytes (or no transforms were specified), then the canonicalization method <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a> is used as an implicit transform (even if a different algorithm was specified in the &lt;<code>CanonicalizationMethod</code>&gt; element).  </p>\n</li>\n<li><p>A value of <a href=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#enveloped-signature</a> for the transform algorithm encodes a rule which is interpreted as remove the &lt;<code>Signature</code>&gt; element from the document. Otherwise, a verifier of an enveloped signature will digest the document, including the signature, but the signer would have digested the document before the signature was applied, leading to different answers.  </p>\n<p>The &lt;<code>DigestMethod</code>&gt; element<br>Identifies the digest (cryptographic hash) method to apply on the transformed content identified by the <code>URI</code> attribute of the &lt;<code>Reference</code>&gt; element. This is represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.reference#System_Security_Cryptography_Xml_Reference_DigestMethod_\" data-linktype=\"relative-path\">DigestMethod</a> property.  </p>\n</li>\n</ul>\n<h2 id=\"choosing-a-canonicalization-method\">Choosing a canonicalization method</h2>\n<p> Unless interoperating with a specification which requires the use of a different value, we recommend that you use the default canonicalization method in the .NET Framework which is the XML-C14N 1.0 algorithm, whose value is <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a>. The XML-C14N 1.0 algorithm is required to be supported by all implementations of XMLDSIG, particularly as it is an implicit final transform to apply.  </p>\n<p> There are versions of canonicalization algorithms which support preserving comments. Comment-preserving canonicalization methods are not recommended because they violate the &quot;sign what is seen&quot; principle. That is, the comments in a &lt;<code>Signature</code>&gt; element will not alter the processing logic for how the signature is performed, merely what the signature value is. When combined with a weak signature algorithm, allowing the comments to be included gives an attacker unnecessary freedom to force a hash collision, making a tampered document appear legitimate.  In the .NET Framework, only built-in canonicalizers are supported by default. To support additional or custom canonicalizers, see the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SafeCanonicalizationMethods_\" data-linktype=\"relative-path\">SafeCanonicalizationMethods</a> property. If the document uses a canonicalization method that is not in the collection represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SafeCanonicalizationMethods_\" data-linktype=\"relative-path\">SafeCanonicalizationMethods</a> property, then the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> method will return <code>false</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> An extremely defensive application can remove any values it does not expect signers to use from the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SafeCanonicalizationMethods_\" data-linktype=\"relative-path\">SafeCanonicalizationMethods</a> collection.  </p>\n</div>\n<h2 id=\"are-the-reference-values-safe-from-tampering\">Are the Reference values safe from tampering?</h2>\n<p> Yes, the &lt;<code>Reference</code>&gt; values are safe from tampering.  The .NET framework verifies the &lt;<code>SignatureValue</code>&gt; computation before processing any of the &lt;<code>Reference</code>&gt; values and their associated transforms, and will abort early to avoid potentially malicious processing instructions.  </p>\n<h2 id=\"choosing-the-elements-to-sign\">Choosing the elements to sign</h2>\n<p> We recommend that you use the value of &quot;&quot; for the <code>URI</code> attribute (or set the <a class=\"xref\" href=\"system.security.cryptography.xml.reference#System_Security_Cryptography_Xml_Reference_Uri_\" data-linktype=\"relative-path\">Uri</a> property to an empty string), if possible. This means the whole document is considered for the digest computation, which means the whole document is protected from tampering.  </p>\n<p> It is very common to see <code>URI</code> values in the form of anchors such as #foo, referring to an element whose ID attribute is &quot;foo&quot;. Unfortunately, it is easy for this to be tampered with because this includes only the content of the target element, not the context. Abusing this distinction is known as XML Signature Wrapping (XSW).  </p>\n<p> If your application considers comments to be semantic (which is not common when dealing with XML), then you should use &quot;#xpointer(/)&quot; instead of &quot;&quot;, and &quot;#xpointer(id(&#39;foo&#39;))&quot; instead of &quot;#foo&quot;. The #xpointer versions are interpreted as including comments, while the shortname forms are excluding comments.  </p>\n<p> If you need to accept documents which are only partially protected and you want to ensure that you are reading the same content that the signature protected, use the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_GetIdElement_\" data-linktype=\"relative-path\">GetIdElement</a> method.  </p>\n<h2 id=\"security-considerations-about-the-keyinfo-element\">Security considerations about the KeyInfo element</h2>\n<p> The data in the optional &lt;<code>KeyInfo</code>&gt; element (that is, the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_KeyInfo_\" data-linktype=\"relative-path\">KeyInfo</a> property), which contains a key to validate the signature,  should not be trusted.  </p>\n<p> In particular, when the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_KeyInfo_\" data-linktype=\"relative-path\">KeyInfo</a> value represents a bare RSA, DSA or ECDSA public key,  the document could have been tampered with, despite the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> method reporting that the signature is valid.  This can happen because the entity doing the tampering just has to generate a new key and re-sign the tampered document with that new key. So, unless your application verifies that the public key is an expected value, the document should be treated as if it were tampered with. This requires that your application examine the public key embedded within the document and verify it against a list of known values for the document context. For example, if the document could be understood to be issued by a known user, you&#39;d check the key against a list of known keys used by that user.  </p>\n<p> You can also verify the key after processing the document by using the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignatureReturningKey_\" data-linktype=\"relative-path\">CheckSignatureReturningKey</a> method, instead of using the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> method. But, for the optimal security, you should verify the key beforehand.  </p>\n<p> Alternately, consider trying the user&#39;s registered public keys, rather than reading what&#39;s in the &lt;<code>KeyInfo</code>&gt; element.  </p>\n<h2 id=\"security-considerations-about-the-x509data-element\">Security considerations about the X509Data element</h2>\n<p> The optional &lt;<code>X509Data</code>&gt; element is a child of the &lt;<code>KeyInfo</code>&gt; element and contains one or more X509 certificates or identifiers for X509 certificates. The data in the &lt;<code>X509Data</code>&gt; element should also not be inherently trusted.  </p>\n<p> When verifying a document with the embedded &lt;<code>X509Data</code>&gt; element, the .NET Framework verifies only that the data resolves to an X509 certificate whose public key can be successfully used to validate the document signature. Unlike calling the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> method with the <code>verifySignatureOnly</code> parameter set to <code>false</code>, no revocation check is performed, no chain trust is checked, and no expiration is verified. Even if your application extracts the certificate itself and passes it to the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> method with the <code>verifySignatureOnly</code> parameter set to <code>false</code>, that is still not sufficient validation to prevent document tampering. The certificate still needs to be verified as being appropriate for the document being signed.  </p>\n<p> Using an embedded signing certificate can provide useful key rotation strategies, whether in the &lt;<code>X509Data</code>&gt; section or in the document content. When using this approach an application should extract the certificate manually and perform validation similar to:  </p>\n<ul>\n<li><p>The certificate was issued directly or via a chain by a Certificate Authority (CA) whose public certificate is embedded in the application.  </p>\n<p> Using the OS-provided trust list without additional checks, such as a known subject name, is not sufficient to prevent tampering in SignedXml.  </p>\n</li>\n<li><p>The certificate is verified to have not been expired at the time of document signing (or â€œnowâ€ for near real-time document processing).  </p>\n</li>\n<li><p>For long-lived certificates issued by a CA which supports revocation, verify the certificate was not revoked.  </p>\n</li>\n<li><p>The certificate subject is verified as being appropriate to the current document.  </p>\n</li>\n</ul>\n<h2 id=\"choosing-the-transform-algorithm\">Choosing the transform algorithm</h2>\n<p> If you are interoperating with a specification which has dictated specific values (such as XrML), then you need to follow the specification.  If you have an enveloped signature (such as when signing the whole document), then you need to use <a href=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#enveloped-signature</a> (represented by the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> class). You can specify the implicit XML-C14N transform as well, but it&#39;s not necessary.  For an enveloping or detached signature, no transforms are required. The implicit XML-C14N transform takes care of everything.  </p>\n<p> With the security updated introduced by the <a href=\"https://technet.microsoft.com/en-us/library/security/ms16-035.aspx\" data-linktype=\"external\">Microsoft Security Bulletin MS16-035</a>, the .NET Framework has restricted what transforms can be used in document verification by default, with untrusted transforms causing <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> to always return <code>false</code>. In particular, transforms which require additional input (specified as child elements in the XML) are no longer allowed due to their susceptibility of abuse by malicious users. The W3C advises avoiding the XPath and XSLT transforms, which are the two main transforms affected by these restrictions.  </p>\n<h2 id=\"the-problem-with-external-references\">The problem with external references</h2>\n<p> If an application does not verify that external references seem appropriate for the current context, they can be abused in ways that provide for many security vulnerabilities (including Denial of Service, Distributed Reflection Denial of Service, Information Disclosure, Signature Bypass, and Remote Code Execution). Even if an application were to validate the external reference URI, there would remain a problem of the resource being loaded twice: once when your application reads it, and once when SignedXml reads it. Since thereâ€™s no guarantee that the application read and document verify steps have the same content, the signature does not provide trustworthiness.  </p>\n<p> Given the risks of external references, SignedXml will throw an exception when an external reference is encountered.  For more information about this issue, see <a href=\"https://support.microsoft.com/en-us/kb/3148821\" data-linktype=\"external\">KB article 3148821</a>.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml__ctor\" data-linktype=\"self-bookmark\">SignedXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml__ctor_System_Xml_XmlDocument_\" data-linktype=\"self-bookmark\">SignedXml(XmlDocument)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class from the specified XML document.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml__ctor_System_Xml_XmlElement_\" data-linktype=\"self-bookmark\">SignedXml(XmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class from the specified <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_m_signature\" data-linktype=\"self-bookmark\">m_signature</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_m_strSigningKeyName\" data-linktype=\"self-bookmark\">m_strSigningKeyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the name of the installed key to be used for signing the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDecryptionTransformUrl\" data-linktype=\"self-bookmark\">XmlDecryptionTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the XML mode decryption transformation. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigBase64TransformUrl\" data-linktype=\"self-bookmark\">XmlDsigBase64TransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the base 64 transformation. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigC14NTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NWithCommentsTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigC14NWithCommentsTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation, with comments. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationUrl\" data-linktype=\"self-bookmark\">XmlDsigCanonicalizationUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationWithCommentsUrl\" data-linktype=\"self-bookmark\">XmlDsigCanonicalizationWithCommentsUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures and includes comments. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigDSAUrl\" data-linktype=\"self-bookmark\">XmlDsigDSAUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> algorithm for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigEnvelopedSignatureTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigEnvelopedSignatureTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for enveloped signature transformation. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigExcC14NTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigExcC14NTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigExcC14NWithCommentsTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigExcC14NWithCommentsTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization, with comments. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigHMACSHA1Url\" data-linktype=\"self-bookmark\">XmlDsigHMACSHA1Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a> algorithm for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigMinimalCanonicalizationUrl\" data-linktype=\"self-bookmark\">XmlDsigMinimalCanonicalizationUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard minimal canonicalization algorithm for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigNamespaceUrl\" data-linktype=\"self-bookmark\">XmlDsigNamespaceUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard namespace for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA1Url\" data-linktype=\"self-bookmark\">XmlDsigRSASHA1Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature method for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA256Url\" data-linktype=\"self-bookmark\">XmlDsigRSASHA256Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the  <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> SHA-256 signature method variation for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA384Url\" data-linktype=\"self-bookmark\">XmlDsigRSASHA384Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the  <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> SHA-384 signature method variation for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA512Url\" data-linktype=\"self-bookmark\">XmlDsigRSASHA512Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the  <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> SHA-512 signature method variation for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA1Url\" data-linktype=\"self-bookmark\">XmlDsigSHA1Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha1\" data-linktype=\"relative-path\">SHA1</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA256Url\" data-linktype=\"self-bookmark\">XmlDsigSHA256Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha256\" data-linktype=\"relative-path\">SHA256</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA384Url\" data-linktype=\"self-bookmark\">XmlDsigSHA384Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha384\" data-linktype=\"relative-path\">SHA384</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA512Url\" data-linktype=\"self-bookmark\">XmlDsigSHA512Url</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha512\" data-linktype=\"relative-path\">SHA512</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigXPathTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigXPathTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the XML Path Language (XPath). This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlDsigXsltTransformUrl\" data-linktype=\"self-bookmark\">XmlDsigXsltTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for XSLT transformations. This field is constant.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_XmlLicenseTransformUrl\" data-linktype=\"self-bookmark\">XmlLicenseTransformUrl</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Uniform Resource Identifier (URI) for the license transform algorithm used to normalize XrML licenses for signatures.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_EncryptedXml\" data-linktype=\"self-bookmark\">EncryptedXml</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a> object that defines the XML encryption processing rules.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_KeyInfo\" data-linktype=\"self-bookmark\">KeyInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_Resolver\" data-linktype=\"self-bookmark\">Resolver</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the current <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SafeCanonicalizationMethods\" data-linktype=\"self-bookmark\">SafeCanonicalizationMethods</a></div>\r\n          </td>\r\n            <td>\r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Gets the names of methods whose canonicalization algorithms are explicitly allowed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_Signature\" data-linktype=\"self-bookmark\">Signature</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SignatureFormatValidator\" data-linktype=\"self-bookmark\">SignatureFormatValidator</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a delegate that will be called to validate the format (not the cryptographic security) of an XML signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SignatureLength\" data-linktype=\"self-bookmark\">SignatureLength</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the signature for the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SignatureMethod\" data-linktype=\"self-bookmark\">SignatureMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the signature method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SignatureValue\" data-linktype=\"self-bookmark\">SignatureValue</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the signature value of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SignedInfo\" data-linktype=\"self-bookmark\">SignedInfo</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SigningKey\" data-linktype=\"self-bookmark\">SigningKey</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the asymmetric algorithm key used for signing a <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_SigningKeyName\" data-linktype=\"self-bookmark\">SigningKeyName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the installed key to be used for signing the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_AddObject_System_Security_Cryptography_Xml_DataObject_\" data-linktype=\"self-bookmark\">AddObject(DataObject)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object to the list of objects to be signed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_AddReference_System_Security_Cryptography_Xml_Reference_\" data-linktype=\"self-bookmark\">AddReference(Reference)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds a <a class=\"xref\" href=\"system.security.cryptography.xml.reference\" data-linktype=\"relative-path\">Reference</a> object to the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_CheckSignature\" data-linktype=\"self-bookmark\">CheckSignature()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies using the public key in the signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_AsymmetricAlgorithm_\" data-linktype=\"self-bookmark\">CheckSignature(AsymmetricAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_KeyedHashAlgorithm_\" data-linktype=\"self-bookmark\">CheckSignature(KeyedHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified message authentication code (MAC) algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_X509Certificates_X509Certificate2_System_Boolean_\" data-linktype=\"self-bookmark\">CheckSignature(X509Certificate2,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object and, optionally, whether the certificate is valid.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_CheckSignatureReturningKey_System_Security_Cryptography_AsymmetricAlgorithm__\" data-linktype=\"self-bookmark\">CheckSignatureReturningKey(AsymmetricAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies using the public key in the signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_ComputeSignature\" data-linktype=\"self-bookmark\">ComputeSignature()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes an XML digital signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_ComputeSignature_System_Security_Cryptography_KeyedHashAlgorithm_\" data-linktype=\"self-bookmark\">ComputeSignature(KeyedHashAlgorithm)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Computes an XML digital signature using the specified message authentication code (MAC) algorithm.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_GetIdElement_System_Xml_XmlDocument_System_String_\" data-linktype=\"self-bookmark\">GetIdElement(XmlDocument,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object with the specified ID from the specified <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_GetPublicKey\" data-linktype=\"self-bookmark\">GetPublicKey()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public key of a signature.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_GetXml\" data-linktype=\"self-bookmark\">GetXml()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML representation of a <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_Xml_SignedXml_LoadXml_System_Xml_XmlElement_\" data-linktype=\"self-bookmark\">LoadXml(XmlElement)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Loads a <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> state from an XML element.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml__ctor\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignedXml()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SignedXml ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.  Pass &quot;&quot; \n        // to specify that all of the current XML\n        // document should be signed.\n        Reference reference = new Reference(&quot;&quot;);\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.Signature - Envelope#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.  Pass &quot;&quot; \n        &#39; to specify that all of the current XML\n        &#39; document should be signed.\n        Dim reference As New Reference(&quot;&quot;)\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Get the signature object from the SignedXml object.\n   Signature^ XMLSignature = signedXml-&gt;Signature;\n   \n   // Create a reference to be signed.  Pass &quot;&quot; \n   // to specify that all of the current XML\n   // document should be signed.\n   Reference^ reference = gcnew Reference( L&quot;&quot; );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the Reference object to the Signature object.\n   XMLSignature-&gt;SignedInfo-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   \n   // Add the KeyInfo object to the Reference object.\n   XMLSignature-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><p> The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n\nnamespace Sample\n{\n    public ref class SignVerifyEnvelope\n    {\n    public:\n        static void Work()\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider^ key = \n                gcnew RSACryptoServiceProvider();\n\n            try\n            {\n\n                // Sign the detached resource and save the \n                // signature in an XML file.\n                SignDetachedResource(&quot;http://www.microsoft.com&quot;,\n                    &quot;SignedExample.xml&quot;, key);\n\n                Console::WriteLine(&quot;XML file signed.&quot;);\n\n                // Verify the signature of the signed XML.\n                Console::WriteLine(&quot;Verifying signature...&quot;);\n\n                bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n                // Display the results of the signature verification \n                // to the console.\n                if (result)\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is valid.&quot;);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is not valid.&quot;);\n                }\n                Console::ReadLine();\n            }\n\n            catch (CryptographicException^ ex)\n            {\n                Console::WriteLine(ex-&gt;Message);\n            }\n            finally\n            {\n                // Clear resources associated with the \n                // RSACryptoServiceProvider.\n                key-&gt;Clear();\n            }\n        }\n\n\n        // Sign an XML file and save the signature in a new file.\n        static void SignDetachedResource(String^ uri, \n            String^ xmlFileName, RSA^ key)\n        {\n            // Check the arguments.  \n            if (uri-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;uri&quot;);\n            }\n            if (xmlFileName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;xmlFileName&quot;);\n            } \n            if (key-&gt;KeySize == 0)\n            {\n                throw gcnew ArgumentException(&quot;key&quot;);\n            }\n            // Create a SignedXml object.\n            SignedXml^ signedXml = gcnew SignedXml();\n\n            // Assign the key to the SignedXml object.\n            signedXml-&gt;SigningKey = key;\n\n            // Get the signature object from the SignedXml object.\n            Signature^ xmlSignature = signedXml-&gt;Signature;\n\n            // Create a reference to be signed.\n            Reference^ reference = gcnew Reference();\n\n            // Add the passed URI to the reference object.\n            reference-&gt;Uri = uri;\n\n            // Add the Reference object to the Signature object.\n            xmlSignature-&gt;SignedInfo-&gt;AddReference(reference);\n\n            // Add an RSAKeyValue KeyInfo (optional; helps recipient\n            // find key to validate).\n            KeyInfo^ keyInfo = gcnew KeyInfo();\n            keyInfo-&gt;AddClause(\n                gcnew RSAKeyValue(key));\n\n            // Add the KeyInfo object to the Reference object.\n            xmlSignature-&gt;KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml-&gt;ComputeSignature();\n\n            // Get the XML representation of the signature and save\n            // it to an XmlElement object.\n            XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n\n            // Save the signed XML document to a file specified\n            // using the passed string.\n            XmlTextWriter^ xmlTextWriter = gcnew XmlTextWriter(\n                xmlFileName, gcnew UTF8Encoding(false));\n\n            xmlDigitalSignature-&gt;WriteTo(xmlTextWriter);\n            xmlTextWriter-&gt;Close();\n        }\n\n\n        // Verify the signature of an XML file and return the result.\n        static Boolean VerifyXmlFile(String^ documentName)\n        {\n            // Check the arguments.  \n            if (documentName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;documentName&quot;);\n            }\n            // Create a new XML document.\n            XmlDocument^ xmlDocument = gcnew XmlDocument();\n\n            // Format using white spaces.\n            xmlDocument-&gt;PreserveWhitespace = true;\n\n            // Load the passed XML file into the document. \n            xmlDocument-&gt;Load(documentName);\n\n            // Create a new SignedXml object and pass it\n            // the XML document class.\n            SignedXml^ signedXml = gcnew SignedXml(xmlDocument);\n\n            // Find the &quot;Signature&quot; node and create a new\n            // XmlNodeList object.\n            XmlNodeList^ nodeList = \n                xmlDocument-&gt;GetElementsByTagName(&quot;Signature&quot;);\n\n            // Load the signature node.\n            signedXml-&gt;LoadXml(\n                (XmlElement^) nodeList-&gt;Item(0));\n\n            // Check the signature and return the result.\n            return signedXml-&gt;CheckSignature();\n        }\n    };\n}\n\n\nint main()\n{\n    Sample::SignVerifyEnvelope::Work();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign the detached resource and save the signature in an XML file.\n           SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key);\n\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \\\n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (URIString == null)\n            throw new ArgumentNullException(&quot;URIString&quot;);\n        if (XmlSigFileName == null)\n            throw new ArgumentNullException(&quot;XmlSigFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG - Signature - Detached#1\">&#39; This example signs a URL using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign the detached resource and save the signature in an XML file.\n            SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key)\n\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignDetachedResource(ByVal URIString As String, ByVal XmlSigFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If URIString Is Nothing Then\n            Throw New ArgumentNullException(&quot;URIString&quot;)\n        End If\n        If XmlSigFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;XmlSigFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n\n        &#39; Add the passed URI to the reference object.\n        reference.Uri = URIString\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n        xmlDigitalSignature.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><p> The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, array&lt;String^&gt;^ElementsToSign )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   if ( ElementsToSign == nullptr )\n      throw gcnew ArgumentNullException( L&quot;ElementsToSign&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Loop through each passed element to sign \n   // and create a reference.\n   System::Collections::IEnumerator^ myEnum = ElementsToSign-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      \n      // Create a reference to be signed.\n      Reference^ reference = gcnew Reference;\n      reference-&gt;Uri = s;\n      \n      // Add an enveloped transformation to the reference.\n      XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n      reference-&gt;AddTransform( env );\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n   }\n\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Specify an element to sign. \n      array&lt;String^&gt;^elements = {L&quot;#tag1&quot;};\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key, elements );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n           // Specify an element to sign. \n           string[] elements =  { &quot;#tag1&quot; };\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string[] ElementsToSign)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n        if (ElementsToSign == null)\n            throw new ArgumentNullException(&quot;ElementsToSign&quot;);\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Loop through each passed element to sign \n        // and create a reference.\n        foreach (string s in ElementsToSign)\n        {\n            // Create a reference to be signed.\n            Reference reference = new Reference();\n            reference.Uri = s;\n\n            // Add an enveloped transformation to the reference.\n            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n            reference.AddTransform(env);\n\n            // Add the reference to the SignedXml object.\n            signedXml.AddReference(reference);\n\n        }\n\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Specify an element to sign. \n            Dim elements As String() = New String() {&quot;#tag1&quot;}\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal ElementsToSign() As String)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If ElementsToSign Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementsToSign&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Loop through each passed element to sign \n        &#39; and create a reference.\n        Dim s As String\n        For Each s In ElementsToSign\n            &#39; Create a reference to be signed.\n            Dim reference As New Reference()\n            reference.Uri = s\n\n            &#39; Add an enveloped transformation to the reference.\n            Dim env As New XmlDsigEnvelopedSignatureTransform()\n            reference.AddTransform(env)\n\n            &#39; Add the reference to the SignedXml object.\n            signedXml.AddReference(reference)\n        Next s\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml__ctor_System_Xml_XmlDocument_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignedXml(XmlDocument)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class from the specified XML document.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SignedXml (System.Xml.XmlDocument document);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>document</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object to use to initialize the new instance of <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>document</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>document</code> parameter contains a null <span class=\"xref\">stem.Xml.XmlDocument.DocumentElement*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.  Pass &quot;&quot; \n        // to specify that all of the current XML\n        // document should be signed.\n        Reference reference = new Reference(&quot;&quot;);\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.Signature - Envelope#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.  Pass &quot;&quot; \n        &#39; to specify that all of the current XML\n        &#39; document should be signed.\n        Dim reference As New Reference(&quot;&quot;)\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Get the signature object from the SignedXml object.\n   Signature^ XMLSignature = signedXml-&gt;Signature;\n   \n   // Create a reference to be signed.  Pass &quot;&quot; \n   // to specify that all of the current XML\n   // document should be signed.\n   Reference^ reference = gcnew Reference( L&quot;&quot; );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the Reference object to the Signature object.\n   XMLSignature-&gt;SignedInfo-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   \n   // Add the KeyInfo object to the Reference object.\n   XMLSignature-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><p> The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n\nnamespace Sample\n{\n    public ref class SignVerifyEnvelope\n    {\n    public:\n        static void Work()\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider^ key = \n                gcnew RSACryptoServiceProvider();\n\n            try\n            {\n\n                // Sign the detached resource and save the \n                // signature in an XML file.\n                SignDetachedResource(&quot;http://www.microsoft.com&quot;,\n                    &quot;SignedExample.xml&quot;, key);\n\n                Console::WriteLine(&quot;XML file signed.&quot;);\n\n                // Verify the signature of the signed XML.\n                Console::WriteLine(&quot;Verifying signature...&quot;);\n\n                bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n                // Display the results of the signature verification \n                // to the console.\n                if (result)\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is valid.&quot;);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is not valid.&quot;);\n                }\n                Console::ReadLine();\n            }\n\n            catch (CryptographicException^ ex)\n            {\n                Console::WriteLine(ex-&gt;Message);\n            }\n            finally\n            {\n                // Clear resources associated with the \n                // RSACryptoServiceProvider.\n                key-&gt;Clear();\n            }\n        }\n\n\n        // Sign an XML file and save the signature in a new file.\n        static void SignDetachedResource(String^ uri, \n            String^ xmlFileName, RSA^ key)\n        {\n            // Check the arguments.  \n            if (uri-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;uri&quot;);\n            }\n            if (xmlFileName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;xmlFileName&quot;);\n            } \n            if (key-&gt;KeySize == 0)\n            {\n                throw gcnew ArgumentException(&quot;key&quot;);\n            }\n            // Create a SignedXml object.\n            SignedXml^ signedXml = gcnew SignedXml();\n\n            // Assign the key to the SignedXml object.\n            signedXml-&gt;SigningKey = key;\n\n            // Get the signature object from the SignedXml object.\n            Signature^ xmlSignature = signedXml-&gt;Signature;\n\n            // Create a reference to be signed.\n            Reference^ reference = gcnew Reference();\n\n            // Add the passed URI to the reference object.\n            reference-&gt;Uri = uri;\n\n            // Add the Reference object to the Signature object.\n            xmlSignature-&gt;SignedInfo-&gt;AddReference(reference);\n\n            // Add an RSAKeyValue KeyInfo (optional; helps recipient\n            // find key to validate).\n            KeyInfo^ keyInfo = gcnew KeyInfo();\n            keyInfo-&gt;AddClause(\n                gcnew RSAKeyValue(key));\n\n            // Add the KeyInfo object to the Reference object.\n            xmlSignature-&gt;KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml-&gt;ComputeSignature();\n\n            // Get the XML representation of the signature and save\n            // it to an XmlElement object.\n            XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n\n            // Save the signed XML document to a file specified\n            // using the passed string.\n            XmlTextWriter^ xmlTextWriter = gcnew XmlTextWriter(\n                xmlFileName, gcnew UTF8Encoding(false));\n\n            xmlDigitalSignature-&gt;WriteTo(xmlTextWriter);\n            xmlTextWriter-&gt;Close();\n        }\n\n\n        // Verify the signature of an XML file and return the result.\n        static Boolean VerifyXmlFile(String^ documentName)\n        {\n            // Check the arguments.  \n            if (documentName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;documentName&quot;);\n            }\n            // Create a new XML document.\n            XmlDocument^ xmlDocument = gcnew XmlDocument();\n\n            // Format using white spaces.\n            xmlDocument-&gt;PreserveWhitespace = true;\n\n            // Load the passed XML file into the document. \n            xmlDocument-&gt;Load(documentName);\n\n            // Create a new SignedXml object and pass it\n            // the XML document class.\n            SignedXml^ signedXml = gcnew SignedXml(xmlDocument);\n\n            // Find the &quot;Signature&quot; node and create a new\n            // XmlNodeList object.\n            XmlNodeList^ nodeList = \n                xmlDocument-&gt;GetElementsByTagName(&quot;Signature&quot;);\n\n            // Load the signature node.\n            signedXml-&gt;LoadXml(\n                (XmlElement^) nodeList-&gt;Item(0));\n\n            // Check the signature and return the result.\n            return signedXml-&gt;CheckSignature();\n        }\n    };\n}\n\n\nint main()\n{\n    Sample::SignVerifyEnvelope::Work();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign the detached resource and save the signature in an XML file.\n           SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key);\n\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \\\n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (URIString == null)\n            throw new ArgumentNullException(&quot;URIString&quot;);\n        if (XmlSigFileName == null)\n            throw new ArgumentNullException(&quot;XmlSigFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG - Signature - Detached#1\">&#39; This example signs a URL using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign the detached resource and save the signature in an XML file.\n            SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key)\n\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignDetachedResource(ByVal URIString As String, ByVal XmlSigFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If URIString Is Nothing Then\n            Throw New ArgumentNullException(&quot;URIString&quot;)\n        End If\n        If XmlSigFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;XmlSigFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n\n        &#39; Add the passed URI to the reference object.\n        reference.Uri = URIString\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n        xmlDigitalSignature.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><p> The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, array&lt;String^&gt;^ElementsToSign )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   if ( ElementsToSign == nullptr )\n      throw gcnew ArgumentNullException( L&quot;ElementsToSign&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Loop through each passed element to sign \n   // and create a reference.\n   System::Collections::IEnumerator^ myEnum = ElementsToSign-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      \n      // Create a reference to be signed.\n      Reference^ reference = gcnew Reference;\n      reference-&gt;Uri = s;\n      \n      // Add an enveloped transformation to the reference.\n      XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n      reference-&gt;AddTransform( env );\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n   }\n\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Specify an element to sign. \n      array&lt;String^&gt;^elements = {L&quot;#tag1&quot;};\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key, elements );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n           // Specify an element to sign. \n           string[] elements =  { &quot;#tag1&quot; };\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string[] ElementsToSign)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n        if (ElementsToSign == null)\n            throw new ArgumentNullException(&quot;ElementsToSign&quot;);\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Loop through each passed element to sign \n        // and create a reference.\n        foreach (string s in ElementsToSign)\n        {\n            // Create a reference to be signed.\n            Reference reference = new Reference();\n            reference.Uri = s;\n\n            // Add an enveloped transformation to the reference.\n            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n            reference.AddTransform(env);\n\n            // Add the reference to the SignedXml object.\n            signedXml.AddReference(reference);\n\n        }\n\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Specify an element to sign. \n            Dim elements As String() = New String() {&quot;#tag1&quot;}\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal ElementsToSign() As String)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If ElementsToSign Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementsToSign&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Loop through each passed element to sign \n        &#39; and create a reference.\n        Dim s As String\n        For Each s In ElementsToSign\n            &#39; Create a reference to be signed.\n            Dim reference As New Reference()\n            reference.Uri = s\n\n            &#39; Add an enveloped transformation to the reference.\n            Dim env As New XmlDsigEnvelopedSignatureTransform()\n            reference.AddTransform(env)\n\n            &#39; Add the reference to the SignedXml object.\n            signedXml.AddReference(reference)\n        Next s\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml__ctor_System_Xml_XmlElement_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignedXml(XmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> class from the specified <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SignedXml (System.Xml.XmlElement elem);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>elem</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object to use to initialize the new instance of <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>elem</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_m_signature\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">m_signature</div>        \r\n          </div>\r\n    \r\n            <p>Represents the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Security.Cryptography.Xml.Signature m_signature;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_m_strSigningKeyName\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">m_strSigningKeyName</div>        \r\n          </div>\r\n    \r\n            <p>Represents the name of the installed key to be used for signing the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected string m_strSigningKeyName;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDecryptionTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDecryptionTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the XML mode decryption transformation. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDecryptionTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDecryptionTransformUrl field is &quot;<a href=\"http://www.w3.org/2002/07/decrypt#XML\" data-linktype=\"external\">http://www.w3.org/2002/07/decrypt#XML</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2002/07/decrypt#XML\" data-linktype=\"external\">http://www.w3.org/2002/07/decrypt#XML</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigBase64TransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigBase64TransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the base 64 transformation. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigBase64TransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigBase64TransformUrl field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#base64\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#base64</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigbase64transform\" data-linktype=\"relative-path\">XmlDsigBase64Transform</a> class implements the transform described by the XmlDsigBase64TransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#base64\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#base64</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use members of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigbase64transform\" data-linktype=\"relative-path\">XmlDsigBase64Transform</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigBase64Transform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Class1\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Encrypt an XML message\n        EncryptXML(LoadXMLDoc());\n\n        // Using XmlDsigBase64Transform resolving a Uri.\n        Uri baseUri = new Uri(&quot;http://www.microsoft.com&quot;);\n        string relativeUri = &quot;msdn&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void EncryptXML(XmlDocument xmlDoc)\n    {\n        XmlDsigBase64Transform xmlTransform = new XmlDsigBase64Transform();\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = SignedXml.XmlDsigBase64TransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n\n        Console.WriteLine(&quot;Xml representation of the current transform: &quot;);\n        Console.WriteLine(xmlInTransform.OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i=0; i&lt;validInTypes.Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc.GetType())\n            {\n                // Demonstrate loading the entire Xml Document.\n                xmlTransform.LoadInput(xmlDoc);\n\n                // This transform is created for demonstration purposes.\n                XmlDsigBase64Transform secondTransform =\n                    new XmlDsigBase64Transform();\n\n                string classDescription = secondTransform.ToString();\n\n                // This call does not perform as expected.\n                // LoadInnerXml is overridden by the XmlDsigBase64Transform\n                // class, but is stubbed out.\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;));\n\n                break;\n            }\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n\n        for (int i=0; i&lt;validOutTypes.Length; i++)\n        {\n            if (validOutTypes[i] == typeof(System.IO.Stream))\n            {\n                try \n                {\n                    Type streamType = typeof(System.IO.Stream);\n                    CryptoStream outputStream = (CryptoStream) \n                        xmlTransform.GetOutput(streamType);\n\n                    // Read the CryptoStream into a stream reader.\n                    StreamReader streamReader =\n                        new StreamReader(outputStream);\n\n                    // Read the stream into a string.\n                    string outputMessage = streamReader.ReadToEnd();\n\n                    // Close the streams.\n                    outputStream.Close();\n                    streamReader.Close();\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; +\n                        xmlDoc.InnerText);\n                    Console.WriteLine(&quot;Message encoded: &quot; + outputMessage);\n            }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document with Element and Text nodes.\n    private static XmlDocument LoadXMLDoc()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        XmlNode mainNode = xmlDoc.CreateNode(\n            XmlNodeType.Element,\n            &quot;ContosoMessages&quot;,\n            &quot;http://www.contoso.com&quot;);\n\n        XmlNode textNode = xmlDoc.CreateTextNode(&quot;Some text to encode.&quot;);\n        mainNode.AppendChild(textNode);\n        xmlDoc.AppendChild(mainNode);\n\n        Console.WriteLine(&quot;Created the following XML Document for &quot; +\n            &quot;transformation: &quot;);\n        Console.WriteLine(xmlDoc.InnerXml);\n        return xmlDoc;\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials = \n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigBase64Transform xmlTransform = new XmlDsigBase64Transform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;Resolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n//\n// This sample produces the following output:\n//\n// Created the following XML Document for transformation:\n// &lt;ContosoMessages xmlns=&quot;http://www.contoso.com&quot;&gt;Some text to encode.\n// &lt;/ContosoMessages&gt;\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#base64&quot; xmlns=\n// &quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Encoding the following message: Some text to encode.\n// Message encoded: Jmr^\n// Resolved the base Uri and relative Uri to the following:\n// http://www.microsoft.com/msdn\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigBase64Transform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Encrypt an XML message\n        EncryptXML(LoadXMLDoc())\n\n        &#39; Using XmlDsigBase64Transform resolving a Uri.\n        Dim baseUri As New Uri(&quot;http://www.microsoft.com&quot;)\n        Dim relativeUri As String = &quot;msdn&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        &#39; Reset the cursor and conclude application.\n        WriteLine(vbCrLf + &quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Encrypt the text in the specified XmlDocument.\n    Private Sub EncryptXML(ByVal xmlDoc As XmlDocument)\n        Dim xmlTransform As New XmlDsigBase64Transform\n\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = SignedXml.XmlDsigBase64TransformUrl\n\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n\n        WriteLine(&quot;Xml representation of the current transform: &quot;)\n        WriteLine(xmlInTransform.OuterXml)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes() As Type = xmlTransform.InputTypes\n\n        &#39; Verify the xmlTransform can accept the XMLDocument as an\n        &#39; input type.\n        For i As Int16 = 0 To validInTypes.Length Step 1\n            If (validInTypes(i).Equals(xmlDoc.GetType())) Then\n                &#39; Demonstrate loading the entire Xml Document.\n                xmlTransform.LoadInput(xmlDoc)\n\n                &#39; This transform is created for demonstration purposes.\n                Dim secondTransform As New XmlDsigBase64Transform\n\n                Dim classDescription As String = secondTransform.ToString()\n\n                &#39; This call does not perform as expected.\n                &#39; LoadInnerXml is overridden by the XmlDsigBase64Transform\n                &#39; class, but is stubbed out.\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;))\n\n                Exit For\n            End If\n        Next\n        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n\n        For i As Int16 = 0 To validOutTypes.Length Step 1\n            If (validOutTypes(i).equals(GetType(System.IO.Stream))) Then\n                Try\n                    Dim streamType As Type = GetType(System.IO.Stream)\n\n                    Dim outputStream As CryptoStream\n                    outputStream = CType( _\n                        xmlTransform.GetOutput(streamType), _\n                        CryptoStream)\n\n\n                    &#39; Read the CryptoStream into a stream reader.\n                    Dim streamReader As New StreamReader(outputStream)\n\n                    &#39; Read the stream into a string.\n                    Dim outputMessage As String = streamReader.ReadToEnd()\n\n                    &#39; Close the streams.\n                    outputStream.Close()\n                    streamReader.Close()\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    WriteLine(&quot;Encoding the following message: &quot; + _\n                        xmlDoc.InnerText)\n                    WriteLine(&quot;Message encoded: &quot; + outputMessage)\n\n                Catch ex As Exception\n                    WriteLine(&quot;Unexpected exception caught: &quot; + _\n                        ex.ToString())\n\n                End Try\n\n                &#39; Stop cycling through types, exit operation.\n                Exit For\n            Else\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If\n        Next\n    End Sub\n\n    &#39; Create an XML document with Element and Text nodes.\n    Private Function LoadXMLDoc() As XmlDocument\n        Dim xmlDoc As New XmlDocument\n\n        Dim mainNode As XmlNode = xmlDoc.CreateNode( _\n            XmlNodeType.Element, _\n            &quot;ContosoMessages&quot;, _\n            &quot;http://www.contoso.com&quot;)\n\n        Dim textNode As XmlNode\n        textNode = xmlDoc.CreateTextNode(&quot;Some text to encode.&quot;)\n        mainNode.AppendChild(textNode)\n        xmlDoc.AppendChild(mainNode)\n\n        WriteLine(&quot;Created the following XML Document for &quot; + _\n            &quot;transformation: &quot;)\n        WriteLine(xmlDoc.InnerXml)\n        Return xmlDoc\n    End Function\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Function ResolveUris( _\n        ByVal baseUri As Uri, _\n        ByVal relativeUri As String) As Uri\n\n        Dim xmlResolver As New XmlUrlResolver\n        xmlResolver.Credentials = _\n            System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigBase64Transform\n        xmlTransform.Resolver = xmlResolver\n\n        Dim absoluteUri As Uri = _\n            xmlResolver.ResolveUri(baseUri, relativeUri)\n\n        If Not absoluteUri Is Nothing Then\n            WriteLine( _\n                &quot;Resolved the base Uri and relative Uri to the following:&quot;)\n            WriteLine(absoluteUri.ToString())\n        Else\n            WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n        Return absoluteUri\n    End Function\n\n    &#39; Write message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;XmlDsigBase64Transform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; Created the following XML Document for transformation: \n&#39; &lt;ContosoMessages xmlns=&quot;http://www.contoso.com&quot;&gt;Some text to encode.\n&#39; &lt;/ContosoMessages&gt;\n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#base64&quot; xmlns=\n&#39; &quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Encoding the following message: Some text to encode.\n&#39; Message encoded: Jmr^\n&#39; Resolved the base Uri and relative Uri to the following:\n&#39; http://www.microsoft.com/msdn\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigBase64Transform#2\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\n\nnamespace CryptographyXmlDsigBase64Transform\n{\n    ref class Example\n    {\n    public:\n        static void Produce()\n        {\n            \n            // Encrypt an XML message\n            EncryptXML(LoadXMLDoc());\n            \n            // Using XmlDsigBase64Transform resolving a Uri.\n            Uri^ baseUri = gcnew Uri(&quot;http://www.microsoft.com&quot;);\n            String^ relativeUri = &quot;msdn&quot;;\n            Uri^ absoluteUri = ResolveUris(baseUri, relativeUri);\n            Console::WriteLine(&quot;This sample completed successfully; &quot;\n                &quot;press Enter to exit.&quot;);\n            Console::ReadLine();\n        }\n\n\n    private:\n\n        // Encrypt the text in the specified XmlDocument.\n        static void EncryptXML(XmlDocument^ xmlDoc)\n        {\n            \n            XmlDsigBase64Transform^ xmlTransform = \n                gcnew XmlDsigBase64Transform;\n            // Ensure the transform is using the proper algorithm.\n            xmlTransform-&gt;Algorithm = \n                SignedXml::XmlDsigBase64TransformUrl;\n            // Retrieve the XML representation of the current \n            // transform.\n            XmlElement^ xmlInTransform = xmlTransform-&gt;GetXml();\n            Console::WriteLine(&quot;Xml representation of the &quot; \n                &quot;current transform: &quot;);\n            Console::WriteLine(xmlInTransform-&gt;OuterXml);\n            \n            // Retrieve the valid input types for the current \n            // transform.\n            array&lt;Type^&gt;^ validInTypes = xmlTransform-&gt;InputTypes;\n            // Verify the xmlTransform can accept the XMLDocument\n            // as an input type.\n            for each (Type^ validInType in validInTypes)\n            {\n                if (validInType == xmlDoc-&gt;GetType())\n                {\n                    \n                    // Demonstrate loading the entire Xml Document.\n                    xmlTransform-&gt;LoadInput(xmlDoc);\n                    // This transform is created for demonstration \n                    // purposes.\n                    XmlDsigBase64Transform^ secondTransform = \n                        gcnew XmlDsigBase64Transform;\n                    String^ classDescription = \n                        secondTransform-&gt;ToString();\n                    // This call does not perform as expected.\n                    // LoadInnerXml is overridden by the \n                    // XmlDsigBase64Transform class, but is \n                    // stubbed out.\n                    secondTransform-&gt;LoadInnerXml(\n                        xmlDoc-&gt;SelectNodes(&quot;//.&quot;));\n                    break;\n                }\n\n            }\n            \n            array&lt;Type^&gt;^ validOutTypes = xmlTransform-&gt;OutputTypes;\n            for each (Type^ validOutType in validOutTypes)\n            {\n                if (validOutType == Stream::typeid)\n                {\n                    try\n                    {\n                        \n                        Type^ streamType = Stream::typeid;\n                        CryptoStream^ outputStream = \n                            (CryptoStream^)(xmlTransform-&gt;GetOutput(\n\t\t\t\t\t\t\tstreamType));\n                        // Read the CryptoStream into a stream reader.\n                        StreamReader^ streamReader = \n                            gcnew StreamReader(outputStream);\n                        \n                        // Read the stream into a string.\n                        String^ outputMessage = \n                            streamReader-&gt;ReadToEnd();\n                        \n                        // Close the streams.\n                        outputStream-&gt;Close();\n                        streamReader-&gt;Close();\n                        \n                        // Display to the console the Xml before and\n                        // after encryption.\n                        Console::WriteLine(&quot;Encoding the following &quot;\n                            &quot;message: {0}&quot;, xmlDoc-&gt;InnerText);\n                        Console::WriteLine(&quot;Message encoded: {0}&quot;, \n                            outputMessage);\n                    }\n                    catch (CryptographicException^ ex) \n                    {\n                        Console::WriteLine(&quot;Cryptographic exception &quot;\n                            &quot;caught: {0}&quot;, ex);\n                    }\n\n                    break;\n                }\n                else\n                {\n                    \n                    Object^ outputObject = xmlTransform-&gt;GetOutput();\n                }\n\n            }\n        }\n\n\n        // Create an XML document with Element and Text nodes.\n        static XmlDocument^ LoadXMLDoc()\n        {\n            XmlDocument^ xmlDoc = gcnew XmlDocument;\n            XmlNode^ mainNode = \n                xmlDoc-&gt;CreateNode(XmlNodeType::Element, \n                &quot;ContosoMessages&quot;, &quot;http://www.contoso.com&quot;);\n            XmlNode^ textNode = xmlDoc-&gt;CreateTextNode(&quot;Some text &quot;\n                &quot;to encode.&quot;);\n            mainNode-&gt;AppendChild(textNode);\n            xmlDoc-&gt;AppendChild(mainNode);\n            Console::WriteLine(&quot;Created the following XML Document &quot;\n                &quot;for transformation: &quot;);\n            Console::WriteLine(xmlDoc-&gt;InnerXml);\n            return xmlDoc;\n        }\n\n\n        // Resolve the specified base and relative Uri&#39;s.\n        static Uri^ ResolveUris(Uri^ baseUri, String^ relativeUri)\n        {\n            \n            XmlUrlResolver^ xmlResolver = gcnew XmlUrlResolver;\n            xmlResolver-&gt;Credentials = \n                System::Net::CredentialCache::DefaultCredentials;\n            XmlDsigBase64Transform^ xmlTransform = \n                gcnew XmlDsigBase64Transform;\n            xmlTransform-&gt;Resolver = xmlResolver;\n            Uri^ absoluteUri = xmlResolver-&gt;ResolveUri(baseUri, \n                relativeUri);\n            if (absoluteUri != nullptr)\n            {\n                Console::WriteLine(&quot;Resolved the base Uri and &quot;\n                    &quot;relative Uri to the following:&quot;);\n                Console::WriteLine(absoluteUri);\n            }\n            else\n            {\n                Console::WriteLine(&quot;Unable to resolve the base &quot;\n                    &quot;Uri and relative Uri&quot;);\n            }\n\n            return absoluteUri;\n        }\n\n    };\n\n}\n\nint main()\n{\n    CryptographyXmlDsigBase64Transform::Example::Produce();\n}\n\n//\n// This sample produces the following output:\n//\n// Created the following XML Document for transformation:\n// &lt;ContosoMessages xmlns=&quot;http://www.contoso.com&quot;&gt;Some text to encode.\n// &lt;/ContosoMessages&gt;\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#base64&quot;\n// xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Encoding the following message: Some text to encode.\n// Message encoded: Jmr^\n// Resolved the base Uri and relative Uri to the following:\n// http://www.microsoft.com/msdn\n// This sample completed successfully; press Enter to exit.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigC14NTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigC14NTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigC14NTransformUrl field is &quot;<a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform\" data-linktype=\"relative-path\">XmlDsigC14NTransform</a> class implements the transform described by the XmlDsigC14NTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a>.  </p>\n<p> This field has the same value as the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationUrl\" data-linktype=\"relative-path\">XmlDsigCanonicalizationUrl</a> field.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call members of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform\" data-linktype=\"relative-path\">XmlDsigC14NTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.XMLDsigC14NTransform#2\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Security::Cryptography::X509Certificates;\n\nref class Class1\n{\nprivate:\n   static String^ Certificate = L&quot;..\\\\..\\\\my509.cer&quot;;\n\npublic:\n   [STAThread]\n   static void Main()\n   {\n      // Encrypt an XML message\n      XmlDocument^ productsXml = LoadProducts();\n      ShowTransformProperties( productsXml );\n      SignDocument( productsXml );\n      ShowTransformProperties( productsXml );\n      \n      // Use XmlDsigC14NTransform to resolve a Uri.\n      Uri^ baseUri = gcnew Uri( L&quot;http://www.contoso.com&quot; );\n      String^ relativeUri = L&quot;xml&quot;;\n      Uri^ absoluteUri = ResolveUris( baseUri, relativeUri );\n      Console::WriteLine( L&quot;This sample completed successfully; &quot;\n         L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\n\nprivate:\n   // Encrypt the text in the specified XmlDocument.\n   static void ShowTransformProperties( XmlDocument^ xmlDoc )\n   {\n      XmlDsigC14NTransform^ xmlTransform =\n         gcnew XmlDsigC14NTransform( true );\n\n      // Ensure the transform is using the appropriate algorithm.\n      xmlTransform-&gt;Algorithm =\n         SignedXml::XmlDsigExcC14NTransformUrl;\n\n      // Retrieve the XML representation of the current transform.\n      XmlElement^ xmlInTransform = xmlTransform-&gt;GetXml();\n\n      Console::WriteLine( L&quot;<br>Xml representation of the current transform: &quot; );\n      Console::WriteLine( xmlInTransform-&gt;OuterXml );\n      \n      // Retrieve the valid input types for the current transform.\n      array&lt;Type^&gt;^validInTypes = xmlTransform-&gt;InputTypes;\n\n      // Verify the xmlTransform can accept the XMLDocument as an\n      // input type.\n      for ( int i = 0; i &lt; validInTypes-&gt;Length; i++ )\n      {\n         if ( validInTypes[ i ] == xmlDoc-&gt;GetType() )\n         {\n            // Load the document into the transfrom.\n            xmlTransform-&gt;LoadInput( xmlDoc );\n\n            XmlDsigC14NTransform^ secondTransform = gcnew XmlDsigC14NTransform;\n\n            String^ classDescription = secondTransform-&gt;ToString();\n\n            // This call does not perform as expected.\n            // This transform does not contain inner XML elements\n            secondTransform-&gt;LoadInnerXml( xmlDoc-&gt;SelectNodes( L&quot;//.&quot; ) );\n\n            break;\n         }\n      }\n      \n      array&lt;Type^&gt;^validOutTypes = xmlTransform-&gt;OutputTypes;\n\n      for ( int i = 0; i &lt; validOutTypes-&gt;Length; i++ )\n      {\n         if ( validOutTypes[ i ] == System::IO::Stream::typeid )\n         {\n            try\n            {\n               \n               Type^ streamType = System::IO::Stream::typeid;\n               MemoryStream^ outputStream = static_cast&lt;MemoryStream^&gt;(\n                  xmlTransform-&gt;GetOutput( streamType ));\n\n               // Read the CryptoStream into a stream reader.\n               StreamReader^ streamReader =\n                  gcnew StreamReader( outputStream );\n               \n               // Read the stream into a string.\n               String^ outputMessage = streamReader-&gt;ReadToEnd();\n               \n               // Close the streams.\n               outputStream-&gt;Close();\n               streamReader-&gt;Close();\n               \n               // Display to the console the Xml before and after\n               // encryption.\n               Console::WriteLine( L&quot;Encoding the following xml: {0}&quot;,\n                  xmlDoc-&gt;OuterXml );\n               Console::WriteLine( L&quot;Message encoded: {0}&quot;, outputMessage );\n            }\n            catch ( Exception^ ex ) \n            {\n               Console::WriteLine( L&quot;Unexpected exception caught: {0}&quot;, ex );\n            }\n\n            break;\n         }\n         else\n         {\n            Object^ outputObject = xmlTransform-&gt;GetOutput();\n         }\n      }\n   }\n\n   // Create an XML document describing various products.\n   static XmlDocument^ LoadProducts()\n   {\n      XmlDocument^ xmlDoc = gcnew XmlDocument;\n      String^ contosoProducts = L&quot;&lt;PRODUCTS&gt;&quot;;\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;);\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;);\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;);\n       contosoProducts = String::Concat( contosoProducts,\n        L&quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;);\n      \n      // Include a comment to test the comments feature of the transform.\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;!--Comments are included in the transform--&gt;&quot; );\n      \n      // Include the CDATA tag to test the transform results.\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;PARTNER_URL&gt;&lt;![CDATA[&#39;http:\\\\\\\\www.contoso.com&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;\\\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;/PRODUCTS&gt;&quot; );\n\n      xmlDoc-&gt;LoadXml( contosoProducts );\n      return xmlDoc;\n   }\n\n   // Create a signature and add it to the specified document.\n   static void SignDocument( XmlDocument^ xmlDoc )\n   {\n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create a SignedXml object.\n      SignedXml^ signedXml = gcnew SignedXml( xmlDoc );\n      \n      // Add the key to the SignedXml document.\n      signedXml-&gt;SigningKey = Key;\n      \n      // Create a reference to be signed.\n      Reference^ reference = gcnew Reference;\n      reference-&gt;Uri = L&quot;&quot;;\n      \n      // Add an enveloped transformation to the reference.\n      reference-&gt;AddTransform( gcnew XmlDsigC14NTransform );\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n      try\n      {\n         // Create a new KeyInfo object.\n         KeyInfo^ keyInfo = gcnew KeyInfo;\n         \n         // Load the X509 certificate.\n         X509Certificate^ MSCert =\n            X509Certificate::CreateFromCertFile( Certificate );\n         \n         // Load the certificate into a KeyInfoX509Data object\n         // and add it to the KeyInfo object.\n         keyInfo-&gt;AddClause( gcnew KeyInfoX509Data( MSCert ) );\n         \n         // Add the KeyInfo object to the SignedXml object.\n         signedXml-&gt;KeyInfo = keyInfo;\n      }\n      catch ( FileNotFoundException^ ) \n      {\n         Console::WriteLine( L&quot;Unable to locate the following file: {0}&quot;,\n            Certificate );\n      }\n      catch ( CryptographicException^ ex ) \n      {\n         Console::WriteLine( L&quot;Unexpected exception caught while creating &quot;\n         L&quot;the certificate:{0}&quot;, ex );\n      }\n      \n      // Compute the signature.\n      signedXml-&gt;ComputeSignature();\n      \n      // Add the signature branch to the original tree so it is enveloped.\n      xmlDoc-&gt;DocumentElement-&gt;AppendChild( signedXml-&gt;GetXml() );\n   }\n\n   // Resolve the specified base and relative Uri&#39;s .\n   static Uri^ ResolveUris( Uri^ baseUri, String^ relativeUri )\n   {\n      XmlUrlResolver^ xmlResolver = gcnew XmlUrlResolver;\n      xmlResolver-&gt;Credentials =\n         System::Net::CredentialCache::DefaultCredentials;\n      XmlDsigC14NTransform^ xmlTransform = gcnew XmlDsigC14NTransform;\n      xmlTransform-&gt;Resolver = xmlResolver;\n\n      Uri^ absoluteUri = xmlResolver-&gt;ResolveUri( baseUri, relativeUri );\n      if ( absoluteUri != nullptr )\n      {\n         Console::WriteLine(\n            L&quot;<br>Resolved the base Uri and relative Uri to the following:&quot; );\n         Console::WriteLine( absoluteUri );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;Unable to resolve the base Uri and relative Uri&quot; );\n      }\n\n      return absoluteUri;\n   }\n};\n\nint main()\n{\n   Class1::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; xmln\n// s=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Encoding the following xml: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rou\n// ter&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESC\n// RIPTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL\n// &gt;&lt;![CDATA[&#39;http:\\\\www.contoso.com\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;\n// &lt;/PRODUCTS&gt;Message encoded: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rou\n// ter&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESC\n// RIPTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL\n// &gt;&#39;http:\\\\www.contoso.com\\partner.asp?h1=en&amp;amp;h2=cr&#39;&lt;/PARTNER_URL&gt;&lt;/PRODUC\n// TS&gt;\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; xmln\n// s=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Encoding the following xml: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rou\n// ter&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESC\n// RIPTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL\n// &gt;&lt;![CDATA[&#39;http:\\\\www.contoso.com\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;\n// &lt;Signature xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;Canonica\n// lizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot;\n// /&gt;&lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /\n// &gt;&lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/TR/2\n// 001/REC-xml-c14n-20010315&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=&quot;http://w\n// ww.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;BFN2s0/NA2NGgb/R0mvfnNM0Ito=\n// &lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;vSfZUG5xHuNxzOSEbQjN\n// dtEt1D+O7I1LTJ13RrwLaJSfQPrdT/s8IeaA+idw2f2WGuGrdqMJUddpE4GxfK61HmPQ6S7lBG+\n// +ND+YaUYf2AtTRs3SnToXQQrARa/pHVjsKxYHR/9tjy6maHBwxjgjFQABvYZu0gZHYRuXvvfxv0\n// 8=&lt;/SignatureValue&gt;&lt;KeyInfo&gt;&lt;X509Data xmlns=&quot;http://www.w3.org/2000/09/xmld\n// sig#&quot;&gt;&lt;X509Certificate&gt;MIICCzCCAXSgAwIBAgIQ5eVQY8pRZ5xBF2WLkYPjijANBgkqhkiG\n// 9w0BAQQFADAbMRkwFwYDVQQDExBHcmVnc0NlcnRpZmljYXRlMB4XDTAzMDkxNzIzMzU0N1oXDTM\n// 5MTIzMTIzNTk1OVowGzEZMBcGA1UEAxMQR3JlZ3NDZXJ0aWZpY2F0ZTCBnzANBgkqhkiG9w0BAQ\n// EFAAOBjQAwgYkCgYEAmFJ4v7rS3BYTXgVW9PgBFfTYAcB/m9mOFCmUrrChcBpoEtu/tSESlNfEH\n// pECIdqg9vUrCNSkY08HRn3ueNeBSnSpssWd8/XoOboWLh1nd+79Y5uZd1WOJI4s0XM0MegZgCoJ\n// cEEhpxCd/HOPIQvEsbpN/DuFiovZLo+Ek3hHoxMCAwEAAaNQME4wTAYDVR0BBEUwQ4AQaCb19dl\n// yf/zSxPVYQZY9AKEdMBsxGTAXBgNVBAMTEEdyZWdzQ2VydGlmaWNhdGWCEOXlUGPKUWecQRdli5\n// GD44owDQYJKoZIhvcNAQEEBQADgYEAZuZaFDGDJogh7FuT0hfaMAVlRONv6wWVBJVV++eUo38Xu\n// RfJ5nNJ0UnhiV2sEtLobYBPEIrNhuk8skdU0AHgx4ILiA4rR96ifWwxtrFQF+h+DL2ZB7xhwcOJ\n// +Pa7IC4wIaEp/oBmmX+JHSzfQt6/If4ohwikfxfljKMyIcMlwl4=&lt;/X509Certificate&gt;&lt;/X50\n// 9Data&gt;&lt;/KeyInfo&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n//\n// Message encoded: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRI\n// PTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/P\n// RODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL&gt;&#39;http:\\\\ww\n// w.contoso.com\\partner.asp?h1=en&amp;amp;h2=cr&#39;&lt;/PARTNER_URL&gt;&lt;Signature&gt;&lt;SignedI\n// nfo&gt;&lt;CanonicalizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c1\n// 4n-20010315&quot;&gt;&lt;/CanonicalizationMethod&gt;&lt;SignatureMethod Algorithm=&quot;http://ww\n// w.w3.org/2000/09/xmldsig#rsa-sha1&quot;&gt;&lt;/SignatureMethod&gt;&lt;Reference URI=&quot;&quot;&gt;&lt;Tra\n// nsforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-200103\n// 15&quot;&gt;&lt;/Transform&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=&quot;http://www.w3.org/200\n// 0/09/xmldsig#sha1&quot;&gt;&lt;/DigestMethod&gt;&lt;DigestValue&gt;BFN2s0/NA2NGgb/R0mvfnNM0Ito=\n// &lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;vSfZUG5xHuNxzOSEbQjN\n// dtEt1D+O7I1LTJ13RrwLaJSfQPrdT/s8IeaA+idw2f2WGuGrdqMJUddpE4GxfK61HmPQ6S7lBG+\n// +ND+YaUYf2AtTRs3SnToXQQrARa/pHVjsKxYHR/9tjy6maHBwxjgjFQABvYZu0gZHYRuXvvfxv0\n// 8=&lt;/SignatureValue&gt;&lt;KeyInfo&gt;&lt;X509Data xmlns=&quot;http://www.w3.org/2000/09/xmld\n// sig#&quot;&gt;&lt;X509Certificate&gt;MIICCzCCAXSgAwIBAgIQ5eVQY8pRZ5xBF2WLkYPjijANBgkqhkiG\n// 9w0BAQQFADAbMRkwFwYDVQQDExBHcmVnc0NlcnRpZmljYXRlMB4XDTAzMDkxNzIzMzU0N1oXDTM\n// 5MTIzMTIzNTk1OVowGzEZMBcGA1UEAxMQR3JlZ3NDZXJ0aWZpY2F0ZTCBnzANBgkqhkiG9w0BAQ\n// EFAAOBjQAwgYkCgYEAmFJ4v7rS3BYTXgVW9PgBFfTYAcB/m9mOFCmUrrChcBpoEtu/tSESlNfEH\n// pECIdqg9vUrCNSkY08HRn3ueNeBSnSpssWd8/XoOboWLh1nd+79Y5uZd1WOJI4s0XM0MegZgCoJ\n// cEEhpxCd/HOPIQvEsbpN/DuFiovZLo+Ek3hHoxMCAwEAAaNQME4wTAYDVR0BBEUwQ4AQaCb19dl\n// yf/zSxPVYQZY9AKEdMBsxGTAXBgNVBAMTEEdyZWdzQ2VydGlmaWNhdGWCEOXlUGPKUWecQRdli5\n// GD44owDQYJKoZIhvcNAQEEBQADgYEAZuZaFDGDJogh7FuT0hfaMAVlRONv6wWVBJVV++eUo38Xu\n// RfJ5nNJ0UnhiV2sEtLobYBPEIrNhuk8skdU0AHgx4ILiA4rR96ifWwxtrFQF+h+DL2ZB7xhwcOJ\n// +Pa7IC4wIaEp/oBmmX+JHSzfQt6/If4ohwikfxfljKMyIcMlwl4=&lt;/X509Certificate&gt;&lt;/X50\n// 9Data&gt;&lt;/KeyInfo&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n//\n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.XMLDsigC14NTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Security.Cryptography.X509Certificates;\n\nclass Class1\n{\n    private static string Certificate =  &quot;..\\\\..\\\\my509.cer&quot;;\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Encrypt an XML message\n        XmlDocument productsXml = LoadProducts();\n        ShowTransformProperties(productsXml);\n\n        SignDocument(ref productsXml);\n        ShowTransformProperties(productsXml);\n\n        // Use XmlDsigC14NTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(XmlDocument xmlDoc)\n    {\n        XmlDsigC14NTransform xmlTransform = \n            new XmlDsigC14NTransform(true);\n\n        // Ensure the transform is using the appropriate algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigExcC14NTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n\n        Console.WriteLine(&quot;<br>Xml representation of the current transform: &quot;);\n        Console.WriteLine(xmlInTransform.OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i=0; i&lt;validInTypes.Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc.GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc);\n\n                XmlDsigC14NTransform secondTransform = \n                    new XmlDsigC14NTransform();\n\n                string classDescription = secondTransform.ToString();\n\n                // This call does not perform as expected.\n                // This transform does not contain inner XML elements\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;));\n\n                break;\n            }\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n\n        for (int i=0; i&lt;validOutTypes.Length;i++)\n        {\n            if (validOutTypes[i] == typeof(System.IO.Stream))\n            {\n                try \n                {\n                    Type streamType = typeof(System.IO.Stream);\n                    MemoryStream outputStream = (MemoryStream) \n                        xmlTransform.GetOutput(streamType);\n\n                    // Read the CryptoStream into a stream reader.\n                    StreamReader streamReader =\n                        new StreamReader(outputStream);\n\n                    // Read the stream into a string.\n                    string outputMessage = streamReader.ReadToEnd();\n\n                    // Close the streams.\n                    outputStream.Close();\n                    streamReader.Close();\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Encoding the following xml: &quot; +\n                        xmlDoc.OuterXml);\n                    Console.WriteLine(&quot;Message encoded: &quot; + outputMessage);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string contosoProducts = &quot;&lt;PRODUCTS&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n\n        // Include a comment to test the comments feature of the transform.\n        contosoProducts += &quot;&lt;!--Comments are included in the transform--&gt;&quot;;\n\n        // Include the CDATA tag to test the transform results.\n        contosoProducts += &quot;&lt;PARTNER_URL&gt;&lt;![CDATA[&#39;http:\\\\\\\\www.contoso.com&quot;;\n        contosoProducts += &quot;\\\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;&quot;;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Create a signature and add it to the specified document.\n    private static void SignDocument(ref XmlDocument xmlDoc)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(xmlDoc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        reference.AddTransform(new XmlDsigC14NTransform());\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        try \n        {\n            // Create a new KeyInfo object.\n            KeyInfo keyInfo = new KeyInfo();\n\n            // Load the X509 certificate.\n            X509Certificate MSCert =\n                X509Certificate.CreateFromCertFile(Certificate);\n\n            // Load the certificate into a KeyInfoX509Data object\n            // and add it to the KeyInfo object.\n            keyInfo.AddClause(new KeyInfoX509Data(MSCert));\n\n            // Add the KeyInfo object to the SignedXml object.\n            signedXml.KeyInfo = keyInfo;\n        }\n        catch (FileNotFoundException)\n        {\n            Console.WriteLine(&quot;Unable to locate the following file: &quot; + \n                Certificate);\n        }\n        catch (CryptographicException ex)\n        {\n            Console.WriteLine(&quot;Unexpected exception caught whild creating &quot; +\n                &quot;the certificate:&quot; + ex.ToString());\n        }\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Add the signature branch to the original tree so it is enveloped.\n        xmlDoc.DocumentElement.AppendChild(signedXml.GetXml());\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials = \n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigC14NTransform xmlTransform =\n            new XmlDsigC14NTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;<br>Resolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n//\n// This sample produces the following output:\n//\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; xmln\n// s=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Encoding the following xml: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rou\n// ter&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESC\n// RIPTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL\n// &gt;&lt;![CDATA[&#39;http:\\\\www.contoso.com\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;\n// &lt;/PRODUCTS&gt;Message encoded: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rou\n// ter&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESC\n// RIPTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL\n// &gt;&#39;http:\\\\www.contoso.com\\partner.asp?h1=en&amp;amp;h2=cr&#39;&lt;/PARTNER_URL&gt;&lt;/PRODUC\n// TS&gt;\n\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; xmln\n// s=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Encoding the following xml: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rou\n// ter&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESC\n// RIPTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL\n// &gt;&lt;![CDATA[&#39;http:\\\\www.contoso.com\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;\n// &lt;Signature xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;Canonica\n// lizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; \n// /&gt;&lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /\n// &gt;&lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/TR/2\n// 001/REC-xml-c14n-20010315&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=&quot;http://w\n// ww.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;BFN2s0/NA2NGgb/R0mvfnNM0Ito=\n// &lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;vSfZUG5xHuNxzOSEbQjN\n// dtEt1D+O7I1LTJ13RrwLaJSfQPrdT/s8IeaA+idw2f2WGuGrdqMJUddpE4GxfK61HmPQ6S7lBG+\n// +ND+YaUYf2AtTRs3SnToXQQrARa/pHVjsKxYHR/9tjy6maHBwxjgjFQABvYZu0gZHYRuXvvfxv0\n// 8=&lt;/SignatureValue&gt;&lt;KeyInfo&gt;&lt;X509Data xmlns=&quot;http://www.w3.org/2000/09/xmld\n// sig#&quot;&gt;&lt;X509Certificate&gt;MIICCzCCAXSgAwIBAgIQ5eVQY8pRZ5xBF2WLkYPjijANBgkqhkiG\n// 9w0BAQQFADAbMRkwFwYDVQQDExBHcmVnc0NlcnRpZmljYXRlMB4XDTAzMDkxNzIzMzU0N1oXDTM\n// 5MTIzMTIzNTk1OVowGzEZMBcGA1UEAxMQR3JlZ3NDZXJ0aWZpY2F0ZTCBnzANBgkqhkiG9w0BAQ\n// EFAAOBjQAwgYkCgYEAmFJ4v7rS3BYTXgVW9PgBFfTYAcB/m9mOFCmUrrChcBpoEtu/tSESlNfEH\n// pECIdqg9vUrCNSkY08HRn3ueNeBSnSpssWd8/XoOboWLh1nd+79Y5uZd1WOJI4s0XM0MegZgCoJ\n// cEEhpxCd/HOPIQvEsbpN/DuFiovZLo+Ek3hHoxMCAwEAAaNQME4wTAYDVR0BBEUwQ4AQaCb19dl\n// yf/zSxPVYQZY9AKEdMBsxGTAXBgNVBAMTEEdyZWdzQ2VydGlmaWNhdGWCEOXlUGPKUWecQRdli5\n// GD44owDQYJKoZIhvcNAQEEBQADgYEAZuZaFDGDJogh7FuT0hfaMAVlRONv6wWVBJVV++eUo38Xu\n// RfJ5nNJ0UnhiV2sEtLobYBPEIrNhuk8skdU0AHgx4ILiA4rR96ifWwxtrFQF+h+DL2ZB7xhwcOJ\n// +Pa7IC4wIaEp/oBmmX+JHSzfQt6/If4ohwikfxfljKMyIcMlwl4=&lt;/X509Certificate&gt;&lt;/X50\n// 9Data&gt;&lt;/KeyInfo&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n//\n// Message encoded: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRI\n// PTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/P\n// RODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL&gt;&#39;http:\\\\ww\n// w.contoso.com\\partner.asp?h1=en&amp;amp;h2=cr&#39;&lt;/PARTNER_URL&gt;&lt;Signature&gt;&lt;SignedI\n// nfo&gt;&lt;CanonicalizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c1\n// 4n-20010315&quot;&gt;&lt;/CanonicalizationMethod&gt;&lt;SignatureMethod Algorithm=&quot;http://ww\n// w.w3.org/2000/09/xmldsig#rsa-sha1&quot;&gt;&lt;/SignatureMethod&gt;&lt;Reference URI=&quot;&quot;&gt;&lt;Tra\n// nsforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-200103\n// 15&quot;&gt;&lt;/Transform&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=&quot;http://www.w3.org/200\n// 0/09/xmldsig#sha1&quot;&gt;&lt;/DigestMethod&gt;&lt;DigestValue&gt;BFN2s0/NA2NGgb/R0mvfnNM0Ito=\n// &lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;vSfZUG5xHuNxzOSEbQjN\n// dtEt1D+O7I1LTJ13RrwLaJSfQPrdT/s8IeaA+idw2f2WGuGrdqMJUddpE4GxfK61HmPQ6S7lBG+\n// +ND+YaUYf2AtTRs3SnToXQQrARa/pHVjsKxYHR/9tjy6maHBwxjgjFQABvYZu0gZHYRuXvvfxv0\n// 8=&lt;/SignatureValue&gt;&lt;KeyInfo&gt;&lt;X509Data xmlns=&quot;http://www.w3.org/2000/09/xmld\n// sig#&quot;&gt;&lt;X509Certificate&gt;MIICCzCCAXSgAwIBAgIQ5eVQY8pRZ5xBF2WLkYPjijANBgkqhkiG\n// 9w0BAQQFADAbMRkwFwYDVQQDExBHcmVnc0NlcnRpZmljYXRlMB4XDTAzMDkxNzIzMzU0N1oXDTM\n// 5MTIzMTIzNTk1OVowGzEZMBcGA1UEAxMQR3JlZ3NDZXJ0aWZpY2F0ZTCBnzANBgkqhkiG9w0BAQ\n// EFAAOBjQAwgYkCgYEAmFJ4v7rS3BYTXgVW9PgBFfTYAcB/m9mOFCmUrrChcBpoEtu/tSESlNfEH\n// pECIdqg9vUrCNSkY08HRn3ueNeBSnSpssWd8/XoOboWLh1nd+79Y5uZd1WOJI4s0XM0MegZgCoJ\n// cEEhpxCd/HOPIQvEsbpN/DuFiovZLo+Ek3hHoxMCAwEAAaNQME4wTAYDVR0BBEUwQ4AQaCb19dl\n// yf/zSxPVYQZY9AKEdMBsxGTAXBgNVBAMTEEdyZWdzQ2VydGlmaWNhdGWCEOXlUGPKUWecQRdli5\n// GD44owDQYJKoZIhvcNAQEEBQADgYEAZuZaFDGDJogh7FuT0hfaMAVlRONv6wWVBJVV++eUo38Xu\n// RfJ5nNJ0UnhiV2sEtLobYBPEIrNhuk8skdU0AHgx4ILiA4rR96ifWwxtrFQF+h+DL2ZB7xhwcOJ\n// +Pa7IC4wIaEp/oBmmX+JHSzfQt6/If4ohwikfxfljKMyIcMlwl4=&lt;/X509Certificate&gt;&lt;/X50\n// 9Data&gt;&lt;/KeyInfo&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n//\n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.XMLDsigC14NTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Security.Cryptography.X509Certificates\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    Private certificateFilePath As String = &quot;..\\\\my509.cer&quot;\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Encrypt an XML message\n        Dim productsXml As XmlDocument = LoadProducts()\n        ShowTransformProperties(productsXml)\n\n        SignDocument(productsXml)\n        ShowTransformProperties(productsXml)\n\n        &#39; Use XmlDsigC14NTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        &#39; Align interface and conclude application.\n        WriteLine(vbCrLf + &quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n\n        &#39; Reset the cursor.\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Encrypt the text in the specified XmlDocument.\n    Private Sub ShowTransformProperties(ByVal xmlDoc As XmlDocument)\n        Dim xmlTransform As New XmlDsigC14NTransform(True)\n\n        &#39; Ensure the transform is using the appropriate algorithm.\n        xmlTransform.Algorithm = _\n            SignedXml.XmlDsigExcC14NTransformUrl\n\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n\n        WriteLine(vbCrLf + &quot;Xml representation of the current transform: &quot;)\n        WriteLine(xmlInTransform.OuterXml)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes() As Type = xmlTransform.InputTypes\n\n        &#39; Verify the xmlTransform can accept the XMLDocument as an\n        &#39; input type.\n        For i As Int16 = 0 To validInTypes.Length Step 1\n            If (validInTypes(i).Equals(xmlDoc.GetType())) Then\n                &#39; Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc)\n\n                Dim secondTransform As New XmlDsigC14NTransform\n\n                Dim classDescription As String = secondTransform.ToString()\n\n                &#39; This call does not perform as expected.\n                &#39; This transform does not contain inner XML elements\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;))\n                Exit For\n            End If\n        Next\n\n        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n        For i As Int16 = 0 To validOutTypes.Length - 1 Step 1\n            If (validOutTypes(i).Equals(GetType(System.IO.Stream))) Then\n                Try\n                    Dim streamType As Type = GetType(System.IO.Stream)\n                    Dim outputStream As MemoryStream\n                    outputStream = CType( _\n                        xmlTransform.GetOutput(streamType), _\n                        MemoryStream)\n\n                    &#39; Read the CryptoStream into a stream reader.\n                    Dim streamReader As New StreamReader(outputStream)\n\n                    &#39; Read the stream into a string.\n                    Dim outputMessage As String = streamReader.ReadToEnd()\n\n                    &#39; Close the streams.\n                    outputStream.Close()\n                    streamReader.Close()\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    WriteLine(&quot;Encoding the following xml: &quot; + _\n                        xmlDoc.OuterXml)\n                    WriteLine(&quot;Message encoded: &quot; + outputMessage)\n\n                Catch ex As Exception\n                    WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n\n                End Try\n            Else\n                Dim outputObject As Object = xmlTransform.GetOutput()\n\n            End If\n        Next\n    End Sub\n\n    &#39; Create an XML document describing various products.\n    Private Function LoadProducts() As XmlDocument\n        Dim xmlDoc As New XmlDocument\n\n        Dim contosoProducts As String = &quot;&lt;PRODUCTS&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n\n        &#39; Include a comment to test the comments feature of the transform.\n        contosoProducts += &quot;&lt;!--Comments are included in the transform--&gt;&quot;\n\n        &#39; Include the CDATA tag to test the transform results.\n        contosoProducts += &quot;&lt;PARTNER_URL&gt;&lt;![CDATA[&#39;http:\\\\\\\\www.contoso.com&quot;\n        contosoProducts += &quot;\\\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;&quot;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;\n\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n    End Function\n\n    &#39; Create a signature and add it to the specified document.\n    Private Sub SignDocument(ByRef xmlDoc As XmlDocument)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(xmlDoc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        reference.AddTransform(New XmlDsigC14NTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        Try\n            &#39; Create a new KeyInfo object.\n            Dim keyInfo As New KeyInfo\n\n            &#39; Load the X509 certificate.\n            Dim certificate As X509Certificate\n            certificate = X509Certificate.CreateFromCertFile( _\n                certificateFilePath)\n\n            &#39; Load the certificate into a KeyInfoX509Data object\n            &#39; and add it to the KeyInfo object.\n            keyInfo.AddClause(New KeyInfoX509Data(certificate))\n\n            &#39; Add the KeyInfo object to the SignedXml object.\n            signedXml.KeyInfo = keyInfo\n        Catch ex As FileNotFoundException\n            WriteLine(&quot;Unable to locate the following file: &quot; + _\n                certificateFilePath)\n        Catch ex As CryptographicException\n            WriteLine(&quot;Unexpected exception caught whild creating &quot; + _\n                &quot;the certificate:&quot; + ex.ToString())\n        End Try\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Add the signature branch to the original tree so it is enveloped.\n        xmlDoc.DocumentElement.AppendChild(signedXml.GetXml())\n    End Sub\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Function ResolveUris( _\n        ByVal baseUri As Uri, _\n        ByVal relativeUri As String) As Uri\n\n        Dim xmlResolver As New XmlUrlResolver\n        xmlResolver.Credentials = _\n            System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigC14NTransform\n        xmlTransform.Resolver = xmlResolver\n\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n\n        If Not absoluteUri Is Nothing Then\n            WriteLine(vbCrLf + _\n                &quot;Resolved the base Uri and relative Uri to the following:&quot;)\n            WriteLine(absoluteUri.ToString())\n        Else\n            WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n\n        Return absoluteUri\n    End Function\n\n    &#39; Write specified message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;XmlDsigC14NTransform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; xmlns\n&#39; =&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Encoding the following xml: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rout\n&#39; er&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRI\n&#39; PTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL&gt;&lt;!\n&#39; [CDATA[&#39;http:\\\\\\\\www.contoso.com\\\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;&lt;\n&#39; /PRODUCTS&gt;\n&#39; Message encoded: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIP\n&#39; TION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRO\n&#39; DUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL&gt;&#39;http:\\\\\\\\www\n&#39; .contoso.com\\\\partner.asp?h1=en&amp;amp;h2=cr&#39;&lt;/PARTNER_URL&gt;&lt;/PRODUCTS&gt;\n&#39; Unable to locate the following file: ..\\\\my509.cer\n&#39; \n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; xmlns\n&#39; =&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Encoding the following xml: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Rout\n&#39; er&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRI\n&#39; PTION&gt;&lt;/PRODUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL&gt;&lt;!\n&#39; [CDATA[&#39;http:\\\\\\\\www.contoso.com\\\\partner.asp?h1=en&amp;h2=cr&#39;]]&gt;&lt;/PARTNER_URL&gt;&lt;\n&#39; Signature xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;Canonicali\n&#39; zationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;&lt;\n&#39; SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;&lt;Re\n&#39; ference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/R\n&#39; EC-xml-c14n-20010315&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=&quot;http://www.w3.\n&#39; org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;reODk69AR9ytcttnNovo4tHNr7s=&lt;/Diges\n&#39; tValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;shFIRZqXidkxzQtZwGa7xqWoS0yF\n&#39; GDot63A8v17KZzmfDWTaluGk25fvKJ4Bv4Z1ENxevyQY/wCGzsto9FJUvTXsJ9/jTOwIvRQt1204\n&#39; gJ8SgTex8epH/2xnfvdEqZR8HWJq3X/NixGhMUCpmEFwZMn3V/8qryg8mhYp72jPTFI=&lt;/Signat\n&#39; ureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n&#39; Message encoded: &lt;PRODUCTS&gt;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIP\n&#39; TION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRO\n&#39; DUCT&gt;&lt;!--Comments are included in the transform--&gt;&lt;PARTNER_URL&gt;&#39;http:\\\\\\\\www\n&#39; .contoso.com\\\\partner.asp?h1=en&amp;amp;h2=cr&#39;&lt;/PARTNER_URL&gt;&lt;Signature&gt;&lt;SignedIn\n&#39; fo&gt;&lt;CanonicalizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n\n&#39; -20010315&quot;&gt;&lt;/CanonicalizationMethod&gt;&lt;SignatureMethod Algorithm=&quot;http://www.w\n&#39; 3.org/2000/09/xmldsig#rsa-sha1&quot;&gt;&lt;/SignatureMethod&gt;&lt;Reference URI=&quot;&quot;&gt;&lt;Transfo\n&#39; rms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot;&gt;&lt;\n&#39; /Transform&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=&quot;http://www.w3.org/2000/09/x\n&#39; mldsig#sha1&quot;&gt;&lt;/DigestMethod&gt;&lt;DigestValue&gt;reODk69AR9ytcttnNovo4tHNr7s=&lt;/Diges\n&#39; tValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;shFIRZqXidkxzQtZwGa7xqWoS0yF\n&#39; GDot63A8v17KZzmfDWTaluGk25fvKJ4Bv4Z1ENxevyQY/wCGzsto9FJUvTXsJ9/jTOwIvRQt1204\n&#39; gJ8SgTex8epH/2xnfvdEqZR8HWJq3X/NixGhMUCpmEFwZMn3V/8qryg8mhYp72jPTFI=&lt;/Signat\n&#39; ureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n&#39; \n&#39; Resolved the base Uri and relative Uri to the following:\n&#39; http://www.contoso.com/xml\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NWithCommentsTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigC14NWithCommentsTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the Canonical XML transformation, with comments. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigC14NWithCommentsTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigC14NWithCommentsTransformUrl field is &quot;<a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments</a> &quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14nwithcommentstransform\" data-linktype=\"relative-path\">XmlDsigC14NWithCommentsTransform</a> class implements the transform described by the XmlDsigC14NWithCommentsTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments</a>.  </p>\n<p> This field has the same value as the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationWithCommentsUrl\" data-linktype=\"relative-path\">XmlDsigCanonicalizationWithCommentsUrl</a> field.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigCanonicalizationUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigCanonicalizationUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigCanonicalizationUrl field is &quot;<a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform\" data-linktype=\"relative-path\">XmlDsigC14NTransform</a> class implements the transform described by the XmlDsigCanonicalizationUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315</a>.  </p>\n<p> This field has the same value as the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NTransformUrl\" data-linktype=\"relative-path\">XmlDsigC14NTransformUrl</a> field.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationWithCommentsUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigCanonicalizationWithCommentsUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard canonicalization algorithm for XML digital signatures and includes comments. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigCanonicalizationWithCommentsUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigCanonicalizationWithCommentsUrl field is &quot;<a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14nwithcommentstransform\" data-linktype=\"relative-path\">XmlDsigC14NWithCommentsTransform</a> class implements the transform described by the XmlDsigCanonicalizationWithCommentsUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" data-linktype=\"external\">http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments</a>.  </p>\n<p> This field has the same value as the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NWithCommentsTransformUrl\" data-linktype=\"relative-path\">XmlDsigC14NWithCommentsTransformUrl</a> field.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigDSAUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigDSAUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> algorithm for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigDSAUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigDSAUrl field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#dsa-sha1</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#dsa-sha1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigEnvelopedSignatureTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigEnvelopedSignatureTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for enveloped signature transformation. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigEnvelopedSignatureTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigEnvelopedSignatureTransformUrl field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#enveloped-signature</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> class implements the transform described by the XmlDsigEnvelopedSignatureTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#enveloped-signature</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use members of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Security.Cryptography.X509Certificates;\n\nclass Class1\n{\n    private static string Certificate =  &quot;..\\\\..\\\\my509.cer&quot;;\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Encrypt an XML message\n        XmlDocument productsXml = LoadProducts();\n        ShowTransformProperties(productsXml);\n\n        SignDocument(ref productsXml);\n        ShowTransformProperties(productsXml);\n\n        // Use XmlDsigEnvelopedSignatureTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(XmlDocument xmlDoc)\n    {\n        XmlDsigEnvelopedSignatureTransform xmlTransform = \n            new XmlDsigEnvelopedSignatureTransform();\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigEnvelopedSignatureTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n\n        Console.WriteLine(&quot;<br>Xml representation of the current transform: &quot;);\n        Console.WriteLine(xmlInTransform.OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i=0; i&lt;validInTypes.Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc.GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc);\n\n                bool IncludeComments = true;\n                // This transform is created for demonstration purposes.\n                XmlDsigEnvelopedSignatureTransform secondTransform =\n                    new XmlDsigEnvelopedSignatureTransform(IncludeComments);\n\n                string classDescription = secondTransform.ToString();\n\n                // This call does not perform as expected.\n                // An enveloped signature has no inner XML elements\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;));\n\n                break;\n            }\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n\n        for (int i=validOutTypes.Length-1; i &gt;= 0; i--)\n        {\n            if (validOutTypes[i] == typeof(System.Xml.XmlDocument))\n            {\n                try \n                {\n                    Type xmlDocumentType = typeof(System.Xml.XmlDocument);\n                    XmlDocument xmlDocumentOutput = (XmlDocument) \n                        xmlTransform.GetOutput(xmlDocumentType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Result of the GetOutput method call&quot; +\n                        &quot; from the current transform: &quot; + \n                        xmlDocumentOutput.OuterXml);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else if (validOutTypes[i] == typeof(System.Xml.XmlNodeList))\n            {\n                try \n                {\n                    Type xmlNodeListType = typeof(System.Xml.XmlNodeList);\n                    XmlNodeList xmlNodes = (XmlNodeList) \n                        xmlTransform.GetOutput(xmlNodeListType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; +\n                        xmlDoc.InnerText);\n\n                    Console.WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; +\n                        &quot;from GetOutput:&quot;);\n                    for (int j=0; j &lt; xmlNodes.Count; j++)\n                    {\n                        Console.WriteLine(&quot;Node &quot; + j + \n                            &quot; has the following name: &quot; + \n                            xmlNodes.Item(j).Name + \n                            &quot; and the following InnerXml: &quot; + \n                            xmlNodes.Item(j).InnerXml);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string contosoProducts = &quot;&lt;PRODUCTS&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Create a signature and add it to the specified document.\n    private static void SignDocument(ref XmlDocument xmlDoc)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(xmlDoc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        try \n        {\n            // Create a new KeyInfo object.\n            KeyInfo keyInfo = new KeyInfo();\n\n            // Load the X509 certificate.\n            X509Certificate MSCert =\n                X509Certificate.CreateFromCertFile(Certificate);\n\n            // Load the certificate into a KeyInfoX509Data object\n            // and add it to the KeyInfo object.\n            keyInfo.AddClause(new KeyInfoX509Data(MSCert));\n\n            // Add the KeyInfo object to the SignedXml object.\n            signedXml.KeyInfo = keyInfo;\n        }\n        catch (FileNotFoundException ex)\n        {\n            Console.WriteLine(&quot;Unable to locate the following file: &quot; + \n                Certificate);\n        }\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Add the signature branch to the original tree so it is enveloped.\n        xmlDoc.DocumentElement.AppendChild(signedXml.GetXml());\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials = \n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigEnvelopedSignatureTransform xmlTransform =\n            new XmlDsigEnvelopedSignatureTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;<br>Resolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n//\n// This sample produces the following output:\n//\n// Xml representation of the current transform: \n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;/PRODUCTS&gt;\n// Unable to load the following file: ..\\\\my509.cer\n// \n// Xml representation of the current transform: \n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;Signature xmlns=\n// &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;CanonicalizationMethod \n// Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;\n// &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;\n// &lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/2000\n// /09/xmldsig#enveloped-signature&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=\n// &quot;http://www.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;KvPW6HUiIUMEDS0YSoT\n// gpo2JPbA=&lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;c/njCGDru/a\n// WAmWG83I+mWO040xOzxvmNx0b0o8ZyPc9j5VwApdAt103OGBtB1H6EkOvt7Ekw+PVuUo8m5LzLP\n// yaTxUDMbb2kZZ5itSkGD4rmMUMUMuzrkAoquJZjxeOydBJ2CMehV2rE3RMPLIwRX176DZVy5JKU\n// 6Cb7PR2Rpw=&lt;/SignatureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n// \n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Security::Cryptography::X509Certificates;\n\npublic ref class EnvelopedSignatureSample\n{\nprivate:\n    static String^ Certificate =  &quot;..\\\\..\\\\my509.cer&quot;;\n\n    // Encrypt the text in the specified XmlDocument.\npublic:\n    static void ShowTransformProperties(XmlDocument^ xmlDoc)\n    {\n        XmlDsigEnvelopedSignatureTransform^ xmlTransform =\n            gcnew XmlDsigEnvelopedSignatureTransform();\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform-&gt;Algorithm =\n            SignedXml::XmlDsigEnvelopedSignatureTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement^ xmlInTransform = xmlTransform-&gt;GetXml();\n\n        Console::WriteLine(&quot;<br>Xml representation of the current transform: &quot;);\n        Console::WriteLine(xmlInTransform-&gt;OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        array&lt;Type^&gt;^ validInTypes = xmlTransform-&gt;InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i = 0; i &lt; validInTypes-&gt;Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc-&gt;GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform-&gt;LoadInput(xmlDoc);\n\n                bool IncludeComments = true;\n                // This transform is created for demonstration purposes.\n                XmlDsigEnvelopedSignatureTransform^ secondTransform =\n                    gcnew XmlDsigEnvelopedSignatureTransform(IncludeComments);\n\n                String^ classDescription = secondTransform-&gt;ToString();\n\n                // This call does not perform as expected.\n                // An enveloped signature has no inner XML elements\n                secondTransform-&gt;LoadInnerXml(xmlDoc-&gt;SelectNodes(&quot;//.&quot;));\n\n                break;\n            }\n        }\n\n        array&lt;Type^&gt;^ validOutTypes = xmlTransform-&gt;OutputTypes;\n\n        for (int i = validOutTypes-&gt;Length-1; i &gt;= 0; i--)\n        {\n            if (validOutTypes[i] == System::Xml::XmlDocument::typeid)\n            {\n                Type^ xmlDocumentType = System::Xml::XmlDocument::typeid;\n                XmlDocument^ xmlDocumentOutput = (XmlDocument^)\n                    xmlTransform-&gt;GetOutput(xmlDocumentType);\n\n                // Display to the console the Xml before and after\n                // encryption.\n                Console::WriteLine(&quot;Result of the GetOutput method call&quot; +\n                    &quot; from the current transform: &quot; +\n                    xmlDocumentOutput-&gt;OuterXml);\n\n                break;\n            }\n            else if (validOutTypes[i] == System::Xml::XmlNodeList::typeid)\n            {\n                Type^ xmlNodeListType = System::Xml::XmlNodeList::typeid;\n                XmlNodeList^ xmlNodes = (XmlNodeList^)\n                    xmlTransform-&gt;GetOutput(xmlNodeListType);\n\n                // Display to the console the Xml before and after\n                // encryption.\n                Console::WriteLine(&quot;Encoding the following message: &quot; +\n                    xmlDoc-&gt;InnerText);\n\n                Console::WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; +\n                    &quot;from GetOutput:&quot;);\n                for (int j = 0; j &lt; xmlNodes-&gt;Count; j++)\n                {\n                    Console::WriteLine(&quot;Node &quot; + j +\n                        &quot; has the following name: &quot; +\n                        xmlNodes-&gt;Item(j)-&gt;Name +\n                        &quot; and the following InnerXml: &quot; +\n                        xmlNodes-&gt;Item(j)-&gt;InnerXml);\n                }\n\n                break;\n            }\n            else\n            {\n                Object^ outputObject = xmlTransform-&gt;GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\npublic:\n    static XmlDocument^ LoadProducts()\n    {\n        XmlDocument^ xmlDoc = gcnew XmlDocument();\n\n        String^ contosoProducts = &quot;&lt;PRODUCTS&gt;&quot; +\n            &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&quot; + \n            &quot;&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot; +\n            &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&quot; +\n            &quot;&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot; +\n            &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&quot; +\n            &quot;&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot; +\n            &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc-&gt;LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Create a signature and add it to the specified document.\npublic:\n    static void SignDocument(XmlDocument^ xmlDoc)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider^ key = gcnew RSACryptoServiceProvider();\n\n        // Create a SignedXml object.\n        SignedXml^ signedDocument = gcnew SignedXml(xmlDoc);\n\n        // Add the key to the SignedXml document.\n        signedDocument-&gt;SigningKey = key;\n\n        // Create a reference to be signed.\n        Reference^ referenceToBeSigned = gcnew Reference();\n        referenceToBeSigned-&gt;Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        referenceToBeSigned-&gt;AddTransform(\n            gcnew XmlDsigEnvelopedSignatureTransform());\n\n        // Add the reference to the SignedXml object.\n        signedDocument-&gt;AddReference(referenceToBeSigned);\n\n        if(File::Exists(Certificate))\n        {\n            // Create a new KeyInfo object.\n            KeyInfo^ info = gcnew KeyInfo();\n\n            // Load the X509 certificate.\n            X509Certificate^ certFromFile =\n                X509Certificate::CreateFromCertFile(Certificate);\n\n            // Load the certificate into a KeyInfoX509Data object\n            // and add it to the KeyInfo object.\n            info-&gt;AddClause(gcnew KeyInfoX509Data(certFromFile));\n\n            // Add the KeyInfo object to the SignedXml object.\n            signedDocument-&gt;KeyInfo = info;\n        }\n        else\n        {\n            Console::WriteLine(&quot;Unable to locate the following file: &quot; +\n                Certificate);\n        }\n\n        // Compute the signature.\n        signedDocument-&gt;ComputeSignature();\n\n        // Add the signature branch to the original tree so it is enveloped.\n        xmlDoc-&gt;DocumentElement-&gt;AppendChild(signedDocument-&gt;GetXml());\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\npublic:\n    static Uri^ ResolveUris(Uri^ baseUri, String^ relativeUri)\n    {\n        XmlUrlResolver^ xmlResolver = gcnew XmlUrlResolver();\n        xmlResolver-&gt;Credentials =\n            System::Net::CredentialCache::DefaultCredentials;\n\n        XmlDsigEnvelopedSignatureTransform^ xmlTransform =\n            gcnew XmlDsigEnvelopedSignatureTransform();\n        xmlTransform-&gt;Resolver = xmlResolver;\n\n        Uri^ absoluteUri = xmlResolver-&gt;ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != nullptr)\n        {\n            Console::WriteLine(\n                &quot;<br>Resolved the base Uri and relative Uri to the following:&quot;);\n            Console::WriteLine(absoluteUri-&gt;ToString());\n        }\n        else\n        {\n            Console::WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n};\n\n[STAThread]\nint main()\n{\n    // Encrypt an XML message\n    XmlDocument^ productsXml = EnvelopedSignatureSample::LoadProducts();\n    EnvelopedSignatureSample::ShowTransformProperties(productsXml);\n\n    EnvelopedSignatureSample::SignDocument(productsXml);\n    EnvelopedSignatureSample::ShowTransformProperties(productsXml);\n\n    // Use XmlDsigEnvelopedSignatureTransform to resolve a Uri.\n    Uri^ baseUri = gcnew Uri(&quot;http://www.contoso.com&quot;);\n    String^ relativeUri = &quot;xml&quot;;\n    Uri^ absoluteUri = \n        EnvelopedSignatureSample::ResolveUris(baseUri, relativeUri);\n\n    Console::WriteLine(&quot;This sample completed successfully; &quot; +\n        &quot;press Enter to exit.&quot;);\n    Console::ReadLine();\n}\n\n//\n// This sample produces the following output:\n//\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;/PRODUCTS&gt;\n// Unable to load the following file: ..\\\\my509.cer\n//\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;Signature xmlns=\n// &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;CanonicalizationMethod\n// Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;\n// &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;\n// &lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/2000\n// /09/xmldsig#enveloped-signature&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=\n// &quot;http://www.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;KvPW6HUiIUMEDS0YSoT\n// gpo2JPbA=&lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;c/njCGDru/a\n// WAmWG83I+mWO040xOzxvmNx0b0o8ZyPc9j5VwApdAt103OGBtB1H6EkOvt7Ekw+PVuUo8m5LzLP\n// yaTxUDMbb2kZZ5itSkGD4rmMUMUMuzrkAoquJZjxeOydBJ2CMehV2rE3RMPLIwRX176DZVy5JKU\n// 6Cb7PR2Rpw=&lt;/SignatureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n//\n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Security.Cryptography.X509Certificates\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    Private certificatePath As String = &quot;..\\\\my509.cer&quot;\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Encrypt an XML message\n        Dim productsXml As XmlDocument = LoadProducts()\n        ShowTransformProperties(productsXml)\n\n        SignDocument(productsXml)\n        ShowTransformProperties(productsXml)\n\n        &#39; Use XmlDsigEnvelopedSignatureTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        &#39; Align interface and conclude application.\n        WriteLine(vbCrLf + &quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n\n        &#39; Reset the cursor.\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Encrypt the text in the specified XmlDocument.\n    Private Sub ShowTransformProperties(ByVal xmlDoc As XmlDocument)\n        Dim xmlTransform As New XmlDsigEnvelopedSignatureTransform\n\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = _\n            SignedXml.XmlDsigEnvelopedSignatureTransformUrl\n\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n\n        WriteLine(vbCrLf + &quot;Xml representation of the current transform: &quot;)\n        WriteLine(xmlInTransform.OuterXml)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes() As Type = xmlTransform.InputTypes\n\n        &#39; Verify the xmlTransform can accept the XMLDocument as an\n        &#39; input type.\n        For i As Int16 = 0 To validInTypes.Length Step 1\n            If (validInTypes(i).Equals(xmlDoc.GetType())) Then\n                &#39; Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc)\n\n                Dim IncludeComments As Boolean = True\n                &#39; This transform is created for demonstration purposes.\n                Dim secondTransform As _\n                    New XmlDsigEnvelopedSignatureTransform(IncludeComments)\n\n                Dim classDescription As String = secondTransform.ToString()\n\n                &#39; This call does not perform as expected.\n                &#39; An enveloped signature has no inner XML elements\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;))\n                Exit For\n            End If\n        Next\n\n        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n        For i As Int16 = validOutTypes.Length - 1 To 0 Step -1\n            If (validOutTypes(i).Equals(GetType(System.Xml.XmlDocument))) Then\n                Try\n                    Dim xmlDocumentType As Type\n                    xmlDocumentType = GetType(System.Xml.XmlDocument)\n\n                    Dim xmlDocumentOutput As XmlDocument\n                    xmlDocumentOutput = CType( _\n                        xmlTransform.GetOutput(xmlDocumentType), _\n                        XmlDocument)\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    WriteLine(&quot;Result of the GetOutput method call from &quot; + _\n                        &quot;the current transform: &quot; + _\n                        xmlDocumentOutput.OuterXml)\n                Catch ex As Exception\n                    WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n\n                End Try\n                Exit For\n            ElseIf (validOutTypes(i).Equals( _\n                GetType(System.Xml.XmlNodeList))) Then\n\n                Try\n                    Dim xmlNodeListType As Type\n                    xmlNodeListType = GetType(System.Xml.XmlNodeList)\n                    Dim xmlNodes As XmlNodeList\n                    xmlNodes = CType( _\n                        xmlTransform.GetOutput(xmlNodeListType), _\n                        System.Xml.XmlNodeList)\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    WriteLine(&quot;Encoding the following message: &quot; + _\n                        xmlDoc.InnerText)\n\n                    WriteLine(&quot;Nodes of the XmlNodeList retrieved from &quot; + _\n                        &quot;GetOutput:&quot;)\n\n                    For j As Int16 = 0 To xmlNodes.Count - 1 Step 1\n                        WriteLine(&quot;Node &quot; + j.ToString() + &quot; has the &quot; + _\n                            &quot;following name: &quot; + xmlNodes.Item(j).Name + _\n                            &quot; and the following InnerXml: &quot; + _\n                            xmlNodes.Item(j).InnerXml)\n                    Next\n                Catch ex As Exception\n                    WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n                End Try\n\n                Exit For\n            Else\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If\n        Next\n    End Sub\n\n    Private Function LoadProducts() As XmlDocument\n        Dim xmlDoc As New XmlDocument\n\n        Dim contosoProducts As String = &quot;&lt;PRODUCTS&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;\n\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n    End Function\n\n    &#39; Create a signature and add it to the specified document.\n    Private Sub SignDocument(ByRef xmlDoc As XmlDocument)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(xmlDoc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference\n        Reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Reference.AddTransform(New XmlDsigEnvelopedSignatureTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        SignedXml.AddReference(Reference)\n\n        Try\n            &#39; Create a new KeyInfo object.\n            Dim keyInfo As New keyInfo\n\n            &#39; Load the X509 certificate.\n            Dim MSCert As X509Certificate\n            MSCert = X509Certificate.CreateFromCertFile(certificatePath)\n\n            &#39; Load the certificate into a KeyInfoX509Data object\n            &#39; and add it to the KeyInfo object.\n            keyInfo.AddClause(New KeyInfoX509Data(MSCert))\n\n            &#39; Add the KeyInfo object to the SignedXml object.\n            signedXml.KeyInfo = keyInfo\n\n        Catch ex As FileNotFoundException\n            WriteLine(&quot;Unable to load the following file: &quot; + certificatePath)\n\n        End Try\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Add the signature branch to the original tree so it is enveloped.\n        xmlDoc.DocumentElement.AppendChild(signedXml.GetXml())\n    End Sub\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Function ResolveUris( _\n        ByVal baseUri As Uri, _\n        ByVal relativeUri As String) As Uri\n\n        Dim xmlResolver As New XmlUrlResolver\n\n        xmlResolver.Credentials = _\n            System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigEnvelopedSignatureTransform\n        xmlTransform.Resolver = xmlResolver\n\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n\n        If Not absoluteUri Is Nothing Then\n            WriteLine(vbCrLf + &quot;Resolved the base Uri and relative Uri &quot; + _\n                &quot;to the following:&quot;)\n            WriteLine(absoluteUri.ToString())\n        Else\n            WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n\n        Return absoluteUri\n    End Function\n\n    &#39; Write specified message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(Message + vbCrLf)\n\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;XmlDsigEnvelopedSignatureTransform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;\n&#39; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n&#39; &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n&#39; &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n&#39; &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;/PRODUCTS&gt;\n&#39; Unable to load the following file: ..\\\\my509.cer\n&#39; \n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;\n&#39;  xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n&#39; &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n&#39; &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n&#39; &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;Signature xmlns=\n&#39; &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;CanonicalizationMethod \n&#39; Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;\n&#39; &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;\n&#39; &lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/2000\n&#39; /09/xmldsig#enveloped-signature&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=\n&#39; &quot;http://www.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;KvPW6HUiIUMEDS0YSoTg\n&#39; po2JPbA=&lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;c/njCGDru/aWA\n&#39; mWG83I+mWO040xOzxvmNx0b0o8ZyPc9j5VwApdAt103OGBtB1H6EkOvt7Ekw+PVuUo8m5LzLPyaT\n&#39; xUDMbb2kZZ5itSkGD4rmMUMUMuzrkAoquJZjxeOydBJ2CMehV2rE3RMPLIwRX176DZVy5JKU6Cb7\n&#39; PR2Rpw=&lt;/SignatureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n&#39; \n&#39; Resolved the base Uri and relative Uri to the following:\n&#39; http://www.contoso.com/xml\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigExcC14NTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigExcC14NTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigExcC14NTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigExcC14NTransformUrl field is &quot;<a href=\"http://www.w3.org/2001/10/xml-exc-c14n#\" data-linktype=\"external\">http://www.w3.org/2001/10/xml-exc-c14n#</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigexcc14ntransform\" data-linktype=\"relative-path\">XmlDsigExcC14NTransform</a> class implements the transform described by the XmlDsigExcC14NTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/10/xml-exc-c14n#\" data-linktype=\"external\">http://www.w3.org/2001/10/xml-exc-c14n#</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an XML document using the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigexcc14ntransform\" data-linktype=\"relative-path\">XmlDsigExcC14NTransform</a> class.  This sample creates an envelope signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.Xml.XmlDsigExcC14NTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Specify a canonicalization method.\n        signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;\n\n        // Set the InclusiveNamespacesPrefixList property.        \n        XmlDsigExcC14NTransform canMethod = (XmlDsigExcC14NTransform)signedXml.SignedInfo.CanonicalizationMethodObject;\n        canMethod.InclusiveNamespacesPrefixList = &quot;Sign&quot;;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;);\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Create a new XmlNode object.\n        XmlNode subnode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;TempElement&quot;, &quot;Sign&quot;);\n\n        // Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;;\n\n        // Append the node to the document.\n        document.DocumentElement.AppendChild(subnode);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.Xml.XmlDsigExcC14NTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Specify a canonicalization method.\n   signedXml-&gt;SignedInfo-&gt;CanonicalizationMethod = SignedXml::XmlDsigExcC14NTransformUrl;\n   \n   // Set the InclusiveNamespacesPrefixList property.        \n   XmlDsigExcC14NTransform^ canMethod = dynamic_cast&lt;XmlDsigExcC14NTransform^&gt;(signedXml-&gt;SignedInfo-&gt;CanonicalizationMethodObject);\n   canMethod-&gt;InclusiveNamespacesPrefixList = L&quot;Sign&quot;;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = L&quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nstatic void CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;MyXML&quot;, L&quot;Don&#39;t_Sign&quot; );\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Create a new XmlNode object.\n   XmlNode^ subnode = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;TempElement&quot;, L&quot;Sign&quot; );\n   \n   // Add some text to the node.\n   subnode-&gt;InnerText = L&quot;Here is some data to sign.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;DocumentElement-&gt;AppendChild( subnode );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( L&quot;Example.xml&quot; );\n      Console::WriteLine( L&quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( L&quot;Example.xml&quot;, L&quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.Xml.XmlDsigExcC14NTransform#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        Try\n            &#39; Generate a signing key.\n            Dim Key As New RSACryptoServiceProvider()\n\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Specify a canonicalization method.\n        signedXml.SignedInfo.CanonicalizationMethod = signedXml.XmlDsigExcC14NTransformUrl\n\n        &#39; Set the InclusiveNamespacesPrefixList property. \n        Dim canMethod As XmlDsigExcC14NTransform = CType(signedXml.SignedInfo.CanonicalizationMethodObject, XmlDsigExcC14NTransform)\n        canMethod.InclusiveNamespacesPrefixList = &quot;Sign&quot;\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;)\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Create a new XmlNode object.\n        Dim subnode As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;TempElement&quot;, &quot;Sign&quot;)\n\n        &#39; Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;\n\n        &#39; Append the node to the document.\n        document.DocumentElement.AppendChild(subnode)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        document.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigExcC14NWithCommentsTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigExcC14NWithCommentsTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for exclusive XML canonicalization, with comments. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigExcC14NWithCommentsTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigExcC14NWithCommentsTransformUrl field is &quot;<a href=\"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\" data-linktype=\"external\">http://www.w3.org/2001/10/xml-exc-c14n#WithComments</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigexcc14nwithcommentstransform\" data-linktype=\"relative-path\">XmlDsigExcC14NWithCommentsTransform</a> class implements the transform described by the XmlDsigExcC14NWithCommentsTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\" data-linktype=\"external\">http://www.w3.org/2001/10/xml-exc-c14n#WithComments</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an XML document using the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigexcc14nwithcommentstransform\" data-linktype=\"relative-path\">XmlDsigExcC14NWithCommentsTransform</a> class.  This sample creates an envelope signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            //SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Specify a canonicalization method.\n        signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NWithCommentsTransformUrl;\n\n        // Set the InclusiveNamespacesPrefixList property.\n        XmlDsigExcC14NWithCommentsTransform canMethod = (XmlDsigExcC14NWithCommentsTransform)signedXml.SignedInfo.CanonicalizationMethodObject;\n        canMethod.InclusiveNamespacesPrefixList = &quot;Sign&quot;;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;);\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Create a new XmlNode object.\n        XmlNode subnode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;TempElement&quot;, &quot;Sign&quot;);\n\n        // Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;;\n\n        // Append the node to the document.\n        document.DocumentElement.AppendChild(subnode);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Specify a canonicalization method.\n   signedXml-&gt;SignedInfo-&gt;CanonicalizationMethod = SignedXml::XmlDsigExcC14NWithCommentsTransformUrl;\n   \n   // Set the InclusiveNamespacesPrefixList property.\n   XmlDsigExcC14NWithCommentsTransform^ canMethod = dynamic_cast&lt;XmlDsigExcC14NWithCommentsTransform^&gt;(signedXml-&gt;SignedInfo-&gt;CanonicalizationMethodObject);\n   canMethod-&gt;InclusiveNamespacesPrefixList = L&quot;Sign&quot;;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = L&quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nstatic void CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;MyXML&quot;, L&quot;Don&#39;t_Sign&quot; );\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Create a new XmlNode object.\n   XmlNode^ subnode = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;TempElement&quot;, L&quot;Sign&quot; );\n   \n   // Add some text to the node.\n   subnode-&gt;InnerText = L&quot;Here is some data to sign.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;DocumentElement-&gt;AppendChild( subnode );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Create an XML file to sign.\n      CreateSomeXml( L&quot;Example.xml&quot; );\n      Console::WriteLine( L&quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      //SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        Try\n            &#39; Generate a signing key.\n            Dim Key As New RSACryptoServiceProvider()\n\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            &#39;SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Specify a canonicalization method.\n        signedXml.SignedInfo.CanonicalizationMethod = signedXml.XmlDsigExcC14NWithCommentsTransformUrl\n\n        &#39; Set the InclusiveNamespacesPrefixList property.\n        Dim canMethod As XmlDsigExcC14NWithCommentsTransform = CType(signedXml.SignedInfo.CanonicalizationMethodObject, XmlDsigExcC14NWithCommentsTransform)\n        canMethod.InclusiveNamespacesPrefixList = &quot;Sign&quot;\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;)\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Create a new XmlNode object.\n        Dim subnode As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;TempElement&quot;, &quot;Sign&quot;)\n\n        &#39; Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;\n\n        &#39; Append the node to the document.\n        document.DocumentElement.AppendChild(subnode)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        document.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigHMACSHA1Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigHMACSHA1Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a> algorithm for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigHMACSHA1Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigHMACSHA1Url field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#hmac-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#hmac-sha1</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#hmac-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#hmac-sha1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigMinimalCanonicalizationUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigMinimalCanonicalizationUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard minimal canonicalization algorithm for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigMinimalCanonicalizationUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigMinimalCanonicalizationUrl field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#minimal\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#minimal</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#minimal\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#minimal</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigNamespaceUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigNamespaceUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard namespace for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigNamespaceUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigNamespaceUrl field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA1Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigRSASHA1Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> signature method for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigRSASHA1Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigRSASHA1Url field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#rsa-sha1</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#rsa-sha1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA256Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigRSASHA256Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the  <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> SHA-256 signature method variation for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigRSASHA256Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigRSASHA256Url field is &quot;<a href=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/04/xmldsig-more\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA384Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigRSASHA384Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the  <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> SHA-384 signature method variation for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigRSASHA384Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigRSASHA384Url field is &quot;<a href=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#rsa-sha384</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#rsa-sha384</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigRSASHA512Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigRSASHA512Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the  <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> SHA-512 signature method variation for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigRSASHA512Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigRSASHA512Url field is &quot;<a href=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#rsa-sha512</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#rsa-sha512</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA1Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigSHA1Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha1\" data-linktype=\"relative-path\">SHA1</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigSHA1Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigSHA1Url field is &quot;<a href=\"http://www.w3.org/2000/09/xmldsig#sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#sha1</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2000/09/xmldsig#sha1\" data-linktype=\"external\">http://www.w3.org/2000/09/xmldsig#sha1</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA256Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigSHA256Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha256\" data-linktype=\"relative-path\">SHA256</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigSHA256Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigSHA256Url field is &quot;<a href=\"http://www.w3.org/2001/04/xmlenc#sha256\" data-linktype=\"external\">http://www.w3.org/2001/04/xmlenc#sha256</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/04/xmlenc#sha256\" data-linktype=\"external\">http://www.w3.org/2001/04/xmlenc#sha256</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA384Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigSHA384Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha384\" data-linktype=\"relative-path\">SHA384</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigSHA384Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigSHA384Url field is &quot;<a href=\"http://www.w3.org/2001/04/xmldsig-more#sha384\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#sha384</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/04/xmldsig-more#sha384\" data-linktype=\"external\">http://www.w3.org/2001/04/xmldsig-more#sha384</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigSHA512Url\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigSHA512Url</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the standard <a class=\"xref\" href=\"system.security.cryptography.sha512\" data-linktype=\"relative-path\">SHA512</a> digest method for XML digital signatures. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigSHA512Url;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigSHA512Url field is &quot;<a href=\"http://www.w3.org/2001/04/xmlenc#sha512\" data-linktype=\"external\">http://www.w3.org/2001/04/xmlenc#sha512</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/2001/04/xmlenc#sha512\" data-linktype=\"external\">http://www.w3.org/2001/04/xmlenc#sha512</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigXPathTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigXPathTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the XML Path Language (XPath). This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigXPathTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigXPathTransformUrl field is &quot;<a href=\"http://www.w3.org/TR/1999/REC-xpath-19991116\" data-linktype=\"external\">http://www.w3.org/TR/1999/REC-xpath-19991116</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class implements the transform described by the XmlDsigXPathTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/TR/1999/REC-xpath-19991116\" data-linktype=\"external\">http://www.w3.org/TR/1999/REC-xpath-19991116</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to call members of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nClass Class1\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39; Encrypt a sample XML string.\n        Dim productsXml As XmlDocument = LoadProducts()\n        ShowTransformProperties(productsXml)\n\n        &#39; Encrypt an XPath Xml string.\n        Dim transformXml As XmlDocument = LoadTransformByXml()\n        ShowTransformProperties(transformXml)\n\n        &#39; Use XmlDsigXPathTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; + &quot;press Enter to exit.&quot;)\n        Console.ReadLine()\n\n    End Sub &#39;Main\n\n\n    &#39; Encrypt the text in the specified XmlDocument.\n    Private Shared Sub ShowTransformProperties(ByVal xmlDoc As XmlDocument)\n        &#39; Create a new XMLDocument object.\n        Dim doc As New XmlDocument()\n\n        &#39; Create a new XmlElement.\n        Dim xPathElem As XmlElement = doc.CreateElement(&quot;XPath&quot;)\n\n        &#39; Set the element text to the value\n        &#39; of the XPath string.\n        xPathElem.InnerText = &quot;ancestor-or-self::PRODUCTS&quot;\n\n        &#39; Create a new XmlDsigXPathTransform object.\n        Dim xmlTransform As New XmlDsigXPathTransform()\n\n        &#39; Load the XPath XML from the element. \n        xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;))\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = SignedXml.XmlDsigXPathTransformUrl\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n        Console.WriteLine(vbLf + &quot;Xml representation of the current transform: &quot;)\n        Console.WriteLine(xmlInTransform.OuterXml)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes As Type() = xmlTransform.InputTypes\n        &#39; Verify the xmlTransform can accept the XMLDocument as an\n        &#39; input type.\n        Dim i As Integer\n        For i = 0 To validInTypes.Length\n            If validInTypes(i).Equals(xmlDoc.GetType()) Then\n                &#39; Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc)\n                Try\n                    &#39; This transform is created for demonstration purposes.\n                    Dim secondTransform As New XmlDsigXPathTransform()\n\n                    Dim classDescription As String = secondTransform.ToString()\n                    xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;))\n                Catch\n                    Console.WriteLine(&quot;Caught exception while trying to &quot; + &quot;load the specified Xml document. The document &quot; + &quot;requires an XPath element to be valid.&quot;)\n                End Try\n                Exit For\n            End If\n        Next i\n\n        Dim validOutTypes As Type() = xmlTransform.OutputTypes\n        For i = validOutTypes.Length - 1 To 0 Step -1\n            If validOutTypes(i).Equals(GetType(System.Xml.XmlDocument)) Then\n                Try\n                    Dim xmlDocumentType As Type = GetType(System.Xml.XmlDocument)\n                    Dim xmlDocumentOutput As XmlDocument = CType(xmlTransform.GetOutput(xmlDocumentType), XmlDocument)\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    Console.WriteLine(&quot;Result of the GetOutput method call&quot; + &quot; from the current transform: &quot; + xmlDocumentOutput.OuterXml)\n                Catch ex As Exception\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n                End Try\n\n                Exit For\n            ElseIf validOutTypes(i).Equals(GetType(System.Xml.XmlNodeList)) Then\n                Try\n                    Dim xmlNodeListType As Type = GetType(System.Xml.XmlNodeList)\n                    Dim xmlNodes As XmlNodeList = CType(xmlTransform.GetOutput(xmlNodeListType), XmlNodeList)\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; + xmlDoc.InnerText)\n\n                    Console.WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; + &quot;from GetOutput:&quot;)\n                    Dim j As Integer\n                    For j = 0 To xmlNodes.Count\n                        Console.WriteLine(&quot;Node &quot; + j + &quot; has the following name: &quot; + xmlNodes.Item(j).Name + &quot; and the following InnerXml: &quot; + xmlNodes.Item(j).InnerXml)\n                    Next j\n                Catch ex As Exception\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n                End Try\n\n                Exit For\n            Else\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If \n        Next i\n\n    End Sub &#39;ShowTransformProperties\n\n\n    &#39; Create an XML document for the dsig namespace.\n    Private Shared Function LoadTransformByXml() As XmlDocument\n        Dim xmlDoc As New XmlDocument()\n\n        Dim transformXml As String = &quot;&lt;Signature&gt;&lt;Reference URI=&#39;&#39;&gt;&lt;Transforms&gt;&quot;\n        transformXml += &quot;&lt;Transform&gt;&lt;XPath &quot;\n        transformXml += &quot;xmlns:dsig=&#39;http://www.w3.org/2000/09/xmldsig#&#39;&gt;&quot;\n        transformXml += &quot;not(ancestor-or-self::dsig:Signature)&quot;\n        transformXml += &quot;&lt;/XPath&gt;&lt;/Transform&gt;&quot;\n        transformXml += &quot;&lt;/Transforms&gt;&lt;/Reference&gt;&lt;/Signature&gt;&quot;\n\n        xmlDoc.LoadXml(transformXml)\n        Return xmlDoc\n\n    End Function &#39;LoadTransformByXml\n\n\n    &#39; Create an XML document describing various products.\n    Private Shared Function LoadProducts() As XmlDocument\n        Dim xmlDoc As New XmlDocument()\n\n        Dim contosoProducts As String = &quot;&lt;PRODUCTS&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;\n\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n\n    End Function &#39;LoadProducts\n\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Shared Function ResolveUris(ByVal baseUri As Uri, ByVal relativeUri As String) As Uri\n        Dim xmlResolver As New XmlUrlResolver()\n        xmlResolver.Credentials = System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigXPathTransform()\n        xmlTransform.Resolver = xmlResolver\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n\n        If Not (absoluteUri Is Nothing) Then\n            Console.WriteLine(vbLf + &quot;Resolved the base Uri and relative Uri to the following:&quot;)\n            Console.WriteLine(absoluteUri.ToString())\n        Else\n            Console.WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n        Return absoluteUri\n\n    End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXPathTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Class1\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Encrypt a sample XML string.\n        XmlDocument productsXml = LoadProducts();\n        ShowTransformProperties(productsXml);\n\n        // Encrypt an XPath Xml string.\n        XmlDocument transformXml = LoadTransformByXml();\n        ShowTransformProperties(transformXml);\n\n        // Use XmlDsigXPathTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(XmlDocument xmlDoc)\n    {\n\n        // Create a new XMLDocument object.\n        XmlDocument doc = new XmlDocument();\n\n        // Create a new XmlElement.\n        XmlElement xPathElem = doc.CreateElement(&quot;XPath&quot;);\n\n        // Set the element text to the value\n        // of the XPath string.\n        xPathElem.InnerText = &quot;ancestor-or-self::PRODUCTS&quot;;\n\n        // Create a new XmlDsigXPathTransform object.\n        XmlDsigXPathTransform xmlTransform = new XmlDsigXPathTransform();\n\n        // Load the XPath XML from the element. \n        xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;));\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigXPathTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n\n        Console.WriteLine(&quot;<br>Xml representation of the current transform: &quot;);\n        Console.WriteLine(xmlInTransform.OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i = 0; i &lt; validInTypes.Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc.GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc);\n\n                try\n                {\n                    // This transform is created for demonstration purposes.\n                    XmlDsigXPathTransform secondTransform =\n                        new XmlDsigXPathTransform();\n\n                    string classDescription = secondTransform.ToString();\n\n                    xmlTransform.LoadInnerXml(xPathElem.SelectNodes(&quot;.&quot;)); ;\n                }\n                catch (CryptographicException)\n                {\n                    Console.WriteLine(&quot;Caught exception while trying to &quot; +\n                        &quot;load the specified Xml document. The document &quot; +\n                        &quot;requires an XPath element to be valid.&quot;);\n                }\n                break;\n            }\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n\n        for (int i = validOutTypes.Length - 1; i &gt;= 0; i--)\n        {\n            if (validOutTypes[i] == typeof(System.Xml.XmlDocument))\n            {\n                try\n                {\n                    Type xmlDocumentType = typeof(System.Xml.XmlDocument);\n                    XmlDocument xmlDocumentOutput = (XmlDocument)\n                        xmlTransform.GetOutput(xmlDocumentType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Result of the GetOutput method call&quot; +\n                        &quot; from the current transform: &quot; +\n                        xmlDocumentOutput.OuterXml);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else if (validOutTypes[i] == typeof(System.Xml.XmlNodeList))\n            {\n                try\n                {\n                    Type xmlNodeListType = typeof(System.Xml.XmlNodeList);\n                    XmlNodeList xmlNodes = (XmlNodeList)\n                        xmlTransform.GetOutput(xmlNodeListType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; +\n                        xmlDoc.InnerText);\n\n                    Console.WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; +\n                        &quot;from GetOutput:&quot;);\n                    for (int j = 0; j &lt; xmlNodes.Count; j++)\n                    {\n                        Console.WriteLine(&quot;Node &quot; + j +\n                            &quot; has the following name: &quot; +\n                            xmlNodes.Item(j).Name +\n                            &quot; and the following InnerXml: &quot; +\n                            xmlNodes.Item(j).InnerXml);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document for the dsig namespace.\n    private static XmlDocument LoadTransformByXml()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string transformXml = &quot;&lt;Signature&gt;&lt;Reference URI=&#39;&#39;&gt;&lt;Transforms&gt;&quot;;\n        transformXml += &quot;&lt;Transform&gt;&lt;XPath &quot;;\n        transformXml += &quot;xmlns:dsig=&#39;http://www.w3.org/2000/09/xmldsig#&#39;&gt;&quot;;\n        transformXml += &quot;not(ancestor-or-self::dsig:Signature)&quot;;\n        transformXml += &quot;&lt;/XPath&gt;&lt;/Transform&gt;&quot;;\n        transformXml += &quot;&lt;/Transforms&gt;&lt;/Reference&gt;&lt;/Signature&gt;&quot;;\n\n        xmlDoc.LoadXml(transformXml);\n        return xmlDoc;\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string contosoProducts = &quot;&lt;PRODUCTS&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials =\n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigXPathTransform xmlTransform =\n            new XmlDsigXPathTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;<br>Resolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlDsigXsltTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlDsigXsltTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for XSLT transformations. This field is constant.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlDsigXsltTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlDsigXsltTransformUrl field is &quot;<a href=\"http://www.w3.org/TR/1999/REC-xslt-19991116\" data-linktype=\"external\">http://www.w3.org/TR/1999/REC-xslt-19991116</a>&quot;.  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class implements the transform described by the XmlDsigXsltTransformUrl field.  </p>\n<p> For more information, see the World Wide Web Consortium (W3C) specification at <a href=\"http://www.w3.org/TR/1999/REC-xslt-19991116\" data-linktype=\"external\">http://www.w3.org/TR/1999/REC-xslt-19991116</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use members of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#2\">#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\n\nref class Class1\n{\npublic:\n   [STAThread]\n   static void Main()\n   {\n      XmlDocument^ productsXml = LoadProducts();\n      XmlNodeList^ xsltNodeList = GetXsltAsNodeList();\n      TransformDoc( productsXml, xsltNodeList );\n      \n      // Use XmlDsigXsltTransform to resolve a Uri.\n      Uri^ baseUri = gcnew Uri( L&quot;http://www.contoso.com&quot; );\n      String^ relativeUri = L&quot;xml&quot;;\n      Uri^ absoluteUri = ResolveUris( baseUri, relativeUri );\n      Console::WriteLine( L&quot;This sample completed successfully; &quot;\n      L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   static void TransformDoc( XmlDocument^ xmlDoc, XmlNodeList^ xsltNodeList )\n   {\n      try\n      {\n         // Construct a new XmlDsigXsltTransform.\n         XmlDsigXsltTransform^ xmlTransform = gcnew XmlDsigXsltTransform;\n\n         // Load the Xslt tranform as a node list.\n         xmlTransform-&gt;LoadInnerXml( xsltNodeList );\n\n         // Load the Xml document to perform the tranform on.\n         XmlNamespaceManager^ namespaceManager;\n         namespaceManager = gcnew XmlNamespaceManager( xmlDoc-&gt;NameTable );\n         XmlNodeList^ productsNodeList;\n         productsNodeList = xmlDoc-&gt;SelectNodes( L&quot;//.&quot;, namespaceManager );\n         xmlTransform-&gt;LoadInput( productsNodeList );\n\n         // Retrieve the output from the transform.\n         Stream^ outputStream = (Stream^)xmlTransform-&gt;GetOutput(\n            System::IO::Stream::typeid );\n\n         // Read the output stream into a stream reader.\n         StreamReader^ streamReader = gcnew StreamReader( outputStream );\n         \n         // Read the stream into a string.\n         String^ outputMessage = streamReader-&gt;ReadToEnd();\n         \n         // Close the streams.\n         outputStream-&gt;Close();\n         streamReader-&gt;Close();\n         \n         // Display to the console the Xml before and after\n         // encryption.\n         Console::WriteLine( L&quot;<br>Result of transformation: {0}&quot;, outputMessage );\n         ShowTransformProperties( xmlTransform );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( L&quot;Caught exception in TransformDoc method: {0}&quot;, ex );\n      }\n   }\n\n   static XmlNodeList^ GetXsltAsNodeList()\n   {\n      String^ transformXml = L&quot;&lt;xsl:transform version=&#39;1.0&#39; &quot;;\n      transformXml = String::Concat( transformXml,\n         L&quot;xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39;&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;products&#39;&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;product&#39;&gt;&lt;tr&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;productid&#39;&gt;&lt;td&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;description&#39;&gt;&lt;td&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;/xsl:transform&gt;&quot; );\n      Console::WriteLine( L&quot;<br>Created the following Xslt tranform:&quot; );\n      Console::WriteLine( transformXml );\n      XmlDocument^ xmlDoc = gcnew XmlDocument;\n      xmlDoc-&gt;LoadXml( transformXml );\n      return xmlDoc-&gt;GetElementsByTagName( L&quot;xsl:transform&quot; );\n   }\n\n   // Encrypt the text in the specified XmlDocument.\n   static void ShowTransformProperties( XmlDsigXsltTransform^ xmlTransform )\n   {\n      String^ classDescription = xmlTransform-&gt;ToString();\n      Console::WriteLine( L&quot;<br>** Summary for {0} **&quot;, classDescription );\n      \n      // Retrieve the XML representation of the current transform.\n      XmlElement^ xmlInTransform = xmlTransform-&gt;GetXml();\n      Console::WriteLine( L&quot;Xml representation of the current transform:<br>{0}&quot;,\n         xmlInTransform-&gt;OuterXml );\n      \n      // Ensure the transform is using the proper algorithm.\n      xmlTransform-&gt;Algorithm = SignedXml::XmlDsigXsltTransformUrl;\n      Console::WriteLine( L&quot;Algorithm used: {0}&quot;, classDescription );\n      \n      // Retrieve the valid input types for the current transform.\n      array&lt;Type^&gt;^validInTypes = xmlTransform-&gt;InputTypes;\n      Console::WriteLine( L&quot;Transform accepts the following inputs:&quot; );\n      for ( int i = 0; i &lt; validInTypes-&gt;Length; i++ )\n      {\n         Console::WriteLine( L&quot;&nbsp;&nbsp;&nbsp;&nbsp;{0}&quot;, validInTypes[ i ] );\n\n      }\n      \n      array&lt;Type^&gt;^validOutTypes = xmlTransform-&gt;OutputTypes;\n      Console::WriteLine( L&quot;Transform outputs in the following types:&quot; );\n      for ( int i = validOutTypes-&gt;Length - 1; i &gt;= 0; i-- )\n      {\n         Console::WriteLine( L&quot;&nbsp;&nbsp;&nbsp;&nbsp; {0}&quot;, validOutTypes[ i ] );\n         if ( validOutTypes[ i ] == Object::typeid )\n         {\n            Object^ outputObject = xmlTransform-&gt;GetOutput();\n         }\n      }\n   }\n\n   // Create an XML document describing various products.\n   static XmlDocument^ LoadProducts()\n   {\n      String^ contosoProducts = L&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;;\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;products&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;description&gt;Widgets&lt;/description&gt;&lt;/product&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;description&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;/products&gt;&quot; );\n      Console::WriteLine(\n         L&quot;<br>Created the following Xml document for tranformation:&quot; );\n      Console::WriteLine( contosoProducts );\n      XmlDocument^ xmlDoc = gcnew XmlDocument;\n      xmlDoc-&gt;LoadXml( contosoProducts );\n      return xmlDoc;\n   }\n\n   // Resolve the specified base and relative Uri&#39;s .\n   static Uri^ ResolveUris( Uri^ baseUri, String^ relativeUri )\n   {\n      XmlUrlResolver^ xmlResolver = gcnew XmlUrlResolver;\n      xmlResolver-&gt;Credentials =\n         System::Net::CredentialCache::DefaultCredentials;\n\n      XmlDsigXsltTransform^ xmlTransform = gcnew XmlDsigXsltTransform;\n      xmlTransform-&gt;Resolver = xmlResolver;\n\n      Uri^ absoluteUri = xmlResolver-&gt;ResolveUri( baseUri, relativeUri );\n      if ( absoluteUri != nullptr )\n      {\n         Console::WriteLine(\n         L&quot;<br>Resolved the base Uri and relative Uri to the following:&quot; );\n         Console::WriteLine( absoluteUri );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;Unable to resolve the base Uri and relative Uri&quot; );\n      }\n\n      return absoluteUri;\n   }\n};\n\nint main()\n{\n   Class1::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// Created the following Xml document for tranformation:\n// &lt;?xml version=&#39;1.0&#39;?&gt;&lt;products&gt;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&lt;descriptio\n// n&gt;Widgets&lt;/description&gt;&lt;/product&gt;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&lt;descript\n// ion&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&lt;/products&gt;\n//\n// Created the following Xslt tranform:\n// &lt;xsl:transform version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transfor\n// m&#39;&gt;&lt;xsl:template match=&#39;products&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td\n// &gt;&lt;/tr&gt;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;pro\n// duct&#39;&gt;&lt;tr&gt;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:emplate match=&#39;pro\n// ductid&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;\n// description&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;\n//\n// Result of transformation: &lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;t\n// r&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Widgets&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gadgits&lt;/td&gt;&lt;/tr&gt;&lt;/table\n// &gt;\n//\n// ** Summary for System.Security.Cryptography.Xml.XmlDsigXsltTransform **\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot; xmlns=&quot;h\n// ttp://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;xsl:transform version=&quot;1.0&quot; xmlns:xsl=&quot;\n// http://www.w3.org/1999/XSL/Transform&quot;&gt;&lt;xsl:template match=&quot;products&quot;&gt;&lt;table\n//  xmlns=&quot;&quot;&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;xsl:apply-templates /&gt;&lt;/\n// table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;product&quot;&gt;&lt;tr xmlns=&quot;&quot;&gt;&lt;xsl:apply-\n// templates /&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;productid&quot;&gt;&lt;td xmlns=&quot;\n// &quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;descripti\n// on&quot;&gt;&lt;td xmlns=&quot;&quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform\n// &gt;&lt;/Transform&gt;\n// Algorithm used: System.Security.Cryptography.Xml.XmlDsigXsltTransform\n// Transform accepts the following inputs:\n// System.IO.Stream\n// System.Xml.XmlDocument\n// System.Xml.XmlNodeList\n// Transform outputs in the following types:\n// System.IO.Stream\n//\n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\n\nclass Class1\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        XmlDocument productsXml = LoadProducts();\n        XmlNodeList xsltNodeList = GetXsltAsNodeList();\n        TransformDoc(productsXml, xsltNodeList);\n\n        // Use XmlDsigXsltTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void TransformDoc(\n        XmlDocument xmlDoc, \n        XmlNodeList xsltNodeList)\n    {\n        try \n        {\n            // Construct a new XmlDsigXsltTransform.\n            XmlDsigXsltTransform xmlTransform = \n                new XmlDsigXsltTransform();\n\n            // Load the Xslt tranform as a node list.\n            xmlTransform.LoadInnerXml(xsltNodeList);\n\n            // Load the Xml document to perform the tranform on.\n            XmlNamespaceManager namespaceManager;\n            namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);\n\n            XmlNodeList productsNodeList;\n            productsNodeList = xmlDoc.SelectNodes(&quot;//.&quot;, namespaceManager);\n\n            xmlTransform.LoadInput(productsNodeList);\n\n            // Retrieve the output from the transform.\n            Stream outputStream = (Stream)\n                xmlTransform.GetOutput(typeof(System.IO.Stream));\n\n            // Read the output stream into a stream reader.\n            StreamReader streamReader =\n                new StreamReader(outputStream);\n\n            // Read the stream into a string.\n            string outputMessage = streamReader.ReadToEnd();\n\n            // Close the streams.\n            outputStream.Close();\n            streamReader.Close();\n\n            // Display to the console the Xml before and after\n            // encryption.\n            Console.WriteLine(&quot;<br>Result of transformation: &quot; + outputMessage);\n            ShowTransformProperties(xmlTransform);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Caught exception in TransformDoc method: &quot; + \n                ex.ToString());\n        }\n    }\n    \n    private static XmlNodeList GetXsltAsNodeList()\n    {\n        string transformXml = &quot;&lt;xsl:transform version=&#39;1.0&#39; &quot;;\n        transformXml += &quot;xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39;&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;products&#39;&gt;&quot;;\n        transformXml += &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;product&#39;&gt;&lt;tr&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;productid&#39;&gt;&lt;td&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;description&#39;&gt;&lt;td&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;/xsl:transform&gt;&quot;;\n\n        Console.WriteLine(&quot;<br>Created the following Xslt tranform:&quot;);\n        Console.WriteLine(transformXml);\n\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.LoadXml(transformXml);\n        return xmlDoc.GetElementsByTagName(&quot;xsl:transform&quot;);\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(\n        XmlDsigXsltTransform xmlTransform)\n    {\n        string classDescription = xmlTransform.ToString();\n        Console.WriteLine(&quot;<br>** Summary for &quot; + classDescription + &quot; **&quot;);\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n        Console.WriteLine(&quot;Xml representation of the current transform:<br>&quot; +\n            xmlInTransform.OuterXml);\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigXsltTransformUrl;\n        Console.WriteLine(&quot;Algorithm used: &quot; + classDescription);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n        Console.WriteLine(&quot;Transform accepts the following inputs:&quot;);\n        for (int i=0; i&lt;validInTypes.Length; i++)\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot; + validInTypes[i].ToString());\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n        Console.WriteLine(&quot;Transform outputs in the following types:&quot;);\n        for (int i=validOutTypes.Length-1; i &gt;= 0; i--)\n        {\n            Console.WriteLine(&quot;&nbsp;&nbsp;&nbsp;&nbsp; &quot; + validOutTypes[i].ToString());\n\n            if (validOutTypes[i] == typeof(object))\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        string contosoProducts = &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;;\n        contosoProducts += &quot;&lt;products&gt;&quot;;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&quot;;\n        contosoProducts += &quot;&lt;description&gt;Widgets&lt;/description&gt;&lt;/product&gt;&quot;;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&quot;;\n        contosoProducts += &quot;&lt;description&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&quot;;\n        contosoProducts += &quot;&lt;/products&gt;&quot;;\n\n        Console.WriteLine(\n            &quot;<br>Created the following Xml document for tranformation:&quot;);\n        Console.WriteLine(contosoProducts);\n\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials = \n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigXsltTransform xmlTransform =\n            new XmlDsigXsltTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;<br>Resolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n//\n// This sample produces the following output:\n//\n// Created the following Xml document for tranformation:\n// &lt;?xml version=&#39;1.0&#39;?&gt;&lt;products&gt;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&lt;descriptio\n// n&gt;Widgets&lt;/description&gt;&lt;/product&gt;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&lt;descript\n// ion&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&lt;/products&gt;\n// \n// Created the following Xslt tranform:\n// &lt;xsl:transform version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transfor\n// m&#39;&gt;&lt;xsl:template match=&#39;products&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td\n// &gt;&lt;/tr&gt;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;pro\n// duct&#39;&gt;&lt;tr&gt;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:emplate match=&#39;pro\n// ductid&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;\n// description&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;\n// \n// Result of transformation: &lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;t\n// r&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Widgets&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gadgits&lt;/td&gt;&lt;/tr&gt;&lt;/table\n// &gt;\n//\n// ** Summary for System.Security.Cryptography.Xml.XmlDsigXsltTransform **\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot; xmlns=&quot;h\n// ttp://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;xsl:transform version=&quot;1.0&quot; xmlns:xsl=&quot;\n// http://www.w3.org/1999/XSL/Transform&quot;&gt;&lt;xsl:template match=&quot;products&quot;&gt;&lt;table\n//  xmlns=&quot;&quot;&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;xsl:apply-templates /&gt;&lt;/\n// table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;product&quot;&gt;&lt;tr xmlns=&quot;&quot;&gt;&lt;xsl:apply-\n// templates /&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;productid&quot;&gt;&lt;td xmlns=&quot;\n// &quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;descripti\n// on&quot;&gt;&lt;td xmlns=&quot;&quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform\n// &gt;&lt;/Transform&gt;\n// Algorithm used: System.Security.Cryptography.Xml.XmlDsigXsltTransform\n// Transform accepts the following inputs:\n// System.IO.Stream\n// System.Xml.XmlDocument\n// System.Xml.XmlNodeList\n// Transform outputs in the following types:\n// System.IO.Stream\n// \n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        Dim productsXml As XmlDocument = LoadProducts()\n        Dim xsltNodeList As XmlNodeList = GetXsltAsNodeList()\n        TransformDoc(productsXml, xsltNodeList)\n\n        &#39; Use XmlDsigXsltTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        &#39; Align interface and conclude application.\n        WriteLine(vbCrLf + &quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n\n        &#39; Reset the cursor.\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Create an XML document describing various products.\n    Private Function LoadProducts() As XmlDocument\n        Dim contosoProducts As String = &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;\n        contosoProducts += &quot;&lt;products&gt;&quot;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&quot;\n        contosoProducts += &quot;&lt;description&gt;Widgets&lt;/description&gt;&lt;/product&gt;&quot;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&quot;\n        contosoProducts += &quot;&lt;description&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&quot;\n        contosoProducts += &quot;&lt;/products&gt;&quot;\n\n        WriteLine(vbCrLf + _\n            &quot;Created the following Xml document for tranformation:&quot;)\n        WriteLine(contosoProducts)\n\n        Dim xmlDoc As New XmlDocument\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n    End Function\n\n    Private Function GetXsltAsNodeList() As XmlNodeList\n        Dim transformXml As String = &quot;&lt;xsl:transform version=&#39;1.0&#39; &quot;\n        transformXml += &quot;xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39;&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;products&#39;&gt;&quot;\n        transformXml += &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;product&#39;&gt;&lt;tr&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;productid&#39;&gt;&lt;td&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;description&#39;&gt;&lt;td&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;/xsl:transform&gt;&quot;\n\n        WriteLine(vbCrLf + &quot;Created the following Xslt tranform:&quot;)\n        WriteLine(transformXml)\n\n        Dim xmlDoc As New XmlDocument\n        xmlDoc.LoadXml(transformXml)\n        Return xmlDoc.GetElementsByTagName(&quot;xsl:transform&quot;)\n    End Function\n\n    Private Sub TransformDoc( _\n        ByVal xmlDoc As XmlDocument, _\n        ByVal xsltNodeList As XmlNodeList)\n\n        Try\n            &#39; Construct a new XmlDsigXsltTransform.\n            Dim xmlTransform As New XmlDsigXsltTransform\n\n            &#39; Load the Xslt tranform as a node list.\n            xmlTransform.LoadInnerXml(xsltNodeList)\n\n            &#39; Load the Xml document to perform the tranform on.\n            dim namespaceManager as New XmlNamespaceManager(xmlDoc.NameTable)\n\n            Dim productsNodeList As XmlNodeList\n            productsNodeList = xmlDoc.SelectNodes(&quot;//.&quot;, namespaceManager)\n\n            xmlTransform.LoadInput(productsNodeList)\n\n            &#39; Retrieve the output from the transform.\n            Dim outputStream As Stream\n            outputStream = CType(xmlTransform.GetOutput( _\n                GetType(System.IO.Stream)), _\n                System.IO.Stream)\n\n            &#39; Read the output stream into a stream reader.\n            Dim streamReader As New StreamReader(outputStream)\n\n            &#39; Read the stream into a string.\n            Dim outputMessage As String = streamReader.ReadToEnd()\n\n            &#39; Close the streams.\n            outputStream.Close()\n            streamReader.Close()\n\n            &#39; Display to the console the Xml before and after encryption.\n            WriteLine(vbCrLf + &quot;Result of transformation: &quot; + outputMessage)\n            ShowTransformProperties(xmlTransform)\n        Catch ex As Exception\n            WriteLine(&quot;Caught exception in TransformDoc method: &quot; + _\n                ex.ToString())\n        End Try\n    End Sub\n\n    Private Sub ShowTransformProperties( _\n            ByVal xmlTransform As XmlDsigXsltTransform)\n\n        Dim classDescription As String = xmlTransform.ToString()\n        WriteLine(vbCrLf + &quot;** Summary for &quot; + classDescription + &quot; **&quot;)\n\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n        WriteLine(&quot;Xml representation of the current transform:&quot; + _\n            vbCrLf + xmlInTransform.OuterXml)\n\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = SignedXml.XmlDsigXsltTransformUrl\n        Console.WriteLine(&quot;Algorithm used: &quot; + classDescription)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes() As Type = xmlTransform.InputTypes\n        WriteLine(&quot;Transform accepts the following inputs:&quot;)\n        For i As Int16 = 0 To validInTypes.Length - 1 Step 1\n            WriteLine(&quot;   &quot; + validInTypes(i).ToString())\n        Next\n\n        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n        WriteLine(&quot;Transform outputs in the following types:&quot;)\n        For j As Int16 = 0 To validOutTypes.Length - 1 Step 1\n\n            WriteLine(&quot;   &quot; + validOutTypes(j).ToString())\n            If (validOutTypes(j).Equals(GetType(Object))) Then\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If\n        Next\n    End Sub\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Function ResolveUris( _\n        ByVal baseUri As Uri, _\n        ByVal relativeUri As String) As Uri\n\n        Dim xmlResolver As New XmlUrlResolver\n        xmlResolver.Credentials = _\n            System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigXsltTransform\n        xmlTransform.Resolver = xmlResolver\n\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n        If (Not absoluteUri Is Nothing) Then\n            WriteLine(vbCrLf + _\n                &quot;Resolved the base Uri and relative Uri to the following:&quot;)\n            WriteLine(absoluteUri.ToString())\n        Else\n            WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n        \n        Return absoluteUri\n    End Function\n\n    &#39; Write specified message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;XmlDsigXsltTransform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39; \n&#39; Created the following Xml document for tranformation:\n&#39; &lt;?xml version=&#39;1.0&#39;?&gt;&lt;products&gt;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&lt;description\n&#39; &gt;Widgets&lt;/description&gt;&lt;/product&gt;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&lt;descriptio\n&#39; n&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&lt;/products&gt;\n&#39; \n&#39; Created the following Xslt tranform:\n&#39; &lt;xsl:transform version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform\n&#39; &#39;&gt;&lt;xsl:template match=&#39;products&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;\n&#39; /tr&gt;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;produc\n&#39; t&#39;&gt;&lt;tr&gt;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;produc\n&#39; tid&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;desc\n&#39; ription&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;\n&#39; \n&#39; Result of transformation: &lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;tr\n&#39; &gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Widgets&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gadgits&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n&#39; \n&#39; ** Summary for System.Security.Cryptography.Xml.XmlDsigXsltTransform **\n&#39; Xml representation of the current transform:\n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot; xmlns=&quot;ht\n&#39; tp://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;xsl:transform version=&quot;1.0&quot; xmlns:xsl=&quot;ht\n&#39; tp://www.w3.org/1999/XSL/Transform&quot;&gt;&lt;xsl:template match=&quot;products&quot;&gt;&lt;table xm\n&#39; lns=&quot;&quot;&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;xsl:apply-templates /&gt;&lt;/tabl\n&#39; e&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;product&quot;&gt;&lt;tr xmlns=&quot;&quot;&gt;&lt;xsl:apply-templ\n&#39; ates /&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;productid&quot;&gt;&lt;td xmlns=&quot;&quot;&gt;&lt;xsl\n&#39; :apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;description&quot;&gt;&lt;td\n&#39;  xmlns=&quot;&quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;&lt;/Trans\n&#39; form&gt;\n&#39; Transform accepts the following inputs:\n&#39;    System.IO.Stream\n&#39;    System.Xml.XmlDocument\n&#39;    System.Xml.XmlNodeList\n&#39; Transform outputs in the following types:\n&#39;    System.IO.Stream\n&#39; \n&#39; Resolved the base Uri and relative Uri to the following:\n&#39; http://www.contoso.com/xml\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_XmlLicenseTransformUrl\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">XmlLicenseTransformUrl</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Uniform Resource Identifier (URI) for the license transform algorithm used to normalize XrML licenses for signatures.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public const string XmlLicenseTransformUrl;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The value of the XmlLicenseTransformUrl field is &quot;urn:mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform&quot;  </p>\n<p> Use this field to conveniently supply a value to one of the URI attributes of an element used for XMLDSIG.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class implements the transform described by the XmlLicenseTransformUrl field.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_EncryptedXml\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_EncryptedXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EncryptedXml</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a> object that defines the XML encryption processing rules.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Xml.EncryptedXml EncryptedXml { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a> object that defines the XML encryption processing rules.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_KeyInfo\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_KeyInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">KeyInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The KeyInfo property represents the &lt;<code>KeyInfo</code>&gt; element of an XML digital signature using a <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object contained within the property.  The &lt;<code>KeyInfo</code>&gt; element is a subelement of the &lt;<code>Signature</code>&gt; element.  </p>\n<p> Use the KeyInfo property to embed key-related information intended to help identify the key necessary for validating an XML document.  </p>\n<p> For more information about the <code>&lt;KeyInfo&gt;</code> element, see the XMLDSIG specification, which is available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object when signing a resource represented by a Universal Resource Identifier (URI).  This example saves the signature in a new file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n    // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\t\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXMl object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\nClass XMLDSIGDetached\n\n   \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As RSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the key to the SignedXml object.\n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXMl object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function\nEnd Class \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the key to the SignedXml object.\n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n\n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXMl object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n\n[STAThread]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file.\n      bool result = VerifyDetachedSignature( XmlFileName );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><p> The following code example uses the <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object when signing an XML document.  This example saves the signature in a new file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\t\t\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String]) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using white spaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_Resolver\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_Resolver_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Resolver</div>        \r\n          </div>\r\n    \r\n            <p>Sets the current <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlResolver Resolver { set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a></div>\r\n                  </div>\r\n                  <p>The current <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> object. The defaults is a <a class=\"xref\" href=\"system.xml.xmlsecureresolver\" data-linktype=\"relative-path\">XmlSecureResolver</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> class resolves external XML resources named by a Uniform Resource Identifier (URI). If you do not trust the source of the XML file, you might not want to allow the XML file to access computer resources named by the URI. You can use the Resolver property to control the level of access that XML files have to computer resources by specifying different <a class=\"xref\" href=\"system.xml.xmlresolver\" data-linktype=\"relative-path\">XmlResolver</a> objects. If you do not want to allow any access, you can set this property to <code>null</code> (<code>Nothing</code> in Visual Basic).</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SafeCanonicalizationMethods\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SafeCanonicalizationMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SafeCanonicalizationMethods</div>        \r\n          </div>\r\n    \r\n            <p>[Supported in the .NET Framework 4.5.1 and later versions]  </p>\n<p> Gets the names of methods whose canonicalization algorithms are explicitly allowed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.ObjectModel.Collection&lt;string&gt; SafeCanonicalizationMethods { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </div>\r\n                  <p>A collection of the names of methods that safely produce canonical XML.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Canonicalization methods convert an XML document to its canonical form. For more information about canonical XML, see <a href=\"http://www.w3.org/TR/xml-c14n\" data-linktype=\"external\">Canonical XML</a> on the W3C website.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_Signature\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_Signature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Signature</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Xml.Signature Signature { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Signature property represents the &lt;<code>Signature</code>&gt; element of an XML digital signature using a <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object contained within the property.  The &lt;<code>Signature</code>&gt; element is the root element used for XML digital signature creation and verification.  </p>\n<p> Use the Signature property to retrieve the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object used by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.  </p>\n<p> For more information about the <code>&lt;Signature&gt;</code> element, see the XMLDSIG specification, which is available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Signature property to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.  Pass &quot;&quot; \n        // to specify that all of the current XML\n        // document should be signed.\n        Reference reference = new Reference(&quot;&quot;);\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.Signature - Envelope#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.  Pass &quot;&quot; \n        &#39; to specify that all of the current XML\n        &#39; document should be signed.\n        Dim reference As New Reference(&quot;&quot;)\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Get the signature object from the SignedXml object.\n   Signature^ XMLSignature = signedXml-&gt;Signature;\n   \n   // Create a reference to be signed.  Pass &quot;&quot; \n   // to specify that all of the current XML\n   // document should be signed.\n   Reference^ reference = gcnew Reference( L&quot;&quot; );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the Reference object to the Signature object.\n   XMLSignature-&gt;SignedInfo-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   \n   // Add the KeyInfo object to the Reference object.\n   XMLSignature-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><p> The following code example uses the Signature property to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n\nnamespace Sample\n{\n    public ref class SignVerifyEnvelope\n    {\n    public:\n        static void Work()\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider^ key = \n                gcnew RSACryptoServiceProvider();\n\n            try\n            {\n\n                // Sign the detached resource and save the \n                // signature in an XML file.\n                SignDetachedResource(&quot;http://www.microsoft.com&quot;,\n                    &quot;SignedExample.xml&quot;, key);\n\n                Console::WriteLine(&quot;XML file signed.&quot;);\n\n                // Verify the signature of the signed XML.\n                Console::WriteLine(&quot;Verifying signature...&quot;);\n\n                bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n                // Display the results of the signature verification \n                // to the console.\n                if (result)\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is valid.&quot;);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is not valid.&quot;);\n                }\n                Console::ReadLine();\n            }\n\n            catch (CryptographicException^ ex)\n            {\n                Console::WriteLine(ex-&gt;Message);\n            }\n            finally\n            {\n                // Clear resources associated with the \n                // RSACryptoServiceProvider.\n                key-&gt;Clear();\n            }\n        }\n\n\n        // Sign an XML file and save the signature in a new file.\n        static void SignDetachedResource(String^ uri, \n            String^ xmlFileName, RSA^ key)\n        {\n            // Check the arguments.  \n            if (uri-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;uri&quot;);\n            }\n            if (xmlFileName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;xmlFileName&quot;);\n            } \n            if (key-&gt;KeySize == 0)\n            {\n                throw gcnew ArgumentException(&quot;key&quot;);\n            }\n            // Create a SignedXml object.\n            SignedXml^ signedXml = gcnew SignedXml();\n\n            // Assign the key to the SignedXml object.\n            signedXml-&gt;SigningKey = key;\n\n            // Get the signature object from the SignedXml object.\n            Signature^ xmlSignature = signedXml-&gt;Signature;\n\n            // Create a reference to be signed.\n            Reference^ reference = gcnew Reference();\n\n            // Add the passed URI to the reference object.\n            reference-&gt;Uri = uri;\n\n            // Add the Reference object to the Signature object.\n            xmlSignature-&gt;SignedInfo-&gt;AddReference(reference);\n\n            // Add an RSAKeyValue KeyInfo (optional; helps recipient\n            // find key to validate).\n            KeyInfo^ keyInfo = gcnew KeyInfo();\n            keyInfo-&gt;AddClause(\n                gcnew RSAKeyValue(key));\n\n            // Add the KeyInfo object to the Reference object.\n            xmlSignature-&gt;KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml-&gt;ComputeSignature();\n\n            // Get the XML representation of the signature and save\n            // it to an XmlElement object.\n            XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n\n            // Save the signed XML document to a file specified\n            // using the passed string.\n            XmlTextWriter^ xmlTextWriter = gcnew XmlTextWriter(\n                xmlFileName, gcnew UTF8Encoding(false));\n\n            xmlDigitalSignature-&gt;WriteTo(xmlTextWriter);\n            xmlTextWriter-&gt;Close();\n        }\n\n\n        // Verify the signature of an XML file and return the result.\n        static Boolean VerifyXmlFile(String^ documentName)\n        {\n            // Check the arguments.  \n            if (documentName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;documentName&quot;);\n            }\n            // Create a new XML document.\n            XmlDocument^ xmlDocument = gcnew XmlDocument();\n\n            // Format using white spaces.\n            xmlDocument-&gt;PreserveWhitespace = true;\n\n            // Load the passed XML file into the document. \n            xmlDocument-&gt;Load(documentName);\n\n            // Create a new SignedXml object and pass it\n            // the XML document class.\n            SignedXml^ signedXml = gcnew SignedXml(xmlDocument);\n\n            // Find the &quot;Signature&quot; node and create a new\n            // XmlNodeList object.\n            XmlNodeList^ nodeList = \n                xmlDocument-&gt;GetElementsByTagName(&quot;Signature&quot;);\n\n            // Load the signature node.\n            signedXml-&gt;LoadXml(\n                (XmlElement^) nodeList-&gt;Item(0));\n\n            // Check the signature and return the result.\n            return signedXml-&gt;CheckSignature();\n        }\n    };\n}\n\n\nint main()\n{\n    Sample::SignVerifyEnvelope::Work();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign the detached resource and save the signature in an XML file.\n           SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key);\n\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \\\n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (URIString == null)\n            throw new ArgumentNullException(&quot;URIString&quot;);\n        if (XmlSigFileName == null)\n            throw new ArgumentNullException(&quot;XmlSigFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG - Signature - Detached#1\">&#39; This example signs a URL using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign the detached resource and save the signature in an XML file.\n            SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key)\n\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignDetachedResource(ByVal URIString As String, ByVal XmlSigFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If URIString Is Nothing Then\n            Throw New ArgumentNullException(&quot;URIString&quot;)\n        End If\n        If XmlSigFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;XmlSigFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n\n        &#39; Add the passed URI to the reference object.\n        reference.Uri = URIString\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n        xmlDigitalSignature.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SignatureFormatValidator\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SignatureFormatValidator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureFormatValidator</div>        \r\n          </div>\r\n    \r\n            <p>Gets a delegate that will be called to validate the format (not the cryptographic security) of an XML signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Func&lt;System.Security.Cryptography.Xml.SignedXml,bool&gt; SignatureFormatValidator { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func</a>&lt;<a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a>,<a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a>&gt;</div>\r\n                  </div>\r\n                  <p><code>true</code> if the format is acceptable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to ensure that only certain transforms are used, or that the signature uses a certain hash algorithm, and so on.  </p>\n<p> Setting the property to <code>null</code> removes all signature format validation from the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.  </p>\n<p> You can also read the object&#39;s current delegate and chain to it if you want.  </p>\n<p> If you are setting up a format validator, the delegate you supply will receive as an input parameter the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object being verified and returns a Boolean value â€“ <code>true</code> if the format is acceptable, <code>false</code> if it is not. If the delegate returns <code>false</code> for any reason, the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object will report that the XML signature is not valid.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SignatureLength\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SignatureLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureLength</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the signature for the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SignatureLength { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The length of the signature for the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SignatureMethod\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SignatureMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the signature method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SignatureMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The signature method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SignatureMethod property represents the &lt;<code>SignatureMethod</code>&gt; element of an XML digital signature using a Uniform Resource Identifier (URI) string contained within the property. The &lt;<code>SignatureMethod</code>&gt; element is a subelement of the &lt;<code>SignedInfo</code>&gt; element.  </p>\n<p> Use the SignatureMethod property to retrieve the &lt;<code>SignatureMethod</code>&gt; URI used by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object. This property is read only. For more information about programmatically specifying a URI for the &lt;<code>SignatureMethod</code>&gt; element, see the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo#System_Security_Cryptography_Xml_SignedInfo_SignatureMethod_\" data-linktype=\"relative-path\">SignatureMethod</a> property.  </p>\n<p> For more information about the <code>&lt;SignatureMethod&gt;</code> element, see the XMLDSIG specification, which is available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SignatureValue\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SignatureValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignatureValue</div>        \r\n          </div>\r\n    \r\n            <p>Gets the signature value of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] SignatureValue { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array that contains the signature value of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SignatureValue property represents the &lt;<code>SignatureValue</code>&gt; element of an XML digital signature using an array of bytes contained within the property.  The &lt;<code>SignatureValue</code>&gt; element is a subelement of the &lt;<code>Signature&gt;</code> element.  </p>\n<p> Use the SignatureValue property to retrieve the value of the XML digital signature.  This property is automatically populated when you make a successful call to the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_ComputeSignature_\" data-linktype=\"relative-path\">ComputeSignature</a> method.  </p>\n<p> For more information about the <code>&lt;SignatureValue&gt;</code> element, see the XMLDSIG specification, which is available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SignedInfo\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SignedInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SignedInfo</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> object of the current <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SignedInfo property represents the &lt;<code>SignedInfo</code>&gt; element of an XML digital signature using an array of bytes contained within the property.  The &lt;<code>SignedInfo</code>&gt; element is a subelement of the &lt;<code>Signature&gt;</code> element.  </p>\n<p> Use the SignedInfo property to retrieve the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> object that is used by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object to create an XML digital signature.  </p>\n<p> For more information about the <code>&lt;SignedInfo&gt;</code> element, see the XMLDSIG specification, which is available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SigningKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SigningKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SigningKey</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the asymmetric algorithm key used for signing a <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Cryptography.AsymmetricAlgorithm SigningKey { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>The asymmetric algorithm key used for signing the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the SigningKey property to specify the asymmetric key you want to use to create an XML digital signature.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n           // Generate a signing key.\n           RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n           // Create an XML file to sign.\n           CreateSomeXml(&quot;Example.xml&quot;);\n           Console.WriteLine(&quot;New XML file created.&quot;); \n\n           // Sign the XML that was just created and save it in a \n           // new file.\n           SignXmlFile(&quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;); \n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key);\n\n           // Display the results of the signature verification to \n           // the console.\n           if(result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n\n    // Sign an XML file and save the signature in a new file. This method does not  \n    // save the public key within the XML file.  This file cannot be verified unless  \n    // the verifying code has the key with which it was signed.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Load the passed XML file using its name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyXmlFile(String Name, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file. This method does not  \n// save the public key within the XML file.  This file cannot be verified unless  \n// the verifying code has the key with which it was signed.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file against an asymmetric \n// algorithm and return the result.\nBoolean VerifyXmlFile( String^ Name, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument Object*.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot;, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file. This method does not  \n   &#39; save the public key within the XML file.  This file cannot be verified unless  \n   &#39; the verifying code has the key with which it was signed.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Load the passed XML file using its name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub\n   \n   \n   &#39; Verify the signature of an XML file against an asymetric \n   &#39; algorithm and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String], Key As RSA) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \n   \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre><p> The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file. This method does not  \n// save the public key within the XML file.  This file cannot be verified unless  \n// the verifying code has the key with which it was signed.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the key to the SignedXml object.\n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file against an asymetric \n// algorithm and return the result.\nstatic Boolean VerifyDetachedSignature( String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passedXML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList[ 0 ]) );\n   \n   // Check the signature against the passed asymetric key\n   // and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\nint main()\n{\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file against the key.\n      bool result = VerifyDetachedSignature( XmlFileName, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\n\nClass XMLDSIGDetached\n   \n \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file against the key.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file. This method does not  \n   &#39; save the public key within the XML file.  This file cannot be verified unless  \n   &#39; the verifying code has the key with which it was signed.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As RSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the key to the SignedXml object.\n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n    \n   \n   &#39; Verify the signature of an XML file against an asymetric \n   &#39; algorithm and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String, Key As RSA) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passedXML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature against the passed asymetric key\n      &#39; and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file against the key.\n            bool result = VerifyDetachedSignature(XmlFileName, Key);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file. This method does not  \n    // save the public key within the XML file.  This file cannot be verified unless  \n    // the verifying code has the key with which it was signed.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName, RSA Key)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passedXML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature against the passed asymetric key\n        // and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n}\n</code></pre><p> The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, array&lt;String^&gt;^ElementsToSign )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   if ( ElementsToSign == nullptr )\n      throw gcnew ArgumentNullException( L&quot;ElementsToSign&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Loop through each passed element to sign \n   // and create a reference.\n   System::Collections::IEnumerator^ myEnum = ElementsToSign-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      \n      // Create a reference to be signed.\n      Reference^ reference = gcnew Reference;\n      reference-&gt;Uri = s;\n      \n      // Add an enveloped transformation to the reference.\n      XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n      reference-&gt;AddTransform( env );\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n   }\n\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Specify an element to sign. \n      array&lt;String^&gt;^elements = {L&quot;#tag1&quot;};\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key, elements );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n           // Specify an element to sign. \n           string[] elements =  { &quot;#tag1&quot; };\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string[] ElementsToSign)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n        if (ElementsToSign == null)\n            throw new ArgumentNullException(&quot;ElementsToSign&quot;);\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Loop through each passed element to sign \n        // and create a reference.\n        foreach (string s in ElementsToSign)\n        {\n            // Create a reference to be signed.\n            Reference reference = new Reference();\n            reference.Uri = s;\n\n            // Add an enveloped transformation to the reference.\n            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n            reference.AddTransform(env);\n\n            // Add the reference to the SignedXml object.\n            signedXml.AddReference(reference);\n\n        }\n\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Specify an element to sign. \n            Dim elements As String() = New String() {&quot;#tag1&quot;}\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal ElementsToSign() As String)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If ElementsToSign Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementsToSign&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Loop through each passed element to sign \n        &#39; and create a reference.\n        Dim s As String\n        For Each s In ElementsToSign\n            &#39; Create a reference to be signed.\n            Dim reference As New Reference()\n            reference.Uri = s\n\n            &#39; Add an enveloped transformation to the reference.\n            Dim env As New XmlDsigEnvelopedSignatureTransform()\n            reference.AddTransform(env)\n\n            &#39; Add the reference to the SignedXml object.\n            signedXml.AddReference(reference)\n        Next s\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_SigningKeyName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_SigningKeyName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SigningKeyName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the installed key to be used for signing the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string SigningKeyName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the installed key to be used for signing the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_AddObject_System_Security_Cryptography_Xml_DataObject_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_AddObject_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddObject(DataObject)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object to the list of objects to be signed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataObject</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object to add to the list of objects to be signed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddObject method adds an &lt;<code>Object</code>&gt; element that represents an object to be signed to the &lt;<code>Signature</code>&gt; element of an XML digital signature.  </p>\n<p> The AddObject method internally calls the <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_AddObject_\" data-linktype=\"relative-path\">AddObject</a> method of the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object encapsulated by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.  You can also add a <a class=\"xref\" href=\"system.security.cryptography.xml.dataobject\" data-linktype=\"relative-path\">DataObject</a> object by directly calling the <a class=\"xref\" href=\"system.security.cryptography.xml.signature#System_Security_Cryptography_Xml_Signature_AddObject_\" data-linktype=\"relative-path\">AddObject</a> method from the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_Signature_\" data-linktype=\"relative-path\">Signature</a> property.  </p>\n<p> For more information about XML digital signatures, see the XMLDSIG specification available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example computes and XML signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Xml;\n\n\npublic class XMLdsigsample1 \n{\n\n    static void Main(String[] args)\n    {\n        try\n        {\n            // Create example data to sign.\n            XmlDocument document = new XmlDocument();\n            XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n            node.InnerText = &quot;This is some text&quot;;\n            document.AppendChild(node);\n            Console.WriteLine(&quot;Data to sign:<br>&quot; + document.OuterXml + &quot;<br>&quot;);\n \n            // Create the SignedXml message.\n            SignedXml signedXml = new SignedXml();\n            RSA key = RSA.Create();\n            signedXml.SigningKey = key;\n \n            // Create a data object to hold the data to sign.\n            DataObject dataObject = new DataObject();\n            dataObject.Data = document.ChildNodes;\n            dataObject.Id = &quot;MyObjectId&quot;;\n\n            // Add the data object to the signature.\n            signedXml.AddObject(dataObject);\n \n            // Create a reference to be able to package everything into the\n            // message.\n            Reference reference = new Reference();\n            reference.Uri = &quot;#MyObjectId&quot;;\n \n            // Add the reference to the message.\n            signedXml.AddReference(reference);\n\n            // Add a KeyInfo.\n            KeyInfo keyInfo = new KeyInfo();\n            keyInfo.AddClause(new RSAKeyValue(key));\n            signedXml.KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml.ComputeSignature();\n\n            Console.WriteLine(&quot;The data was signed.&quot;);\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1\">// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ RSAKey )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the RSA key to the SignedXml document. \n   signedXml-&gt;SigningKey = RSAKey;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add a transformation to the reference.\n   Transform^ trns = gcnew XmlDsigC14NTransform;\n   reference-&gt;AddTransform( trns );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(RSAKey) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate an RSA signing key.\n      RSACryptoServiceProvider^ RSAKey = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, RSAKey );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Xml\n\n\n\n\nPublic Class XMLdsigsample1\n   \n   \n   Overloads Shared Sub Main(args() As [String])\n      Try\n         &#39; Create example data to sign.\n         Dim document As New XmlDocument()\n         Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n         node.InnerText = &quot;This is some text&quot;\n         document.AppendChild(node)\n         Console.WriteLine((&quot;Data to sign:&quot; + ControlChars.Lf + document.OuterXml + ControlChars.Lf))\n         \n         &#39; Create the SignedXml message.\n         Dim signedXml As New SignedXml()\n         Dim key As RSA = RSA.Create()\n         signedXml.SigningKey = key\n         \n         &#39; Create a data object to hold the data to sign.\n         Dim dataObject As New DataObject()\n         dataObject.Data = document.ChildNodes\n         dataObject.Id = &quot;MyObjectId&quot;\n         \n         &#39; Add the data object to the signature.\n         signedXml.AddObject(dataObject)\n         \n         &#39; Create a reference to be able to package everything into the\n         &#39; message.\n         Dim reference As New Reference()\n         reference.Uri = &quot;#MyObjectId&quot;\n         \n         &#39; Add the reference to the message.\n         signedXml.AddReference(reference)\n         \n         &#39; Add a KeyInfo.\n         Dim keyInfo As New KeyInfo()\n         keyInfo.AddClause(New RSAKeyValue(key))\n         signedXml.KeyInfo = keyInfo\n         \n         &#39; Compute the signature.\n         signedXml.ComputeSignature()\n         \n         Console.WriteLine(&quot;The data was signed.&quot;)\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_AddReference_System_Security_Cryptography_Xml_Reference_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_AddReference_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddReference(Reference)</div>        \r\n          </div>\r\n    \r\n            <p>Adds a <a class=\"xref\" href=\"system.security.cryptography.xml.reference\" data-linktype=\"relative-path\">Reference</a> object to the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void AddReference (System.Security.Cryptography.Xml.Reference reference);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>reference</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.reference\" data-linktype=\"relative-path\">Reference</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The  <a class=\"xref\" href=\"system.security.cryptography.xml.reference\" data-linktype=\"relative-path\">Reference</a> object that describes a digest method, digest value, and transform to use for creating an XML digital signature.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The AddReference method adds a &lt;<code>Reference</code>&gt; element to the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object that describes a digest method, digest value, and transform to use for creating an XML digital signature.  The &lt;<code>Reference</code>&gt; element is a subelement of the &lt;<code>SignedInfo</code>&gt; element.  </p>\n<p> The AddReference method internally calls the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo#System_Security_Cryptography_Xml_SignedInfo_AddReference_\" data-linktype=\"relative-path\">AddReference</a> method of the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo\" data-linktype=\"relative-path\">SignedInfo</a> object encapsulated by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.  You can also add a <a class=\"xref\" href=\"system.security.cryptography.xml.reference\" data-linktype=\"relative-path\">Reference</a> object by directly calling the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo#System_Security_Cryptography_Xml_SignedInfo_AddReference_\" data-linktype=\"relative-path\">AddReference</a> method from the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SignedInfo_\" data-linktype=\"relative-path\">SignedInfo</a> property.  </p>\n<p> For more information about XML digital signatures, see the XMLDSIG specification available at www.w3.org/TR/xmldsig-core/.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.  Pass &quot;&quot; \n        // to specify that all of the current XML\n        // document should be signed.\n        Reference reference = new Reference(&quot;&quot;);\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.Signature - Envelope#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.  Pass &quot;&quot; \n        &#39; to specify that all of the current XML\n        &#39; document should be signed.\n        Dim reference As New Reference(&quot;&quot;)\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.Signature - Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Get the signature object from the SignedXml object.\n   Signature^ XMLSignature = signedXml-&gt;Signature;\n   \n   // Create a reference to be signed.  Pass &quot;&quot; \n   // to specify that all of the current XML\n   // document should be signed.\n   Reference^ reference = gcnew Reference( L&quot;&quot; );\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the Reference object to the Signature object.\n   XMLSignature-&gt;SignedInfo-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   \n   // Add the KeyInfo object to the Reference object.\n   XMLSignature-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><p> The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n\nnamespace Sample\n{\n    public ref class SignVerifyEnvelope\n    {\n    public:\n        static void Work()\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider^ key = \n                gcnew RSACryptoServiceProvider();\n\n            try\n            {\n\n                // Sign the detached resource and save the \n                // signature in an XML file.\n                SignDetachedResource(&quot;http://www.microsoft.com&quot;,\n                    &quot;SignedExample.xml&quot;, key);\n\n                Console::WriteLine(&quot;XML file signed.&quot;);\n\n                // Verify the signature of the signed XML.\n                Console::WriteLine(&quot;Verifying signature...&quot;);\n\n                bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n                // Display the results of the signature verification \n                // to the console.\n                if (result)\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is valid.&quot;);\n                }\n                else\n                {\n                    Console::WriteLine(&quot;The XML signature&quot;\n                        &quot; is not valid.&quot;);\n                }\n                Console::ReadLine();\n            }\n\n            catch (CryptographicException^ ex)\n            {\n                Console::WriteLine(ex-&gt;Message);\n            }\n            finally\n            {\n                // Clear resources associated with the \n                // RSACryptoServiceProvider.\n                key-&gt;Clear();\n            }\n        }\n\n\n        // Sign an XML file and save the signature in a new file.\n        static void SignDetachedResource(String^ uri, \n            String^ xmlFileName, RSA^ key)\n        {\n            // Check the arguments.  \n            if (uri-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;uri&quot;);\n            }\n            if (xmlFileName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;xmlFileName&quot;);\n            } \n            if (key-&gt;KeySize == 0)\n            {\n                throw gcnew ArgumentException(&quot;key&quot;);\n            }\n            // Create a SignedXml object.\n            SignedXml^ signedXml = gcnew SignedXml();\n\n            // Assign the key to the SignedXml object.\n            signedXml-&gt;SigningKey = key;\n\n            // Get the signature object from the SignedXml object.\n            Signature^ xmlSignature = signedXml-&gt;Signature;\n\n            // Create a reference to be signed.\n            Reference^ reference = gcnew Reference();\n\n            // Add the passed URI to the reference object.\n            reference-&gt;Uri = uri;\n\n            // Add the Reference object to the Signature object.\n            xmlSignature-&gt;SignedInfo-&gt;AddReference(reference);\n\n            // Add an RSAKeyValue KeyInfo (optional; helps recipient\n            // find key to validate).\n            KeyInfo^ keyInfo = gcnew KeyInfo();\n            keyInfo-&gt;AddClause(\n                gcnew RSAKeyValue(key));\n\n            // Add the KeyInfo object to the Reference object.\n            xmlSignature-&gt;KeyInfo = keyInfo;\n\n            // Compute the signature.\n            signedXml-&gt;ComputeSignature();\n\n            // Get the XML representation of the signature and save\n            // it to an XmlElement object.\n            XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n\n            // Save the signed XML document to a file specified\n            // using the passed string.\n            XmlTextWriter^ xmlTextWriter = gcnew XmlTextWriter(\n                xmlFileName, gcnew UTF8Encoding(false));\n\n            xmlDigitalSignature-&gt;WriteTo(xmlTextWriter);\n            xmlTextWriter-&gt;Close();\n        }\n\n\n        // Verify the signature of an XML file and return the result.\n        static Boolean VerifyXmlFile(String^ documentName)\n        {\n            // Check the arguments.  \n            if (documentName-&gt;Length == 0)\n            {\n                throw gcnew ArgumentException(&quot;documentName&quot;);\n            }\n            // Create a new XML document.\n            XmlDocument^ xmlDocument = gcnew XmlDocument();\n\n            // Format using white spaces.\n            xmlDocument-&gt;PreserveWhitespace = true;\n\n            // Load the passed XML file into the document. \n            xmlDocument-&gt;Load(documentName);\n\n            // Create a new SignedXml object and pass it\n            // the XML document class.\n            SignedXml^ signedXml = gcnew SignedXml(xmlDocument);\n\n            // Find the &quot;Signature&quot; node and create a new\n            // XmlNodeList object.\n            XmlNodeList^ nodeList = \n                xmlDocument-&gt;GetElementsByTagName(&quot;Signature&quot;);\n\n            // Load the signature node.\n            signedXml-&gt;LoadXml(\n                (XmlElement^) nodeList-&gt;Item(0));\n\n            // Check the signature and return the result.\n            return signedXml-&gt;CheckSignature();\n        }\n    };\n}\n\n\nint main()\n{\n    Sample::SignVerifyEnvelope::Work();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"XMLDSIG - Signature - Detached#1\">//\n// This example signs a URL using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n\n           // Sign the detached resource and save the signature in an XML file.\n           SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key);\n\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \\\n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Check the arguments.  \n        if (URIString == null)\n            throw new ArgumentNullException(&quot;URIString&quot;);\n        if (XmlSigFileName == null)\n            throw new ArgumentNullException(&quot;XmlSigFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Get the signature object from the SignedXml object.\n        Signature XMLSignature = signedXml.Signature;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\n        // Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n\n        // Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XMLDSIG - Signature - Detached#1\">&#39; This example signs a URL using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n\n            &#39; Sign the detached resource and save the signature in an XML file.\n            SignDetachedResource(&quot;http://www.microsoft.com&quot;, &quot;SignedExample.xml&quot;, Key)\n\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignDetachedResource(ByVal URIString As String, ByVal XmlSigFileName As String, ByVal Key As RSA)\n        &#39; Check the arguments.  \n        If URIString Is Nothing Then\n            Throw New ArgumentNullException(&quot;URIString&quot;)\n        End If\n        If XmlSigFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;XmlSigFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key\n\n        &#39; Get the signature object from the SignedXml object.\n        Dim XMLSignature As Signature = signedXml.Signature\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n\n        &#39; Add the passed URI to the reference object.\n        reference.Uri = URIString\n\n        &#39; Add the Reference object to the Signature object.\n        XMLSignature.SignedInfo.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n\n        &#39; Add the KeyInfo object to the Reference object.\n        XMLSignature.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n        xmlDigitalSignature.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre><p> The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, array&lt;String^&gt;^ElementsToSign )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   if ( ElementsToSign == nullptr )\n      throw gcnew ArgumentNullException( L&quot;ElementsToSign&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Loop through each passed element to sign \n   // and create a reference.\n   System::Collections::IEnumerator^ myEnum = ElementsToSign-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      \n      // Create a reference to be signed.\n      Reference^ reference = gcnew Reference;\n      reference-&gt;Uri = s;\n      \n      // Add an enveloped transformation to the reference.\n      XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n      reference-&gt;AddTransform( env );\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n   }\n\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Specify an element to sign. \n      array&lt;String^&gt;^elements = {L&quot;#tag1&quot;};\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key, elements );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n           // Specify an element to sign. \n           string[] elements =  { &quot;#tag1&quot; };\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string[] ElementsToSign)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n        if (ElementsToSign == null)\n            throw new ArgumentNullException(&quot;ElementsToSign&quot;);\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Loop through each passed element to sign \n        // and create a reference.\n        foreach (string s in ElementsToSign)\n        {\n            // Create a reference to be signed.\n            Reference reference = new Reference();\n            reference.Uri = s;\n\n            // Add an enveloped transformation to the reference.\n            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n            reference.AddTransform(env);\n\n            // Add the reference to the SignedXml object.\n            signedXml.AddReference(reference);\n\n        }\n\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Specify an element to sign. \n            Dim elements As String() = New String() {&quot;#tag1&quot;}\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal ElementsToSign() As String)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If ElementsToSign Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementsToSign&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Loop through each passed element to sign \n        &#39; and create a reference.\n        Dim s As String\n        For Each s In ElementsToSign\n            &#39; Create a reference to be signed.\n            Dim reference As New Reference()\n            reference.Uri = s\n\n            &#39; Add an enveloped transformation to the reference.\n            Dim env As New XmlDsigEnvelopedSignatureTransform()\n            reference.AddTransform(env)\n\n            &#39; Add the reference to the SignedXml object.\n            signedXml.AddReference(reference)\n        Next s\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckSignature()</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies using the public key in the signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckSignature ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*</span> property of the public key in the signature does not match the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignatureMethod*</span> property.  </p>\n<p> -or-  </p>\n<p> The signature description could not be created.  </p>\n<p> -or  </p>\n<p> The hash algorithm could not be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method also computes the digest of the references and the value of the signature.  </p>\n<p> If an XML document was signed with an X.509 signature, the CheckSignature method will search the &quot;AddressBook&quot; store for certificates suitable for the verification. For example, if the certificate is referenced by a Subject Key Identifier (SKI), the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_CheckSignature_\" data-linktype=\"relative-path\">CheckSignature</a> method will select certificates with this SKI and try them one after another until it can verify the certificate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n           // Generate a signing key.\n           RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n           // Create an XML file to sign.\n           CreateSomeXml(&quot;Example.xml&quot;);\n           Console.WriteLine(&quot;New XML file created.&quot;); \n\n           // Sign the XML that was just created and save it in a \n           // new file.\n           SignXmlFile(&quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;); \n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key);\n\n           // Display the results of the signature verification to \n           // the console.\n           if(result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n\n    // Sign an XML file and save the signature in a new file. This method does not  \n    // save the public key within the XML file.  This file cannot be verified unless  \n    // the verifying code has the key with which it was signed.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Load the passed XML file using its name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyXmlFile(String Name, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file. This method does not  \n// save the public key within the XML file.  This file cannot be verified unless  \n// the verifying code has the key with which it was signed.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file against an asymmetric \n// algorithm and return the result.\nBoolean VerifyXmlFile( String^ Name, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument Object*.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot;, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file. This method does not  \n   &#39; save the public key within the XML file.  This file cannot be verified unless  \n   &#39; the verifying code has the key with which it was signed.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Load the passed XML file using its name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub\n   \n   \n   &#39; Verify the signature of an XML file against an asymetric \n   &#39; algorithm and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String], Key As RSA) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \n   \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre><p> The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file. This method does not  \n// save the public key within the XML file.  This file cannot be verified unless  \n// the verifying code has the key with which it was signed.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the key to the SignedXml object.\n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file against an asymetric \n// algorithm and return the result.\nstatic Boolean VerifyDetachedSignature( String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passedXML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList[ 0 ]) );\n   \n   // Check the signature against the passed asymetric key\n   // and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\nint main()\n{\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file against the key.\n      bool result = VerifyDetachedSignature( XmlFileName, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\n\nClass XMLDSIGDetached\n   \n \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file against the key.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file. This method does not  \n   &#39; save the public key within the XML file.  This file cannot be verified unless  \n   &#39; the verifying code has the key with which it was signed.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As RSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the key to the SignedXml object.\n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n    \n   \n   &#39; Verify the signature of an XML file against an asymetric \n   &#39; algorithm and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String, Key As RSA) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passedXML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature against the passed asymetric key\n      &#39; and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file against the key.\n            bool result = VerifyDetachedSignature(XmlFileName, Key);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file. This method does not  \n    // save the public key within the XML file.  This file cannot be verified unless  \n    // the verifying code has the key with which it was signed.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName, RSA Key)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passedXML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature against the passed asymetric key\n        // and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n}\n</code></pre><p> The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, array&lt;String^&gt;^ElementsToSign )\n{\n   \n   // Check the arguments.  \n   if ( FileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;FileName&quot; );\n\n   if ( SignedFileName == nullptr )\n      throw gcnew ArgumentNullException( L&quot;SignedFileName&quot; );\n\n   if ( Key == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Key&quot; );\n\n   if ( ElementsToSign == nullptr )\n      throw gcnew ArgumentNullException( L&quot;ElementsToSign&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Loop through each passed element to sign \n   // and create a reference.\n   System::Collections::IEnumerator^ myEnum = ElementsToSign-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      String^ s = safe_cast&lt;String^&gt;(myEnum-&gt;Current);\n      \n      // Create a reference to be signed.\n      Reference^ reference = gcnew Reference;\n      reference-&gt;Uri = s;\n      \n      // Add an enveloped transformation to the reference.\n      XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n      reference-&gt;AddTransform( env );\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n   }\n\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( dynamic_cast&lt;XmlDeclaration^&gt;(doc-&gt;FirstChild) )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Check the arguments.  \n   if ( Name == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Name&quot; );\n\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   try\n   {\n      \n      // Specify an element to sign. \n      array&lt;String^&gt;^elements = {L&quot;#tag1&quot;};\n      \n      // Sign an XML file and save the signature to a \n      // new file.\n      SignXmlFile( L&quot;Test.xml&quot;, L&quot;SignedExample.xml&quot;, Key, elements );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      \n      // Clear resources associated with the \n      // RSACryptoServiceProvider.\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n       RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n       try\n       {\n           // Specify an element to sign. \n           string[] elements =  { &quot;#tag1&quot; };\n\n           // Sign an XML file and save the signature to a \n           // new file.\n           SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements);\n           Console.WriteLine(&quot;XML file signed.&quot;);\n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n           // Display the results of the signature verification to \n           // the console.\n           if (result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n               Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n       }\n       catch (CryptographicException e)\n       {\n           Console.WriteLine(e.Message);\n       }\n       finally\n       {\n           // Clear resources associated with the \n           // RSACryptoServiceProvider.\n           Key.Clear();\n       }\n   }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string[] ElementsToSign)\n    {\n        // Check the arguments.  \n        if (FileName == null)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (SignedFileName == null)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (Key == null)\n            throw new ArgumentNullException(&quot;Key&quot;);\n        if (ElementsToSign == null)\n            throw new ArgumentNullException(&quot;ElementsToSign&quot;);\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Loop through each passed element to sign \n        // and create a reference.\n        foreach (string s in ElementsToSign)\n        {\n            // Create a reference to be signed.\n            Reference reference = new Reference();\n            reference.Uri = s;\n\n            // Add an enveloped transformation to the reference.\n            XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n            reference.AddTransform(env);\n\n            // Add the reference to the SignedXml object.\n            signedXml.AddReference(reference);\n\n        }\n\n\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Check the arguments.  \n        if (Name == null)\n            throw new ArgumentNullException(&quot;Name&quot;);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.SignVerifyEnvelope - Specify Element#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Try\n            &#39; Specify an element to sign. \n            Dim elements As String() = New String() {&quot;#tag1&quot;}\n\n            &#39; Sign an XML file and save the signature to a \n            &#39; new file.\n            SignXmlFile(&quot;Test.xml&quot;, &quot;SignedExample.xml&quot;, Key, elements)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear resources associated with the \n            &#39; RSACryptoServiceProvider.\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal ElementsToSign() As String)\n        &#39; Check the arguments.  \n        If FileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If SignedFileName Is Nothing Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Key Is Nothing Then\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n        If ElementsToSign Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementsToSign&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Loop through each passed element to sign \n        &#39; and create a reference.\n        Dim s As String\n        For Each s In ElementsToSign\n            &#39; Create a reference to be signed.\n            Dim reference As New Reference()\n            reference.Uri = s\n\n            &#39; Add an enveloped transformation to the reference.\n            Dim env As New XmlDsigEnvelopedSignatureTransform()\n            reference.AddTransform(env)\n\n            &#39; Add the reference to the SignedXml object.\n            signedXml.AddReference(reference)\n        Next s\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Check the arguments.  \n        If Name Is Nothing Then\n            Throw New ArgumentNullException(&quot;Name&quot;)\n        End If\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_AsymmetricAlgorithm_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckSignature(AsymmetricAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckSignature (System.Security.Cryptography.AsymmetricAlgorithm key);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The implementation of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> property that holds the key to be used to verify the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified key; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>key</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*</span> property of the <code>key</code> parameter does not match the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignatureMethod*</span> property.  </p>\n<p> -or-  </p>\n<p> The signature description could not be created.  </p>\n<p> -or  </p>\n<p> The hash algorithm could not be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file. This method does not  \n// save the public key within the XML file.  This file cannot be verified unless  \n// the verifying code has the key with which it was signed.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the key to the SignedXml object.\n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file against an asymetric \n// algorithm and return the result.\nstatic Boolean VerifyDetachedSignature( String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passedXML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList[ 0 ]) );\n   \n   // Check the signature against the passed asymetric key\n   // and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\nint main()\n{\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file against the key.\n      bool result = VerifyDetachedSignature( XmlFileName, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\n\nClass XMLDSIGDetached\n   \n \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file against the key.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file. This method does not  \n   &#39; save the public key within the XML file.  This file cannot be verified unless  \n   &#39; the verifying code has the key with which it was signed.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As RSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the key to the SignedXml object.\n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n    \n   \n   &#39; Verify the signature of an XML file against an asymetric \n   &#39; algorithm and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String, Key As RSA) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passedXML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature against the passed asymetric key\n      &#39; and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML Signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file against the key.\n            bool result = VerifyDetachedSignature(XmlFileName, Key);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file. This method does not  \n    // save the public key within the XML file.  This file cannot be verified unless  \n    // the verifying code has the key with which it was signed.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName, RSA Key)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passedXML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature against the passed asymetric key\n        // and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n}\n</code></pre><p> The following code example shows how to sign and verify an entire XML document using an enveloped signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n           // Generate a signing key.\n           RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n           // Create an XML file to sign.\n           CreateSomeXml(&quot;Example.xml&quot;);\n           Console.WriteLine(&quot;New XML file created.&quot;); \n\n           // Sign the XML that was just created and save it in a \n           // new file.\n           SignXmlFile(&quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key);\n           Console.WriteLine(&quot;XML file signed.&quot;); \n\n           // Verify the signature of the signed XML.\n           Console.WriteLine(&quot;Verifying signature...&quot;);\n           bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key);\n\n           // Display the results of the signature verification to \n           // the console.\n           if(result)\n           {\n               Console.WriteLine(&quot;The XML signature is valid.&quot;);\n           }\n           else\n           {\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n           }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n\n    // Sign an XML file and save the signature in a new file. This method does not  \n    // save the public key within the XML file.  This file cannot be verified unless  \n    // the verifying code has the key with which it was signed.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Load the passed XML file using its name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyXmlFile(String Name, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file. This method does not  \n// save the public key within the XML file.  This file cannot be verified unless  \n// the verifying code has the key with which it was signed.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file against an asymmetric \n// algorithm and return the result.\nBoolean VerifyXmlFile( String^ Name, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument Object*.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot;, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;signedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file. This method does not  \n   &#39; save the public key within the XML file.  This file cannot be verified unless  \n   &#39; the verifying code has the key with which it was signed.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Load the passed XML file using its name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub\n   \n   \n   &#39; Verify the signature of an XML file against an asymetric \n   &#39; algorithm and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String], Key As RSA) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \n   \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_KeyedHashAlgorithm_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckSignature(KeyedHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified message authentication code (MAC) algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>macAlg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The implementation of <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> that holds the MAC to be used to verify the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified MAC; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>macAlg</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.HashAlgorithm.HashSize*</span> property of the specified <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> object is not valid.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The cryptographic transform used to check the signature could not be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        try\n        {\n            // The URI to sign.\n            string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n            // The name of the file to which to save the XML signature.\n            string XmlFileName = &quot;xmlsig.xml&quot;;\n\n            // Generate a signing key.\n            HMACSHA1 Key = new HMACSHA1();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName, Key);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\t\t\n\t\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, KeyedHashAlgorithm Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature(Key);\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n\n    }\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName, KeyedHashAlgorithm Key)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passedXML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\nClass XMLDSIGDetached\n   \n \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      Try\n         &#39; The URI to sign.\n         Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n         \n         &#39; The name of the file to which to save the XML signature.\n         Dim XmlFileName As String = &quot;xmlsig.xml&quot;\n         \n         &#39; Generate a signing key.\n         Dim Key As New HMACSHA1()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n    \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As KeyedHashAlgorithm)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature(Key)\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n    \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String, Key As KeyedHashAlgorithm) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passedXML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \nEnd Class \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature( Key );\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passedXML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\nint main()\n{\n   try\n   {\n      \n      // The URI to sign.\n      String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n      \n      // The name of the file to which to save the XML signature.\n      String^ XmlFileName = &quot;xmlsig.xml&quot;;\n      \n      // Generate a signing key.\n      HMACSHA1^ Key = gcnew HMACSHA1;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file.\n      bool result = VerifyDetachedSignature( XmlFileName, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><p> The following code example shows how to sign and verify an entire XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n\n            // Generate a signing key.\n            HMACSHA1 Key = new HMACSHA1();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying Signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, KeyedHashAlgorithm Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXML object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature(Key);\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name, KeyedHashAlgorithm Key)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using whitespaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXMl object and pass it\n        // the XMl document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the filename specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n\t\t\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXML object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature( Key );\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using whitespaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXMl object and pass it\n   // the XMl document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the filename specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      HMACSHA1^ Key = gcnew HMACSHA1;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying Signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot;, Key );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New HMACSHA1()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying Signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As KeyedHashAlgorithm)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXML object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature(Key)\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub\n   \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String], Key As KeyedHashAlgorithm) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using whitespaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXMl object and pass it\n      &#39; the XMl document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function\n   \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the filename specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_X509Certificates_X509Certificate2_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckSignature(X509Certificate2,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies for the specified <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object and, optionally, whether the certificate is valid.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>certificate</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object to use to verify the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>verifySignatureOnly</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to verify the signature only; <code>false</code> to verify both the signature and certificate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the signature is valid; otherwise, <code>false</code>.  </p>\n<p> -or-  </p>\n<p> <code>true</code> if the signature and certificate are valid; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>certificate</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>A signature description could not be created for the <code>certificate</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In version 1.1 of the .NET Framework, the X.509 certificate is not verified.  In version 2.0 and later, the X.509 certificate is verified.  </p>\n<p> In version 2.0 and later of the .NET Framework, the CheckSignature method will search the &quot;AddressBook&quot; store for certificates suitable for the verification. For example, if the certificate is referenced by a Subject Key Identifier (SKI), the CheckSignature method will select certificates with this SKI and try them one after another until it can verify the certificate.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses an X.509 certificate from a certificate store to sign and verify an XML document.  </p>\n<pre><code class=\"lang-vb\" name=\"Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\n&#39; You must have a certificate with a subject name\n&#39; of &quot;CN=XMLDSIG_Test&quot; in the &quot;My&quot; certificate store. \n&#39;\n&#39; Run the following command to create a certificate\n&#39; and place it in the store.\n&#39; makecert -r -pe -n &quot;CN=XMLDSIG_Test&quot; -b 01/01/2005 -e 01/01/2010 -sky signing -ss my\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Security.Cryptography.X509Certificates\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n\n        Dim Certificate As String = &quot;CN=XMLDSIG_Test&quot;\n\n        Try\n\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Certificate)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            If VerifyXmlFile(&quot;SignedExample.xml&quot;, Certificate) Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal SubjectName As String)\n        If Nothing = FileName Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If Nothing = SignedFileName Then\n            Throw New ArgumentNullException(&quot;SignedFileName&quot;)\n        End If\n        If Nothing = SubjectName Then\n            Throw New ArgumentNullException(&quot;SubjectName&quot;)\n        End If\n        &#39; Load the certificate from the certificate store.\n        Dim cert As X509Certificate2 = GetCertificateBySubject(SubjectName)\n\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = cert.PrivateKey\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        &#39; Create a new KeyInfo object.\n        Dim keyInfo As New KeyInfo()\n\n        &#39; Load the certificate into a KeyInfoX509Data object\n        &#39; and add it to the KeyInfo object.\n        keyInfo.AddClause(New KeyInfoX509Data(cert))\n\n        &#39; Add the KeyInfo object to the SignedXml object.\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n\n        If TypeOf doc.FirstChild Is XmlDeclaration Then\n            doc.RemoveChild(doc.FirstChild)\n        End If\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        Try\n            doc.WriteTo(xmltw)\n\n        Finally\n            xmltw.Close()\n        End Try\n\n    End Sub\n\n    &#39; Verify the signature of an XML file against an asymetric \n    &#39; algorithm and return the result.\n    Function VerifyXmlFile(ByVal FileName As String, ByVal CertificateSubject As String) As [Boolean]\n        &#39; Check the args.\n        If Nothing = FileName Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        If Nothing = CertificateSubject Then\n            Throw New ArgumentNullException(&quot;CertificateSubject&quot;)\n        End If\n        &#39; Load the certificate from the store.\n        Dim cert As X509Certificate2 = GetCertificateBySubject(CertificateSubject)\n\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(FileName)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature(cert, True)\n\n    End Function\n\n\n\n    Function GetCertificateBySubject(ByVal CertificateSubject As String) As X509Certificate2\n        &#39; Check the args.\n        If Nothing = CertificateSubject Then\n            Throw New ArgumentNullException(&quot;CertificateSubject&quot;)\n        End If\n\n        &#39; Load the certificate from the certificate store.\n        Dim cert As X509Certificate2 = Nothing\n\n        Dim store As New X509Store(&quot;My&quot;, StoreLocation.CurrentUser)\n\n        Try\n            &#39; Open the store.\n            store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n            &#39; Get the certs from the store.\n            Dim CertCol As X509Certificate2Collection = store.Certificates\n\n            &#39; Find the certificate with the specified subject.\n            Dim c As X509Certificate2\n            For Each c In CertCol\n                If c.Subject = CertificateSubject Then\n                    cert = c\n                    Exit For\n                End If\n            Next c\n\n            &#39; Throw an exception of the certificate was not found.\n            If cert Is Nothing Then\n                Throw New CryptographicException(&quot;The certificate could not be found.&quot;)\n            End If\n        Finally\n            &#39; Close the store even if an exception was thrown.\n            store.Close()\n        End Try\n\n        Return cert\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Check the args.\n        If Nothing = FileName Then\n            Throw New ArgumentNullException(&quot;FileName&quot;)\n        End If\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n\n        &#39; Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        Try\n            document.WriteTo(xmltw)\n\n        Finally\n            xmltw.Close()\n        End Try\n\n    End Sub\nEnd Module\n&#39; This code example displays the following to the console:\n&#39;\n&#39; New XML file created.\n&#39; XML file signed.\n&#39; The XML signature is valid.\n</code></pre><pre><code class=\"lang-cs\" name=\"Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n// You must have a certificate with a subject name\n// of &quot;CN=XMLDSIG_Test&quot; in the &quot;My&quot; certificate store. \n//\n// Run the following command to create a certificate\n// and place it in the store.\n// makecert -r -pe -n &quot;CN=XMLDSIG_Test&quot; -b 01/01/2005 -e 01/01/2010 -sky signing -ss my\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n\n        string Certificate = &quot;CN=XMLDSIG_Test&quot;;\n\n        try\n        {\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Certificate);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            if (VerifyXmlFile(&quot;SignedExample.xml&quot;, Certificate))\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, string SubjectName)\n    {\n        if (null == FileName)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (null == SignedFileName)\n            throw new ArgumentNullException(&quot;SignedFileName&quot;);\n        if (null == SubjectName)\n            throw new ArgumentNullException(&quot;SubjectName&quot;);\n\n        // Load the certificate from the certificate store.\n        X509Certificate2 cert = GetCertificateBySubject(SubjectName);\n\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = cert.PrivateKey;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Create a new KeyInfo object.\n        KeyInfo keyInfo = new KeyInfo();\n\n        // Load the certificate into a KeyInfoX509Data object\n        // and add it to the KeyInfo object.\n        keyInfo.AddClause(new KeyInfoX509Data(cert));\n\n        // Add the KeyInfo object to the SignedXml object.\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n\n        if (doc.FirstChild is XmlDeclaration)\n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        using (XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false)))\n        {\n            doc.WriteTo(xmltw);\n            xmltw.Close();\n        }\n\n    }\n\n    // Verify the signature of an XML file against an asymetric \n    // algorithm and return the result.\n    public static Boolean VerifyXmlFile(String FileName, String CertificateSubject)\n    {\n        // Check the args.\n        if (null == FileName)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n        if (null == CertificateSubject)\n            throw new ArgumentNullException(&quot;CertificateSubject&quot;);\n\n        // Load the certificate from the store.\n        X509Certificate2 cert = GetCertificateBySubject(CertificateSubject);\n\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(FileName);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(cert, true);\n\n    }\n\n\n    public static X509Certificate2 GetCertificateBySubject(string CertificateSubject)\n    {\n        // Check the args.\n        if (null == CertificateSubject)\n            throw new ArgumentNullException(&quot;CertificateSubject&quot;);\n\n\n        // Load the certificate from the certificate store.\n        X509Certificate2 cert = null;\n\n        X509Store store = new X509Store(&quot;My&quot;, StoreLocation.CurrentUser);\n\n        try\n        {\n            // Open the store.\n            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n            // Get the certs from the store.\n            X509Certificate2Collection CertCol = store.Certificates;\n\n            // Find the certificate with the specified subject.\n            foreach (X509Certificate2 c in CertCol)\n            {\n                if (c.Subject == CertificateSubject)\n                {\n                    cert = c;\n                    break;\n                }\n            }\n\n            // Throw an exception of the certificate was not found.\n            if (cert == null)\n            {\n                throw new CryptographicException(&quot;The certificate could not be found.&quot;);\n            }\n        }\n        finally\n        {\n            // Close the store even if an exception was thrown.\n            store.Close();\n        }\n        \n        return cert;\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Check the args.\n        if (null == FileName)\n            throw new ArgumentNullException(&quot;FileName&quot;);\n\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        using (XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false)))\n        {\n            document.WriteTo(xmltw);\n\n            xmltw.Close();\n        }\n    }\n}\n// This code example displays the following to the console:\n//\n// New XML file created.\n// XML file signed.\n// The XML signature is valid.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignatureReturningKey_System_Security_Cryptography_AsymmetricAlgorithm__\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_CheckSignatureReturningKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CheckSignatureReturningKey(AsymmetricAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies using the public key in the signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool CheckSignatureReturningKey (out System.Security.Cryptography.AsymmetricAlgorithm signingKey);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>signingKey</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the implementation of <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> that holds the public key in the signature. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property verifies using the public key in the signature; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>signingKey</code> parameter is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*</span> property of the public key in the signature does not match the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignatureMethod*</span> property.  </p>\n<p> -or-  </p>\n<p> The signature description could not be created.  </p>\n<p> -or  </p>\n<p> The hash algorithm could not be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Net;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, DSA^ DSAKey )\n{\n\n\t// Create a SignedXml Object*.\n\tSignedXml^ signedXml = gcnew SignedXml;\n\n\t// Assign the DSA key to the SignedXml object.\n\tsignedXml-&gt;SigningKey = DSAKey;\n\n\t// Create a reference to be signed.\n\tReference^ reference = gcnew Reference;\n\n\t// Add the passed URI to the reference object.\n\treference-&gt;Uri = URIString;\n\n\t// Add the reference to the SignedXml object.\n\tsignedXml-&gt;AddReference( reference );\n\n\t// Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n\tKeyInfo^ keyInfo = gcnew KeyInfo;\n\tkeyInfo-&gt;AddClause( gcnew DSAKeyValue( safe_cast&lt;DSA^&gt;(DSAKey) ) );\n\tsignedXml-&gt;KeyInfo = keyInfo;\n\n\t// Compute the signature.\n\tsignedXml-&gt;ComputeSignature();\n\n\t// Get the XML representation of the signature and save\n\t// it to an XmlElement object.\n\tXmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n\n\t// Save the signed XML document to a file specified\n\t// using the passed string.\n\tXmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n\txmlDigitalSignature-&gt;WriteTo( xmltw );\n\txmltw-&gt;Close();\n\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName )\n{\n\n\t// Create a new XML document.\n\tXmlDocument^ xmlDocument = gcnew XmlDocument;\n\n\t// Load the passed XML file into the document.\n\txmlDocument-&gt;Load( XmlSigFileName );\n\n\t// Create a new SignedXMl object.\n\tSignedXml^ signedXml = gcnew SignedXml;\n\n\t// Find the &quot;Signature&quot; node and create a new\n\t// XmlNodeList object.\n\tXmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n\n\t// Load the signature node.\n\tsignedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n\n\t// Check the signature and return the result.\n\treturn signedXml-&gt;CheckSignature();\n}\n\n\nint main()\n{\n\t// Create a request for the URL.   \n\tWebRequest^ request = WebRequest::Create( &quot;http://www.contoso.com/default.html&quot; );\n\n\t// If required by the server, set the credentials.\n\trequest-&gt;Credentials = CredentialCache::DefaultCredentials;\n\n\t// Get the response.\n\tHttpWebResponse^ response = dynamic_cast&lt;HttpWebResponse^&gt;(request-&gt;GetResponse());\n\n\t// Display the status.\n\tConsole::WriteLine( response-&gt;StatusDescription );\n\n\t// Get the stream containing content returned by the server.\n\tStream^ dataStream = response-&gt;GetResponseStream();\n\n\t// Open the stream using a StreamReader for easy access.\n\tStreamReader^ reader = gcnew StreamReader( dataStream );\n\n\t// Read the content.\n\tString^ responseFromServer = reader-&gt;ReadToEnd();\n\n\tStreamWriter^ sw = File::CreateText( &quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\mscom.htm&quot; );\n\tsw-&gt;Write(responseFromServer);\n\tsw-&gt;Close();\n\t// The URI to sign.\n\n\tString^ resourceToSign = &quot;file://C:/temp/mscom.htm&quot;;\n\n\t// The name of the file to which to save the XML signature.\n\tString^ XmlFileName = &quot;xmldsig.xml&quot;;\n\ttry\n\t{\n\n\t\t// Generate a DSA signing key.\n\t\tDSACryptoServiceProvider^ DSAKey = gcnew DSACryptoServiceProvider;\n\t\tConsole::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n\n\t\t// Sign the detached resourceand save the signature in an XML file.\n\t\tSignDetachedResource( resourceToSign, XmlFileName, DSAKey );\n\t\tConsole::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n\n\t\t// Verify the signature of the signed XML.\n\t\tConsole::WriteLine( &quot;Verifying signature...&quot; );\n\n\t\t//Verify the XML signature in the XML file.\n\t\tbool result = VerifyDetachedSignature( XmlFileName );\n\n\t\t// Display the results of the signature verification to \n\t\t// the console.\n\t\tif ( result )\n\t\t{\n\t\t\tConsole::WriteLine( &quot;The XML signature is valid.&quot; );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tConsole::WriteLine( &quot;The XML signature is not valid.&quot; );\n\t\t}\n\t}\n\tcatch ( CryptographicException^ e ) \n\t{\n\t\tConsole::WriteLine( e-&gt;Message );\n\t}\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.IO;\nusing System.Net;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        WebRequest request = WebRequest.Create(&quot;http://www.microsoft.com&quot;);\n        // If required by the server, set the credentials.\n        //request.Credentials = CredentialCache.DefaultCredentials;\n        // Get the response.\n        HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n        // Display the status.\n        Console.WriteLine(response.StatusDescription);\n        // Get the stream containing content returned by the server.\n        Stream dataStream = response.GetResponseStream();\n        // Open the stream using a StreamReader for easy access.\n        StreamReader reader = new StreamReader(dataStream);\n        // Read the content.\n        string responseFromServer = reader.ReadToEnd();\n        StreamWriter sw = File.CreateText(&quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\mscom.htm&quot;);\n        sw.Write(responseFromServer);\n        sw.Close();\n        // Cleanup the streams and the response.\n        reader.Close();\n        dataStream.Close();\n        response.Close();\n\n        // The URI to sign.\n        string resourceToSign = &quot;file://C:/temp/mscom.htm&quot;;\n\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a DSA signing key.\n            DSACryptoServiceProvider DSAKey = new DSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, DSAKey);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName);\n\n            // Display the results of the signature verification to \n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, DSA DSAKey)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the DSA key to the SignedXml object.\n        signedXml.SigningKey = DSAKey;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new DSAKeyValue((DSA)DSAKey));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\n        // Create a new SignedXMl object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Net\nImports System.IO\nImports System.Text\nImports System.Xml\n\n\nClass XMLDSIGDetached\n\n\n    &lt;STAThread()&gt; _\n    Overloads Shared Sub Main(ByVal args() As String)\n        Dim request As WebRequest = WebRequest.Create(&quot;http://www.microsoft.com&quot;)\n        &#39; If required by the server, set the credentials.\n        request.Credentials = CredentialCache.DefaultCredentials\n        &#39; Get the response.\n        Dim response As HttpWebResponse = CType(request.GetResponse(), HttpWebResponse)\n        &#39; Display the status.\n        Console.WriteLine(response.StatusDescription)\n        &#39; Get the stream containing content returned by the server.\n        Dim dataStream As Stream = response.GetResponseStream()\n        &#39; Open the stream using a StreamReader for easy access.\n        Dim reader As New StreamReader(dataStream)\n        &#39; Read the content.\n        Dim responseFromServer As String = reader.ReadToEnd()\n        Dim sw As StreamWriter = File.CreateText(&quot;C:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\\\mscom.htm&quot;)\n        sw.Write(responseFromServer)\n        sw.Close()\n\n        &#39; Cleanup the streams and the response.\n        reader.Close()\n        dataStream.Close()\n        response.Close()\n\n        &#39; The URI to sign.\n        Dim resourceToSign As String = &quot;file://C:/temp/mscom.htm&quot;\n\n        &#39; The name of the file to which to save the XML signature.\n        Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n\n        Try\n\n            &#39; Generate a DSA signing key.\n            Dim DSAKey As New DSACryptoServiceProvider()\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n\n            &#39; Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, DSAKey)\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n\n            &#39;Verify the XML signature in the XML file.\n            Dim result As Boolean = VerifyDetachedSignature(XmlFileName)\n\n            &#39; Display the results of the signature verification to \n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub\n\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Public Shared Sub SignDetachedResource(ByVal URIString As String, ByVal XmlSigFileName As String, ByVal DSAKey As DSA)\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Assign the DSA key to the SignedXml object.\n        signedXml.SigningKey = DSAKey\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n\n        &#39; Add the passed URI to the reference object.\n        reference.Uri = URIString\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        &#39; Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New DSAKeyValue(CType(DSAKey, DSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n        xmlDigitalSignature.WriteTo(xmltw)\n        xmltw.Close()\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Public Shared Function VerifyDetachedSignature(ByVal XmlSigFileName As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName)\n\n        &#39; Create a new SignedXMl object.\n        Dim signedXml As New SignedXml()\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n    End Function\nEnd Class\n</code></pre><p> The following code example shows how to sign and verify an entire XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, DSA^ DSAKey )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the DSA key to the SignedXml document. \n   signedXml-&gt;SigningKey = DSAKey;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew DSAKeyValue( safe_cast&lt;DSA^&gt;(DSAKey) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a DSA signing key.\n      DSACryptoServiceProvider^ DSAKey = gcnew DSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, DSAKey );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a DSA signing key.\n            DSACryptoServiceProvider DSAKey = new DSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, DSAKey);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, DSA DSAKey)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the DSA key to the SignedXml document. \n        signedXml.SigningKey = DSAKey;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\t\t\n        // Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new DSAKeyValue((DSA)DSAKey));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a DSA signing key.\n         Dim DSAKey As New DSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, DSAKey)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, DSAKey As DSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the DSA key to the SignedXml document. \n      signedXml.SigningKey = DSAKey\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      \n      &#39; Add a DSAKeyValue to the KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New DSAKeyValue(CType(DSAKey, DSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String]) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using white spaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_ComputeSignature\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_ComputeSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeSignature()</div>        \r\n          </div>\r\n    \r\n            <p>Computes an XML digital signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ComputeSignature ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SigningKey*</span> property is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SigningKey*</span> property is not a <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> object or <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> object.  </p>\n<p> -or-  </p>\n<p> The key could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ComputeSignature method creates an XML digital signature and constructs many of the XML elements needed.  </p>\n<p> You must set the data to be signed and the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SigningKey_\" data-linktype=\"relative-path\">SigningKey</a> property before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n    // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\t\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXMl object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\nClass XMLDSIGDetached\n\n   \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As RSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the key to the SignedXml object.\n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXMl object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function\nEnd Class \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, RSA^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the key to the SignedXml object.\n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n\n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXMl object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n\n[STAThread]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file.\n      bool result = VerifyDetachedSignature( XmlFileName );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><p> The following code example shows how to sign and verify an entire XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\t\t\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String]) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using white spaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_ComputeSignature_System_Security_Cryptography_KeyedHashAlgorithm_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_ComputeSignature_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ComputeSignature(KeyedHashAlgorithm)</div>        \r\n          </div>\r\n    \r\n            <p>Computes an XML digital signature using the specified message authentication code (MAC) algorithm.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ComputeSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>macAlg</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> object that holds the MAC to be used to compute the value of the <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.Signature*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>macAlg</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> object specified by the <code>macAlg</code> parameter is not an instance of <a class=\"xref\" href=\"system.security.cryptography.hmacsha1\" data-linktype=\"relative-path\">HMACSHA1</a>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Security.Cryptography.HashAlgorithm.HashSize*</span> property of the specified <a class=\"xref\" href=\"system.security.cryptography.keyedhashalgorithm\" data-linktype=\"relative-path\">KeyedHashAlgorithm</a> object is not valid.  </p>\n<p> -or-  </p>\n<p> The cryptographic transform used to check the signature could not be created.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ComputeSignature method creates an XML digital signature using the specified MAC algorithm and constructs many of the XML elements needed.  </p>\n<p> You must set the data to be signed before calling this method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        try\n        {\n            // The URI to sign.\n            string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n            // The name of the file to which to save the XML signature.\n            string XmlFileName = &quot;xmlsig.xml&quot;;\n\n            // Generate a signing key.\n            HMACSHA1 Key = new HMACSHA1();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName, Key);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n\t\t\n\t\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, KeyedHashAlgorithm Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature(Key);\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n\n    }\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName, KeyedHashAlgorithm Key)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passedXML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1\">&#39;\n&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\nClass XMLDSIGDetached\n   \n \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      Try\n         &#39; The URI to sign.\n         Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n         \n         &#39; The name of the file to which to save the XML signature.\n         Dim XmlFileName As String = &quot;xmlsig.xml&quot;\n         \n         &#39; Generate a signing key.\n         Dim Key As New HMACSHA1()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName, Key)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n    \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As KeyedHashAlgorithm)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature(Key)\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n    \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String, Key As KeyedHashAlgorithm) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passedXML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function \nEnd Class \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature( Key );\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n   xmlDigitalSignature-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passedXML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\nint main()\n{\n   try\n   {\n      \n      // The URI to sign.\n      String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n      \n      // The name of the file to which to save the XML signature.\n      String^ XmlFileName = &quot;xmlsig.xml&quot;;\n      \n      // Generate a signing key.\n      HMACSHA1^ Key = gcnew HMACSHA1;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file.\n      bool result = VerifyDetachedSignature( XmlFileName, Key );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><p> The following code example shows how to sign and verify an entire XML document using an enveloping signature.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n\n            // Generate a signing key.\n            HMACSHA1 Key = new HMACSHA1();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying Signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, KeyedHashAlgorithm Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXML object.\n        signedXml.AddReference(reference);\n\n        // Compute the signature.\n        signedXml.ComputeSignature(Key);\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name, KeyedHashAlgorithm Key)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using whitespaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXMl object and pass it\n        // the XMl document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature(Key);\n    }\n\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the filename specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n\t\t\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXML object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature( Key );\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name, KeyedHashAlgorithm^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using whitespaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXMl object and pass it\n   // the XMl document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature( Key );\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the filename specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      HMACSHA1^ Key = gcnew HMACSHA1;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying Signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot;, Key );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New HMACSHA1()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying Signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;, Key)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As KeyedHashAlgorithm)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXML object.\n      signedXml.AddReference(reference)\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature(Key)\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub\n   \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String], Key As KeyedHashAlgorithm) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using whitespaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXMl object and pass it\n      &#39; the XMl document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature(Key)\n   End Function\n   \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the filename specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_GetIdElement_System_Xml_XmlDocument_System_String_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_GetIdElement_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetIdElement(XmlDocument,String)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object with the specified ID from the specified <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>document</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object to retrieve the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object from.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>idValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The ID of the <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object to retrieve from the <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object with the specified ID from the specified <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a> object, or <code>null</code> if it could not be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_GetPublicKey\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_GetPublicKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetPublicKey()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public key of a signature.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object that contains the public key of the signature, or <code>null</code> if the key cannot be found.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.KeyInfo*</span> property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GetPublicKey method returns an <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object that contains a public key that can be used to verify an XML digital signature.  </p>\n<p> The key must be either a <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> or an <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> key.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_GetXml\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_GetXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetXml()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML representation of a <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Xml.XmlElement GetXml ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </div>\r\n                  <p>The XML representation of the <a class=\"xref\" href=\"system.security.cryptography.xml.signature\" data-linktype=\"relative-path\">Signature</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignedInfo*</span> property is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignatureValue*</span> property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_Xml_SignedXml_LoadXml_System_Xml_XmlElement_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_Xml_SignedXml_LoadXml_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoadXml(XmlElement)</div>        \r\n          </div>\r\n    \r\n            <p>Loads a <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> state from an XML element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void LoadXml (System.Xml.XmlElement value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The XML element to load the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml\" data-linktype=\"relative-path\">SignedXml</a> state from.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <code>value</code> parameter does not contain a valid <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignatureValue*</span> property.  </p>\n<p> -or-  </p>\n<p> The <code>value</code> parameter does not contain a valid <span class=\"xref\">stem.Security.Cryptography.Xml.SignedXml.SignedInfo*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the LoadXml method to verify an XML document.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#3\">    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXMl object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#3\">   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXMl object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML-XMLDsigDetached#3\">// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXMl object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.SignedXml.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.SignedXml.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.AddObject\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.AddReference\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.CheckSignature\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.ComputeSignature\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.EncryptedXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.GetIdElement\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.GetPublicKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.KeyInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.LoadXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.m_signature\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.Resolver\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.Signature\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SignatureLength\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SignatureMethod\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SignatureValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SignedInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SigningKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.SigningKeyName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"08c18845-d13e-beec-c22d-7b80517e4733\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Cryptography.Xml\\SignedXml.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a wrapper on a core XML signature object to facilitate creating XML signatures.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography.Xml/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.SignedXml\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.Xml.SignedXml.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.Xml.SignedXml.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.Xml.SignedXml","System.Security.Cryptography.Xml.SignedXml..ctor","System.Security.Cryptography.Xml.SignedXml.AddObject","System.Security.Cryptography.Xml.SignedXml.AddReference","System.Security.Cryptography.Xml.SignedXml.CheckSignature","System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey","System.Security.Cryptography.Xml.SignedXml.ComputeSignature","System.Security.Cryptography.Xml.SignedXml.EncryptedXml","System.Security.Cryptography.Xml.SignedXml.GetIdElement","System.Security.Cryptography.Xml.SignedXml.GetPublicKey","System.Security.Cryptography.Xml.SignedXml.GetXml","System.Security.Cryptography.Xml.SignedXml.KeyInfo","System.Security.Cryptography.Xml.SignedXml.LoadXml","System.Security.Cryptography.Xml.SignedXml.m_signature","System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName","System.Security.Cryptography.Xml.SignedXml.Resolver","System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods","System.Security.Cryptography.Xml.SignedXml.Signature","System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator","System.Security.Cryptography.Xml.SignedXml.SignatureLength","System.Security.Cryptography.Xml.SignedXml.SignatureMethod","System.Security.Cryptography.Xml.SignedXml.SignatureValue","System.Security.Cryptography.Xml.SignedXml.SignedInfo","System.Security.Cryptography.Xml.SignedXml.SigningKey","System.Security.Cryptography.Xml.SignedXml.SigningKeyName","System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.SignedXml","System::Security::Cryptography::Xml::SignedXml","System.Security.Cryptography.Xml.SignedXml.#ctor","System::Security::Cryptography::Xml::SignedXml::#ctor","System.Security.Cryptography.Xml.SignedXml.AddObject","System::Security::Cryptography::Xml::SignedXml::AddObject","System.Security.Cryptography.Xml.SignedXml.AddReference","System::Security::Cryptography::Xml::SignedXml::AddReference","System.Security.Cryptography.Xml.SignedXml.CheckSignature","System::Security::Cryptography::Xml::SignedXml::CheckSignature","System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey","System::Security::Cryptography::Xml::SignedXml::CheckSignatureReturningKey","System.Security.Cryptography.Xml.SignedXml.ComputeSignature","System::Security::Cryptography::Xml::SignedXml::ComputeSignature","System.Security.Cryptography.Xml.SignedXml.EncryptedXml","System::Security::Cryptography::Xml::SignedXml::EncryptedXml","System.Security.Cryptography.Xml.SignedXml.GetIdElement","System::Security::Cryptography::Xml::SignedXml::GetIdElement","System.Security.Cryptography.Xml.SignedXml.GetPublicKey","System::Security::Cryptography::Xml::SignedXml::GetPublicKey","System.Security.Cryptography.Xml.SignedXml.GetXml","System::Security::Cryptography::Xml::SignedXml::GetXml","System.Security.Cryptography.Xml.SignedXml.KeyInfo","System::Security::Cryptography::Xml::SignedXml::KeyInfo","System.Security.Cryptography.Xml.SignedXml.LoadXml","System::Security::Cryptography::Xml::SignedXml::LoadXml","System.Security.Cryptography.Xml.SignedXml.m_signature","System::Security::Cryptography::Xml::SignedXml::m_signature","System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName","System::Security::Cryptography::Xml::SignedXml::m_strSigningKeyName","System.Security.Cryptography.Xml.SignedXml.Resolver","System::Security::Cryptography::Xml::SignedXml::Resolver","System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods","System::Security::Cryptography::Xml::SignedXml::SafeCanonicalizationMethods","System.Security.Cryptography.Xml.SignedXml.Signature","System::Security::Cryptography::Xml::SignedXml::Signature","System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator","System::Security::Cryptography::Xml::SignedXml::SignatureFormatValidator","System.Security.Cryptography.Xml.SignedXml.SignatureLength","System::Security::Cryptography::Xml::SignedXml::SignatureLength","System.Security.Cryptography.Xml.SignedXml.SignatureMethod","System::Security::Cryptography::Xml::SignedXml::SignatureMethod","System.Security.Cryptography.Xml.SignedXml.SignatureValue","System::Security::Cryptography::Xml::SignedXml::SignatureValue","System.Security.Cryptography.Xml.SignedXml.SignedInfo","System::Security::Cryptography::Xml::SignedXml::SignedInfo","System.Security.Cryptography.Xml.SignedXml.SigningKey","System::Security::Cryptography::Xml::SignedXml::SigningKey","System.Security.Cryptography.Xml.SignedXml.SigningKeyName","System::Security::Cryptography::Xml::SignedXml::SigningKeyName","System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDecryptionTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigBase64TransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigC14NTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigC14NWithCommentsTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigCanonicalizationUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigCanonicalizationWithCommentsUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigDSAUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigEnvelopedSignatureTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigExcC14NTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigExcC14NWithCommentsTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigHMACSHA1Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigMinimalCanonicalizationUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigNamespaceUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigRSASHA1Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigRSASHA256Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigRSASHA384Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigRSASHA512Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigSHA1Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigSHA256Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigSHA384Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url","System::Security::Cryptography::Xml::SignedXml::XmlDsigSHA512Url","System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigXPathTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlDsigXsltTransformUrl","System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl","System::Security::Cryptography::Xml::SignedXml::XmlLicenseTransformUrl"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"08c18845-d13e-beec-c22d-7b80517e4733","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Security.Cryptography.Xml\\SignedXml.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography.Xml/SignedXml.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SignedXml class | Microsoft Docs","_op_ogTitle":"SignedXml class","description":"Provides a wrapper on a core XML signature object to facilitate creating XML signatures.\n","toc_asset_id":"_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.SignedXml","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.signedxml","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.xml.signedxml","fileRelativePath":"System.Security.Cryptography.Xml.SignedXml.html"},"themesRelativePathToOutputRoot":"_themes/"}