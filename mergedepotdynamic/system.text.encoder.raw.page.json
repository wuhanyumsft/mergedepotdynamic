{"content":"    \r\n    <h1 id=\"System_Text_Encoder\">\r\n      <span class=\"lang-csharp\">Encoder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Converts a set of characters into a sequence of bytes.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class Encoder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Encoder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>To obtain an instance of an implementation of the Encoder class, the application should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method of an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> implementation.  </p>\n<p> The <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding. There are several versions of both of these methods available in the Encoder class. For more information, see <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>.  </p>\n<p> A Encoder object maintains state information between successive calls to <code>GetBytes</code> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> methods so that it can correctly encode character sequences that span blocks. The Encoder also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> and <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When the application is done with a stream of data it should make sure that the state information is flushed by setting the <code>flush</code> parameter to <code>true</code> in the appropriate method call. If an exception occurs or if the application switches streams, it should call <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Reset_\" data-linktype=\"relative-path\">Reset</a> to clear the internal state of the <code>Encoder</code> object.  </p>\n</div>\n<h2 id=\"version-considerations\">Version Considerations</h2>\n<p> A <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or Encoder object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder__ctor\" data-linktype=\"self-bookmark\">Encoder()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_Fallback\" data-linktype=\"self-bookmark\">Fallback</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_FallbackBuffer\" data-linktype=\"self-bookmark\">FallbackBuffer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a> object associated with the current <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_Convert_System_Char__System_Int32_System_Byte__System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\" data-linktype=\"self-bookmark\">Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_Convert_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\" data-linktype=\"self-bookmark\">Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_GetByteCount_System_Char__System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetByteCount(Char*,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_GetByteCount_System_Char___System_Int32_System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetByteCount(Char[],Int32,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetBytes(Char*,Int32,Byte*,Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_System_Boolean_\" data-linktype=\"self-bookmark\">GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Text_Encoder_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, sets the encoder back to its initial state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder__ctor\">\r\n    \r\n            <a id=\"System_Text_Encoder__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Encoder()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected Encoder ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To obtain an instance of an implementation of this class, the application should use the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method of an <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> implementation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates two techniques for initializing a new <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoder.ctor Example#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // An Encoder is obtained from an Encoding.\n   UnicodeEncoding^ uni = gcnew UnicodeEncoding;\n   Encoder^ enc1 = uni-&gt;GetEncoder();\n   \n   // A more direct technique.\n   Encoder^ enc2 = Encoding::Unicode-&gt;GetEncoder();\n   \n   // enc1 and enc2 seem to be the same.\n   Console::WriteLine( enc1 );\n   Console::WriteLine( enc2 );\n   \n   // Note that their hash codes differ.\n   Console::WriteLine( enc1-&gt;GetHashCode() );\n   Console::WriteLine( enc2-&gt;GetHashCode() );\n}\n\n/* This code example produces the following output.\n\nSystem.Text.EncoderNLS\nSystem.Text.EncoderNLS\n54267293\n18643596\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoder.ctor Example#1\">using System;\nusing System.Text;\n\nclass EncoderExample {\n    public static void Main() {\n        // An Encoder is obtained from an Encoding.\n        UnicodeEncoding uni = new UnicodeEncoding();\n        Encoder enc1 = uni.GetEncoder();\n\n        // A more direct technique.\n        Encoder enc2 = Encoding.Unicode.GetEncoder();\n\n        // enc1 and enc2 seem to be the same.\n        Console.WriteLine(enc1.ToString());\n        Console.WriteLine(enc2.ToString());\n\n        // Note that their hash codes differ.\n        Console.WriteLine(enc1.GetHashCode());\n        Console.WriteLine(enc2.GetHashCode());\n    }\n}\n\n/* This code example produces the following output.\n\nSystem.Text.EncoderNLS\nSystem.Text.EncoderNLS\n58225482\n54267293\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoder.ctor Example#1\">Imports System\nImports System.Text\n\nClass EncoderExample\n    \n    Public Shared Sub Main()\n        &#39; An Encoder is obtained from an Encoding.\n        Dim uni As New UnicodeEncoding()\n        Dim enc1 As Encoder = uni.GetEncoder()\n        \n        &#39; A more direct technique.\n        Dim enc2 As Encoder = Encoding.Unicode.GetEncoder()\n        \n        &#39; enc1 and enc2 seem the same.\n        Console.WriteLine(enc1.ToString())\n        Console.WriteLine(enc2.ToString())\n        \n        &#39; Note that their hash codes differ.\n        Console.WriteLine(enc1.GetHashCode())\n        Console.WriteLine(enc2.GetHashCode())\n    End Sub &#39;Main\nEnd Class &#39;EncoderExample\n\n&#39;This code example produces the following output.\n&#39;System.Text.EncoderNLS\n&#39;System.Text.EncoderNLS\n&#39;58225482\n&#39;54267293\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_Fallback\">\r\n    \r\n            <a id=\"System_Text_Encoder_Fallback_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fallback</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object for the current <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.EncoderFallback Fallback { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The value in a set operation is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A new value cannot be assigned in a set operation because the current <a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a> object contains data that has not been encoded yet.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> Fallback is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_FallbackBuffer\">\r\n    \r\n            <a id=\"System_Text_Encoder_FallbackBuffer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FallbackBuffer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a> object associated with the current <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Text.EncoderFallbackBuffer FallbackBuffer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.text.encoderfallbackbuffer\" data-linktype=\"relative-path\">EncoderFallbackBuffer</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The FallbackBuffer object represents data used by the <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object. The <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_Convert_System_Char__System_Int32_System_Byte__System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\">\r\n    \r\n            <a id=\"System_Text_Encoder_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Convert (char* chars, int charCount, byte* bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of a string of UTF-16 encoded characters to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters in <code>chars</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The address of a buffer to store the converted bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes in <code>bytes</code> to use in the conversion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate no further data is to be converted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charsUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytesUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>completed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains <code>true</code> if all the characters specified by <code>charCount</code> were converted; otherwise, <code>false</code>. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> or <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <span class=\"xref\">stem.Text.Encoder.GetByteCount*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object saves state between calls to Convert. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  </p>\n<p> The <code>Convert</code> method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> will throw an exception if the output buffer isn&#39;t large enough, but Convert will fill as much space as possible and return the chars read and bytes written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> topic for more comments.  </p>\n<p> The <code>completed</code> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to <code>false</code> if the number of characters specified by the <code>charCount</code> parameter cannot be converted without exceeding the number of bytes specified by the <code>byteCount</code> parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <code>chars</code> parameter by the number of characters specified by the <code>charsUsed</code> parameter, then call the <code>Convert</code> method again to process the remaining input.  </p>\n<p> The <code>completed</code> parameter can also be set to <code>false</code>, even though the <code>charsUsed</code> and <code>charCount</code> parameters are equal. This situation occurs if there is still data in the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object that has not been stored in the <code>chars</code> buffer.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_Convert_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_System_Int32_System_Boolean_System_Int32__System_Int32__System_Boolean__\">\r\n    \r\n            <a id=\"System_Text_Encoder_Convert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Convert (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array of characters to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first element of <code>chars</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements of <code>chars</code> to convert.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array where the converted bytes are stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first element of <code>bytes</code> in which data is stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of elements of <code>bytes</code> to use in the conversion.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate no further data is to be converted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charsUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytesUsed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>completed</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>When this method returns, contains <code>true</code> if all the characters specified by <code>charCount</code> were converted; otherwise, <code>false</code>. This parameter is passed uninitialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> or <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  </p>\n<p> -or-  </p>\n<p> The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <span class=\"xref\">stem.Text.Encoder.GetByteCount*</span> method.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object saves state between calls to Convert. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  </p>\n<p> The <code>Convert</code> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> will throw an exception if the output buffer isn&#39;t large enough, but Convert will fill as much space as possible and return the chars read and bytes written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> topic for more comments.  </p>\n<p> The <code>completed</code> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to <code>false</code> if the number of characters specified by the <code>charCount</code> parameter cannot be converted without exceeding the number of bytes specified by the <code>byteCount</code> parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <code>chars</code> parameter by the number of characters specified by the <code>charsUsed</code> parameter, then call the <code>Convert</code> method again to process the remaining input.  </p>\n<p> The <code>completed</code> parameter can also be set to <code>false</code>, even though the <code>charsUsed</code> and <code>charCount</code> parameters are equal. This situation occurs if there is still data in the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object that has not been stored in the <code>chars</code> buffer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Convert method to convert a file of UTF-16 characters to UTF-8, then uses the <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method to convert the UTF-8 characters back to UTF-16 characters.  </p>\n<pre><code class=\"lang-vb\" name=\"sys.txt.EncoderDecoder.convert#1\">&#39; This code example demonstrates the Encoder.Convert() and Decoder.Convert methods. \n&#39; This example uses files for input and output, but any source that can be expressed\n&#39; as a stream can be used instead.\n\nImports System\nImports System.Text\nImports System.IO\n\nPublic Class Sample\n    Shared Sub Main(ByVal args() As String) \n        &#39; Create a large file of UTF-16 encoded Unicode characters. The file is named Example.txt, \n        &#39; and is used as input to the Encoder.Convert() method. \n        CreateTestFile(&quot;Example.txt&quot;)\n        \n        \n        &#39; Using an input file of UTF-16 encoded characters named Example.txt, create an output file \n        &#39; of UTF-8 encoded bytes named UTF8.txt.\n        EncoderConvert(&quot;Example.txt&quot;, &quot;UTF8.txt&quot;, Encoding.UTF8)\n        \n        &#39; Using an input file of UTF-8 encoded bytes named UTF8.txt, create an output file \n        &#39; of UTF-16 encoded characters named UTF16.txt.\n        DecoderConvert(&quot;UTF8.txt&quot;, &quot;UTF16.txt&quot;, Encoding.UTF8)\n    \n    End Sub &#39;Main\n    \n    &#39; --------------------------------------------------------------------------------------------\n    &#39; Use the Encoder.Convert() method to convert a file of characters to a file of encoded bytes.\n    &#39; --------------------------------------------------------------------------------------------\n    Shared Sub EncoderConvert(ByVal inputFileName As String, ByVal outputFileName As String, ByVal enc As Encoding) \n        &#39; Convert an input file of characters to an output file of encoded bytes.\n        &#39; StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n        &#39; ourselves.\n        Dim fs As New FileStream(outputFileName, FileMode.Create)\n        Dim outputFile As New BinaryWriter(fs)\n        \n        &#39; StreamReader will detect Unicode encoding from the Byte Order Mark that heads the input file.\n        Dim inputFile As New StreamReader(inputFileName)\n        \n        &#39; Get an Encoder.\n        Dim encoder As Encoder = enc.GetEncoder()\n        \n        &#39; Guarantee the output buffer large enough to convert a few characters.\n        Dim UseBufferSize As Integer = 64\n        If UseBufferSize &lt; enc.GetMaxByteCount(10) Then\n            UseBufferSize = enc.GetMaxByteCount(10)\n        End If\n        Dim bytes(UseBufferSize) As Byte\n        \n        &#39; Intentionally make the input character buffer larger than the output byte buffer so the \n        &#39; conversion loop executes more than one cycle. \n        Dim chars(UseBufferSize * 4) As Char\n        Dim charsRead As Integer\n        Do\n            &#39; Read at most the number of characters that will fit in the input buffer. The return \n            &#39; value is the actual number of characters read, or zero if no characters remain. \n            charsRead = inputFile.Read(chars, 0, UseBufferSize * 4)\n            \n            Dim completed As Boolean = False\n            Dim charIndex As Integer = 0\n            Dim charsUsed As Integer\n            Dim bytesUsed As Integer\n            \n            While Not completed\n                &#39; If this is the last input data, flush the encoder&#39;s internal buffer and state.\n                Dim flush As Boolean = charsRead = 0\n                encoder.Convert(chars, charIndex, charsRead - charIndex, bytes, 0, UseBufferSize, flush, charsUsed, bytesUsed, completed)\n                \n                &#39; The conversion produced the number of bytes indicated by bytesUsed. Write that number\n                &#39; of bytes to the output file.\n                outputFile.Write(bytes, 0, bytesUsed)\n                \n                &#39; Increment charIndex to the next block of characters in the input buffer, if any, to convert.\n                charIndex += charsUsed\n            End While\n        Loop While charsRead &lt;&gt; 0\n        \n        outputFile.Close()\n        fs.Close()\n        inputFile.Close()\n    \n    End Sub &#39;EncoderConvert\n    \n    &#39; --------------------------------------------------------------------------------------------\n    &#39; Use the Decoder.Convert() method to convert a file of encoded bytes to a file of characters.\n    &#39; --------------------------------------------------------------------------------------------\n    Shared Sub DecoderConvert(ByVal inputFileName As String, ByVal outputFileName As String, ByVal enc As Encoding) \n        &#39; Convert an input file of of encoded bytes to an output file characters.\n        &#39; StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n        &#39; ourselves.\n        Dim outputFile As New StreamWriter(outputFileName, False, Encoding.Unicode)\n        \n        &#39; Read the input as a binary file so we can detect the Byte Order Mark.\n        Dim fs As New FileStream(inputFileName, FileMode.Open)\n        Dim inputFile As New BinaryReader(fs)\n        \n        &#39; Get a Decoder.\n        Dim decoder As Decoder = enc.GetDecoder()\n        \n        &#39; Guarantee the output buffer large enough to convert a few characters.\n        Dim UseBufferSize As Integer = 64\n        If UseBufferSize &lt; enc.GetMaxCharCount(10) Then\n            UseBufferSize = enc.GetMaxCharCount(10)\n        End If\n        Dim chars(UseBufferSize) As Char\n        \n        &#39; Intentionally make the input byte buffer larger than the output character buffer so the \n        &#39; conversion loop executes more than one cycle. \n        Dim bytes(UseBufferSize * 4) As Byte\n        Dim bytesRead As Integer\n        Do\n            &#39; Read at most the number of bytes that will fit in the input buffer. The \n            &#39; return value is the actual number of bytes read, or zero if no bytes remain. \n            bytesRead = inputFile.Read(bytes, 0, UseBufferSize * 4)\n            \n            Dim completed As Boolean = False\n            Dim byteIndex As Integer = 0\n            Dim bytesUsed As Integer\n            Dim charsUsed As Integer\n            \n            While Not completed\n                &#39; If this is the last input data, flush the decoder&#39;s internal buffer and state.\n                Dim flush As Boolean = bytesRead = 0\n                decoder.Convert(bytes, byteIndex, bytesRead - byteIndex, chars, 0, UseBufferSize, flush, bytesUsed, charsUsed, completed)\n                \n                &#39; The conversion produced the number of characters indicated by charsUsed. Write that number\n                &#39; of characters to the output file.\n                outputFile.Write(chars, 0, charsUsed)\n                \n                &#39; Increment byteIndex to the next block of bytes in the input buffer, if any, to convert.\n                byteIndex += bytesUsed\n            End While\n        Loop While bytesRead &lt;&gt; 0\n        \n        outputFile.Close()\n        fs.Close()\n        inputFile.Close()\n    \n    End Sub &#39;DecoderConvert\n    \n    &#39; --------------------------------------------------------------------------------------------\n    &#39; Create a large file of UTF-16 encoded Unicode characters. \n    &#39; --------------------------------------------------------------------------------------------\n    Shared Sub CreateTestFile(ByVal FileName As String) \n        &#39; StreamWriter defaults to UTF-8 encoding so explicitly specify Unicode, that is, \n        &#39; UTF-16, encoding.\n        Dim file As New StreamWriter(FileName, False, Encoding.Unicode)\n        \n        &#39; Write a line of text 100 times.\n        Dim i As Integer\n        For i = 0 To 99\n            file.WriteLine(&quot;This is an example input file used by the convert example.&quot;)\n        Next i\n        \n        &#39; Write Unicode characters from U+0000 to, but not including, the surrogate character range.\n        Dim c As Integer\n        For c = 0 To &amp;HD800\n            file.Write(ChrW(c))\n        Next c\n        file.Close()\n    \n    End Sub &#39;CreateTestFile\nEnd Class &#39;Sample\n\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;(Execute the -dir- console window command and examine the files created.)\n&#39;\n&#39;Example.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\n&#39;UTF8.txt, which contains 169,712 UTF-8 encoded bytes.\n&#39;UTF16.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\n&#39;\n&#39;(Execute the -comp- console window command and compare the two Unicode files.)\n&#39;\n&#39;&gt;comp example.txt utf16.txt /L\n&#39;Comparing example.txt and utf16.txt...\n&#39;Files compare OK\n&#39;\n&#39;(The two files are equal.)\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.txt.EncoderDecoder.convert#1\">// This code example demonstrates the Encoder.Convert() and Decoder.Convert methods. \n// This example uses files for input and output, but any source that can be expressed\n// as a stream can be used instead.\n\n    using System;\n    using System.Text;\n    using System.IO;\n\n    public class Sample\n    {\n    static void Main(string[] args)\n        {\n// Create a large file of UTF-16 encoded Unicode characters. The file is named Example.txt, \n// and is used as input to the Encoder.Convert() method. \n\n            CreateTestFile(&quot;Example.txt&quot;);\n\n \n// Using an input file of UTF-16 encoded characters named Example.txt, create an output file \n// of UTF-8 encoded bytes named UTF8.txt.\n\n            EncoderConvert(&quot;Example.txt&quot;, &quot;UTF8.txt&quot;, Encoding.UTF8);\n\n// Using an input file of UTF-8 encoded bytes named UTF8.txt, create an output file \n// of UTF-16 encoded characters named UTF16.txt.\n\n            DecoderConvert(&quot;UTF8.txt&quot;, &quot;UTF16.txt&quot;, Encoding.UTF8);\n        }\n\n// --------------------------------------------------------------------------------------------\n// Use the Encoder.Convert() method to convert a file of characters to a file of encoded bytes.\n// --------------------------------------------------------------------------------------------\n        static void EncoderConvert(String inputFileName, String outputFileName, Encoding enc)\n        {\n// Convert an input file of characters to an output file of encoded bytes.\n// StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n// ourselves.\n\n            FileStream fs = new FileStream(outputFileName, FileMode.Create);\n            BinaryWriter outputFile = new BinaryWriter(fs);\n\n// StreamReader will detect Unicode encoding from the Byte Order Mark that heads the input file.\n            StreamReader inputFile = new StreamReader(inputFileName);\n\n// Get an Encoder.\n            Encoder encoder = enc.GetEncoder();\n            \n// Guarantee the output buffer large enough to convert a few characters.\n            int UseBufferSize = 64;\n            if (UseBufferSize &lt; enc.GetMaxByteCount(10))\n                    UseBufferSize = enc.GetMaxByteCount(10);\n            byte[] bytes = new byte[UseBufferSize];\n\n// Intentionally make the input character buffer larger than the output byte buffer so the \n// conversion loop executes more than one cycle. \n\n            char[] chars = new char[UseBufferSize * 4];\n            int charsRead;\n            do\n            {\n// Read at most the number of characters that will fit in the input buffer. The return \n// value is the actual number of characters read, or zero if no characters remain. \n                charsRead = inputFile.Read(chars, 0, UseBufferSize * 4);\n   \n                bool completed = false;\n                int charIndex = 0;\n                int charsUsed;\n                int bytesUsed;\n\n                while (!completed)\n                {\n// If this is the last input data, flush the encoder&#39;s internal buffer and state.\n\n                    bool flush = (charsRead == 0);\n                    encoder.Convert(chars, charIndex, charsRead - charIndex,\n                                    bytes, 0, UseBufferSize, flush,\n                                    out charsUsed, out bytesUsed, out completed);\n\n// The conversion produced the number of bytes indicated by bytesUsed. Write that number\n// of bytes to the output file.\n                    outputFile.Write(bytes, 0, bytesUsed);\n\n// Increment charIndex to the next block of characters in the input buffer, if any, to convert.\n                    charIndex += charsUsed;\n                }\n            }\n            while(charsRead != 0);\n\n            outputFile.Close();\n            fs.Close();\n            inputFile.Close();\n        }\n\n// --------------------------------------------------------------------------------------------\n// Use the Decoder.Convert() method to convert a file of encoded bytes to a file of characters.\n// --------------------------------------------------------------------------------------------\n        static void DecoderConvert(String inputFileName, String outputFileName, Encoding enc)\n        {\n// Convert an input file of of encoded bytes to an output file characters.\n// StreamWriter could convert the input file for us, but we&#39;ll perform the conversion \n// ourselves.\n\n            StreamWriter outputFile = new StreamWriter(outputFileName, false, Encoding.Unicode);\n\n// Read the input as a binary file so we can detect the Byte Order Mark.\n            FileStream fs = new FileStream(inputFileName, FileMode.Open);\n            BinaryReader inputFile = new BinaryReader(fs);\n\n// Get a Decoder.\n            Decoder decoder = enc.GetDecoder();\n            \n// Guarantee the output buffer large enough to convert a few characters.\n            int UseBufferSize = 64;\n            if (UseBufferSize &lt; enc.GetMaxCharCount(10))\n                    UseBufferSize = enc.GetMaxCharCount(10);\n            char[] chars = new char[UseBufferSize];\n\n// Intentionally make the input byte buffer larger than the output character buffer so the \n// conversion loop executes more than one cycle. \n\n            byte[] bytes = new byte[UseBufferSize * 4];\n            int bytesRead;\n            do\n            {\n// Read at most the number of bytes that will fit in the input buffer. The \n// return value is the actual number of bytes read, or zero if no bytes remain. \n\n                bytesRead = inputFile.Read(bytes, 0, UseBufferSize * 4);\n   \n                bool completed = false;\n                int byteIndex = 0;\n                int bytesUsed;\n                int charsUsed;\n\n                while (!completed)\n                {\n// If this is the last input data, flush the decoder&#39;s internal buffer and state.\n\n                    bool flush = (bytesRead == 0);\n                    decoder.Convert(bytes, byteIndex, bytesRead - byteIndex,\n                                    chars, 0, UseBufferSize, flush,\n                                    out bytesUsed, out charsUsed, out completed);\n\n// The conversion produced the number of characters indicated by charsUsed. Write that number\n// of characters to the output file.\n\n                    outputFile.Write(chars, 0, charsUsed);\n\n// Increment byteIndex to the next block of bytes in the input buffer, if any, to convert.\n                    byteIndex += bytesUsed;\n                }\n            }\n            while(bytesRead != 0);\n\n            outputFile.Close();\n            fs.Close();\n            inputFile.Close();\n        }        \n\n// --------------------------------------------------------------------------------------------\n// Create a large file of UTF-16 encoded Unicode characters. \n// --------------------------------------------------------------------------------------------\n        static void CreateTestFile(String FileName)\n        {\n// StreamWriter defaults to UTF-8 encoding so explicitly specify Unicode, that is, \n// UTF-16, encoding.\n            StreamWriter file = new StreamWriter(FileName, false, Encoding.Unicode);\n\n// Write a line of text 100 times.\n            for (int i = 0; i &lt; 100; i++)\n            {\n                file.WriteLine(&quot;This is an example input file used by the convert example.&quot;);\n            }\n\n// Write Unicode characters from U+0000 to, but not including, the surrogate character range.\n            for (char c = (char)0; c &lt; (char)0xD800; c++)\n            {\n                file.Write(c);\n            }\n            file.Close();\n        }\n    }\n\n/*\nThis code example produces the following results:\n\n(Execute the -dir- console window command and examine the files created.)\n\nExample.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\nUTF8.txt, which contains 169,712 UTF-8 encoded bytes.\nUTF16.txt, which contains 122,594 bytes (61,297 UTF-16 encoded characters).\n\n(Execute the -comp- console window command and compare the two Unicode files.)\n\n&gt;comp example.txt utf16.txt /L\nComparing example.txt and utf16.txt...\nFiles compare OK\n\n(The two files are equal.)\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_GetByteCount_System_Char__System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Encoder_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char*,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetByteCount (char* chars, int count, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to simulate clearing the internal state of the encoder after the calculation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code> (<code>Nothing</code> in Visual Basic .NET).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not affect the state of the encoder.  </p>\n<p> To calculate the exact array size that <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> requires to store the resulting bytes, the application should use GetByteCount.  </p>\n<p> If <code>GetBytes</code> is called with <code>flush</code> set to <code>false</code>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call <code>GetByteCount</code> on a block of data immediately before calling <code>GetBytes</code> on the same block, so that any trailing characters from the previous block are included in the calculation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_GetByteCount_System_Char___System_Int32_System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Encoder_GetByteCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetByteCount(Char[],Int32,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetByteCount (char[] chars, int index, int count, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to simulate clearing the internal state of the encoder after the calculation; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method does not affect the state of the encoder.  </p>\n<p> To calculate the exact array size that <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> requires to store the resulting bytes, the application should use GetByteCount.  </p>\n<p> If <code>GetBytes</code> is called with <code>flush</code> set to <code>false</code>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call <code>GetByteCount</code> on a block of data immediately before calling <code>GetBytes</code> on the same block, so that any trailing characters from the previous block are included in the calculation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to use the GetByteCount method to return the number of bytes required to encode an array of characters using a Unicode <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.Encoder.GetByteCount Example#1\">using System;\nusing System.Text;\n\nclass EncoderExample {\n    public static void Main() {\n        // Unicode characters.\n        Char[] chars = new Char[] {\n            &#39;\\u0023&#39;, // #\n            &#39;\\u0025&#39;, // %\n            &#39;\\u03a0&#39;, // Pi\n            &#39;\\u03a3&#39;  // Sigma\n        };\n\n        Encoder uniEncoder = Encoding.Unicode.GetEncoder();\n        int byteCount = uniEncoder.GetByteCount(chars, 0, chars.Length, true);\n        Console.WriteLine(\n            &quot;{0} bytes needed to encode characters.&quot;, byteCount\n        );\n    }\n}\n\n/* This example produces the following output.\n\n8 bytes needed to encode characters.\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.Encoder.GetByteCount Example#1\">using namespace System;\nusing namespace System::Text;\nint main()\n{\n   \n   // Unicode characters.\n   \n   // Pi\n   // Sigma\n   array&lt;Char&gt;^chars = {L&#39;\\u03a0&#39;,L&#39;\\u03a3&#39;,L&#39;\\u03a6&#39;,L&#39;\\u03a9&#39;};\n   Encoder^ uniEncoder = Encoding::Unicode-&gt;GetEncoder();\n   int byteCount = uniEncoder-&gt;GetByteCount( chars, 0, chars-&gt;Length, true );\n   Console::WriteLine( &quot;{0} bytes needed to encode characters.&quot;, byteCount );\n}\n\n/* This code example produces the following output. \n\n8 bytes needed to encode characters.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoder.GetByteCount Example#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic.Strings\n\nClass EncoderExample\n    \n    Public Shared Sub Main()\n        &#39; Unicode characters.\n        &#39; ChrW(35)  = #\n        &#39; ChrW(37)  = %\n        &#39; ChrW(928) = Pi\n        &#39; ChrW(931) = Sigma\n        Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}\n        \n        Dim uniEncoder As Encoder = Encoding.Unicode.GetEncoder()\n        Dim byteCount As Integer = _\n            uniEncoder.GetByteCount(chars, 0, chars.Length, True)\n        Console.WriteLine(&quot;{0} bytes needed to encode characters.&quot;, byteCount)\n    End Sub &#39;Main\nEnd Class &#39;EncoderExample\n&#39;\n&#39;This example produces the following output.\n&#39;\n&#39;8 bytes needed to encode characters.\n&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Encoder_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char*,Int32,Byte*,Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to clear the internal state of the encoder after the conversion; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>byteCount</code> is less than the resulting number of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object saves state between calls to GetBytes. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> in the last call to <code>GetBytes</code> to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  </p>\n<p> To calculate the exact buffer size that <code>GetBytes</code> requires to store the resulting characters, the application should use <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>.  </p>\n<p> If <code>GetBytes</code> is called with <code>flush</code> set to <code>false</code>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call <code>GetByteCount</code> on a block of data immediately before calling <code>GetBytes</code> on the same block, so that any trailing characters from the previous block are included in the calculation.  </p>\n<p> If your application is to convert many segments of an input stream, consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method. GetBytes will throw an exception if the output buffer isn&#39;t large enough, but <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> will fill as much space as possible and return the chars read and bytes written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> topic for more comments.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_System_Boolean_\">\r\n    \r\n            <a id=\"System_Text_Encoder_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>chars</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character array containing the set of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first character to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>charCount</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to encode.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>bytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>byteIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>flush</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to clear the internal state of the encoder after the conversion; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>chars</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></div>\r\n                  </div>\r\n                  <p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoder.Fallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Remember that the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object saves state between calls to GetBytes. When the application is done with a stream of data, it should set the <code>flush</code> parameter to <code>true</code> in the last call to <code>GetBytes</code> to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  </p>\n<p> To calculate the exact buffer size that <code>GetBytes</code> requires to store the resulting characters, the application should use <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>.  </p>\n<p> If <code>GetBytes</code> is called with <code>flush</code> set to <code>false</code>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call <code>GetByteCount</code> on a block of data immediately before calling <code>GetBytes</code> on the same block, so that any trailing characters from the previous block are included in the calculation.  </p>\n<p> If your application is to convert many segments of an input stream, consider using the <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> method. GetBytes will throw an exception if the output buffer isn&#39;t large enough, but <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a> will fill as much space as possible and return the chars read and bytes written. Also see the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> topic for more comments.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to encode a range of elements from a character array and store the encoded bytes in a range of elements in a byte array. The <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method is used to determine the size of the array required by GetBytes.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Text.Encoder.GetBytes Example#1\">using namespace System;\nusing namespace System::Text;\nusing namespace System::Collections;\nint main()\n{\n   array&lt;Byte&gt;^bytes;\n   \n   // Unicode characters.\n   \n   // Pi\n   // Sigma\n   array&lt;Char&gt;^chars = {L&#39;\\u03a0&#39;,L&#39;\\u03a3&#39;,L&#39;\\u03a6&#39;,L&#39;\\u03a9&#39;};\n   Encoder^ uniEncoder = Encoding::Unicode-&gt;GetEncoder();\n   int byteCount = uniEncoder-&gt;GetByteCount( chars, 0, chars-&gt;Length, true );\n   bytes = gcnew array&lt;Byte&gt;(byteCount);\n   int bytesEncodedCount = uniEncoder-&gt;GetBytes( chars, 0, chars-&gt;Length, bytes, 0, true );\n   Console::WriteLine( &quot;{0} bytes used to encode characters.&quot;, bytesEncodedCount );\n   Console::Write( &quot;Encoded bytes: &quot; );\n   IEnumerator^ myEnum = bytes-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Byte b = safe_cast&lt;Byte&gt;(myEnum-&gt;Current);\n      Console::Write( &quot;[{0}]&quot;, b );\n   }\n\n   Console::WriteLine();\n}\n\n/* This code example produces the following output.\n\n8 bytes used to encode characters.\nEncoded bytes: [160][3][163][3][166][3][169][3]\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.Encoder.GetBytes Example#1\">Imports System\nImports System.Text\nImports Microsoft.VisualBasic.Strings\n\nClass EncoderExample\n    \n    Public Shared Sub Main()\n        Dim bytes() As Byte\n        &#39; Unicode characters.\n        &#39; ChrW(35)  = #\n        &#39; ChrW(37)  = %\n        &#39; ChrW(928) = Pi\n        &#39; ChrW(931) = Sigma\n        Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}\n        \n        Dim uniEncoder As Encoder = Encoding.Unicode.GetEncoder()\n        \n        Dim byteCount As Integer = _\n            uniEncoder.GetByteCount(chars, 0, chars.Length, True)\n        bytes = New Byte(byteCount - 1) {}\n        Dim bytesEncodedCount As Integer = _\n            uniEncoder.GetBytes(chars, 0, chars.Length, bytes, 0, True)\n        \n        Console.WriteLine( _\n            &quot;{0} bytes used to encode characters.&quot;, _\n            bytesEncodedCount _\n        )\n        \n        Console.Write(&quot;Encoded bytes: &quot;)\n        Dim b As Byte\n        For Each b In  bytes\n            Console.Write(&quot;[{0}]&quot;, b)\n        Next b\n        Console.WriteLine()\n    End Sub &#39;Main\nEnd Class &#39;EncoderExample\n\n&#39;This code example produces the following output.\n&#39;8 bytes used to encode characters.\n&#39;Encoded bytes: [35][0][37][0][160][3][163][3]\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.Encoder.GetBytes Example#1\">using System;\nusing System.Text;\n\nclass EncoderExample {\n    public static void Main() {\n        Byte[] bytes;\n        // Unicode characters.\n        Char[] chars = new Char[] {\n            &#39;\\u0023&#39;, // #\n            &#39;\\u0025&#39;, // %\n            &#39;\\u03a0&#39;, // Pi\n            &#39;\\u03a3&#39;  // Sigma\n        };\n        \n        Encoder uniEncoder = Encoding.Unicode.GetEncoder();\n        \n        int byteCount = uniEncoder.GetByteCount(chars, 0, chars.Length, true);\n        bytes = new Byte[byteCount];\n        int bytesEncodedCount = uniEncoder.GetBytes(chars, 0, chars.Length, bytes, 0, true);\n        \n        Console.WriteLine(\n            &quot;{0} bytes used to encode characters.&quot;, bytesEncodedCount\n        );\n\n        Console.Write(&quot;Encoded bytes: &quot;);\n        foreach (Byte b in bytes) {\n            Console.Write(&quot;[{0}]&quot;, b);\n        }\n        Console.WriteLine();\n    }\n}\n\n/* This code example produces the following output.\n\n8 bytes used to encode characters.\nEncoded bytes: [35][0][37][0][160][3][163][3]\n\n*/\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Text_Encoder_Reset\">\r\n    \r\n            <a id=\"System_Text_Encoder_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, sets the encoder back to its initial state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method clears the internal state of the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object. The method clears any state information preserved from a previous call to <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.  </p>\n<p> Your application should call the <code>Reset</code> method if it wants to reuse the same encoder even after an exception is thrown by <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> or <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>, or if the application switches streams.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.Encoder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.Encoder.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder.Convert\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder.Fallback\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder.FallbackBuffer\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder.GetByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Text.Encoder.Reset\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"ea7370e5-1d6c-48c6-54b9-068c7b0ffb06\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Text\\Encoder.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Converts a set of characters into a sequence of bytes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.Encoder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.Encoder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.Encoder.yml","open_to_public_contributors":true,"api_name":["System.Text.Encoder","System.Text.Encoder..ctor","System.Text.Encoder.Convert","System.Text.Encoder.Fallback","System.Text.Encoder.FallbackBuffer","System.Text.Encoder.GetByteCount","System.Text.Encoder.GetBytes","System.Text.Encoder.Reset"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.Encoder","System::Text::Encoder","System.Text.Encoder.#ctor","System::Text::Encoder::#ctor","System.Text.Encoder.Convert","System::Text::Encoder::Convert","System.Text.Encoder.Fallback","System::Text::Encoder::Fallback","System.Text.Encoder.FallbackBuffer","System::Text::Encoder::FallbackBuffer","System.Text.Encoder.GetByteCount","System::Text::Encoder::GetByteCount","System.Text.Encoder.GetBytes","System::Text::Encoder::GetBytes","System.Text.Encoder.Reset","System::Text::Encoder::Reset"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"ea7370e5-1d6c-48c6-54b9-068c7b0ffb06","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Text\\Encoder.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text/Encoder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Encoder class | Microsoft Docs","_op_ogTitle":"Encoder class","description":"Converts a set of characters into a sequence of bytes.\n","toc_asset_id":"_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.Encoder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.encoder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.encoder","fileRelativePath":"System.Text.Encoder.html"},"themesRelativePathToOutputRoot":"_themes/"}