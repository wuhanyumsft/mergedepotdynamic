{"content":"    \r\n    <h1 id=\"System_Windows_Documents_EditingCommands\">\r\n      <span class=\"lang-csharp\">EditingCommands</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a standard set of editing related commands.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class EditingCommands</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EditingCommands</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The following table shows the editing commands and the associated default key gestures (with key names from the <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a> and <a class=\"xref\" href=\"system.windows.input.modifierkeys\" data-linktype=\"relative-path\">ModifierKeys</a> enumerations).  </p>\n<table>\n<thead>\n<tr>\n<th>Editing command</th>\n<th>Default key gesture</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_AlignCenter_\" data-linktype=\"relative-path\">AlignCenter</a></td>\n<td><code>Ctrl</code>+<code>E</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_AlignJustify_\" data-linktype=\"relative-path\">AlignJustify</a></td>\n<td><code>Ctrl</code>+<code>J</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_AlignLeft_\" data-linktype=\"relative-path\">AlignLeft</a></td>\n<td><code>Ctrl</code>+<code>L</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_AlignRight_\" data-linktype=\"relative-path\">AlignRight</a></td>\n<td><code>Ctrl</code>+<code>R</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_Backspace_\" data-linktype=\"relative-path\">Backspace</a></td>\n<td><code>Backspace</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_CorrectSpellingError_\" data-linktype=\"relative-path\">CorrectSpellingError</a></td>\n<td>no default key gesture</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_DecreaseFontSize_\" data-linktype=\"relative-path\">DecreaseFontSize</a></td>\n<td><code>Ctrl</code>+<code>OemOpenBrackets</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_DecreaseIndentation_\" data-linktype=\"relative-path\">DecreaseIndentation</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>T</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_Delete_\" data-linktype=\"relative-path\">Delete</a></td>\n<td><code>Delete</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_DeleteNextWord_\" data-linktype=\"relative-path\">DeleteNextWord</a></td>\n<td><code>Ctrl</code>+<code>Delete</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_DeletePreviousWord_\" data-linktype=\"relative-path\">DeletePreviousWord</a></td>\n<td><code>Ctrl</code>+<code>Backspace</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_EnterLineBreak_\" data-linktype=\"relative-path\">EnterLineBreak</a></td>\n<td><code>Shift</code>+<code>Enter</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_EnterParagraphBreak_\" data-linktype=\"relative-path\">EnterParagraphBreak</a></td>\n<td><code>Enter</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_IgnoreSpellingError_\" data-linktype=\"relative-path\">IgnoreSpellingError</a></td>\n<td>no default key gesture</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_IncreaseFontSize_\" data-linktype=\"relative-path\">IncreaseFontSize</a></td>\n<td><code>Ctrl</code>+<code>OemCloseBrackets</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_IncreaseIndentation_\" data-linktype=\"relative-path\">IncreaseIndentation</a></td>\n<td><code>Ctrl</code>+<code>T</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveDownByLine_\" data-linktype=\"relative-path\">MoveDownByLine</a></td>\n<td><code>Down</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveDownByPage_\" data-linktype=\"relative-path\">MoveDownByPage</a></td>\n<td><code>PageDown</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveDownByParagraph_\" data-linktype=\"relative-path\">MoveDownByParagraph</a></td>\n<td><code>Ctrl</code>+<code>Down</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveLeftByCharacter_\" data-linktype=\"relative-path\">MoveLeftByCharacter</a></td>\n<td><code>Left</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveLeftByWord_\" data-linktype=\"relative-path\">MoveLeftByWord</a></td>\n<td><code>Ctrl</code>+<code>Left</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveRightByCharacter_\" data-linktype=\"relative-path\">MoveRightByCharacter</a></td>\n<td><code>Right</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveRightByWord_\" data-linktype=\"relative-path\">MoveRightByWord</a></td>\n<td><code>Ctrl</code>+<code>Right</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveToDocumentEnd_\" data-linktype=\"relative-path\">MoveToDocumentEnd</a></td>\n<td><code>Ctrl</code>+<code>End</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveToDocumentStart_\" data-linktype=\"relative-path\">MoveToDocumentStart</a></td>\n<td><code>Ctrl</code>+<code>Home</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveToLineEnd_\" data-linktype=\"relative-path\">MoveToLineEnd</a></td>\n<td><code>End</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveToLineStart_\" data-linktype=\"relative-path\">MoveToLineStart</a></td>\n<td><code>Home</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveUpByLine_\" data-linktype=\"relative-path\">MoveUpByLine</a></td>\n<td><code>Up</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveUpByPage_\" data-linktype=\"relative-path\">MoveUpByPage</a></td>\n<td><code>PageUp</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveUpByParagraph_\" data-linktype=\"relative-path\">MoveUpByParagraph</a></td>\n<td><code>Ctrl</code>+<code>Up</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectDownByLine_\" data-linktype=\"relative-path\">SelectDownByLine</a></td>\n<td><code>Shift</code>+<code>Down</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectDownByPage_\" data-linktype=\"relative-path\">SelectDownByPage</a></td>\n<td><code>Shift</code>+<code>PageDown</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectDownByParagraph_\" data-linktype=\"relative-path\">SelectDownByParagraph</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>Down</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectLeftByCharacter_\" data-linktype=\"relative-path\">SelectLeftByCharacter</a></td>\n<td><code>Shift</code>+<code>Left</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectLeftByWord_\" data-linktype=\"relative-path\">SelectLeftByWord</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>Left</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectRightByCharacter_\" data-linktype=\"relative-path\">SelectRightByCharacter</a></td>\n<td><code>Shift</code>+<code>Right</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectRightByWord_\" data-linktype=\"relative-path\">SelectRightByWord</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>Right</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectToDocumentEnd_\" data-linktype=\"relative-path\">SelectToDocumentEnd</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>End</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectToDocumentStart_\" data-linktype=\"relative-path\">SelectToDocumentStart</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>Home</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectToLineEnd_\" data-linktype=\"relative-path\">SelectToLineEnd</a></td>\n<td><code>Shift</code>+<code>End</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectToLineStart_\" data-linktype=\"relative-path\">SelectToLineStart</a></td>\n<td><code>Shift</code>+<code>Home</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectUpByLine_\" data-linktype=\"relative-path\">SelectUpByLine</a></td>\n<td><code>Shift</code>+<code>Up</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectUpByPage_\" data-linktype=\"relative-path\">SelectUpByPage</a></td>\n<td><code>Shift</code>+<code>PageUp</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectUpByParagraph_\" data-linktype=\"relative-path\">SelectUpByParagraph</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>Up</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_TabBackward_\" data-linktype=\"relative-path\">TabBackward</a></td>\n<td><code>Shift</code>+<code>Tab</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_TabForward_\" data-linktype=\"relative-path\">TabForward</a></td>\n<td><code>Tab</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleBold_\" data-linktype=\"relative-path\">ToggleBold</a></td>\n<td><code>Ctrl</code>+<code>B</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleBullets_\" data-linktype=\"relative-path\">ToggleBullets</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>L</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleInsert_\" data-linktype=\"relative-path\">ToggleInsert</a></td>\n<td><code>Insert</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleItalic_\" data-linktype=\"relative-path\">ToggleItalic</a></td>\n<td><code>Ctrl</code>+<code>I</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleNumbering_\" data-linktype=\"relative-path\">ToggleNumbering</a></td>\n<td><code>Ctrl</code>+<code>Shift</code>+<code>N</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleSubscript_\" data-linktype=\"relative-path\">ToggleSubscript</a></td>\n<td><code>Ctrl</code>+<code>OemPlus</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleSuperscript_\" data-linktype=\"relative-path\">ToggleSuperscript</a></td>\n<td><code>Ctrl</code>+<code>Shift+OemPlus</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_ToggleUnderline_\" data-linktype=\"relative-path\">ToggleUnderline</a></td>\n<td><code>Ctrl</code>+<code>U</code></td>\n</tr>\n</tbody>\n</table>\n<p> Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <a class=\"xref\" href=\"system.windows.input.modifierkeys\" data-linktype=\"relative-path\">ModifierKeys</a> key to differentiate selection commands from caret movement commands.  For example, the <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveLeftByCharacter_\" data-linktype=\"relative-path\">MoveLeftByCharacter</a> command has a default key gesture of <a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a>, and the corresponding <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectLeftByCharacter_\" data-linktype=\"relative-path\">SelectLeftByCharacter</a> command has a default key gesture of <a class=\"xref\" href=\"system.windows.input.modifierkeys\" data-linktype=\"relative-path\">ModifierKeys</a>+<a class=\"xref\" href=\"system.windows.input.key\" data-linktype=\"relative-path\">Key</a>.  </p>\n<p> In general, the command definitions provided by the EditingCommands class do not make use of command parameters (the <code>parameter</code> parameter expected by the <a class=\"xref\" href=\"system.windows.input.icommand#System_Windows_Input_ICommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method).  </p>\n<p> For more information on commands and commanding, see <a href=\"../Topic/Input%20Overview.md\" data-linktype=\"relative-path\">Input Overview</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_AlignCenter\" data-linktype=\"self-bookmark\">AlignCenter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the AlignCenter command, which requests that the current paragraph or a selection of paragraphs be centered.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_AlignJustify\" data-linktype=\"self-bookmark\">AlignJustify</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the AlignJustify command, which requests that the current paragraph or a selection of paragraphs be justified.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_AlignLeft\" data-linktype=\"self-bookmark\">AlignLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the AlignLeft command, which requests that a selection of content be aligned left.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_AlignRight\" data-linktype=\"self-bookmark\">AlignRight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the AlignRight command, which requests that a selection of content be aligned right.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_Backspace\" data-linktype=\"self-bookmark\">Backspace</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Backspace command, which requests that a backspace be entered at the current position or over the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_CorrectSpellingError\" data-linktype=\"self-bookmark\">CorrectSpellingError</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the CorrectSpellingError command, which requests that any misspelled word at the current position be corrected.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_DecreaseFontSize\" data-linktype=\"self-bookmark\">DecreaseFontSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the DecreaseFontSize command, which requests that the font size for the current selection be decreased by 1 point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_DecreaseIndentation\" data-linktype=\"self-bookmark\">DecreaseIndentation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the DecreaseIndentation command, which requests that indentation for the current paragraph be decreased by one tab stop.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_Delete\" data-linktype=\"self-bookmark\">Delete</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the Delete command, which requests that the current selection be deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_DeleteNextWord\" data-linktype=\"self-bookmark\">DeleteNextWord</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the DeleteNextWord command, which requests that the next word (relative to a current position) be deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_DeletePreviousWord\" data-linktype=\"self-bookmark\">DeletePreviousWord</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the DeletePreviousWord command, which requests that the previous word (relative to a current position) be deleted.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_EnterLineBreak\" data-linktype=\"self-bookmark\">EnterLineBreak</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the EnterLineBreak command, which requests that a line break be inserted at the current position or over the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_EnterParagraphBreak\" data-linktype=\"self-bookmark\">EnterParagraphBreak</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the EnterParagraphBreak command, which requests that a paragraph break be inserted at the current position or over the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_IgnoreSpellingError\" data-linktype=\"self-bookmark\">IgnoreSpellingError</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the IgnoreSpellingError command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_IncreaseFontSize\" data-linktype=\"self-bookmark\">IncreaseFontSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the IncreaseFontSize command, which requests that the font size for the current selection be increased by 1 point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_IncreaseIndentation\" data-linktype=\"self-bookmark\">IncreaseIndentation</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the IncreaseIndentation command, which requests that indentation for the current paragraph be increased by one tab stop.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveDownByLine\" data-linktype=\"self-bookmark\">MoveDownByLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveDownByLine command, which requests that the caret move down by one line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveDownByPage\" data-linktype=\"self-bookmark\">MoveDownByPage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveDownByPage command, which requests that the caret move down by one page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveDownByParagraph\" data-linktype=\"self-bookmark\">MoveDownByParagraph</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveDownByParagraph command, which requests that the caret move down by one paragraph.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveLeftByCharacter\" data-linktype=\"self-bookmark\">MoveLeftByCharacter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveLeftByCharacter command, which requests that the caret move one character left.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveLeftByWord\" data-linktype=\"self-bookmark\">MoveLeftByWord</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveLeftByWord command, which requests that the caret move one word left.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveRightByCharacter\" data-linktype=\"self-bookmark\">MoveRightByCharacter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveRightByCharacter command, which requests that the caret move one character right.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveRightByWord\" data-linktype=\"self-bookmark\">MoveRightByWord</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveRightByWord command, which requests that the caret move right by one word.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveToDocumentEnd\" data-linktype=\"self-bookmark\">MoveToDocumentEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveToDocumentEnd command, which requests that the caret move to the very end of content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveToDocumentStart\" data-linktype=\"self-bookmark\">MoveToDocumentStart</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveToDocumentStart command, which requests that the caret move to the very beginning of content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveToLineEnd\" data-linktype=\"self-bookmark\">MoveToLineEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveToLineEnd command, which requests that the caret move to the end of the current line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveToLineStart\" data-linktype=\"self-bookmark\">MoveToLineStart</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveToLineStart command, which requests that the caret move to the beginning of the current line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveUpByLine\" data-linktype=\"self-bookmark\">MoveUpByLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveUpByLine command, which requests that the caret move up by one line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveUpByPage\" data-linktype=\"self-bookmark\">MoveUpByPage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveUpByPage command, which requests that the caret move up by one page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_MoveUpByParagraph\" data-linktype=\"self-bookmark\">MoveUpByParagraph</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the MoveUpByParagraph command, which requests that the caret move up by one paragraph.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectDownByLine\" data-linktype=\"self-bookmark\">SelectDownByLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectDownByLine command, which requests that the current selection be expanded down by one line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectDownByPage\" data-linktype=\"self-bookmark\">SelectDownByPage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectDownByPage command, which requests that the current selection be expanded down by one page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectDownByParagraph\" data-linktype=\"self-bookmark\">SelectDownByParagraph</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectDownByParagraph command, which requests that the current selection be expanded down by one paragraph.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectLeftByCharacter\" data-linktype=\"self-bookmark\">SelectLeftByCharacter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectLeftByCharacter command, which requests that the current selection be expanded left by one character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectLeftByWord\" data-linktype=\"self-bookmark\">SelectLeftByWord</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectLeftByWord command, which requests that the current selection be expanded left by one word.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectRightByCharacter\" data-linktype=\"self-bookmark\">SelectRightByCharacter</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectRightByCharacter command, which requests that the current selection be expanded right by one character.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectRightByWord\" data-linktype=\"self-bookmark\">SelectRightByWord</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectRightByWord command, which requests that the current selection be expanded right by one word.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectToDocumentEnd\" data-linktype=\"self-bookmark\">SelectToDocumentEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectToDocumentEnd command, which requests that the current selection be expanded to the very end of content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectToDocumentStart\" data-linktype=\"self-bookmark\">SelectToDocumentStart</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectToDocumentStart command, which requests that the current selection be expanded to the very beginning of content.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectToLineEnd\" data-linktype=\"self-bookmark\">SelectToLineEnd</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectToLineEnd command, which requests that the current selection be expanded to the end of the current line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectToLineStart\" data-linktype=\"self-bookmark\">SelectToLineStart</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectToLineStart command, which requests that the current selection be expanded to the beginning of the current line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectUpByLine\" data-linktype=\"self-bookmark\">SelectUpByLine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectUpByLine command, which requests that the current selection be expanded up by one line.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectUpByPage\" data-linktype=\"self-bookmark\">SelectUpByPage</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectUpByPage command, which requests that the current selection be expanded  up by one page.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_SelectUpByParagraph\" data-linktype=\"self-bookmark\">SelectUpByParagraph</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the SelectUpByParagraph command, which requests that the current selection be expanded up by one paragraph.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_TabBackward\" data-linktype=\"self-bookmark\">TabBackward</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the TabBackward command.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_TabForward\" data-linktype=\"self-bookmark\">TabForward</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the TabForward command.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleBold\" data-linktype=\"self-bookmark\">ToggleBold</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleBold command, which requests that <a class=\"xref\" href=\"system.windows.documents.bold\" data-linktype=\"relative-path\">Bold</a> formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleBullets\" data-linktype=\"self-bookmark\">ToggleBullets</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleBullets command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleInsert\" data-linktype=\"self-bookmark\">ToggleInsert</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleInsert command, which toggles the typing mode between Insert and Overtype.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleItalic\" data-linktype=\"self-bookmark\">ToggleItalic</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleItalic command, which requests that <a class=\"xref\" href=\"system.windows.documents.italic\" data-linktype=\"relative-path\">Italic</a> formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleNumbering\" data-linktype=\"self-bookmark\">ToggleNumbering</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleNumbering command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleSubscript\" data-linktype=\"self-bookmark\">ToggleSubscript</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleSubscript command, which requests that subscript formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleSuperscript\" data-linktype=\"self-bookmark\">ToggleSuperscript</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleSuperscript command, which requests that superscript formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Documents_EditingCommands_ToggleUnderline\" data-linktype=\"self-bookmark\">ToggleUnderline</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the ToggleUnderline command, which requests that <a class=\"xref\" href=\"system.windows.documents.underline\" data-linktype=\"relative-path\">Underline</a> formatting be toggled on the current selection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_AlignCenter\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_AlignCenter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlignCenter</div>        \r\n          </div>\r\n    \r\n            <p>Represents the AlignCenter command, which requests that the current paragraph or a selection of paragraphs be centered.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand AlignCenter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>E</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command operates at the <a class=\"xref\" href=\"system.windows.documents.paragraph\" data-linktype=\"relative-path\">Paragraph</a> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  </p>\n<p> The following figure shows an example of centered content.  </p>\n<p> <img src=\"add/media/flowdoc-textalign-center.png\" alt=\"Screenshot: TextAlign property value of Center\" title=\"Screenshot: TextAlign property value of Center\" data-linktype=\"relative-path\">  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_AlignCenter\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;AlignCenter&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_AlignJustify\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_AlignJustify_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlignJustify</div>        \r\n          </div>\r\n    \r\n            <p>Represents the AlignJustify command, which requests that the current paragraph or a selection of paragraphs be justified.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand AlignJustify { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>J</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command operates at the <a class=\"xref\" href=\"system.windows.documents.paragraph\" data-linktype=\"relative-path\">Paragraph</a> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.  </p>\n<p> When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.  Content is typically justified to create smooth edges on the sides of the content.  </p>\n<p> Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.  </p>\n<p> The following figure shows unjustified (left-aligned) content.  </p>\n<p> <img src=\"add/media/content-unjustified.png\" alt=\"Screenshot: Content is unjustified\" title=\"Screenshot: Content is unjustified\" data-linktype=\"relative-path\">  </p>\n<p> The following figure shows the same content after it has been justified.  </p>\n<p> <img src=\"add/media/content-justified.png\" alt=\"Screenshot of content justified text\" title=\"Screenshot of content justified text\" data-linktype=\"relative-path\">  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_AlignJustify\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;AlignJustify&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_AlignLeft\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_AlignLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlignLeft</div>        \r\n          </div>\r\n    \r\n            <p>Represents the AlignLeft command, which requests that a selection of content be aligned left.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand AlignLeft { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>L</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command operates at the <a class=\"xref\" href=\"system.windows.documents.paragraph\" data-linktype=\"relative-path\">Paragraph</a> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  </p>\n<p> The following figure shows an example of left-aligned content.  </p>\n<p> <img src=\"add/media/flowdoc-textalign-left.png\" alt=\"Screenshot: TextAlign property value of Left\" title=\"Screenshot: TextAlign property value of Left\" data-linktype=\"relative-path\">  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_AlignLeft\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;AlignLeft&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_AlignRight\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_AlignRight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AlignRight</div>        \r\n          </div>\r\n    \r\n            <p>Represents the AlignRight command, which requests that a selection of content be aligned right.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand AlignRight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>R</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command operates at the <a class=\"xref\" href=\"system.windows.documents.paragraph\" data-linktype=\"relative-path\">Paragraph</a> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  </p>\n<p> The following figure shows an example of right-aligned content.  </p>\n<p> <img src=\"add/media/flowdoc-textalign-right.png\" alt=\"Screenshot: TextAlign value of Right\" title=\"Screenshot: TextAlign value of Right\" data-linktype=\"relative-path\">  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_AlignRight\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;AlignRight&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_Backspace\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_Backspace_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Backspace</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Backspace command, which requests that a backspace be entered at the current position or over the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand Backspace { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Backspace</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret. When invoked on a non-empty selection, this command deletes the selection.  </p>\n<p> This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.  Contrast with the <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_Delete_\" data-linktype=\"relative-path\">Delete</a> command, which does not retain previous formatting.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_Backspace\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;Backspace&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_CorrectSpellingError\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_CorrectSpellingError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CorrectSpellingError</div>        \r\n          </div>\r\n    \r\n            <p>Represents the CorrectSpellingError command, which requests that any misspelled word at the current position be corrected.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  This command has no default key gesture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p><a name=\"xamlAttributeUsage_CorrectSpellingError\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;CorrectSpellingError&quot;/&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_DecreaseFontSize\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_DecreaseFontSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DecreaseFontSize</div>        \r\n          </div>\r\n    \r\n            <p>Represents the DecreaseFontSize command, which requests that the font size for the current selection be decreased by 1 point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>OemOpenBrackets</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_DecreaseFontSize\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;DecreaseFontSize&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_DecreaseIndentation\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_DecreaseIndentation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DecreaseIndentation</div>        \r\n          </div>\r\n    \r\n            <p>Represents the DecreaseIndentation command, which requests that indentation for the current paragraph be decreased by one tab stop.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This command has no effect on a text element unless the <a class=\"xref\" href=\"system.windows.controls.primitives.textboxbase#System_Windows_Controls_Primitives_TextBoxBase_AcceptsTab_\" data-linktype=\"relative-path\">AcceptsTab</a> property of the text element is set to <code>true</code>.  </p>\n</div>\n<p><a name=\"xamlAttributeUsage_DecreaseIndentation\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;DecreaseIndentation&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_Delete\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_Delete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Delete</div>        \r\n          </div>\r\n    \r\n            <p>Represents the Delete command, which requests that the current selection be deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand Delete { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Delete</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command discards any formatting from the deleted selection.  Contrast with the <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_Backspace_\" data-linktype=\"relative-path\">Backspace</a> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_Delete\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;Delete&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_DeleteNextWord\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_DeleteNextWord_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeleteNextWord</div>        \r\n          </div>\r\n    \r\n            <p>Represents the DeleteNextWord command, which requests that the next word (relative to a current position) be deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Delete</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_DeleteNextWord\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;DeleteNextWord&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_DeletePreviousWord\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_DeletePreviousWord_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeletePreviousWord</div>        \r\n          </div>\r\n    \r\n            <p>Represents the DeletePreviousWord command, which requests that the previous word (relative to a current position) be deleted.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Backspace</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_DeletePreviousWord\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;DeletePreviousWord&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_EnterLineBreak\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_EnterLineBreak_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterLineBreak</div>        \r\n          </div>\r\n    \r\n            <p>Represents the EnterLineBreak command, which requests that a line break be inserted at the current position or over the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Enter</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For editors that support flow content, such as <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, this command causes a <a class=\"xref\" href=\"system.windows.documents.linebreak\" data-linktype=\"relative-path\">LineBreak</a> element to be inserted at the current position.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_EnterLineBreak\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;EnterLineBreak&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_EnterParagraphBreak\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_EnterParagraphBreak_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EnterParagraphBreak</div>        \r\n          </div>\r\n    \r\n            <p>Represents the EnterParagraphBreak command, which requests that a paragraph break be inserted at the current position or over the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Enter</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command is equivalent to the user pressing the ENTER key.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> (when the <a class=\"xref\" href=\"system.windows.controls.primitives.textboxbase#System_Windows_Controls_Primitives_TextBoxBase_AcceptsReturn_\" data-linktype=\"relative-path\">AcceptsReturn</a> property is <code>true</code>).  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This command has no effect on a text element unless the <a class=\"xref\" href=\"system.windows.controls.primitives.textboxbase#System_Windows_Controls_Primitives_TextBoxBase_AcceptsReturn_\" data-linktype=\"relative-path\">AcceptsReturn</a> property of the text element is set to <code>true</code>.  </p>\n</div>\n<p><a name=\"xamlAttributeUsage_EnterParagraphBreak\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;EnterParagraphBreak&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_IgnoreSpellingError\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_IgnoreSpellingError_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IgnoreSpellingError</div>        \r\n          </div>\r\n    \r\n            <p>Represents the IgnoreSpellingError command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  This command has no default key gesture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p><a name=\"xamlAttributeUsage_IgnoreSpellingError\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;IgnoreSpellingError&quot;/&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_IncreaseFontSize\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_IncreaseFontSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IncreaseFontSize</div>        \r\n          </div>\r\n    \r\n            <p>Represents the IncreaseFontSize command, which requests that the font size for the current selection be increased by 1 point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>OemCloseBrackets</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_IncreaseFontSize\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;IncreaseFontSize&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_IncreaseIndentation\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_IncreaseIndentation_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IncreaseIndentation</div>        \r\n          </div>\r\n    \r\n            <p>Represents the IncreaseIndentation command, which requests that indentation for the current paragraph be increased by one tab stop.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>T</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This command has no effect on a text element unless the <a class=\"xref\" href=\"system.windows.controls.primitives.textboxbase#System_Windows_Controls_Primitives_TextBoxBase_AcceptsTab_\" data-linktype=\"relative-path\">AcceptsTab</a> property of the text element is set to <code>true</code>.  </p>\n</div>\n<p><a name=\"xamlAttributeUsage_IncreaseIndentation\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;IncreaseIndentation&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveDownByLine\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveDownByLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveDownByLine</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveDownByLine command, which requests that the caret move down by one line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Down</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveDownByLine\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveDownByLine&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveDownByPage\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveDownByPage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveDownByPage</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveDownByPage command, which requests that the caret move down by one page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>PageDown</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveDownByPage\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveDownByPage&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveDownByParagraph\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveDownByParagraph_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveDownByParagraph</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveDownByParagraph command, which requests that the caret move down by one paragraph.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Down</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command positions the caret at the beginning of the next paragraph.  </p>\n<p> This command behaves like <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveToDocumentEnd_\" data-linktype=\"relative-path\">MoveToDocumentEnd</a> when invoked on a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveDownByParagraph\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveDownByParagraph&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveLeftByCharacter\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveLeftByCharacter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveLeftByCharacter</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveLeftByCharacter command, which requests that the caret move one character left.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveLeftByCharacter\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveLeftByCharacter&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveLeftByWord\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveLeftByWord_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveLeftByWord</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveLeftByWord command, which requests that the caret move one word left.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is within a word, this command moves the caret to the beginning of that word.  Otherwise, this command moves the caret to the beginning of the previous word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveLeftByWord\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveLeftByWord&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveRightByCharacter\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveRightByCharacter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveRightByCharacter</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveRightByCharacter command, which requests that the caret move one character right.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveRightByCharacter\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveRightByCharacter&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveRightByWord\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveRightByWord_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveRightByWord</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveRightByWord command, which requests that the caret move right by one word.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is within a word, this command moves the caret to the end of that word.  Otherwise, this command moves the caret to the beginning of the next word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveRightByWord\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveRightByWord&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveToDocumentEnd\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveToDocumentEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToDocumentEnd</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveToDocumentEnd command, which requests that the caret move to the very end of content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>End</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <em>text container</em> is the element that forms the ultimate border for the content at hand.  <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> and <a class=\"xref\" href=\"system.windows.documents.flowdocument\" data-linktype=\"relative-path\">FlowDocument</a> are examples of text containers.  The content collectively contained within a text container is referred to as a <em>document</em>.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveToDocumentEnd\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveToDocumentEnd&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveToDocumentStart\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveToDocumentStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToDocumentStart</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveToDocumentStart command, which requests that the caret move to the very beginning of content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Home</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <em>text container</em> is the element that forms the ultimate border for the content at hand.  <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> and <a class=\"xref\" href=\"system.windows.documents.flowdocument\" data-linktype=\"relative-path\">FlowDocument</a> are examples of text containers.  The content collectively contained within a text container is referred to as a <em>document</em>.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveToDocumentStart\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveToDocumentStart&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveToLineEnd\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveToLineEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToLineEnd</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveToLineEnd command, which requests that the caret move to the end of the current line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>End</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveToLineEnd\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveToLineEnd&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveToLineStart\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveToLineStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveToLineStart</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveToLineStart command, which requests that the caret move to the beginning of the current line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Home</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveToLineStart\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveToLineStart&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveUpByLine\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveUpByLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveUpByLine</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveUpByLine command, which requests that the caret move up by one line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Up</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveUpByLine\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveUpByLine&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveUpByPage\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveUpByPage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveUpByPage</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveUpByPage command, which requests that the caret move up by one page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>PageUp</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveUpByPage\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveUpByPage&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_MoveUpByParagraph\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_MoveUpByParagraph_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MoveUpByParagraph</div>        \r\n          </div>\r\n    \r\n            <p>Represents the MoveUpByParagraph command, which requests that the caret move up by one paragraph.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Up</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command positions the caret at the beginning of the next paragraph.  </p>\n<p> This command behaves like <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_MoveToDocumentStart_\" data-linktype=\"relative-path\">MoveToDocumentStart</a> when invoked on a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_MoveUpByParagraph\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;MoveUpByParagraph&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectDownByLine\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectDownByLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectDownByLine</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectDownByLine command, which requests that the current selection be expanded down by one line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Down</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectDownByLine\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectDownByLine&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectDownByPage\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectDownByPage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectDownByPage</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectDownByPage command, which requests that the current selection be expanded down by one page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>PageDown</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectDownByPage\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectDownByPage&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectDownByParagraph\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectDownByParagraph_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectDownByParagraph</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectDownByParagraph command, which requests that the current selection be expanded down by one paragraph.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>Down</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command expands the selection to the beginning of the next paragraph.  Otherwise, this command expands the selection to the end of the current paragraph.  The expanded selection includes the paragraph break that marks the end of the paragraph.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectDownByParagraph\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectDownByParagraph&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectLeftByCharacter\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectLeftByCharacter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectLeftByCharacter</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectLeftByCharacter command, which requests that the current selection be expanded left by one character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectLeftByCharacter\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectLeftByCharacter&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectLeftByWord\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectLeftByWord_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectLeftByWord</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectLeftByWord command, which requests that the current selection be expanded left by one word.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>Left</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is within a word, this command expands the selection to the beginning of that word.  Otherwise, this command expands the selection to the beginning of the previous word.  </p>\n<p> The expanded selection does not include the word delimiter.  Contrast with <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectRightByWord_\" data-linktype=\"relative-path\">SelectRightByWord</a>, which does include the word delimiter in the expanded selection.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectLeftByWord\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectLeftByWord&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectRightByCharacter\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectRightByCharacter_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectRightByCharacter</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectRightByCharacter command, which requests that the current selection be expanded right by one character.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectRightByCharacter\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectRightByCharacter&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectRightByWord\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectRightByWord_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectRightByWord</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectRightByWord command, which requests that the current selection be expanded right by one word.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>Right</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is within a word, this command expands the selection to the end of that word.  Otherwise, this command expands the selection to the end of the next word.  </p>\n<p> The expanded selection includes the word delimiter.  Contrast with <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_SelectLeftByWord_\" data-linktype=\"relative-path\">SelectLeftByWord</a> which does not include the word delimiter in the expanded selection.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectRightByWord\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectRightByWord&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectToDocumentEnd\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectToDocumentEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectToDocumentEnd</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectToDocumentEnd command, which requests that the current selection be expanded to the very end of content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>End</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <em>text container</em> is the element that forms the ultimate border for the content at hand.  <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> and <a class=\"xref\" href=\"system.windows.documents.flowdocument\" data-linktype=\"relative-path\">FlowDocument</a> are examples of text containers.  The content collectively contained within a text container is referred to as a <em>document</em>.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectToDocumentEnd\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectToDocumentEnd&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectToDocumentStart\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectToDocumentStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectToDocumentStart</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectToDocumentStart command, which requests that the current selection be expanded to the very beginning of content.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>Home</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <em>text container</em> is the element that forms the ultimate border for the content at hand.  <a class=\"xref\" href=\"system.windows.controls.textblock\" data-linktype=\"relative-path\">TextBlock</a> and <a class=\"xref\" href=\"system.windows.documents.flowdocument\" data-linktype=\"relative-path\">FlowDocument</a> are examples of text containers.  The content collectively contained within a text container is referred to as a <em>document</em>.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectToDocumentStart\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectToDocumentStart&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectToLineEnd\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectToLineEnd_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectToLineEnd</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectToLineEnd command, which requests that the current selection be expanded to the end of the current line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>End</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectToLineEnd\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectToLineEnd&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectToLineStart\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectToLineStart_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectToLineStart</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectToLineStart command, which requests that the current selection be expanded to the beginning of the current line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Home</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectToLineStart\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectToLineStart&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectUpByLine\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectUpByLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectUpByLine</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectUpByLine command, which requests that the current selection be expanded up by one line.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Up</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectUpByLine\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectUpByLine&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectUpByPage\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectUpByPage_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectUpByPage</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectUpByPage command, which requests that the current selection be expanded  up by one page.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>PageUp</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectUpByPage\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectUpByPage&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_SelectUpByParagraph\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_SelectUpByParagraph_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SelectUpByParagraph</div>        \r\n          </div>\r\n    \r\n            <p>Represents the SelectUpByParagraph command, which requests that the current selection be expanded up by one paragraph.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>Up</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.  Otherwise, this command expands the selection to the beginning of the current paragraph.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_SelectUpByParagraph\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;SelectUpByParagraph&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_TabBackward\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_TabBackward_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabBackward</div>        \r\n          </div>\r\n    \r\n            <p>Represents the TabBackward command.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand TabBackward { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Shift</code>+<code>Tab</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior for this command depends on the current selection. If the selection is non-empty, this command is equivalent to <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_DecreaseIndentation_\" data-linktype=\"relative-path\">DecreaseIndentation</a>. If the caret is in a table cell (represented by the <a class=\"xref\" href=\"system.windows.documents.tablecell\" data-linktype=\"relative-path\">TableCell</a> element), this command moves the caret to the previous cell. Otherwise, a tab character is inserted in current position.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> (when the <a class=\"xref\" href=\"system.windows.controls.primitives.textboxbase#System_Windows_Controls_Primitives_TextBoxBase_AcceptsTab_\" data-linktype=\"relative-path\">AcceptsTab</a> property is <code>true</code>).  </p>\n<p><a name=\"xamlAttributeUsage_TabBackward\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;TabBackward&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-c#\">RichTextBox rTB = new RichTextBox();  \n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre><pre><code class=\"lang-vb\">            Dim rTB As New RichTextBox()  \n\n            EditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_TabForward\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_TabForward_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TabForward</div>        \r\n          </div>\r\n    \r\n            <p>Represents the TabForward command.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand TabForward { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Tab</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The behavior for this command depends on the current selection. If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <a class=\"xref\" href=\"system.windows.documents.editingcommands#System_Windows_Documents_EditingCommands_IncreaseIndentation_\" data-linktype=\"relative-path\">IncreaseIndentation</a>. If the caret is in a table cell (represented by the <a class=\"xref\" href=\"system.windows.documents.tablecell\" data-linktype=\"relative-path\">TableCell</a> element), this command moves the caret to the next cell. If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.  Otherwise, a tab character is inserted in current position.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> and <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> (when the <a class=\"xref\" href=\"system.windows.controls.primitives.textboxbase#System_Windows_Controls_Primitives_TextBoxBase_AcceptsTab_\" data-linktype=\"relative-path\">AcceptsTab</a> property is <code>true</code>).  </p>\n<p><a name=\"xamlAttributeUsage_TabForward\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;TabForward&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-c#\">RichTextBox rTB = new RichTextBox();  \n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre><pre><code class=\"lang-vb\">            Dim rTB As New RichTextBox()  \n\n            EditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleBold\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleBold_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleBold</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleBold command, which requests that <a class=\"xref\" href=\"system.windows.documents.bold\" data-linktype=\"relative-path\">Bold</a> formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleBold { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>B</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.fontweight\" data-linktype=\"relative-path\">FontWeight</a> for the current selection is in the range from <a class=\"xref\" href=\"system.windows.fontweights#System_Windows_FontWeights_Thin_\" data-linktype=\"relative-path\">Thin</a> to <a class=\"xref\" href=\"system.windows.fontweights#System_Windows_FontWeights_SemiBold_\" data-linktype=\"relative-path\">SemiBold</a>, <a class=\"xref\" href=\"system.windows.fontweights#System_Windows_FontWeights_Bold_\" data-linktype=\"relative-path\">Bold</a> is applied to the current selection.  Otherwise, <a class=\"xref\" href=\"system.windows.fontweights#System_Windows_FontWeights_Normal_\" data-linktype=\"relative-path\">Normal</a> is applied.  For a comparative list of <a class=\"xref\" href=\"system.windows.fontweight\" data-linktype=\"relative-path\">FontWeight</a> values, see <a class=\"xref\" href=\"system.windows.fontweights\" data-linktype=\"relative-path\">FontWeights</a>.  </p>\n<p> When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleBold\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleBold&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleBullets\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleBullets_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleBullets</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleBullets command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>L</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command operates at the <a class=\"xref\" href=\"system.windows.documents.paragraph\" data-linktype=\"relative-path\">Paragraph</a> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleBullets\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleBullets&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleInsert\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleInsert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleInsert</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleInsert command, which toggles the typing mode between Insert and Overtype.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Insert</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>, <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a>, and <a class=\"xref\" href=\"system.windows.controls.passwordbox\" data-linktype=\"relative-path\">PasswordBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleInsert\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleInsert&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleItalic\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleItalic_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleItalic</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleItalic command, which requests that <a class=\"xref\" href=\"system.windows.documents.italic\" data-linktype=\"relative-path\">Italic</a> formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>I</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.windows.fontstyle\" data-linktype=\"relative-path\">FontStyle</a> for the current selection is <a class=\"xref\" href=\"system.windows.fontstyles#System_Windows_FontStyles_Normal_\" data-linktype=\"relative-path\">Normal</a>, <a class=\"xref\" href=\"system.windows.fontstyles#System_Windows_FontStyles_Italic_\" data-linktype=\"relative-path\">Italic</a> is applied to the current selection.  Otherwise, <a class=\"xref\" href=\"system.windows.fontstyles#System_Windows_FontStyles_Normal_\" data-linktype=\"relative-path\">Normal</a> is applied.  </p>\n<p> When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleItalic\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleItalic&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleNumbering\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleNumbering_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleNumbering</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleNumbering command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>N</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This command operates at the <a class=\"xref\" href=\"system.windows.documents.paragraph\" data-linktype=\"relative-path\">Paragraph</a> level.  If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.  If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleNumbering\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleNumbering&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleSubscript\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleSubscript_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleSubscript</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleSubscript command, which requests that subscript formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>OemPlus</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleSubscript\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleSubscript&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleSuperscript\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleSuperscript_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleSuperscript</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleSuperscript command, which requests that superscript formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>Shift</code>+<code>OemPlus</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleSuperscript\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleSuperscript&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Documents_EditingCommands_ToggleUnderline\">\r\n    \r\n            <a id=\"System_Windows_Documents_EditingCommands_ToggleUnderline_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToggleUnderline</div>        \r\n          </div>\r\n    \r\n            <p>Represents the ToggleUnderline command, which requests that <a class=\"xref\" href=\"system.windows.documents.underline\" data-linktype=\"relative-path\">Underline</a> formatting be toggled on the current selection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a></div>\r\n                  </div>\r\n                  <p>The requested command.  The default key gesture for this command is <code>Ctrl</code>+<code>U</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.  </p>\n<p> There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.  </p>\n<p> This command is natively supported by <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a>.  </p>\n<p><a name=\"xamlAttributeUsage_ToggleUnderline\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;ToggleUnderline&quot;/&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to invoke an editing command on an object that supports the command.  </p>\n<p> For this example, a <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> serves as the command target.  Note that <a class=\"xref\" href=\"system.windows.controls.richtextbox\" data-linktype=\"relative-path\">RichTextBox</a> implements the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface (inherited from <a class=\"xref\" href=\"system.windows.frameworkelement\" data-linktype=\"relative-path\">FrameworkElement</a>), and that it includes native support for many editing commands.  </p>\n<p> The first argument for the <a class=\"xref\" href=\"system.windows.input.routedcommand#System_Windows_Input_RoutedCommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be <code>null</code> for editing commands.  </p>\n<p> The second argument specifies the object to which the command will be routed.  This object must implement the <a class=\"xref\" href=\"system.windows.iinputelement\" data-linktype=\"relative-path\">IInputElement</a> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  </p>\n<pre><code class=\"lang-vb\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">Dim rTB As New RichTextBox()\n\nEditingCommands.ToggleInsert.Execute(Nothing, rTB)\n</code></pre><pre><code class=\"lang-cs\" name=\"RichTextBoxSnippets#_EditingCommands_Invoke\">RichTextBox rTB = new RichTextBox();\n\nEditingCommands.ToggleInsert.Execute(null, rTB);\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Documents.EditingCommands.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Documents.EditingCommands.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.AlignCenter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.AlignJustify\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.AlignLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.AlignRight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.Backspace\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.CorrectSpellingError\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.DecreaseFontSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.DecreaseIndentation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.Delete\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.DeleteNextWord\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.DeletePreviousWord\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.EnterLineBreak\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.EnterParagraphBreak\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.IgnoreSpellingError\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.IncreaseFontSize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.IncreaseIndentation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveDownByLine\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveDownByPage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveDownByParagraph\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveLeftByCharacter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveLeftByWord\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveRightByCharacter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveRightByWord\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveToDocumentEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveToDocumentStart\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveToLineEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveToLineStart\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveUpByLine\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveUpByPage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.MoveUpByParagraph\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectDownByLine\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectDownByPage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectDownByParagraph\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectLeftByCharacter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectLeftByWord\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectRightByCharacter\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectRightByWord\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectToDocumentEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectToDocumentStart\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectToLineEnd\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectToLineStart\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectUpByLine\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectUpByPage\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.SelectUpByParagraph\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.TabBackward\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.TabForward\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleBold\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleBullets\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleInsert\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleItalic\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleNumbering\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleSubscript\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleSuperscript\">\r\n<meta name=\"APIName\" content=\"System.Windows.Documents.EditingCommands.ToggleUnderline\">\r\n<meta name=\"APILocation\" content=\"PresentationFramework.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"91109a1b-3f13-939f-23a8-e30bacf8b366\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Documents\\EditingCommands.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a standard set of editing related commands.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Documents/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Documents.EditingCommands\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Documents.EditingCommands.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Documents.EditingCommands.yml","open_to_public_contributors":true,"api_name":["System.Windows.Documents.EditingCommands","System.Windows.Documents.EditingCommands.AlignCenter","System.Windows.Documents.EditingCommands.AlignJustify","System.Windows.Documents.EditingCommands.AlignLeft","System.Windows.Documents.EditingCommands.AlignRight","System.Windows.Documents.EditingCommands.Backspace","System.Windows.Documents.EditingCommands.CorrectSpellingError","System.Windows.Documents.EditingCommands.DecreaseFontSize","System.Windows.Documents.EditingCommands.DecreaseIndentation","System.Windows.Documents.EditingCommands.Delete","System.Windows.Documents.EditingCommands.DeleteNextWord","System.Windows.Documents.EditingCommands.DeletePreviousWord","System.Windows.Documents.EditingCommands.EnterLineBreak","System.Windows.Documents.EditingCommands.EnterParagraphBreak","System.Windows.Documents.EditingCommands.IgnoreSpellingError","System.Windows.Documents.EditingCommands.IncreaseFontSize","System.Windows.Documents.EditingCommands.IncreaseIndentation","System.Windows.Documents.EditingCommands.MoveDownByLine","System.Windows.Documents.EditingCommands.MoveDownByPage","System.Windows.Documents.EditingCommands.MoveDownByParagraph","System.Windows.Documents.EditingCommands.MoveLeftByCharacter","System.Windows.Documents.EditingCommands.MoveLeftByWord","System.Windows.Documents.EditingCommands.MoveRightByCharacter","System.Windows.Documents.EditingCommands.MoveRightByWord","System.Windows.Documents.EditingCommands.MoveToDocumentEnd","System.Windows.Documents.EditingCommands.MoveToDocumentStart","System.Windows.Documents.EditingCommands.MoveToLineEnd","System.Windows.Documents.EditingCommands.MoveToLineStart","System.Windows.Documents.EditingCommands.MoveUpByLine","System.Windows.Documents.EditingCommands.MoveUpByPage","System.Windows.Documents.EditingCommands.MoveUpByParagraph","System.Windows.Documents.EditingCommands.SelectDownByLine","System.Windows.Documents.EditingCommands.SelectDownByPage","System.Windows.Documents.EditingCommands.SelectDownByParagraph","System.Windows.Documents.EditingCommands.SelectLeftByCharacter","System.Windows.Documents.EditingCommands.SelectLeftByWord","System.Windows.Documents.EditingCommands.SelectRightByCharacter","System.Windows.Documents.EditingCommands.SelectRightByWord","System.Windows.Documents.EditingCommands.SelectToDocumentEnd","System.Windows.Documents.EditingCommands.SelectToDocumentStart","System.Windows.Documents.EditingCommands.SelectToLineEnd","System.Windows.Documents.EditingCommands.SelectToLineStart","System.Windows.Documents.EditingCommands.SelectUpByLine","System.Windows.Documents.EditingCommands.SelectUpByPage","System.Windows.Documents.EditingCommands.SelectUpByParagraph","System.Windows.Documents.EditingCommands.TabBackward","System.Windows.Documents.EditingCommands.TabForward","System.Windows.Documents.EditingCommands.ToggleBold","System.Windows.Documents.EditingCommands.ToggleBullets","System.Windows.Documents.EditingCommands.ToggleInsert","System.Windows.Documents.EditingCommands.ToggleItalic","System.Windows.Documents.EditingCommands.ToggleNumbering","System.Windows.Documents.EditingCommands.ToggleSubscript","System.Windows.Documents.EditingCommands.ToggleSuperscript","System.Windows.Documents.EditingCommands.ToggleUnderline"],"api_location":["PresentationFramework.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Documents.EditingCommands","System::Windows::Documents::EditingCommands","System.Windows.Documents.EditingCommands.AlignCenter","System::Windows::Documents::EditingCommands::AlignCenter","System.Windows.Documents.EditingCommands.AlignJustify","System::Windows::Documents::EditingCommands::AlignJustify","System.Windows.Documents.EditingCommands.AlignLeft","System::Windows::Documents::EditingCommands::AlignLeft","System.Windows.Documents.EditingCommands.AlignRight","System::Windows::Documents::EditingCommands::AlignRight","System.Windows.Documents.EditingCommands.Backspace","System::Windows::Documents::EditingCommands::Backspace","System.Windows.Documents.EditingCommands.CorrectSpellingError","System::Windows::Documents::EditingCommands::CorrectSpellingError","System.Windows.Documents.EditingCommands.DecreaseFontSize","System::Windows::Documents::EditingCommands::DecreaseFontSize","System.Windows.Documents.EditingCommands.DecreaseIndentation","System::Windows::Documents::EditingCommands::DecreaseIndentation","System.Windows.Documents.EditingCommands.Delete","System::Windows::Documents::EditingCommands::Delete","System.Windows.Documents.EditingCommands.DeleteNextWord","System::Windows::Documents::EditingCommands::DeleteNextWord","System.Windows.Documents.EditingCommands.DeletePreviousWord","System::Windows::Documents::EditingCommands::DeletePreviousWord","System.Windows.Documents.EditingCommands.EnterLineBreak","System::Windows::Documents::EditingCommands::EnterLineBreak","System.Windows.Documents.EditingCommands.EnterParagraphBreak","System::Windows::Documents::EditingCommands::EnterParagraphBreak","System.Windows.Documents.EditingCommands.IgnoreSpellingError","System::Windows::Documents::EditingCommands::IgnoreSpellingError","System.Windows.Documents.EditingCommands.IncreaseFontSize","System::Windows::Documents::EditingCommands::IncreaseFontSize","System.Windows.Documents.EditingCommands.IncreaseIndentation","System::Windows::Documents::EditingCommands::IncreaseIndentation","System.Windows.Documents.EditingCommands.MoveDownByLine","System::Windows::Documents::EditingCommands::MoveDownByLine","System.Windows.Documents.EditingCommands.MoveDownByPage","System::Windows::Documents::EditingCommands::MoveDownByPage","System.Windows.Documents.EditingCommands.MoveDownByParagraph","System::Windows::Documents::EditingCommands::MoveDownByParagraph","System.Windows.Documents.EditingCommands.MoveLeftByCharacter","System::Windows::Documents::EditingCommands::MoveLeftByCharacter","System.Windows.Documents.EditingCommands.MoveLeftByWord","System::Windows::Documents::EditingCommands::MoveLeftByWord","System.Windows.Documents.EditingCommands.MoveRightByCharacter","System::Windows::Documents::EditingCommands::MoveRightByCharacter","System.Windows.Documents.EditingCommands.MoveRightByWord","System::Windows::Documents::EditingCommands::MoveRightByWord","System.Windows.Documents.EditingCommands.MoveToDocumentEnd","System::Windows::Documents::EditingCommands::MoveToDocumentEnd","System.Windows.Documents.EditingCommands.MoveToDocumentStart","System::Windows::Documents::EditingCommands::MoveToDocumentStart","System.Windows.Documents.EditingCommands.MoveToLineEnd","System::Windows::Documents::EditingCommands::MoveToLineEnd","System.Windows.Documents.EditingCommands.MoveToLineStart","System::Windows::Documents::EditingCommands::MoveToLineStart","System.Windows.Documents.EditingCommands.MoveUpByLine","System::Windows::Documents::EditingCommands::MoveUpByLine","System.Windows.Documents.EditingCommands.MoveUpByPage","System::Windows::Documents::EditingCommands::MoveUpByPage","System.Windows.Documents.EditingCommands.MoveUpByParagraph","System::Windows::Documents::EditingCommands::MoveUpByParagraph","System.Windows.Documents.EditingCommands.SelectDownByLine","System::Windows::Documents::EditingCommands::SelectDownByLine","System.Windows.Documents.EditingCommands.SelectDownByPage","System::Windows::Documents::EditingCommands::SelectDownByPage","System.Windows.Documents.EditingCommands.SelectDownByParagraph","System::Windows::Documents::EditingCommands::SelectDownByParagraph","System.Windows.Documents.EditingCommands.SelectLeftByCharacter","System::Windows::Documents::EditingCommands::SelectLeftByCharacter","System.Windows.Documents.EditingCommands.SelectLeftByWord","System::Windows::Documents::EditingCommands::SelectLeftByWord","System.Windows.Documents.EditingCommands.SelectRightByCharacter","System::Windows::Documents::EditingCommands::SelectRightByCharacter","System.Windows.Documents.EditingCommands.SelectRightByWord","System::Windows::Documents::EditingCommands::SelectRightByWord","System.Windows.Documents.EditingCommands.SelectToDocumentEnd","System::Windows::Documents::EditingCommands::SelectToDocumentEnd","System.Windows.Documents.EditingCommands.SelectToDocumentStart","System::Windows::Documents::EditingCommands::SelectToDocumentStart","System.Windows.Documents.EditingCommands.SelectToLineEnd","System::Windows::Documents::EditingCommands::SelectToLineEnd","System.Windows.Documents.EditingCommands.SelectToLineStart","System::Windows::Documents::EditingCommands::SelectToLineStart","System.Windows.Documents.EditingCommands.SelectUpByLine","System::Windows::Documents::EditingCommands::SelectUpByLine","System.Windows.Documents.EditingCommands.SelectUpByPage","System::Windows::Documents::EditingCommands::SelectUpByPage","System.Windows.Documents.EditingCommands.SelectUpByParagraph","System::Windows::Documents::EditingCommands::SelectUpByParagraph","System.Windows.Documents.EditingCommands.TabBackward","System::Windows::Documents::EditingCommands::TabBackward","System.Windows.Documents.EditingCommands.TabForward","System::Windows::Documents::EditingCommands::TabForward","System.Windows.Documents.EditingCommands.ToggleBold","System::Windows::Documents::EditingCommands::ToggleBold","System.Windows.Documents.EditingCommands.ToggleBullets","System::Windows::Documents::EditingCommands::ToggleBullets","System.Windows.Documents.EditingCommands.ToggleInsert","System::Windows::Documents::EditingCommands::ToggleInsert","System.Windows.Documents.EditingCommands.ToggleItalic","System::Windows::Documents::EditingCommands::ToggleItalic","System.Windows.Documents.EditingCommands.ToggleNumbering","System::Windows::Documents::EditingCommands::ToggleNumbering","System.Windows.Documents.EditingCommands.ToggleSubscript","System::Windows::Documents::EditingCommands::ToggleSubscript","System.Windows.Documents.EditingCommands.ToggleSuperscript","System::Windows::Documents::EditingCommands::ToggleSuperscript","System.Windows.Documents.EditingCommands.ToggleUnderline","System::Windows::Documents::EditingCommands::ToggleUnderline"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"91109a1b-3f13-939f-23a8-e30bacf8b366","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Documents\\EditingCommands.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Documents/EditingCommands.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EditingCommands class | Microsoft Docs","_op_ogTitle":"EditingCommands class","description":"Provides a standard set of editing related commands.\n","toc_asset_id":"_splitted/System.Windows.Documents/toc.json","toc_rel":"_splitted/System.Windows.Documents/toc.json","source_url":"","ms.assetid":"System.Windows.Documents.EditingCommands","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.documents.editingcommands","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.documents.editingcommands","fileRelativePath":"System.Windows.Documents.EditingCommands.html"},"themesRelativePathToOutputRoot":"_themes/"}