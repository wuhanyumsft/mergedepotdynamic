{"content":"    \r\n    <h1 id=\"System_Reflection_Emit_FieldBuilder\">\r\n      <span class=\"lang-csharp\">FieldBuilder</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Defines and represents a field. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._FieldBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class FieldBuilder : System.Reflection.FieldInfo, System.Runtime.InteropServices._FieldBuilder</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">System.Reflection.FieldInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">FieldBuilder</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_\" data-linktype=\"relative-path\">GetFieldFromHandle(RuntimeFieldHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetFieldFromHandle_System_RuntimeFieldHandle_System_RuntimeTypeHandle_\" data-linktype=\"relative-path\">GetFieldFromHandle(RuntimeFieldHandle,RuntimeTypeHandle)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetOptionalCustomModifiers\" data-linktype=\"relative-path\">GetOptionalCustomModifiers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetRawConstantValue\" data-linktype=\"relative-path\">GetRawConstantValue()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetRequiredCustomModifiers\" data-linktype=\"relative-path\">GetRequiredCustomModifiers()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_GetValueDirect_System_TypedReference_\" data-linktype=\"relative-path\">GetValueDirect(TypedReference)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsAssembly\" data-linktype=\"relative-path\">IsAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamily\" data-linktype=\"relative-path\">IsFamily</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyAndAssembly\" data-linktype=\"relative-path\">IsFamilyAndAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsFamilyOrAssembly\" data-linktype=\"relative-path\">IsFamilyOrAssembly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsInitOnly\" data-linktype=\"relative-path\">IsInitOnly</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsLiteral\" data-linktype=\"relative-path\">IsLiteral</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsNotSerialized\" data-linktype=\"relative-path\">IsNotSerialized</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsPinvokeImpl\" data-linktype=\"relative-path\">IsPinvokeImpl</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsPrivate\" data-linktype=\"relative-path\">IsPrivate</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsPublic\" data-linktype=\"relative-path\">IsPublic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecurityCritical\" data-linktype=\"relative-path\">IsSecurityCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecuritySafeCritical\" data-linktype=\"relative-path\">IsSecuritySafeCritical</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSecurityTransparent\" data-linktype=\"relative-path\">IsSecurityTransparent</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsSpecialName\" data-linktype=\"relative-path\">IsSpecialName</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_IsStatic\" data-linktype=\"relative-path\">IsStatic</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_MemberType\" data-linktype=\"relative-path\">MemberType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_op_Equality_System_Reflection_FieldInfo_System_Reflection_FieldInfo_\" data-linktype=\"relative-path\">op_Equality(FieldInfo,FieldInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_op_Inequality_System_Reflection_FieldInfo_System_Reflection_FieldInfo_\" data-linktype=\"relative-path\">op_Inequality(FieldInfo,FieldInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_SetValue_System_Object_System_Object_\" data-linktype=\"relative-path\">SetValue(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_SetValueDirect_System_TypedReference_System_Object_\" data-linktype=\"relative-path\">SetValueDirect(TypedReference,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_FieldInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetType\" data-linktype=\"relative-path\">_FieldInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_FieldInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_FieldInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_System_Runtime_InteropServices__FieldInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_FieldInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Get an instance of <code>FieldBuilder</code> by calling <a class=\"xref\" href=\"system.reflection.emit.typebuilder#System_Reflection_Emit_TypeBuilder_DefineField_\" data-linktype=\"relative-path\">DefineField</a>, <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineInitializedData_\" data-linktype=\"relative-path\">DefineInitializedData</a>, or <a class=\"xref\" href=\"system.reflection.emit.modulebuilder#System_Reflection_Emit_ModuleBuilder_DefineUninitializedData_\" data-linktype=\"relative-path\">DefineUninitializedData</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder#System_Reflection_Emit_FieldBuilder_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method is currently not supported. As a workaround, retrieve the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> by reflecting on the finished type and call <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_SetValue_\" data-linktype=\"relative-path\">SetValue</a> to set the value of the field.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the attributes of this field. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_DeclaringType\" data-linktype=\"self-bookmark\">DeclaringType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this field. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_FieldHandle\" data-linktype=\"self-bookmark\">FieldHandle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the internal metadata handle for this field. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_FieldType\" data-linktype=\"self-bookmark\">FieldType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of this field. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_Module\" data-linktype=\"self-bookmark\">Module</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the module in which the type that contains this field is being defined.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_Name\" data-linktype=\"self-bookmark\">Name</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the name of this field. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_ReflectedType\" data-linktype=\"self-bookmark\">ReflectedType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates the reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object from which this object was obtained. This property is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_GetCustomAttributes_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes defined for this field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">GetCustomAttributes(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns all the custom attributes defined for this field identified by the given type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_GetToken\" data-linktype=\"self-bookmark\">GetToken()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the token representing this field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_GetValue_System_Object_\" data-linktype=\"self-bookmark\">GetValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the value of the field supported by the given object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_IsDefined_System_Type_System_Boolean_\" data-linktype=\"self-bookmark\">IsDefined(Type,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether an attribute having the specified type is defined on a field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_SetConstant_System_Object_\" data-linktype=\"self-bookmark\">SetConstant(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the default value of this field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\" data-linktype=\"self-bookmark\">SetCustomAttribute(CustomAttributeBuilder)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a custom attribute using a custom attribute builder.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\" data-linktype=\"self-bookmark\">SetCustomAttribute(ConstructorInfo,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_SetMarshal_System_Reflection_Emit_UnmanagedMarshal_\" data-linktype=\"self-bookmark\">SetMarshal(UnmanagedMarshal)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Describes the native marshaling of the field.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_SetOffset_System_Int32_\" data-linktype=\"self-bookmark\">SetOffset(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the field layout.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_SetValue_System_Object_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Globalization_CultureInfo_\" data-linktype=\"self-bookmark\">SetValue(Object,Object,BindingFlags,Binder,CultureInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the value of the field supported by the given object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_FieldBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_FieldBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_FieldBuilder.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_FieldBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the attributes of this field. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.FieldAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldattributes\" data-linktype=\"relative-path\">FieldAttributes</a></div>\r\n                  </div>\r\n                  <p>The attributes of this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>Attributes</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"FieldBuilder_ReflectedType#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nType^ CreateType( AppDomain^ currentDomain )\n{\n   // Create an assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;DynamicAssembly&quot;;\n   AssemblyBuilder^ myAssembly = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n\n   // Create a dynamic module in Dynamic Assembly.\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;MyModule&quot; );\n\n   // Define a public class named S&quot;MyClass&quot; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyClass&quot;, TypeAttributes::Public );\n\n   // Define a private String field named S&quot;MyField&quot; in the type.\n   FieldBuilder^ myFieldBuilder = myTypeBuilder-&gt;DefineField( &quot;MyField&quot;, String::typeid, static_cast&lt;FieldAttributes&gt;(FieldAttributes::Private | FieldAttributes::Static) );\n\n   // Create the constructor.\n   array&lt;Type^&gt;^constructorArgs = {String::typeid};\n   ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, constructorArgs );\n   ILGenerator^ constructorIL = myConstructor-&gt;GetILGenerator();\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ConstructorInfo^ superConstructor = Object::typeid-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n   constructorIL-&gt;Emit( OpCodes::Call, superConstructor );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   constructorIL-&gt;Emit( OpCodes::Stfld, myFieldBuilder );\n   constructorIL-&gt;Emit( OpCodes::Ret );\n\n   // Create the MyMethod method.\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, MethodAttributes::Public, String::typeid, nullptr );\n   ILGenerator^ methodIL = myMethodBuilder-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldarg_0 );\n   methodIL-&gt;Emit( OpCodes::Ldfld, myFieldBuilder );\n   methodIL-&gt;Emit( OpCodes::Ret );\n   if ( myFieldBuilder-&gt;Attributes.Equals( FieldAttributes::Static ) )\n   {\n      Console::WriteLine( &quot;Field attribute defined as Static&quot; );\n   }\n   else\n   if ( myFieldBuilder-&gt;Attributes.Equals( FieldAttributes::Static | FieldAttributes::Private ) )\n   {\n      Console::WriteLine( &quot;Field attributes are Static and Private&quot; );\n   }\n\n\n   Console::WriteLine( &quot;ReflectedType of Field is : {0}&quot;, myFieldBuilder-&gt;ReflectedType );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   try\n   {\n      Type^ myType = CreateType( Thread::GetDomain() );\n\n      // Create an instance of the S&quot;HelloWorld&quot; class.\n      array&lt;Object^&gt;^type = {&quot;HelloWorld&quot;};\n      Object^ helloWorld = Activator::CreateInstance( myType, type );\n\n      // Invoke the S&quot;MyMethod&quot;  of the S&quot;MyClass&quot;.\n      Object^ myObject = myType-&gt;InvokeMember( &quot;MyMethod&quot;, BindingFlags::InvokeMethod, nullptr, helloWorld, nullptr );\n      Console::WriteLine( &quot;MyClass::MyMethod returned: \\&quot;{0}\\&quot;&quot;, myObject );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldBuilder_ReflectedType#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\n\npublic class FieldBuilder_Sample\n{\n   private static Type CreateType(AppDomain currentDomain)\n   {\n\n\n      // Create an assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;;\n      AssemblyBuilder myAssembly =\n         currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);\n      // Create a dynamic module in Dynamic Assembly.\n      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule(&quot;MyModule&quot;);\n      // Define a public class named &quot;MyClass&quot; in the assembly.\n      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType(&quot;MyClass&quot;,TypeAttributes.Public);\n\n      // Define a private String field named &quot;MyField&quot; in the type.\n      FieldBuilder myFieldBuilder= myTypeBuilder.DefineField(&quot;MyField&quot;,\n         typeof(string),FieldAttributes.Private|FieldAttributes.Static);\n      // Create the constructor.\n      Type[] constructorArgs = { typeof(String) };\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, constructorArgs);\n      ILGenerator constructorIL = myConstructor.GetILGenerator();\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);\n      constructorIL.Emit(OpCodes.Call, superConstructor);\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      constructorIL.Emit(OpCodes.Ldarg_1);\n      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder);\n      constructorIL.Emit(OpCodes.Ret);\n\n      // Create the MyMethod method.\n      MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,\n         MethodAttributes.Public,typeof(String),null);\n      ILGenerator methodIL = myMethodBuilder.GetILGenerator();\n      methodIL.Emit(OpCodes.Ldarg_0);\n      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder);\n      methodIL.Emit(OpCodes.Ret);\n      if (myFieldBuilder.Attributes.Equals(FieldAttributes.Static))\n      {\n            Console.WriteLine(&quot;Field attribute defined as Static&quot;);\n      }\n      else if(myFieldBuilder.Attributes.Equals(FieldAttributes.Static|FieldAttributes.Private))\n      {\n         Console.WriteLine(&quot;Field attributes are Static and Private&quot;);\n      }\n      Console.WriteLine(&quot;ReflectedType of Field is: &quot; + myFieldBuilder.ReflectedType);\n\n      return myTypeBuilder.CreateType();\n   }\n\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      Type myType = CreateType(Thread.GetDomain());\n      // Create an instance of the &quot;HelloWorld&quot; class.\n      Object helloWorld = Activator.CreateInstance(myType, new Object[] { &quot;HelloWorld&quot; });\n      // Invoke the &quot;MyMethod&quot;  of the &quot;MyClass&quot;.\n      Object myObject  = myType.InvokeMember(&quot;MyMethod&quot;,\n         BindingFlags.InvokeMethod, null, helloWorld, null);\n      Console.WriteLine(&quot;MyClass.MyMethod returned: \\&quot;&quot; + myObject + &quot;\\&quot;&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_ReflectedType#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\n\nPublic Class FieldBuilder_Sample\n   Private Shared Function CreateType(currentDomain As AppDomain) As Type\n\n      &#39; Create an assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                             AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in Dynamic Assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;MyModule&quot;)\n      &#39; Define a public class named &quot;MyClass&quot; in the assembly.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass&quot;, _\n                                          TypeAttributes.Public)\n      &#39; Define a private String field named &quot;MyField&quot; in the type.\n      Dim myFieldBuilder As FieldBuilder = myTypeBuilder.DefineField(&quot;MyField&quot;, _\n                              GetType(String), FieldAttributes.Private Or FieldAttributes.Static)\n      &#39; Create the constructor.\n      Dim constructorArgs As Type() ={GetType(String)}\n      Dim myConstructor As ConstructorBuilder = _\n                     myTypeBuilder.DefineConstructor(MethodAttributes.Public, _\n                              CallingConventions.Standard, constructorArgs)\n      Dim constructorIL As ILGenerator = myConstructor.GetILGenerator()\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      Dim superConstructor As ConstructorInfo = GetType(Object).GetConstructor(New Type() { })\n      constructorIL.Emit(OpCodes.Call, superConstructor)\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      constructorIL.Emit(OpCodes.Ldarg_1)\n      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder)\n      constructorIL.Emit(OpCodes.Ret)\n      \n      &#39; Create the MyMethod method.\n      Dim myMethodBuilder As MethodBuilder =myTypeBuilder.DefineMethod(&quot;MyMethod&quot;, _\n                           MethodAttributes.Public, GetType(String), Nothing)\n      Dim methodIL As ILGenerator = myMethodBuilder.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldarg_0)\n      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder)\n      methodIL.Emit(OpCodes.Ret)\n      If myFieldBuilder.Attributes.Equals(FieldAttributes.Static) Then\n         Console.WriteLine(&quot;Field attribute defined as Static&quot;)\n      Else\n         If myFieldBuilder.Attributes.Equals(FieldAttributes.Static Or FieldAttributes.Private) Then\n            Console.WriteLine(&quot;Field attributes are Static and Private&quot;)\n         End If\n      End If\n      Console.WriteLine(&quot;ReflectedType of Field is: &quot; &amp; myFieldBuilder.ReflectedType.ToString())\n      Return myTypeBuilder.CreateType()\n\n   End Function &#39;CreateType\n\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Dim myType As Type = CreateType(Thread.GetDomain())\n      &#39; Create an instance of the &quot;HelloWorld&quot; class.\n      Dim helloWorld As Object = Activator.CreateInstance(myType, New Object() { &quot;HelloWorld&quot; })\n      &#39; Invoke the &quot;MyMethod&quot;  of the &quot;MyClass&quot;.\n      Dim myObject As Object = myType.InvokeMember(&quot;MyMethod&quot;, _\n               BindingFlags.InvokeMethod, Nothing, helloWorld, Nothing)\n      Console.WriteLine(&quot;MyClass.MyMethod returned: &quot;&quot;&quot; &amp; myObject &amp; &quot;&quot;&quot;&quot;)\n   End Sub &#39;Main\nEnd Class &#39;FieldBuilder_Sample\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_DeclaringType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_DeclaringType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DeclaringType</div>        \r\n          </div>\r\n    \r\n            <p>Indicates a reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this field. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type DeclaringType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object for the type that declares this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_FieldHandle\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_FieldHandle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldHandle</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the internal metadata handle for this field. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override RuntimeFieldHandle FieldHandle { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtimefieldhandle\" data-linktype=\"relative-path\">RuntimeFieldHandle</a></div>\r\n                  </div>\r\n                  <p>The internal metadata handle for this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_FieldType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_FieldType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FieldType</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of this field. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type FieldType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the type of this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_Module\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_Module_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Module</div>        \r\n          </div>\r\n    \r\n            <p>Gets the module in which the type that contains this field is being defined.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.Module Module { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.module\" data-linktype=\"relative-path\">Module</a> that represents the dynamic module in which this field is being defined.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_Name\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_Name_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Name</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the name of this field. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Name { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the name of this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>Name</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"FieldBuilder_Class_Name#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nType^ CreateType( AppDomain^ currentDomain )\n{\n   // Create an assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;DynamicAssembly&quot;;\n   AssemblyBuilder^ myAssembly = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n\n   // Create a dynamic module in Dynamic Assembly.\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;MyModule&quot; );\n\n   // Define a public class named S&quot;MyClass&quot; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyClass&quot;, TypeAttributes::Public );\n\n   // Define a private String field named S&quot;MyField&quot; in the type.\n   FieldBuilder^ myFieldBuilder = myTypeBuilder-&gt;DefineField( &quot;MyField&quot;, String::typeid, static_cast&lt;FieldAttributes&gt;(FieldAttributes::Private | FieldAttributes::Static) );\n\n   // Create the constructor.\n   array&lt;Type^&gt;^constructorArgs = {String::typeid};\n   ConstructorBuilder^ constructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, constructorArgs );\n   ILGenerator^ constructorIL = constructor-&gt;GetILGenerator();\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ConstructorInfo^ superConstructor = Object::typeid-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n   constructorIL-&gt;Emit( OpCodes::Call, superConstructor );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   constructorIL-&gt;Emit( OpCodes::Stfld, myFieldBuilder );\n   constructorIL-&gt;Emit( OpCodes::Ret );\n\n   // Create the MyMethod method.\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, MethodAttributes::Public, String::typeid, nullptr );\n   ILGenerator^ methodIL = myMethodBuilder-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldarg_0 );\n   methodIL-&gt;Emit( OpCodes::Ldfld, myFieldBuilder );\n   methodIL-&gt;Emit( OpCodes::Ret );\n   Console::WriteLine( &quot;Name               : {0}&quot;, myFieldBuilder-&gt;Name );\n   Console::WriteLine( &quot;DeclaringType      : {0}&quot;, myFieldBuilder-&gt;DeclaringType );\n   Console::WriteLine( &quot;Type               : {0}&quot;, myFieldBuilder-&gt;FieldType );\n   Console::WriteLine( &quot;Token              : {0}&quot;, myFieldBuilder-&gt;GetToken().Token );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   try\n   {\n      Type^ myType = CreateType( Thread::GetDomain() );\n\n      // Create an instance of the S&quot;HelloWorld&quot; class.\n      array&lt;Object^&gt;^type = {&quot;HelloWorld&quot;};\n      Object^ helloWorld = Activator::CreateInstance( myType, type );\n\n      // Invoke the S&quot;MyMethod&quot; method of the S&quot;MyClass&quot; class.\n      Object^ myObject = myType-&gt;InvokeMember( &quot;MyMethod&quot;, BindingFlags::InvokeMethod, nullptr, helloWorld, nullptr );\n      Console::WriteLine( &quot;MyClass::MyMethod returned: \\&quot;{0}\\&quot;&quot;, myObject );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_Class_Name#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\n\nPublic Class FieldBuilder_Sample\n   Private Shared Function CreateType(currentDomain As AppDomain) As Type\n\n      &#39; Create an assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                                AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in Dynamic Assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;MyModule&quot;)\n      &#39; Define a public class named &quot;MyClass&quot; in the assembly.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass&quot;, _\n                                          TypeAttributes.Public)\n      &#39; Define a private String field named &quot;MyField&quot; in the type.\n      Dim myFieldBuilder As FieldBuilder = myTypeBuilder.DefineField(&quot;MyField&quot;, _\n                  GetType(String), FieldAttributes.Private Or FieldAttributes.Static)\n      &#39; Create the constructor.\n      Dim constructorArgs As Type() = {GetType(String)}\n      Dim constructor As ConstructorBuilder = _\n                  myTypeBuilder.DefineConstructor(MethodAttributes.Public, _\n                           CallingConventions.Standard, constructorArgs)\n      Dim constructorIL As ILGenerator = constructor.GetILGenerator()\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      Dim superConstructor As ConstructorInfo = GetType(Object).GetConstructor(New Type() {})\n      constructorIL.Emit(OpCodes.Call, superConstructor)\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      constructorIL.Emit(OpCodes.Ldarg_1)\n      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder)\n      constructorIL.Emit(OpCodes.Ret)\n\n      &#39; Create the MyMethod method.\n      Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,  _\n                        MethodAttributes.Public, GetType(String), Nothing)\n      Dim methodIL As ILGenerator = myMethodBuilder.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldarg_0)\n      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder)\n      methodIL.Emit(OpCodes.Ret)\n      Console.WriteLine(&quot;Name               :&quot; + myFieldBuilder.Name)\n      Console.WriteLine(&quot;DeclaringType      :&quot; + myFieldBuilder.DeclaringType.ToString())\n      Console.WriteLine(&quot;Type               :&quot; + myFieldBuilder.FieldType.ToString())\n      Console.WriteLine(&quot;Token              :&quot; + myFieldBuilder.GetToken().Token.ToString())\n      Return myTypeBuilder.CreateType()\n   End Function &#39;CreateType\n\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Try\n         Dim myType As Type = CreateType(Thread.GetDomain())\n         &#39; Create an instance of the &quot;HelloWorld&quot; class.\n         Dim helloWorld As Object = Activator.CreateInstance(myType, New Object() {&quot;HelloWorld&quot;})\n         &#39; Invoke the &quot;MyMethod&quot; method of the &quot;MyClass&quot; class.\n         Dim myObject As Object = myType.InvokeMember(&quot;MyMethod&quot;, _\n                     BindingFlags.InvokeMethod, Nothing, helloWorld, Nothing)\n         Console.WriteLine(&quot;MyClass.MyMethod returned: &quot; &amp; Microsoft.VisualBasic.Chr(34) &amp; myObject  &amp; Microsoft.VisualBasic.Chr(34) )\n     Catch e as Exception\n            Console.WriteLine(&quot;Exception Caught &quot;+e.Message)\n     End Try\n   End Sub &#39;Main\nEnd Class &#39;FieldBuilder_Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldBuilder_Class_Name#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\n\npublic class FieldBuilder_Sample\n{\n   private static Type CreateType(AppDomain currentDomain)\n   {\n\n      // Create an assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;;\n      AssemblyBuilder myAssembly =\n                     currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);\n      // Create a dynamic module in Dynamic Assembly.\n      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule(&quot;MyModule&quot;);\n      // Define a public class named &quot;MyClass&quot; in the assembly.\n      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType(&quot;MyClass&quot;,TypeAttributes.Public);\n\n      // Define a private String field named &quot;MyField&quot; in the type.\n      FieldBuilder myFieldBuilder= myTypeBuilder.DefineField(&quot;MyField&quot;,\n          typeof(string),FieldAttributes.Private|FieldAttributes.Static);\n      // Create the constructor.\n      Type[] constructorArgs = { typeof(String) };\n      ConstructorBuilder constructor = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, constructorArgs);\n      ILGenerator constructorIL = constructor.GetILGenerator();\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);\n      constructorIL.Emit(OpCodes.Call, superConstructor);\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      constructorIL.Emit(OpCodes.Ldarg_1);\n      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder);\n      constructorIL.Emit(OpCodes.Ret);\n\n      // Create the MyMethod method.\n      MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,\n                           MethodAttributes.Public,typeof(String),null);\n      ILGenerator methodIL = myMethodBuilder.GetILGenerator();\n      methodIL.Emit(OpCodes.Ldarg_0);\n      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder);\n      methodIL.Emit(OpCodes.Ret);\n      Console.WriteLine(&quot;Name               :&quot;+myFieldBuilder.Name);\n      Console.WriteLine(&quot;DeclaringType      :&quot;+myFieldBuilder.DeclaringType);\n      Console.WriteLine(&quot;Type               :&quot;+myFieldBuilder.FieldType);\n      Console.WriteLine(&quot;Token              :&quot;+myFieldBuilder.GetToken().Token);\n      return myTypeBuilder.CreateType();\n   }\n\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      try\n      {\n         Type myType = CreateType(Thread.GetDomain());\n         // Create an instance of the &quot;HelloWorld&quot; class.\n         Object helloWorld = Activator.CreateInstance(myType, new Object[] { &quot;HelloWorld&quot; });\n         // Invoke the &quot;MyMethod&quot; method of the &quot;MyClass&quot; class.\n         Object myObject  = myType.InvokeMember(&quot;MyMethod&quot;,\n                        BindingFlags.InvokeMethod, null, helloWorld, null);\n         Console.WriteLine(&quot;MyClass.MyMethod returned: \\&quot;&quot; + myObject + &quot;\\&quot;&quot;);\n      }\n      catch( Exception e)\n      {\n         Console.WriteLine(&quot;Exception Caught &quot;+e.Message);\n      }\n  }\n}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_ReflectedType\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_ReflectedType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReflectedType</div>        \r\n          </div>\r\n    \r\n            <p>Indicates the reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object from which this object was obtained. This property is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override Type ReflectedType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A reference to the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object from which this instance was obtained.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a> object represents a field of a particular class. In order to obtain a <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a> object, the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object that represents the class that supports the field is queried. This property holds a reference to that <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> object.  </p>\n<p> The following code sample illustrates the use of <code>ReflectedType</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"FieldBuilder_ReflectedType#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nType^ CreateType( AppDomain^ currentDomain )\n{\n   // Create an assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;DynamicAssembly&quot;;\n   AssemblyBuilder^ myAssembly = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::Run );\n\n   // Create a dynamic module in Dynamic Assembly.\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;MyModule&quot; );\n\n   // Define a public class named S&quot;MyClass&quot; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyClass&quot;, TypeAttributes::Public );\n\n   // Define a private String field named S&quot;MyField&quot; in the type.\n   FieldBuilder^ myFieldBuilder = myTypeBuilder-&gt;DefineField( &quot;MyField&quot;, String::typeid, static_cast&lt;FieldAttributes&gt;(FieldAttributes::Private | FieldAttributes::Static) );\n\n   // Create the constructor.\n   array&lt;Type^&gt;^constructorArgs = {String::typeid};\n   ConstructorBuilder^ myConstructor = myTypeBuilder-&gt;DefineConstructor( MethodAttributes::Public, CallingConventions::Standard, constructorArgs );\n   ILGenerator^ constructorIL = myConstructor-&gt;GetILGenerator();\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   ConstructorInfo^ superConstructor = Object::typeid-&gt;GetConstructor( gcnew array&lt;Type^&gt;(0) );\n   constructorIL-&gt;Emit( OpCodes::Call, superConstructor );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_0 );\n   constructorIL-&gt;Emit( OpCodes::Ldarg_1 );\n   constructorIL-&gt;Emit( OpCodes::Stfld, myFieldBuilder );\n   constructorIL-&gt;Emit( OpCodes::Ret );\n\n   // Create the MyMethod method.\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, MethodAttributes::Public, String::typeid, nullptr );\n   ILGenerator^ methodIL = myMethodBuilder-&gt;GetILGenerator();\n   methodIL-&gt;Emit( OpCodes::Ldarg_0 );\n   methodIL-&gt;Emit( OpCodes::Ldfld, myFieldBuilder );\n   methodIL-&gt;Emit( OpCodes::Ret );\n   if ( myFieldBuilder-&gt;Attributes.Equals( FieldAttributes::Static ) )\n   {\n      Console::WriteLine( &quot;Field attribute defined as Static&quot; );\n   }\n   else\n   if ( myFieldBuilder-&gt;Attributes.Equals( FieldAttributes::Static | FieldAttributes::Private ) )\n   {\n      Console::WriteLine( &quot;Field attributes are Static and Private&quot; );\n   }\n\n\n   Console::WriteLine( &quot;ReflectedType of Field is : {0}&quot;, myFieldBuilder-&gt;ReflectedType );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   try\n   {\n      Type^ myType = CreateType( Thread::GetDomain() );\n\n      // Create an instance of the S&quot;HelloWorld&quot; class.\n      array&lt;Object^&gt;^type = {&quot;HelloWorld&quot;};\n      Object^ helloWorld = Activator::CreateInstance( myType, type );\n\n      // Invoke the S&quot;MyMethod&quot;  of the S&quot;MyClass&quot;.\n      Object^ myObject = myType-&gt;InvokeMember( &quot;MyMethod&quot;, BindingFlags::InvokeMethod, nullptr, helloWorld, nullptr );\n      Console::WriteLine( &quot;MyClass::MyMethod returned: \\&quot;{0}\\&quot;&quot;, myObject );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldBuilder_ReflectedType#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\n\npublic class FieldBuilder_Sample\n{\n   private static Type CreateType(AppDomain currentDomain)\n   {\n\n\n      // Create an assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;;\n      AssemblyBuilder myAssembly =\n         currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.Run);\n      // Create a dynamic module in Dynamic Assembly.\n      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule(&quot;MyModule&quot;);\n      // Define a public class named &quot;MyClass&quot; in the assembly.\n      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType(&quot;MyClass&quot;,TypeAttributes.Public);\n\n      // Define a private String field named &quot;MyField&quot; in the type.\n      FieldBuilder myFieldBuilder= myTypeBuilder.DefineField(&quot;MyField&quot;,\n         typeof(string),FieldAttributes.Private|FieldAttributes.Static);\n      // Create the constructor.\n      Type[] constructorArgs = { typeof(String) };\n      ConstructorBuilder myConstructor = myTypeBuilder.DefineConstructor(\n         MethodAttributes.Public, CallingConventions.Standard, constructorArgs);\n      ILGenerator constructorIL = myConstructor.GetILGenerator();\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      ConstructorInfo superConstructor = typeof(Object).GetConstructor(new Type[0]);\n      constructorIL.Emit(OpCodes.Call, superConstructor);\n      constructorIL.Emit(OpCodes.Ldarg_0);\n      constructorIL.Emit(OpCodes.Ldarg_1);\n      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder);\n      constructorIL.Emit(OpCodes.Ret);\n\n      // Create the MyMethod method.\n      MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,\n         MethodAttributes.Public,typeof(String),null);\n      ILGenerator methodIL = myMethodBuilder.GetILGenerator();\n      methodIL.Emit(OpCodes.Ldarg_0);\n      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder);\n      methodIL.Emit(OpCodes.Ret);\n      if (myFieldBuilder.Attributes.Equals(FieldAttributes.Static))\n      {\n            Console.WriteLine(&quot;Field attribute defined as Static&quot;);\n      }\n      else if(myFieldBuilder.Attributes.Equals(FieldAttributes.Static|FieldAttributes.Private))\n      {\n         Console.WriteLine(&quot;Field attributes are Static and Private&quot;);\n      }\n      Console.WriteLine(&quot;ReflectedType of Field is: &quot; + myFieldBuilder.ReflectedType);\n\n      return myTypeBuilder.CreateType();\n   }\n\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      Type myType = CreateType(Thread.GetDomain());\n      // Create an instance of the &quot;HelloWorld&quot; class.\n      Object helloWorld = Activator.CreateInstance(myType, new Object[] { &quot;HelloWorld&quot; });\n      // Invoke the &quot;MyMethod&quot;  of the &quot;MyClass&quot;.\n      Object myObject  = myType.InvokeMember(&quot;MyMethod&quot;,\n         BindingFlags.InvokeMethod, null, helloWorld, null);\n      Console.WriteLine(&quot;MyClass.MyMethod returned: \\&quot;&quot; + myObject + &quot;\\&quot;&quot;);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_ReflectedType#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\n\nPublic Class FieldBuilder_Sample\n   Private Shared Function CreateType(currentDomain As AppDomain) As Type\n\n      &#39; Create an assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                             AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module in Dynamic Assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;MyModule&quot;)\n      &#39; Define a public class named &quot;MyClass&quot; in the assembly.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass&quot;, _\n                                          TypeAttributes.Public)\n      &#39; Define a private String field named &quot;MyField&quot; in the type.\n      Dim myFieldBuilder As FieldBuilder = myTypeBuilder.DefineField(&quot;MyField&quot;, _\n                              GetType(String), FieldAttributes.Private Or FieldAttributes.Static)\n      &#39; Create the constructor.\n      Dim constructorArgs As Type() ={GetType(String)}\n      Dim myConstructor As ConstructorBuilder = _\n                     myTypeBuilder.DefineConstructor(MethodAttributes.Public, _\n                              CallingConventions.Standard, constructorArgs)\n      Dim constructorIL As ILGenerator = myConstructor.GetILGenerator()\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      Dim superConstructor As ConstructorInfo = GetType(Object).GetConstructor(New Type() { })\n      constructorIL.Emit(OpCodes.Call, superConstructor)\n      constructorIL.Emit(OpCodes.Ldarg_0)\n      constructorIL.Emit(OpCodes.Ldarg_1)\n      constructorIL.Emit(OpCodes.Stfld, myFieldBuilder)\n      constructorIL.Emit(OpCodes.Ret)\n      \n      &#39; Create the MyMethod method.\n      Dim myMethodBuilder As MethodBuilder =myTypeBuilder.DefineMethod(&quot;MyMethod&quot;, _\n                           MethodAttributes.Public, GetType(String), Nothing)\n      Dim methodIL As ILGenerator = myMethodBuilder.GetILGenerator()\n      methodIL.Emit(OpCodes.Ldarg_0)\n      methodIL.Emit(OpCodes.Ldfld, myFieldBuilder)\n      methodIL.Emit(OpCodes.Ret)\n      If myFieldBuilder.Attributes.Equals(FieldAttributes.Static) Then\n         Console.WriteLine(&quot;Field attribute defined as Static&quot;)\n      Else\n         If myFieldBuilder.Attributes.Equals(FieldAttributes.Static Or FieldAttributes.Private) Then\n            Console.WriteLine(&quot;Field attributes are Static and Private&quot;)\n         End If\n      End If\n      Console.WriteLine(&quot;ReflectedType of Field is: &quot; &amp; myFieldBuilder.ReflectedType.ToString())\n      Return myTypeBuilder.CreateType()\n\n   End Function &#39;CreateType\n\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Dim myType As Type = CreateType(Thread.GetDomain())\n      &#39; Create an instance of the &quot;HelloWorld&quot; class.\n      Dim helloWorld As Object = Activator.CreateInstance(myType, New Object() { &quot;HelloWorld&quot; })\n      &#39; Invoke the &quot;MyMethod&quot;  of the &quot;MyClass&quot;.\n      Dim myObject As Object = myType.InvokeMember(&quot;MyMethod&quot;, _\n               BindingFlags.InvokeMethod, Nothing, helloWorld, Nothing)\n      Console.WriteLine(&quot;MyClass.MyMethod returned: &quot;&quot;&quot; &amp; myObject &amp; &quot;&quot;&quot;&quot;)\n   End Sub &#39;Main\nEnd Class &#39;FieldBuilder_Sample\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_GetCustomAttributes_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes defined for this field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Controls inheritance of custom attributes from base classes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> representing all the custom attributes of the constructor represented by this <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_GetCustomAttributes_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_GetCustomAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCustomAttributes(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns all the custom attributes defined for this field identified by the given type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object[] GetCustomAttributes (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The custom attribute type.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Controls inheritance of custom attributes from base classes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </div>\r\n                  <p>An array of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> representing all the custom attributes of the constructor represented by this <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_GetToken\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_GetToken_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetToken()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the token representing this field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.Emit.FieldToken GetToken ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.fieldtoken\" data-linktype=\"relative-path\">FieldToken</a></div>\r\n                  </div>\r\n                  <p>Returns the <a class=\"xref\" href=\"system.reflection.emit.fieldtoken\" data-linktype=\"relative-path\">FieldToken</a> object that represents the token for this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_GetValue_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_GetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the value of the field supported by the given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override object GetValue (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to access the field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> containing the value of the field reflected by this instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the field is <code>static</code>, the <code>obj</code> parameter is ignored. For non-static fields, <code>obj</code> should be an instance of a class that inherits or declares the field.  </p>\n<p> The return type of GetValue is <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. For example, if the field holds a Boolean primitive value, an instance of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> with the appropriate Boolean value is returned. Before returning the value, GetValue checks to see if the user has access permission.  </p>\n<p> Access restrictions are ignored for fully-trusted code. <code>Private</code> constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_IsDefined_System_Type_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_IsDefined_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsDefined(Type,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether an attribute having the specified type is defined on a field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsDefined (Type attributeType, bool inherit);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>attributeType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type of the attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inherit</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Controls inheritance of custom attributes from base classes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if one or more instance of <code>attributeType</code> is defined on this field; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not currently supported. Retrieve the field using <span class=\"xref\">stem.Type.GetField*</span> and call <span class=\"xref\">stem.Reflection.MemberInfo.IsDefined*</span> on the returned <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_SetConstant_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_SetConstant_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetConstant(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the default value of this field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetConstant (object defaultValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>defaultValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new default value for this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The field is not one of the supported types.  </p>\n<p> -or-  </p>\n<p> The type of <code>defaultValue</code> does not match the type of the field.  </p>\n<p> -or-  </p>\n<p> The field is of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> or other reference type, <code>defaultValue</code> is not <code>null</code>, and the value cannot be assigned to the reference type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>defaultValue</code> is restricted to the following types: <code>Boolean</code>, <code>SByte</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Byte</code>, <code>UInt16</code>, <code>UInt32</code>, <code>UInt64</code>, <code>Single</code>, <code>Double</code>, <code>DateTime</code>, <code>Char</code>, <code>String</code>, and <code>Enum</code>. If the field type is a reference type, CLS compliance requires <code>defaultValue</code> to be <code>null</code>. However, starting with the <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/net-v40-long-md.md&quot; -->.NET Framework 4<!--END INCLUDE -->, <code>defaultValue</code> can be non-null for a reference type as long as the value can be assigned to that reference type. For example, an <code>Int32</code> value can be assigned to a field of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. This is not CLS-compliant, but it can be useful in interop scenarios.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_SetCustomAttribute_System_Reflection_Emit_CustomAttributeBuilder_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(CustomAttributeBuilder)</div>        \r\n          </div>\r\n    \r\n            <p>Sets a custom attribute using a custom attribute builder.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>customBuilder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An instance of a helper class to define the custom attribute.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The parent type of this field is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> in the context of <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a>, using a <a class=\"xref\" href=\"system.reflection.emit.customattributebuilder\" data-linktype=\"relative-path\">CustomAttributeBuilder</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"FieldBuilder_SetCustomAttributes#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute1: public Attribute\n{\npublic:\n   String^ myCustomAttributeValue;\n   MyAttribute1( String^ myString )\n   {\n      myCustomAttributeValue = myString;\n   }\n};\n\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute2: public Attribute\n{\npublic:\n   bool myCustomAttributeValue;\n   MyAttribute2( bool myBool )\n   {\n      myCustomAttributeValue = myBool;\n   }\n};\n\nType^ CreateCallee( AppDomain^ currentDomain )\n{\n   // Create a simple name for the assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n   // Create the called dynamic assembly.\n   AssemblyBuilder^ myAssemblyBuilder = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n   ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n   // Define a public class named &#39;CustomClass&#39; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;CustomClass&quot;, TypeAttributes::Public );\n\n   // Define a private String field named &#39;MyField&#39; in the type.\n   FieldBuilder^ myFieldBuilder = myTypeBuilder-&gt;DefineField( &quot;MyField&quot;, String::typeid, FieldAttributes::Public );\n   Type^ myAttributeType1 = MyAttribute1::typeid;\n\n   // Create a Constructorinfo Object* for attribute &#39;MyAttribute1&#39;.\n   array&lt;Type^&gt;^type1 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo = myAttributeType1-&gt;GetConstructor( type1 );\n\n   // Create the CustomAttribute instance of attribute of type &#39;MyAttribute1&#39;.\n   array&lt;Object^&gt;^obj1 = {&quot;Test&quot;};\n   CustomAttributeBuilder^ attributeBuilder = gcnew CustomAttributeBuilder( myConstructorInfo,obj1 );\n\n   // Set the CustomAttribute &#39;MyAttribute1&#39; to the Field.\n   myFieldBuilder-&gt;SetCustomAttribute( attributeBuilder );\n   Type^ myAttributeType2 = MyAttribute2::typeid;\n\n   // Create a Constructorinfo Object* for attribute &#39;MyAttribute2&#39;.\n   array&lt;Type^&gt;^type2 = {bool::typeid};\n   ConstructorInfo^ myConstructorInfo2 = myAttributeType2-&gt;GetConstructor( type2 );\n\n   // Set the CustomAttribute &#39;MyAttribute2&#39; to the Field.\n   array&lt;Byte&gt;^bytes = {01,00,01,00,00};\n   myFieldBuilder-&gt;SetCustomAttribute( myConstructorInfo2, bytes );\n\n   // Create a method.\n   array&lt;Type^&gt;^type3 = {String::typeid,int::typeid};\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, MethodAttributes::Public, nullptr, type3 );\n   ILGenerator^ myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n   myILGenerator-&gt;Emit( OpCodes::Ldarg_0 );\n   myILGenerator-&gt;Emit( OpCodes::Ldarg_1 );\n   myILGenerator-&gt;Emit( OpCodes::Stfld, myFieldBuilder );\n   myILGenerator-&gt;EmitWriteLine( &quot;Value of the Field is :&quot; );\n   myILGenerator-&gt;EmitWriteLine( myFieldBuilder );\n   myILGenerator-&gt;Emit( OpCodes::Ret );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   try\n   {\n      Type^ myCustomClass = CreateCallee( Thread::GetDomain() );\n\n      // Construct an instance of a type.\n      Object^ myObject = Activator::CreateInstance( myCustomClass );\n      Console::WriteLine( &quot;FieldBuilder Sample&quot; );\n\n      // Find a method in this type and call it on this Object*.\n      MethodInfo^ myMethodInfo = myCustomClass-&gt;GetMethod( &quot;MyMethod&quot; );\n      array&lt;Object^&gt;^obj1 = {&quot;Sample string&quot;,3};\n      myMethodInfo-&gt;Invoke( myObject, obj1 );\n\n      // Retrieve the values of Attributes applied to field and display to console.\n      array&lt;FieldInfo^&gt;^myFieldInfo = myCustomClass-&gt;GetFields();\n      for ( int i = 0; i &lt; myFieldInfo-&gt;Length; i++ )\n      {\n         array&lt;Object^&gt;^attributes = myFieldInfo[ i ]-&gt;GetCustomAttributes( true );\n         for ( int index = 0; index &lt; attributes-&gt;Length; index++ )\n         {\n            if ( dynamic_cast&lt;MyAttribute1^&gt;(attributes[ index ]) )\n            {\n               MyAttribute1^ myCustomAttribute = safe_cast&lt;MyAttribute1^&gt;(attributes[ index ]);\n               Console::WriteLine( &quot;Attribute Value of (MyAttribute1): {0}&quot;, myCustomAttribute-&gt;myCustomAttributeValue );\n            }\n            if ( dynamic_cast&lt;MyAttribute2^&gt;(attributes[ index ]) )\n            {\n               MyAttribute2^ myCustomAttribute = safe_cast&lt;MyAttribute2^&gt;(attributes[ index ]);\n               Console::WriteLine( &quot;Attribute Value of (MyAttribute2): {0}&quot;, myCustomAttribute-&gt;myCustomAttributeValue );\n            }\n         }\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldBuilder_SetCustomAttributes#1\">\nusing System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nnamespace MySample\n{\n   [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\n   public class MyAttribute1 :Attribute\n   {\n      public string myCustomAttributeValue;\n      public MyAttribute1(string myString)\n      {\n         myCustomAttributeValue = myString;\n\n      }\n   }\n   [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\n   public class MyAttribute2 :Attribute\n   {\n      public bool myCustomAttributeValue;\n      public MyAttribute2(bool myBool)\n      {\n         myCustomAttributeValue = myBool;\n\n      }\n   }\n\n   class FieldBuilder_Sample\n   {\n      private static Type CreateCallee(AppDomain currentDomain)\n      {\n\n         // Create a simple name for the assembly.\n         AssemblyName myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n         // Create the called dynamic assembly.\n         AssemblyBuilder myAssemblyBuilder =\n            currentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         ModuleBuilder myModuleBuilder =\n                  myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;,&quot;EmittedModule.mod&quot;);\n         // Define a public class named &#39;CustomClass&#39; in the assembly.\n         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;CustomClass&quot;,\n            TypeAttributes.Public);\n         // Define a private String field named &#39;MyField&#39; in the type.\n         FieldBuilder myFieldBuilder =\n            myTypeBuilder.DefineField(&quot;MyField&quot;, typeof(String), FieldAttributes.Public);\n         Type myAttributeType1 = typeof(MyAttribute1);\n         // Create a Constructorinfo object for attribute &#39;MyAttribute1&#39;.\n         ConstructorInfo myConstructorInfo = myAttributeType1.GetConstructor(\n            new Type[1]{typeof(string)});\n         // Create the CustomAttribute instance of attribute of type &#39;MyAttribute1&#39;.\n         CustomAttributeBuilder attributeBuilder =\n                     new CustomAttributeBuilder( myConstructorInfo,new object[1]{&quot;Test&quot;});\n         // Set the CustomAttribute &#39;MyAttribute1&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(attributeBuilder);\n\n          Type myAttributeType2 = typeof(MyAttribute2);\n         // Create a Constructorinfo object for attribute &#39;MyAttribute2&#39;.\n        ConstructorInfo myConstructorInfo2 = myAttributeType2.GetConstructor(\n            new Type[1]{typeof(bool)});\n         // Set the CustomAttribute &#39;MyAttribute2&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(myConstructorInfo2,new byte[]{01,00,01,00,00});\n\n         // Create a method.\n         MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,\n            MethodAttributes.Public,null,new Type[2]{typeof(string),typeof(int)});\n\n         ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();\n         myILGenerator.Emit(OpCodes.Ldarg_0);\n         myILGenerator.Emit(OpCodes.Ldarg_1);\n         myILGenerator.Emit(OpCodes.Stfld, myFieldBuilder);\n         myILGenerator.EmitWriteLine(&quot;Value of the Field is :&quot;);\n         myILGenerator.EmitWriteLine(myFieldBuilder);\n         myILGenerator.Emit(OpCodes.Ret);\n\n         return myTypeBuilder.CreateType();\n      }\n      public static void Main()\n      {\n         try\n         {\n            Type myCustomClass = CreateCallee(Thread.GetDomain());\n            // Construct an instance of a type.\n            Object myObject = Activator.CreateInstance(myCustomClass);\n            Console.WriteLine( &quot;FieldBuilder Sample&quot;);\n            // Find a method in this type and call it on this object.\n            MethodInfo myMethodInfo = myCustomClass.GetMethod(&quot;MyMethod&quot;);\n            myMethodInfo.Invoke(myObject, new object[2]{&quot;Sample string&quot;,3});\n            // Retrieve the values of Attributes applied to field and display to console.\n            FieldInfo[] myFieldInfo = myCustomClass.GetFields();\n            for(int i =0;i&lt;myFieldInfo.Length;i++)\n            {\n               object[] attributes = myFieldInfo[i].GetCustomAttributes(true);\n               for(int index=0; index &lt; attributes.Length; index++)\n               {\n                  if(attributes[index] is MyAttribute1)\n                  {\n                     MyAttribute1 myCustomAttribute = (MyAttribute1)attributes[index];\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute1): &quot;\n                                       + myCustomAttribute.myCustomAttributeValue);\n                  }\n                  if(attributes[index] is MyAttribute2)\n                  {\n                     MyAttribute2 myCustomAttribute = (MyAttribute2)attributes[index];\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute2): &quot;\n                                       + myCustomAttribute.myCustomAttributeValue);\n                  }\n               }\n            }\n         }\n         catch (Exception e)\n         {\n            Console.WriteLine(&quot;Exception Caught &quot;+e.Message);\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_SetCustomAttributes#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nNamespace MySample\n   &lt;AttributeUsage(AttributeTargets.All, AllowMultiple:=False)&gt; Public Class MyAttribute1\n      Inherits Attribute\n      Public myCustomAttributeValue As String\n\n      Public Sub New(ByVal myString As String)\n         myCustomAttributeValue = myString\n      End Sub &#39;New\n   End Class &#39;MyAttribute1\n   &lt;AttributeUsage(AttributeTargets.All, AllowMultiple:=False)&gt; Public Class MyAttribute2\n      Inherits Attribute\n      Public myCustomAttributeValue As Boolean\n\n      Public Sub New(ByVal myBool As Boolean)\n         myCustomAttributeValue = myBool\n      End Sub &#39;New\n   End Class &#39;MyAttribute2\n\n   Class FieldBuilder_Sample\n\n      Private Shared Function CreateCallee(ByVal currentDomain As AppDomain) As Type\n         &#39; Create a simple name for the assembly.\n         Dim myAssemblyName As New AssemblyName()\n         myAssemblyName.Name = &quot;EmittedAssembly&quot;\n         &#39; Create the called dynamic assembly.\n         Dim myAssemblyBuilder As AssemblyBuilder = _\n                     currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                     AssemblyBuilderAccess.RunAndSave)\n         Dim myModuleBuilder As ModuleBuilder = _\n               myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, _\n                                                   &quot;EmittedModule.mod&quot;)\n         &#39; Define a public class named &#39;CustomClass&#39; in the assembly.\n         Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;CustomClass&quot;, _\n                                                TypeAttributes.Public)\n         &#39; Define a private String field named &#39;MyField&#39; in the type.\n         Dim myFieldBuilder As FieldBuilder = myTypeBuilder.DefineField(&quot;MyField&quot;, _\n                                       GetType(String), FieldAttributes.Public)\n         Dim myAttributeType1 As Type = GetType(MyAttribute1)\n         &#39; Create a Constructorinfo object for attribute &#39;MyAttribute1&#39;.\n         Dim myConstructorInfo As ConstructorInfo = _\n                     myAttributeType1.GetConstructor(New Type(0) {GetType(String)})\n         &#39; Create the CustomAttribute instance of attribute of type &#39;MyAttribute1&#39;.\n         Dim attributeBuilder As _\n         New CustomAttributeBuilder(myConstructorInfo, New Object(0) {&quot;Test&quot;})\n         &#39; Set the CustomAttribute &#39;MyAttribute1&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(attributeBuilder)\n\n         Dim myAttributeType2 As Type = GetType(MyAttribute2)\n         &#39; Create a Constructorinfo object for attribute &#39;MyAttribute2&#39;.\n         Dim myConstructorInfo2 As ConstructorInfo = _\n                  myAttributeType2.GetConstructor(New Type(0) {GetType(Boolean)})\n         &#39; Set the CustomAttribute &#39;MyAttribute2&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(myConstructorInfo2, New Byte() {1, 0, 1, 0, 0})\n\n         &#39; Create a method.\n         Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;, _\n               MethodAttributes.Public, Nothing, New Type(1) {GetType(String), GetType(Integer)})\n         Dim myILGenerator As ILGenerator = myMethodBuilder.GetILGenerator()\n         myILGenerator.Emit(OpCodes.Ldarg_0)\n         myILGenerator.Emit(OpCodes.Ldarg_1)\n         myILGenerator.Emit(OpCodes.Stfld, myFieldBuilder)\n         myILGenerator.EmitWriteLine(&quot;Value of the Field is :&quot;)\n         myILGenerator.EmitWriteLine(myFieldBuilder)\n         myILGenerator.Emit(OpCodes.Ret)\n\n         Return myTypeBuilder.CreateType()\n      End Function &#39;CreateCallee\n\n      Public Shared Sub Main()\n         Try\n            Dim myCustomClass As Type = CreateCallee(Thread.GetDomain())\n            &#39; Construct an instance of a type.\n            Dim myObject As Object = Activator.CreateInstance(myCustomClass)\n            Console.WriteLine(&quot;FieldBuilder Sample&quot;)\n            &#39; Find a method in this type and call it on this object.\n            Dim myMethodInfo As MethodInfo = myCustomClass.GetMethod(&quot;MyMethod&quot;)\n            myMethodInfo.Invoke(myObject, New Object(1) {&quot;Sample string&quot;, 3})\n            &#39; Retrieve the values of Attributes applied to field and display to console.\n            Dim myFieldInfo As FieldInfo() = myCustomClass.GetFields()\n            Dim i As Integer\n            For i = 0 To myFieldInfo.Length - 1\n               Dim attributes As Object() = myFieldInfo(i).GetCustomAttributes(True)\n               Dim index As Integer\n               For index = 0 To attributes.Length - 1\n                  If TypeOf attributes(index) Is MyAttribute1 Then\n                     Dim myCustomAttribute As MyAttribute1 =  _\n                                    CType(attributes(index), MyAttribute1)\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute1): &quot; _\n                                    + myCustomAttribute.myCustomAttributeValue.ToString())\n                  End If\n                  If TypeOf attributes(index) Is MyAttribute2 Then\n                     Dim myCustomAttribute As MyAttribute2 = _\n                                    CType(attributes(index), MyAttribute2)\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute2): &quot; _\n                                       + myCustomAttribute.myCustomAttributeValue.ToString())\n                  End If\n               Next index\n            Next i\n         Catch e as Exception\n            Console.WriteLine(&quot;Exception Caught &quot;+e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;FieldBuilder_Sample\nEnd Namespace &#39;MySample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_SetCustomAttribute_System_Reflection_ConstructorInfo_System_Byte___\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_SetCustomAttribute_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCustomAttribute(ConstructorInfo,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Sets a custom attribute using a specified custom attribute blob.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>con</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The constructor for the custom attribute.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binaryAttribute</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A byte blob representing the attributes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>con</code> or <code>binaryAttribute</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The parent type of this field is complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>See the metadata specification in the ECMA Partition II documentation for details on how to format <code>binaryAttribute</code>. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code sample illustrates the use of <code>SetCustomAttribute</code> in the context of <a class=\"xref\" href=\"system.reflection.emit.fieldbuilder\" data-linktype=\"relative-path\">FieldBuilder</a>, using a byte blob.  </p>\n<pre><code class=\"lang-cpp\" name=\"FieldBuilder_SetCustomAttributes#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute1: public Attribute\n{\npublic:\n   String^ myCustomAttributeValue;\n   MyAttribute1( String^ myString )\n   {\n      myCustomAttributeValue = myString;\n   }\n};\n\n\n[AttributeUsage(AttributeTargets::All,AllowMultiple=false)]\npublic ref class MyAttribute2: public Attribute\n{\npublic:\n   bool myCustomAttributeValue;\n   MyAttribute2( bool myBool )\n   {\n      myCustomAttributeValue = myBool;\n   }\n};\n\nType^ CreateCallee( AppDomain^ currentDomain )\n{\n   // Create a simple name for the assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n\n   // Create the called dynamic assembly.\n   AssemblyBuilder^ myAssemblyBuilder = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n   ModuleBuilder^ myModuleBuilder = myAssemblyBuilder-&gt;DefineDynamicModule( &quot;EmittedModule&quot;, &quot;EmittedModule.mod&quot; );\n\n   // Define a public class named &#39;CustomClass&#39; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;CustomClass&quot;, TypeAttributes::Public );\n\n   // Define a private String field named &#39;MyField&#39; in the type.\n   FieldBuilder^ myFieldBuilder = myTypeBuilder-&gt;DefineField( &quot;MyField&quot;, String::typeid, FieldAttributes::Public );\n   Type^ myAttributeType1 = MyAttribute1::typeid;\n\n   // Create a Constructorinfo Object* for attribute &#39;MyAttribute1&#39;.\n   array&lt;Type^&gt;^type1 = {String::typeid};\n   ConstructorInfo^ myConstructorInfo = myAttributeType1-&gt;GetConstructor( type1 );\n\n   // Create the CustomAttribute instance of attribute of type &#39;MyAttribute1&#39;.\n   array&lt;Object^&gt;^obj1 = {&quot;Test&quot;};\n   CustomAttributeBuilder^ attributeBuilder = gcnew CustomAttributeBuilder( myConstructorInfo,obj1 );\n\n   // Set the CustomAttribute &#39;MyAttribute1&#39; to the Field.\n   myFieldBuilder-&gt;SetCustomAttribute( attributeBuilder );\n   Type^ myAttributeType2 = MyAttribute2::typeid;\n\n   // Create a Constructorinfo Object* for attribute &#39;MyAttribute2&#39;.\n   array&lt;Type^&gt;^type2 = {bool::typeid};\n   ConstructorInfo^ myConstructorInfo2 = myAttributeType2-&gt;GetConstructor( type2 );\n\n   // Set the CustomAttribute &#39;MyAttribute2&#39; to the Field.\n   array&lt;Byte&gt;^bytes = {01,00,01,00,00};\n   myFieldBuilder-&gt;SetCustomAttribute( myConstructorInfo2, bytes );\n\n   // Create a method.\n   array&lt;Type^&gt;^type3 = {String::typeid,int::typeid};\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;MyMethod&quot;, MethodAttributes::Public, nullptr, type3 );\n   ILGenerator^ myILGenerator = myMethodBuilder-&gt;GetILGenerator();\n   myILGenerator-&gt;Emit( OpCodes::Ldarg_0 );\n   myILGenerator-&gt;Emit( OpCodes::Ldarg_1 );\n   myILGenerator-&gt;Emit( OpCodes::Stfld, myFieldBuilder );\n   myILGenerator-&gt;EmitWriteLine( &quot;Value of the Field is :&quot; );\n   myILGenerator-&gt;EmitWriteLine( myFieldBuilder );\n   myILGenerator-&gt;Emit( OpCodes::Ret );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   try\n   {\n      Type^ myCustomClass = CreateCallee( Thread::GetDomain() );\n\n      // Construct an instance of a type.\n      Object^ myObject = Activator::CreateInstance( myCustomClass );\n      Console::WriteLine( &quot;FieldBuilder Sample&quot; );\n\n      // Find a method in this type and call it on this Object*.\n      MethodInfo^ myMethodInfo = myCustomClass-&gt;GetMethod( &quot;MyMethod&quot; );\n      array&lt;Object^&gt;^obj1 = {&quot;Sample string&quot;,3};\n      myMethodInfo-&gt;Invoke( myObject, obj1 );\n\n      // Retrieve the values of Attributes applied to field and display to console.\n      array&lt;FieldInfo^&gt;^myFieldInfo = myCustomClass-&gt;GetFields();\n      for ( int i = 0; i &lt; myFieldInfo-&gt;Length; i++ )\n      {\n         array&lt;Object^&gt;^attributes = myFieldInfo[ i ]-&gt;GetCustomAttributes( true );\n         for ( int index = 0; index &lt; attributes-&gt;Length; index++ )\n         {\n            if ( dynamic_cast&lt;MyAttribute1^&gt;(attributes[ index ]) )\n            {\n               MyAttribute1^ myCustomAttribute = safe_cast&lt;MyAttribute1^&gt;(attributes[ index ]);\n               Console::WriteLine( &quot;Attribute Value of (MyAttribute1): {0}&quot;, myCustomAttribute-&gt;myCustomAttributeValue );\n            }\n            if ( dynamic_cast&lt;MyAttribute2^&gt;(attributes[ index ]) )\n            {\n               MyAttribute2^ myCustomAttribute = safe_cast&lt;MyAttribute2^&gt;(attributes[ index ]);\n               Console::WriteLine( &quot;Attribute Value of (MyAttribute2): {0}&quot;, myCustomAttribute-&gt;myCustomAttributeValue );\n            }\n         }\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"FieldBuilder_SetCustomAttributes#1\">\nusing System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nnamespace MySample\n{\n   [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\n   public class MyAttribute1 :Attribute\n   {\n      public string myCustomAttributeValue;\n      public MyAttribute1(string myString)\n      {\n         myCustomAttributeValue = myString;\n\n      }\n   }\n   [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]\n   public class MyAttribute2 :Attribute\n   {\n      public bool myCustomAttributeValue;\n      public MyAttribute2(bool myBool)\n      {\n         myCustomAttributeValue = myBool;\n\n      }\n   }\n\n   class FieldBuilder_Sample\n   {\n      private static Type CreateCallee(AppDomain currentDomain)\n      {\n\n         // Create a simple name for the assembly.\n         AssemblyName myAssemblyName = new AssemblyName();\n         myAssemblyName.Name = &quot;EmittedAssembly&quot;;\n         // Create the called dynamic assembly.\n         AssemblyBuilder myAssemblyBuilder =\n            currentDomain.DefineDynamicAssembly(myAssemblyName, AssemblyBuilderAccess.RunAndSave);\n         ModuleBuilder myModuleBuilder =\n                  myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;,&quot;EmittedModule.mod&quot;);\n         // Define a public class named &#39;CustomClass&#39; in the assembly.\n         TypeBuilder myTypeBuilder = myModuleBuilder.DefineType(&quot;CustomClass&quot;,\n            TypeAttributes.Public);\n         // Define a private String field named &#39;MyField&#39; in the type.\n         FieldBuilder myFieldBuilder =\n            myTypeBuilder.DefineField(&quot;MyField&quot;, typeof(String), FieldAttributes.Public);\n         Type myAttributeType1 = typeof(MyAttribute1);\n         // Create a Constructorinfo object for attribute &#39;MyAttribute1&#39;.\n         ConstructorInfo myConstructorInfo = myAttributeType1.GetConstructor(\n            new Type[1]{typeof(string)});\n         // Create the CustomAttribute instance of attribute of type &#39;MyAttribute1&#39;.\n         CustomAttributeBuilder attributeBuilder =\n                     new CustomAttributeBuilder( myConstructorInfo,new object[1]{&quot;Test&quot;});\n         // Set the CustomAttribute &#39;MyAttribute1&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(attributeBuilder);\n\n          Type myAttributeType2 = typeof(MyAttribute2);\n         // Create a Constructorinfo object for attribute &#39;MyAttribute2&#39;.\n        ConstructorInfo myConstructorInfo2 = myAttributeType2.GetConstructor(\n            new Type[1]{typeof(bool)});\n         // Set the CustomAttribute &#39;MyAttribute2&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(myConstructorInfo2,new byte[]{01,00,01,00,00});\n\n         // Create a method.\n         MethodBuilder myMethodBuilder= myTypeBuilder.DefineMethod(&quot;MyMethod&quot;,\n            MethodAttributes.Public,null,new Type[2]{typeof(string),typeof(int)});\n\n         ILGenerator myILGenerator = myMethodBuilder.GetILGenerator();\n         myILGenerator.Emit(OpCodes.Ldarg_0);\n         myILGenerator.Emit(OpCodes.Ldarg_1);\n         myILGenerator.Emit(OpCodes.Stfld, myFieldBuilder);\n         myILGenerator.EmitWriteLine(&quot;Value of the Field is :&quot;);\n         myILGenerator.EmitWriteLine(myFieldBuilder);\n         myILGenerator.Emit(OpCodes.Ret);\n\n         return myTypeBuilder.CreateType();\n      }\n      public static void Main()\n      {\n         try\n         {\n            Type myCustomClass = CreateCallee(Thread.GetDomain());\n            // Construct an instance of a type.\n            Object myObject = Activator.CreateInstance(myCustomClass);\n            Console.WriteLine( &quot;FieldBuilder Sample&quot;);\n            // Find a method in this type and call it on this object.\n            MethodInfo myMethodInfo = myCustomClass.GetMethod(&quot;MyMethod&quot;);\n            myMethodInfo.Invoke(myObject, new object[2]{&quot;Sample string&quot;,3});\n            // Retrieve the values of Attributes applied to field and display to console.\n            FieldInfo[] myFieldInfo = myCustomClass.GetFields();\n            for(int i =0;i&lt;myFieldInfo.Length;i++)\n            {\n               object[] attributes = myFieldInfo[i].GetCustomAttributes(true);\n               for(int index=0; index &lt; attributes.Length; index++)\n               {\n                  if(attributes[index] is MyAttribute1)\n                  {\n                     MyAttribute1 myCustomAttribute = (MyAttribute1)attributes[index];\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute1): &quot;\n                                       + myCustomAttribute.myCustomAttributeValue);\n                  }\n                  if(attributes[index] is MyAttribute2)\n                  {\n                     MyAttribute2 myCustomAttribute = (MyAttribute2)attributes[index];\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute2): &quot;\n                                       + myCustomAttribute.myCustomAttributeValue);\n                  }\n               }\n            }\n         }\n         catch (Exception e)\n         {\n            Console.WriteLine(&quot;Exception Caught &quot;+e.Message);\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_SetCustomAttributes#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nNamespace MySample\n   &lt;AttributeUsage(AttributeTargets.All, AllowMultiple:=False)&gt; Public Class MyAttribute1\n      Inherits Attribute\n      Public myCustomAttributeValue As String\n\n      Public Sub New(ByVal myString As String)\n         myCustomAttributeValue = myString\n      End Sub &#39;New\n   End Class &#39;MyAttribute1\n   &lt;AttributeUsage(AttributeTargets.All, AllowMultiple:=False)&gt; Public Class MyAttribute2\n      Inherits Attribute\n      Public myCustomAttributeValue As Boolean\n\n      Public Sub New(ByVal myBool As Boolean)\n         myCustomAttributeValue = myBool\n      End Sub &#39;New\n   End Class &#39;MyAttribute2\n\n   Class FieldBuilder_Sample\n\n      Private Shared Function CreateCallee(ByVal currentDomain As AppDomain) As Type\n         &#39; Create a simple name for the assembly.\n         Dim myAssemblyName As New AssemblyName()\n         myAssemblyName.Name = &quot;EmittedAssembly&quot;\n         &#39; Create the called dynamic assembly.\n         Dim myAssemblyBuilder As AssemblyBuilder = _\n                     currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                     AssemblyBuilderAccess.RunAndSave)\n         Dim myModuleBuilder As ModuleBuilder = _\n               myAssemblyBuilder.DefineDynamicModule(&quot;EmittedModule&quot;, _\n                                                   &quot;EmittedModule.mod&quot;)\n         &#39; Define a public class named &#39;CustomClass&#39; in the assembly.\n         Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;CustomClass&quot;, _\n                                                TypeAttributes.Public)\n         &#39; Define a private String field named &#39;MyField&#39; in the type.\n         Dim myFieldBuilder As FieldBuilder = myTypeBuilder.DefineField(&quot;MyField&quot;, _\n                                       GetType(String), FieldAttributes.Public)\n         Dim myAttributeType1 As Type = GetType(MyAttribute1)\n         &#39; Create a Constructorinfo object for attribute &#39;MyAttribute1&#39;.\n         Dim myConstructorInfo As ConstructorInfo = _\n                     myAttributeType1.GetConstructor(New Type(0) {GetType(String)})\n         &#39; Create the CustomAttribute instance of attribute of type &#39;MyAttribute1&#39;.\n         Dim attributeBuilder As _\n         New CustomAttributeBuilder(myConstructorInfo, New Object(0) {&quot;Test&quot;})\n         &#39; Set the CustomAttribute &#39;MyAttribute1&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(attributeBuilder)\n\n         Dim myAttributeType2 As Type = GetType(MyAttribute2)\n         &#39; Create a Constructorinfo object for attribute &#39;MyAttribute2&#39;.\n         Dim myConstructorInfo2 As ConstructorInfo = _\n                  myAttributeType2.GetConstructor(New Type(0) {GetType(Boolean)})\n         &#39; Set the CustomAttribute &#39;MyAttribute2&#39; to the Field.\n         myFieldBuilder.SetCustomAttribute(myConstructorInfo2, New Byte() {1, 0, 1, 0, 0})\n\n         &#39; Create a method.\n         Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;MyMethod&quot;, _\n               MethodAttributes.Public, Nothing, New Type(1) {GetType(String), GetType(Integer)})\n         Dim myILGenerator As ILGenerator = myMethodBuilder.GetILGenerator()\n         myILGenerator.Emit(OpCodes.Ldarg_0)\n         myILGenerator.Emit(OpCodes.Ldarg_1)\n         myILGenerator.Emit(OpCodes.Stfld, myFieldBuilder)\n         myILGenerator.EmitWriteLine(&quot;Value of the Field is :&quot;)\n         myILGenerator.EmitWriteLine(myFieldBuilder)\n         myILGenerator.Emit(OpCodes.Ret)\n\n         Return myTypeBuilder.CreateType()\n      End Function &#39;CreateCallee\n\n      Public Shared Sub Main()\n         Try\n            Dim myCustomClass As Type = CreateCallee(Thread.GetDomain())\n            &#39; Construct an instance of a type.\n            Dim myObject As Object = Activator.CreateInstance(myCustomClass)\n            Console.WriteLine(&quot;FieldBuilder Sample&quot;)\n            &#39; Find a method in this type and call it on this object.\n            Dim myMethodInfo As MethodInfo = myCustomClass.GetMethod(&quot;MyMethod&quot;)\n            myMethodInfo.Invoke(myObject, New Object(1) {&quot;Sample string&quot;, 3})\n            &#39; Retrieve the values of Attributes applied to field and display to console.\n            Dim myFieldInfo As FieldInfo() = myCustomClass.GetFields()\n            Dim i As Integer\n            For i = 0 To myFieldInfo.Length - 1\n               Dim attributes As Object() = myFieldInfo(i).GetCustomAttributes(True)\n               Dim index As Integer\n               For index = 0 To attributes.Length - 1\n                  If TypeOf attributes(index) Is MyAttribute1 Then\n                     Dim myCustomAttribute As MyAttribute1 =  _\n                                    CType(attributes(index), MyAttribute1)\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute1): &quot; _\n                                    + myCustomAttribute.myCustomAttributeValue.ToString())\n                  End If\n                  If TypeOf attributes(index) Is MyAttribute2 Then\n                     Dim myCustomAttribute As MyAttribute2 = _\n                                    CType(attributes(index), MyAttribute2)\n                     Console.WriteLine(&quot;Attribute Value of (MyAttribute2): &quot; _\n                                       + myCustomAttribute.myCustomAttributeValue.ToString())\n                  End If\n               Next index\n            Next i\n         Catch e as Exception\n            Console.WriteLine(&quot;Exception Caught &quot;+e.Message)\n         End Try\n      End Sub &#39;Main\n   End Class &#39;FieldBuilder_Sample\nEnd Namespace &#39;MySample\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_SetMarshal_System_Reflection_Emit_UnmanagedMarshal_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_SetMarshal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetMarshal(UnmanagedMarshal)</div>        \r\n          </div>\r\n    \r\n            <p>Describes the native marshaling of the field.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>unmanagedMarshal</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.emit.unmanagedmarshal\" data-linktype=\"relative-path\">UnmanagedMarshal</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A descriptor specifying the native marshalling of this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>unmanagedMarshal</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>SetMarshal</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldBuilder_SetOffset#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\nusing System.Runtime.CompilerServices;\n\npublic class FieldBuilder_Sample\n{\n   public static Type CreateType(AppDomain currentDomain)\n   {\n      // Create an assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;;\n      AssemblyBuilder myAssembly =\n         currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in Dynamic Assembly.\n      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule(&quot;MyModule&quot;,&quot;MyModule.mod&quot;);\n      // Define a public class named &quot;MyClass&quot; in the assembly.\n      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType(&quot;MyClass&quot;,TypeAttributes.Public);\n      TypeBuilder myTypeBuilder2 = myModuleBuilder.DefineType(&quot;MyClass2&quot;,\n         TypeAttributes.Public|TypeAttributes.BeforeFieldInit|TypeAttributes.SequentialLayout|TypeAttributes.AnsiClass|TypeAttributes.Sealed);\n      FieldBuilder myFieldBuilder1= myTypeBuilder2.DefineField(&quot;myBytes1&quot;,\n                                    typeof(byte),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder2= myTypeBuilder2.DefineField(&quot;myBytes2&quot;,\n                                    typeof(byte),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder3= myTypeBuilder2.DefineField(&quot;myErrorCode&quot;,\n                                    typeof(short),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder4= myTypeBuilder2.DefineField(&quot;myReserved1&quot;,\n                                    typeof(short),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder5= myTypeBuilder2.DefineField(&quot;myReserved2&quot;,\n                                    typeof(short),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder6= myTypeBuilder2.DefineField(&quot;myPathName&quot;,\n                                    typeof(char[]),FieldAttributes.Public);\n      myFieldBuilder6.SetMarshal(UnmanagedMarshal.DefineByValArray(128)); \n      myFieldBuilder6.SetOffset(4);\n      Type myType1 = myTypeBuilder2.CreateType();  \n      // Create the PInvoke method for &#39;OpenFile&#39; method of &#39;Kernel32.dll&#39;.\n      Type[] myParameters={ typeof(string), myType1 ,typeof(uint)}; \n      MethodBuilder myMethodBuilder= myTypeBuilder.DefinePInvokeMethod(&quot;OpenFile&quot;,\n                                     &quot;kernel32.dll&quot;,MethodAttributes.Public|MethodAttributes.Static|MethodAttributes.HideBySig,\n                                       CallingConventions.Standard,typeof(IntPtr),\n                                       myParameters,CallingConvention.Winapi,CharSet.None);\n      Type myAttributeType = typeof(MethodImplAttribute);\n      ConstructorInfo myConstructorInfo = \n         myAttributeType.GetConstructor(new Type[1]{typeof(MethodImplOptions)});\n      CustomAttributeBuilder myAttributeBuilder = new CustomAttributeBuilder(myConstructorInfo,\n                                                   new object[1]{MethodImplOptions.PreserveSig});\n      myMethodBuilder.SetCustomAttribute(myAttributeBuilder);\n      ParameterBuilder myParameterBuilder2=myMethodBuilder.DefineParameter(2,\n                                            ParameterAttributes.Out,&quot;myClass2&quot;);\n      Type myType=myTypeBuilder.CreateType();\n      myAssembly.Save(&quot;EmittedAssembly.dll&quot;);\n      return myType;\n   }\n\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      try\n      {\n         Type myType = CreateType(Thread.GetDomain());\n         Type myClass2 = myType.Module.GetType(&quot;MyClass2&quot;); \n         object myParam2 = Activator.CreateInstance(myClass2);\n         uint myUint=0x00000800;\n         object[] myArgs= {&quot;MyFile.Txt&quot;,myParam2,myUint};\n         Object myObject  = myType.InvokeMember(&quot;OpenFile&quot;,BindingFlags.Public | \n            BindingFlags.InvokeMethod | BindingFlags.Static,null,null,myArgs);\n         Console.WriteLine(&quot;MyClass.OpenFile method returned: \\&quot;{0}\\&quot;&quot;, myObject);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;Exception Caught &quot;+e.Message);\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_SetOffset#1\">Imports System\nImports System.Runtime.InteropServices\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\nImports System.Runtime.CompilerServices\n\nPublic Class FieldBuilder_Sample\n\n   Public Shared Function CreateType(ByVal currentDomain As AppDomain) As Type\n\n      &#39; Create an assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                          AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in Dynamic Assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;MyModule&quot;, _\n                                            &quot;MyModule.mod&quot;)\n      &#39; Define a public class named &quot;MyClass&quot; in the assembly.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass&quot;, _\n                                         TypeAttributes.Public)\n      Dim myTypeBuilder2 As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass2&quot;, _\n         TypeAttributes.Public Or TypeAttributes.BeforeFieldInit Or _\n         TypeAttributes.SequentialLayout Or TypeAttributes.AnsiClass Or TypeAttributes.Sealed)\n      Dim myFieldBuilder1 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myBytes1&quot;, _\n         GetType(Byte), FieldAttributes.Public)\n      Dim myFieldBuilder2 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myBytes2&quot;, _\n         GetType(Byte), FieldAttributes.Public)\n      Dim myFieldBuilder3 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myErrorCode&quot;, _\n         GetType(Short), FieldAttributes.Public)\n      Dim myFieldBuilder4 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myReserved1&quot;, _\n         GetType(Short), FieldAttributes.Public)\n      Dim myFieldBuilder5 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myReserved2&quot;, _\n         GetType(Short), FieldAttributes.Public)\n      Dim myFieldBuilder6 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myPathName&quot;, _\n         GetType(Char()), FieldAttributes.Public)\n      myFieldBuilder6.SetMarshal(UnmanagedMarshal.DefineByValArray(128))\n      myFieldBuilder6.SetOffset(4)\n      Dim myType1 As Type = myTypeBuilder2.CreateType()\n      &#39; Create the PInvoke method for &#39;OpenFile&#39; method of &#39;Kernel32.dll&#39;.\n      Dim myParameters As Type() = {GetType(String), myType1, GetType(System.UInt32)}\n      Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefinePInvokeMethod(&quot;OpenFile&quot;, _\n         &quot;kernel32.dll&quot;, MethodAttributes.Public Or MethodAttributes.Static Or _\n         MethodAttributes.HideBySig, CallingConventions.Standard, GetType(IntPtr), _\n         myParameters, CallingConvention.Winapi, CharSet.None)\n      Dim myAttributeType As Type = GetType(MethodImplAttribute)\n      Dim myConstructorInfo As ConstructorInfo = myAttributeType.GetConstructor(New Type(0) _\n         {GetType(MethodImplOptions)})\n      Dim myAttributeBuilder As New CustomAttributeBuilder(myConstructorInfo, _\n         New Object() {MethodImplOptions.PreserveSig})\n      myMethodBuilder.SetCustomAttribute(myAttributeBuilder)\n      Dim myParameterBuilder2 As ParameterBuilder = myMethodBuilder.DefineParameter(2, _\n         ParameterAttributes.Out, &quot;myClass2&quot;)\n      Dim myType As Type = myTypeBuilder.CreateType()\n      myAssembly.Save(&quot;EmittedAssembly.dll&quot;)\n      Return myType\n   End Function &#39;CreateType\n\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Try\n         Dim myType As Type = CreateType(Thread.GetDomain())\n         Dim myClass2 As Type = myType.Module.GetType(&quot;MyClass2&quot;)\n         Dim myParam2 As Object = Activator.CreateInstance(myClass2)\n         Dim myUint As System.UInt32\n         myUint.Parse(&quot;800&quot;)\n\n         Dim myArgs As Object() = {&quot;MyFile.Txt&quot;, myParam2, myUint}\n         Dim myObject As Object = myType.InvokeMember(&quot;OpenFile&quot;, _\n                                    BindingFlags.Public Or BindingFlags.InvokeMethod Or _\n                                    BindingFlags.Static, Nothing, Nothing, myArgs)\n         Console.WriteLine(&quot;MyClass.OpenFile method returned: &#39;{0}&#39;&quot;, myObject)\n      Catch e As Exception\n         Console.WriteLine(&quot;Exception Caught: &quot; &amp; e.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;FieldBuilder_Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldBuilder_SetOffset#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::CompilerServices;\nType^ CreateType( AppDomain^ currentDomain )\n{\n   // Create an assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;DynamicAssembly&quot;;\n   AssemblyBuilder^ myAssembly = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n\n   // Create a dynamic module in Dynamic Assembly.\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;MyModule.mod&quot; );\n\n   // Define a public class named S&quot;MyClass&quot; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyClass&quot;, TypeAttributes::Public );\n   TypeBuilder^ myTypeBuilder2 = myModuleBuilder-&gt;DefineType( &quot;MyClass2&quot;, static_cast&lt;TypeAttributes&gt;(TypeAttributes::Public | TypeAttributes::BeforeFieldInit | TypeAttributes::SequentialLayout | TypeAttributes::AnsiClass | TypeAttributes::Sealed) );\n   FieldBuilder^ myFieldBuilder1 = myTypeBuilder2-&gt;DefineField( &quot;myBytes1&quot;, Byte::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder2 = myTypeBuilder2-&gt;DefineField( &quot;myBytes2&quot;, Byte::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder3 = myTypeBuilder2-&gt;DefineField( &quot;myErrorCode&quot;, short::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder4 = myTypeBuilder2-&gt;DefineField( &quot;myReserved1&quot;, short::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder5 = myTypeBuilder2-&gt;DefineField( &quot;myReserved2&quot;, short::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder6 = myTypeBuilder2-&gt;DefineField( &quot;myPathName&quot;, array&lt;char&gt;::typeid,FieldAttributes::Public );\n   myFieldBuilder6-&gt;SetMarshal( UnmanagedMarshal::DefineByValArray( 128 ) );\n   myFieldBuilder6-&gt;SetOffset( 4 );\n   Type^ myType1 = myTypeBuilder2-&gt;CreateType();\n\n   // Create the PInvoke method for &#39;OpenFile&#39; method of &#39;Kernel32.dll&#39;.\n   array&lt;Type^&gt;^myParameters = {String::typeid,myType1,UInt32::typeid};\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefinePInvokeMethod( &quot;OpenFile&quot;, &quot;kernel32.dll&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::HideBySig), CallingConventions::Standard, IntPtr::typeid, myParameters, CallingConvention::Winapi, CharSet::None );\n   Type^ myAttributeType = MethodImplAttribute::typeid;\n   array&lt;Type^&gt;^type1 = {MethodImplOptions::typeid};\n   ConstructorInfo^ myConstructorInfo = myAttributeType-&gt;GetConstructor( type1 );\n   array&lt;Object^&gt;^obj1 = {MethodImplOptions::PreserveSig};\n   CustomAttributeBuilder^ myAttributeBuilder = gcnew CustomAttributeBuilder( myConstructorInfo,obj1 );\n   myMethodBuilder-&gt;SetCustomAttribute( myAttributeBuilder );\n   ParameterBuilder^ myParameterBuilder2 = myMethodBuilder-&gt;DefineParameter( 2, ParameterAttributes::Out, &quot;myClass2&quot; );\n   Type^ myType = myTypeBuilder-&gt;CreateType();\n   myAssembly-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n   return myType;\n}\n\nint main()\n{\n   try\n   {\n      Type^ myType = CreateType( Thread::GetDomain() );\n      Type^ myClass2 = myType-&gt;Module-&gt;GetType( &quot;MyClass2&quot; );\n      Object^ myParam2 = Activator::CreateInstance( myClass2 );\n      UInt32 myUint = 0x00000800;\n      array&lt;Object^&gt;^myArgs = {&quot;MyFile.Txt&quot;,myParam2,myUint};\n      Object^ myObject = myType-&gt;InvokeMember( &quot;OpenFile&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::InvokeMethod | BindingFlags::Static), nullptr, nullptr, myArgs );\n      Console::WriteLine( &quot;MyClass::OpenFile method returned: \\&quot;{0}\\&quot;&quot;, myObject );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_SetOffset_System_Int32_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_SetOffset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetOffset(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the field layout.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetOffset (int iOffset);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iOffset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The offset of the field within the type containing this field.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The containing type has been created using <span class=\"xref\">stem.Reflection.Emit.TypeBuilder.CreateType*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>iOffset</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following code sample illustrates the use of <code>SetOffset</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"FieldBuilder_SetOffset#1\">using System;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Security.Permissions;\nusing System.Runtime.CompilerServices;\n\npublic class FieldBuilder_Sample\n{\n   public static Type CreateType(AppDomain currentDomain)\n   {\n      // Create an assembly.\n      AssemblyName myAssemblyName = new AssemblyName();\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;;\n      AssemblyBuilder myAssembly =\n         currentDomain.DefineDynamicAssembly(myAssemblyName,AssemblyBuilderAccess.RunAndSave);\n      // Create a dynamic module in Dynamic Assembly.\n      ModuleBuilder myModuleBuilder=myAssembly.DefineDynamicModule(&quot;MyModule&quot;,&quot;MyModule.mod&quot;);\n      // Define a public class named &quot;MyClass&quot; in the assembly.\n      TypeBuilder myTypeBuilder= myModuleBuilder.DefineType(&quot;MyClass&quot;,TypeAttributes.Public);\n      TypeBuilder myTypeBuilder2 = myModuleBuilder.DefineType(&quot;MyClass2&quot;,\n         TypeAttributes.Public|TypeAttributes.BeforeFieldInit|TypeAttributes.SequentialLayout|TypeAttributes.AnsiClass|TypeAttributes.Sealed);\n      FieldBuilder myFieldBuilder1= myTypeBuilder2.DefineField(&quot;myBytes1&quot;,\n                                    typeof(byte),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder2= myTypeBuilder2.DefineField(&quot;myBytes2&quot;,\n                                    typeof(byte),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder3= myTypeBuilder2.DefineField(&quot;myErrorCode&quot;,\n                                    typeof(short),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder4= myTypeBuilder2.DefineField(&quot;myReserved1&quot;,\n                                    typeof(short),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder5= myTypeBuilder2.DefineField(&quot;myReserved2&quot;,\n                                    typeof(short),FieldAttributes.Public);\n      FieldBuilder myFieldBuilder6= myTypeBuilder2.DefineField(&quot;myPathName&quot;,\n                                    typeof(char[]),FieldAttributes.Public);\n      myFieldBuilder6.SetMarshal(UnmanagedMarshal.DefineByValArray(128)); \n      myFieldBuilder6.SetOffset(4);\n      Type myType1 = myTypeBuilder2.CreateType();  \n      // Create the PInvoke method for &#39;OpenFile&#39; method of &#39;Kernel32.dll&#39;.\n      Type[] myParameters={ typeof(string), myType1 ,typeof(uint)}; \n      MethodBuilder myMethodBuilder= myTypeBuilder.DefinePInvokeMethod(&quot;OpenFile&quot;,\n                                     &quot;kernel32.dll&quot;,MethodAttributes.Public|MethodAttributes.Static|MethodAttributes.HideBySig,\n                                       CallingConventions.Standard,typeof(IntPtr),\n                                       myParameters,CallingConvention.Winapi,CharSet.None);\n      Type myAttributeType = typeof(MethodImplAttribute);\n      ConstructorInfo myConstructorInfo = \n         myAttributeType.GetConstructor(new Type[1]{typeof(MethodImplOptions)});\n      CustomAttributeBuilder myAttributeBuilder = new CustomAttributeBuilder(myConstructorInfo,\n                                                   new object[1]{MethodImplOptions.PreserveSig});\n      myMethodBuilder.SetCustomAttribute(myAttributeBuilder);\n      ParameterBuilder myParameterBuilder2=myMethodBuilder.DefineParameter(2,\n                                            ParameterAttributes.Out,&quot;myClass2&quot;);\n      Type myType=myTypeBuilder.CreateType();\n      myAssembly.Save(&quot;EmittedAssembly.dll&quot;);\n      return myType;\n   }\n\n   [PermissionSetAttribute(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public static void Main()\n   {\n      try\n      {\n         Type myType = CreateType(Thread.GetDomain());\n         Type myClass2 = myType.Module.GetType(&quot;MyClass2&quot;); \n         object myParam2 = Activator.CreateInstance(myClass2);\n         uint myUint=0x00000800;\n         object[] myArgs= {&quot;MyFile.Txt&quot;,myParam2,myUint};\n         Object myObject  = myType.InvokeMember(&quot;OpenFile&quot;,BindingFlags.Public | \n            BindingFlags.InvokeMethod | BindingFlags.Static,null,null,myArgs);\n         Console.WriteLine(&quot;MyClass.OpenFile method returned: \\&quot;{0}\\&quot;&quot;, myObject);\n      }\n      catch(Exception e)\n      {\n         Console.WriteLine(&quot;Exception Caught &quot;+e.Message);\n      }\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"FieldBuilder_SetOffset#1\">Imports System\nImports System.Runtime.InteropServices\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Security.Permissions\nImports System.Runtime.CompilerServices\n\nPublic Class FieldBuilder_Sample\n\n   Public Shared Function CreateType(ByVal currentDomain As AppDomain) As Type\n\n      &#39; Create an assembly.\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;DynamicAssembly&quot;\n      Dim myAssembly As AssemblyBuilder = currentDomain.DefineDynamicAssembly(myAssemblyName, _\n                                          AssemblyBuilderAccess.RunAndSave)\n      &#39; Create a dynamic module in Dynamic Assembly.\n      Dim myModuleBuilder As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;MyModule&quot;, _\n                                            &quot;MyModule.mod&quot;)\n      &#39; Define a public class named &quot;MyClass&quot; in the assembly.\n      Dim myTypeBuilder As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass&quot;, _\n                                         TypeAttributes.Public)\n      Dim myTypeBuilder2 As TypeBuilder = myModuleBuilder.DefineType(&quot;MyClass2&quot;, _\n         TypeAttributes.Public Or TypeAttributes.BeforeFieldInit Or _\n         TypeAttributes.SequentialLayout Or TypeAttributes.AnsiClass Or TypeAttributes.Sealed)\n      Dim myFieldBuilder1 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myBytes1&quot;, _\n         GetType(Byte), FieldAttributes.Public)\n      Dim myFieldBuilder2 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myBytes2&quot;, _\n         GetType(Byte), FieldAttributes.Public)\n      Dim myFieldBuilder3 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myErrorCode&quot;, _\n         GetType(Short), FieldAttributes.Public)\n      Dim myFieldBuilder4 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myReserved1&quot;, _\n         GetType(Short), FieldAttributes.Public)\n      Dim myFieldBuilder5 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myReserved2&quot;, _\n         GetType(Short), FieldAttributes.Public)\n      Dim myFieldBuilder6 As FieldBuilder = myTypeBuilder2.DefineField(&quot;myPathName&quot;, _\n         GetType(Char()), FieldAttributes.Public)\n      myFieldBuilder6.SetMarshal(UnmanagedMarshal.DefineByValArray(128))\n      myFieldBuilder6.SetOffset(4)\n      Dim myType1 As Type = myTypeBuilder2.CreateType()\n      &#39; Create the PInvoke method for &#39;OpenFile&#39; method of &#39;Kernel32.dll&#39;.\n      Dim myParameters As Type() = {GetType(String), myType1, GetType(System.UInt32)}\n      Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefinePInvokeMethod(&quot;OpenFile&quot;, _\n         &quot;kernel32.dll&quot;, MethodAttributes.Public Or MethodAttributes.Static Or _\n         MethodAttributes.HideBySig, CallingConventions.Standard, GetType(IntPtr), _\n         myParameters, CallingConvention.Winapi, CharSet.None)\n      Dim myAttributeType As Type = GetType(MethodImplAttribute)\n      Dim myConstructorInfo As ConstructorInfo = myAttributeType.GetConstructor(New Type(0) _\n         {GetType(MethodImplOptions)})\n      Dim myAttributeBuilder As New CustomAttributeBuilder(myConstructorInfo, _\n         New Object() {MethodImplOptions.PreserveSig})\n      myMethodBuilder.SetCustomAttribute(myAttributeBuilder)\n      Dim myParameterBuilder2 As ParameterBuilder = myMethodBuilder.DefineParameter(2, _\n         ParameterAttributes.Out, &quot;myClass2&quot;)\n      Dim myType As Type = myTypeBuilder.CreateType()\n      myAssembly.Save(&quot;EmittedAssembly.dll&quot;)\n      Return myType\n   End Function &#39;CreateType\n\n   &lt;PermissionSetAttribute(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Shared Sub Main()\n      Try\n         Dim myType As Type = CreateType(Thread.GetDomain())\n         Dim myClass2 As Type = myType.Module.GetType(&quot;MyClass2&quot;)\n         Dim myParam2 As Object = Activator.CreateInstance(myClass2)\n         Dim myUint As System.UInt32\n         myUint.Parse(&quot;800&quot;)\n\n         Dim myArgs As Object() = {&quot;MyFile.Txt&quot;, myParam2, myUint}\n         Dim myObject As Object = myType.InvokeMember(&quot;OpenFile&quot;, _\n                                    BindingFlags.Public Or BindingFlags.InvokeMethod Or _\n                                    BindingFlags.Static, Nothing, Nothing, myArgs)\n         Console.WriteLine(&quot;MyClass.OpenFile method returned: &#39;{0}&#39;&quot;, myObject)\n      Catch e As Exception\n         Console.WriteLine(&quot;Exception Caught: &quot; &amp; e.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;FieldBuilder_Sample\n</code></pre><pre><code class=\"lang-cpp\" name=\"FieldBuilder_SetOffset#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::CompilerServices;\nType^ CreateType( AppDomain^ currentDomain )\n{\n   // Create an assembly.\n   AssemblyName^ myAssemblyName = gcnew AssemblyName;\n   myAssemblyName-&gt;Name = &quot;DynamicAssembly&quot;;\n   AssemblyBuilder^ myAssembly = currentDomain-&gt;DefineDynamicAssembly( myAssemblyName, AssemblyBuilderAccess::RunAndSave );\n\n   // Create a dynamic module in Dynamic Assembly.\n   ModuleBuilder^ myModuleBuilder = myAssembly-&gt;DefineDynamicModule( &quot;MyModule&quot;, &quot;MyModule.mod&quot; );\n\n   // Define a public class named S&quot;MyClass&quot; in the assembly.\n   TypeBuilder^ myTypeBuilder = myModuleBuilder-&gt;DefineType( &quot;MyClass&quot;, TypeAttributes::Public );\n   TypeBuilder^ myTypeBuilder2 = myModuleBuilder-&gt;DefineType( &quot;MyClass2&quot;, static_cast&lt;TypeAttributes&gt;(TypeAttributes::Public | TypeAttributes::BeforeFieldInit | TypeAttributes::SequentialLayout | TypeAttributes::AnsiClass | TypeAttributes::Sealed) );\n   FieldBuilder^ myFieldBuilder1 = myTypeBuilder2-&gt;DefineField( &quot;myBytes1&quot;, Byte::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder2 = myTypeBuilder2-&gt;DefineField( &quot;myBytes2&quot;, Byte::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder3 = myTypeBuilder2-&gt;DefineField( &quot;myErrorCode&quot;, short::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder4 = myTypeBuilder2-&gt;DefineField( &quot;myReserved1&quot;, short::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder5 = myTypeBuilder2-&gt;DefineField( &quot;myReserved2&quot;, short::typeid, FieldAttributes::Public );\n   FieldBuilder^ myFieldBuilder6 = myTypeBuilder2-&gt;DefineField( &quot;myPathName&quot;, array&lt;char&gt;::typeid,FieldAttributes::Public );\n   myFieldBuilder6-&gt;SetMarshal( UnmanagedMarshal::DefineByValArray( 128 ) );\n   myFieldBuilder6-&gt;SetOffset( 4 );\n   Type^ myType1 = myTypeBuilder2-&gt;CreateType();\n\n   // Create the PInvoke method for &#39;OpenFile&#39; method of &#39;Kernel32.dll&#39;.\n   array&lt;Type^&gt;^myParameters = {String::typeid,myType1,UInt32::typeid};\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefinePInvokeMethod( &quot;OpenFile&quot;, &quot;kernel32.dll&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static | MethodAttributes::HideBySig), CallingConventions::Standard, IntPtr::typeid, myParameters, CallingConvention::Winapi, CharSet::None );\n   Type^ myAttributeType = MethodImplAttribute::typeid;\n   array&lt;Type^&gt;^type1 = {MethodImplOptions::typeid};\n   ConstructorInfo^ myConstructorInfo = myAttributeType-&gt;GetConstructor( type1 );\n   array&lt;Object^&gt;^obj1 = {MethodImplOptions::PreserveSig};\n   CustomAttributeBuilder^ myAttributeBuilder = gcnew CustomAttributeBuilder( myConstructorInfo,obj1 );\n   myMethodBuilder-&gt;SetCustomAttribute( myAttributeBuilder );\n   ParameterBuilder^ myParameterBuilder2 = myMethodBuilder-&gt;DefineParameter( 2, ParameterAttributes::Out, &quot;myClass2&quot; );\n   Type^ myType = myTypeBuilder-&gt;CreateType();\n   myAssembly-&gt;Save( &quot;EmittedAssembly.dll&quot; );\n   return myType;\n}\n\nint main()\n{\n   try\n   {\n      Type^ myType = CreateType( Thread::GetDomain() );\n      Type^ myClass2 = myType-&gt;Module-&gt;GetType( &quot;MyClass2&quot; );\n      Object^ myParam2 = Activator::CreateInstance( myClass2 );\n      UInt32 myUint = 0x00000800;\n      array&lt;Object^&gt;^myArgs = {&quot;MyFile.Txt&quot;,myParam2,myUint};\n      Object^ myObject = myType-&gt;InvokeMember( &quot;OpenFile&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::InvokeMethod | BindingFlags::Static), nullptr, nullptr, myArgs );\n      Console::WriteLine( &quot;MyClass::OpenFile method returned: \\&quot;{0}\\&quot;&quot;, myObject );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception Caught {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_SetValue_System_Object_System_Object_System_Reflection_BindingFlags_System_Reflection_Binder_System_Globalization_CultureInfo_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_SetValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetValue(Object,Object,BindingFlags,Binder,CultureInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the value of the field supported by the given object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void SetValue (object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object on which to access the field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>val</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to assign to the field.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>invokeAttr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.bindingflags\" data-linktype=\"relative-path\">BindingFlags</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A member of <code>IBinder</code> that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binder</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.binder\" data-linktype=\"relative-path\">Binder</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>culture</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The software preferences of a particular culture.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>This method is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method will assign the <code>val</code> parameter to the field reflected by this instance on <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a><code>obj</code>. If the field is static, <code>obj</code> will be ignored. For non-static fields, <code>obj</code> should be an instance of a class that inherits or declares the field.  </p>\n<p> The new value is passed as an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>. For example, if the field&#39;s type is Boolean, an instance of <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> with the appropriate Boolean value is passed. Before setting the value, SetValue checks to see if the user has access permission.  </p>\n<p> Access restrictions are ignored for fully-trusted code. <code>Private</code> constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method is currently not supported. As a workaround, retrieve the <a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a> by reflecting on the finished type and call <a class=\"xref\" href=\"system.reflection.fieldinfo#System_Reflection_FieldInfo_SetValue_\" data-linktype=\"relative-path\">SetValue</a> to set the value of the field.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldBuilder.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_Emit_FieldBuilder_System_Runtime_InteropServices__FieldBuilder_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_FieldBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _FieldBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.FieldBuilder.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.FieldBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.DeclaringType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.FieldHandle\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.FieldType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.GetCustomAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.GetToken\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.IsDefined\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.Module\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.Name\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.ReflectedType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.SetConstant\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.SetCustomAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.SetMarshal\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.SetOffset\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder.SetValue\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder._FieldBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder._FieldBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder._FieldBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.FieldBuilder._FieldBuilder.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"cdaa7133-95e8-6e0b-d7cf-e0ede5facb4d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\FieldBuilder.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines and represents a field. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection.Emit/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.FieldBuilder\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.Emit.FieldBuilder.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.Emit.FieldBuilder.yml","open_to_public_contributors":true,"api_name":["System.Reflection.Emit.FieldBuilder","System.Reflection.Emit.FieldBuilder.Attributes","System.Reflection.Emit.FieldBuilder.DeclaringType","System.Reflection.Emit.FieldBuilder.FieldHandle","System.Reflection.Emit.FieldBuilder.FieldType","System.Reflection.Emit.FieldBuilder.GetCustomAttributes","System.Reflection.Emit.FieldBuilder.GetToken","System.Reflection.Emit.FieldBuilder.GetValue","System.Reflection.Emit.FieldBuilder.IsDefined","System.Reflection.Emit.FieldBuilder.Module","System.Reflection.Emit.FieldBuilder.Name","System.Reflection.Emit.FieldBuilder.ReflectedType","System.Reflection.Emit.FieldBuilder.SetConstant","System.Reflection.Emit.FieldBuilder.SetCustomAttribute","System.Reflection.Emit.FieldBuilder.SetMarshal","System.Reflection.Emit.FieldBuilder.SetOffset","System.Reflection.Emit.FieldBuilder.SetValue","System.Reflection.Emit.FieldBuilder._FieldBuilder.GetIDsOfNames","System.Reflection.Emit.FieldBuilder._FieldBuilder.GetTypeInfo","System.Reflection.Emit.FieldBuilder._FieldBuilder.GetTypeInfoCount","System.Reflection.Emit.FieldBuilder._FieldBuilder.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.FieldBuilder","System::Reflection::Emit::FieldBuilder","System.Reflection.Emit.FieldBuilder.Attributes","System::Reflection::Emit::FieldBuilder::Attributes","System.Reflection.Emit.FieldBuilder.DeclaringType","System::Reflection::Emit::FieldBuilder::DeclaringType","System.Reflection.Emit.FieldBuilder.FieldHandle","System::Reflection::Emit::FieldBuilder::FieldHandle","System.Reflection.Emit.FieldBuilder.FieldType","System::Reflection::Emit::FieldBuilder::FieldType","System.Reflection.Emit.FieldBuilder.GetCustomAttributes","System::Reflection::Emit::FieldBuilder::GetCustomAttributes","System.Reflection.Emit.FieldBuilder.GetToken","System::Reflection::Emit::FieldBuilder::GetToken","System.Reflection.Emit.FieldBuilder.GetValue","System::Reflection::Emit::FieldBuilder::GetValue","System.Reflection.Emit.FieldBuilder.IsDefined","System::Reflection::Emit::FieldBuilder::IsDefined","System.Reflection.Emit.FieldBuilder.Module","System::Reflection::Emit::FieldBuilder::Module","System.Reflection.Emit.FieldBuilder.Name","System::Reflection::Emit::FieldBuilder::Name","System.Reflection.Emit.FieldBuilder.ReflectedType","System::Reflection::Emit::FieldBuilder::ReflectedType","System.Reflection.Emit.FieldBuilder.SetConstant","System::Reflection::Emit::FieldBuilder::SetConstant","System.Reflection.Emit.FieldBuilder.SetCustomAttribute","System::Reflection::Emit::FieldBuilder::SetCustomAttribute","System.Reflection.Emit.FieldBuilder.SetMarshal","System::Reflection::Emit::FieldBuilder::SetMarshal","System.Reflection.Emit.FieldBuilder.SetOffset","System::Reflection::Emit::FieldBuilder::SetOffset","System.Reflection.Emit.FieldBuilder.SetValue","System::Reflection::Emit::FieldBuilder::SetValue","System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#GetIDsOfNames","System::Reflection::Emit::FieldBuilder::System#Runtime#InteropServices#_FieldBuilder#GetIDsOfNames","System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#GetTypeInfo","System::Reflection::Emit::FieldBuilder::System#Runtime#InteropServices#_FieldBuilder#GetTypeInfo","System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#GetTypeInfoCount","System::Reflection::Emit::FieldBuilder::System#Runtime#InteropServices#_FieldBuilder#GetTypeInfoCount","System.Reflection.Emit.FieldBuilder.System#Runtime#InteropServices#_FieldBuilder#Invoke","System::Reflection::Emit::FieldBuilder::System#Runtime#InteropServices#_FieldBuilder#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"cdaa7133-95e8-6e0b-d7cf-e0ede5facb4d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Reflection.Emit\\FieldBuilder.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection.Emit/FieldBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FieldBuilder class | Microsoft Docs","_op_ogTitle":"FieldBuilder class","description":"Defines and represents a field. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.FieldBuilder","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.fieldbuilder","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.emit.fieldbuilder","fileRelativePath":"System.Reflection.Emit.FieldBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}