{"content":"    \r\n    <h1 id=\"System_Collections_Generic_IEnumerable_1\">\r\n      <span class=\"lang-csharp\">IEnumerable&lt;T&gt;</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of objects to enumerate.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> IEnumerable(T) is the base interface for collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace such as <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>, <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, and <a class=\"xref\" href=\"system.collections.generic.stack-1\" data-linktype=\"relative-path\">Stack&lt;T&gt;</a> and other generic collections such as <a class=\"xref\" href=\"system.collections.objectmodel.observablecollection-1\" data-linktype=\"relative-path\">ObservableCollection&lt;T&gt;</a> and <a class=\"xref\" href=\"system.collections.concurrent.concurrentstack-1\" data-linktype=\"relative-path\">ConcurrentStack&lt;T&gt;</a>. Collections that implement IEnumerable(T) can be enumerated by using the <code>foreach</code> statement. For the non-generic version of this interface, see <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">System.Collections.IEnumerable</a>.  </p>\n<p> For the non-generic version of this interface, see <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">System.Collections.IEnumerable</a>.  </p>\n<p> IEnumerable(T) contains a single method that you must implement when implementing this interface; <a class=\"xref\" href=\"system.collections.generic.ienumerable-1#System_Collections_Generic_IEnumerable_1_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a>, which returns an <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> object. The returned <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> provides the ability to iterate through the collection by exposing a <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property.</p>\n\r\n    \r\n    \r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_IEnumerable_1_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_IEnumerable_1_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_IEnumerable_1_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator<t></t></a></div>\r\n                  </div>\r\n                  <p>An enumerator that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The returned <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> provides the ability to iterate through the collection by exposing a <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property .You can use enumerators to read the data in a collection, but not to modify the collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called again as <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator does not have exclusive access to the collection so an enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is invalidated and you may get unexpected results. Also, enumerating a collection is not a thread-safe procedure. To guarantee thread-safety, you should lock the collection during enumerator or implement synchronization on the collection.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace aren&#39;t synchronized.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to implement the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface and uses that implementation to create a LINQ query. When you implement <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you must also implement <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> or, for C# only, you can use the <a href=\"../Topic/yield%20(C%23%20Reference).md\" data-linktype=\"relative-path\">yield</a> keyword. Implementing <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> also requires <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> to be implemented, which you will see in this example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.IEnumerableEx#1\">using System;\nusing System.IO;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class App\n{\n    // Excercise the Iterator and show that it&#39;s more\n    // performant.\n    public static void Main()\n    {\n        TestStreamReaderEnumerable();\n        Console.WriteLine(&quot;---&quot;);\n        TestReadingFile();\n    }\n\n    public static void TestStreamReaderEnumerable()\n\t{\n\t\t// Check the memory before the iterator is used.\n\t\tlong memoryBefore = GC.GetTotalMemory(true);\n      IEnumerable&lt;String&gt; stringsFound;\n\t\t// Open a file with the StreamReaderEnumerable and check for a string.\n      try {\n         stringsFound =\n               from line in new StreamReaderEnumerable(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt&quot;)\n               where line.Contains(&quot;string to search for&quot;)\n               select line;\n         Console.WriteLine(&quot;Found: &quot; + stringsFound.Count());\n      }\n      catch (FileNotFoundException) {\n         Console.WriteLine(@&quot;This example requires a file named C:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt.&quot;);\n         return;\n      }\n\n\t\t// Check the memory after the iterator and output it to the console.\n\t\tlong memoryAfter = GC.GetTotalMemory(false);\n\t\tConsole.WriteLine(&quot;Memory Used With Iterator = &nbsp;&nbsp;&nbsp;&nbsp;&quot;\n            + string.Format(((memoryAfter - memoryBefore) / 1000).ToString(), &quot;n&quot;) + &quot;kb&quot;);\n\t}\n\n    public static void TestReadingFile()\n\t{\n\t\tlong memoryBefore = GC.GetTotalMemory(true);\n      StreamReader sr;\n      try {\n         sr = File.OpenText(&quot;c:\\&nbsp;&nbsp;&nbsp;&nbsp;emp\\&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt&quot;);\n      }\n      catch (FileNotFoundException) {\n         Console.WriteLine(@&quot;This example requires a file named C:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt.&quot;);\n         return;\n      }\n\n        // Add the file contents to a generic list of strings.\n\t\tList&lt;string&gt; fileContents = new List&lt;string&gt;();\n\t\twhile (!sr.EndOfStream) {\n\t\t\tfileContents.Add(sr.ReadLine());\n\t\t}\n\n\t\t// Check for the string.\n\t\tvar stringsFound = \n            from line in fileContents\n            where line.Contains(&quot;string to search for&quot;)\n            select line;\n\n        sr.Close();\n        Console.WriteLine(&quot;Found: &quot; + stringsFound.Count());\n\n\t\t// Check the memory after when the iterator is not used, and output it to the console.\n\t\tlong memoryAfter = GC.GetTotalMemory(false);\n\t\tConsole.WriteLine(&quot;Memory Used Without Iterator = &nbsp;&nbsp;&nbsp;&nbsp;&quot; + \n            string.Format(((memoryAfter - memoryBefore) / 1000).ToString(), &quot;n&quot;) + &quot;kb&quot;);\n\t}\n}\n\n// A custom class that implements IEnumerable(T). When you implement IEnumerable(T), \n// you must also implement IEnumerable and IEnumerator(T).\npublic class StreamReaderEnumerable : IEnumerable&lt;string&gt;\n{\n    private string _filePath;\n    public StreamReaderEnumerable(string filePath)\n    {\n        _filePath = filePath;\n    }\n\n    // Must implement GetEnumerator, which returns a new StreamReaderEnumerator.\n    public IEnumerator&lt;string&gt; GetEnumerator()\n    {\n        return new StreamReaderEnumerator(_filePath);\n    }\n\n    // Must also implement IEnumerable.GetEnumerator, but implement as a private method.\n    private IEnumerator GetEnumerator1()\n    {\n        return this.GetEnumerator();\n    }\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator1();\n    }\n}\n\n// When you implement IEnumerable(T), you must also implement IEnumerator(T), \n// which will walk through the contents of the file one line at a time.\n// Implementing IEnumerator(T) requires that you implement IEnumerator and IDisposable.\npublic class StreamReaderEnumerator : IEnumerator&lt;string&gt;\n{\n    private StreamReader _sr;\n    public StreamReaderEnumerator(string filePath)\n    {\n        _sr = new StreamReader(filePath);\n    }\n\n    private string _current;\n    // Implement the IEnumerator(T).Current publicly, but implement \n    // IEnumerator.Current, which is also required, privately.\n    public string Current\n    {\n\n        get\n        {\n            if (_sr == null || _current == null)\n            {\n                throw new InvalidOperationException();\n            }\n\n            return _current;\n        }\n    }\n\n    private object Current1\n    {\n\n        get { return this.Current; }\n    }\n\n    object IEnumerator.Current\n    {\n        get { return Current1; }\n    }\n\n    // Implement MoveNext and Reset, which are required by IEnumerator.\n    public bool MoveNext()\n    {\n        _current = _sr.ReadLine();\n        if (_current == null)\n            return false;\n        return true;\n    }\n\n    public void Reset()\n    {\n        _sr.DiscardBufferedData();\n        _sr.BaseStream.Seek(0, SeekOrigin.Begin);\n        _current = null;\n    }\n\n    // Implement IDisposable, which is also implemented by IEnumerator(T).\n    private bool disposedValue = false;\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!this.disposedValue)\n        {\n            if (disposing)\n            {\n                // Dispose of managed resources.\n            }\n            _current = null;\n            if (_sr != null) {\n               _sr.Close();\n               _sr.Dispose();\n            }\n        }\n\n        this.disposedValue = true;\n    }\n\n     ~StreamReaderEnumerator()\n    {\n        Dispose(false);\n    }\n}\n// This example displays output similar to the following:\n//       Found: 2\n//       Memory Used With Iterator =     33kb\n//       ---\n//       Found: 2\n//       Memory Used Without Iterator =  206kb\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.IEnumerableEx#1\">Imports System.IO\nImports System.Collections\nImports System.Collections.Generic\nImports System.Linq\n\nPublic Module App\n   &#39; Excercise the Iterator and show that it&#39;s more performant.\n   Public Sub Main()\n      TestStreamReaderEnumerable()\n      Console.WriteLine(&quot;---&quot;)\n      TestReadingFile()\n   End Sub\n\n   Public Sub TestStreamReaderEnumerable()\n\t\t&#39; Check the memory before the iterator is used.\n\t\tDim memoryBefore As Long = GC.GetTotalMemory(true)\n      Dim stringsFound As IEnumerable(Of String)\n\t\t&#39; Open a file with the StreamReaderEnumerable and check for a string.\n      Try\n         stringsFound =\n               from line in new StreamReaderEnumerable(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt&quot;)\n               where line.Contains(&quot;string to search for&quot;)\n               select line\n         Console.WriteLine(&quot;Found: {0}&quot;, stringsFound.Count())\n      Catch e As FileNotFoundException\n         Console.WriteLine(&quot;This example requires a file named C:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt.&quot;)\n         Return\n      End Try\n\n\t\t&#39; Check the memory after the iterator and output it to the console.\n\t\tDim memoryAfter As Long = GC.GetTotalMemory(false)\n\t\tConsole.WriteLine(&quot;Memory Used with Iterator = {1}{0} kb&quot;,\n                        (memoryAfter - memoryBefore)\\1000, vbTab)\n   End Sub\n\n   Public Sub TestReadingFile()\n\t\tDim memoryBefore As Long = GC.GetTotalMemory(true)\n      Dim sr As StreamReader\n      Try\n         sr = File.OpenText(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt&quot;)\n      Catch e As FileNotFoundException\n         Console.WriteLine(&quot;This example requires a file named C:&nbsp;&nbsp;&nbsp;&nbsp;emp&nbsp;&nbsp;&nbsp;&nbsp;empFile.txt.&quot;)\n         Return\n      End Try\n\n        &#39; Add the file contents to a generic list of strings.\n\t\tDim fileContents As New List(Of String)()\n\t\tDo While Not sr.EndOfStream\n\t\t\tfileContents.Add(sr.ReadLine())\n      Loop\n\n\t\t&#39; Check for the string.\n\t\tDim stringsFound =\n            from line in fileContents\n            where line.Contains(&quot;string to search for&quot;)\n            select line\n\n      sr.Close()\n      Console.WriteLine(&quot;Found: {0}&quot;, stringsFound.Count())\n\n\t\t&#39; Check the memory after when the iterator is not used, and output it to the console.\n\t\tDim memoryAfter As Long = GC.GetTotalMemory(False)\n\t\tConsole.WriteLine(&quot;Memory Used without Iterator = {1}{0} kb&quot;,\n                        (memoryAfter - memoryBefore)\\1000, vbTab)\n   End Sub\nEnd Module\n\n&#39; A custom class that implements IEnumerable(T). When you implement IEnumerable(T), \n&#39; you must also implement IEnumerable and IEnumerator(T).\nPublic Class StreamReaderEnumerable : Implements IEnumerable(Of String)\n    Private _filePath As String\n    \n    Public Sub New(filePath As String)\n        _filePath = filePath\n    End Sub\n\n    &#39; Must implement GetEnumerator, which returns a new StreamReaderEnumerator.\n    Public Function GetEnumerator() As IEnumerator(Of String) _\n          Implements IEnumerable(Of String).GetEnumerator\n        Return New StreamReaderEnumerator(_filePath)\n    End Function\n\n    &#39; Must also implement IEnumerable.GetEnumerator, but implement as a private method.\n    Private Function GetEnumerator1() As IEnumerator _\n          Implements IEnumerable.GetEnumerator\n        Return Me.GetEnumerator()\n    End Function\nEnd Class\n\n&#39; When you implement IEnumerable(T), you must also implement IEnumerator(T), \n&#39; which will walk through the contents of the file one line at a time.\n&#39; Implementing IEnumerator(T) requires that you implement IEnumerator and IDisposable.\nPublic Class StreamReaderEnumerator : Implements IEnumerator(Of String)\n    Private _sr As StreamReader\n    \n    Public Sub New(filePath As String)\n        _sr = New StreamReader(filePath)\n    End Sub\n\n    Private _current As String\n\n    &#39; Implement the IEnumerator(T).Current Publicly, but implement \n    &#39; IEnumerator.Current, which is also required, privately.\n    Public ReadOnly Property Current As String _\n          Implements IEnumerator(Of String).Current\n        Get\n            If _sr Is Nothing OrElse _current Is Nothing\n                Throw New InvalidOperationException()\n            End If\n\n            Return _current\n        End Get\n    End Property\n\n    Private ReadOnly Property Current1 As Object _\n          Implements IEnumerator.Current\n        Get\n           Return Me.Current\n        End Get\n    End Property\n\n    &#39; Implement MoveNext and Reset, which are required by IEnumerator.\n    Public Function MoveNext() As Boolean _\n          Implements IEnumerator.MoveNext\n        _current = _sr.ReadLine()\n        if _current Is Nothing Then Return False\n\n        Return True\n    End Function\n\n    Public Sub Reset() _\n          Implements IEnumerator.Reset\n        _sr.DiscardBufferedData()\n        _sr.BaseStream.Seek(0, SeekOrigin.Begin)\n        _current = Nothing\n    End Sub\n\n    &#39; Implement IDisposable, which is also implemented by IEnumerator(T).\n    Private disposedValue As Boolean = False\n    Public Sub Dispose() _\n          Implements IDisposable.Dispose\n        Dispose(True)\n        GC.SuppressFinalize(Me)\n    End Sub\n\n    Protected Overridable Sub Dispose(disposing As Boolean)\n        If Not Me.disposedValue Then\n            If disposing Then\n                &#39; Dispose of managed resources.\n            End If\n\n            _current = Nothing\n            If _sr IsNot Nothing Then\n               _sr.Close()\n               _sr.Dispose()\n            End If\n        End If\n\n        Me.disposedValue = True\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Dispose(False)\n    End Sub\nEnd Class\n&#39; This example displays output similar to the following:\n&#39;       Found: 2\n&#39;       Memory Used With Iterator =     33kb\n&#39;       ---\n&#39;       Found: 2\n&#39;       Memory Used Without Iterator =  206kb\n</code></pre><p> For another C# example that demonstrates how to implement the <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface, see the <a href=\"http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593\" data-linktype=\"external\">Generics Sample</a>. This sample uses of the <code>yield</code> keyword instead of implementing <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a>.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.IEnumerable-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.IEnumerable-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IEnumerable&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"df495942-1a69-9985-448b-79099bbff274\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Generic\\IEnumerable`1.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Exposes the enumerator, which supports a simple iteration over a collection of a specified type.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Generic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.IEnumerable`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.IEnumerable-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.IEnumerable-1.yml","open_to_public_contributors":true,"api_name":["System.Collections.Generic.IEnumerable<T>","System.Collections.Generic.IEnumerable<T>.GetEnumerator"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.IEnumerable`1","System::Collections::Generic::IEnumerable`1","System.Collections.Generic.IEnumerable`1.GetEnumerator","System::Collections::Generic::IEnumerable`1::GetEnumerator"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"df495942-1a69-9985-448b-79099bbff274","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Generic\\IEnumerable`1.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Generic/IEnumerable`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IEnumerable<T> interface | Microsoft Docs","_op_ogTitle":"IEnumerable<T> interface","description":"Exposes the enumerator, which supports a simple iteration over a collection of a specified type.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.IEnumerable`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.ienumerable-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.ienumerable-1","fileRelativePath":"System.Collections.Generic.IEnumerable-1.html"},"themesRelativePathToOutputRoot":"_themes/"}