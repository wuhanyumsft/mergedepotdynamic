{"content":"    \r\n    <h1 id=\"System_Collections_ObjectModel_Collection_1\">\r\n      <span class=\"lang-csharp\">Collection&lt;T&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the base class for a generic collection.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]\n[System.Runtime.InteropServices.ComVisible(false)]\npublic class Collection&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of elements in the collection.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Collection&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The Collection(T) class can be used immediately by creating an instance of one of its constructed types; all you have to do is specify the type of object to be contained in the collection. In addition, you can derive your own collection type from any constructed type, or derive a generic collection type from the Collection(T) class itself.  </p>\n<p> The Collection(T) class provides protected methods that can be used to customize its behavior when adding and removing items, clearing the collection, or setting the value of an existing item.  </p>\n<p> Most Collection(T) objectscan be modified. However, a Collection(T) object that is initialized with a read-only <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> object cannot be modified. See <a class=\"xref\" href=\"system.collections.objectmodel.readonlycollection-1\" data-linktype=\"relative-path\">ReadOnlyCollection&lt;T&gt;</a> for a read-only version of this class.  </p>\n<p> Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  </p>\n<p> Collection(T) accepts <code>null</code> as a valid value for reference types and allows duplicate elements.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1__ctor\" data-linktype=\"self-bookmark\">Collection&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> class that is empty.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1__ctor_System_Collections_Generic_IList__0__\" data-linktype=\"self-bookmark\">Collection&lt;T&gt;(IList&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> class as a wrapper for the specified list.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements actually contained in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Items\" data-linktype=\"self-bookmark\">Items</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <span class=\"xref\">stem.Collections.Generic.IList`1</span> wrapper around the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Add__0_\" data-linktype=\"self-bookmark\">Add(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_ClearItems\" data-linktype=\"self-bookmark\">ClearItems()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Contains__0_\" data-linktype=\"self-bookmark\">Contains(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_CopyTo__0___System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_IndexOf__0_\" data-linktype=\"self-bookmark\">IndexOf(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Insert_System_Int32__0_\" data-linktype=\"self-bookmark\">Insert(Int32,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an element into the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_InsertItem_System_Int32__0_\" data-linktype=\"self-bookmark\">InsertItem(Int32,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an element into the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_Remove__0_\" data-linktype=\"self-bookmark\">Remove(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_RemoveItem_System_Int32_\" data-linktype=\"self-bookmark\">RemoveItem(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_SetItem_System_Int32__0_\" data-linktype=\"self-bookmark\">SetItem(Int32,T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Replaces the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_Generic_ICollection_T__IsReadOnly\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_Add_System_Object_\" data-linktype=\"self-bookmark\">IList.Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_Contains_System_Object_\" data-linktype=\"self-bookmark\">IList.Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IList.IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">IList.Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an item into the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_IsFixedSize\" data-linktype=\"self-bookmark\">IList.IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_IsReadOnly\" data-linktype=\"self-bookmark\">IList.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_Item_System_Int32_\" data-linktype=\"self-bookmark\">IList.Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ObjectModel_Collection_1_System_Collections_IList_Remove_System_Object_\" data-linktype=\"self-bookmark\">IList.Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1__ctor\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collection&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> class that is empty.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Collection ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings with the Collection(T) constructor, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1__ctor_System_Collections_Generic_IList__0__\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Collection&lt;T&gt;(IList&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> class as a wrapper for the specified list.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Collection (System.Collections.Generic.IList&lt;T&gt; list);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>list</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The list that is wrapped by the new collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>list</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements of the list are not copied. The list is wrapped by the collection, so that subsequent changes to the elements of the list are visible through the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Count\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements actually contained in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements actually contained in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the Count, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.ObjectModel.Collection`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default Item property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Items\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Items_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Items</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <span class=\"xref\">stem.Collections.Generic.IList`1</span> wrapper around the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.Generic.IList&lt;T&gt; Items { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList<t></t></a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.IList`1</span> wrapper around the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The wrapper provides the functionality of the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> class and exposes all the elements of the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Add__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(T)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Add (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be added to the end of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the Add method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Clear\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the Clear method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_ClearItems\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_ClearItems_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ClearItems()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void ClearItems ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to derive a collection class from a constructed type of the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> generic class, and how to override the protected <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_InsertItem_\" data-linktype=\"relative-path\">InsertItem</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveItem_\" data-linktype=\"relative-path\">RemoveItem</a>, ClearItems, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_SetItem_\" data-linktype=\"relative-path\">SetItem</a> methods to provide custom behavior for the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a>, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> methods, and for setting the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> The custom behavior provided by this example is a <code>Changed</code> notification event that is raised at the end of each of the protected methods. The <code>Dinosaurs</code> class inherits <code>Collection&lt;string&gt;</code> (<code>Collection(Of String)</code> in Visual Basic) and defines the <code>Changed</code> event, which uses a <code>DinosaursChangedEventArgs</code> class for the event information, and an enumeration to identify the kind of change.  </p>\n<p> The code example calls several properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> to demonstrate the custom event.  </p>\n<pre><code class=\"lang-cs\" name=\"ObjectModel.CollectionInherited#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Dinosaurs : Collection&lt;string&gt;\n{\n    public event EventHandler&lt;DinosaursChangedEventArgs&gt; Changed;\n\n    protected override void InsertItem(int index, string newItem)\n    {\n        base.InsertItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Added, newItem, null));\n        }\n    }\n\n    protected override void SetItem(int index, string newItem)\n    {\n        string replaced = Items[index];\n        base.SetItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Replaced, replaced, newItem));\n        }\n    }\n\n    protected override void RemoveItem(int index)\n    {\n        string removedItem = Items[index];\n        base.RemoveItem(index);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Removed, removedItem, null));\n        }\n    }\n\n    protected override void ClearItems()\n    {\n        base.ClearItems();\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Cleared, null, null));\n        }\n    }\n}\n\n// Event argument for the Changed event.\n//\npublic class DinosaursChangedEventArgs : EventArgs\n{\n    public readonly string ChangedItem;\n    public readonly ChangeType ChangeType;\n    public readonly string ReplacedWith;\n\n    public DinosaursChangedEventArgs(ChangeType change, string item, \n        string replacement)\n    {\n        ChangeType = change;\n        ChangedItem = item;\n        ReplacedWith = replacement;\n    }\n}\n\npublic enum ChangeType\n{\n    Added, \n    Removed, \n    Replaced, \n    Cleared\n};\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Dinosaurs dinosaurs = new Dinosaurs();\n\n        dinosaurs.Changed += ChangedHandler; \n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n\n        Display(dinosaurs);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n\n    private static void ChangedHandler(object source, \n        DinosaursChangedEventArgs e)\n    {\n\n        if (e.ChangeType==ChangeType.Replaced)\n        {\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, e.ChangedItem, \n                e.ReplacedWith);\n        }\n        else if(e.ChangeType==ChangeType.Cleared)\n        {\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;{0} was {1}.&quot;, e.ChangedItem, e.ChangeType);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPsitticosaurus was Added.\nCaudipteryx was Added.\nCompsognathus was Added.\nMuttaburrasaurus was Added.\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\nNanotyrannus was Added.\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\nNanotyrannus was replaced with Microraptor\n\nRemove(&quot;Microraptor&quot;)\nMicroraptor was Removed.\n\nRemoveAt(0)\nPsitticosaurus was Removed.\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.CollectionInherited#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Dinosaurs\n    Inherits Collection(Of String)\n\n    Public Event Changed As EventHandler(Of DinosaursChangedEventArgs)\n\n    Protected Overrides Sub InsertItem( _\n        ByVal index As Integer, ByVal newItem As String)\n\n        MyBase.InsertItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Added, newItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub SetItem(ByVal index As Integer, _\n        ByVal newItem As String)\n\n        Dim replaced As String = Items(index)\n        MyBase.SetItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Replaced, replaced, newItem))\n    End Sub\n\n    Protected Overrides Sub RemoveItem(ByVal index As Integer)\n\n        Dim removedItem As String = Items(index)\n        MyBase.RemoveItem(index)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Removed, removedItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub ClearItems()\n        MyBase.ClearItems()\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Cleared, Nothing, Nothing))\n    End Sub\n\nEnd Class\n\n&#39; Event argument for the Changed event.\n&#39;\nPublic Class DinosaursChangedEventArgs\n    Inherits EventArgs\n\n    Public ReadOnly ChangedItem As String\n    Public ReadOnly ChangeType As ChangeType\n    Public ReadOnly ReplacedWith As String\n\n    Public Sub New(ByVal change As ChangeType, ByVal item As String, _\n        ByVal replacement As String)\n\n        ChangeType = change\n        ChangedItem = item\n        ReplacedWith = replacement\n    End Sub\nEnd Class\n\nPublic Enum ChangeType\n    Added\n    Removed\n    Replaced\n    Cleared\nEnd Enum\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Dinosaurs\n\n        AddHandler dinosaurs.Changed, AddressOf ChangedHandler\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n\n        Display(dinosaurs)\n \n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\n\n    Private Shared Sub ChangedHandler(ByVal source As Object, _\n        ByVal e As DinosaursChangedEventArgs)\n\n        If e.ChangeType = ChangeType.Replaced Then\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, _\n                e.ChangedItem, e.ReplacedWith)\n\n        ElseIf e.ChangeType = ChangeType.Cleared Then\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;)\n\n        Else\n            Console.WriteLine(&quot;{0} was {1}.&quot;, _\n                e.ChangedItem, e.ChangeType)\n        End If\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Psitticosaurus was Added.\n&#39;Caudipteryx was Added.\n&#39;Compsognathus was Added.\n&#39;Muttaburrasaurus was Added.\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;Nanotyrannus was Added.\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;Nanotyrannus was replaced with Microraptor\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;Microraptor was Removed.\n&#39;\n&#39;RemoveAt(0)\n&#39;Psitticosaurus was Removed.\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Contains__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(T)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is found in the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> object is created using the default constructor, this method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list. If type <code>T</code> does not implement the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface, the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> method is used.  </p>\n<p> If the Collection object is created by passing an <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> object to the constructor, the Contains method will be determined by the <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> interface used by that <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> object.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_CopyTo__0___System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the source <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator<t></t></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerator`1</span> for the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_IndexOf__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(T)</div>        \r\n          </div>\r\n    \r\n            <p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.List`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The zero-based index of the first occurrence of <code>item</code> within the entire <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>, if found; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> is searched forward starting at the first element and ending at the last element.  </p>\n<p> This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the IndexOf method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Insert_System_Int32__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,T)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an element into the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Insert (int index, T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>item</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.ObjectModel.Collection`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, <code>item</code> is added to the end of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_InsertItem_System_Int32__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_InsertItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InsertItem(Int32,T)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an element into the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void InsertItem (int index, T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>item</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.ObjectModel.Collection`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InsertItem is meant to be overridden in a derived class. For a public method to insert an item in the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>, see <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> If <code>index</code> is equal to <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, <code>item</code> is added to the end of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to derive a collection class from a constructed type of the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> generic class, and how to override the protected InsertItem, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveItem_\" data-linktype=\"relative-path\">RemoveItem</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_ClearItems_\" data-linktype=\"relative-path\">ClearItems</a>, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_SetItem_\" data-linktype=\"relative-path\">SetItem</a> methods to provide custom behavior for the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a>, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> methods, and for setting the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> The custom behavior provided by this example is a <code>Changed</code> notification event that is raised at the end of each of the protected methods. The <code>Dinosaurs</code> class inherits <code>Collection&lt;string&gt;</code> (<code>Collection(Of String)</code> in Visual Basic) and defines the <code>Changed</code> event, which uses a <code>DinosaursChangedEventArgs</code> class for the event information, and an enumeration to identify the kind of change.  </p>\n<p> The code example calls several properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> to demonstrate the custom event.  </p>\n<pre><code class=\"lang-cs\" name=\"ObjectModel.CollectionInherited#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Dinosaurs : Collection&lt;string&gt;\n{\n    public event EventHandler&lt;DinosaursChangedEventArgs&gt; Changed;\n\n    protected override void InsertItem(int index, string newItem)\n    {\n        base.InsertItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Added, newItem, null));\n        }\n    }\n\n    protected override void SetItem(int index, string newItem)\n    {\n        string replaced = Items[index];\n        base.SetItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Replaced, replaced, newItem));\n        }\n    }\n\n    protected override void RemoveItem(int index)\n    {\n        string removedItem = Items[index];\n        base.RemoveItem(index);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Removed, removedItem, null));\n        }\n    }\n\n    protected override void ClearItems()\n    {\n        base.ClearItems();\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Cleared, null, null));\n        }\n    }\n}\n\n// Event argument for the Changed event.\n//\npublic class DinosaursChangedEventArgs : EventArgs\n{\n    public readonly string ChangedItem;\n    public readonly ChangeType ChangeType;\n    public readonly string ReplacedWith;\n\n    public DinosaursChangedEventArgs(ChangeType change, string item, \n        string replacement)\n    {\n        ChangeType = change;\n        ChangedItem = item;\n        ReplacedWith = replacement;\n    }\n}\n\npublic enum ChangeType\n{\n    Added, \n    Removed, \n    Replaced, \n    Cleared\n};\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Dinosaurs dinosaurs = new Dinosaurs();\n\n        dinosaurs.Changed += ChangedHandler; \n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n\n        Display(dinosaurs);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n\n    private static void ChangedHandler(object source, \n        DinosaursChangedEventArgs e)\n    {\n\n        if (e.ChangeType==ChangeType.Replaced)\n        {\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, e.ChangedItem, \n                e.ReplacedWith);\n        }\n        else if(e.ChangeType==ChangeType.Cleared)\n        {\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;{0} was {1}.&quot;, e.ChangedItem, e.ChangeType);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPsitticosaurus was Added.\nCaudipteryx was Added.\nCompsognathus was Added.\nMuttaburrasaurus was Added.\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\nNanotyrannus was Added.\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\nNanotyrannus was replaced with Microraptor\n\nRemove(&quot;Microraptor&quot;)\nMicroraptor was Removed.\n\nRemoveAt(0)\nPsitticosaurus was Removed.\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.CollectionInherited#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Dinosaurs\n    Inherits Collection(Of String)\n\n    Public Event Changed As EventHandler(Of DinosaursChangedEventArgs)\n\n    Protected Overrides Sub InsertItem( _\n        ByVal index As Integer, ByVal newItem As String)\n\n        MyBase.InsertItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Added, newItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub SetItem(ByVal index As Integer, _\n        ByVal newItem As String)\n\n        Dim replaced As String = Items(index)\n        MyBase.SetItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Replaced, replaced, newItem))\n    End Sub\n\n    Protected Overrides Sub RemoveItem(ByVal index As Integer)\n\n        Dim removedItem As String = Items(index)\n        MyBase.RemoveItem(index)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Removed, removedItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub ClearItems()\n        MyBase.ClearItems()\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Cleared, Nothing, Nothing))\n    End Sub\n\nEnd Class\n\n&#39; Event argument for the Changed event.\n&#39;\nPublic Class DinosaursChangedEventArgs\n    Inherits EventArgs\n\n    Public ReadOnly ChangedItem As String\n    Public ReadOnly ChangeType As ChangeType\n    Public ReadOnly ReplacedWith As String\n\n    Public Sub New(ByVal change As ChangeType, ByVal item As String, _\n        ByVal replacement As String)\n\n        ChangeType = change\n        ChangedItem = item\n        ReplacedWith = replacement\n    End Sub\nEnd Class\n\nPublic Enum ChangeType\n    Added\n    Removed\n    Replaced\n    Cleared\nEnd Enum\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Dinosaurs\n\n        AddHandler dinosaurs.Changed, AddressOf ChangedHandler\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n\n        Display(dinosaurs)\n \n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\n\n    Private Shared Sub ChangedHandler(ByVal source As Object, _\n        ByVal e As DinosaursChangedEventArgs)\n\n        If e.ChangeType = ChangeType.Replaced Then\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, _\n                e.ChangedItem, e.ReplacedWith)\n\n        ElseIf e.ChangeType = ChangeType.Cleared Then\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;)\n\n        Else\n            Console.WriteLine(&quot;{0} was {1}.&quot;, _\n                e.ChangedItem, e.ChangeType)\n        End If\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Psitticosaurus was Added.\n&#39;Caudipteryx was Added.\n&#39;Compsognathus was Added.\n&#39;Muttaburrasaurus was Added.\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;Nanotyrannus was Added.\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;Nanotyrannus was replaced with Microraptor\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;Microraptor was Removed.\n&#39;\n&#39;RemoveAt(0)\n&#39;Psitticosaurus was Removed.\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_Remove__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(T)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Remove (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to remove from the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is successfully removed; otherwise, <code>false</code>.  This method also returns <code>false</code> if <code>item</code> was not found in the original <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the list.  </p>\n<p> This method performs a linear search; therefore, the average execution time is proportional to <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>. That is, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the Remove method and by index using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveAt_\" data-linktype=\"relative-path\">RemoveAt</a> method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.ObjectModel.Collection`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates many of the properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a>. The code example creates a collection of strings, uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a> method to add several strings, displays the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>, and lists the strings. The example uses the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to find the index of a string and the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to determine whether a string is in the collection. The example inserts a string using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a> method and retrieves and sets strings using the default <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property (the indexer in C#). The example removes strings by string identity using the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method and by index using the RemoveAt method. Finally, the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method is used to clear all strings from the collection.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectModel.Collection#1\">using namespace System;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\npublic ref class Demo\n{\npublic:\n    static void Main()\n    {\n        Collection&lt;String^&gt;^ dinosaurs = gcnew Collection&lt;String^&gt;();\n\n        dinosaurs-&gt;Add(&quot;Psitticosaurus&quot;);\n        dinosaurs-&gt;Add(&quot;Caudipteryx&quot;);\n        dinosaurs-&gt;Add(&quot;Compsognathus&quot;);\n        dinosaurs-&gt;Add(&quot;Muttaburrasaurus&quot;);\n\n        Console::WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs-&gt;Count);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;,\n            dinosaurs-&gt;IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console::WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;,\n            dinosaurs-&gt;Contains(&quot;Caudipteryx&quot;));\n\n        Console::WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs-&gt;Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console::WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs-&gt;Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs-&gt;RemoveAt(0);\n        Display(dinosaurs);\n\n        Console::WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs-&gt;Clear();\n        Console::WriteLine(&quot;Count: {0}&quot;, dinosaurs-&gt;Count);\n    }\n\nprivate:\n    static void Display(Collection&lt;String^&gt;^ cs)\n    {\n        Console::WriteLine();\n        for each( String^ item in cs )\n        {\n            Console::WriteLine(item);\n        }\n    }\n};\n\nint main()\n{\n    Demo::Main();\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectModel.Collection#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Collection&lt;string&gt; dinosaurs = new Collection&lt;string&gt;();\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count);\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n        Display(dinosaurs);\n\n        Console.WriteLine(&quot;<br>dinosaurs.Clear()&quot;);\n        dinosaurs.Clear();\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\n4 dinosaurs:\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\n\nPsitticosaurus\nCaudipteryx\nNanotyrannus\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\n\nPsitticosaurus\nCaudipteryx\nMicroraptor\nCompsognathus\nMuttaburrasaurus\n\nRemove(&quot;Microraptor&quot;)\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nRemoveAt(0)\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\ndinosaurs.Clear()\nCount: 0\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.Collection#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Collection(Of String)\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Console.WriteLine(&quot;{0} dinosaurs:&quot;, dinosaurs.Count)\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n        Display(dinosaurs)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n        Display(dinosaurs)\n \n        Console.WriteLine(vbLf &amp; &quot;dinosaurs.Clear()&quot;)\n        dinosaurs.Clear()\n        Console.WriteLine(&quot;Count: {0}&quot;, dinosaurs.Count)\n\n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;4 dinosaurs:\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Nanotyrannus\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Microraptor\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;RemoveAt(0)\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;dinosaurs.Clear()\n&#39;Count: 0\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_RemoveItem_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_RemoveItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveItem(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the element at the specified index of the <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void RemoveItem (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is equal to or greater than <span class=\"xref\">stem.Collections.ObjectModel.Collection`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to derive a collection class from a constructed type of the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> generic class, and how to override the protected <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_InsertItem_\" data-linktype=\"relative-path\">InsertItem</a>, RemoveItem, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_ClearItems_\" data-linktype=\"relative-path\">ClearItems</a>, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_SetItem_\" data-linktype=\"relative-path\">SetItem</a> methods to provide custom behavior for the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a>, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> methods, and for setting the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> The custom behavior provided by this example is a <code>Changed</code> notification event that is raised at the end of each of the protected methods. The <code>Dinosaurs</code> class inherits <code>Collection&lt;string&gt;</code> (<code>Collection(Of String)</code> in Visual Basic) and defines the <code>Changed</code> event, which uses a <code>DinosaursChangedEventArgs</code> class for the event information, and an enumeration to identify the kind of change.  </p>\n<p> The code example calls several properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> to demonstrate the custom event.  </p>\n<pre><code class=\"lang-cs\" name=\"ObjectModel.CollectionInherited#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Dinosaurs : Collection&lt;string&gt;\n{\n    public event EventHandler&lt;DinosaursChangedEventArgs&gt; Changed;\n\n    protected override void InsertItem(int index, string newItem)\n    {\n        base.InsertItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Added, newItem, null));\n        }\n    }\n\n    protected override void SetItem(int index, string newItem)\n    {\n        string replaced = Items[index];\n        base.SetItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Replaced, replaced, newItem));\n        }\n    }\n\n    protected override void RemoveItem(int index)\n    {\n        string removedItem = Items[index];\n        base.RemoveItem(index);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Removed, removedItem, null));\n        }\n    }\n\n    protected override void ClearItems()\n    {\n        base.ClearItems();\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Cleared, null, null));\n        }\n    }\n}\n\n// Event argument for the Changed event.\n//\npublic class DinosaursChangedEventArgs : EventArgs\n{\n    public readonly string ChangedItem;\n    public readonly ChangeType ChangeType;\n    public readonly string ReplacedWith;\n\n    public DinosaursChangedEventArgs(ChangeType change, string item, \n        string replacement)\n    {\n        ChangeType = change;\n        ChangedItem = item;\n        ReplacedWith = replacement;\n    }\n}\n\npublic enum ChangeType\n{\n    Added, \n    Removed, \n    Replaced, \n    Cleared\n};\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Dinosaurs dinosaurs = new Dinosaurs();\n\n        dinosaurs.Changed += ChangedHandler; \n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n\n        Display(dinosaurs);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n\n    private static void ChangedHandler(object source, \n        DinosaursChangedEventArgs e)\n    {\n\n        if (e.ChangeType==ChangeType.Replaced)\n        {\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, e.ChangedItem, \n                e.ReplacedWith);\n        }\n        else if(e.ChangeType==ChangeType.Cleared)\n        {\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;{0} was {1}.&quot;, e.ChangedItem, e.ChangeType);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPsitticosaurus was Added.\nCaudipteryx was Added.\nCompsognathus was Added.\nMuttaburrasaurus was Added.\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\nNanotyrannus was Added.\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\nNanotyrannus was replaced with Microraptor\n\nRemove(&quot;Microraptor&quot;)\nMicroraptor was Removed.\n\nRemoveAt(0)\nPsitticosaurus was Removed.\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.CollectionInherited#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Dinosaurs\n    Inherits Collection(Of String)\n\n    Public Event Changed As EventHandler(Of DinosaursChangedEventArgs)\n\n    Protected Overrides Sub InsertItem( _\n        ByVal index As Integer, ByVal newItem As String)\n\n        MyBase.InsertItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Added, newItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub SetItem(ByVal index As Integer, _\n        ByVal newItem As String)\n\n        Dim replaced As String = Items(index)\n        MyBase.SetItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Replaced, replaced, newItem))\n    End Sub\n\n    Protected Overrides Sub RemoveItem(ByVal index As Integer)\n\n        Dim removedItem As String = Items(index)\n        MyBase.RemoveItem(index)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Removed, removedItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub ClearItems()\n        MyBase.ClearItems()\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Cleared, Nothing, Nothing))\n    End Sub\n\nEnd Class\n\n&#39; Event argument for the Changed event.\n&#39;\nPublic Class DinosaursChangedEventArgs\n    Inherits EventArgs\n\n    Public ReadOnly ChangedItem As String\n    Public ReadOnly ChangeType As ChangeType\n    Public ReadOnly ReplacedWith As String\n\n    Public Sub New(ByVal change As ChangeType, ByVal item As String, _\n        ByVal replacement As String)\n\n        ChangeType = change\n        ChangedItem = item\n        ReplacedWith = replacement\n    End Sub\nEnd Class\n\nPublic Enum ChangeType\n    Added\n    Removed\n    Replaced\n    Cleared\nEnd Enum\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Dinosaurs\n\n        AddHandler dinosaurs.Changed, AddressOf ChangedHandler\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n\n        Display(dinosaurs)\n \n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\n\n    Private Shared Sub ChangedHandler(ByVal source As Object, _\n        ByVal e As DinosaursChangedEventArgs)\n\n        If e.ChangeType = ChangeType.Replaced Then\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, _\n                e.ChangedItem, e.ReplacedWith)\n\n        ElseIf e.ChangeType = ChangeType.Cleared Then\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;)\n\n        Else\n            Console.WriteLine(&quot;{0} was {1}.&quot;, _\n                e.ChangedItem, e.ChangeType)\n        End If\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Psitticosaurus was Added.\n&#39;Caudipteryx was Added.\n&#39;Compsognathus was Added.\n&#39;Muttaburrasaurus was Added.\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;Nanotyrannus was Added.\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;Nanotyrannus was replaced with Microraptor\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;Microraptor was Removed.\n&#39;\n&#39;RemoveAt(0)\n&#39;Psitticosaurus was Removed.\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_SetItem_System_Int32__0_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_SetItem_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetItem(Int32,T)</div>        \r\n          </div>\r\n    \r\n            <p>Replaces the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void SetItem (int index, T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to replace.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The new value for the element at the specified index. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> is greater than <span class=\"xref\">stem.Collections.ObjectModel.Collection`1.Count*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> accepts <code>null</code> as a valid value for reference types and allows duplicate elements.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to derive a collection class from a constructed type of the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> generic class, and how to override the protected <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_InsertItem_\" data-linktype=\"relative-path\">InsertItem</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_RemoveItem_\" data-linktype=\"relative-path\">RemoveItem</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_ClearItems_\" data-linktype=\"relative-path\">ClearItems</a>, and SetItem methods to provide custom behavior for the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Insert_\" data-linktype=\"relative-path\">Insert</a>, <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Remove_\" data-linktype=\"relative-path\">Remove</a>, and <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Clear_\" data-linktype=\"relative-path\">Clear</a> methods, and for setting the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Item_\" data-linktype=\"relative-path\">Item</a> property.  </p>\n<p> The custom behavior provided by this example is a <code>Changed</code> notification event that is raised at the end of each of the protected methods. The <code>Dinosaurs</code> class inherits <code>Collection&lt;string&gt;</code> (<code>Collection(Of String)</code> in Visual Basic) and defines the <code>Changed</code> event, which uses a <code>DinosaursChangedEventArgs</code> class for the event information, and an enumeration to identify the kind of change.  </p>\n<p> The code example calls several properties and methods of <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> to demonstrate the custom event.  </p>\n<pre><code class=\"lang-cs\" name=\"ObjectModel.CollectionInherited#1\">using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\npublic class Dinosaurs : Collection&lt;string&gt;\n{\n    public event EventHandler&lt;DinosaursChangedEventArgs&gt; Changed;\n\n    protected override void InsertItem(int index, string newItem)\n    {\n        base.InsertItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Added, newItem, null));\n        }\n    }\n\n    protected override void SetItem(int index, string newItem)\n    {\n        string replaced = Items[index];\n        base.SetItem(index, newItem);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Replaced, replaced, newItem));\n        }\n    }\n\n    protected override void RemoveItem(int index)\n    {\n        string removedItem = Items[index];\n        base.RemoveItem(index);\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Removed, removedItem, null));\n        }\n    }\n\n    protected override void ClearItems()\n    {\n        base.ClearItems();\n\n        EventHandler&lt;DinosaursChangedEventArgs&gt; temp = Changed;\n        if (temp != null)\n        {\n            temp(this, new DinosaursChangedEventArgs(\n                ChangeType.Cleared, null, null));\n        }\n    }\n}\n\n// Event argument for the Changed event.\n//\npublic class DinosaursChangedEventArgs : EventArgs\n{\n    public readonly string ChangedItem;\n    public readonly ChangeType ChangeType;\n    public readonly string ReplacedWith;\n\n    public DinosaursChangedEventArgs(ChangeType change, string item, \n        string replacement)\n    {\n        ChangeType = change;\n        ChangedItem = item;\n        ReplacedWith = replacement;\n    }\n}\n\npublic enum ChangeType\n{\n    Added, \n    Removed, \n    Replaced, \n    Cleared\n};\n\npublic class Demo\n{\n    public static void Main()\n    {\n        Dinosaurs dinosaurs = new Dinosaurs();\n\n        dinosaurs.Changed += ChangedHandler; \n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;);\n        dinosaurs.Add(&quot;Caudipteryx&quot;);\n        dinosaurs.Add(&quot;Compsognathus&quot;);\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;);\n\n        Display(dinosaurs);\n    \n        Console.WriteLine(&quot;<br>IndexOf(\\&quot;Muttaburrasaurus\\&quot;): {0}&quot;, \n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;));\n\n        Console.WriteLine(&quot;<br>Contains(\\&quot;Caudipteryx\\&quot;): {0}&quot;, \n            dinosaurs.Contains(&quot;Caudipteryx&quot;));\n\n        Console.WriteLine(&quot;<br>Insert(2, \\&quot;Nanotyrannus\\&quot;)&quot;);\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2]: {0}&quot;, dinosaurs[2]);\n\n        Console.WriteLine(&quot;<br>dinosaurs[2] = \\&quot;Microraptor\\&quot;&quot;);\n        dinosaurs[2] = &quot;Microraptor&quot;;\n\n        Console.WriteLine(&quot;<br>Remove(\\&quot;Microraptor\\&quot;)&quot;);\n        dinosaurs.Remove(&quot;Microraptor&quot;);\n\n        Console.WriteLine(&quot;<br>RemoveAt(0)&quot;);\n        dinosaurs.RemoveAt(0);\n\n        Display(dinosaurs);\n    }\n    \n    private static void Display(Collection&lt;string&gt; cs)\n    {\n        Console.WriteLine();\n        foreach( string item in cs )\n        {\n            Console.WriteLine(item);\n        }\n    }\n\n    private static void ChangedHandler(object source, \n        DinosaursChangedEventArgs e)\n    {\n\n        if (e.ChangeType==ChangeType.Replaced)\n        {\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, e.ChangedItem, \n                e.ReplacedWith);\n        }\n        else if(e.ChangeType==ChangeType.Cleared)\n        {\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;);\n        }\n        else\n        {\n            Console.WriteLine(&quot;{0} was {1}.&quot;, e.ChangedItem, e.ChangeType);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nPsitticosaurus was Added.\nCaudipteryx was Added.\nCompsognathus was Added.\nMuttaburrasaurus was Added.\n\nPsitticosaurus\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n\nIndexOf(&quot;Muttaburrasaurus&quot;): 3\n\nContains(&quot;Caudipteryx&quot;): True\n\nInsert(2, &quot;Nanotyrannus&quot;)\nNanotyrannus was Added.\n\ndinosaurs[2]: Nanotyrannus\n\ndinosaurs[2] = &quot;Microraptor&quot;\nNanotyrannus was replaced with Microraptor\n\nRemove(&quot;Microraptor&quot;)\nMicroraptor was Removed.\n\nRemoveAt(0)\nPsitticosaurus was Removed.\n\nCaudipteryx\nCompsognathus\nMuttaburrasaurus\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectModel.CollectionInherited#1\">Imports System\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\nPublic Class Dinosaurs\n    Inherits Collection(Of String)\n\n    Public Event Changed As EventHandler(Of DinosaursChangedEventArgs)\n\n    Protected Overrides Sub InsertItem( _\n        ByVal index As Integer, ByVal newItem As String)\n\n        MyBase.InsertItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Added, newItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub SetItem(ByVal index As Integer, _\n        ByVal newItem As String)\n\n        Dim replaced As String = Items(index)\n        MyBase.SetItem(index, newItem)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Replaced, replaced, newItem))\n    End Sub\n\n    Protected Overrides Sub RemoveItem(ByVal index As Integer)\n\n        Dim removedItem As String = Items(index)\n        MyBase.RemoveItem(index)\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Removed, removedItem, Nothing))\n    End Sub\n\n    Protected Overrides Sub ClearItems()\n        MyBase.ClearItems()\n\n        RaiseEvent Changed(Me, New DinosaursChangedEventArgs( _\n            ChangeType.Cleared, Nothing, Nothing))\n    End Sub\n\nEnd Class\n\n&#39; Event argument for the Changed event.\n&#39;\nPublic Class DinosaursChangedEventArgs\n    Inherits EventArgs\n\n    Public ReadOnly ChangedItem As String\n    Public ReadOnly ChangeType As ChangeType\n    Public ReadOnly ReplacedWith As String\n\n    Public Sub New(ByVal change As ChangeType, ByVal item As String, _\n        ByVal replacement As String)\n\n        ChangeType = change\n        ChangedItem = item\n        ReplacedWith = replacement\n    End Sub\nEnd Class\n\nPublic Enum ChangeType\n    Added\n    Removed\n    Replaced\n    Cleared\nEnd Enum\n\nPublic Class Demo\n    \n    Public Shared Sub Main() \n\n        Dim dinosaurs As New Dinosaurs\n\n        AddHandler dinosaurs.Changed, AddressOf ChangedHandler\n\n        dinosaurs.Add(&quot;Psitticosaurus&quot;)\n        dinosaurs.Add(&quot;Caudipteryx&quot;)\n        dinosaurs.Add(&quot;Compsognathus&quot;)\n        dinosaurs.Add(&quot;Muttaburrasaurus&quot;)\n\n        Display(dinosaurs)\n    \n        Console.WriteLine(vbLf &amp; &quot;IndexOf(&quot;&quot;Muttaburrasaurus&quot;&quot;): {0}&quot;, _\n            dinosaurs.IndexOf(&quot;Muttaburrasaurus&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Contains(&quot;&quot;Caudipteryx&quot;&quot;): {0}&quot;, _\n            dinosaurs.Contains(&quot;Caudipteryx&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;Insert(2, &quot;&quot;Nanotyrannus&quot;&quot;)&quot;)\n        dinosaurs.Insert(2, &quot;Nanotyrannus&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2): {0}&quot;, dinosaurs(2))\n\n        Console.WriteLine(vbLf &amp; &quot;dinosaurs(2) = &quot;&quot;Microraptor&quot;&quot;&quot;)\n        dinosaurs(2) = &quot;Microraptor&quot;\n\n        Console.WriteLine(vbLf &amp; &quot;Remove(&quot;&quot;Microraptor&quot;&quot;)&quot;)\n        dinosaurs.Remove(&quot;Microraptor&quot;)\n\n        Console.WriteLine(vbLf &amp; &quot;RemoveAt(0)&quot;)\n        dinosaurs.RemoveAt(0)\n\n        Display(dinosaurs)\n \n    End Sub\n    \n    Private Shared Sub Display(ByVal cs As Collection(Of String)) \n        Console.WriteLine()\n        For Each item As String In cs\n            Console.WriteLine(item)\n        Next item\n    End Sub\n\n    Private Shared Sub ChangedHandler(ByVal source As Object, _\n        ByVal e As DinosaursChangedEventArgs)\n\n        If e.ChangeType = ChangeType.Replaced Then\n            Console.WriteLine(&quot;{0} was replaced with {1}&quot;, _\n                e.ChangedItem, e.ReplacedWith)\n\n        ElseIf e.ChangeType = ChangeType.Cleared Then\n            Console.WriteLine(&quot;The dinosaur list was cleared.&quot;)\n\n        Else\n            Console.WriteLine(&quot;{0} was {1}.&quot;, _\n                e.ChangedItem, e.ChangeType)\n        End If\n    End Sub\n\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;Psitticosaurus was Added.\n&#39;Caudipteryx was Added.\n&#39;Compsognathus was Added.\n&#39;Muttaburrasaurus was Added.\n&#39;\n&#39;Psitticosaurus\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n&#39;\n&#39;IndexOf(&quot;Muttaburrasaurus&quot;): 3\n&#39;\n&#39;Contains(&quot;Caudipteryx&quot;): True\n&#39;\n&#39;Insert(2, &quot;Nanotyrannus&quot;)\n&#39;Nanotyrannus was Added.\n&#39;\n&#39;dinosaurs(2): Nanotyrannus\n&#39;\n&#39;dinosaurs(2) = &quot;Microraptor&quot;\n&#39;Nanotyrannus was replaced with Microraptor\n&#39;\n&#39;Remove(&quot;Microraptor&quot;)\n&#39;Microraptor was Removed.\n&#39;\n&#39;RemoveAt(0)\n&#39;Psitticosaurus was Removed.\n&#39;\n&#39;Caudipteryx\n&#39;Compsognathus\n&#39;Muttaburrasaurus\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_Generic_ICollection_T__IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_Generic_ICollection_T__IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> <code>array</code> does not have zero-based indexing.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  </p>\n<p> -or-  </p>\n<p> The type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If the type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>, the non-generic implementations of <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> throw <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, whereas the generic implementations throw <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n</div>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe); otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> returns an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  In the default implementation of <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>, this property always returns the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> returns an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property for C#, C++, and Visual Basic.  </p>\n<pre><code class=\"lang-c#\">ICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}\n</code></pre><pre><code class=\"lang-vb#\">Dim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   &#39; Access the collection.  \nEnd SyncLock\n</code></pre><pre><code class=\"lang-cpp#\">ICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic-&gt;SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic-&gt;SyncRoot);  \n}\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.Add (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to add to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The position into which the new element was inserted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool IList.Contains (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is found in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality by first determining whether <code>value</code> is of type <code>T</code> (or null) and then calling <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Contains_\" data-linktype=\"relative-path\">Contains</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">int IList.IndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to locate in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of <code>value</code> if found in the list; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.  <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If type <code>T</code> does not implement either interface, this method uses <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an item into the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to insert into the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>index</code> equals the number of items in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>, then <code>value</code> is appended to the end.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  </p>\n<p> A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.IList.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only; otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  </p>\n<p> A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.IList.Item[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property is set and <code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> The C# language uses the <a href=\"../Topic/this%20(C%23%20Reference).md\" data-linktype=\"relative-path\">this</a> keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.  </p>\n<p> Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_ObjectModel_Collection_1_System_Collections_IList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IList.Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void IList.Remove (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to remove from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is of a type that is not assignable to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default comparer <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>.  <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements <a class=\"xref\" href=\"system.icomparable-1\" data-linktype=\"relative-path\">System.IComparable&lt;T&gt;</a> and uses that implementation, if available.  If not, <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a> checks whether type <code>T</code> implements <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">System.IComparable</a>.  If type <code>T</code> does not implement either interface, this method uses <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.objectmodel.collection-1#System_Collections_ObjectModel_Collection_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.ObjectModel.Collection-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.ObjectModel.Collection-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.ClearItems\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.InsertItem\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Items\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.RemoveAt\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.RemoveItem\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.SetItem\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.ICollection&lt;T&gt;.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.ICollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.ObjectModel.Collection&lt;T&gt;.IList.Remove\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"438043dc-7b10-9838-2aaa-dcda1ce1a4ec\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.ObjectModel\\Collection`1.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base class for a generic collection.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.ObjectModel/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.ObjectModel.Collection`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.ObjectModel.Collection-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.ObjectModel.Collection-1.yml","open_to_public_contributors":true,"api_name":["System.Collections.ObjectModel.Collection<T>","System.Collections.ObjectModel.Collection<T>..ctor","System.Collections.ObjectModel.Collection<T>.Add","System.Collections.ObjectModel.Collection<T>.Clear","System.Collections.ObjectModel.Collection<T>.ClearItems","System.Collections.ObjectModel.Collection<T>.Contains","System.Collections.ObjectModel.Collection<T>.CopyTo","System.Collections.ObjectModel.Collection<T>.Count","System.Collections.ObjectModel.Collection<T>.GetEnumerator","System.Collections.ObjectModel.Collection<T>.IndexOf","System.Collections.ObjectModel.Collection<T>.Insert","System.Collections.ObjectModel.Collection<T>.InsertItem","System.Collections.ObjectModel.Collection<T>.Item","System.Collections.ObjectModel.Collection<T>.Items","System.Collections.ObjectModel.Collection<T>.Remove","System.Collections.ObjectModel.Collection<T>.RemoveAt","System.Collections.ObjectModel.Collection<T>.RemoveItem","System.Collections.ObjectModel.Collection<T>.SetItem","System.Collections.ObjectModel.Collection<T>.ICollection<T>.IsReadOnly","System.Collections.ObjectModel.Collection<T>.ICollection.CopyTo","System.Collections.ObjectModel.Collection<T>.ICollection.IsSynchronized","System.Collections.ObjectModel.Collection<T>.ICollection.SyncRoot","System.Collections.ObjectModel.Collection<T>.IEnumerable.GetEnumerator","System.Collections.ObjectModel.Collection<T>.IList.Add","System.Collections.ObjectModel.Collection<T>.IList.Contains","System.Collections.ObjectModel.Collection<T>.IList.IndexOf","System.Collections.ObjectModel.Collection<T>.IList.Insert","System.Collections.ObjectModel.Collection<T>.IList.IsFixedSize","System.Collections.ObjectModel.Collection<T>.IList.IsReadOnly","System.Collections.ObjectModel.Collection<T>.IList.Item","System.Collections.ObjectModel.Collection<T>.IList.Remove"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.ObjectModel.Collection`1","System::Collections::ObjectModel::Collection`1","System.Collections.ObjectModel.Collection`1.#ctor","System::Collections::ObjectModel::Collection`1::#ctor","System.Collections.ObjectModel.Collection`1.Add","System::Collections::ObjectModel::Collection`1::Add","System.Collections.ObjectModel.Collection`1.Clear","System::Collections::ObjectModel::Collection`1::Clear","System.Collections.ObjectModel.Collection`1.ClearItems","System::Collections::ObjectModel::Collection`1::ClearItems","System.Collections.ObjectModel.Collection`1.Contains","System::Collections::ObjectModel::Collection`1::Contains","System.Collections.ObjectModel.Collection`1.CopyTo","System::Collections::ObjectModel::Collection`1::CopyTo","System.Collections.ObjectModel.Collection`1.Count","System::Collections::ObjectModel::Collection`1::Count","System.Collections.ObjectModel.Collection`1.GetEnumerator","System::Collections::ObjectModel::Collection`1::GetEnumerator","System.Collections.ObjectModel.Collection`1.IndexOf","System::Collections::ObjectModel::Collection`1::IndexOf","System.Collections.ObjectModel.Collection`1.Insert","System::Collections::ObjectModel::Collection`1::Insert","System.Collections.ObjectModel.Collection`1.InsertItem","System::Collections::ObjectModel::Collection`1::InsertItem","System.Collections.ObjectModel.Collection`1.Item","System::Collections::ObjectModel::Collection`1::Item","System.Collections.ObjectModel.Collection`1.Items","System::Collections::ObjectModel::Collection`1::Items","System.Collections.ObjectModel.Collection`1.Remove","System::Collections::ObjectModel::Collection`1::Remove","System.Collections.ObjectModel.Collection`1.RemoveAt","System::Collections::ObjectModel::Collection`1::RemoveAt","System.Collections.ObjectModel.Collection`1.RemoveItem","System::Collections::ObjectModel::Collection`1::RemoveItem","System.Collections.ObjectModel.Collection`1.SetItem","System::Collections::ObjectModel::Collection`1::SetItem","System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly","System::Collections::ObjectModel::Collection`1::System#Collections#Generic#ICollection{T}#IsReadOnly","System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo","System::Collections::ObjectModel::Collection`1::System#Collections#ICollection#CopyTo","System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized","System::Collections::ObjectModel::Collection`1::System#Collections#ICollection#IsSynchronized","System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot","System::Collections::ObjectModel::Collection`1::System#Collections#ICollection#SyncRoot","System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator","System::Collections::ObjectModel::Collection`1::System#Collections#IEnumerable#GetEnumerator","System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add","System::Collections::ObjectModel::Collection`1::System#Collections#IList#Add","System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains","System::Collections::ObjectModel::Collection`1::System#Collections#IList#Contains","System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf","System::Collections::ObjectModel::Collection`1::System#Collections#IList#IndexOf","System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert","System::Collections::ObjectModel::Collection`1::System#Collections#IList#Insert","System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize","System::Collections::ObjectModel::Collection`1::System#Collections#IList#IsFixedSize","System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly","System::Collections::ObjectModel::Collection`1::System#Collections#IList#IsReadOnly","System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item","System::Collections::ObjectModel::Collection`1::System#Collections#IList#Item","System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove","System::Collections::ObjectModel::Collection`1::System#Collections#IList#Remove"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"438043dc-7b10-9838-2aaa-dcda1ce1a4ec","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.ObjectModel\\Collection`1.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Collection<T> class | Microsoft Docs","_op_ogTitle":"Collection<T> class","description":"Provides the base class for a generic collection.\n","toc_asset_id":"_splitted/System.Collections.ObjectModel/toc.json","toc_rel":"_splitted/System.Collections.ObjectModel/toc.json","source_url":"","ms.assetid":"System.Collections.ObjectModel.Collection`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.objectmodel.collection-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.objectmodel.collection-1","fileRelativePath":"System.Collections.ObjectModel.Collection-1.html"},"themesRelativePathToOutputRoot":"_themes/"}