{"content":"    \r\n    <h1 id=\"System_Configuration_ConfigurationManager\">\r\n      <span class=\"lang-csharp\">ConfigurationManager</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to configuration files for client applications. This class cannot be inherited.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class ConfigurationManager</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ConfigurationManager</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The ConfigurationManager class enables you to access machine, application, and user configuration information. This class replaces the <a class=\"xref\" href=\"system.configuration.configurationsettings\" data-linktype=\"relative-path\">ConfigurationSettings</a> class, which is deprecated. For web applications, use the <a class=\"xref\" href=\"system.web.configuration.webconfigurationmanager\" data-linktype=\"relative-path\">WebConfigurationManager</a> class.  </p>\n<p> To use the ConfigurationManager class, your project must reference the <code>System.Configuration</code> assembly. By default, some project templates, like Console Application, do not reference this assembly so you must manually reference it.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The name and location of the application configuration file depend on the application&#39;s host. For more information, see <a href=\"http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0\" data-linktype=\"external\">NIB: Application Configuration Files</a>.  </p>\n</div>\n<p> You can use the built-in <a class=\"xref\" href=\"system.configuration\" data-linktype=\"relative-path\">System.Configuration</a> types or derive from them to handle configuration information. By using these types, you can work directly with configuration information and you can extend configuration files to include custom information.  </p>\n<p> The ConfigurationManager class includes members that enable you to perform the following tasks:  </p>\n<ul>\n<li><p>Read a section from a configuration file. To access configuration information, call the <a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_GetSection_\" data-linktype=\"relative-path\">GetSection</a> method. For some sections such as <code>appSettings</code> and <code>connectionStrings</code>, use the <a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_AppSettings_\" data-linktype=\"relative-path\">AppSettings</a> and <a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_ConnectionStrings_\" data-linktype=\"relative-path\">ConnectionStrings</a> classes. These members perform read-only operations, use a single cached instance of the configuration, and are multithread aware.  </p>\n</li>\n<li><p>Read and write configuration files as a whole. Your application can read and write configuration settings at any level, for itself or for other applications or computers, locally or remotely. Use one of the methods provided by the ConfigurationManager class to open a configuration file such as SampleApp.exe.config. These methods return a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that in turn exposes methods and properties you can use to work with the associated configuration files. The methods perform read or write operations and create the configuration data every time that a file is written.  </p>\n</li>\n<li><p>Support configuration tasks. The following types are used to support various configuration tasks:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.configuration.sectioninformation\" data-linktype=\"relative-path\">SectionInformation</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.propertyinformation\" data-linktype=\"relative-path\">PropertyInformation</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.propertyinformationcollection\" data-linktype=\"relative-path\">PropertyInformationCollection</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.elementinformation\" data-linktype=\"relative-path\">ElementInformation</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.contextinformation\" data-linktype=\"relative-path\">ContextInformation</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.configurationsectiongroup\" data-linktype=\"relative-path\">ConfigurationSectionGroup</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.configurationsectiongroupcollection\" data-linktype=\"relative-path\">ConfigurationSectionGroupCollection</a>  \n\n<p>In addition to working with existing configuration information, you can create and work with custom configuration elements by extending the built-in configuration types such as the <a class=\"xref\" href=\"system.configuration.configurationelement\" data-linktype=\"relative-path\">ConfigurationElement</a>, <a class=\"xref\" href=\"system.configuration.configurationelementcollection\" data-linktype=\"relative-path\">ConfigurationElementCollection</a>, <a class=\"xref\" href=\"system.configuration.configurationproperty\" data-linktype=\"relative-path\">ConfigurationProperty</a>, and <a class=\"xref\" href=\"system.configuration.configurationsection\" data-linktype=\"relative-path\">ConfigurationSection</a> classes. For an example of how to extend a built-in configuration type programmatically, see <a class=\"xref\" href=\"system.configuration.configurationsection\" data-linktype=\"relative-path\">ConfigurationSection</a>. For an example of how to extend a built-in configuration type that uses the attribute-based model, see <a class=\"xref\" href=\"system.configuration.configurationelement\" data-linktype=\"relative-path\">ConfigurationElement</a>.</p>\n</li>\n</ul>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_AppSettings\" data-linktype=\"self-bookmark\">AppSettings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.configuration.appsettingssection\" data-linktype=\"relative-path\">AppSettingsSection</a> data for the current application&#39;s default configuration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_ConnectionStrings\" data-linktype=\"self-bookmark\">ConnectionStrings</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.configuration.connectionstringssection\" data-linktype=\"relative-path\">ConnectionStringsSection</a> data for the current application&#39;s default configuration.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_GetSection_System_String_\" data-linktype=\"self-bookmark\">GetSection(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves a specified configuration section for the current application&#39;s default configuration.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_OpenExeConfiguration_System_Configuration_ConfigurationUserLevel_\" data-linktype=\"self-bookmark\">OpenExeConfiguration(ConfigurationUserLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens the configuration file for the current application as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_OpenExeConfiguration_System_String_\" data-linktype=\"self-bookmark\">OpenExeConfiguration(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens the specified client configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_OpenMachineConfiguration\" data-linktype=\"self-bookmark\">OpenMachineConfiguration()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens the machine configuration file on the current computer as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_System_Configuration_ExeConfigurationFileMap_System_Configuration_ConfigurationUserLevel_\" data-linktype=\"self-bookmark\">OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens the specified client configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that uses the specified file mapping and user level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_System_Configuration_ExeConfigurationFileMap_System_Configuration_ConfigurationUserLevel_System_Boolean_\" data-linktype=\"self-bookmark\">OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens the specified client configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that uses the specified file mapping, user level, and preload option.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_OpenMappedMachineConfiguration_System_Configuration_ConfigurationFileMap_\" data-linktype=\"self-bookmark\">OpenMappedMachineConfiguration(ConfigurationFileMap)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Opens the machine configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that uses the specified file mapping.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Configuration_ConfigurationManager_RefreshSection_System_String_\" data-linktype=\"self-bookmark\">RefreshSection(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Refreshes the named section so the next time that it is retrieved it will be re-read from disk.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_AppSettings\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_AppSettings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppSettings</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.configuration.appsettingssection\" data-linktype=\"relative-path\">AppSettingsSection</a> data for the current application&#39;s default configuration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Specialized.NameValueCollection AppSettings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a> object that contains the contents of the <a class=\"xref\" href=\"system.configuration.appsettingssection\" data-linktype=\"relative-path\">AppSettingsSection</a> object for the current application&#39;s default configuration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>Could not retrieve a <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a> object with the application settings data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.configuration.appsettingssection\" data-linktype=\"relative-path\">AppSettingsSection</a> object contains the contents of the configuration file&#39;s <code>appSettings</code> section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  </p>\n<pre><code class=\"lang-c#\">using System;  \nusing System.Configuration;  \n\nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(&quot;Setting1&quot;);  \n            ReadSetting(&quot;NotValid&quot;);  \n            AddUpdateAppSettings(&quot;NewSetting&quot;, &quot;May 7, 2014&quot;);  \n            AddUpdateAppSettings(&quot;Setting1&quot;, &quot;May 8, 2014&quot;);  \n            ReadAllSettings();  \n        }  \n\n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n\n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(&quot;AppSettings is empty.&quot;);  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(&quot;Key: {0} Value: {1}&quot;, key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(&quot;Error reading app settings&quot;);  \n            }  \n        }  \n\n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? &quot;Not Found&quot;;  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(&quot;Error reading app settings&quot;);  \n            }  \n        }  \n\n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(&quot;Error writing app settings&quot;);  \n            }  \n        }  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">Imports System.Configuration  \nModule Module1  \n\n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(&quot;Setting1&quot;)  \n        ReadSetting(&quot;NotValid&quot;)  \n        AddUpdateAppSettings(&quot;NewSetting&quot;, &quot;May 7, 2014&quot;)  \n        AddUpdateAppSettings(&quot;Setting1&quot;, &quot;May 8, 2014&quot;)  \n        ReadAllSettings()  \n    End Sub  \n\n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n\n            If appSettings.Count = 0 Then  \n                Console.WriteLine(&quot;AppSettings is empty.&quot;)  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(&quot;Key: {0} Value: {1}&quot;, key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(&quot;Error reading app settings&quot;)  \n        End Try  \n    End Sub  \n\n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = &quot;Not found&quot;  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(&quot;Error reading app settings&quot;)  \n        End Try  \n    End Sub  \n\n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(&quot;Error writing app settings&quot;)  \n        End Try  \n    End Sub  \n\nEnd Module  \n</code></pre><p> The previous example assumes your project has an App.config file as shown below.  </p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;  \n&lt;configuration&gt;  \n    &lt;startup&gt;   \n        &lt;supportedRuntime version=&quot;v4.0&quot; sku=&quot;.NETFramework,Version=v4.5&quot; /&gt;  \n    &lt;/startup&gt;  \n  &lt;appSettings&gt;  \n    &lt;add key=&quot;Setting1&quot; value=&quot;May 5, 2014&quot;/&gt;  \n    &lt;add key=&quot;Setting2&quot; value=&quot;May 6, 2014&quot;/&gt;  \n  &lt;/appSettings&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_ConnectionStrings\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_ConnectionStrings_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectionStrings</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.configuration.connectionstringssection\" data-linktype=\"relative-path\">ConnectionStringsSection</a> data for the current application&#39;s default configuration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.connectionstringsettingscollection\" data-linktype=\"relative-path\">ConnectionStringSettingsCollection</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.configuration.connectionstringsettingscollection\" data-linktype=\"relative-path\">ConnectionStringSettingsCollection</a> object that contains the contents of the <a class=\"xref\" href=\"system.configuration.connectionstringssection\" data-linktype=\"relative-path\">ConnectionStringsSection</a> object for the current application&#39;s default configuration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>Could not retrieve a <a class=\"xref\" href=\"system.configuration.connectionstringsettingscollection\" data-linktype=\"relative-path\">ConnectionStringSettingsCollection</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.configuration.connectionstringssection\" data-linktype=\"relative-path\">ConnectionStringsSection</a> object contains the contents of the configuration file&#39;s <code>connectionStrings</code> section.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a connection string to read data from a database.  </p>\n<pre><code class=\"lang-c#\">using System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n\nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n\n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[&quot;WingtipToys&quot;].ConnectionString;  \n            string queryString = &quot;SELECT Id, ProductName FROM dbo.Products;&quot;;  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(&quot;{0}, {1}&quot;, reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n</code></pre><pre><code class=\"lang-vb\">Imports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n\n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n\n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(&quot;WingtipToys&quot;).ConnectionString  \n        Dim queryString = &quot;SELECT Id, ProductName FROM dbo.Products;&quot;  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n\n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(&quot;{0}, {1}&quot;, reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n\nEnd Module  \n</code></pre><p> The previous example assumes your project has an App.config as shown below.  </p>\n<pre><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;  \n&lt;configuration&gt;  \n    &lt;startup&gt;   \n        &lt;supportedRuntime version=&quot;v4.0&quot; sku=&quot;.NETFramework,Version=v4.5&quot; /&gt;  \n    &lt;/startup&gt;  \n    &lt;connectionStrings&gt;  \n      &lt;add name=&quot;WingtipToys&quot; connectionString=&quot;Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False&quot; /&gt;  \n    &lt;/connectionStrings&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_GetSection_System_String_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_GetSection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetSection(String)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves a specified configuration section for the current application&#39;s default configuration.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static object GetSection (string sectionName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sectionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The configuration section path and name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>The specified <a class=\"xref\" href=\"system.configuration.configurationsection\" data-linktype=\"relative-path\">ConfigurationSection</a> object, or <code>null</code> if the section does not exist.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For client applications, this method retrieves a configuration file obtained by merging the application configuration file, the local user configuration file, and the roaming configuration file.  </p>\n<p> The GetSection method accesses run-time configuration information that it cannot change. To change the configuration, you use the <a class=\"xref\" href=\"system.configuration.configuration#System_Configuration_Configuration_GetSection_\" data-linktype=\"relative-path\">GetSection</a> method on the configuration file that you obtain by using one of the following Open methods:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_OpenExeConfiguration_\" data-linktype=\"relative-path\">OpenExeConfiguration</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_OpenMachineConfiguration_\" data-linktype=\"relative-path\">OpenMachineConfiguration</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_\" data-linktype=\"relative-path\">OpenMappedExeConfiguration</a>  \n</li>\n<li><a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_\" data-linktype=\"relative-path\">OpenMappedExeConfiguration</a></li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <a class=\"xref\" href=\"system.configuration.configurationmanager\" data-linktype=\"relative-path\">ConfigurationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#7\">    // Create the AppSettings section.\n    // The function uses the GetSection(string)method \n    // to access the configuration section. \n    // It also adds a new element to the section collection.\n    public static void CreateAppSettings()\n    {\n      // Get the application configuration file.\n      System.Configuration.Configuration config =\n        ConfigurationManager.OpenExeConfiguration(\n              ConfigurationUserLevel.None);\n\n      string sectionName = &quot;appSettings&quot;;\n\n      // Add an entry to appSettings.\n      int appStgCnt =\n          ConfigurationManager.AppSettings.Count;\n      string newKey = &quot;NewKey&quot; + appStgCnt.ToString();\n\n      string newValue = DateTime.Now.ToLongDateString() + \n        &quot; &quot; + DateTime.Now.ToLongTimeString();\n\n      config.AppSettings.Settings.Add(newKey, newValue);\n\n      // Save the configuration file.\n      config.Save(ConfigurationSaveMode.Modified);\n      \n      // Force a reload of the changed section. This \n      // makes the new values available for reading.\n      ConfigurationManager.RefreshSection(sectionName);\n\n      // Get the AppSettings section.\n      AppSettingsSection appSettingSection =\n        (AppSettingsSection)config.GetSection(sectionName);\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using GetSection(string).&quot;);\n      Console.WriteLine(&quot;AppSettings section:&quot;);\n      Console.WriteLine(\n        appSettingSection.SectionInformation.GetRawXml());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#7\">    &#39; Create the AppSettings section.\n    &#39; The function uses the GetSection(string)method \n    &#39; to access the configuration section. \n    &#39; It also adds a new element to the section collection.\n    Public Shared Sub CreateAppSettings()\n        &#39; Get the application configuration file.\n        Dim config As System.Configuration.Configuration = _\n        ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n\n        Dim sectionName As String = &quot;appSettings&quot;\n\n        &#39; Add an entry to appSettings.\n        Dim appStgCnt As Integer = _\n            ConfigurationManager.AppSettings.Count\n        Dim newKey As String = _\n            &quot;NewKey&quot; + appStgCnt.ToString()\n\n        Dim newValue As String = _\n            DateTime.Now.ToLongDateString() + &quot; &quot; + _\n            DateTime.Now.ToLongTimeString()\n\n        config.AppSettings.Settings.Add(newKey, _\n                                        newValue)\n\n        &#39; Save the configuration file.\n        config.Save(ConfigurationSaveMode.Modified)\n\n        &#39; Force a reload of the changed section. This \n        &#39; makes the new values available for reading.\n        ConfigurationManager.RefreshSection(sectionName)\n\n        &#39; Get the AppSettings section.\n        Dim appSettingSection As AppSettingsSection = _\n            DirectCast(config.GetSection(sectionName),  _\n            AppSettingsSection)\n\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using GetSection(string).&quot;)\n        Console.WriteLine( _\n            &quot;AppSettings section:&quot;)\n        Console.WriteLine( _\n            appSettingSection.SectionInformation.GetRawXml())\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_OpenExeConfiguration_System_Configuration_ConfigurationUserLevel_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_OpenExeConfiguration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenExeConfiguration(ConfigurationUserLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Opens the configuration file for the current application as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>userLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a> for which you are opening the configuration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users. The <code>userLevel</code> parameter determines the location of the configuration file being opened by indicating whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level).  </p>\n<p> Specify which configuration to get by passing one of the following values for <code>userLevel</code>:  </p>\n<ul>\n<li><p>To get the <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that applies to all users, set <code>userLevel</code> to <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a>.  </p>\n</li>\n<li><p>To get the local <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that applies to the current user, set <code>userLevel</code> to <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a>.  </p>\n</li>\n<li><p>To get the roaming <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that applies to the current user, set <code>userLevel</code> to <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To get the <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.</p>\n</div>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the OpenExeConfiguration method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#5\">    // Get the roaming configuration file associated \n    // with the application.\n    // This function uses the OpenExeConfiguration(\n    // ConfigurationUserLevel userLevel) method to \n    // get the configuration file.\n    // It also creates a custom ConsoleSection and \n    // sets its ConsoleEment BackgroundColor and\n    // ForegroundColor properties to blue and yellow\n    // respectively. Then it uses these properties to\n    // set the console colors.  \n    public static void GetRoamingConfiguration()\n    {\n      // Define the custom section to add to the\n      // configuration file.\n      string sectionName = &quot;consoleSection&quot;;\n      ConsoleSection currentSection = null;\n      \n      // Get the roaming configuration \n      // that applies to the current user.\n      Configuration roamingConfig =\n        ConfigurationManager.OpenExeConfiguration(\n         ConfigurationUserLevel.PerUserRoaming);\n\n      // Map the roaming configuration file. This\n      // enables the application to access \n      // the configuration file using the\n      // System.Configuration.Configuration class\n      ExeConfigurationFileMap configFileMap =\n        new ExeConfigurationFileMap();\n      configFileMap.ExeConfigFilename = \n        roamingConfig.FilePath;\n\n      // Get the mapped configuration file.\n      Configuration config =\n        ConfigurationManager.OpenMappedExeConfiguration(\n          configFileMap, ConfigurationUserLevel.None);\n      \n      try\n        {\n          currentSection =\n               (ConsoleSection)config.GetSection(\n                 sectionName);\n\n          // Synchronize the application configuration\n          // if needed. The following two steps seem\n          // to solve some out of synch issues \n          // between roaming and default\n          // configuration.\n          config.Save(ConfigurationSaveMode.Modified);\n\n          // Force a reload of the changed section, \n          // if needed. This makes the new values available \n          // for reading.\n          ConfigurationManager.RefreshSection(sectionName);\n\n          if (currentSection == null)\n          {\n            // Create a custom configuration section.\n            currentSection = new ConsoleSection();\n\n            // Define where in the configuration file \n            // hierarchy the associated \n            // configuration section can be declared.\n            // The following assignment assures that \n            // the configuration information can be \n            // defined in the user.config file in the \n            // roaming user directory. \n            currentSection.SectionInformation.AllowExeDefinition =\n              ConfigurationAllowExeDefinition.MachineToLocalUser;\n\n            // Allow the configuration section to be \n            // overridden by lower-level configuration files.\n            // This means that lower-level files can contain\n            // the section (use the same name) and assign \n            // different values to it as done by the\n            // function GetApplicationConfiguration() in this\n            // example.\n            currentSection.SectionInformation.AllowOverride =\n              true;\n\n            // Store console settings for roaming users.\n            currentSection.ConsoleElement.BackgroundColor =\n                ConsoleColor.Blue;\n            currentSection.ConsoleElement.ForegroundColor =\n                ConsoleColor.Yellow;\n\n            // Add configuration information to \n            // the configuration file.\n            config.Sections.Add(sectionName, currentSection);\n            config.Save(ConfigurationSaveMode.Modified);\n            // Force a reload of the changed section. This \n            // makes the new values available for reading.\n            ConfigurationManager.RefreshSection(\n              sectionName);\n          }\n      }\n      catch (ConfigurationErrorsException e)\n      {\n          Console.WriteLine(&quot;[Exception error: {0}]&quot;,\n              e.ToString());\n      }\n\n      // Set console properties using values\n      // stored in the configuration file.\n      Console.BackgroundColor =\n        currentSection.ConsoleElement.BackgroundColor;\n      Console.ForegroundColor =\n        currentSection.ConsoleElement.ForegroundColor;\n      // Apply the changes.\n      Console.Clear();\n\n      // Display feedback.\n      Console.WriteLine();\n      Console.WriteLine(\n        &quot;Using OpenExeConfiguration(ConfigurationUserLevel).&quot;);\n      Console.WriteLine(\n          &quot;Configuration file is: {0}&quot;, config.FilePath);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#5\">    &#39; Get the roaming configuration file associated \n    &#39; with the application.\n    &#39; This function uses the OpenExeConfiguration(\n    &#39; ConfigurationUserLevel userLevel) method to \n    &#39; get the configuration file.\n    &#39; It also creates a custom ConsoleSection and \n    &#39; sets its ConsoleEment BackgroundColor and\n    &#39; ForegroundColor properties to blue and yellow\n    &#39; respectively. Then it uses these properties to\n    &#39; set the console colors.  \n    Public Shared Sub GetRoamingConfiguration()\n        &#39; Define the custom section to add to the\n        &#39; configuration file.\n        Dim sectionName As String = &quot;consoleSection&quot;\n        Dim currentSection As ConsoleSection = Nothing\n\n        &#39; Get the roaming configuration \n        &#39; that applies to the current user.\n        Dim roamingConfig As Configuration = _\n        ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.PerUserRoaming)\n\n        &#39; Map the roaming configuration file. This\n        &#39; enables the application to access \n        &#39; the configuration file using the\n        &#39; System.Configuration.Configuration class\n        Dim configFileMap As New ExeConfigurationFileMap()\n        configFileMap.ExeConfigFilename = _\n            roamingConfig.FilePath\n\n        &#39; Get the mapped configuration file.\n        Dim config As Configuration = _\n            ConfigurationManager.OpenMappedExeConfiguration( _\n                configFileMap, ConfigurationUserLevel.None)\n\n        Try\n            currentSection = DirectCast( _\n                config.GetSection(sectionName),  _\n                ConsoleSection)\n\n            &#39; Synchronize the application configuration\n            &#39; if needed. The following two steps seem\n            &#39; to solve some out of synch issues \n            &#39; between roaming and default\n            &#39; configuration.\n            config.Save(ConfigurationSaveMode.Modified)\n\n            &#39; Force a reload of the changed section, \n            &#39; if needed. This makes the new values available \n            &#39; for reading.\n            ConfigurationManager.RefreshSection(sectionName)\n\n            If currentSection Is Nothing Then\n                &#39; Create a custom configuration section.\n                currentSection = New ConsoleSection()\n\n                &#39; Define where in the configuration file \n                &#39; hierarchy the associated \n                &#39; configuration section can be declared.\n                &#39; The following assignment assures that \n                &#39; the configuration information can be \n                &#39; defined in the user.config file in the \n                &#39; roaming user directory. \n                currentSection.SectionInformation. _\n                AllowExeDefinition = _\n                    ConfigurationAllowExeDefinition. _\n                    MachineToLocalUser\n\n                &#39; Allow the configuration section to be \n                &#39; overridden by lower-level configuration \n                &#39; files.\n                &#39; This means that lower-level files can \n                &#39; contain()the section (use the same name) \n                &#39; and assign different values to it as \n                &#39; done by the function \n                &#39; GetApplicationConfiguration() in this\n                &#39; example.\n                currentSection.SectionInformation. _\n                    AllowOverride = True\n\n                &#39; Store console settings for roaming users.\n                currentSection.ConsoleElement. _\n                BackgroundColor = ConsoleColor.Blue\n                currentSection.ConsoleElement. _\n                ForegroundColor = ConsoleColor.Yellow\n\n                &#39; Add configuration information to \n                &#39; the configuration file.\n                config.Sections.Add(sectionName, _\n                    currentSection)\n                config.Save(ConfigurationSaveMode.Modified)\n                &#39; Force a reload of the changed section. This \n                &#39; makes the new values available for reading.\n                ConfigurationManager.RefreshSection( _\n                    sectionName)\n            End If\n        Catch e As ConfigurationErrorsException\n            Console.WriteLine(&quot;[Exception error: {0}]&quot;, _\n                              e.ToString())\n        End Try\n\n        &#39; Set console properties using values\n        &#39; stored in the configuration file.\n        Console.BackgroundColor = _\n            currentSection.ConsoleElement.BackgroundColor\n        Console.ForegroundColor = _\n            currentSection.ConsoleElement.ForegroundColor\n        &#39; Apply the changes.\n        Console.Clear()\n\n        &#39; Display feedback.\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using OpenExeConfiguration(userLevel).&quot;)\n        Console.WriteLine( _\n            &quot;Configuration file is: {0}&quot;, config.FilePath)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_OpenExeConfiguration_System_String_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_OpenExeConfiguration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenExeConfiguration(String)</div>        \r\n          </div>\r\n    \r\n            <p>Opens the specified client configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.Configuration OpenExeConfiguration (string exePath);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>exePath</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The path of the executable (exe) file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Client applications use a global configuration that applies to all users, separate configurations that apply to individual users, and configurations that apply to roaming users. The <code>userLevel</code> value determines the location of the configuration file being opened. It indicates whether it has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by the user level type.).  </p>\n<p> Calling this method overload is equivalent to calling the <a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_System_Configuration_ExeConfigurationFileMap_System_Configuration_ConfigurationUserLevel_System_Boolean_\" data-linktype=\"relative-path\">OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)</a> overload with the <code>preLoad</code> parameter set to <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the OpenExeConfiguration method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#6\">    // Get the application configuration file.\n    // This function uses the \n    // OpenExeConfiguration(string)method \n    // to get the application configuration file. \n    // It also creates a custom ConsoleSection and \n    // sets its ConsoleEment BackgroundColor and\n    // ForegroundColor properties to black and white\n    // respectively. Then it uses these properties to\n    // set the console colors.  \n    public static void GetAppConfiguration()\n    {\n\n      // Get the application path needed to obtain\n      // the application configuration file.\n#if DEBUG\n      string applicationName =\n          Environment.GetCommandLineArgs()[0];\n#else\n           string applicationName =\n          Environment.GetCommandLineArgs()[0]+ &quot;.exe&quot;;\n#endif\n\n      string exePath = System.IO.Path.Combine(\n          Environment.CurrentDirectory, applicationName);\n\n      // Get the configuration file. The file name has\n      // this format appname.exe.config.\n      System.Configuration.Configuration config =\n        ConfigurationManager.OpenExeConfiguration(exePath);\n\n      try\n      {\n        \n        // Create a custom configuration section\n        // having the same name that is used in the \n        // roaming configuration file.\n        // This is because the configuration section \n        // can be overridden by lower-level \n        // configuration files. \n        // See the GetRoamingConfiguration() function in \n        // this example.\n        string sectionName = &quot;consoleSection&quot;;\n        ConsoleSection customSection = new ConsoleSection();\n\n        if (config.Sections[sectionName] == null)\n        {\n          // Create a custom section if it does \n          // not exist yet.\n          \n          // Store console settings.\n          customSection.ConsoleElement.BackgroundColor =\n              ConsoleColor.Black;\n          customSection.ConsoleElement.ForegroundColor =\n              ConsoleColor.White;\n\n          // Add configuration information to the\n          // configuration file.\n          config.Sections.Add(sectionName, customSection);\n          config.Save(ConfigurationSaveMode.Modified);\n          // Force a reload of the changed section.\n          // This makes the new values available for reading.\n          ConfigurationManager.RefreshSection(sectionName);\n        }\n        // Set console properties using values\n        // stored in the configuration file.\n        customSection =\n            (ConsoleSection)config.GetSection(sectionName);\n        Console.BackgroundColor =\n            customSection.ConsoleElement.BackgroundColor;\n        Console.ForegroundColor =\n            customSection.ConsoleElement.ForegroundColor;\n        // Apply the changes.\n        Console.Clear();\n      }\n      catch (ConfigurationErrorsException e)\n      {\n        Console.WriteLine(&quot;[Error exception: {0}]&quot;,\n            e.ToString());\n      }\n     \n      // Display feedback.\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using OpenExeConfiguration(string).&quot;);\n      // Display the current configuration file path.\n      Console.WriteLine(&quot;Configuration file is: {0}&quot;, \n        config.FilePath);\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#6\">    &#39; Get the application configuration file.\n    &#39; This function uses the \n    &#39; OpenExeConfiguration(string)method \n    &#39; to get the application configuration file. \n    &#39; It also creates a custom ConsoleSection and \n    &#39; sets its ConsoleEment BackgroundColor and\n    &#39; ForegroundColor properties to black and white\n    &#39; respectively. Then it uses these properties to\n    &#39; set the console colors.  \n    Public Shared Sub GetAppConfiguration()\n        &#39; Get the application path needed to obtain\n        &#39; the application configuration file.\n#If DEBUG Then\n        Dim applicationName As String = _\n            Environment.GetCommandLineArgs()(0)\n#Else\n            Dim applicationName As String = _\n                Environment.GetCommandLineArgs()(0) + &quot;.exe&quot;\n#End If\n\n        Dim exePath As String = _\n        System.IO.Path.Combine( _\n            Environment.CurrentDirectory, applicationName)\n\n        &#39; Get the configuration file. The file name has\n        &#39; this format appname.exe.config.\n        Dim config As System.Configuration.Configuration = _\n            ConfigurationManager.OpenExeConfiguration(exePath)\n\n        Try\n\n            &#39; Create a custom configuration section\n            &#39; having the same name that is used in the \n            &#39; roaming configuration file.\n            &#39; This is because the configuration section \n            &#39; can be overridden by lower-level \n            &#39; configuration files. \n            &#39; See the GetRoamingConfiguration() function in \n            &#39; this example.\n            Dim sectionName As String = &quot;consoleSection&quot;\n            Dim customSection As New ConsoleSection()\n\n            If config.Sections(sectionName) Is Nothing Then\n                &#39; Create a custom section if it does \n                &#39; not exist yet.\n\n                &#39; Store console settings.\n                customSection.ConsoleElement. _\n                    BackgroundColor = ConsoleColor.Black\n                customSection.ConsoleElement. _\n                    ForegroundColor = ConsoleColor.White\n\n                &#39; Add configuration information to the\n                &#39; configuration file.\n                config.Sections.Add(sectionName, _\n                                    customSection)\n                config.Save(ConfigurationSaveMode.Modified)\n                &#39; Force a reload of the changed section.\n                &#39; This makes the new values available \n                &#39; for reading.\n                ConfigurationManager.RefreshSection( _\n                    sectionName)\n            End If\n            &#39; Set console properties using values\n            &#39; stored in the configuration file.\n            customSection = DirectCast( _\n                config.GetSection(sectionName),  _\n                    ConsoleSection)\n            Console.BackgroundColor = _\n                customSection.ConsoleElement.BackgroundColor\n            Console.ForegroundColor = _\n                customSection.ConsoleElement.ForegroundColor\n            &#39; Apply the changes.\n            Console.Clear()\n        Catch e As ConfigurationErrorsException\n            Console.WriteLine(&quot;[Error exception: {0}]&quot;, _\n                              e.ToString())\n        End Try\n\n        &#39; Display feedback.\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using OpenExeConfiguration(string).&quot;)\n        &#39; Display the current configuration file path.\n        Console.WriteLine( _\n            &quot;Configuration file is: {0}&quot;, config.FilePath)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_OpenMachineConfiguration\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_OpenMachineConfiguration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenMachineConfiguration()</div>        \r\n          </div>\r\n    \r\n            <p>Opens the machine configuration file on the current computer as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.Configuration OpenMachineConfiguration ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  </p>\n<p> <em>%windir%</em>\\Microsoft.NET\\Framework\\<em>version</em>\\config  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To obtain the <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#4\">    // Access the machine configuration file using mapping.\n    // The function uses the OpenMappedMachineConfiguration \n    // method to access the machine configuration. \n    public static void MapMachineConfiguration()\n    {\n      // Get the machine.config file.\n      Configuration machineConfig =\n        ConfigurationManager.OpenMachineConfiguration();\n      // Get the machine.config file path.\n      ConfigurationFileMap configFile =\n        new ConfigurationFileMap(machineConfig.FilePath);\n\n      // Map the application configuration file to the machine \n      // configuration file.\n      Configuration config =\n        ConfigurationManager.OpenMappedMachineConfiguration(\n          configFile);\n\n      // Get the AppSettings section.\n      AppSettingsSection appSettingSection =\n        (AppSettingsSection)config.GetSection(&quot;appSettings&quot;);\n      appSettingSection.SectionInformation.AllowExeDefinition =\n          ConfigurationAllowExeDefinition.MachineToRoamingUser;\n\n      // Display the configuration file sections.\n      ConfigurationSectionCollection sections = \n        config.Sections;\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using OpenMappedMachineConfiguration.&quot;);\n      Console.WriteLine(&quot;Sections in machine.config:&quot;);\n\n      // Get the sections in the machine.config.\n      foreach (ConfigurationSection section in sections)\n      {\n          string name = section.SectionInformation.Name;\n          Console.WriteLine(&quot;Name: {0}&quot;, name);\n      }\n\n    }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#4\">    &#39; Access the machine configuration file using mapping.\n    &#39; The function uses the OpenMappedMachineConfiguration \n    &#39; method to access the machine configuration. \n    Public Shared Sub MapMachineConfiguration()\n        &#39; Get the machine.config file.\n        Dim machineConfig As Configuration = _\n            ConfigurationManager.OpenMachineConfiguration()\n        &#39; Get the machine.config file path.\n        Dim configFile _\n            As New ConfigurationFileMap( _\n                machineConfig.FilePath)\n\n        &#39; Map the application configuration file \n        &#39; to the machine configuration file.\n        Dim config As Configuration = _\n            ConfigurationManager. _\n            OpenMappedMachineConfiguration( _\n                configFile)\n\n        &#39; Get the AppSettings section.\n        Dim appSettingSection As AppSettingsSection = _\n            DirectCast(config.GetSection(&quot;appSettings&quot;),  _\n                AppSettingsSection)\n        appSettingSection.SectionInformation. _\n        AllowExeDefinition = _\n            ConfigurationAllowExeDefinition. _\n            MachineToRoamingUser\n\n        &#39; Display the configuration file sections.\n        Dim sections As  _\n            ConfigurationSectionCollection = _\n            config.Sections\n\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using OpenMappedMachineConfiguration.&quot;)\n        Console.WriteLine( _\n            &quot;Sections in machine.config:&quot;)\n\n        &#39; Get the sections in the machine.config.\n        For Each section _\n            As ConfigurationSection In sections\n            Dim name As String = _\n                section.SectionInformation.Name\n            Console.WriteLine(&quot;Name: {0}&quot;, name)\n        Next\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_System_Configuration_ExeConfigurationFileMap_System_Configuration_ConfigurationUserLevel_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Opens the specified client configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that uses the specified file mapping and user level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileMap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.execonfigurationfilemap\" data-linktype=\"relative-path\">ExeConfigurationFileMap</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.configuration.execonfigurationfilemap\" data-linktype=\"relative-path\">ExeConfigurationFileMap</a> object that references configuration file to use instead of the application default configuration file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a> object for which you are opening the configuration.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a></div>\r\n                  </div>\r\n                  <p>The configuration object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a> object determines the location of the configuration file being opened. It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path determined by <code>userLevel</code>).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To obtain the <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#9\">\n    // Access a configuration file using mapping.\n    // This function uses the OpenMappedExeConfiguration \n    // method to access a new configuration file.   \n    // It also gets the custom ConsoleSection and \n    // sets its ConsoleEment BackgroundColor and\n    // ForegroundColor properties to green and red\n    // respectively. Then it uses these properties to\n    // set the console colors.  \n    public static void MapExeConfiguration()\n    {\n\n      // Get the application configuration file.\n      System.Configuration.Configuration config =\n        ConfigurationManager.OpenExeConfiguration(\n              ConfigurationUserLevel.None);\n    \n      Console.WriteLine(config.FilePath);\n\n      if (config == null)\n      {\n        Console.WriteLine(\n          &quot;The configuration file does not exist.&quot;);\n        Console.WriteLine(\n         &quot;Use OpenExeConfiguration to create the file.&quot;);\n      }\n\n      // Create a new configuration file by saving \n      // the application configuration to a new file.\n      string appName = \n        Environment.GetCommandLineArgs()[0];\n\n      string configFile =  string.Concat(appName, \n        &quot;.2.config&quot;);\n      config.SaveAs(configFile, ConfigurationSaveMode.Full);\n\n      // Map the new configuration file.\n      ExeConfigurationFileMap configFileMap = \n          new ExeConfigurationFileMap();\n      configFileMap.ExeConfigFilename = configFile;\n\n      // Get the mapped configuration file\n     config = \n        ConfigurationManager.OpenMappedExeConfiguration(\n          configFileMap, ConfigurationUserLevel.None);\n\n      // Make changes to the new configuration file. \n      // This is to show that this file is the \n      // one that is used.\n      string sectionName = &quot;consoleSection&quot;;\n\n      ConsoleSection customSection =\n        (ConsoleSection)config.GetSection(sectionName);\n\n      if (customSection == null)\n      {\n          customSection = new ConsoleSection();\n          config.Sections.Add(sectionName, customSection);\n      }\n      else\n          // Change the section configuration values.\n          customSection =\n              (ConsoleSection)config.GetSection(sectionName);\n\n      customSection.ConsoleElement.BackgroundColor =\n          ConsoleColor.Green;\n      customSection.ConsoleElement.ForegroundColor =\n          ConsoleColor.Red;\n \n      // Save the configuration file.\n      config.Save(ConfigurationSaveMode.Modified);\n\n      // Force a reload of the changed section. This \n      // makes the new values available for reading.\n      ConfigurationManager.RefreshSection(sectionName);\n\n      // Set console properties using the \n      // configuration values contained in the \n      // new configuration file.\n      Console.BackgroundColor =\n        customSection.ConsoleElement.BackgroundColor;\n      Console.ForegroundColor =\n        customSection.ConsoleElement.ForegroundColor;\n      Console.Clear();\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using OpenMappedExeConfiguration.&quot;);\n      Console.WriteLine(&quot;Configuration file is: {0}&quot;, \n        config.FilePath);\n    }\n  \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#9\">\n    &#39; Access a configuration file using mapping.\n    &#39; This function uses the OpenMappedExeConfiguration \n    &#39; method to access a new configuration file.   \n    &#39; It also gets the custom ConsoleSection and \n    &#39; sets its ConsoleEment BackgroundColor and\n    &#39; ForegroundColor properties to green and red\n    &#39; respectively. Then it uses these properties to\n    &#39; set the console colors.  \n    Public Shared Sub MapExeConfiguration()\n\n        &#39; Get the application configuration file.\n        Dim config As System.Configuration.Configuration = _\n        ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n\n        Console.WriteLine(config.FilePath)\n\n        If config Is Nothing Then\n            Console.WriteLine( _\n            &quot;The configuration file does not exist.&quot;)\n            Console.WriteLine( _\n            &quot;Use OpenExeConfiguration to create file.&quot;)\n        End If\n\n        &#39; Create a new configuration file by saving \n        &#39; the application configuration to a new file.\n        Dim appName As String = _\n            Environment.GetCommandLineArgs()(0)\n\n        Dim configFile As String = _\n            String.Concat(appName, &quot;2.config&quot;)\n        config.SaveAs(configFile, _\n                      ConfigurationSaveMode.Full)\n\n        &#39; Map the new configuration file.\n        Dim configFileMap As New ExeConfigurationFileMap()\n        configFileMap.ExeConfigFilename = configFile\n\n        &#39; Get the mapped configuration file\n        config = _\n        ConfigurationManager.OpenMappedExeConfiguration( _\n            configFileMap, ConfigurationUserLevel.None)\n\n        &#39; Make changes to the new configuration file. \n        &#39; This is to show that this file is the \n        &#39; one that is used.\n        Dim sectionName As String = &quot;consoleSection&quot;\n\n        Dim customSection As ConsoleSection = _\n            DirectCast(config.GetSection(sectionName),  _\n                ConsoleSection)\n\n        If customSection Is Nothing Then\n            customSection = New ConsoleSection()\n            config.Sections.Add(sectionName, customSection)\n        End If\n\n        &#39; Change the section configuration values.\n        customSection = _\n            DirectCast(config.GetSection(sectionName),  _\n                ConsoleSection)\n        customSection.ConsoleElement.BackgroundColor = _\n            ConsoleColor.Green\n        customSection.ConsoleElement.ForegroundColor = _\n            ConsoleColor.Red\n        &#39; Save the configuration file.\n        config.Save(ConfigurationSaveMode.Modified)\n\n        &#39; Force a reload of the changed section. This \n        &#39; makes the new values available for reading.\n        ConfigurationManager.RefreshSection(sectionName)\n\n        &#39; Set console properties using the \n        &#39; configuration values contained in the \n        &#39; new configuration file.\n        Console.BackgroundColor = _\n            customSection.ConsoleElement.BackgroundColor\n        Console.ForegroundColor = _\n            customSection.ConsoleElement.ForegroundColor\n        Console.Clear()\n\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using OpenMappedExeConfiguration.&quot;)\n        Console.WriteLine( _\n            &quot;Configuration file is: {0}&quot;, config.FilePath)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_System_Configuration_ExeConfigurationFileMap_System_Configuration_ConfigurationUserLevel_System_Boolean_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Opens the specified client configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that uses the specified file mapping, user level, and preload option.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileMap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.execonfigurationfilemap\" data-linktype=\"relative-path\">ExeConfigurationFileMap</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.configuration.execonfigurationfilemap\" data-linktype=\"relative-path\">ExeConfigurationFileMap</a> object that references the configuration file to use instead of the default application configuration file.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>userLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a> object for which you are opening the configuration.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>preLoad</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to preload all section groups and sections; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a></div>\r\n                  </div>\r\n                  <p>The configuration object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.configuration.configurationuserlevel\" data-linktype=\"relative-path\">ConfigurationUserLevel</a> object determines the location of the configuration file that is being opened. It indicates whether the file has no user level (the configuration file is in the same directory as the application) or has a per-user level (the configuration file is in an application settings path that is determined by <code>userLevel</code>).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To obtain the <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists.  </p>\n</div>\n<p> For a code example, see the <a class=\"xref\" href=\"system.configuration.configurationmanager#System_Configuration_ConfigurationManager_OpenMappedExeConfiguration_\" data-linktype=\"relative-path\">OpenMappedExeConfiguration</a> overload.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_OpenMappedMachineConfiguration_System_Configuration_ConfigurationFileMap_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_OpenMappedMachineConfiguration_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OpenMappedMachineConfiguration(ConfigurationFileMap)</div>        \r\n          </div>\r\n    \r\n            <p>Opens the machine configuration file as a <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object that uses the specified file mapping.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>fileMap</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationfilemap\" data-linktype=\"relative-path\">ConfigurationFileMap</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.configuration.execonfigurationfilemap\" data-linktype=\"relative-path\">ExeConfigurationFileMap</a> object that references configuration file to use instead of the application default configuration file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></div>\r\n                  </div>\r\n                  <p>A configuration file could not be loaded.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  </p>\n<p> <em>%windir%</em>\\Microsoft.NET\\Framework\\<em>version</em>\\config  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To obtain the <a class=\"xref\" href=\"system.configuration.configuration\" data-linktype=\"relative-path\">Configuration</a> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#4\">    // Access the machine configuration file using mapping.\n    // The function uses the OpenMappedMachineConfiguration \n    // method to access the machine configuration. \n    public static void MapMachineConfiguration()\n    {\n      // Get the machine.config file.\n      Configuration machineConfig =\n        ConfigurationManager.OpenMachineConfiguration();\n      // Get the machine.config file path.\n      ConfigurationFileMap configFile =\n        new ConfigurationFileMap(machineConfig.FilePath);\n\n      // Map the application configuration file to the machine \n      // configuration file.\n      Configuration config =\n        ConfigurationManager.OpenMappedMachineConfiguration(\n          configFile);\n\n      // Get the AppSettings section.\n      AppSettingsSection appSettingSection =\n        (AppSettingsSection)config.GetSection(&quot;appSettings&quot;);\n      appSettingSection.SectionInformation.AllowExeDefinition =\n          ConfigurationAllowExeDefinition.MachineToRoamingUser;\n\n      // Display the configuration file sections.\n      ConfigurationSectionCollection sections = \n        config.Sections;\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using OpenMappedMachineConfiguration.&quot;);\n      Console.WriteLine(&quot;Sections in machine.config:&quot;);\n\n      // Get the sections in the machine.config.\n      foreach (ConfigurationSection section in sections)\n      {\n          string name = section.SectionInformation.Name;\n          Console.WriteLine(&quot;Name: {0}&quot;, name);\n      }\n\n    }\n \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#4\">    &#39; Access the machine configuration file using mapping.\n    &#39; The function uses the OpenMappedMachineConfiguration \n    &#39; method to access the machine configuration. \n    Public Shared Sub MapMachineConfiguration()\n        &#39; Get the machine.config file.\n        Dim machineConfig As Configuration = _\n            ConfigurationManager.OpenMachineConfiguration()\n        &#39; Get the machine.config file path.\n        Dim configFile _\n            As New ConfigurationFileMap( _\n                machineConfig.FilePath)\n\n        &#39; Map the application configuration file \n        &#39; to the machine configuration file.\n        Dim config As Configuration = _\n            ConfigurationManager. _\n            OpenMappedMachineConfiguration( _\n                configFile)\n\n        &#39; Get the AppSettings section.\n        Dim appSettingSection As AppSettingsSection = _\n            DirectCast(config.GetSection(&quot;appSettings&quot;),  _\n                AppSettingsSection)\n        appSettingSection.SectionInformation. _\n        AllowExeDefinition = _\n            ConfigurationAllowExeDefinition. _\n            MachineToRoamingUser\n\n        &#39; Display the configuration file sections.\n        Dim sections As  _\n            ConfigurationSectionCollection = _\n            config.Sections\n\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using OpenMappedMachineConfiguration.&quot;)\n        Console.WriteLine( _\n            &quot;Sections in machine.config:&quot;)\n\n        &#39; Get the sections in the machine.config.\n        For Each section _\n            As ConfigurationSection In sections\n            Dim name As String = _\n                section.SectionInformation.Name\n            Console.WriteLine(&quot;Name: {0}&quot;, name)\n        Next\n\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Configuration_ConfigurationManager_RefreshSection_System_String_\">\r\n    \r\n            <a id=\"System_Configuration_ConfigurationManager_RefreshSection_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RefreshSection(String)</div>        \r\n          </div>\r\n    \r\n            <p>Refreshes the named section so the next time that it is retrieved it will be re-read from disk.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void RefreshSection (string sectionName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sectionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The configuration section name or the configuration path and section name of the section to refresh.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method invalidates the cache for the specified configuration section without affecting other sections.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigurationManager#7\">    // Create the AppSettings section.\n    // The function uses the GetSection(string)method \n    // to access the configuration section. \n    // It also adds a new element to the section collection.\n    public static void CreateAppSettings()\n    {\n      // Get the application configuration file.\n      System.Configuration.Configuration config =\n        ConfigurationManager.OpenExeConfiguration(\n              ConfigurationUserLevel.None);\n\n      string sectionName = &quot;appSettings&quot;;\n\n      // Add an entry to appSettings.\n      int appStgCnt =\n          ConfigurationManager.AppSettings.Count;\n      string newKey = &quot;NewKey&quot; + appStgCnt.ToString();\n\n      string newValue = DateTime.Now.ToLongDateString() + \n        &quot; &quot; + DateTime.Now.ToLongTimeString();\n\n      config.AppSettings.Settings.Add(newKey, newValue);\n\n      // Save the configuration file.\n      config.Save(ConfigurationSaveMode.Modified);\n      \n      // Force a reload of the changed section. This \n      // makes the new values available for reading.\n      ConfigurationManager.RefreshSection(sectionName);\n\n      // Get the AppSettings section.\n      AppSettingsSection appSettingSection =\n        (AppSettingsSection)config.GetSection(sectionName);\n\n      Console.WriteLine();\n      Console.WriteLine(&quot;Using GetSection(string).&quot;);\n      Console.WriteLine(&quot;AppSettings section:&quot;);\n      Console.WriteLine(\n        appSettingSection.SectionInformation.GetRawXml());\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigurationManager#7\">    &#39; Create the AppSettings section.\n    &#39; The function uses the GetSection(string)method \n    &#39; to access the configuration section. \n    &#39; It also adds a new element to the section collection.\n    Public Shared Sub CreateAppSettings()\n        &#39; Get the application configuration file.\n        Dim config As System.Configuration.Configuration = _\n        ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n\n        Dim sectionName As String = &quot;appSettings&quot;\n\n        &#39; Add an entry to appSettings.\n        Dim appStgCnt As Integer = _\n            ConfigurationManager.AppSettings.Count\n        Dim newKey As String = _\n            &quot;NewKey&quot; + appStgCnt.ToString()\n\n        Dim newValue As String = _\n            DateTime.Now.ToLongDateString() + &quot; &quot; + _\n            DateTime.Now.ToLongTimeString()\n\n        config.AppSettings.Settings.Add(newKey, _\n                                        newValue)\n\n        &#39; Save the configuration file.\n        config.Save(ConfigurationSaveMode.Modified)\n\n        &#39; Force a reload of the changed section. This \n        &#39; makes the new values available for reading.\n        ConfigurationManager.RefreshSection(sectionName)\n\n        &#39; Get the AppSettings section.\n        Dim appSettingSection As AppSettingsSection = _\n            DirectCast(config.GetSection(sectionName),  _\n            AppSettingsSection)\n\n        Console.WriteLine()\n        Console.WriteLine( _\n            &quot;Using GetSection(string).&quot;)\n        Console.WriteLine( _\n            &quot;AppSettings section:&quot;)\n        Console.WriteLine( _\n            appSettingSection.SectionInformation.GetRawXml())\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Configuration.ConfigurationManager.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Configuration.ConfigurationManager.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.AppSettings\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.ConnectionStrings\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.GetSection\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.OpenExeConfiguration\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.OpenMachineConfiguration\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.OpenMappedExeConfiguration\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationManager.RefreshSection\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"07f12c92-8324-2291-819c-4e1a6d979c7b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to configuration files for client applications. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Configuration/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.ConfigurationManager\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Configuration.ConfigurationManager.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Configuration.ConfigurationManager.yml","open_to_public_contributors":true,"api_name":["System.Configuration.ConfigurationManager","System.Configuration.ConfigurationManager.AppSettings","System.Configuration.ConfigurationManager.ConnectionStrings","System.Configuration.ConfigurationManager.GetSection","System.Configuration.ConfigurationManager.OpenExeConfiguration","System.Configuration.ConfigurationManager.OpenMachineConfiguration","System.Configuration.ConfigurationManager.OpenMappedExeConfiguration","System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration","System.Configuration.ConfigurationManager.RefreshSection"],"api_location":["System.Configuration.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.ConfigurationManager","System::Configuration::ConfigurationManager","System.Configuration.ConfigurationManager.AppSettings","System::Configuration::ConfigurationManager::AppSettings","System.Configuration.ConfigurationManager.ConnectionStrings","System::Configuration::ConfigurationManager::ConnectionStrings","System.Configuration.ConfigurationManager.GetSection","System::Configuration::ConfigurationManager::GetSection","System.Configuration.ConfigurationManager.OpenExeConfiguration","System::Configuration::ConfigurationManager::OpenExeConfiguration","System.Configuration.ConfigurationManager.OpenMachineConfiguration","System::Configuration::ConfigurationManager::OpenMachineConfiguration","System.Configuration.ConfigurationManager.OpenMappedExeConfiguration","System::Configuration::ConfigurationManager::OpenMappedExeConfiguration","System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration","System::Configuration::ConfigurationManager::OpenMappedMachineConfiguration","System.Configuration.ConfigurationManager.RefreshSection","System::Configuration::ConfigurationManager::RefreshSection"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"07f12c92-8324-2291-819c-4e1a6d979c7b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Configuration/ConfigurationManager.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConfigurationManager class | Microsoft Docs","_op_ogTitle":"ConfigurationManager class","description":"Provides access to configuration files for client applications. This class cannot be inherited.\n","toc_asset_id":"_splitted/System.Configuration/toc.json","toc_rel":"_splitted/System.Configuration/toc.json","source_url":"","ms.assetid":"System.Configuration.ConfigurationManager","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.configuration.configurationmanager","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.configuration.configurationmanager","fileRelativePath":"System.Configuration.ConfigurationManager.html"},"themesRelativePathToOutputRoot":"_themes/"}