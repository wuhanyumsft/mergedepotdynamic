{"content":"    \r\n    <h1 id=\"System_Diagnostics_Debug\">\r\n      <span class=\"lang-csharp\">Debug</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a set of methods and properties that help debug your code.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static class Debug</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Debug</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>If you use methods in the Debug class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.  </p>\n<p> This class provides methods to display an <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> dialog box, and to emit an assertion that will always fail. This class provides write methods in the following variations: <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Write_\" data-linktype=\"relative-path\">Write</a>, <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a>, <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteIf_\" data-linktype=\"relative-path\">WriteIf</a> and <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLineIf_\" data-linktype=\"relative-path\">WriteLineIf</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.diagnostics.booleanswitch\" data-linktype=\"relative-path\">BooleanSwitch</a> and <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> classes provide means to dynamically control the tracing output. You can modify the values of these switches without recompiling your application. For information on using the configuration file to set a switch, see the <a class=\"xref\" href=\"system.diagnostics.switch\" data-linktype=\"relative-path\">Switch</a> class and the <a href=\"../Topic/Trace%20Switches.md\" data-linktype=\"relative-path\">Trace Switches</a> topic.  </p>\n<p> You can customize the tracing output&#39;s target by adding <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> instances to or removing instances from the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection. The <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection is shared by both the Debug and the <a class=\"xref\" href=\"system.diagnostics.trace\" data-linktype=\"relative-path\">Trace</a> classes; adding a trace listener to either class adds the listener to both. By default, the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> class emits trace output.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Adding a trace listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available. The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic. It may be useful to place calls to the Debug methods in <code>try</code>/<code>catch</code> blocks to detect and handle any exceptions from trace listeners.  </p>\n</div>\n<p> You can modify the level of indentation using the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Indent_\" data-linktype=\"relative-path\">Indent</a> method or the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_IndentLevel_\" data-linktype=\"relative-path\">IndentLevel</a> property. To modify the indent spacing, use the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_IndentSize_\" data-linktype=\"relative-path\">IndentSize</a> property. You can specify whether to automatically flush the output buffer after each write by setting the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> property to <code>true</code>.  </p>\n<p> To set the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> and <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_IndentSize_\" data-linktype=\"relative-path\">IndentSize</a> for Debug, you can edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;trace autoflush=&quot;true&quot; indentsize=&quot;7&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre><p> The <a class=\"xref\" href=\"system.diagnostics.conditionalattribute\" data-linktype=\"relative-path\">ConditionalAttribute</a> attribute is applied to the methods of Debug. Compilers that support <a class=\"xref\" href=\"system.diagnostics.conditionalattribute\" data-linktype=\"relative-path\">ConditionalAttribute</a> ignore calls to these methods unless &quot;DEBUG&quot; is defined as a conditional compilation symbol. Refer to a compiler&#39;s documentation to determine whether <a class=\"xref\" href=\"system.diagnostics.conditionalattribute\" data-linktype=\"relative-path\">ConditionalAttribute</a> is supported and the syntax for defining a conditional compilation symbol.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In Visual Studio C# and Visual Basic projects, by default, the &quot;DEBUG&quot; conditional compilation symbol is defined for debug builds, and the &quot;TRACE&quot; symbol is defined for both debug and release builds. For information about how to disable this behavior, see the Visual Studio documentation. For information about conditional debugging in Visual C++, see <a href=\"../Topic/Debug%20Class%20(C++-CLI).md\" data-linktype=\"relative-path\">Debug Class (C++/CLI)</a>.  </p>\n</div>\n<p> To define the &quot;DEBUG&quot; conditional compilation symbol in C#, add the <code>/d:DEBUG</code> option to the compiler command line when you compile your code using a command line, or add <code>#define DEBUG</code> to the top of your file. In Visual Basic, add the <code>/d:DEBUG=True</code> option to the compiler command line or add <code>#Const DEBUG=True</code> to the file.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_AutoFlush\" data-linktype=\"self-bookmark\">AutoFlush</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating whether <span class=\"xref\">stem.Diagnostics.Debug.Flush*</span> should be called on the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> after every write.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_IndentLevel\" data-linktype=\"self-bookmark\">IndentLevel</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the indent level.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_IndentSize\" data-linktype=\"self-bookmark\">IndentSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of spaces in an indent.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Listeners\" data-linktype=\"self-bookmark\">Listeners</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of listeners that is monitoring the debug output.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Assert_System_Boolean_\" data-linktype=\"self-bookmark\">Assert(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks for a condition; if the condition is <code>false</code>, displays a message box that shows the call stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Assert_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Assert(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks for a condition; if the condition is <code>false</code>, outputs a specified message and displays a message box that shows the call stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Assert_System_Boolean_System_String_System_String_\" data-linktype=\"self-bookmark\">Assert(Boolean,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks for a condition; if the condition is <code>false</code>, outputs two specified messages and displays a message box that shows the call stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Assert_System_Boolean_System_String_System_String_System_Object___\" data-linktype=\"self-bookmark\">Assert(Boolean,String,String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Checks for a condition; if the condition is <code>false</code>, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Flushes the output buffer and then calls the <code>Close</code> method on each of the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Fail_System_String_\" data-linktype=\"self-bookmark\">Fail(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Emits the specified error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Fail_System_String_System_String_\" data-linktype=\"self-bookmark\">Fail(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Emits an error message and a detailed error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Flushes the output buffer and causes buffered data to write to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Indent\" data-linktype=\"self-bookmark\">Indent()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Increases the current <span class=\"xref\">stem.Diagnostics.Debug.IndentLevel*</span> by one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Print_System_String_\" data-linktype=\"self-bookmark\">Print(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Print_System_String_System_Object___\" data-linktype=\"self-bookmark\">Print(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a formatted string followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Unindent\" data-linktype=\"self-bookmark\">Unindent()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Decreases the current <span class=\"xref\">stem.Diagnostics.Debug.IndentLevel*</span> by one.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Write_System_Object_\" data-linktype=\"self-bookmark\">Write(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Write_System_String_\" data-linktype=\"self-bookmark\">Write(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Write_System_Object_System_String_\" data-linktype=\"self-bookmark\">Write(Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_Write_System_String_System_String_\" data-linktype=\"self-bookmark\">Write(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteIf_System_Boolean_System_Object_\" data-linktype=\"self-bookmark\">WriteIf(Boolean,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteIf_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">WriteIf(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteIf_System_Boolean_System_Object_System_String_\" data-linktype=\"self-bookmark\">WriteIf(Boolean,Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteIf_System_Boolean_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteIf(Boolean,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLine_System_Object_\" data-linktype=\"self-bookmark\">WriteLine(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLine_System_String_\" data-linktype=\"self-bookmark\">WriteLine(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLine_System_Object_System_String_\" data-linktype=\"self-bookmark\">WriteLine(Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLine_System_String_System_Object___\" data-linktype=\"self-bookmark\">WriteLine(String,Object[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a formatted message followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLine_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteLine(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_Object_\" data-linktype=\"self-bookmark\">WriteLineIf(Boolean,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">WriteLineIf(Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_Object_System_String_\" data-linktype=\"self-bookmark\">WriteLineIf(Boolean,Object,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_String_System_String_\" data-linktype=\"self-bookmark\">WriteLineIf(Boolean,String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_AutoFlush\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_AutoFlush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AutoFlush</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating whether <span class=\"xref\">stem.Diagnostics.Debug.Flush*</span> should be called on the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> after every write.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool AutoFlush { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <span class=\"xref\">stem.Diagnostics.Debug.Flush*</span> is called on the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> after every write; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default is <code>false</code>.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Flush_\" data-linktype=\"relative-path\">Flush</a> or <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Close_\" data-linktype=\"relative-path\">Close</a>. Setting AutoFlush to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  </p>\n<p> To set the AutoFlush and <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_IndentSize_\" data-linktype=\"relative-path\">IndentSize</a> for <a class=\"xref\" href=\"system.diagnostics.debug\" data-linktype=\"relative-path\">Debug</a>, you can also edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;trace autoflush=&quot;true&quot; indentsize=&quot;7&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_IndentLevel\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_IndentLevel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndentLevel</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the indent level.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndentLevel { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The indent level. The default is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The IndentLevel property represents the number of times the indent of size <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_IndentSize_\" data-linktype=\"relative-path\">IndentSize</a> is applied.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the indent level and emits debugging messages.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.IndentLevel Example#1\">   #if defined(DEBUG)\n   Debug::WriteLine( &quot;List of errors:&quot; );\n   Debug::Indent();\n   Debug::WriteLine( &quot;Error 1: File not found&quot; );\n   Debug::WriteLine( &quot;Error 2: Directory not found&quot; );\n   Debug::Unindent();\n   Debug::WriteLine( &quot;End of list of errors&quot; );\n   #endif\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.IndentLevel Example#1\"> Debug.WriteLine(&quot;List of errors:&quot;);\n Debug.Indent();\n Debug.WriteLine(&quot;Error 1: File not found&quot;);\n Debug.WriteLine(&quot;Error 2: Directory not found&quot;);\n Debug.Unindent();\n Debug.WriteLine(&quot;End of list of errors&quot;);\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.IndentLevel Example#1\">        Debug.WriteLine(&quot;List of errors:&quot;)\n        Debug.Indent()\n        Debug.WriteLine(&quot;Error 1: File not found&quot;)\n        Debug.WriteLine(&quot;Error 2: Directory not found&quot;)\n        Debug.Unindent()\n        Debug.WriteLine(&quot;End of list of errors&quot;)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_IndentSize\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_IndentSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndentSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of spaces in an indent.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static int IndentSize { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of spaces in an indent. The default is four.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> interprets this number as spaces. An <a class=\"xref\" href=\"system.diagnostics.eventlogtracelistener\" data-linktype=\"relative-path\">EventLogTraceListener</a> ignores this value.  </p>\n<p> To set the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> and IndentSize for <a class=\"xref\" href=\"system.diagnostics.debug\" data-linktype=\"relative-path\">Debug</a>, you can also edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;trace autoflush=&quot;true&quot; indentsize=&quot;7&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Listeners\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Listeners_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Listeners</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of listeners that is monitoring the debug output.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Diagnostics.TraceListenerCollection Listeners { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> representing a collection of type <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> that monitors the debug output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The listeners produce formatted output from the debug output. By default, the collection contains an instance of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> class. To remove the default listener, call the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Remove_\" data-linktype=\"relative-path\">Remove</a> method, and pass it the instance of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. To redirect output to the console window, add an instance of the <a class=\"xref\" href=\"system.diagnostics.consoletracelistener\" data-linktype=\"relative-path\">ConsoleTraceListener</a>. To redirect output to a file or stream, add an instance of the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Listeners collection is shared by both the <a class=\"xref\" href=\"system.diagnostics.debug\" data-linktype=\"relative-path\">Debug</a> and the <a class=\"xref\" href=\"system.diagnostics.trace\" data-linktype=\"relative-path\">Trace</a> classes; adding a trace listener to either class adds the listener to both.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> that outputs to the console screen. The code then adds the new listener to the Listeners.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Listeners Example#1\">/* Create a listener that outputs to the console screen, and \n  * add it to the debug listeners. */\n TextWriterTraceListener myWriter = new \n    TextWriterTraceListener(System.Console.Out);\n Debug.Listeners.Add(myWriter);\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Listeners Example#1\">        &#39; Create a listener that outputs to the console screen, and \n        &#39; add it to the debug listeners. \n        Dim myWriter As New TextWriterTraceListener(System.Console.Out)\n        Debug.Listeners.Add(myWriter)\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Listeners Example#1\">   // Create a listener that outputs to the console screen \n   // and add it to the debug listeners.\n   #if defined(DEBUG)\n   TextWriterTraceListener^ myWriter = \n      gcnew TextWriterTraceListener( System::Console::Out );\n   Debug::Listeners-&gt;Add( myWriter );\n   #endif\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Assert_System_Boolean_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Checks for a condition; if the condition is <code>false</code>, displays a message box that shows the call stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assert (bool condition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, a failure message is not sent and the message box is not displayed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method works only in debug builds. Use the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> method if you want to do assertions in release builds. For more information, see <a href=\"../Topic/Assertions%20in%20Managed%20Code.md\" data-linktype=\"relative-path\">Assertions in Managed Code</a>.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The <code>Assert</code> methods are not available for <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appstore-long-md.md&quot; -->Windows Store<!--END INCLUDE --> apps.  </p>\n</div>\n<p> Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is <code>false</code>, it sends a failure message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection. You can customize this behavior by adding a <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> to, or removing one from, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<p> When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <strong>Abort</strong>, <strong>Retry</strong>, and <strong>Ignore</strong>. Clicking the <strong>Abort</strong> button terminates the application. Clicking <strong>Retry</strong> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <strong>Ignore</strong> continues with the next instruction in the code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/win8-appname-long-md.md&quot; -->Windows 8.x Store<!--END INCLUDE --> apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode. The message is written to the active trace listeners in debugging mode, or no message is written in release mode.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> The display of the message box depends on the presence of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. If the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> is not in the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, the message box is not displayed. The <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> can be removed by the <a href=\"../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;clear&amp;gt;</a>, the <a href=\"../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;remove&amp;gt;</a>, or by calling the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> property (<code>System.Diagnostics.Trace.Listeners.Clear()</code>).  </p>\n</div>\n<p> You can change the behavior of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener#System_Diagnostics_DefaultTraceListener_LogFileName_\" data-linktype=\"relative-path\">LogFileName</a> property. The configuration file should be formatted as follows:  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;assert assertuienabled=&quot;true&quot; logfilename=&quot;c:\\\\myFile.log&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates an index for an array, performs some action to set the value of the index, and then calls Assert to confirm that the index value is valid. If it is not valid, Assert outputs the call stack.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.Assert Example#1\">   // Create a local value.\n   int index;\n   \n   // Perform some action that sets the local value.\n   index = -40;\n   \n   // Test that the local value is valid. \n   #if defined(DEBUG)\n   Debug::Assert( index &gt; -1 );\n   #endif\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Assert Example#1\">        &#39; Create an index for an array.\n        Dim index As Integer\n        \n        &#39; Perform some action that sets the index.\n        index = -40\n        \n        &#39; Test that the index value is valid. \n        Debug.Assert((index &gt; - 1))\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.Assert Example#1\">// Create an index for an array.\n int index;\n \n // Perform some action that sets the index.\n index = -40;\n \n // Test that the index value is valid. \n Debug.Assert(index &gt; -1);   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Assert_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks for a condition; if the condition is <code>false</code>, outputs a specified message and displays a message box that shows the call stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assert (bool condition, string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the specified message is not sent and the message box is not displayed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to send to the <span class=\"xref\">stem.Diagnostics.Trace.Listeners*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method works only in debug builds. Use the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> method if you want to do assertions in release builds. For more information, see <a href=\"../Topic/Assertions%20in%20Managed%20Code.md\" data-linktype=\"relative-path\">Assertions in Managed Code</a>.  </p>\n<p> Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is <code>false</code>, it sends the specified diagnostic message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection. You can customize this behavior by adding a <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> to, or removing one from, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<p> When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <strong>Abort</strong>, <strong>Retry</strong>, and <strong>Ignore</strong>. Clicking the <strong>Abort</strong> button terminates the application. Clicking <strong>Retry</strong> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <strong>Ignore</strong> continues with the next instruction in the code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The display of the message box depends on the presence of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. If the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> is not in the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, the message box is not displayed. The <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> can be removed by the <a href=\"../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;clear&amp;gt;</a>, the <a href=\"../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;remove&amp;gt;</a>, or by calling the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> property (<code>System.Diagnostics.Trace.Listeners.Clear()</code>).  </p>\n</div>\n<p> You can change the behavior of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener#System_Diagnostics_DefaultTraceListener_LogFileName_\" data-linktype=\"relative-path\">LogFileName</a> property. The configuration file should be formatted as follows:  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;assert assertuienabled=&quot;true&quot; logfilename=&quot;c:\\\\myFile.log&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the <code>type</code> parameter is valid. If <code>type</code> is <code>null</code>, <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> outputs a message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Assert1 Example#1\">public static void MyMethod(Type type, Type baseType) {\n    Debug.Assert(type != null, &quot;Type parameter is null&quot;);\n \n   // Perform some processing.\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Assert1 Example#1\">void MyMethod( Object^ obj, Type^ type )\n{\n   #if defined(DEBUG)\n   Debug::Assert( type != nullptr, &quot;Type paramater is null&quot; );\n   #endif\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Assert1 Example#1\">    Public Shared Sub MyMethod(type As Type, baseType As Type)\n        Debug.Assert(Not (type Is Nothing), &quot;Type parameter is null&quot;)\n    End Sub &#39;MyMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Assert_System_Boolean_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert(Boolean,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Checks for a condition; if the condition is <code>false</code>, outputs two specified messages and displays a message box that shows the call stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assert (bool condition, string message, string detailMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the specified messages are not sent and the message box is not displayed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to send to the <span class=\"xref\">stem.Diagnostics.Trace.Listeners*</span> collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>detailMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The detailed message to send to the <span class=\"xref\">stem.Diagnostics.Trace.Listeners*</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method works only in debug builds. Use the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> method if you want to do assertions in release builds. For more information, see <a href=\"../Topic/Assertions%20in%20Managed%20Code.md\" data-linktype=\"relative-path\">Assertions in Managed Code</a>.  </p>\n<p> Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is <code>false</code>, it sends the specified diagnostic message and detailed message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection. You can customize this behavior by adding a <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> to, or removing one from, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<p> When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <strong>Abort</strong>, <strong>Retry</strong>, and <strong>Ignore</strong>. Clicking the <strong>Abort</strong> button terminates the application. Clicking <strong>Retry</strong> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <strong>Ignore</strong> continues with the next instruction in the code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The display of the message box depends on the presence of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. If the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> is not in the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, the message box is not displayed. The <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> can be removed by the <a href=\"../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;clear&amp;gt;</a>, the <a href=\"../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;remove&amp;gt;</a>, or by calling the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> property (<code>System.Diagnostics.Trace.Listeners.Clear()</code>).  </p>\n</div>\n<p> You can change the behavior of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener#System_Diagnostics_DefaultTraceListener_LogFileName_\" data-linktype=\"relative-path\">LogFileName</a> property. The configuration file should be formatted as follows:  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;assert assertuienabled=&quot;true&quot; logfilename=&quot;c:\\\\myFile.log&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre>\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example checks whether the <code>type</code> parameter is valid. If <code>type</code> is <code>null</code>, <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> outputs two messages.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.Assert2 Example#1\">void MyMethod( Object^ obj, Type^ type )\n{\n   #if defined(DEBUG)\n   Debug::Assert( type != nullptr, &quot;Type paramater is null&quot;, &quot;Can&#39;t get object for null type&quot; );\n   #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.Assert2 Example#1\">public static void MyMethod(Type type, Type baseType) {\n    Debug.Assert(type != null, &quot;Type parameter is null&quot;, \n       &quot;Can&#39;t get object for null type&quot;);\n \n   // Perform some processing.\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Assert2 Example#1\">    Public Shared Sub MyMethod(type As Type, baseType As Type)\n        Debug.Assert( Not (type Is Nothing), &quot;Type parameter is null&quot;, &quot;Can&#39;t get object for null type&quot;)\n        &#39; Perform some processing.\n    End Sub &#39;MyMethod\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Assert_System_Boolean_System_String_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Assert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Assert(Boolean,String,String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Checks for a condition; if the condition is <code>false</code>, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Assert (bool condition, string message, string detailMessageFormat, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the specified messages are not sent and the message box is not displayed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to send to the <span class=\"xref\">stem.Diagnostics.Trace.Listeners*</span> collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>detailMessageFormat</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The composite format string (see Remarks) to send to the <span class=\"xref\">stem.Diagnostics.Trace.Listeners*</span> collection. This message contains text intermixed with zero or more format items, which correspond to objects in the <code>args</code> array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object array that contains zero or more objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is sent to the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<p> By default, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Assert_\" data-linktype=\"relative-path\">Assert</a> method works only in debug builds. Use the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Assert_\" data-linktype=\"relative-path\">Assert</a> method if you want to do assertions in release builds. For more information, see <a href=\"../Topic/Assertions%20in%20Managed%20Code.md\" data-linktype=\"relative-path\">Assertions in Managed Code</a>.  </p>\n<p> Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is <code>false</code>, The [String.Format(String,â€‚Object&lt;xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method is called and the <code>detailMessageFormat</code> string and <code>args</code> array are passed in as parameters. Assert then sends the specified text message and the formatted text message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection. You can customize this behavior by adding a <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> to, or removing one from, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<p> When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: <strong>Abort</strong>, <strong>Retry</strong>, and <strong>Ignore</strong>. Clicking the <strong>Abort</strong> button terminates the application. Clicking <strong>Retry</strong> sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking <strong>Ignore</strong> continues with the next instruction in the code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The display of the message box is dependent on the presence of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. If the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> is not in the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, the message box is not displayed. The <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> can be removed by the <a href=\"../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;clear&amp;gt;</a>, the <a href=\"../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;remove&amp;gt;</a>, or by calling the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> property (<code>System.Diagnostics.Trace.Listeners.Clear()</code>).  </p>\n</div>\n<p> You can change the behavior of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener#System_Diagnostics_DefaultTraceListener_LogFileName_\" data-linktype=\"relative-path\">LogFileName</a> property. The configuration file should be formatted as follows:  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.diagnostics&gt;  \n    &lt;assert assertuienabled=&quot;true&quot; logfilename=&quot;c:\\\\myFile.log&quot; /&gt;  \n  &lt;/system.diagnostics&gt;  \n&lt;/configuration&gt;\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Close\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Flushes the output buffer and then calls the <code>Close</code> method on each of the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this method when the output goes to a file, such as to the <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a>.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Flush_\" data-linktype=\"relative-path\">Flush</a> or Close. Setting <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> named <code>myTextListener</code>. <code>myTextListener</code> uses a <a class=\"xref\" href=\"system.io.streamwriter\" data-linktype=\"relative-path\">StreamWriter</a> called <code>myOutputWriter</code> to write to a file named <code>TestFile.txt</code>. The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.Close Example#1\">// Specify /DDEBUG when compiling.\n\n#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\n\nvoid main()\n{\n     #if defined(DEBUG)\n    // Create a new stream object for an output file named TestFile.txt.\n    FileStream^ myFileStream = \n        gcnew FileStream( &quot;TestFile.txt&quot;, FileMode::Append );\n   \n    // Add the stream object to the trace listeners.\n    TextWriterTraceListener^ myTextListener = \n        gcnew TextWriterTraceListener( myFileStream );\n    Debug::Listeners-&gt;Add( myTextListener );\n   \n    // Write output to the file.\n    Debug::WriteLine( &quot;Test output&quot; );\n   \n    // Flush and close the output stream.\n    Debug::Flush();\n    Debug::Close();\n    #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.Close Example#1\">// Specify /d:DEBUG when compiling.\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\nclass Test\n{\n    static void Main()\n    {\n        // Create a new stream object for an output file named TestFile.txt.\n        using (FileStream myFileStream = \n            new FileStream(&quot;TestFile.txt&quot;, FileMode.Append))\n        {\n            // Add the stream object to the trace listeners.\n            TextWriterTraceListener myTextListener = \n                new TextWriterTraceListener(myFileStream);\n            Debug.Listeners.Add(myTextListener);\n          \n            // Write output to the file.\n            Debug.WriteLine(&quot;Test output&quot;);\n         \n            // Flush and close the output stream.\n            Debug.Flush();\n            Debug.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Close Example#1\">&#39; Specify /d:DEBUG=True when compiling.\n\nImports System\nImports System.IO\nImports System.Diagnostics\n\nClass Test\n    \n    Shared Sub Main()\n    \n        &#39; Create a new stream object for an output file named TestFile.txt.\n        Using myFileStream As New FileStream(&quot;TestFile.txt&quot;, FileMode.Append)\n        \n            &#39; Add the stream object to the trace listeners. \n            Dim myTextListener As New TextWriterTraceListener(myFileStream)\n            Debug.Listeners.Add(myTextListener)\n            \n            &#39; Write output to the file.\n            Debug.WriteLine(&quot;Test output&quot;)\n            \n            &#39; Flush and close the output stream.\n            Debug.Flush()\n            Debug.Close()\n        \n        End Using\n        \n    End Sub &#39;Main\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Fail_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Fail_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fail(String)</div>        \r\n          </div>\r\n    \r\n            <p>Emits the specified error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Fail (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to emit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default behavior is that the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> outputs the message to a message box when the application is running in user interface mode and to the <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> instances in the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The display of the message box is dependent on the presence of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. If the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> is not in the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, the message box is not displayed. The <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> can be removed by the <a href=\"../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;clear&amp;gt;</a>, the <a href=\"../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;remove&amp;gt;</a>, or by calling the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> property (<code>System.Diagnostics.Trace.Listeners.Clear()</code>).  </p>\n</div>\n<p> You can customize this behavior by adding a <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> to, or removing one from, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the Fail method to print a message during exception handling.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Fail Example#1\">catch (Exception) {\n    Debug.Fail(&quot;Unknown Option &quot; + option + &quot;, using the default.&quot;);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Fail Example#1\">        Catch e As Exception\n            Debug.Fail(&quot;Unknown Option &quot; + myOption1 + &quot;, using the default.&quot;)\n        End Try\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Fail Example#1\">   catch ( Exception^ e ) \n   {\n      #if defined(DEBUG)\n      Debug::Fail( &quot;Unknown Option &quot; + option + &quot;, using the default.&quot; );\n      #endif\n   }\n</code></pre><p> You can also use the Fail method in a switch statement.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Fail Example#2\">switch (option) {\n    case Option.First:\n       result = 1.0;\n       break;\n \n    // Insert additional cases.\n \n    default:\n       Debug.Fail(&quot;Unknown Option &quot; + option);\n       result = 1.0;\n       break;\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Fail Example#2\">        Select Case myOption1\n            Case MyOption.First\n                result = 1.0\n            \n            &#39; Insert additional cases.\n            Case Else\n                Debug.Fail((&quot;Unknown Option &quot; &amp; myOption1.ToString))\n                result = 1.0\n        End Select\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Fail Example#2\">       switch ( option )\n       {\n          case Option::First:\n             result = 1.0;\n             break;\n    \n          // Insert additional cases.\n          \n          default:\n             #if defined(DEBUG)\n             Debug::Fail( &quot;Unknown Option&quot; + option );\n             #endif\n             result = 1.0;\n             break;\n       }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Fail_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Fail_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Fail(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Emits an error message and a detailed error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Fail (string message, string detailMessage);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to emit.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>detailMessage</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A detailed message to emit.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default behavior is that the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> outputs the message to a message box when the application is running in user interface mode and to the <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> instances in the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The display of the message box is dependent on the presence of the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>. If the <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> is not in the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, the message box is not displayed. The <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a> can be removed by the <a href=\"../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;clear&amp;gt;</a>, the <a href=\"../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md\" data-linktype=\"relative-path\">&amp;lt;remove&amp;gt;</a>, or by calling the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection#System_Diagnostics_TraceListenerCollection_Clear_\" data-linktype=\"relative-path\">Clear</a> method on the <a class=\"xref\" href=\"system.diagnostics.trace#System_Diagnostics_Trace_Listeners_\" data-linktype=\"relative-path\">Listeners</a> property (<code>System.Diagnostics.Trace.Listeners.Clear()</code>).  </p>\n</div>\n<p> You can customize this behavior by adding a <a class=\"xref\" href=\"system.diagnostics.tracelistener\" data-linktype=\"relative-path\">TraceListener</a> to, or removing one from, the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Fail_\" data-linktype=\"relative-path\">Fail</a> method to print a message during exception handling.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.Fail1 Example#1\">   catch ( Exception^ e ) \n   {\n      #if defined(DEBUG)\n      Debug::Fail( &quot;Cannot find SpecialController, proceeding with StandardController&quot;, &quot;Setting Controller to default value&quot; );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Fail1 Example#1\">        Catch e As Exception\n            Debug.Fail(&quot;Invalid value: &quot; + value.ToString(), &quot;Resetting value to newValue.&quot;)\n            value = newValue\n        End Try\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.Fail1 Example#1\">    catch (Exception) {\n        Debug.Fail(&quot;Invalid value: &quot; + value.ToString(), \n           &quot;Resetting value to newValue.&quot;);\n        value = newValue;\n     }\n</code></pre><p> You can also use the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Fail_\" data-linktype=\"relative-path\">Fail</a> method in a switch statement.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.Fail1 Example#2\">       switch ( option )\n       {\n          case Option::First:\n             result = 1.0;\n             break;\n    \n          // Insert additional cases.\n          \n          default:\n             #if defined(DEBUG)\n             Debug::Fail( &quot;Unknown Option&quot; + option, &quot;Result set to 1.0&quot; );\n             #endif\n             result = 1.0;\n             break;\n       }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Fail1 Example#2\">        Select Case option1\n            Case MyOption.First\n                result = 1.0\n            \n            &#39; Insert additional cases.\n            Case Else\n                Debug.Fail(&quot;Unknown Option &quot; &amp; option1, &quot;Result set to 1.0&quot;)\n                result = 1.0\n        End Select\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.Fail1 Example#2\">    switch (option1) {\n        case MyOption.First:\n           result = 1.0;\n           break;\n     \n        // Insert additional cases.\n     \n        default:\n           Debug.Fail(&quot;Unknown Option &quot; + option1, &quot;Result set to 1.0&quot;);\n           result = 1.0;\n           break;\n     }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Flush\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Flushes the output buffer and causes buffered data to write to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Flushing the stream will not flush its underlying encoder unless you explicitly call Flush or <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Close_\" data-linktype=\"relative-path\">Close</a>. Setting <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.textwritertracelistener\" data-linktype=\"relative-path\">TextWriterTraceListener</a> named <code>myTextListener</code>. <code>myTextListener</code> uses a <a class=\"xref\" href=\"system.io.filestream\" data-linktype=\"relative-path\">FileStream</a> called <code>myFileStream</code> to write to a file named <code>TestFile.txt</code>. The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.Close Example#1\">// Specify /DDEBUG when compiling.\n\n#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\n\nvoid main()\n{\n     #if defined(DEBUG)\n    // Create a new stream object for an output file named TestFile.txt.\n    FileStream^ myFileStream = \n        gcnew FileStream( &quot;TestFile.txt&quot;, FileMode::Append );\n   \n    // Add the stream object to the trace listeners.\n    TextWriterTraceListener^ myTextListener = \n        gcnew TextWriterTraceListener( myFileStream );\n    Debug::Listeners-&gt;Add( myTextListener );\n   \n    // Write output to the file.\n    Debug::WriteLine( &quot;Test output&quot; );\n   \n    // Flush and close the output stream.\n    Debug::Flush();\n    Debug::Close();\n    #endif\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.Close Example#1\">// Specify /d:DEBUG when compiling.\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\nclass Test\n{\n    static void Main()\n    {\n        // Create a new stream object for an output file named TestFile.txt.\n        using (FileStream myFileStream = \n            new FileStream(&quot;TestFile.txt&quot;, FileMode.Append))\n        {\n            // Add the stream object to the trace listeners.\n            TextWriterTraceListener myTextListener = \n                new TextWriterTraceListener(myFileStream);\n            Debug.Listeners.Add(myTextListener);\n          \n            // Write output to the file.\n            Debug.WriteLine(&quot;Test output&quot;);\n         \n            // Flush and close the output stream.\n            Debug.Flush();\n            Debug.Close();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Close Example#1\">&#39; Specify /d:DEBUG=True when compiling.\n\nImports System\nImports System.IO\nImports System.Diagnostics\n\nClass Test\n    \n    Shared Sub Main()\n    \n        &#39; Create a new stream object for an output file named TestFile.txt.\n        Using myFileStream As New FileStream(&quot;TestFile.txt&quot;, FileMode.Append)\n        \n            &#39; Add the stream object to the trace listeners. \n            Dim myTextListener As New TextWriterTraceListener(myFileStream)\n            Debug.Listeners.Add(myTextListener)\n            \n            &#39; Write output to the file.\n            Debug.WriteLine(&quot;Test output&quot;)\n            \n            &#39; Flush and close the output stream.\n            Debug.Flush()\n            Debug.Close()\n        \n        End Using\n        \n    End Sub &#39;Main\n\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Indent\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Indent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Indent()</div>        \r\n          </div>\r\n    \r\n            <p>Increases the current <span class=\"xref\">stem.Diagnostics.Debug.IndentLevel*</span> by one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Indent ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the indent level and emits debugging messages.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.IndentLevel Example#1\">   #if defined(DEBUG)\n   Debug::WriteLine( &quot;List of errors:&quot; );\n   Debug::Indent();\n   Debug::WriteLine( &quot;Error 1: File not found&quot; );\n   Debug::WriteLine( &quot;Error 2: Directory not found&quot; );\n   Debug::Unindent();\n   Debug::WriteLine( &quot;End of list of errors&quot; );\n   #endif\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.IndentLevel Example#1\"> Debug.WriteLine(&quot;List of errors:&quot;);\n Debug.Indent();\n Debug.WriteLine(&quot;Error 1: File not found&quot;);\n Debug.WriteLine(&quot;Error 2: Directory not found&quot;);\n Debug.Unindent();\n Debug.WriteLine(&quot;End of list of errors&quot;);\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.IndentLevel Example#1\">        Debug.WriteLine(&quot;List of errors:&quot;)\n        Debug.Indent()\n        Debug.WriteLine(&quot;Error 1: File not found&quot;)\n        Debug.WriteLine(&quot;Error 2: Directory not found&quot;)\n        Debug.Unindent()\n        Debug.WriteLine(&quot;End of list of errors&quot;)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Print_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Print_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Print(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Print (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The default line terminator is a carriage return followed by a line feed. By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Print_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Print_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Print(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes a formatted string followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Print (string format, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <code>args</code> array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object array containing zero or more objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p><code>format</code> is invalid.  </p>\n<p> -or-  </p>\n<p> The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Unindent\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Unindent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Unindent()</div>        \r\n          </div>\r\n    \r\n            <p>Decreases the current <span class=\"xref\">stem.Diagnostics.Debug.IndentLevel*</span> by one.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Unindent ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example sets the indent level and emits debugging messages.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.IndentLevel Example#1\">   #if defined(DEBUG)\n   Debug::WriteLine( &quot;List of errors:&quot; );\n   Debug::Indent();\n   Debug::WriteLine( &quot;Error 1: File not found&quot; );\n   Debug::WriteLine( &quot;Error 2: Directory not found&quot; );\n   Debug::Unindent();\n   Debug::WriteLine( &quot;End of list of errors&quot; );\n   #endif\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.IndentLevel Example#1\"> Debug.WriteLine(&quot;List of errors:&quot;);\n Debug.Indent();\n Debug.WriteLine(&quot;Error 1: File not found&quot;);\n Debug.WriteLine(&quot;Error 2: Directory not found&quot;);\n Debug.Unindent();\n Debug.WriteLine(&quot;End of list of errors&quot;);\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.IndentLevel Example#1\">        Debug.WriteLine(&quot;List of errors:&quot;)\n        Debug.Indent()\n        Debug.WriteLine(&quot;Error 1: File not found&quot;)\n        Debug.WriteLine(&quot;Error 2: Directory not found&quot;)\n        Debug.Unindent()\n        Debug.WriteLine(&quot;End of list of errors&quot;)\n</code></pre><p> This example produces the following output:  </p>\n<pre><code>\nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Write_System_Object_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Write Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(myObject, category);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(&quot; Object is not valid for this category.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Write Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( myObject, category );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot; Object is not valid for this category.&quot; );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Write Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(myObject, category)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(&quot; Object is not valid for this category.&quot;)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Write_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Write Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(myObject, category);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(&quot; Object is not valid for this category.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Write Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( myObject, category );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot; Object is not valid for this category.&quot; );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Write Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(myObject, category)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(&quot; Object is not valid for this category.&quot;)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Write_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (object value, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> Use the <code>category</code> parameter to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Write Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(myObject, category);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(&quot; Object is not valid for this category.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Write Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( myObject, category );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot; Object is not valid for this category.&quot; );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Write Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(myObject, category)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(&quot; Object is not valid for this category.&quot;)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_Write_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void Write (string message, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> Use the <code>category</code> parameter to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.Write Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(myObject, category);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(&quot; Object is not valid for this category.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.Write Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( myObject, category );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot; Object is not valid for this category.&quot; );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.Write Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(myObject, category)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(&quot; Object is not valid for this category.&quot;)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteIf_System_Boolean_System_Object_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIf(Boolean,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIf (bool condition, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the value is written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first name of the value parameter to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs a message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteIf1 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteIf(generalSwitch.TraceError, myObject);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    Debug.WriteLineIf(generalSwitch.TraceVerbose, &quot; is not a valid value for this method.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteIf1 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceError, myObject );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceVerbose, \n         &quot; is not a valid value for this method.&quot; );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteIf1 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteIf(generalSwitch.TraceError, myObject)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        Debug.WriteLineIf(generalSwitch.TraceVerbose, &quot; is not a valid value for this method.&quot;)\n    End Sub &#39;MyErrorMethod\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteIf_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIf(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIf (bool condition, string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the message is written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information about adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteIf Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod()\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceError, &quot;My error message. &quot; );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteIf( generalSwitch-&gt;TraceVerbose, \n         &quot;My second error message.&quot; );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.WriteIf Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod() {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteIf(generalSwitch.TraceError, &quot;My error message. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    Debug.WriteIf(generalSwitch.TraceVerbose, &quot;My second error message.&quot;);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteIf Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod()\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteIf(generalSwitch.TraceError, &quot;My error message. &quot;)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        Debug.WriteIf(generalSwitch.TraceVerbose, &quot;My second error message.&quot;)\n    End Sub &#39;MyErrorMethod\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteIf_System_Boolean_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIf(Boolean,Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIf (bool condition, object value, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the category name and value are written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> The <code>category</code> parameter can be used to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Verbose</code>, the example outputs the name of the <code>myObject</code> and the <code>category</code> to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Error</code> or higher, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteIf3 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Verbose.\n    Debug.WriteIf(generalSwitch.TraceVerbose, myObject, category);\n \n    // Write a second message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteLineIf(generalSwitch.TraceError, &quot; Object is not valid for this category.&quot;);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteIf3 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Verbose.\n        Debug.WriteIf(generalSwitch.TraceVerbose, myObject, category)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteLineIf(generalSwitch.TraceError, &quot; Object is not valid for this category.&quot;)\n    End Sub &#39;MyErrorMethod\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteIf3 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceVerbose, myObject, category );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceError, \n         &quot; Object is not valid for this category.&quot; );\n      #endif\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteIf_System_Boolean_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteIf(Boolean,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteIf (bool condition, string message, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the category name and message are written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> The <code>category</code> parameter can be used to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_Write_\" data-linktype=\"relative-path\">Write</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Verbose</code>, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Error</code> or higher, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteIf2 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Verbose.\n    Debug.WriteIf(generalSwitch.TraceVerbose, myObject.ToString() + \n       &quot; is not a valid object for category: &quot;, category);\n \n    // Write a second message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteLineIf(generalSwitch.TraceError, &quot; Please use a different category.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteIf2 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceVerbose, String::Concat( myObject, \n         &quot; is not a valid object for category: &quot; ), category );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceError, \n         &quot; Please use a different category.&quot; );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteIf2 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Verbose.\n        Debug.WriteIf(generalSwitch.TraceVerbose, myObject.ToString() &amp; _\n            &quot; is not a valid object for category: &quot;, category)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteLineIf(generalSwitch.TraceError, &quot; Please use a different category.&quot;)\n    End Sub &#39;MyErrorMethod\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLine_System_Object_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the name of the object on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLine1 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot;Invalid object. &quot; );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::WriteLine( myObject );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLine1 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(&quot;Invalid object. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(myObject);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLine1 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(&quot;Invalid object. &quot;)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(myObject)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLine_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLine Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod()\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot;My error message. &quot; );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::WriteLine( &quot;My second error message.&quot; );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLine Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod()\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(&quot;My error message. &quot;)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(&quot;My second error message.&quot;)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLine Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod() {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(&quot;My error message. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(&quot;My second error message.&quot;);\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLine_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (object value, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> The <code>category</code> parameter can be used to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLine3 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(&quot;Invalid object for category. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(myObject, category);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLine3 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot;Invalid object for category. &quot; );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::WriteLine( myObject, category );\n         #endif\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLine3 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(&quot;Invalid object for category. &quot;)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(myObject, category)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLine_System_String_System_Object___\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,Object[])</div>        \r\n          </div>\r\n    \r\n            <p>Writes a formatted message followed by a line terminator to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string format, object[] args);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <code>args</code> array.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>args</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object array that contains zero or more objects to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.  </p>\n<p> The  keyword in the syntax for this method implies that the object array can be a single value. The exception to this is the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object. Explicit overloads take precedence, so an <code>arg</code> value of a single string will default to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_WriteLine_System_String_System_String_\" data-linktype=\"relative-path\">System.Diagnostics.Debug.WriteLine(String,String)</a> overload.  </p>\n<p> By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLine_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLine(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLine (string message, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> The <code>category</code> parameter can be used to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message and the <code>category</code> on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLine2 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    if(generalSwitch.TraceError)\n       Debug.Write(&quot;My error message. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    if(generalSwitch.TraceVerbose)\n       Debug.WriteLine(&quot;My second error message.&quot;, category);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLine2 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        If generalSwitch.TraceError Then\n            Debug.Write(&quot;My error message. &quot;)\n        End If \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        If generalSwitch.TraceVerbose Then\n            Debug.WriteLine(&quot;My second error message.&quot;, category)\n        End If\n    End Sub &#39;MyErrorMethod \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLine2 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      if ( generalSwitch-&gt;TraceError )\n      {\n         #if defined(DEBUG)\n         Debug::Write( &quot;My error message. &quot; );\n         #endif\n      }\n      // Write a second message if the TraceSwitch level is set to Verbose.\n      if ( generalSwitch-&gt;TraceVerbose )\n      {\n         #if defined(DEBUG)\n         Debug::WriteLine( &quot;My second error message.&quot;, category );\n         #endif\n      }\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_Object_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLineIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineIf(Boolean,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Writes the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLineIf (bool condition, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the value is written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the name of the object on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLineIf1 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteIf(generalSwitch.TraceError, &quot;Invalid object. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    Debug.WriteLineIf(generalSwitch.TraceVerbose, myObject);\n }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLineIf1 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteIf(generalSwitch.TraceError, &quot;Invalid object. &quot;)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        Debug.WriteLineIf(generalSwitch.TraceVerbose, myObject)\n    End Sub &#39;MyErrorMethod\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLineIf1 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceError, &quot;Invalid object. &quot; );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceVerbose, myObject );\n      #endif\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLineIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineIf(Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLineIf (bool condition, string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the message is written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information about adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLineIf Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod() {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteIf(generalSwitch.TraceError, &quot;My error message. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    Debug.WriteLineIf(generalSwitch.TraceVerbose, &quot;My second error message.&quot;);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLineIf Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod()\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceError, &quot;My error message. &quot; );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceVerbose, \n         &quot;My second error message.&quot; );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLineIf Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod()\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteIf(generalSwitch.TraceError, &quot;My error message. &quot;)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        Debug.WriteLineIf(generalSwitch.TraceVerbose, &quot;My second error message.&quot;)\n    End Sub &#39;MyErrorMethod\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_Object_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLineIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineIf(Boolean,Object,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and the value of the object&#39;s <span class=\"xref\">stem.Object.ToString*</span> method to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLineIf (bool condition, object value, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The conditional expression to evaluate. If the condition is <code>true</code>, the category name and value are written to the trace listeners in the collection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object whose name is sent to the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> The <code>category</code> parameter can be used to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLineIf3 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( Object^ myObject, String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf(generalSwitch-&gt;TraceError, &quot;Invalid object for category. &quot;);\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceVerbose, myObject, category );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLineIf3 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(myObject As Object, category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteIf(generalSwitch.TraceError, &quot;Invalid object for category. &quot;)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        Debug.WriteLineIf(generalSwitch.TraceVerbose, myObject, category)\n    End Sub &#39;MyErrorMethod\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLineIf3 Example#1\"> // Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(Object myObject, String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteIf(generalSwitch.TraceError, &quot;Invalid object for category. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    Debug.WriteLineIf(generalSwitch.TraceVerbose, myObject, category);\n }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Diagnostics_Debug_WriteLineIf_System_Boolean_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Diagnostics_Debug_WriteLineIf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteLineIf(Boolean,String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Writes a category name and message to the trace listeners in the <span class=\"xref\">stem.Diagnostics.Debug.Listeners*</span> collection if a condition is <code>true</code>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static void WriteLineIf (bool condition, string message, string category);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>condition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to cause a message to be written; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A message to write.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>category</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A category name used to organize the output.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>By default, the output is written to an instance of <a class=\"xref\" href=\"system.diagnostics.defaulttracelistener\" data-linktype=\"relative-path\">DefaultTraceListener</a>.  </p>\n<p> The <code>category</code> parameter can be used to group output messages.  </p>\n<p> This method calls the <a class=\"xref\" href=\"system.diagnostics.tracelistener#System_Diagnostics_TraceListener_WriteLine_\" data-linktype=\"relative-path\">WriteLine</a> method of the trace listener.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a <a class=\"xref\" href=\"system.diagnostics.traceswitch\" data-linktype=\"relative-path\">TraceSwitch</a> named <code>generalSwitch</code>. This switch is set outside of the code sample.  </p>\n<p> If the switch is set to the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a><code>Error</code> or higher, the example outputs the first error message to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a>. For information on adding a listener to the <a class=\"xref\" href=\"system.diagnostics.debug#System_Diagnostics_Debug_Listeners_\" data-linktype=\"relative-path\">Listeners</a> collection, see the <a class=\"xref\" href=\"system.diagnostics.tracelistenercollection\" data-linktype=\"relative-path\">TraceListenerCollection</a> class.  </p>\n<p> Then, if the <a class=\"xref\" href=\"system.diagnostics.tracelevel\" data-linktype=\"relative-path\">TraceLevel</a> is set to <code>Verbose</code>, the example outputs the second error message and the <code>category</code> on the same line as the first message. A line terminator follows the second message.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Debug.WriteLineIf2 Example#1\">// Class-level declaration.\n // Create a TraceSwitch.\n static TraceSwitch generalSwitch = new TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;);\n \n static public void MyErrorMethod(String category) {\n    // Write the message if the TraceSwitch level is set to Error or higher.\n    Debug.WriteIf(generalSwitch.TraceError, &quot;My error message. &quot;);\n \n    // Write a second message if the TraceSwitch level is set to Verbose.\n    Debug.WriteLineIf(generalSwitch.TraceVerbose, &quot;My second error message.&quot;, category);\n }\n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Debug.WriteLineIf2 Example#1\">   // Class-level declaration.\n   // Create a TraceSwitch.\n   static TraceSwitch^ generalSwitch = \n      gcnew TraceSwitch( &quot;General&quot;,&quot;Entire Application&quot; );\n\npublic:\n   static void MyErrorMethod( String^ category )\n   {\n      // Write the message if the TraceSwitch level is set to Error or higher.\n      #if defined(DEBUG)\n      Debug::WriteIf( generalSwitch-&gt;TraceError, &quot;My error message. &quot; );\n      \n      // Write a second message if the TraceSwitch level is set to Verbose.\n      Debug::WriteLineIf( generalSwitch-&gt;TraceVerbose, \n         &quot;My second error message.&quot;, category );\n      #endif\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Debug.WriteLineIf2 Example#1\">    &#39; Class-level declaration.\n    &#39; Create a TraceSwitch.\n    Private Shared generalSwitch As New TraceSwitch(&quot;General&quot;, &quot;Entire Application&quot;)\n    \n    \n    Public Shared Sub MyErrorMethod(category As String)\n        &#39; Write the message if the TraceSwitch level is set to Error or higher.\n        Debug.WriteIf(generalSwitch.TraceError, &quot;My error message. &quot;)\n        \n        &#39; Write a second message if the TraceSwitch level is set to Verbose.\n        Debug.WriteLineIf(generalSwitch.TraceVerbose, &quot;My second error message.&quot;, category)\n    End Sub &#39;MyErrorMethod\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.Debug.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.Debug.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Assert\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.AutoFlush\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Close\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Fail\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Flush\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Indent\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.IndentLevel\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.IndentSize\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Listeners\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Print\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Unindent\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.Write\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.WriteIf\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.WriteLine\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.Debug.WriteLineIf\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4ea17936-b2e5-d5f9-1fef-afab474b9a88\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\Debug.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a set of methods and properties that help debug your code.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.Debug\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Diagnostics.Debug.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Diagnostics.Debug.yml","open_to_public_contributors":true,"api_name":["System.Diagnostics.Debug","System.Diagnostics.Debug.Assert","System.Diagnostics.Debug.AutoFlush","System.Diagnostics.Debug.Close","System.Diagnostics.Debug.Fail","System.Diagnostics.Debug.Flush","System.Diagnostics.Debug.Indent","System.Diagnostics.Debug.IndentLevel","System.Diagnostics.Debug.IndentSize","System.Diagnostics.Debug.Listeners","System.Diagnostics.Debug.Print","System.Diagnostics.Debug.Unindent","System.Diagnostics.Debug.Write","System.Diagnostics.Debug.WriteIf","System.Diagnostics.Debug.WriteLine","System.Diagnostics.Debug.WriteLineIf"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.Debug","System::Diagnostics::Debug","System.Diagnostics.Debug.Assert","System::Diagnostics::Debug::Assert","System.Diagnostics.Debug.AutoFlush","System::Diagnostics::Debug::AutoFlush","System.Diagnostics.Debug.Close","System::Diagnostics::Debug::Close","System.Diagnostics.Debug.Fail","System::Diagnostics::Debug::Fail","System.Diagnostics.Debug.Flush","System::Diagnostics::Debug::Flush","System.Diagnostics.Debug.Indent","System::Diagnostics::Debug::Indent","System.Diagnostics.Debug.IndentLevel","System::Diagnostics::Debug::IndentLevel","System.Diagnostics.Debug.IndentSize","System::Diagnostics::Debug::IndentSize","System.Diagnostics.Debug.Listeners","System::Diagnostics::Debug::Listeners","System.Diagnostics.Debug.Print","System::Diagnostics::Debug::Print","System.Diagnostics.Debug.Unindent","System::Diagnostics::Debug::Unindent","System.Diagnostics.Debug.Write","System::Diagnostics::Debug::Write","System.Diagnostics.Debug.WriteIf","System::Diagnostics::Debug::WriteIf","System.Diagnostics.Debug.WriteLine","System::Diagnostics::Debug::WriteLine","System.Diagnostics.Debug.WriteLineIf","System::Diagnostics::Debug::WriteLineIf"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4ea17936-b2e5-d5f9-1fef-afab474b9a88","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Diagnostics\\Debug.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Diagnostics/Debug.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Debug class | Microsoft Docs","_op_ogTitle":"Debug class","description":"Provides a set of methods and properties that help debug your code.\n","toc_asset_id":"_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.Debug","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.debug","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.diagnostics.debug","fileRelativePath":"System.Diagnostics.Debug.html"},"themesRelativePathToOutputRoot":"_themes/"}