{"content":"    \r\n    <h1 id=\"System_Security_Cryptography_PasswordDeriveBytes\">\r\n      <span class=\"lang-csharp\">PasswordDeriveBytes</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Derives a key from a password using an extension of the PBKDF1 algorithm.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.derivebytes\" data-linktype=\"relative-path\">System.Security.Cryptography.DeriveBytes</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">PasswordDeriveBytes</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.security.cryptography.derivebytes#System_Security_Cryptography_DeriveBytes_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password. The standard is documented in IETF RRC 2898.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(Byte[],Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password and key salt to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(String,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password and key salt to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(Byte[],Byte[],CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(String,Byte[],CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___System_String_System_Int32_\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(Byte[],Byte[],String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password, key salt, hash name, and iterations to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___System_String_System_Int32_\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(String,Byte[],String,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password, key salt, hash name, and number of iterations to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___System_String_System_Int32_System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___System_String_System_Int32_System_Security_Cryptography_CspParameters_\" data-linktype=\"self-bookmark\">PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_HashName\" data-linktype=\"self-bookmark\">HashName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the hash algorithm for the operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_IterationCount\" data-linktype=\"self-bookmark\">IterationCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the number of iterations for the operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_Salt\" data-linktype=\"self-bookmark\">Salt</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the key salt value for the operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_CryptDeriveKey_System_String_System_String_System_Int32_System_Byte___\" data-linktype=\"self-bookmark\">CryptDeriveKey(String,String,Int32,Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Derives a cryptographic key from the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_GetBytes_System_Int32_\" data-linktype=\"self-bookmark\">GetBytes(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns pseudo-random key bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Security_Cryptography_PasswordDeriveBytes_Reset\" data-linktype=\"self-bookmark\">Reset()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the state of the operation.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(Byte[],Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password and key salt to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (byte[] password, byte[] salt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password to derive the key for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>salt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key from a password using the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.PasswordDerivedbytes#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordDerivedBytesExample\n{\n\n    public static void Main(String[] args)\n    {\n\n        // Get a password from the user.\n        Console.WriteLine(&quot;Enter a password to produce a key:&quot;);\n\n        byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());\n\n        byte[] salt = CreateRandomSalt(7);\n\n        // Create a TripleDESCryptoServiceProvider object.\n        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n\n        try\n        {\n            Console.WriteLine(&quot;Creating a key with PasswordDeriveBytes...&quot;);\n\n            // Create a PasswordDeriveBytes object and then create\n            // a TripleDES key from the password and salt.\n            PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);\n\n\n            // Create the key and set it to the Key property\n            // of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, tdes.IV);\n\n\n            Console.WriteLine(&quot;Operation complete.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the buffers\n            ClearBytes(pwd);\n            ClearBytes(salt);\n\n            // Clear the key.\n            tdes.Clear();\n        }\n\n        Console.ReadLine();\n    }\n\n    //////////////////////////////////////////////////////////\n    // Helper methods:\n    // CreateRandomSalt: Generates a random salt value of the\n    //                   specified length.\n    //\n    // ClearBytes: Clear the bytes in a buffer so they can&#39;t\n    //             later be read from memory.\n    //////////////////////////////////////////////////////////\n\n    public static byte[] CreateRandomSalt(int length)\n    {\n        // Create a buffer\n        byte[] randBytes;\n\n        if (length &gt;= 1)\n        {\n            randBytes = new byte[length];\n        }\n        else\n        {\n            randBytes = new byte[1];\n        }\n\n        // Create a new RNGCryptoServiceProvider.\n        RNGCryptoServiceProvider rand = new RNGCryptoServiceProvider();\n\n        // Fill the buffer with random bytes.\n        rand.GetBytes(randBytes);\n\n        // return the bytes.\n        return randBytes;\n    }\n\n    public static void ClearBytes(byte[] buffer)\n    {\n        // Check arguments.\n        if (buffer == null)\n        {\n            throw new ArgumentException(&quot;buffer&quot;);\n        }\n\n        // Set each byte in the buffer to 0.\n        for (int x = 0; x &lt; buffer.Length; x++)\n        {\n            buffer[x] = 0;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.PasswordDerivedbytes#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\n\n// Generates a random salt value of the specified length.\narray&lt;Byte&gt;^ CreateRandomSalt(int length)\n{\n    // Create a buffer\n    array&lt;Byte&gt;^ randomBytes;\n\n    if (length &gt;= 1)\n    {\n        randomBytes = gcnew array &lt;Byte&gt;(length);\n    }\n    else\n    {\n        randomBytes = gcnew array &lt;Byte&gt;(1);\n    }\n\n    // Create a new RNGCryptoServiceProvider.\n    RNGCryptoServiceProvider^ cryptoRNGProvider =\n        gcnew RNGCryptoServiceProvider();\n\n    // Fill the buffer with random bytes.\n    cryptoRNGProvider-&gt;GetBytes(randomBytes);\n\n    // return the bytes.\n    return randomBytes;\n}\n\n// Clears the bytes in a buffer so they can&#39;t later be read from memory.\nvoid ClearBytes(array&lt;Byte&gt;^ buffer)\n{\n    // Check arguments.\n    if (buffer == nullptr)\n    {\n        throw gcnew ArgumentNullException(&quot;buffer&quot;);\n    }\n\n    // Set each byte in the buffer to 0.\n    for (int x = 0; x &lt;= buffer-&gt;Length - 1; x++)\n    {\n        buffer[x] = 0;\n    }\n}\n\nint main(array&lt;String^&gt;^ args)\n{\n\n    // Get a password from the user.\n    Console::WriteLine(&quot;Enter a password to produce a key:&quot;);\n\n    // Security Note: Never hard-code a password within your\n    // source code.  Hard-coded passwords can be retrieved\n    // from a compiled assembly.\n    array&lt;Byte&gt;^ password = Encoding::Unicode-&gt;GetBytes(Console::ReadLine());\n\n    array&lt;Byte&gt;^ randomSalt = CreateRandomSalt(7);\n\n    // Create a TripleDESCryptoServiceProvider object.\n    TripleDESCryptoServiceProvider^ cryptoDESProvider =\n        gcnew TripleDESCryptoServiceProvider();\n\n    try\n    {\n        Console::WriteLine(&quot;Creating a key with PasswordDeriveBytes...&quot;);\n\n        // Create a PasswordDeriveBytes object and then create\n        // a TripleDES key from the password and salt.\n        PasswordDeriveBytes^ passwordDeriveBytes = gcnew PasswordDeriveBytes\n            (password-&gt;ToString(), randomSalt);\n\n\t   // Create the key and set it to the Key property\n\t   // of the TripleDESCryptoServiceProvider object.\n        cryptoDESProvider-&gt;Key = passwordDeriveBytes-&gt;CryptDeriveKey\n            (&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, cryptoDESProvider-&gt;IV);\n        Console::WriteLine(&quot;Operation complete.&quot;);\n    }\n    catch (Exception^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n    finally\n    {\n        // Clear the buffers\n        ClearBytes(password);\n        ClearBytes(randomSalt);\n\n        // Clear the key.\n        cryptoDESProvider-&gt;Clear();\n    }\n\n    Console::ReadLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.PasswordDerivedbytes#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\n\n\nModule PasswordDerivedBytesExample\n\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Get a password from the user.\n        Console.WriteLine(&quot;Enter a password to produce a key:&quot;)\n\n        Dim pwd As Byte() = Encoding.Unicode.GetBytes(Console.ReadLine())\n\n        Dim salt As Byte() = CreateRandomSalt(7)\n\n        &#39; Create a TripleDESCryptoServiceProvider object.\n        Dim tdes As New TripleDESCryptoServiceProvider()\n\n        Try\n            Console.WriteLine(&quot;Creating a key with PasswordDeriveBytes...&quot;)\n\n            &#39; Create a PasswordDeriveBytes object and then create \n            &#39; a TripleDES key from the password and salt.\n            Dim pdb As New PasswordDeriveBytes(pwd, salt)\n\n\n            &#39; Create the key and set it to the Key property\n            &#39; of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, tdes.IV)\n\n\n            Console.WriteLine(&quot;Operation complete.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the buffers\n            ClearBytes(pwd)\n            ClearBytes(salt)\n\n            &#39; Clear the key.\n            tdes.Clear()\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39;********************************************************\n    &#39;* Helper methods:\n    &#39;* createRandomSalt: Generates a random salt value of the \n    &#39;*                   specified length.  \n    &#39;*\n    &#39;* clearBytes: Clear the bytes in a buffer so they can&#39;t \n    &#39;*             later be read from memory.\n    &#39;********************************************************\n    Function CreateRandomSalt(ByVal length As Integer) As Byte()\n        &#39; Create a buffer\n        Dim randBytes() As Byte\n\n        If length &gt;= 1 Then\n            randBytes = New Byte(length) {}\n        Else\n            randBytes = New Byte(0) {}\n        End If\n\n        &#39; Create a new RNGCryptoServiceProvider.\n        Dim rand As New RNGCryptoServiceProvider()\n\n        &#39; Fill the buffer with random bytes.\n        rand.GetBytes(randBytes)\n\n        &#39; return the bytes.\n        Return randBytes\n\n    End Function\n\n\n    Sub ClearBytes(ByVal buffer() As Byte)\n        &#39; Check arguments.\n        If buffer Is Nothing Then\n            Throw New ArgumentException(&quot;buffer&quot;)\n        End If\n\n        &#39; Set each byte in the buffer to 0.\n        Dim x As Integer\n        For x = 0 To buffer.Length - 1\n            buffer(x) = 0\n        Next x\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(String,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password and key salt to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strPassword</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password for which to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbSalt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(Byte[],Byte[],CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password to derive the key for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>salt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cspParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cryptographic service provider (CSP) parameters for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a key from a password using the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.PasswordDerivedbytes#1\">using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class PasswordDerivedBytesExample\n{\n\n    public static void Main(String[] args)\n    {\n\n        // Get a password from the user.\n        Console.WriteLine(&quot;Enter a password to produce a key:&quot;);\n\n        byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());\n\n        byte[] salt = CreateRandomSalt(7);\n\n        // Create a TripleDESCryptoServiceProvider object.\n        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();\n\n        try\n        {\n            Console.WriteLine(&quot;Creating a key with PasswordDeriveBytes...&quot;);\n\n            // Create a PasswordDeriveBytes object and then create\n            // a TripleDES key from the password and salt.\n            PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);\n\n\n            // Create the key and set it to the Key property\n            // of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, tdes.IV);\n\n\n            Console.WriteLine(&quot;Operation complete.&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the buffers\n            ClearBytes(pwd);\n            ClearBytes(salt);\n\n            // Clear the key.\n            tdes.Clear();\n        }\n\n        Console.ReadLine();\n    }\n\n    //////////////////////////////////////////////////////////\n    // Helper methods:\n    // CreateRandomSalt: Generates a random salt value of the\n    //                   specified length.\n    //\n    // ClearBytes: Clear the bytes in a buffer so they can&#39;t\n    //             later be read from memory.\n    //////////////////////////////////////////////////////////\n\n    public static byte[] CreateRandomSalt(int length)\n    {\n        // Create a buffer\n        byte[] randBytes;\n\n        if (length &gt;= 1)\n        {\n            randBytes = new byte[length];\n        }\n        else\n        {\n            randBytes = new byte[1];\n        }\n\n        // Create a new RNGCryptoServiceProvider.\n        RNGCryptoServiceProvider rand = new RNGCryptoServiceProvider();\n\n        // Fill the buffer with random bytes.\n        rand.GetBytes(randBytes);\n\n        // return the bytes.\n        return randBytes;\n    }\n\n    public static void ClearBytes(byte[] buffer)\n    {\n        // Check arguments.\n        if (buffer == null)\n        {\n            throw new ArgumentException(&quot;buffer&quot;);\n        }\n\n        // Set each byte in the buffer to 0.\n        for (int x = 0; x &lt; buffer.Length; x++)\n        {\n            buffer[x] = 0;\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.PasswordDerivedbytes#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Text;\n\n// Generates a random salt value of the specified length.\narray&lt;Byte&gt;^ CreateRandomSalt(int length)\n{\n    // Create a buffer\n    array&lt;Byte&gt;^ randomBytes;\n\n    if (length &gt;= 1)\n    {\n        randomBytes = gcnew array &lt;Byte&gt;(length);\n    }\n    else\n    {\n        randomBytes = gcnew array &lt;Byte&gt;(1);\n    }\n\n    // Create a new RNGCryptoServiceProvider.\n    RNGCryptoServiceProvider^ cryptoRNGProvider =\n        gcnew RNGCryptoServiceProvider();\n\n    // Fill the buffer with random bytes.\n    cryptoRNGProvider-&gt;GetBytes(randomBytes);\n\n    // return the bytes.\n    return randomBytes;\n}\n\n// Clears the bytes in a buffer so they can&#39;t later be read from memory.\nvoid ClearBytes(array&lt;Byte&gt;^ buffer)\n{\n    // Check arguments.\n    if (buffer == nullptr)\n    {\n        throw gcnew ArgumentNullException(&quot;buffer&quot;);\n    }\n\n    // Set each byte in the buffer to 0.\n    for (int x = 0; x &lt;= buffer-&gt;Length - 1; x++)\n    {\n        buffer[x] = 0;\n    }\n}\n\nint main(array&lt;String^&gt;^ args)\n{\n\n    // Get a password from the user.\n    Console::WriteLine(&quot;Enter a password to produce a key:&quot;);\n\n    // Security Note: Never hard-code a password within your\n    // source code.  Hard-coded passwords can be retrieved\n    // from a compiled assembly.\n    array&lt;Byte&gt;^ password = Encoding::Unicode-&gt;GetBytes(Console::ReadLine());\n\n    array&lt;Byte&gt;^ randomSalt = CreateRandomSalt(7);\n\n    // Create a TripleDESCryptoServiceProvider object.\n    TripleDESCryptoServiceProvider^ cryptoDESProvider =\n        gcnew TripleDESCryptoServiceProvider();\n\n    try\n    {\n        Console::WriteLine(&quot;Creating a key with PasswordDeriveBytes...&quot;);\n\n        // Create a PasswordDeriveBytes object and then create\n        // a TripleDES key from the password and salt.\n        PasswordDeriveBytes^ passwordDeriveBytes = gcnew PasswordDeriveBytes\n            (password-&gt;ToString(), randomSalt);\n\n\t   // Create the key and set it to the Key property\n\t   // of the TripleDESCryptoServiceProvider object.\n        cryptoDESProvider-&gt;Key = passwordDeriveBytes-&gt;CryptDeriveKey\n            (&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, cryptoDESProvider-&gt;IV);\n        Console::WriteLine(&quot;Operation complete.&quot;);\n    }\n    catch (Exception^ ex)\n    {\n        Console::WriteLine(ex-&gt;Message);\n    }\n    finally\n    {\n        // Clear the buffers\n        ClearBytes(password);\n        ClearBytes(randomSalt);\n\n        // Clear the key.\n        cryptoDESProvider-&gt;Clear();\n    }\n\n    Console::ReadLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.PasswordDerivedbytes#1\">Imports System\nImports System.Security.Cryptography\nImports System.Text\n\n\n\nModule PasswordDerivedBytesExample\n\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Get a password from the user.\n        Console.WriteLine(&quot;Enter a password to produce a key:&quot;)\n\n        Dim pwd As Byte() = Encoding.Unicode.GetBytes(Console.ReadLine())\n\n        Dim salt As Byte() = CreateRandomSalt(7)\n\n        &#39; Create a TripleDESCryptoServiceProvider object.\n        Dim tdes As New TripleDESCryptoServiceProvider()\n\n        Try\n            Console.WriteLine(&quot;Creating a key with PasswordDeriveBytes...&quot;)\n\n            &#39; Create a PasswordDeriveBytes object and then create \n            &#39; a TripleDES key from the password and salt.\n            Dim pdb As New PasswordDeriveBytes(pwd, salt)\n\n\n            &#39; Create the key and set it to the Key property\n            &#39; of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, tdes.IV)\n\n\n            Console.WriteLine(&quot;Operation complete.&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the buffers\n            ClearBytes(pwd)\n            ClearBytes(salt)\n\n            &#39; Clear the key.\n            tdes.Clear()\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\n\n\n    &#39;********************************************************\n    &#39;* Helper methods:\n    &#39;* createRandomSalt: Generates a random salt value of the \n    &#39;*                   specified length.  \n    &#39;*\n    &#39;* clearBytes: Clear the bytes in a buffer so they can&#39;t \n    &#39;*             later be read from memory.\n    &#39;********************************************************\n    Function CreateRandomSalt(ByVal length As Integer) As Byte()\n        &#39; Create a buffer\n        Dim randBytes() As Byte\n\n        If length &gt;= 1 Then\n            randBytes = New Byte(length) {}\n        Else\n            randBytes = New Byte(0) {}\n        End If\n\n        &#39; Create a new RNGCryptoServiceProvider.\n        Dim rand As New RNGCryptoServiceProvider()\n\n        &#39; Fill the buffer with random bytes.\n        rand.GetBytes(randBytes)\n\n        &#39; return the bytes.\n        Return randBytes\n\n    End Function\n\n\n    Sub ClearBytes(ByVal buffer() As Byte)\n        &#39; Check arguments.\n        If buffer Is Nothing Then\n            Throw New ArgumentException(&quot;buffer&quot;)\n        End If\n\n        &#39; Set each byte in the buffer to 0.\n        Dim x As Integer\n        For x = 0 To buffer.Length - 1\n            buffer(x) = 0\n        Next x\n\n    End Sub\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(String,Byte[],CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strPassword</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password for which to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbSalt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cspParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The CSP parameters for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(Byte[],Byte[],String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password, key salt, hash name, and iterations to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password to derive the key for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>salt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>iterations</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The iteration count to use to derive the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> For a list of hash algorithm names, see the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___System_String_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(String,Byte[],String,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password, key salt, hash name, and number of iterations to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strPassword</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password for which to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbSalt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strHashName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the hash algorithm for the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>iterations</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of iterations for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  </p>\n</div>\n<p> For a list of hash algorithm names, see the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_Byte___System_Byte___System_String_System_Int32_System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>password</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password to derive the key for.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>salt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>hashName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>iterations</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The iteration count to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cspParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The cryptographic service provider (CSP) parameters for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> For a list of hash algorithm names, see the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_System_String_System_Byte___System_String_System_Int32_System_Security_Cryptography_CspParameters_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>strPassword</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The password for which to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbSalt</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key salt to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>strHashName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the hash algorithm for the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>iterations</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of iterations for the operation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cspParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cspparameters\" data-linktype=\"relative-path\">CspParameters</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The CSP parameters for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the <a href=\"../Topic/Ildasm.exe%20(IL%20Disassembler).md\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a> tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  </p>\n</div>\n<p> For a list of hash algorithm names, see the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_HashName\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_HashName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the hash algorithm for the operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string HashName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the hash algorithm for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The name of the hash value is fixed and an attempt is made to change this value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_IterationCount\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_IterationCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IterationCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the number of iterations for the operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IterationCount { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of iterations for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The number of iterations is fixed and an attempt is made to change this value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property cannot be set because its value is out of range. This property requires a non-negative number.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_Salt\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_Salt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Salt</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the key salt value for the operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] Salt { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The key salt value for the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The key salt value is fixed and an attempt is made to change this value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys. This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation. These random bytes are known as salt.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_CryptDeriveKey_System_String_System_String_System_Int32_System_Byte___\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_CryptDeriveKey_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CryptDeriveKey(String,String,Int32,Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Derives a cryptographic key from the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>algname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The algorithm name for which to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>alghashname</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The hash algorithm name to use to derive the key.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>keySize</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The size of the key, in bits, to derive.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgbIV</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initialization vector (IV) to use to derive the key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>The derived key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></div>\r\n                  </div>\r\n                  <p>The <code>keySize</code> parameter is incorrect.  </p>\n<p> -or-  </p>\n<p> The cryptographic service provider (CSP) cannot be acquired.  </p>\n<p> -or-  </p>\n<p> The <code>algname</code> parameter is not a valid algorithm name.  </p>\n<p> -or-  </p>\n<p> The <code>alghashname</code> parameter is not a valid hash algorithm name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.  </p>\n<p> If the <code>keySize</code> parameter is set to 0 bits, the default key size for the specified algorithm is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.PasswordDerivedbytes#2\">\n            // Create the key and set it to the Key property\n            // of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, tdes.IV);\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.PasswordDerivedbytes#2\">\t   // Create the key and set it to the Key property\n\t   // of the TripleDESCryptoServiceProvider object.\n        cryptoDESProvider-&gt;Key = passwordDeriveBytes-&gt;CryptDeriveKey\n            (&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, cryptoDESProvider-&gt;IV);\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.PasswordDerivedbytes#2\">\n            &#39; Create the key and set it to the Key property\n            &#39; of the TripleDESCryptoServiceProvider object.\n            tdes.Key = pdb.CryptDeriveKey(&quot;TripleDES&quot;, &quot;SHA1&quot;, 192, tdes.IV)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> class and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code> method and the <code>Finalize</code> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <code>Finalize</code> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.security.cryptography.passwordderivebytes\" data-linktype=\"relative-path\">PasswordDeriveBytes</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_GetBytes_System_Int32_\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_GetBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetBytes(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Returns pseudo-random key bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override byte[] GetBytes (int cb);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cb</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of pseudo-random key bytes to generate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array filled with pseudo-random key bytes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can create any number of pseudo-random bytes. However, the strength of the byte sequence is limited by the number of bytes in the hash output.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Security_Cryptography_PasswordDeriveBytes_Reset\">\r\n    \r\n            <a id=\"System_Security_Cryptography_PasswordDeriveBytes_Reset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Reset()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the state of the operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Reset ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.PasswordDeriveBytes.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.PasswordDeriveBytes.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.HashName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.IterationCount\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.Reset\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.PasswordDeriveBytes.Salt\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"6527bcac-9786-0897-4ee4-462c42db0cfe\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Derives a key from a password using an extension of the PBKDF1 algorithm.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Security.Cryptography/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.PasswordDeriveBytes\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Security.Cryptography.PasswordDeriveBytes.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Security.Cryptography.PasswordDeriveBytes.yml","open_to_public_contributors":true,"api_name":["System.Security.Cryptography.PasswordDeriveBytes","System.Security.Cryptography.PasswordDeriveBytes..ctor","System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey","System.Security.Cryptography.PasswordDeriveBytes.Dispose","System.Security.Cryptography.PasswordDeriveBytes.GetBytes","System.Security.Cryptography.PasswordDeriveBytes.HashName","System.Security.Cryptography.PasswordDeriveBytes.IterationCount","System.Security.Cryptography.PasswordDeriveBytes.Reset","System.Security.Cryptography.PasswordDeriveBytes.Salt"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.PasswordDeriveBytes","System::Security::Cryptography::PasswordDeriveBytes","System.Security.Cryptography.PasswordDeriveBytes.#ctor","System::Security::Cryptography::PasswordDeriveBytes::#ctor","System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey","System::Security::Cryptography::PasswordDeriveBytes::CryptDeriveKey","System.Security.Cryptography.PasswordDeriveBytes.Dispose","System::Security::Cryptography::PasswordDeriveBytes::Dispose","System.Security.Cryptography.PasswordDeriveBytes.GetBytes","System::Security::Cryptography::PasswordDeriveBytes::GetBytes","System.Security.Cryptography.PasswordDeriveBytes.HashName","System::Security::Cryptography::PasswordDeriveBytes::HashName","System.Security.Cryptography.PasswordDeriveBytes.IterationCount","System::Security::Cryptography::PasswordDeriveBytes::IterationCount","System.Security.Cryptography.PasswordDeriveBytes.Reset","System::Security::Cryptography::PasswordDeriveBytes::Reset","System.Security.Cryptography.PasswordDeriveBytes.Salt","System::Security::Cryptography::PasswordDeriveBytes::Salt"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"6527bcac-9786-0897-4ee4-462c42db0cfe","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Security.Cryptography/PasswordDeriveBytes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PasswordDeriveBytes class | Microsoft Docs","_op_ogTitle":"PasswordDeriveBytes class","description":"Derives a key from a password using an extension of the PBKDF1 algorithm.\n","toc_asset_id":"_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.PasswordDeriveBytes","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.passwordderivebytes","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.security.cryptography.passwordderivebytes","fileRelativePath":"System.Security.Cryptography.PasswordDeriveBytes.html"},"themesRelativePathToOutputRoot":"_themes/"}