{"content":"    \r\n    <h1 id=\"System_TypeLoadException\">\r\n      <span class=\"lang-csharp\">TypeLoadException</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The exception that is thrown when type-loading failures occur.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class TypeLoadException : SystemException</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">System.SystemException</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TypeLoadException</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>TypeLoadException is thrown when the common language runtime cannot find the assembly, the type within the assembly, or cannot load the type. The <a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_Message_\" data-linktype=\"relative-path\">Message</a> property contains more detailed information that can help you identify the cause of the exception.  </p>\n<p> TypeLoadException uses the HRESULT COR_E_TYPELOAD, that has the value 0x80131522.  </p>\n<p> For a list of initial property values for an instance of TypeLoadException, see the <a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException__ctor_\" data-linktype=\"relative-path\">TypeLoadException</a> constructors.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException__ctor\" data-linktype=\"self-bookmark\">TypeLoadException()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException__ctor_System_String_\" data-linktype=\"self-bookmark\">TypeLoadException(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class with a specified error message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">TypeLoadException(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class with serialized data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException__ctor_System_String_System_Exception_\" data-linktype=\"self-bookmark\">TypeLoadException(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException_Message\" data-linktype=\"self-bookmark\">Message</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the error message for this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException_TypeName\" data-linktype=\"self-bookmark\">TypeName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the fully qualified name of the type that causes the exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_TypeLoadException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the class name, method name, resource ID, and additional exception information.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException__ctor\">\r\n    \r\n            <a id=\"System_TypeLoadException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeLoadException()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeLoadException ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor initializes the <a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_Message_\" data-linktype=\"relative-path\">Message</a> property of the new instance to a system-supplied message that describes the error, such as &quot;A failure has occurred while loading a type.&quot; This message takes into account the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The localized error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException__ctor_System_String_\">\r\n    \r\n            <a id=\"System_TypeLoadException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeLoadException(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class with a specified error message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeLoadException (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The message that describes the error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The content of the <code>message</code> parameter should be understandable to the user. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>A null reference (<code>Nothing</code> in Visual Basic).</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the TypeLoadException constructor. It contains a method that generates a <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> with a custom message, and displays the error message to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"TypeLoadException_Constructor2#1\">Public Class Example\n   Public Shared Sub Main()\n      Try\n         &#39; Call a method that throws an exception.\n         TypeLoadExceptionDemoClass.GenerateException()\n      Catch e As TypeLoadException\n         Console.WriteLine(&quot;TypeLoadException:{0}   {1}&quot;, vbCrLf, e.Message)\n      End Try\n   End Sub \nEnd Class \n\nClass TypeLoadExceptionDemoClass\n   Public Shared Function GenerateException() As Boolean\n      &#39; Throw a TypeLoadException with a custom message.\n      Throw New TypeLoadException(&quot;This is a custom TypeLoadException error message.&quot;)\n   End Function \nEnd Class \n&#39; The example displays the following output:\n&#39;       TypeLoadException:\n&#39;          This is a custom TypeLoadException error message.\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeLoadException_Constructor2#1\">using namespace System;\n\nclass TypeLoadExceptionDemoClass\n{\n   public:\n      static bool GenerateException()\n      {\n         // Throw a TypeLoadException with a custom message.\n         throw gcnew TypeLoadException(&quot;This is a custom TypeLoadException error message.&quot;);\n      }\n};\n\nint main()\n{\n   try {\n      // Call a method that throws an exception.  \n      TypeLoadExceptionDemoClass::GenerateException();\n   }\n   catch ( TypeLoadException^ e ) {\n      Console::WriteLine(&quot;TypeLoadException:<br>   {0}&quot;, e-&gt;Message);\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error Message = {0}&quot;, e-&gt;Message );\n   }\n\n}\n// The example displays the following output:\n//       TypeLoadException:\n//          This is a custom TypeLoadException error message.\n</code></pre><pre><code class=\"lang-cs\" name=\"TypeLoadException_Constructor2#1\">using System;\n\npublic class Example\n{\n   public static void Main() \n   {\n      try {\n         // Call a method that throws an exception.\n         TypeLoadExceptionDemoClass.GenerateException();\n      }  \n      catch (TypeLoadException e) {\n         Console.WriteLine(&quot;TypeLoadException:<br>   {0}&quot;, e.Message);\n      }\n   }\n}\n\nclass TypeLoadExceptionDemoClass\n{ \n   public static bool GenerateException() \n   {\n      // Throw a TypeLoadException with a custom defined message.\n      throw new TypeLoadException(&quot;This is a custom TypeLoadException error message.&quot;);\n   }\n}\n// The example displays the following output:\n//       TypeLoadException:\n//          This is a custom TypeLoadException error message.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_TypeLoadException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeLoadException(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class with serialized data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected TypeLoadException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that holds the serialized object data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> object is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example generates an exception, and serializes the exception data to a file, and then reconstitutes the exception. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeLoadException_GetObjectData#1\">\nusing System;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Soap; \nusing System.Security.Permissions;\nusing System.IO;\n\nclass GetObjectDataDemo\n{\n   public static void Main()\n   {\n      // Get a reference to the assembly mscorlib.dll, which is always\n      // loaded. (System.String is defined in mscorlib.)\n      Assembly mscorlib = typeof(string).Assembly;\n\n      try\n      {\n         Console.WriteLine (&quot;Attempting to load a type not present in the assembly &#39;mscorlib&#39;&quot;);\n         // This loading of invalid type raises a TypeLoadException\n         Type myType = mscorlib.GetType(&quot;System.NonExistentType&quot;, true);\n      }         \n      catch (TypeLoadException)\n      {\n         // Serialize the exception to disk and reconstitute it.\n         System.DateTime ErrorDatetime = DateTime.Now;\n         Console.WriteLine(&quot;A TypeLoadException has been raised.&quot;);\n\n         // Create MyTypeLoadException instance with current time.\n         MyTypeLoadException myException = new MyTypeLoadException(ErrorDatetime);\n         IFormatter myFormatter = new SoapFormatter();\n         Stream myFileStream = new FileStream(&quot;typeload.xml&quot;, FileMode.Create, FileAccess.Write, FileShare.None);\n         Console.WriteLine(&quot;Serializing the TypeLoadException with DateTime as &quot; + ErrorDatetime);\n\n         // Serialize the MyTypeLoadException instance to a file.\n         myFormatter.Serialize(myFileStream, myException);\n         myFileStream.Close();\n\n         Console.WriteLine(&quot;Deserializing the Exception.&quot;);\n         myFileStream = new FileStream(&quot;typeload.xml&quot;, FileMode.Open, FileAccess.Read, FileShare.None);\n\n         // Deserialize and reconstitute the instance from file.\n         myException = (MyTypeLoadException) myFormatter.Deserialize(myFileStream);\n         myFileStream.Close();\n         Console.WriteLine(&quot;Deserialized exception has ErrorDateTime = &quot; + myException.ErrorDateTime);\n      }\n   }\n}\n\n// This class overrides the GetObjectData method and initializes\n// its data with current time. \n\n[Serializable]\npublic class MyTypeLoadException : TypeLoadException \n{\n   private System.DateTime _errorDateTime = DateTime.Now;\n   public DateTime ErrorDateTime { get { return _errorDateTime; }}\n\n   public MyTypeLoadException(DateTime myDateTime) \n   {\n      _errorDateTime = myDateTime;\n   }\n\n   protected MyTypeLoadException(SerializationInfo sInfo, StreamingContext sContext) \n       : base(sInfo, sContext)\n   {\n      // Reconstitute the deserialized information into the instance.\n      _errorDateTime = sInfo.GetDateTime(&quot;ErrorDate&quot;);\n   }\n\n   // GetObjectData overrides must always have a demand for SerializationFormatter.\n   [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter=true)]\n   public override void GetObjectData(SerializationInfo sInfo, StreamingContext sContext) \n   {\n      base.GetObjectData(sInfo, sContext);\n      // Add a value to the Serialization information.\n      sInfo.AddValue(&quot;ErrorDate&quot;, ErrorDateTime);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeLoadException_GetObjectData#1\">#using &lt;System.Runtime.Serialization.Formatters.Soap.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::Serialization;\nusing namespace System::Runtime::Serialization::Formatters::Soap;\nusing namespace System::IO;\n\n// This class overrides the GetObjectData method and initializes\n// its data with current time. \n\n[Serializable]\npublic ref class MyTypeLoadExceptionChild: public TypeLoadException\n{\npublic:\n   System::DateTime ErrorDateTime;\n   MyTypeLoadExceptionChild()\n   {\n      ErrorDateTime = DateTime::Now;\n   }\n\n   MyTypeLoadExceptionChild( DateTime myDateTime )\n   {\n      ErrorDateTime = myDateTime;\n   }\n\n\nprotected:\n   MyTypeLoadExceptionChild( SerializationInfo^ sInfo, StreamingContext * sContext )\n   {\n      \n      // Reconstitute the deserialized information into the instance.\n      ErrorDateTime = sInfo-&gt;GetDateTime( &quot;ErrorDate&quot; );\n   }\n\n\npublic:\n   void GetObjectData( SerializationInfo^ sInfo, StreamingContext * sContext )\n   {\n      \n      // Add a value to the Serialization information.\n      sInfo-&gt;AddValue( &quot;ErrorDate&quot;, ErrorDateTime );\n   }\n\n};\n\nint main()\n{\n   \n   // Load the mscorlib assembly and get a reference to it.\n   // You must supply the fully qualified assembly name for mscorlib.dll here.\n   Assembly^ myAssembly = Assembly::Load( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot; );\n   try\n   {\n      Console::WriteLine( &quot;Attempting to load a type not present in the assembly &#39;mscorlib&#39;&quot; );\n      \n      // This loading of invalid type raises a TypeLoadException\n      Type^ myType = myAssembly-&gt;GetType( &quot;System::NonExistentType&quot;, true );\n   }\n   catch ( TypeLoadException^ ) \n   {\n      \n      // Serialize the exception to disk and reconstitute it back again.\n      try\n      {\n         System::DateTime ErrorDatetime = DateTime::Now;\n         Console::WriteLine( &quot;A TypeLoadException has been raised.&quot; );\n         \n         // Create MyTypeLoadException instance with current time.\n         MyTypeLoadExceptionChild^ myTypeLoadExceptionChild = gcnew MyTypeLoadExceptionChild( ErrorDatetime );\n         IFormatter^ myFormatter = gcnew SoapFormatter;\n         Stream^ myFileStream = gcnew FileStream( &quot;typeload.xml&quot;,FileMode::Create,FileAccess::Write,FileShare::None );\n         Console::WriteLine( &quot;Serializing the TypeLoadException with DateTime as {0}&quot;, ErrorDatetime );\n         \n         // Serialize the MyTypeLoadException instance to a file.\n         myFormatter-&gt;Serialize( myFileStream, myTypeLoadExceptionChild );\n         myFileStream-&gt;Close();\n         Console::WriteLine( &quot;Deserializing the Exception.&quot; );\n         myFileStream = gcnew FileStream( &quot;typeload.xml&quot;,FileMode::Open,FileAccess::Read,FileShare::None );\n         \n         // Deserialize and reconstitute the instance from file.\n         myTypeLoadExceptionChild = safe_cast&lt;MyTypeLoadExceptionChild^&gt;(myFormatter-&gt;Deserialize( myFileStream ));\n         myFileStream-&gt;Close();\n         Console::WriteLine( &quot;Deserialized exception has ErrorDateTime = {0}&quot;, myTypeLoadExceptionChild-&gt;ErrorDateTime );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception : {0}&quot;, e-&gt;Message );\n      }\n\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception : {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeLoadException_GetObjectData#1\">Imports System\nImports System.Reflection\nImports System.Runtime.Serialization\nImports System.Runtime.Serialization.Formatters.Soap\nImports System.Security.Permissions\nImports System.IO\n\nClass GetObjectDataDemo\n\n   Public Shared Sub Main()\n      &#39; Get a reference to the assembly mscorlib.dll, which is always\n      &#39; loaded. (System.String is defined in mscorlib.)\n      Dim tString As Type = GetType(String)\n      Dim mscorlib As [Assembly] = tString.Assembly\n\n      Try\n         Console.WriteLine(&quot;Attempting to load a type not present in the assembly &#39;mscorlib&#39;&quot;)\n         &#39; This loading of invalid type raises a TypeLoadException\n         Dim myType As Type = mscorlib.GetType(&quot;System.NonExistentType&quot;, True)\n      Catch\n         &#39; Serialize the exception to disk and reconstitute it.\n         Dim ErrorDatetime as System.DateTime = DateTime.Now\n         Console.WriteLine(&quot;A TypeLoadException has been raised.&quot;)\n\n         &#39; Create MyTypeLoadException instance with current time.\n         Dim myException As new MyTypeLoadException(ErrorDatetime)\n         Dim myFormatter as IFormatter  = new SoapFormatter()\n         Dim myFileStream as Stream \n         myFileStream = New FileStream(&quot;typeload.xml&quot;, FileMode.Create, FileAccess.Write, FileShare.None)\n         Console.WriteLine(&quot;Serializing the TypeLoadException with DateTime as &quot; _\n             &amp; ErrorDatetime.ToString())\n\n         &#39; Serialize the MyTypeLoadException instance to a file.\n         myFormatter.Serialize(myFileStream, myException)\n         myFileStream.Close()\n\n         Console.WriteLine(&quot;Deserializing the Exception.&quot;)\n         myFileStream = New FileStream(&quot;typeload.xml&quot;, FileMode.Open, FileAccess.Read, FileShare.None)\n\n         &#39; Deserialize and reconstitute the instance from file.\n         myException = CType(myFormatter.Deserialize(myFileStream), MyTypeLoadException)\n         myFileStream.Close()\n         Console.WriteLine(&quot;Deserialized exception has ErrorDateTime = &quot; + myException.ErrorDateTime.ToString())\n      End Try\n   End Sub &#39;Main\nEnd Class\n\n&#39; This class overrides the GetObjectData method and initializes\n&#39; its data with current time. \n&lt;Serializable()&gt; _\nPublic Class MyTypeLoadException\n   Inherits TypeLoadException\n\n   Private _errorDateTime As System.DateTime = DateTime.Now\n   Public ReadOnly Property ErrorDateTime As DateTime\n      Get\n         Return _errorDateTime\n      End Get\n   End Property\n\n   Public Sub New(myDateTime As DateTime)\n      _errorDateTime = myDateTime\n   End Sub &#39;New\n\n   Protected Sub New(sInfo As SerializationInfo, sContext As StreamingContext)\n      MyBase.New(sInfo, sContext)\n      &#39; Reconstitute the deserialized information into the instance.\n      _errorDateTime = sInfo.GetDateTime(&quot;ErrorDate&quot;)\n   End Sub &#39;New\n\n   &#39; GetObjectData overrides must always have a demand for SerializationFormatter.\n   &lt;SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter:=true)&gt; _\n   Public Overrides Sub GetObjectData(sInfo As SerializationInfo, sContext As StreamingContext)\n      MyBase.GetObjectData(sInfo, sContext)\n      &#39; Add a value to the Serialization information.\n      sInfo.AddValue(&quot;ErrorDate&quot;, ErrorDateTime)\n   End Sub &#39;GetObjectData\n\nEnd Class &#39;MyTypeLoadExceptionChild\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException__ctor_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_TypeLoadException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeLoadException(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public TypeLoadException (string message, Exception inner);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>inner</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception. If the <code>inner</code> parameter is not <code>null</code>, the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor, or <code>null</code> if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>The inner exception reference.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates the TypeLoadException constructor. It contains a method that generates a <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a>, catches that exception, and throws a new <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> with a custom message, including the original <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> as the inner exception.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeLoadException_Constructor3#1\">\nusing System;\nusing System.Runtime.InteropServices;\n\npublic class TypeLoadException_Constructor3\n{\n   public static void Main() \n   {\n      Console.WriteLine(&quot;Calling a method in a non-existent DLL which triggers a TypeLoadException.&quot;);\n      try \n      {\n         TypeLoadExceptionDemoClass.GenerateException();\n      }  \n      catch (TypeLoadException e)\n      {\n         Console.WriteLine (&quot;TypeLoadException: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error Message = &quot; + e.Message);\n         Console.WriteLine (&quot;TypeLoadException: <br>&nbsp;&nbsp;&nbsp;&nbsp;InnerException Message = &quot; + e.InnerException.Message );\n      }  \n      catch (Exception e)\n      {\n         Console.WriteLine (&quot;Exception: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error Message = &quot; + e.Message);\n      }\n   }\n}\n\nclass TypeLoadExceptionDemoClass\n{ \n   // A call to this method will raise a TypeLoadException.\n   [DllImport(&quot;NonExistentDLL.DLL&quot;, EntryPoint=&quot;MethodNotExists&quot;)]\n   public static extern void NonExistentMethod();\n\n   public static void GenerateException() \n   {\n      try \n      {\n         NonExistentMethod();\n      }\n      catch (TypeLoadException e) \n      {\n         // Rethrow exception with the exception as inner exception\n         throw new TypeLoadException(&quot;This exception was raised due to a call to an invalid method.&quot;, e);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeLoadException_Constructor3#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\nref class TypeLoadExceptionDemoClass\n{\npublic:\n\n   // A call to this method will raise a TypeLoadException.\n\n   [DllImport(&quot;NonExistentDLL.DLL&quot;,EntryPoint=&quot;MethodNotExists&quot;)]\n   static void NonExistentMethod();\n   static void GenerateException()\n   {\n      try\n      {\n         NonExistentMethod();\n      }\n      catch ( TypeLoadException^ e ) \n      {\n         \n         // Rethrow exception with the exception as inner exception\n         throw gcnew TypeLoadException( &quot;This exception was raised due to a call to an invalid method.&quot;,e );\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;Calling a method in a non-existent DLL which triggers a TypeLoadException.&quot; );\n   try\n   {\n      TypeLoadExceptionDemoClass::GenerateException();\n   }\n   catch ( TypeLoadException^ e ) \n   {\n      Console::WriteLine( &quot;TypeLoadException: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error Message = {0}&quot;, e-&gt;Message );\n      Console::WriteLine( &quot;TypeLoadException: <br>&nbsp;&nbsp;&nbsp;&nbsp;InnerException Message = {0}&quot;, e-&gt;InnerException-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error Message = {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeLoadException_Constructor3#1\">Imports System\nImports System.Runtime.InteropServices\n\nPublic Class TypeLoadException_Constructor3\n   Public Shared Sub Main()\n      Console.WriteLine(&quot;Calling a method in a non-existent DLL which triggers a TypeLoadException.&quot;)\n      Try\n         TypeLoadExceptionDemoClass.GenerateException()\n      Catch e As TypeLoadException\n         Console.WriteLine((&quot;TypeLoadException: &quot; + ControlChars.Cr + ControlChars.Tab + &quot;Error Message = &quot; + e.Message))\n         Console.WriteLine((&quot;TypeLoadException: &quot; + ControlChars.Cr + ControlChars.Tab + &quot;InnerException Message = &quot; + e.InnerException.Message))\n      Catch e As Exception\n         Console.WriteLine((&quot;Exception: &quot; + ControlChars.Cr + ControlChars.Tab + &quot;Error Message = &quot; + e.Message))\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;TypeLoadException_Constructor3\n\nClass TypeLoadExceptionDemoClass\n   &#39; A call to this method will raise a TypeLoadException.\n   Public Declare Sub NonExistentMethod Lib &quot;NonExistentDLL.DLL&quot; Alias &quot;MethodNotExists&quot; ()\n\n   Public Shared Sub GenerateException()\n      Try\n         NonExistentMethod()\n      Catch e As TypeLoadException\n         &#39; Rethrow exception with the exception as inner exception\n         Throw New TypeLoadException(&quot;This exception was raised due to a call to an invalid method.&quot;, e)\n      End Try\n   End Sub &#39;GenerateException\nEnd Class &#39;TypeLoadExceptionDemoClass\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException_Message\">\r\n    \r\n            <a id=\"System_TypeLoadException_Message_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Message</div>        \r\n          </div>\r\n    \r\n            <p>Gets the error message for this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string Message { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The error message string.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property overrides <a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a>. The error message should be localized.  </p>\n<p> This property is read-only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to load a non-existent type from the mscorlib assembly. The resulting exception is caught, and the <a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_TypeName_\" data-linktype=\"relative-path\">TypeName</a> and Message values are displayed. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeLoadException_TypeName#1\">using System;\nusing System.Reflection;\n\npublic class TypeLoadException_TypeName\n{\n   public static void Main() \n   {\n      // Get a reference to the assembly mscorlib.dll, which is always\n      // loaded. (System.String is defined in mscorlib.)\n      Assembly mscorlib = typeof(string).Assembly;\n\n      try \n      {\n         Console.WriteLine(&quot;Attempting to load a type that does not exist in mscorlib.&quot;);\n         // The boolean parameter causes an exception to be thrown if the\n         // type is not found.\n         Type myType = mscorlib.GetType(&quot;System.NonExistentType&quot;, true);\n      }  \n      catch (TypeLoadException ex) \n      {\n         // Display the name of the type that was not found, and the \n         // exception message.\n         Console.WriteLine(&quot;TypeLoadException was caught. Type = &#39;{0}&#39;.&quot;, \n             ex.TypeName);\n         Console.WriteLine(&quot;Error Message = &#39;{0}&#39;&quot;, ex.Message);\n      }  \n   }\n}\n/*\n This code example produces output similar to the following:\n\nAttempting to load a type that does not exist in mscorlib.\nTypeLoadException was caught. Type = &#39;System.NonExistentType&#39;\nError Message = &#39;Could not load type System.NonExistentType from assembly mscorl\nib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.&#39;\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeLoadException_TypeName#1\">   // Load the mscorlib assembly and get a reference to it.\n   // You must supply the fully qualified assembly name for mscorlib.dll here.\n   Assembly^ myAssembly = Assembly::Load( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot; );\n   try\n   {\n      Console::WriteLine( &quot;This program throws an exception upon successful run.&quot; );\n      \n      // Attempt to load a non-existent type from an assembly. \n      Type^ myType = myAssembly-&gt;GetType( &quot;System.NonExistentType&quot;, true );\n   }\n   catch ( TypeLoadException^ e ) \n   {\n      // Display the name of the Type that was not found.\n      Console::WriteLine( &quot;TypeLoadException: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error loading the type &#39;{0}&#39; from the assembly &#39;mscorlib&#39;&quot;, e-&gt;TypeName );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Error Message = {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception: Error Message = {0}&quot;, e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeLoadException_TypeName#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class Example\n   Public Shared Sub Main()\n      &#39; Get a reference to the assembly mscorlib.dll, which is always\n      &#39; loaded. (System.String is defined in mscorlib.)\n      Dim tString As Type = GetType(String)\n      Dim mscorlib As [Assembly] = tString.Assembly\n\n      Try\n         Console.WriteLine(&quot;Attempting to load a type that does not exist in mscorlib.&quot;)\n         &#39; The boolean parameter causes an exception to be thrown if the\n         &#39; type is not found.\n         Dim myType As Type = mscorlib.GetType(&quot;System.NonExistentType&quot;, True)\n      Catch ex As TypeLoadException\n         &#39; Display the name of the type that was not found, and the \n         &#39; exception message.\n         Console.WriteLine(&quot;TypeLoadException was caught. Type = &#39;{0}&#39;.&quot;, _\n             ex.TypeName)\n         Console.WriteLine(&quot;Error Message = &#39;{0}&#39;&quot;, ex.Message)\n      End Try\n   End Sub \nEnd Class \n&#39;\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Attempting to load a type that does not exist in mscorlib.\n&#39;TypeLoadException was caught. Type = &#39;System.NonExistentType&#39;\n&#39;Error Message = &#39;Could not load type System.NonExistentType from assembly mscorl\n&#39;ib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException_TypeName\">\r\n    \r\n            <a id=\"System_TypeLoadException_TypeName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TypeName</div>        \r\n          </div>\r\n    \r\n            <p>Gets the fully qualified name of the type that causes the exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TypeName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified type name.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example attempts to load a non-existent type from the mscorlib assembly. The resulting exception is caught, and the TypeName and <a class=\"xref\" href=\"system.typeloadexception#System_TypeLoadException_Message_\" data-linktype=\"relative-path\">Message</a> values are displayed. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeLoadException_TypeName#1\">using System;\nusing System.Reflection;\n\npublic class TypeLoadException_TypeName\n{\n   public static void Main() \n   {\n      // Get a reference to the assembly mscorlib.dll, which is always\n      // loaded. (System.String is defined in mscorlib.)\n      Assembly mscorlib = typeof(string).Assembly;\n\n      try \n      {\n         Console.WriteLine(&quot;Attempting to load a type that does not exist in mscorlib.&quot;);\n         // The boolean parameter causes an exception to be thrown if the\n         // type is not found.\n         Type myType = mscorlib.GetType(&quot;System.NonExistentType&quot;, true);\n      }  \n      catch (TypeLoadException ex) \n      {\n         // Display the name of the type that was not found, and the \n         // exception message.\n         Console.WriteLine(&quot;TypeLoadException was caught. Type = &#39;{0}&#39;.&quot;, \n             ex.TypeName);\n         Console.WriteLine(&quot;Error Message = &#39;{0}&#39;&quot;, ex.Message);\n      }  \n   }\n}\n/*\n This code example produces output similar to the following:\n\nAttempting to load a type that does not exist in mscorlib.\nTypeLoadException was caught. Type = &#39;System.NonExistentType&#39;\nError Message = &#39;Could not load type System.NonExistentType from assembly mscorl\nib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.&#39;\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeLoadException_TypeName#1\">   // Load the mscorlib assembly and get a reference to it.\n   // You must supply the fully qualified assembly name for mscorlib.dll here.\n   Assembly^ myAssembly = Assembly::Load( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot; );\n   try\n   {\n      Console::WriteLine( &quot;This program throws an exception upon successful run.&quot; );\n      \n      // Attempt to load a non-existent type from an assembly. \n      Type^ myType = myAssembly-&gt;GetType( &quot;System.NonExistentType&quot;, true );\n   }\n   catch ( TypeLoadException^ e ) \n   {\n      // Display the name of the Type that was not found.\n      Console::WriteLine( &quot;TypeLoadException: <br>&nbsp;&nbsp;&nbsp;&nbsp;Error loading the type &#39;{0}&#39; from the assembly &#39;mscorlib&#39;&quot;, e-&gt;TypeName );\n      Console::WriteLine( &quot;&nbsp;&nbsp;&nbsp;&nbsp;Error Message = {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception: Error Message = {0}&quot;, e-&gt;Message );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeLoadException_TypeName#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\nPublic Class Example\n   Public Shared Sub Main()\n      &#39; Get a reference to the assembly mscorlib.dll, which is always\n      &#39; loaded. (System.String is defined in mscorlib.)\n      Dim tString As Type = GetType(String)\n      Dim mscorlib As [Assembly] = tString.Assembly\n\n      Try\n         Console.WriteLine(&quot;Attempting to load a type that does not exist in mscorlib.&quot;)\n         &#39; The boolean parameter causes an exception to be thrown if the\n         &#39; type is not found.\n         Dim myType As Type = mscorlib.GetType(&quot;System.NonExistentType&quot;, True)\n      Catch ex As TypeLoadException\n         &#39; Display the name of the type that was not found, and the \n         &#39; exception message.\n         Console.WriteLine(&quot;TypeLoadException was caught. Type = &#39;{0}&#39;.&quot;, _\n             ex.TypeName)\n         Console.WriteLine(&quot;Error Message = &#39;{0}&#39;&quot;, ex.Message)\n      End Try\n   End Sub \nEnd Class \n&#39;\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Attempting to load a type that does not exist in mscorlib.\n&#39;TypeLoadException was caught. Type = &#39;System.NonExistentType&#39;\n&#39;Error Message = &#39;Could not load type System.NonExistentType from assembly mscorl\n&#39;ib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089.&#39;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_TypeLoadException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_TypeLoadException_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object with the class name, method name, resource ID, and additional exception information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object that holds the serialized object data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contextual information about the source or destination.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> object is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>GetObjectData sets a <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> with all the exception object data targeted for serialization. During deserialization, the exception object is reconstituted from the <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> transmitted over the stream.  </p>\n<p> For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>[Visual Basic, C#]  </p>\n<p> The following example generates an exception, and serializes the exception data to a file, and then reconstitutes the exception. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see <a href=\"../Topic/Assembly%20Names.md\" data-linktype=\"relative-path\">Assembly Names</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"TypeLoadException_GetObjectData#1\">\nusing System;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Soap; \nusing System.Security.Permissions;\nusing System.IO;\n\nclass GetObjectDataDemo\n{\n   public static void Main()\n   {\n      // Get a reference to the assembly mscorlib.dll, which is always\n      // loaded. (System.String is defined in mscorlib.)\n      Assembly mscorlib = typeof(string).Assembly;\n\n      try\n      {\n         Console.WriteLine (&quot;Attempting to load a type not present in the assembly &#39;mscorlib&#39;&quot;);\n         // This loading of invalid type raises a TypeLoadException\n         Type myType = mscorlib.GetType(&quot;System.NonExistentType&quot;, true);\n      }         \n      catch (TypeLoadException)\n      {\n         // Serialize the exception to disk and reconstitute it.\n         System.DateTime ErrorDatetime = DateTime.Now;\n         Console.WriteLine(&quot;A TypeLoadException has been raised.&quot;);\n\n         // Create MyTypeLoadException instance with current time.\n         MyTypeLoadException myException = new MyTypeLoadException(ErrorDatetime);\n         IFormatter myFormatter = new SoapFormatter();\n         Stream myFileStream = new FileStream(&quot;typeload.xml&quot;, FileMode.Create, FileAccess.Write, FileShare.None);\n         Console.WriteLine(&quot;Serializing the TypeLoadException with DateTime as &quot; + ErrorDatetime);\n\n         // Serialize the MyTypeLoadException instance to a file.\n         myFormatter.Serialize(myFileStream, myException);\n         myFileStream.Close();\n\n         Console.WriteLine(&quot;Deserializing the Exception.&quot;);\n         myFileStream = new FileStream(&quot;typeload.xml&quot;, FileMode.Open, FileAccess.Read, FileShare.None);\n\n         // Deserialize and reconstitute the instance from file.\n         myException = (MyTypeLoadException) myFormatter.Deserialize(myFileStream);\n         myFileStream.Close();\n         Console.WriteLine(&quot;Deserialized exception has ErrorDateTime = &quot; + myException.ErrorDateTime);\n      }\n   }\n}\n\n// This class overrides the GetObjectData method and initializes\n// its data with current time. \n\n[Serializable]\npublic class MyTypeLoadException : TypeLoadException \n{\n   private System.DateTime _errorDateTime = DateTime.Now;\n   public DateTime ErrorDateTime { get { return _errorDateTime; }}\n\n   public MyTypeLoadException(DateTime myDateTime) \n   {\n      _errorDateTime = myDateTime;\n   }\n\n   protected MyTypeLoadException(SerializationInfo sInfo, StreamingContext sContext) \n       : base(sInfo, sContext)\n   {\n      // Reconstitute the deserialized information into the instance.\n      _errorDateTime = sInfo.GetDateTime(&quot;ErrorDate&quot;);\n   }\n\n   // GetObjectData overrides must always have a demand for SerializationFormatter.\n   [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter=true)]\n   public override void GetObjectData(SerializationInfo sInfo, StreamingContext sContext) \n   {\n      base.GetObjectData(sInfo, sContext);\n      // Add a value to the Serialization information.\n      sInfo.AddValue(&quot;ErrorDate&quot;, ErrorDateTime);\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"TypeLoadException_GetObjectData#1\">#using &lt;System.Runtime.Serialization.Formatters.Soap.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Runtime::Serialization;\nusing namespace System::Runtime::Serialization::Formatters::Soap;\nusing namespace System::IO;\n\n// This class overrides the GetObjectData method and initializes\n// its data with current time. \n\n[Serializable]\npublic ref class MyTypeLoadExceptionChild: public TypeLoadException\n{\npublic:\n   System::DateTime ErrorDateTime;\n   MyTypeLoadExceptionChild()\n   {\n      ErrorDateTime = DateTime::Now;\n   }\n\n   MyTypeLoadExceptionChild( DateTime myDateTime )\n   {\n      ErrorDateTime = myDateTime;\n   }\n\n\nprotected:\n   MyTypeLoadExceptionChild( SerializationInfo^ sInfo, StreamingContext * sContext )\n   {\n      \n      // Reconstitute the deserialized information into the instance.\n      ErrorDateTime = sInfo-&gt;GetDateTime( &quot;ErrorDate&quot; );\n   }\n\n\npublic:\n   void GetObjectData( SerializationInfo^ sInfo, StreamingContext * sContext )\n   {\n      \n      // Add a value to the Serialization information.\n      sInfo-&gt;AddValue( &quot;ErrorDate&quot;, ErrorDateTime );\n   }\n\n};\n\nint main()\n{\n   \n   // Load the mscorlib assembly and get a reference to it.\n   // You must supply the fully qualified assembly name for mscorlib.dll here.\n   Assembly^ myAssembly = Assembly::Load( &quot;Assembly text name, Version, Culture, PublicKeyToken&quot; );\n   try\n   {\n      Console::WriteLine( &quot;Attempting to load a type not present in the assembly &#39;mscorlib&#39;&quot; );\n      \n      // This loading of invalid type raises a TypeLoadException\n      Type^ myType = myAssembly-&gt;GetType( &quot;System::NonExistentType&quot;, true );\n   }\n   catch ( TypeLoadException^ ) \n   {\n      \n      // Serialize the exception to disk and reconstitute it back again.\n      try\n      {\n         System::DateTime ErrorDatetime = DateTime::Now;\n         Console::WriteLine( &quot;A TypeLoadException has been raised.&quot; );\n         \n         // Create MyTypeLoadException instance with current time.\n         MyTypeLoadExceptionChild^ myTypeLoadExceptionChild = gcnew MyTypeLoadExceptionChild( ErrorDatetime );\n         IFormatter^ myFormatter = gcnew SoapFormatter;\n         Stream^ myFileStream = gcnew FileStream( &quot;typeload.xml&quot;,FileMode::Create,FileAccess::Write,FileShare::None );\n         Console::WriteLine( &quot;Serializing the TypeLoadException with DateTime as {0}&quot;, ErrorDatetime );\n         \n         // Serialize the MyTypeLoadException instance to a file.\n         myFormatter-&gt;Serialize( myFileStream, myTypeLoadExceptionChild );\n         myFileStream-&gt;Close();\n         Console::WriteLine( &quot;Deserializing the Exception.&quot; );\n         myFileStream = gcnew FileStream( &quot;typeload.xml&quot;,FileMode::Open,FileAccess::Read,FileShare::None );\n         \n         // Deserialize and reconstitute the instance from file.\n         myTypeLoadExceptionChild = safe_cast&lt;MyTypeLoadExceptionChild^&gt;(myFormatter-&gt;Deserialize( myFileStream ));\n         myFileStream-&gt;Close();\n         Console::WriteLine( &quot;Deserialized exception has ErrorDateTime = {0}&quot;, myTypeLoadExceptionChild-&gt;ErrorDateTime );\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;Exception : {0}&quot;, e-&gt;Message );\n      }\n\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception : {0}&quot;, e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeLoadException_GetObjectData#1\">Imports System\nImports System.Reflection\nImports System.Runtime.Serialization\nImports System.Runtime.Serialization.Formatters.Soap\nImports System.Security.Permissions\nImports System.IO\n\nClass GetObjectDataDemo\n\n   Public Shared Sub Main()\n      &#39; Get a reference to the assembly mscorlib.dll, which is always\n      &#39; loaded. (System.String is defined in mscorlib.)\n      Dim tString As Type = GetType(String)\n      Dim mscorlib As [Assembly] = tString.Assembly\n\n      Try\n         Console.WriteLine(&quot;Attempting to load a type not present in the assembly &#39;mscorlib&#39;&quot;)\n         &#39; This loading of invalid type raises a TypeLoadException\n         Dim myType As Type = mscorlib.GetType(&quot;System.NonExistentType&quot;, True)\n      Catch\n         &#39; Serialize the exception to disk and reconstitute it.\n         Dim ErrorDatetime as System.DateTime = DateTime.Now\n         Console.WriteLine(&quot;A TypeLoadException has been raised.&quot;)\n\n         &#39; Create MyTypeLoadException instance with current time.\n         Dim myException As new MyTypeLoadException(ErrorDatetime)\n         Dim myFormatter as IFormatter  = new SoapFormatter()\n         Dim myFileStream as Stream \n         myFileStream = New FileStream(&quot;typeload.xml&quot;, FileMode.Create, FileAccess.Write, FileShare.None)\n         Console.WriteLine(&quot;Serializing the TypeLoadException with DateTime as &quot; _\n             &amp; ErrorDatetime.ToString())\n\n         &#39; Serialize the MyTypeLoadException instance to a file.\n         myFormatter.Serialize(myFileStream, myException)\n         myFileStream.Close()\n\n         Console.WriteLine(&quot;Deserializing the Exception.&quot;)\n         myFileStream = New FileStream(&quot;typeload.xml&quot;, FileMode.Open, FileAccess.Read, FileShare.None)\n\n         &#39; Deserialize and reconstitute the instance from file.\n         myException = CType(myFormatter.Deserialize(myFileStream), MyTypeLoadException)\n         myFileStream.Close()\n         Console.WriteLine(&quot;Deserialized exception has ErrorDateTime = &quot; + myException.ErrorDateTime.ToString())\n      End Try\n   End Sub &#39;Main\nEnd Class\n\n&#39; This class overrides the GetObjectData method and initializes\n&#39; its data with current time. \n&lt;Serializable()&gt; _\nPublic Class MyTypeLoadException\n   Inherits TypeLoadException\n\n   Private _errorDateTime As System.DateTime = DateTime.Now\n   Public ReadOnly Property ErrorDateTime As DateTime\n      Get\n         Return _errorDateTime\n      End Get\n   End Property\n\n   Public Sub New(myDateTime As DateTime)\n      _errorDateTime = myDateTime\n   End Sub &#39;New\n\n   Protected Sub New(sInfo As SerializationInfo, sContext As StreamingContext)\n      MyBase.New(sInfo, sContext)\n      &#39; Reconstitute the deserialized information into the instance.\n      _errorDateTime = sInfo.GetDateTime(&quot;ErrorDate&quot;)\n   End Sub &#39;New\n\n   &#39; GetObjectData overrides must always have a demand for SerializationFormatter.\n   &lt;SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter:=true)&gt; _\n   Public Overrides Sub GetObjectData(sInfo As SerializationInfo, sContext As StreamingContext)\n      MyBase.GetObjectData(sInfo, sContext)\n      &#39; Add a value to the Serialization information.\n      sInfo.AddValue(&quot;ErrorDate&quot;, ErrorDateTime)\n   End Sub &#39;GetObjectData\n\nEnd Class &#39;MyTypeLoadExceptionChild\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TypeLoadException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TypeLoadException.yml\">\r\n<meta name=\"APIName\" content=\"System.TypeLoadException\">\r\n<meta name=\"APIName\" content=\"System.TypeLoadException..ctor\">\r\n<meta name=\"APIName\" content=\"System.TypeLoadException.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.TypeLoadException.Message\">\r\n<meta name=\"APIName\" content=\"System.TypeLoadException.TypeName\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"001318fb-065d-beb3-e692-ac556a4949ce\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception that is thrown when type-loading failures occur.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.TypeLoadException\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.TypeLoadException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.TypeLoadException.yml","open_to_public_contributors":true,"api_name":["System.TypeLoadException","System.TypeLoadException..ctor","System.TypeLoadException.GetObjectData","System.TypeLoadException.Message","System.TypeLoadException.TypeName"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.TypeLoadException","System::TypeLoadException","System.TypeLoadException.#ctor","System::TypeLoadException::#ctor","System.TypeLoadException.GetObjectData","System::TypeLoadException::GetObjectData","System.TypeLoadException.Message","System::TypeLoadException::Message","System.TypeLoadException.TypeName","System::TypeLoadException::TypeName"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"001318fb-065d-beb3-e692-ac556a4949ce","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/TypeLoadException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TypeLoadException class | Microsoft Docs","_op_ogTitle":"TypeLoadException class","description":"The exception that is thrown when type-loading failures occur.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.TypeLoadException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.typeloadexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.typeloadexception","fileRelativePath":"System.TypeLoadException.html"},"themesRelativePathToOutputRoot":"_themes/"}