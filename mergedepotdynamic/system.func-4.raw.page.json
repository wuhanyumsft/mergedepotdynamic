{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Func&lt;T1,T2,T3,TResult&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has three parameters and returns a value of the type specified by the <code>TResult</code> parameter.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T1</td>\r\n  \t\t\t<td><p>The type of the first parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T2</td>\r\n  \t\t\t<td><p>The type of the second parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T3</td>\r\n  \t\t\t<td><p>The type of the third parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TResult</td>\r\n  \t\t\t<td><p>The type of the return value of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">Func&lt;T1,T2,T3,TResult&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have three parameters, each of which is passed to it by value, and that it must return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has three parameters and returns <code>void</code> (or in Visual Basic, that is declared as a <code>Sub</code> rather than as a <code>Function</code>), use the generic <a class=\"xref\" href=\"system.action-3\" data-linktype=\"relative-path\">Action&lt;T1,T2,T3&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Func(T1, delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters. For example, the following code explicitly declares a generic delegate named <code>ParseNumber</code> and assigns a reference to the <a class=\"xref\" href=\"system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~4#1\">using System;\nusing System.Globalization;\n\ndelegate T ParseNumber&lt;T&gt;(string input, NumberStyles styles, \n                         IFormatProvider provider);\n                         \npublic class DelegateExample\n{\n   public static void Main()\n   {\n      string numericString = &quot;-1,234&quot;;\n      ParseNumber&lt;int&gt; parser = int.Parse;\n      Console.WriteLine(parser(numericString, \n                        NumberStyles.Integer | NumberStyles.AllowThousands, \n                        CultureInfo.InvariantCulture));\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~4#1\">Imports System.Globalization\n\nDelegate Function ParseNumber(Of T)(input As String, styles As NumberStyles, _\n                                    provider As IFormatProvider) As T\n\nModule DelegateExample\n   Public Sub Main()\n      Dim numericString As String = &quot;-1,234&quot;\n      Dim parser As ParseNumber(Of Integer) = AddressOf Integer.Parse\n      Console.WriteLine(parser(numericString, _\n                        NumberStyles.Integer Or NumberStyles.AllowThousands, _\n                        CultureInfo.InvariantCulture))\n   End Sub\nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating the Func(T1, delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Func~4#2\">Imports System.Globalization\n\nModule GenericFunc\n   Public Sub Main()\n      Dim numericString As String = &quot;-1,234&quot;\n      Dim parser As Func(Of String, NumberStyles, IFormatProvider, Integer) _\n                         = AddressOf Integer.Parse\n      Console.WriteLine(parser(numericString, _\n                        NumberStyles.Integer Or NumberStyles.AllowThousands, _\n                        CultureInfo.InvariantCulture))\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Func~4#2\">using System;\nusing System.Globalization;\n\npublic class GenericFunc\n{\n   public static void Main()\n   {\n      string numericString = &quot;-1,234&quot;;\n      Func&lt;string, NumberStyles, IFormatProvider, int&gt; parser = int.Parse;\n      Console.WriteLine(parser(numericString, \n                        NumberStyles.Integer | NumberStyles.AllowThousands, \n                        CultureInfo.InvariantCulture));\n   }\n}\n</code></pre><p> You can use the Func(T1, delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../Topic/Anonymous%20Methods%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~4#3\">using System;\nusing System.Globalization;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      string numericString = &quot;-1,234&quot;;\n      Func&lt;string, NumberStyles, IFormatProvider, int&gt; parser = \n           delegate(string s, NumberStyles sty, IFormatProvider p) \n           { return int.Parse(s, sty, p); };\n      Console.WriteLine(parser(numericString, \n                        NumberStyles.Integer | NumberStyles.AllowThousands, \n                        CultureInfo.InvariantCulture));\n   }\n}\n</code></pre><p> You can also assign a lambda expression to a Func(T1, delegate, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../Topic/Lambda%20Expressions%20(Visual%20Basic).md\" data-linktype=\"relative-path\">Lambda Expressions</a> and <a href=\"../Topic/Lambda%20Expressions%20(C%23%20Programming%20Guide).md\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-vb\" name=\"System.Func~4#4\">Imports System.Globalization\n\nModule LambdaExpression\n   Public Sub Main()\n      Dim numericString As String = &quot;-1,234&quot;\n      Dim parser As Func(Of String, NumberStyles, IFormatProvider, Integer) _\n                         = Function(s, sty, p) Integer.Parse(s, sty, p)\n      Console.WriteLine(parser(numericString, _\n                        NumberStyles.Integer Or NumberStyles.AllowThousands, _\n                        CultureInfo.InvariantCulture))\n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Func~4#4\">using System;\nusing System.Globalization;\n\npublic class LambdaExpression\n{\n   public static void Main()\n   {\n      string numericString = &quot;-1,234&quot;;\n      Func&lt;string, NumberStyles, IFormatProvider, int&gt; parser = (s, sty, p)\n                   =&gt; int.Parse(s, sty, p);\n      Console.WriteLine(parser(numericString, \n                        NumberStyles.Integer | NumberStyles.AllowThousands, \n                        CultureInfo.InvariantCulture));\n   }\n}\n</code></pre><p> The underlying type of a lambda expression is one of the generic <code>Func</code> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <a class=\"xref\" href=\"system.linq\" data-linktype=\"relative-path\">System.Linq</a> namespace have <code>Func</code> parameters, you can pass these methods a lambda expression without explicitly instantiating a <code>Func</code> delegate.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-4.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-4.yml\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,TResult&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,TResult&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,TResult&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"8a297b73-ec57-ee37-e491-f5443aa74b51\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has three parameters and returns a value of the type specified by the TResult parameter.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Func`4\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Func-4.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Func-4.yml","open_to_public_contributors":true,"api_name":["System.Func<T1,T2,T3,TResult>","System.Func<T1,T2,T3,TResult>..ctor","System.Func<T1,T2,T3,TResult>.Invoke","System.Func<T1,T2,T3,TResult>.BeginInvoke","System.Func<T1,T2,T3,TResult>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Func`4","System::Func`4"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"8a297b73-ec57-ee37-e491-f5443aa74b51","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/Func`4.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Func<T1,T2,T3,TResult> delegate | Microsoft Docs","_op_ogTitle":"Func<T1,T2,T3,TResult> delegate","description":"Encapsulates a method that has three parameters and returns a value of the type specified by the TResult parameter.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Func`4","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-4","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.func-4","fileRelativePath":"System.Func-4.html"},"themesRelativePathToOutputRoot":"_themes/"}