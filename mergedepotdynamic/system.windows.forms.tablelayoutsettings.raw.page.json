{"content":"    \r\n    <h1 id=\"System_Windows_Forms_TableLayoutSettings\">\r\n      <span class=\"lang-csharp\">TableLayoutSettings</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Collects the characteristics associated with table layouts.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter))]\npublic sealed class TableLayoutSettings : System.Windows.Forms.LayoutSettings, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.windows.forms.layoutsettings\" data-linktype=\"relative-path\">System.Windows.Forms.LayoutSettings</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">TableLayoutSettings</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The TableLayoutSettings class collects and manages the characteristics associated with the table layout scheme. This class is used internally by the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a> and <a class=\"xref\" href=\"system.windows.forms.toolstrip\" data-linktype=\"relative-path\">ToolStrip</a> classes, as well as the table layout engine. The TableLayoutSettings class is used by the layout engine to determine how to lay out the container&#39;s child controls.  </p>\n<p> The TableLayoutSettings class manages the following information:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a> being used.  </p>\n</li>\n<li><p>The maximum number of columns and rows in the layout.  </p>\n</li>\n<li><p>The collection of styles used for the contained columns and rows.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_ColumnCount\" data-linktype=\"self-bookmark\">ColumnCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum number of columns allowed in the table layout.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_ColumnStyles\" data-linktype=\"self-bookmark\">ColumnStyles</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of styles used to determine the look and feel of the table layout columns.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_GrowStyle\" data-linktype=\"self-bookmark\">GrowStyle</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value indicating how the table layout should expand to accommodate new cells when all existing cells are occupied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_LayoutEngine\" data-linktype=\"self-bookmark\">LayoutEngine</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the current table layout engine.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_RowCount\" data-linktype=\"self-bookmark\">RowCount</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the maximum number of rows allowed in the table layout.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_RowStyles\" data-linktype=\"self-bookmark\">RowStyles</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the collection of styles used to determine the look and feel of the table layout rows.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_GetCellPosition_System_Object_\" data-linktype=\"self-bookmark\">GetCellPosition(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> that represents the row and the column of the cell.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_GetColumn_System_Object_\" data-linktype=\"self-bookmark\">GetColumn(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the column position of the specified child control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_GetColumnSpan_System_Object_\" data-linktype=\"self-bookmark\">GetColumnSpan(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of columns that the cell containing the child control spans.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_GetRow_System_Object_\" data-linktype=\"self-bookmark\">GetRow(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the row position of the specified child control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_GetRowSpan_System_Object_\" data-linktype=\"self-bookmark\">GetRowSpan(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of rows that the cell containing the child control spans.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_SetCellPosition_System_Object_System_Windows_Forms_TableLayoutPanelCellPosition_\" data-linktype=\"self-bookmark\">SetCellPosition(Object,TableLayoutPanelCellPosition)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> that represents the row and the column of the cell.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_SetColumn_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">SetColumn(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the column position for the specified child control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_SetColumnSpan_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">SetColumnSpan(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the number of columns that the cell containing the child control spans.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_SetRow_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">SetRow(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the row position of the specified child control.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_SetRowSpan_System_Object_System_Int32_\" data-linktype=\"self-bookmark\">SetRowSpan(Object,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the number of rows that the cell containing the child control spans.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Forms_TableLayoutSettings_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.Serialization.ISerializable.GetObjectData*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_ColumnCount\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_ColumnCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum number of columns allowed in the table layout.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ColumnCount { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of columns allowed in the table layout. The default is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property value is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the ColumnCount property does not allocate the columns or any backing memory. This allocation occurs when the columns are created.  </p>\n<p> Setting this property causes the table to undergo another layout operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to initialize a <a class=\"xref\" href=\"system.windows.forms.tablelayoutsettings\" data-linktype=\"relative-path\">TableLayoutSettings</a> object for a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a> control. For a full code listing, see <a href=\"../Topic/How%20to:%20Implement%20a%20Custom%20ToolStripRenderer.md\" data-linktype=\"relative-path\">How to: Implement a Custom ToolStripRenderer</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">&#39; The following class implements a sliding-tile puzzle.\n&#39; The GridStrip control is a custom ToolStrip that arranges\n&#39; its ToolStripButton controls in a grid layout. There is \n&#39; one empty cell, into which the user can slide an adjacent\n&#39; tile with a drag-and-drop operation. Tiles that are eligible \n&#39; for moving are highlighted.\nPublic Class GridStrip\n    Inherits ToolStrip\n\n   &#39; The button that is the drag source.\n   Private dragButton As ToolStripButton = Nothing\n   \n   &#39; Settings for the ToolStrip control&#39;s TableLayoutPanel.\n   &#39; This provides access to the cell position of each\n   &#39; ToolStripButton.\n   Private tableSettings As TableLayoutSettings = Nothing\n   \n   &#39; The empty cell. ToolStripButton controls that are\n   &#39; adjacent to this button can be moved to this button&#39;s\n   &#39; cell position.\n   Private emptyCellButton As ToolStripButton = Nothing\n   \n   &#39; The dimensions of each tile. A tile is represented\n   &#39; by a ToolStripButton controls.\n   Private tileSize As New Size(128, 128)\n   \n   &#39; The number of rows in the GridStrip control.\n   Private rows As Integer = 5\n   \n   &#39; The number of columns in the GridStrip control.\n   Private columns As Integer = 5\n   \n   &#39; The one-time initialzation behavior is enforced\n   &#39; with this field. For more information, see the \n   &#39; OnPaint method.\n   Private firstTime As Boolean = False\n   \n   &#39; This is a required by the Windows Forms designer.\n   Private components As System.ComponentModel.IContainer\n   \n   \n   &#39; The default constructor.  \n    Public Sub New()\n        MyBase.New()\n\n        Me.InitializeComponent()\n\n        Me.InitializeTableLayoutSettings()\n    End Sub\n   \n   &#39; This property exposes the empty cell to the \n   &#39; GridStripRenderer class.\n   Friend ReadOnly Property EmptyCell() As ToolStripButton\n      Get\n         Return Me.emptyCellButton\n      End Get\n   End Property\n   \n   \n   &#39; This utility method initializes the TableLayoutPanel \n   &#39; which contains the ToolStripButton controls.\n    Private Sub InitializeTableLayoutSettings()\n\n        &#39; Specify the numbers of rows and columns in the GridStrip control.\n        Me.tableSettings = CType(MyBase.LayoutSettings, TableLayoutSettings)\n        Me.tableSettings.ColumnCount = Me.rows\n        Me.tableSettings.RowCount = Me.columns\n\n        &#39; Create a dummy bitmap with the dimensions of each tile.\n        &#39; The GridStrip control sizes itself based on these dimensions.\n        Dim b As New Bitmap(tileSize.Width, tileSize.Height)\n\n        &#39; Populate the GridStrip control with ToolStripButton controls.\n        Dim i As Integer\n        For i = 0 To (Me.tableSettings.ColumnCount) - 1\n            Dim j As Integer\n            For j = 0 To (Me.tableSettings.RowCount) - 1\n                &#39; Create a new ToolStripButton control.\n                Dim btn As New ToolStripButton()\n                btn.DisplayStyle = ToolStripItemDisplayStyle.Image\n                btn.Image = b\n                btn.ImageAlign = ContentAlignment.MiddleCenter\n                btn.ImageScaling = ToolStripItemImageScaling.None\n                btn.Margin = System.Windows.Forms.Padding.Empty\n                btn.Padding = System.Windows.Forms.Padding.Empty\n\n                &#39; Add the new ToolStripButton control to the GridStrip.\n                Me.Items.Add(btn)\n\n                &#39; Set the cell position of the ToolStripButton control.\n                Dim cellPos As New TableLayoutPanelCellPosition(i, j)\n                Me.tableSettings.SetCellPosition(btn, cellPos)\n\n                &#39; If this is the ToolStripButton control at cell (0,0),\n                &#39; assign it as the empty cell button.\n                If i = 0 AndAlso j = 0 Then\n                    btn.Text = &quot;Empty Cell&quot;\n                    btn.Image = b\n                    Me.emptyCellButton = btn\n                End If\n            Next j\n        Next i\n    End Sub\n   \n   \n   &#39; This method defines the Paint event behavior.\n   &#39; The GridStripRenderer requires that the GridStrip\n   &#39; be fully layed out when it is renders, so this\n   &#39; initialization code cannot be placed in the\n   &#39; GridStrip constructor. By the time the Paint\n   &#39; event is raised, the control layout has been \n   &#39; completed, so the GridStripRenderer can paint\n   &#39; correctly. This one-time initialization is\n   &#39; implemented with the firstTime field.\n   Protected Overrides Sub OnPaint(e As PaintEventArgs)\n      MyBase.OnPaint(e)\n      \n      If Not Me.firstTime Then\n         Me.Renderer = New GridStripRenderer()\n         \n         &#39; Comment this line to see the unscrambled image.\n         Me.ScrambleButtons()\n         Me.firstTime = True\n      End If\n    End Sub\n   \n   \n   &#39; This utility method changes the ToolStripButton control \n   &#39; positions in the TableLayoutPanel. This scrambles the \n   &#39; buttons to initialize the puzzle.\n   Private Sub ScrambleButtons()\n      Dim i As Integer = 0\n      Dim lastElement As Integer = Me.Items.Count - 1\n      \n      While i &lt;&gt; lastElement AndAlso lastElement - i &gt; 1\n            Dim pos1 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(i))\n         \n            Dim pos2 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(lastElement))\n         \n            Me.tableSettings.SetCellPosition(Me.Items(i), pos2)\n            i += 1\n         \n            Me.tableSettings.SetCellPosition(Me.Items(lastElement), pos1)\n            lastElement -= 1\n      End While\n    End Sub\n   \n   \n   &#39; This method defines the MouseDown event behavior. \n   &#39; If the user has clicked on a valid drag source, \n   &#39; the drag operation starts.\n   Protected Overrides Sub OnMouseDown(mea As MouseEventArgs)\n      MyBase.OnMouseDown(mea)\n      \n        Dim btn As ToolStripButton = CType(Me.GetItemAt(mea.Location), ToolStripButton)\n      \n      If (btn IsNot Nothing) Then\n         If Me.IsValidDragSource(btn) Then\n            Me.dragButton = btn\n         End If\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the MouseMove event behavior. \n   Protected Overrides Sub OnMouseMove(mea As MouseEventArgs)\n      MyBase.OnMouseMove(mea)\n      \n      &#39; Is a drag operation pending?\n      If (Me.dragButton IsNot Nothing) Then\n         &#39; A drag operation is pending. Call DoDragDrop to \n         &#39; determine the disposition of the operation.\n         Dim dropEffect As DragDropEffects = Me.DoDragDrop(New DataObject(Me.dragButton), DragDropEffects.Move)\n      End If\n    End Sub\n   \n   &#39; This method defines the DragOver event behavior. \n   Protected Overrides Sub OnDragOver(dea As DragEventArgs)\n      MyBase.OnDragOver(dea)\n      \n      &#39; Get the ToolStripButton control \n      &#39; at the given mouse position.\n      Dim p As New Point(dea.X, dea.Y)\n      Dim item As ToolStripButton = CType(Me.GetItemAt(Me.PointToClient(p)), ToolStripButton)\n      \n      \n      &#39; If the ToolStripButton control is the empty cell,\n      &#39; indicate that the move operation is valid.\n        If item Is Me.emptyCellButton Then\n            &#39; Set the drag operation to indicate a valid move.\n            dea.Effect = DragDropEffects.Move\n        End If\n    End Sub\n   \n   \n   &#39; This method defines the DragDrop event behavior. \n   Protected Overrides Sub OnDragDrop(dea As DragEventArgs)\n      MyBase.OnDragDrop(dea)\n      \n      &#39; Did a valid move operation occur?\n      If dea.Effect = DragDropEffects.Move Then\n         &#39; The move operation is valid. Adjust the state\n         &#39; of the GridStrip control&#39;s TableLayoutPanel,\n         &#39; by swapping the positions of the source button\n         &#39; and the empty cell button.\n         &#39; Get the cell of the control to move.\n         Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.dragButton)\n         \n         &#39; Get the cell of the emptyCellButton.\n         Dim dropPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n         \n         &#39; Move the control to the empty cell.\n         tableSettings.SetCellPosition(Me.dragButton, dropPos)\n         \n         &#39; Set the position of the empty cell to \n         &#39; that of the previously occupied cell.\n         tableSettings.SetCellPosition(Me.emptyCellButton, sourcePos)\n         \n         &#39; Reset the drag operation.\n         Me.dragButton = Nothing\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the DragLeave event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnDragLeave(e As EventArgs)\n      MyBase.OnDragLeave(e)\n      \n      &#39; Reset the drag operation.\n      Me.dragButton = Nothing\n    End Sub\n   \n   \n   &#39; This method defines the ueryContinueDrag event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnQueryContinueDrag(qcdevent As QueryContinueDragEventArgs)\n      MyBase.OnQueryContinueDrag(qcdevent)\n      \n      &#39; Get the current mouse position, in screen coordinates.\n      Dim mousePos As Point = Me.PointToClient(Control.MousePosition)\n      \n      &#39; If the mouse position is outside the GridStrip control&#39;s\n      &#39; client area, cancel the drag operation. Be sure to\n      &#39; transform the mouse&#39;s screen coordinates to client coordinates. \n      If Not Me.ClientRectangle.Contains(mousePos) Then\n         qcdevent.Action = DragAction.Cancel\n      End If\n    End Sub\n   \n   \n   &#39; This utility method determines if a button\n   &#39; is positioned relative to the empty cell \n   &#39; such that it can be dragged into the empty cell.\n   Overloads Private Function IsValidDragSource(b As ToolStripButton) As Boolean\n      Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(b)\n      \n      Dim emptyPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n      \n        Return IsValidDragSource(sourcePos, emptyPos)\n\n    End Function\n   \n   \n   &#39; This utility method determines if a cell position\n   &#39; is adjacent to the empty cell.\n    Friend Overloads Shared Function IsValidDragSource( _\n    ByVal sourcePos As TableLayoutPanelCellPosition, _\n    ByVal emptyPos As TableLayoutPanelCellPosition) As Boolean\n        Dim returnValue As Boolean = False\n\n        &#39; A cell is considered to be a valid drag source if it\n        &#39; is adjacent to the empty cell. Cells that are positioned\n        &#39; on a diagonal are not valid.\n        If sourcePos.Column = emptyPos.Column - 1 AndAlso sourcePos.Row = emptyPos.Row OrElse _\n        (sourcePos.Column = emptyPos.Column + 1 AndAlso sourcePos.Row = emptyPos.Row) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row - 1) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row + 1) Then\n            returnValue = True\n        End If\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">    // The following class implements a sliding-tile puzzle.\n    // The GridStrip control is a custom ToolStrip that arranges\n    // its ToolStripButton controls in a grid layout. There is \n    // one empty cell, into which the user can slide an adjacent\n    // tile with a drag-and-drop operation. Tiles that are eligible \n    // for moving are highlighted.\n    public class GridStrip : ToolStrip\n    {\n        // The button that is the drag source.\n        private ToolStripButton dragButton = null;\n\n        // Settings for the ToolStrip control&#39;s TableLayoutPanel.\n        // This provides access to the cell position of each\n        // ToolStripButton.\n        private TableLayoutSettings tableSettings = null;\n\n        // The empty cell. ToolStripButton controls that are\n        // adjacent to this button can be moved to this button&#39;s\n        // cell position.\n        private ToolStripButton emptyCellButton = null;\n\n        // The dimensions of each tile. A tile is represented\n        // by a ToolStripButton controls.\n        private Size tileSize = new Size(128, 128);\n\n        // The number of rows in the GridStrip control.\n        private readonly int rows = 5;\n\n        // The number of columns in the GridStrip control.\n        private readonly int columns = 5;\n\n        // The one-time initialzation behavior is enforced\n        // with this field. For more information, see the \n        // OnPaint method.\n        private bool firstTime = false;\n\n        // This is a required by the Windows Forms designer.\n        private System.ComponentModel.IContainer components;\n \n        // The default constructor.  \n        public GridStrip()\n        {\n            this.InitializeComponent();\n\n            this.InitializeTableLayoutSettings();\n        }\n\n        // This property exposes the empty cell to the \n        // GridStripRenderer class.\n        internal ToolStripButton EmptyCell\n        {\n            get\n            {\n                return this.emptyCellButton;\n            }\n        }\n\n        // This utility method initializes the TableLayoutPanel \n        // which contains the ToolStripButton controls.\n        private void InitializeTableLayoutSettings()\n        {\n            // Specify the numbers of rows and columns in the GridStrip control.\n            this.tableSettings = base.LayoutSettings as TableLayoutSettings;\n            this.tableSettings.ColumnCount = this.rows;\n            this.tableSettings.RowCount = this.columns;\n\n            // Create a dummy bitmap with the dimensions of each tile.\n            // The GridStrip control sizes itself based on these dimensions.\n            Bitmap b = new Bitmap(tileSize.Width, tileSize.Height);\n\n            // Populate the GridStrip control with ToolStripButton controls.\n            for (int i = 0; i &lt; this.tableSettings.ColumnCount; i++)\n            {\n                for (int j = 0; j &lt; this.tableSettings.RowCount; j++)\n                {\n                    // Create a new ToolStripButton control.\n                    ToolStripButton btn = new ToolStripButton();\n                    btn.DisplayStyle = ToolStripItemDisplayStyle.Image;\n                    btn.Image = b;\n                    btn.ImageAlign = ContentAlignment.MiddleCenter;\n                    btn.ImageScaling = ToolStripItemImageScaling.None;\n                    btn.Margin = Padding.Empty;\n                    btn.Padding = Padding.Empty;\n\n                    // Add the new ToolStripButton control to the GridStrip.\n                    this.Items.Add(btn);\n\n                    // Set the cell position of the ToolStripButton control.\n                    TableLayoutPanelCellPosition cellPos = new TableLayoutPanelCellPosition(i, j);\n                    this.tableSettings.SetCellPosition(btn, cellPos);\n\n                    // If this is the ToolStripButton control at cell (0,0),\n                    // assign it as the empty cell button.\n                    if( i == 0 &amp;&amp; j == 0 )\n                    {\n                        btn.Text = &quot;Empty Cell&quot;;\n                        btn.Image = b;\n                        this.emptyCellButton = btn;\n                    }\n                }\n            }\n        }\n\n        // This method defines the Paint event behavior.\n        // The GridStripRenderer requires that the GridStrip\n        // be fully layed out when it is renders, so this\n        // initialization code cannot be placed in the\n        // GridStrip constructor. By the time the Paint\n        // event is raised, the control layout has been \n        // completed, so the GridStripRenderer can paint\n        // correctly. This one-time initialization is\n        // implemented with the firstTime field.\n        protected override void OnPaint(PaintEventArgs e)\n        {\n            base.OnPaint(e);\n\n            if (!this.firstTime)\n            {\n                this.Renderer = new GridStripRenderer();\n\n                // Comment this line to see the unscrambled image.\n                this.ScrambleButtons();\n                this.firstTime = true;\n            }\n        }\n\n        // This utility method changes the ToolStripButton control \n        // positions in the TableLayoutPanel. This scrambles the \n        // buttons to initialize the puzzle.\n        private void ScrambleButtons()\n        {\n            int i = 0;\n            int lastElement = this.Items.Count - 1;\n\n            while ( (i != lastElement ) &amp;&amp;\n                    (lastElement - i &gt; 1) )\n            {\n                TableLayoutPanelCellPosition pos1 = \n                    this.tableSettings.GetCellPosition(this.Items[i]);\n\n                TableLayoutPanelCellPosition pos2 = \n                    this.tableSettings.GetCellPosition(this.Items[lastElement]);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[i++], \n                    pos2);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[lastElement--], \n                    pos1);\n            }\n        }\n\n        // This method defines the MouseDown event behavior. \n        // If the user has clicked on a valid drag source, \n        // the drag operation starts.\n        protected override void OnMouseDown(MouseEventArgs mea)\n        {\n            base.OnMouseDown(mea);\n\n            ToolStripButton btn = this.GetItemAt(mea.Location) as ToolStripButton;\n\n            if (btn != null)\n            {\n                if (this.IsValidDragSource(btn))\n                {\n                    this.dragButton = btn;\n                }\n            }\n        }\n\n        // This method defines the MouseMove event behavior. \n        protected override void OnMouseMove(MouseEventArgs mea)\n        {\n            base.OnMouseMove(mea);\n\n            // Is a drag operation pending?\n            if (this.dragButton != null)\n            {\n                // A drag operation is pending. Call DoDragDrop to \n                // determine the disposition of the operation.\n                DragDropEffects dropEffect = this.DoDragDrop(\n                    new DataObject(this.dragButton), \n                    DragDropEffects.Move);\n            }\n        }\n\n        // This method defines the DragOver event behavior. \n        protected override void OnDragOver(DragEventArgs dea)\n        {\n            base.OnDragOver(dea);\n\n            // Get the ToolStripButton control \n            // at the given mouse position.\n            Point p = new Point(dea.X, dea.Y);\n            ToolStripButton item = this.GetItemAt(\n                this.PointToClient(p)) as ToolStripButton;\n\n            // If the ToolStripButton control is the empty cell,\n            // indicate that the move operation is valid.\n            if( item == this.emptyCellButton )\n            {\n                // Set the drag operation to indicate a valid move.\n                dea.Effect = DragDropEffects.Move;\n            }\n        }\n\n        // This method defines the DragDrop event behavior. \n        protected override void OnDragDrop(DragEventArgs dea)\n        {\n            base.OnDragDrop(dea);\n\n            // Did a valid move operation occur?\n            if (dea.Effect == DragDropEffects.Move)\n            {\n                // The move operation is valid. Adjust the state\n                // of the GridStrip control&#39;s TableLayoutPanel,\n                // by swapping the positions of the source button\n                // and the empty cell button.\n\n                // Get the cell of the control to move.\n                TableLayoutPanelCellPosition sourcePos = \n                    tableSettings.GetCellPosition(this.dragButton);\n\n                // Get the cell of the emptyCellButton.\n                TableLayoutPanelCellPosition dropPos = \n                    tableSettings.GetCellPosition(this.emptyCellButton);\n\n                // Move the control to the empty cell.\n                tableSettings.SetCellPosition(this.dragButton, dropPos);\n\n                // Set the position of the empty cell to \n                // that of the previously occupied cell.\n                tableSettings.SetCellPosition(this.emptyCellButton, sourcePos);\n\n                // Reset the drag operation.\n                this.dragButton = null;\n            }\n        }\n\n        // This method defines the DragLeave event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnDragLeave(EventArgs e)\n        {\n            base.OnDragLeave(e);\n\n            // Reset the drag operation.\n            this.dragButton = null;\n        }\n\n        // This method defines the ueryContinueDrag event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)\n        {\n            base.OnQueryContinueDrag(qcdevent);\n\n            // Get the current mouse position, in screen coordinates.\n            Point mousePos = this.PointToClient(Control.MousePosition);\n\n            // If the mouse position is outside the GridStrip control&#39;s\n            // client area, cancel the drag operation. Be sure to\n            // transform the mouse&#39;s screen coordinates to client coordinates. \n            if (!this.ClientRectangle.Contains(mousePos))\n            {\n                qcdevent.Action = DragAction.Cancel;\n            }\n        }\n\n        // This utility method determines if a button\n        // is positioned relative to the empty cell \n        // such that it can be dragged into the empty cell.\n        private bool IsValidDragSource(ToolStripButton b)\n        {\n            TableLayoutPanelCellPosition sourcePos = \n                tableSettings.GetCellPosition(b);\n\n            TableLayoutPanelCellPosition emptyPos = \n                tableSettings.GetCellPosition(this.emptyCellButton);\n\n            return (IsValidDragSource(sourcePos, emptyPos));\n        }\n\n        // This utility method determines if a cell position\n        // is adjacent to the empty cell.\n        internal static bool IsValidDragSource(\n            TableLayoutPanelCellPosition sourcePos, \n            TableLayoutPanelCellPosition emptyPos)\n        {\n            bool returnValue = false;\n\n            // A cell is considered to be a valid drag source if it\n            // is adjacent to the empty cell. Cells that are positioned\n            // on a diagonal are not valid.\n            if (((sourcePos.Column == emptyPos.Column - 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column + 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row - 1)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row + 1)))\n            {\n                returnValue = true;\n            }\n\n            return returnValue;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_ColumnStyles\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_ColumnStyles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnStyles</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of styles used to determine the look and feel of the table layout columns.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TableLayoutColumnStyleCollection ColumnStyles { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutcolumnstylecollection\" data-linktype=\"relative-path\">TableLayoutColumnStyleCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutcolumnstylecollection\" data-linktype=\"relative-path\">TableLayoutColumnStyleCollection</a> that contains the column styles for the layout table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ColumnStyles property to access the style properties of specific columns. The order of the styles in a <a class=\"xref\" href=\"system.windows.forms.tablelayoutcolumnstylecollection\" data-linktype=\"relative-path\">System.Windows.Forms.TableLayoutColumnStyleCollection</a> matches the order of the corresponding columns in the layout table.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_GrowStyle\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_GrowStyle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GrowStyle</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value indicating how the table layout should expand to accommodate new cells when all existing cells are occupied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TableLayoutPanelGrowStyle GrowStyle { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a> values. The default is <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The property value is not valid for the enumeration type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The GrowStyle property determines how the layout engine should add a new cell to a full table. This property can be set to <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a> to indicate that rows should be added, <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a> to indicate that columns should be added, or <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelgrowstyle\" data-linktype=\"relative-path\">TableLayoutPanelGrowStyle</a> to disallow expansion.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_LayoutEngine\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_LayoutEngine_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LayoutEngine</div>        \r\n          </div>\r\n    \r\n            <p>Gets the current table layout engine.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.layout.layoutengine\" data-linktype=\"relative-path\">LayoutEngine</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.forms.layout.layoutengine\" data-linktype=\"relative-path\">LayoutEngine</a> currently being used.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The LayoutEngine property is typically used in two contexts:  </p>\n<ul>\n<li><p>A container that uses a table layout.  </p>\n</li>\n<li><p>A control contained within a table layout container, such as a button contained in a cell of a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_RowCount\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_RowCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowCount</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the maximum number of rows allowed in the table layout.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RowCount { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The maximum number of rows allowed in the table layout. The default is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>The property value is less than 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Setting the RowCount property does not allocate the rows or any backing memory. This allocation occurs when the rows are created.  </p>\n<p> Setting this property causes the table to undergo another layout operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to initialize a <a class=\"xref\" href=\"system.windows.forms.tablelayoutsettings\" data-linktype=\"relative-path\">TableLayoutSettings</a> object for a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a> control. For a full code listing, see <a href=\"../Topic/How%20to:%20Implement%20a%20Custom%20ToolStripRenderer.md\" data-linktype=\"relative-path\">How to: Implement a Custom ToolStripRenderer</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">&#39; The following class implements a sliding-tile puzzle.\n&#39; The GridStrip control is a custom ToolStrip that arranges\n&#39; its ToolStripButton controls in a grid layout. There is \n&#39; one empty cell, into which the user can slide an adjacent\n&#39; tile with a drag-and-drop operation. Tiles that are eligible \n&#39; for moving are highlighted.\nPublic Class GridStrip\n    Inherits ToolStrip\n\n   &#39; The button that is the drag source.\n   Private dragButton As ToolStripButton = Nothing\n   \n   &#39; Settings for the ToolStrip control&#39;s TableLayoutPanel.\n   &#39; This provides access to the cell position of each\n   &#39; ToolStripButton.\n   Private tableSettings As TableLayoutSettings = Nothing\n   \n   &#39; The empty cell. ToolStripButton controls that are\n   &#39; adjacent to this button can be moved to this button&#39;s\n   &#39; cell position.\n   Private emptyCellButton As ToolStripButton = Nothing\n   \n   &#39; The dimensions of each tile. A tile is represented\n   &#39; by a ToolStripButton controls.\n   Private tileSize As New Size(128, 128)\n   \n   &#39; The number of rows in the GridStrip control.\n   Private rows As Integer = 5\n   \n   &#39; The number of columns in the GridStrip control.\n   Private columns As Integer = 5\n   \n   &#39; The one-time initialzation behavior is enforced\n   &#39; with this field. For more information, see the \n   &#39; OnPaint method.\n   Private firstTime As Boolean = False\n   \n   &#39; This is a required by the Windows Forms designer.\n   Private components As System.ComponentModel.IContainer\n   \n   \n   &#39; The default constructor.  \n    Public Sub New()\n        MyBase.New()\n\n        Me.InitializeComponent()\n\n        Me.InitializeTableLayoutSettings()\n    End Sub\n   \n   &#39; This property exposes the empty cell to the \n   &#39; GridStripRenderer class.\n   Friend ReadOnly Property EmptyCell() As ToolStripButton\n      Get\n         Return Me.emptyCellButton\n      End Get\n   End Property\n   \n   \n   &#39; This utility method initializes the TableLayoutPanel \n   &#39; which contains the ToolStripButton controls.\n    Private Sub InitializeTableLayoutSettings()\n\n        &#39; Specify the numbers of rows and columns in the GridStrip control.\n        Me.tableSettings = CType(MyBase.LayoutSettings, TableLayoutSettings)\n        Me.tableSettings.ColumnCount = Me.rows\n        Me.tableSettings.RowCount = Me.columns\n\n        &#39; Create a dummy bitmap with the dimensions of each tile.\n        &#39; The GridStrip control sizes itself based on these dimensions.\n        Dim b As New Bitmap(tileSize.Width, tileSize.Height)\n\n        &#39; Populate the GridStrip control with ToolStripButton controls.\n        Dim i As Integer\n        For i = 0 To (Me.tableSettings.ColumnCount) - 1\n            Dim j As Integer\n            For j = 0 To (Me.tableSettings.RowCount) - 1\n                &#39; Create a new ToolStripButton control.\n                Dim btn As New ToolStripButton()\n                btn.DisplayStyle = ToolStripItemDisplayStyle.Image\n                btn.Image = b\n                btn.ImageAlign = ContentAlignment.MiddleCenter\n                btn.ImageScaling = ToolStripItemImageScaling.None\n                btn.Margin = System.Windows.Forms.Padding.Empty\n                btn.Padding = System.Windows.Forms.Padding.Empty\n\n                &#39; Add the new ToolStripButton control to the GridStrip.\n                Me.Items.Add(btn)\n\n                &#39; Set the cell position of the ToolStripButton control.\n                Dim cellPos As New TableLayoutPanelCellPosition(i, j)\n                Me.tableSettings.SetCellPosition(btn, cellPos)\n\n                &#39; If this is the ToolStripButton control at cell (0,0),\n                &#39; assign it as the empty cell button.\n                If i = 0 AndAlso j = 0 Then\n                    btn.Text = &quot;Empty Cell&quot;\n                    btn.Image = b\n                    Me.emptyCellButton = btn\n                End If\n            Next j\n        Next i\n    End Sub\n   \n   \n   &#39; This method defines the Paint event behavior.\n   &#39; The GridStripRenderer requires that the GridStrip\n   &#39; be fully layed out when it is renders, so this\n   &#39; initialization code cannot be placed in the\n   &#39; GridStrip constructor. By the time the Paint\n   &#39; event is raised, the control layout has been \n   &#39; completed, so the GridStripRenderer can paint\n   &#39; correctly. This one-time initialization is\n   &#39; implemented with the firstTime field.\n   Protected Overrides Sub OnPaint(e As PaintEventArgs)\n      MyBase.OnPaint(e)\n      \n      If Not Me.firstTime Then\n         Me.Renderer = New GridStripRenderer()\n         \n         &#39; Comment this line to see the unscrambled image.\n         Me.ScrambleButtons()\n         Me.firstTime = True\n      End If\n    End Sub\n   \n   \n   &#39; This utility method changes the ToolStripButton control \n   &#39; positions in the TableLayoutPanel. This scrambles the \n   &#39; buttons to initialize the puzzle.\n   Private Sub ScrambleButtons()\n      Dim i As Integer = 0\n      Dim lastElement As Integer = Me.Items.Count - 1\n      \n      While i &lt;&gt; lastElement AndAlso lastElement - i &gt; 1\n            Dim pos1 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(i))\n         \n            Dim pos2 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(lastElement))\n         \n            Me.tableSettings.SetCellPosition(Me.Items(i), pos2)\n            i += 1\n         \n            Me.tableSettings.SetCellPosition(Me.Items(lastElement), pos1)\n            lastElement -= 1\n      End While\n    End Sub\n   \n   \n   &#39; This method defines the MouseDown event behavior. \n   &#39; If the user has clicked on a valid drag source, \n   &#39; the drag operation starts.\n   Protected Overrides Sub OnMouseDown(mea As MouseEventArgs)\n      MyBase.OnMouseDown(mea)\n      \n        Dim btn As ToolStripButton = CType(Me.GetItemAt(mea.Location), ToolStripButton)\n      \n      If (btn IsNot Nothing) Then\n         If Me.IsValidDragSource(btn) Then\n            Me.dragButton = btn\n         End If\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the MouseMove event behavior. \n   Protected Overrides Sub OnMouseMove(mea As MouseEventArgs)\n      MyBase.OnMouseMove(mea)\n      \n      &#39; Is a drag operation pending?\n      If (Me.dragButton IsNot Nothing) Then\n         &#39; A drag operation is pending. Call DoDragDrop to \n         &#39; determine the disposition of the operation.\n         Dim dropEffect As DragDropEffects = Me.DoDragDrop(New DataObject(Me.dragButton), DragDropEffects.Move)\n      End If\n    End Sub\n   \n   &#39; This method defines the DragOver event behavior. \n   Protected Overrides Sub OnDragOver(dea As DragEventArgs)\n      MyBase.OnDragOver(dea)\n      \n      &#39; Get the ToolStripButton control \n      &#39; at the given mouse position.\n      Dim p As New Point(dea.X, dea.Y)\n      Dim item As ToolStripButton = CType(Me.GetItemAt(Me.PointToClient(p)), ToolStripButton)\n      \n      \n      &#39; If the ToolStripButton control is the empty cell,\n      &#39; indicate that the move operation is valid.\n        If item Is Me.emptyCellButton Then\n            &#39; Set the drag operation to indicate a valid move.\n            dea.Effect = DragDropEffects.Move\n        End If\n    End Sub\n   \n   \n   &#39; This method defines the DragDrop event behavior. \n   Protected Overrides Sub OnDragDrop(dea As DragEventArgs)\n      MyBase.OnDragDrop(dea)\n      \n      &#39; Did a valid move operation occur?\n      If dea.Effect = DragDropEffects.Move Then\n         &#39; The move operation is valid. Adjust the state\n         &#39; of the GridStrip control&#39;s TableLayoutPanel,\n         &#39; by swapping the positions of the source button\n         &#39; and the empty cell button.\n         &#39; Get the cell of the control to move.\n         Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.dragButton)\n         \n         &#39; Get the cell of the emptyCellButton.\n         Dim dropPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n         \n         &#39; Move the control to the empty cell.\n         tableSettings.SetCellPosition(Me.dragButton, dropPos)\n         \n         &#39; Set the position of the empty cell to \n         &#39; that of the previously occupied cell.\n         tableSettings.SetCellPosition(Me.emptyCellButton, sourcePos)\n         \n         &#39; Reset the drag operation.\n         Me.dragButton = Nothing\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the DragLeave event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnDragLeave(e As EventArgs)\n      MyBase.OnDragLeave(e)\n      \n      &#39; Reset the drag operation.\n      Me.dragButton = Nothing\n    End Sub\n   \n   \n   &#39; This method defines the ueryContinueDrag event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnQueryContinueDrag(qcdevent As QueryContinueDragEventArgs)\n      MyBase.OnQueryContinueDrag(qcdevent)\n      \n      &#39; Get the current mouse position, in screen coordinates.\n      Dim mousePos As Point = Me.PointToClient(Control.MousePosition)\n      \n      &#39; If the mouse position is outside the GridStrip control&#39;s\n      &#39; client area, cancel the drag operation. Be sure to\n      &#39; transform the mouse&#39;s screen coordinates to client coordinates. \n      If Not Me.ClientRectangle.Contains(mousePos) Then\n         qcdevent.Action = DragAction.Cancel\n      End If\n    End Sub\n   \n   \n   &#39; This utility method determines if a button\n   &#39; is positioned relative to the empty cell \n   &#39; such that it can be dragged into the empty cell.\n   Overloads Private Function IsValidDragSource(b As ToolStripButton) As Boolean\n      Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(b)\n      \n      Dim emptyPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n      \n        Return IsValidDragSource(sourcePos, emptyPos)\n\n    End Function\n   \n   \n   &#39; This utility method determines if a cell position\n   &#39; is adjacent to the empty cell.\n    Friend Overloads Shared Function IsValidDragSource( _\n    ByVal sourcePos As TableLayoutPanelCellPosition, _\n    ByVal emptyPos As TableLayoutPanelCellPosition) As Boolean\n        Dim returnValue As Boolean = False\n\n        &#39; A cell is considered to be a valid drag source if it\n        &#39; is adjacent to the empty cell. Cells that are positioned\n        &#39; on a diagonal are not valid.\n        If sourcePos.Column = emptyPos.Column - 1 AndAlso sourcePos.Row = emptyPos.Row OrElse _\n        (sourcePos.Column = emptyPos.Column + 1 AndAlso sourcePos.Row = emptyPos.Row) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row - 1) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row + 1) Then\n            returnValue = True\n        End If\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">    // The following class implements a sliding-tile puzzle.\n    // The GridStrip control is a custom ToolStrip that arranges\n    // its ToolStripButton controls in a grid layout. There is \n    // one empty cell, into which the user can slide an adjacent\n    // tile with a drag-and-drop operation. Tiles that are eligible \n    // for moving are highlighted.\n    public class GridStrip : ToolStrip\n    {\n        // The button that is the drag source.\n        private ToolStripButton dragButton = null;\n\n        // Settings for the ToolStrip control&#39;s TableLayoutPanel.\n        // This provides access to the cell position of each\n        // ToolStripButton.\n        private TableLayoutSettings tableSettings = null;\n\n        // The empty cell. ToolStripButton controls that are\n        // adjacent to this button can be moved to this button&#39;s\n        // cell position.\n        private ToolStripButton emptyCellButton = null;\n\n        // The dimensions of each tile. A tile is represented\n        // by a ToolStripButton controls.\n        private Size tileSize = new Size(128, 128);\n\n        // The number of rows in the GridStrip control.\n        private readonly int rows = 5;\n\n        // The number of columns in the GridStrip control.\n        private readonly int columns = 5;\n\n        // The one-time initialzation behavior is enforced\n        // with this field. For more information, see the \n        // OnPaint method.\n        private bool firstTime = false;\n\n        // This is a required by the Windows Forms designer.\n        private System.ComponentModel.IContainer components;\n \n        // The default constructor.  \n        public GridStrip()\n        {\n            this.InitializeComponent();\n\n            this.InitializeTableLayoutSettings();\n        }\n\n        // This property exposes the empty cell to the \n        // GridStripRenderer class.\n        internal ToolStripButton EmptyCell\n        {\n            get\n            {\n                return this.emptyCellButton;\n            }\n        }\n\n        // This utility method initializes the TableLayoutPanel \n        // which contains the ToolStripButton controls.\n        private void InitializeTableLayoutSettings()\n        {\n            // Specify the numbers of rows and columns in the GridStrip control.\n            this.tableSettings = base.LayoutSettings as TableLayoutSettings;\n            this.tableSettings.ColumnCount = this.rows;\n            this.tableSettings.RowCount = this.columns;\n\n            // Create a dummy bitmap with the dimensions of each tile.\n            // The GridStrip control sizes itself based on these dimensions.\n            Bitmap b = new Bitmap(tileSize.Width, tileSize.Height);\n\n            // Populate the GridStrip control with ToolStripButton controls.\n            for (int i = 0; i &lt; this.tableSettings.ColumnCount; i++)\n            {\n                for (int j = 0; j &lt; this.tableSettings.RowCount; j++)\n                {\n                    // Create a new ToolStripButton control.\n                    ToolStripButton btn = new ToolStripButton();\n                    btn.DisplayStyle = ToolStripItemDisplayStyle.Image;\n                    btn.Image = b;\n                    btn.ImageAlign = ContentAlignment.MiddleCenter;\n                    btn.ImageScaling = ToolStripItemImageScaling.None;\n                    btn.Margin = Padding.Empty;\n                    btn.Padding = Padding.Empty;\n\n                    // Add the new ToolStripButton control to the GridStrip.\n                    this.Items.Add(btn);\n\n                    // Set the cell position of the ToolStripButton control.\n                    TableLayoutPanelCellPosition cellPos = new TableLayoutPanelCellPosition(i, j);\n                    this.tableSettings.SetCellPosition(btn, cellPos);\n\n                    // If this is the ToolStripButton control at cell (0,0),\n                    // assign it as the empty cell button.\n                    if( i == 0 &amp;&amp; j == 0 )\n                    {\n                        btn.Text = &quot;Empty Cell&quot;;\n                        btn.Image = b;\n                        this.emptyCellButton = btn;\n                    }\n                }\n            }\n        }\n\n        // This method defines the Paint event behavior.\n        // The GridStripRenderer requires that the GridStrip\n        // be fully layed out when it is renders, so this\n        // initialization code cannot be placed in the\n        // GridStrip constructor. By the time the Paint\n        // event is raised, the control layout has been \n        // completed, so the GridStripRenderer can paint\n        // correctly. This one-time initialization is\n        // implemented with the firstTime field.\n        protected override void OnPaint(PaintEventArgs e)\n        {\n            base.OnPaint(e);\n\n            if (!this.firstTime)\n            {\n                this.Renderer = new GridStripRenderer();\n\n                // Comment this line to see the unscrambled image.\n                this.ScrambleButtons();\n                this.firstTime = true;\n            }\n        }\n\n        // This utility method changes the ToolStripButton control \n        // positions in the TableLayoutPanel. This scrambles the \n        // buttons to initialize the puzzle.\n        private void ScrambleButtons()\n        {\n            int i = 0;\n            int lastElement = this.Items.Count - 1;\n\n            while ( (i != lastElement ) &amp;&amp;\n                    (lastElement - i &gt; 1) )\n            {\n                TableLayoutPanelCellPosition pos1 = \n                    this.tableSettings.GetCellPosition(this.Items[i]);\n\n                TableLayoutPanelCellPosition pos2 = \n                    this.tableSettings.GetCellPosition(this.Items[lastElement]);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[i++], \n                    pos2);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[lastElement--], \n                    pos1);\n            }\n        }\n\n        // This method defines the MouseDown event behavior. \n        // If the user has clicked on a valid drag source, \n        // the drag operation starts.\n        protected override void OnMouseDown(MouseEventArgs mea)\n        {\n            base.OnMouseDown(mea);\n\n            ToolStripButton btn = this.GetItemAt(mea.Location) as ToolStripButton;\n\n            if (btn != null)\n            {\n                if (this.IsValidDragSource(btn))\n                {\n                    this.dragButton = btn;\n                }\n            }\n        }\n\n        // This method defines the MouseMove event behavior. \n        protected override void OnMouseMove(MouseEventArgs mea)\n        {\n            base.OnMouseMove(mea);\n\n            // Is a drag operation pending?\n            if (this.dragButton != null)\n            {\n                // A drag operation is pending. Call DoDragDrop to \n                // determine the disposition of the operation.\n                DragDropEffects dropEffect = this.DoDragDrop(\n                    new DataObject(this.dragButton), \n                    DragDropEffects.Move);\n            }\n        }\n\n        // This method defines the DragOver event behavior. \n        protected override void OnDragOver(DragEventArgs dea)\n        {\n            base.OnDragOver(dea);\n\n            // Get the ToolStripButton control \n            // at the given mouse position.\n            Point p = new Point(dea.X, dea.Y);\n            ToolStripButton item = this.GetItemAt(\n                this.PointToClient(p)) as ToolStripButton;\n\n            // If the ToolStripButton control is the empty cell,\n            // indicate that the move operation is valid.\n            if( item == this.emptyCellButton )\n            {\n                // Set the drag operation to indicate a valid move.\n                dea.Effect = DragDropEffects.Move;\n            }\n        }\n\n        // This method defines the DragDrop event behavior. \n        protected override void OnDragDrop(DragEventArgs dea)\n        {\n            base.OnDragDrop(dea);\n\n            // Did a valid move operation occur?\n            if (dea.Effect == DragDropEffects.Move)\n            {\n                // The move operation is valid. Adjust the state\n                // of the GridStrip control&#39;s TableLayoutPanel,\n                // by swapping the positions of the source button\n                // and the empty cell button.\n\n                // Get the cell of the control to move.\n                TableLayoutPanelCellPosition sourcePos = \n                    tableSettings.GetCellPosition(this.dragButton);\n\n                // Get the cell of the emptyCellButton.\n                TableLayoutPanelCellPosition dropPos = \n                    tableSettings.GetCellPosition(this.emptyCellButton);\n\n                // Move the control to the empty cell.\n                tableSettings.SetCellPosition(this.dragButton, dropPos);\n\n                // Set the position of the empty cell to \n                // that of the previously occupied cell.\n                tableSettings.SetCellPosition(this.emptyCellButton, sourcePos);\n\n                // Reset the drag operation.\n                this.dragButton = null;\n            }\n        }\n\n        // This method defines the DragLeave event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnDragLeave(EventArgs e)\n        {\n            base.OnDragLeave(e);\n\n            // Reset the drag operation.\n            this.dragButton = null;\n        }\n\n        // This method defines the ueryContinueDrag event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)\n        {\n            base.OnQueryContinueDrag(qcdevent);\n\n            // Get the current mouse position, in screen coordinates.\n            Point mousePos = this.PointToClient(Control.MousePosition);\n\n            // If the mouse position is outside the GridStrip control&#39;s\n            // client area, cancel the drag operation. Be sure to\n            // transform the mouse&#39;s screen coordinates to client coordinates. \n            if (!this.ClientRectangle.Contains(mousePos))\n            {\n                qcdevent.Action = DragAction.Cancel;\n            }\n        }\n\n        // This utility method determines if a button\n        // is positioned relative to the empty cell \n        // such that it can be dragged into the empty cell.\n        private bool IsValidDragSource(ToolStripButton b)\n        {\n            TableLayoutPanelCellPosition sourcePos = \n                tableSettings.GetCellPosition(b);\n\n            TableLayoutPanelCellPosition emptyPos = \n                tableSettings.GetCellPosition(this.emptyCellButton);\n\n            return (IsValidDragSource(sourcePos, emptyPos));\n        }\n\n        // This utility method determines if a cell position\n        // is adjacent to the empty cell.\n        internal static bool IsValidDragSource(\n            TableLayoutPanelCellPosition sourcePos, \n            TableLayoutPanelCellPosition emptyPos)\n        {\n            bool returnValue = false;\n\n            // A cell is considered to be a valid drag source if it\n            // is adjacent to the empty cell. Cells that are positioned\n            // on a diagonal are not valid.\n            if (((sourcePos.Column == emptyPos.Column - 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column + 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row - 1)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row + 1)))\n            {\n                returnValue = true;\n            }\n\n            return returnValue;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_RowStyles\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_RowStyles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowStyles</div>        \r\n          </div>\r\n    \r\n            <p>Gets the collection of styles used to determine the look and feel of the table layout rows.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TableLayoutRowStyleCollection RowStyles { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutrowstylecollection\" data-linktype=\"relative-path\">TableLayoutRowStyleCollection</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutrowstylecollection\" data-linktype=\"relative-path\">TableLayoutRowStyleCollection</a> that contains the row styles for the layout table.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the RowStyles property to access the style properties of specific rows. The order of the styles in a <a class=\"xref\" href=\"system.windows.forms.tablelayoutrowstylecollection\" data-linktype=\"relative-path\">System.Windows.Forms.TableLayoutRowStyleCollection</a> matches the order of the corresponding rows in the layout table.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_GetCellPosition_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_GetCellPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetCellPosition(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> that represents the row and the column of the cell.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Forms.TableLayoutPanelCellPosition GetCellPosition (object control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> that represents the cell position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.forms.tablelayoutsettings\" data-linktype=\"relative-path\">TableLayoutSettings</a> object to get a cell position in a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a> control. For a full code listing, see <a href=\"../Topic/How%20to:%20Implement%20a%20Custom%20ToolStripRenderer.md\" data-linktype=\"relative-path\">How to: Implement a Custom ToolStripRenderer</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">&#39; The following class implements a sliding-tile puzzle.\n&#39; The GridStrip control is a custom ToolStrip that arranges\n&#39; its ToolStripButton controls in a grid layout. There is \n&#39; one empty cell, into which the user can slide an adjacent\n&#39; tile with a drag-and-drop operation. Tiles that are eligible \n&#39; for moving are highlighted.\nPublic Class GridStrip\n    Inherits ToolStrip\n\n   &#39; The button that is the drag source.\n   Private dragButton As ToolStripButton = Nothing\n   \n   &#39; Settings for the ToolStrip control&#39;s TableLayoutPanel.\n   &#39; This provides access to the cell position of each\n   &#39; ToolStripButton.\n   Private tableSettings As TableLayoutSettings = Nothing\n   \n   &#39; The empty cell. ToolStripButton controls that are\n   &#39; adjacent to this button can be moved to this button&#39;s\n   &#39; cell position.\n   Private emptyCellButton As ToolStripButton = Nothing\n   \n   &#39; The dimensions of each tile. A tile is represented\n   &#39; by a ToolStripButton controls.\n   Private tileSize As New Size(128, 128)\n   \n   &#39; The number of rows in the GridStrip control.\n   Private rows As Integer = 5\n   \n   &#39; The number of columns in the GridStrip control.\n   Private columns As Integer = 5\n   \n   &#39; The one-time initialzation behavior is enforced\n   &#39; with this field. For more information, see the \n   &#39; OnPaint method.\n   Private firstTime As Boolean = False\n   \n   &#39; This is a required by the Windows Forms designer.\n   Private components As System.ComponentModel.IContainer\n   \n   \n   &#39; The default constructor.  \n    Public Sub New()\n        MyBase.New()\n\n        Me.InitializeComponent()\n\n        Me.InitializeTableLayoutSettings()\n    End Sub\n   \n   &#39; This property exposes the empty cell to the \n   &#39; GridStripRenderer class.\n   Friend ReadOnly Property EmptyCell() As ToolStripButton\n      Get\n         Return Me.emptyCellButton\n      End Get\n   End Property\n   \n   \n   &#39; This utility method initializes the TableLayoutPanel \n   &#39; which contains the ToolStripButton controls.\n    Private Sub InitializeTableLayoutSettings()\n\n        &#39; Specify the numbers of rows and columns in the GridStrip control.\n        Me.tableSettings = CType(MyBase.LayoutSettings, TableLayoutSettings)\n        Me.tableSettings.ColumnCount = Me.rows\n        Me.tableSettings.RowCount = Me.columns\n\n        &#39; Create a dummy bitmap with the dimensions of each tile.\n        &#39; The GridStrip control sizes itself based on these dimensions.\n        Dim b As New Bitmap(tileSize.Width, tileSize.Height)\n\n        &#39; Populate the GridStrip control with ToolStripButton controls.\n        Dim i As Integer\n        For i = 0 To (Me.tableSettings.ColumnCount) - 1\n            Dim j As Integer\n            For j = 0 To (Me.tableSettings.RowCount) - 1\n                &#39; Create a new ToolStripButton control.\n                Dim btn As New ToolStripButton()\n                btn.DisplayStyle = ToolStripItemDisplayStyle.Image\n                btn.Image = b\n                btn.ImageAlign = ContentAlignment.MiddleCenter\n                btn.ImageScaling = ToolStripItemImageScaling.None\n                btn.Margin = System.Windows.Forms.Padding.Empty\n                btn.Padding = System.Windows.Forms.Padding.Empty\n\n                &#39; Add the new ToolStripButton control to the GridStrip.\n                Me.Items.Add(btn)\n\n                &#39; Set the cell position of the ToolStripButton control.\n                Dim cellPos As New TableLayoutPanelCellPosition(i, j)\n                Me.tableSettings.SetCellPosition(btn, cellPos)\n\n                &#39; If this is the ToolStripButton control at cell (0,0),\n                &#39; assign it as the empty cell button.\n                If i = 0 AndAlso j = 0 Then\n                    btn.Text = &quot;Empty Cell&quot;\n                    btn.Image = b\n                    Me.emptyCellButton = btn\n                End If\n            Next j\n        Next i\n    End Sub\n   \n   \n   &#39; This method defines the Paint event behavior.\n   &#39; The GridStripRenderer requires that the GridStrip\n   &#39; be fully layed out when it is renders, so this\n   &#39; initialization code cannot be placed in the\n   &#39; GridStrip constructor. By the time the Paint\n   &#39; event is raised, the control layout has been \n   &#39; completed, so the GridStripRenderer can paint\n   &#39; correctly. This one-time initialization is\n   &#39; implemented with the firstTime field.\n   Protected Overrides Sub OnPaint(e As PaintEventArgs)\n      MyBase.OnPaint(e)\n      \n      If Not Me.firstTime Then\n         Me.Renderer = New GridStripRenderer()\n         \n         &#39; Comment this line to see the unscrambled image.\n         Me.ScrambleButtons()\n         Me.firstTime = True\n      End If\n    End Sub\n   \n   \n   &#39; This utility method changes the ToolStripButton control \n   &#39; positions in the TableLayoutPanel. This scrambles the \n   &#39; buttons to initialize the puzzle.\n   Private Sub ScrambleButtons()\n      Dim i As Integer = 0\n      Dim lastElement As Integer = Me.Items.Count - 1\n      \n      While i &lt;&gt; lastElement AndAlso lastElement - i &gt; 1\n            Dim pos1 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(i))\n         \n            Dim pos2 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(lastElement))\n         \n            Me.tableSettings.SetCellPosition(Me.Items(i), pos2)\n            i += 1\n         \n            Me.tableSettings.SetCellPosition(Me.Items(lastElement), pos1)\n            lastElement -= 1\n      End While\n    End Sub\n   \n   \n   &#39; This method defines the MouseDown event behavior. \n   &#39; If the user has clicked on a valid drag source, \n   &#39; the drag operation starts.\n   Protected Overrides Sub OnMouseDown(mea As MouseEventArgs)\n      MyBase.OnMouseDown(mea)\n      \n        Dim btn As ToolStripButton = CType(Me.GetItemAt(mea.Location), ToolStripButton)\n      \n      If (btn IsNot Nothing) Then\n         If Me.IsValidDragSource(btn) Then\n            Me.dragButton = btn\n         End If\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the MouseMove event behavior. \n   Protected Overrides Sub OnMouseMove(mea As MouseEventArgs)\n      MyBase.OnMouseMove(mea)\n      \n      &#39; Is a drag operation pending?\n      If (Me.dragButton IsNot Nothing) Then\n         &#39; A drag operation is pending. Call DoDragDrop to \n         &#39; determine the disposition of the operation.\n         Dim dropEffect As DragDropEffects = Me.DoDragDrop(New DataObject(Me.dragButton), DragDropEffects.Move)\n      End If\n    End Sub\n   \n   &#39; This method defines the DragOver event behavior. \n   Protected Overrides Sub OnDragOver(dea As DragEventArgs)\n      MyBase.OnDragOver(dea)\n      \n      &#39; Get the ToolStripButton control \n      &#39; at the given mouse position.\n      Dim p As New Point(dea.X, dea.Y)\n      Dim item As ToolStripButton = CType(Me.GetItemAt(Me.PointToClient(p)), ToolStripButton)\n      \n      \n      &#39; If the ToolStripButton control is the empty cell,\n      &#39; indicate that the move operation is valid.\n        If item Is Me.emptyCellButton Then\n            &#39; Set the drag operation to indicate a valid move.\n            dea.Effect = DragDropEffects.Move\n        End If\n    End Sub\n   \n   \n   &#39; This method defines the DragDrop event behavior. \n   Protected Overrides Sub OnDragDrop(dea As DragEventArgs)\n      MyBase.OnDragDrop(dea)\n      \n      &#39; Did a valid move operation occur?\n      If dea.Effect = DragDropEffects.Move Then\n         &#39; The move operation is valid. Adjust the state\n         &#39; of the GridStrip control&#39;s TableLayoutPanel,\n         &#39; by swapping the positions of the source button\n         &#39; and the empty cell button.\n         &#39; Get the cell of the control to move.\n         Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.dragButton)\n         \n         &#39; Get the cell of the emptyCellButton.\n         Dim dropPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n         \n         &#39; Move the control to the empty cell.\n         tableSettings.SetCellPosition(Me.dragButton, dropPos)\n         \n         &#39; Set the position of the empty cell to \n         &#39; that of the previously occupied cell.\n         tableSettings.SetCellPosition(Me.emptyCellButton, sourcePos)\n         \n         &#39; Reset the drag operation.\n         Me.dragButton = Nothing\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the DragLeave event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnDragLeave(e As EventArgs)\n      MyBase.OnDragLeave(e)\n      \n      &#39; Reset the drag operation.\n      Me.dragButton = Nothing\n    End Sub\n   \n   \n   &#39; This method defines the ueryContinueDrag event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnQueryContinueDrag(qcdevent As QueryContinueDragEventArgs)\n      MyBase.OnQueryContinueDrag(qcdevent)\n      \n      &#39; Get the current mouse position, in screen coordinates.\n      Dim mousePos As Point = Me.PointToClient(Control.MousePosition)\n      \n      &#39; If the mouse position is outside the GridStrip control&#39;s\n      &#39; client area, cancel the drag operation. Be sure to\n      &#39; transform the mouse&#39;s screen coordinates to client coordinates. \n      If Not Me.ClientRectangle.Contains(mousePos) Then\n         qcdevent.Action = DragAction.Cancel\n      End If\n    End Sub\n   \n   \n   &#39; This utility method determines if a button\n   &#39; is positioned relative to the empty cell \n   &#39; such that it can be dragged into the empty cell.\n   Overloads Private Function IsValidDragSource(b As ToolStripButton) As Boolean\n      Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(b)\n      \n      Dim emptyPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n      \n        Return IsValidDragSource(sourcePos, emptyPos)\n\n    End Function\n   \n   \n   &#39; This utility method determines if a cell position\n   &#39; is adjacent to the empty cell.\n    Friend Overloads Shared Function IsValidDragSource( _\n    ByVal sourcePos As TableLayoutPanelCellPosition, _\n    ByVal emptyPos As TableLayoutPanelCellPosition) As Boolean\n        Dim returnValue As Boolean = False\n\n        &#39; A cell is considered to be a valid drag source if it\n        &#39; is adjacent to the empty cell. Cells that are positioned\n        &#39; on a diagonal are not valid.\n        If sourcePos.Column = emptyPos.Column - 1 AndAlso sourcePos.Row = emptyPos.Row OrElse _\n        (sourcePos.Column = emptyPos.Column + 1 AndAlso sourcePos.Row = emptyPos.Row) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row - 1) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row + 1) Then\n            returnValue = True\n        End If\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">    // The following class implements a sliding-tile puzzle.\n    // The GridStrip control is a custom ToolStrip that arranges\n    // its ToolStripButton controls in a grid layout. There is \n    // one empty cell, into which the user can slide an adjacent\n    // tile with a drag-and-drop operation. Tiles that are eligible \n    // for moving are highlighted.\n    public class GridStrip : ToolStrip\n    {\n        // The button that is the drag source.\n        private ToolStripButton dragButton = null;\n\n        // Settings for the ToolStrip control&#39;s TableLayoutPanel.\n        // This provides access to the cell position of each\n        // ToolStripButton.\n        private TableLayoutSettings tableSettings = null;\n\n        // The empty cell. ToolStripButton controls that are\n        // adjacent to this button can be moved to this button&#39;s\n        // cell position.\n        private ToolStripButton emptyCellButton = null;\n\n        // The dimensions of each tile. A tile is represented\n        // by a ToolStripButton controls.\n        private Size tileSize = new Size(128, 128);\n\n        // The number of rows in the GridStrip control.\n        private readonly int rows = 5;\n\n        // The number of columns in the GridStrip control.\n        private readonly int columns = 5;\n\n        // The one-time initialzation behavior is enforced\n        // with this field. For more information, see the \n        // OnPaint method.\n        private bool firstTime = false;\n\n        // This is a required by the Windows Forms designer.\n        private System.ComponentModel.IContainer components;\n \n        // The default constructor.  \n        public GridStrip()\n        {\n            this.InitializeComponent();\n\n            this.InitializeTableLayoutSettings();\n        }\n\n        // This property exposes the empty cell to the \n        // GridStripRenderer class.\n        internal ToolStripButton EmptyCell\n        {\n            get\n            {\n                return this.emptyCellButton;\n            }\n        }\n\n        // This utility method initializes the TableLayoutPanel \n        // which contains the ToolStripButton controls.\n        private void InitializeTableLayoutSettings()\n        {\n            // Specify the numbers of rows and columns in the GridStrip control.\n            this.tableSettings = base.LayoutSettings as TableLayoutSettings;\n            this.tableSettings.ColumnCount = this.rows;\n            this.tableSettings.RowCount = this.columns;\n\n            // Create a dummy bitmap with the dimensions of each tile.\n            // The GridStrip control sizes itself based on these dimensions.\n            Bitmap b = new Bitmap(tileSize.Width, tileSize.Height);\n\n            // Populate the GridStrip control with ToolStripButton controls.\n            for (int i = 0; i &lt; this.tableSettings.ColumnCount; i++)\n            {\n                for (int j = 0; j &lt; this.tableSettings.RowCount; j++)\n                {\n                    // Create a new ToolStripButton control.\n                    ToolStripButton btn = new ToolStripButton();\n                    btn.DisplayStyle = ToolStripItemDisplayStyle.Image;\n                    btn.Image = b;\n                    btn.ImageAlign = ContentAlignment.MiddleCenter;\n                    btn.ImageScaling = ToolStripItemImageScaling.None;\n                    btn.Margin = Padding.Empty;\n                    btn.Padding = Padding.Empty;\n\n                    // Add the new ToolStripButton control to the GridStrip.\n                    this.Items.Add(btn);\n\n                    // Set the cell position of the ToolStripButton control.\n                    TableLayoutPanelCellPosition cellPos = new TableLayoutPanelCellPosition(i, j);\n                    this.tableSettings.SetCellPosition(btn, cellPos);\n\n                    // If this is the ToolStripButton control at cell (0,0),\n                    // assign it as the empty cell button.\n                    if( i == 0 &amp;&amp; j == 0 )\n                    {\n                        btn.Text = &quot;Empty Cell&quot;;\n                        btn.Image = b;\n                        this.emptyCellButton = btn;\n                    }\n                }\n            }\n        }\n\n        // This method defines the Paint event behavior.\n        // The GridStripRenderer requires that the GridStrip\n        // be fully layed out when it is renders, so this\n        // initialization code cannot be placed in the\n        // GridStrip constructor. By the time the Paint\n        // event is raised, the control layout has been \n        // completed, so the GridStripRenderer can paint\n        // correctly. This one-time initialization is\n        // implemented with the firstTime field.\n        protected override void OnPaint(PaintEventArgs e)\n        {\n            base.OnPaint(e);\n\n            if (!this.firstTime)\n            {\n                this.Renderer = new GridStripRenderer();\n\n                // Comment this line to see the unscrambled image.\n                this.ScrambleButtons();\n                this.firstTime = true;\n            }\n        }\n\n        // This utility method changes the ToolStripButton control \n        // positions in the TableLayoutPanel. This scrambles the \n        // buttons to initialize the puzzle.\n        private void ScrambleButtons()\n        {\n            int i = 0;\n            int lastElement = this.Items.Count - 1;\n\n            while ( (i != lastElement ) &amp;&amp;\n                    (lastElement - i &gt; 1) )\n            {\n                TableLayoutPanelCellPosition pos1 = \n                    this.tableSettings.GetCellPosition(this.Items[i]);\n\n                TableLayoutPanelCellPosition pos2 = \n                    this.tableSettings.GetCellPosition(this.Items[lastElement]);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[i++], \n                    pos2);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[lastElement--], \n                    pos1);\n            }\n        }\n\n        // This method defines the MouseDown event behavior. \n        // If the user has clicked on a valid drag source, \n        // the drag operation starts.\n        protected override void OnMouseDown(MouseEventArgs mea)\n        {\n            base.OnMouseDown(mea);\n\n            ToolStripButton btn = this.GetItemAt(mea.Location) as ToolStripButton;\n\n            if (btn != null)\n            {\n                if (this.IsValidDragSource(btn))\n                {\n                    this.dragButton = btn;\n                }\n            }\n        }\n\n        // This method defines the MouseMove event behavior. \n        protected override void OnMouseMove(MouseEventArgs mea)\n        {\n            base.OnMouseMove(mea);\n\n            // Is a drag operation pending?\n            if (this.dragButton != null)\n            {\n                // A drag operation is pending. Call DoDragDrop to \n                // determine the disposition of the operation.\n                DragDropEffects dropEffect = this.DoDragDrop(\n                    new DataObject(this.dragButton), \n                    DragDropEffects.Move);\n            }\n        }\n\n        // This method defines the DragOver event behavior. \n        protected override void OnDragOver(DragEventArgs dea)\n        {\n            base.OnDragOver(dea);\n\n            // Get the ToolStripButton control \n            // at the given mouse position.\n            Point p = new Point(dea.X, dea.Y);\n            ToolStripButton item = this.GetItemAt(\n                this.PointToClient(p)) as ToolStripButton;\n\n            // If the ToolStripButton control is the empty cell,\n            // indicate that the move operation is valid.\n            if( item == this.emptyCellButton )\n            {\n                // Set the drag operation to indicate a valid move.\n                dea.Effect = DragDropEffects.Move;\n            }\n        }\n\n        // This method defines the DragDrop event behavior. \n        protected override void OnDragDrop(DragEventArgs dea)\n        {\n            base.OnDragDrop(dea);\n\n            // Did a valid move operation occur?\n            if (dea.Effect == DragDropEffects.Move)\n            {\n                // The move operation is valid. Adjust the state\n                // of the GridStrip control&#39;s TableLayoutPanel,\n                // by swapping the positions of the source button\n                // and the empty cell button.\n\n                // Get the cell of the control to move.\n                TableLayoutPanelCellPosition sourcePos = \n                    tableSettings.GetCellPosition(this.dragButton);\n\n                // Get the cell of the emptyCellButton.\n                TableLayoutPanelCellPosition dropPos = \n                    tableSettings.GetCellPosition(this.emptyCellButton);\n\n                // Move the control to the empty cell.\n                tableSettings.SetCellPosition(this.dragButton, dropPos);\n\n                // Set the position of the empty cell to \n                // that of the previously occupied cell.\n                tableSettings.SetCellPosition(this.emptyCellButton, sourcePos);\n\n                // Reset the drag operation.\n                this.dragButton = null;\n            }\n        }\n\n        // This method defines the DragLeave event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnDragLeave(EventArgs e)\n        {\n            base.OnDragLeave(e);\n\n            // Reset the drag operation.\n            this.dragButton = null;\n        }\n\n        // This method defines the ueryContinueDrag event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)\n        {\n            base.OnQueryContinueDrag(qcdevent);\n\n            // Get the current mouse position, in screen coordinates.\n            Point mousePos = this.PointToClient(Control.MousePosition);\n\n            // If the mouse position is outside the GridStrip control&#39;s\n            // client area, cancel the drag operation. Be sure to\n            // transform the mouse&#39;s screen coordinates to client coordinates. \n            if (!this.ClientRectangle.Contains(mousePos))\n            {\n                qcdevent.Action = DragAction.Cancel;\n            }\n        }\n\n        // This utility method determines if a button\n        // is positioned relative to the empty cell \n        // such that it can be dragged into the empty cell.\n        private bool IsValidDragSource(ToolStripButton b)\n        {\n            TableLayoutPanelCellPosition sourcePos = \n                tableSettings.GetCellPosition(b);\n\n            TableLayoutPanelCellPosition emptyPos = \n                tableSettings.GetCellPosition(this.emptyCellButton);\n\n            return (IsValidDragSource(sourcePos, emptyPos));\n        }\n\n        // This utility method determines if a cell position\n        // is adjacent to the empty cell.\n        internal static bool IsValidDragSource(\n            TableLayoutPanelCellPosition sourcePos, \n            TableLayoutPanelCellPosition emptyPos)\n        {\n            bool returnValue = false;\n\n            // A cell is considered to be a valid drag source if it\n            // is adjacent to the empty cell. Cells that are positioned\n            // on a diagonal are not valid.\n            if (((sourcePos.Column == emptyPos.Column - 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column + 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row - 1)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row + 1)))\n            {\n                returnValue = true;\n            }\n\n            return returnValue;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_GetColumn_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_GetColumn_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetColumn(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the column position of the specified child control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetColumn (object control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The column position of the specified child control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_GetColumnSpan_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_GetColumnSpan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetColumnSpan(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of columns that the cell containing the child control spans.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetColumnSpan (object control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of columns that the cell containing the child control spans.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_GetRow_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_GetRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRow(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the row position of the specified child control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetRow (object control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The row position of the specified child control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_GetRowSpan_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_GetRowSpan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRowSpan(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of rows that the cell containing the child control spans.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int GetRowSpan (object control);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of rows that the cell containing the child control spans.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_SetCellPosition_System_Object_System_Windows_Forms_TableLayoutPanelCellPosition_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_SetCellPosition_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCellPosition(Object,TableLayoutPanelCellPosition)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> that represents the row and the column of the cell.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCellPosition (object control, System.Windows.Forms.TableLayoutPanelCellPosition cellPosition);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cellPosition</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanelcellposition\" data-linktype=\"relative-path\">TableLayoutPanelCellPosition</a> that represents the cell position.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.forms.tablelayoutsettings\" data-linktype=\"relative-path\">TableLayoutSettings</a> object to set a cell position in a <a class=\"xref\" href=\"system.windows.forms.tablelayoutpanel\" data-linktype=\"relative-path\">TableLayoutPanel</a> control. For a full code listing, see <a href=\"../Topic/How%20to:%20Implement%20a%20Custom%20ToolStripRenderer.md\" data-linktype=\"relative-path\">How to: Implement a Custom ToolStripRenderer</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">&#39; The following class implements a sliding-tile puzzle.\n&#39; The GridStrip control is a custom ToolStrip that arranges\n&#39; its ToolStripButton controls in a grid layout. There is \n&#39; one empty cell, into which the user can slide an adjacent\n&#39; tile with a drag-and-drop operation. Tiles that are eligible \n&#39; for moving are highlighted.\nPublic Class GridStrip\n    Inherits ToolStrip\n\n   &#39; The button that is the drag source.\n   Private dragButton As ToolStripButton = Nothing\n   \n   &#39; Settings for the ToolStrip control&#39;s TableLayoutPanel.\n   &#39; This provides access to the cell position of each\n   &#39; ToolStripButton.\n   Private tableSettings As TableLayoutSettings = Nothing\n   \n   &#39; The empty cell. ToolStripButton controls that are\n   &#39; adjacent to this button can be moved to this button&#39;s\n   &#39; cell position.\n   Private emptyCellButton As ToolStripButton = Nothing\n   \n   &#39; The dimensions of each tile. A tile is represented\n   &#39; by a ToolStripButton controls.\n   Private tileSize As New Size(128, 128)\n   \n   &#39; The number of rows in the GridStrip control.\n   Private rows As Integer = 5\n   \n   &#39; The number of columns in the GridStrip control.\n   Private columns As Integer = 5\n   \n   &#39; The one-time initialzation behavior is enforced\n   &#39; with this field. For more information, see the \n   &#39; OnPaint method.\n   Private firstTime As Boolean = False\n   \n   &#39; This is a required by the Windows Forms designer.\n   Private components As System.ComponentModel.IContainer\n   \n   \n   &#39; The default constructor.  \n    Public Sub New()\n        MyBase.New()\n\n        Me.InitializeComponent()\n\n        Me.InitializeTableLayoutSettings()\n    End Sub\n   \n   &#39; This property exposes the empty cell to the \n   &#39; GridStripRenderer class.\n   Friend ReadOnly Property EmptyCell() As ToolStripButton\n      Get\n         Return Me.emptyCellButton\n      End Get\n   End Property\n   \n   \n   &#39; This utility method initializes the TableLayoutPanel \n   &#39; which contains the ToolStripButton controls.\n    Private Sub InitializeTableLayoutSettings()\n\n        &#39; Specify the numbers of rows and columns in the GridStrip control.\n        Me.tableSettings = CType(MyBase.LayoutSettings, TableLayoutSettings)\n        Me.tableSettings.ColumnCount = Me.rows\n        Me.tableSettings.RowCount = Me.columns\n\n        &#39; Create a dummy bitmap with the dimensions of each tile.\n        &#39; The GridStrip control sizes itself based on these dimensions.\n        Dim b As New Bitmap(tileSize.Width, tileSize.Height)\n\n        &#39; Populate the GridStrip control with ToolStripButton controls.\n        Dim i As Integer\n        For i = 0 To (Me.tableSettings.ColumnCount) - 1\n            Dim j As Integer\n            For j = 0 To (Me.tableSettings.RowCount) - 1\n                &#39; Create a new ToolStripButton control.\n                Dim btn As New ToolStripButton()\n                btn.DisplayStyle = ToolStripItemDisplayStyle.Image\n                btn.Image = b\n                btn.ImageAlign = ContentAlignment.MiddleCenter\n                btn.ImageScaling = ToolStripItemImageScaling.None\n                btn.Margin = System.Windows.Forms.Padding.Empty\n                btn.Padding = System.Windows.Forms.Padding.Empty\n\n                &#39; Add the new ToolStripButton control to the GridStrip.\n                Me.Items.Add(btn)\n\n                &#39; Set the cell position of the ToolStripButton control.\n                Dim cellPos As New TableLayoutPanelCellPosition(i, j)\n                Me.tableSettings.SetCellPosition(btn, cellPos)\n\n                &#39; If this is the ToolStripButton control at cell (0,0),\n                &#39; assign it as the empty cell button.\n                If i = 0 AndAlso j = 0 Then\n                    btn.Text = &quot;Empty Cell&quot;\n                    btn.Image = b\n                    Me.emptyCellButton = btn\n                End If\n            Next j\n        Next i\n    End Sub\n   \n   \n   &#39; This method defines the Paint event behavior.\n   &#39; The GridStripRenderer requires that the GridStrip\n   &#39; be fully layed out when it is renders, so this\n   &#39; initialization code cannot be placed in the\n   &#39; GridStrip constructor. By the time the Paint\n   &#39; event is raised, the control layout has been \n   &#39; completed, so the GridStripRenderer can paint\n   &#39; correctly. This one-time initialization is\n   &#39; implemented with the firstTime field.\n   Protected Overrides Sub OnPaint(e As PaintEventArgs)\n      MyBase.OnPaint(e)\n      \n      If Not Me.firstTime Then\n         Me.Renderer = New GridStripRenderer()\n         \n         &#39; Comment this line to see the unscrambled image.\n         Me.ScrambleButtons()\n         Me.firstTime = True\n      End If\n    End Sub\n   \n   \n   &#39; This utility method changes the ToolStripButton control \n   &#39; positions in the TableLayoutPanel. This scrambles the \n   &#39; buttons to initialize the puzzle.\n   Private Sub ScrambleButtons()\n      Dim i As Integer = 0\n      Dim lastElement As Integer = Me.Items.Count - 1\n      \n      While i &lt;&gt; lastElement AndAlso lastElement - i &gt; 1\n            Dim pos1 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(i))\n         \n            Dim pos2 As TableLayoutPanelCellPosition = _\n            Me.tableSettings.GetCellPosition(Me.Items(lastElement))\n         \n            Me.tableSettings.SetCellPosition(Me.Items(i), pos2)\n            i += 1\n         \n            Me.tableSettings.SetCellPosition(Me.Items(lastElement), pos1)\n            lastElement -= 1\n      End While\n    End Sub\n   \n   \n   &#39; This method defines the MouseDown event behavior. \n   &#39; If the user has clicked on a valid drag source, \n   &#39; the drag operation starts.\n   Protected Overrides Sub OnMouseDown(mea As MouseEventArgs)\n      MyBase.OnMouseDown(mea)\n      \n        Dim btn As ToolStripButton = CType(Me.GetItemAt(mea.Location), ToolStripButton)\n      \n      If (btn IsNot Nothing) Then\n         If Me.IsValidDragSource(btn) Then\n            Me.dragButton = btn\n         End If\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the MouseMove event behavior. \n   Protected Overrides Sub OnMouseMove(mea As MouseEventArgs)\n      MyBase.OnMouseMove(mea)\n      \n      &#39; Is a drag operation pending?\n      If (Me.dragButton IsNot Nothing) Then\n         &#39; A drag operation is pending. Call DoDragDrop to \n         &#39; determine the disposition of the operation.\n         Dim dropEffect As DragDropEffects = Me.DoDragDrop(New DataObject(Me.dragButton), DragDropEffects.Move)\n      End If\n    End Sub\n   \n   &#39; This method defines the DragOver event behavior. \n   Protected Overrides Sub OnDragOver(dea As DragEventArgs)\n      MyBase.OnDragOver(dea)\n      \n      &#39; Get the ToolStripButton control \n      &#39; at the given mouse position.\n      Dim p As New Point(dea.X, dea.Y)\n      Dim item As ToolStripButton = CType(Me.GetItemAt(Me.PointToClient(p)), ToolStripButton)\n      \n      \n      &#39; If the ToolStripButton control is the empty cell,\n      &#39; indicate that the move operation is valid.\n        If item Is Me.emptyCellButton Then\n            &#39; Set the drag operation to indicate a valid move.\n            dea.Effect = DragDropEffects.Move\n        End If\n    End Sub\n   \n   \n   &#39; This method defines the DragDrop event behavior. \n   Protected Overrides Sub OnDragDrop(dea As DragEventArgs)\n      MyBase.OnDragDrop(dea)\n      \n      &#39; Did a valid move operation occur?\n      If dea.Effect = DragDropEffects.Move Then\n         &#39; The move operation is valid. Adjust the state\n         &#39; of the GridStrip control&#39;s TableLayoutPanel,\n         &#39; by swapping the positions of the source button\n         &#39; and the empty cell button.\n         &#39; Get the cell of the control to move.\n         Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.dragButton)\n         \n         &#39; Get the cell of the emptyCellButton.\n         Dim dropPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n         \n         &#39; Move the control to the empty cell.\n         tableSettings.SetCellPosition(Me.dragButton, dropPos)\n         \n         &#39; Set the position of the empty cell to \n         &#39; that of the previously occupied cell.\n         tableSettings.SetCellPosition(Me.emptyCellButton, sourcePos)\n         \n         &#39; Reset the drag operation.\n         Me.dragButton = Nothing\n      End If\n    End Sub\n   \n   \n   &#39; This method defines the DragLeave event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnDragLeave(e As EventArgs)\n      MyBase.OnDragLeave(e)\n      \n      &#39; Reset the drag operation.\n      Me.dragButton = Nothing\n    End Sub\n   \n   \n   &#39; This method defines the ueryContinueDrag event behavior. \n   &#39; If the mouse leaves the client area of the GridStrip\n   &#39; control, the drag operation is canceled.\n   Protected Overrides Sub OnQueryContinueDrag(qcdevent As QueryContinueDragEventArgs)\n      MyBase.OnQueryContinueDrag(qcdevent)\n      \n      &#39; Get the current mouse position, in screen coordinates.\n      Dim mousePos As Point = Me.PointToClient(Control.MousePosition)\n      \n      &#39; If the mouse position is outside the GridStrip control&#39;s\n      &#39; client area, cancel the drag operation. Be sure to\n      &#39; transform the mouse&#39;s screen coordinates to client coordinates. \n      If Not Me.ClientRectangle.Contains(mousePos) Then\n         qcdevent.Action = DragAction.Cancel\n      End If\n    End Sub\n   \n   \n   &#39; This utility method determines if a button\n   &#39; is positioned relative to the empty cell \n   &#39; such that it can be dragged into the empty cell.\n   Overloads Private Function IsValidDragSource(b As ToolStripButton) As Boolean\n      Dim sourcePos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(b)\n      \n      Dim emptyPos As TableLayoutPanelCellPosition = tableSettings.GetCellPosition(Me.emptyCellButton)\n      \n        Return IsValidDragSource(sourcePos, emptyPos)\n\n    End Function\n   \n   \n   &#39; This utility method determines if a cell position\n   &#39; is adjacent to the empty cell.\n    Friend Overloads Shared Function IsValidDragSource( _\n    ByVal sourcePos As TableLayoutPanelCellPosition, _\n    ByVal emptyPos As TableLayoutPanelCellPosition) As Boolean\n        Dim returnValue As Boolean = False\n\n        &#39; A cell is considered to be a valid drag source if it\n        &#39; is adjacent to the empty cell. Cells that are positioned\n        &#39; on a diagonal are not valid.\n        If sourcePos.Column = emptyPos.Column - 1 AndAlso sourcePos.Row = emptyPos.Row OrElse _\n        (sourcePos.Column = emptyPos.Column + 1 AndAlso sourcePos.Row = emptyPos.Row) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row - 1) OrElse _\n        (sourcePos.Column = emptyPos.Column AndAlso sourcePos.Row = emptyPos.Row + 1) Then\n            returnValue = True\n        End If\n\n        Return returnValue\n    End Function\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolStrip.GridStrip#2\">    // The following class implements a sliding-tile puzzle.\n    // The GridStrip control is a custom ToolStrip that arranges\n    // its ToolStripButton controls in a grid layout. There is \n    // one empty cell, into which the user can slide an adjacent\n    // tile with a drag-and-drop operation. Tiles that are eligible \n    // for moving are highlighted.\n    public class GridStrip : ToolStrip\n    {\n        // The button that is the drag source.\n        private ToolStripButton dragButton = null;\n\n        // Settings for the ToolStrip control&#39;s TableLayoutPanel.\n        // This provides access to the cell position of each\n        // ToolStripButton.\n        private TableLayoutSettings tableSettings = null;\n\n        // The empty cell. ToolStripButton controls that are\n        // adjacent to this button can be moved to this button&#39;s\n        // cell position.\n        private ToolStripButton emptyCellButton = null;\n\n        // The dimensions of each tile. A tile is represented\n        // by a ToolStripButton controls.\n        private Size tileSize = new Size(128, 128);\n\n        // The number of rows in the GridStrip control.\n        private readonly int rows = 5;\n\n        // The number of columns in the GridStrip control.\n        private readonly int columns = 5;\n\n        // The one-time initialzation behavior is enforced\n        // with this field. For more information, see the \n        // OnPaint method.\n        private bool firstTime = false;\n\n        // This is a required by the Windows Forms designer.\n        private System.ComponentModel.IContainer components;\n \n        // The default constructor.  \n        public GridStrip()\n        {\n            this.InitializeComponent();\n\n            this.InitializeTableLayoutSettings();\n        }\n\n        // This property exposes the empty cell to the \n        // GridStripRenderer class.\n        internal ToolStripButton EmptyCell\n        {\n            get\n            {\n                return this.emptyCellButton;\n            }\n        }\n\n        // This utility method initializes the TableLayoutPanel \n        // which contains the ToolStripButton controls.\n        private void InitializeTableLayoutSettings()\n        {\n            // Specify the numbers of rows and columns in the GridStrip control.\n            this.tableSettings = base.LayoutSettings as TableLayoutSettings;\n            this.tableSettings.ColumnCount = this.rows;\n            this.tableSettings.RowCount = this.columns;\n\n            // Create a dummy bitmap with the dimensions of each tile.\n            // The GridStrip control sizes itself based on these dimensions.\n            Bitmap b = new Bitmap(tileSize.Width, tileSize.Height);\n\n            // Populate the GridStrip control with ToolStripButton controls.\n            for (int i = 0; i &lt; this.tableSettings.ColumnCount; i++)\n            {\n                for (int j = 0; j &lt; this.tableSettings.RowCount; j++)\n                {\n                    // Create a new ToolStripButton control.\n                    ToolStripButton btn = new ToolStripButton();\n                    btn.DisplayStyle = ToolStripItemDisplayStyle.Image;\n                    btn.Image = b;\n                    btn.ImageAlign = ContentAlignment.MiddleCenter;\n                    btn.ImageScaling = ToolStripItemImageScaling.None;\n                    btn.Margin = Padding.Empty;\n                    btn.Padding = Padding.Empty;\n\n                    // Add the new ToolStripButton control to the GridStrip.\n                    this.Items.Add(btn);\n\n                    // Set the cell position of the ToolStripButton control.\n                    TableLayoutPanelCellPosition cellPos = new TableLayoutPanelCellPosition(i, j);\n                    this.tableSettings.SetCellPosition(btn, cellPos);\n\n                    // If this is the ToolStripButton control at cell (0,0),\n                    // assign it as the empty cell button.\n                    if( i == 0 &amp;&amp; j == 0 )\n                    {\n                        btn.Text = &quot;Empty Cell&quot;;\n                        btn.Image = b;\n                        this.emptyCellButton = btn;\n                    }\n                }\n            }\n        }\n\n        // This method defines the Paint event behavior.\n        // The GridStripRenderer requires that the GridStrip\n        // be fully layed out when it is renders, so this\n        // initialization code cannot be placed in the\n        // GridStrip constructor. By the time the Paint\n        // event is raised, the control layout has been \n        // completed, so the GridStripRenderer can paint\n        // correctly. This one-time initialization is\n        // implemented with the firstTime field.\n        protected override void OnPaint(PaintEventArgs e)\n        {\n            base.OnPaint(e);\n\n            if (!this.firstTime)\n            {\n                this.Renderer = new GridStripRenderer();\n\n                // Comment this line to see the unscrambled image.\n                this.ScrambleButtons();\n                this.firstTime = true;\n            }\n        }\n\n        // This utility method changes the ToolStripButton control \n        // positions in the TableLayoutPanel. This scrambles the \n        // buttons to initialize the puzzle.\n        private void ScrambleButtons()\n        {\n            int i = 0;\n            int lastElement = this.Items.Count - 1;\n\n            while ( (i != lastElement ) &amp;&amp;\n                    (lastElement - i &gt; 1) )\n            {\n                TableLayoutPanelCellPosition pos1 = \n                    this.tableSettings.GetCellPosition(this.Items[i]);\n\n                TableLayoutPanelCellPosition pos2 = \n                    this.tableSettings.GetCellPosition(this.Items[lastElement]);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[i++], \n                    pos2);\n\n                this.tableSettings.SetCellPosition(\n                    this.Items[lastElement--], \n                    pos1);\n            }\n        }\n\n        // This method defines the MouseDown event behavior. \n        // If the user has clicked on a valid drag source, \n        // the drag operation starts.\n        protected override void OnMouseDown(MouseEventArgs mea)\n        {\n            base.OnMouseDown(mea);\n\n            ToolStripButton btn = this.GetItemAt(mea.Location) as ToolStripButton;\n\n            if (btn != null)\n            {\n                if (this.IsValidDragSource(btn))\n                {\n                    this.dragButton = btn;\n                }\n            }\n        }\n\n        // This method defines the MouseMove event behavior. \n        protected override void OnMouseMove(MouseEventArgs mea)\n        {\n            base.OnMouseMove(mea);\n\n            // Is a drag operation pending?\n            if (this.dragButton != null)\n            {\n                // A drag operation is pending. Call DoDragDrop to \n                // determine the disposition of the operation.\n                DragDropEffects dropEffect = this.DoDragDrop(\n                    new DataObject(this.dragButton), \n                    DragDropEffects.Move);\n            }\n        }\n\n        // This method defines the DragOver event behavior. \n        protected override void OnDragOver(DragEventArgs dea)\n        {\n            base.OnDragOver(dea);\n\n            // Get the ToolStripButton control \n            // at the given mouse position.\n            Point p = new Point(dea.X, dea.Y);\n            ToolStripButton item = this.GetItemAt(\n                this.PointToClient(p)) as ToolStripButton;\n\n            // If the ToolStripButton control is the empty cell,\n            // indicate that the move operation is valid.\n            if( item == this.emptyCellButton )\n            {\n                // Set the drag operation to indicate a valid move.\n                dea.Effect = DragDropEffects.Move;\n            }\n        }\n\n        // This method defines the DragDrop event behavior. \n        protected override void OnDragDrop(DragEventArgs dea)\n        {\n            base.OnDragDrop(dea);\n\n            // Did a valid move operation occur?\n            if (dea.Effect == DragDropEffects.Move)\n            {\n                // The move operation is valid. Adjust the state\n                // of the GridStrip control&#39;s TableLayoutPanel,\n                // by swapping the positions of the source button\n                // and the empty cell button.\n\n                // Get the cell of the control to move.\n                TableLayoutPanelCellPosition sourcePos = \n                    tableSettings.GetCellPosition(this.dragButton);\n\n                // Get the cell of the emptyCellButton.\n                TableLayoutPanelCellPosition dropPos = \n                    tableSettings.GetCellPosition(this.emptyCellButton);\n\n                // Move the control to the empty cell.\n                tableSettings.SetCellPosition(this.dragButton, dropPos);\n\n                // Set the position of the empty cell to \n                // that of the previously occupied cell.\n                tableSettings.SetCellPosition(this.emptyCellButton, sourcePos);\n\n                // Reset the drag operation.\n                this.dragButton = null;\n            }\n        }\n\n        // This method defines the DragLeave event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnDragLeave(EventArgs e)\n        {\n            base.OnDragLeave(e);\n\n            // Reset the drag operation.\n            this.dragButton = null;\n        }\n\n        // This method defines the ueryContinueDrag event behavior. \n        // If the mouse leaves the client area of the GridStrip\n        // control, the drag operation is canceled.\n        protected override void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent)\n        {\n            base.OnQueryContinueDrag(qcdevent);\n\n            // Get the current mouse position, in screen coordinates.\n            Point mousePos = this.PointToClient(Control.MousePosition);\n\n            // If the mouse position is outside the GridStrip control&#39;s\n            // client area, cancel the drag operation. Be sure to\n            // transform the mouse&#39;s screen coordinates to client coordinates. \n            if (!this.ClientRectangle.Contains(mousePos))\n            {\n                qcdevent.Action = DragAction.Cancel;\n            }\n        }\n\n        // This utility method determines if a button\n        // is positioned relative to the empty cell \n        // such that it can be dragged into the empty cell.\n        private bool IsValidDragSource(ToolStripButton b)\n        {\n            TableLayoutPanelCellPosition sourcePos = \n                tableSettings.GetCellPosition(b);\n\n            TableLayoutPanelCellPosition emptyPos = \n                tableSettings.GetCellPosition(this.emptyCellButton);\n\n            return (IsValidDragSource(sourcePos, emptyPos));\n        }\n\n        // This utility method determines if a cell position\n        // is adjacent to the empty cell.\n        internal static bool IsValidDragSource(\n            TableLayoutPanelCellPosition sourcePos, \n            TableLayoutPanelCellPosition emptyPos)\n        {\n            bool returnValue = false;\n\n            // A cell is considered to be a valid drag source if it\n            // is adjacent to the empty cell. Cells that are positioned\n            // on a diagonal are not valid.\n            if (((sourcePos.Column == emptyPos.Column - 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column + 1) &amp;&amp; (sourcePos.Row == emptyPos.Row)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row - 1)) ||\n                ((sourcePos.Column == emptyPos.Column) &amp;&amp; (sourcePos.Row == emptyPos.Row + 1)))\n            {\n                returnValue = true;\n            }\n\n            return returnValue;\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_SetColumn_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_SetColumn_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetColumn(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the column position for the specified child control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetColumn (object control, int column);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>column</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column position for the specified child control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>column</code> is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_SetColumnSpan_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_SetColumnSpan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetColumnSpan(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the number of columns that the cell containing the child control spans.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetColumnSpan (object control, int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of columns that the cell containing the child control spans.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_SetRow_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_SetRow_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetRow(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the row position of the specified child control.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetRow (object control, int row);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>row</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The row position of the specified child control.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>row</code> is less than -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_SetRowSpan_System_Object_System_Int32_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_SetRowSpan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetRowSpan(Object,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the number of rows that the cell containing the child control spans.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetRowSpan (object control, int value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>control</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A control contained within a cell.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of rows that the cell containing the child control spans.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>control</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is less than 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Forms_TableLayoutSettings_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Windows_Forms_TableLayoutSettings_System_Runtime_Serialization_ISerializable_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>For a description of this member, see <span class=\"xref\">stem.Runtime.Serialization.ISerializable.GetObjectData*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>si</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to be populated with serialization information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The destination context of the serialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.windows.forms.tablelayoutsettings\" data-linktype=\"relative-path\">TableLayoutSettings</a> instance is cast to an <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.TableLayoutSettings.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.TableLayoutSettings.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.ColumnCount\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.ColumnStyles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.GetCellPosition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.GetColumn\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.GetColumnSpan\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.GetRow\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.GetRowSpan\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.GrowStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.LayoutEngine\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.RowCount\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.RowStyles\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.SetCellPosition\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.SetColumn\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.SetColumnSpan\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.SetRow\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.SetRowSpan\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TableLayoutSettings.ISerializable.GetObjectData\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"1cb9cf50-7db8-16f5-524f-3c3e701d67bf\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Collects the characteristics associated with table layouts.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.TableLayoutSettings\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Forms.TableLayoutSettings.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Forms.TableLayoutSettings.yml","open_to_public_contributors":true,"api_name":["System.Windows.Forms.TableLayoutSettings","System.Windows.Forms.TableLayoutSettings.ColumnCount","System.Windows.Forms.TableLayoutSettings.ColumnStyles","System.Windows.Forms.TableLayoutSettings.GetCellPosition","System.Windows.Forms.TableLayoutSettings.GetColumn","System.Windows.Forms.TableLayoutSettings.GetColumnSpan","System.Windows.Forms.TableLayoutSettings.GetRow","System.Windows.Forms.TableLayoutSettings.GetRowSpan","System.Windows.Forms.TableLayoutSettings.GrowStyle","System.Windows.Forms.TableLayoutSettings.LayoutEngine","System.Windows.Forms.TableLayoutSettings.RowCount","System.Windows.Forms.TableLayoutSettings.RowStyles","System.Windows.Forms.TableLayoutSettings.SetCellPosition","System.Windows.Forms.TableLayoutSettings.SetColumn","System.Windows.Forms.TableLayoutSettings.SetColumnSpan","System.Windows.Forms.TableLayoutSettings.SetRow","System.Windows.Forms.TableLayoutSettings.SetRowSpan","System.Windows.Forms.TableLayoutSettings.ISerializable.GetObjectData"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.TableLayoutSettings","System::Windows::Forms::TableLayoutSettings","System.Windows.Forms.TableLayoutSettings.ColumnCount","System::Windows::Forms::TableLayoutSettings::ColumnCount","System.Windows.Forms.TableLayoutSettings.ColumnStyles","System::Windows::Forms::TableLayoutSettings::ColumnStyles","System.Windows.Forms.TableLayoutSettings.GetCellPosition","System::Windows::Forms::TableLayoutSettings::GetCellPosition","System.Windows.Forms.TableLayoutSettings.GetColumn","System::Windows::Forms::TableLayoutSettings::GetColumn","System.Windows.Forms.TableLayoutSettings.GetColumnSpan","System::Windows::Forms::TableLayoutSettings::GetColumnSpan","System.Windows.Forms.TableLayoutSettings.GetRow","System::Windows::Forms::TableLayoutSettings::GetRow","System.Windows.Forms.TableLayoutSettings.GetRowSpan","System::Windows::Forms::TableLayoutSettings::GetRowSpan","System.Windows.Forms.TableLayoutSettings.GrowStyle","System::Windows::Forms::TableLayoutSettings::GrowStyle","System.Windows.Forms.TableLayoutSettings.LayoutEngine","System::Windows::Forms::TableLayoutSettings::LayoutEngine","System.Windows.Forms.TableLayoutSettings.RowCount","System::Windows::Forms::TableLayoutSettings::RowCount","System.Windows.Forms.TableLayoutSettings.RowStyles","System::Windows::Forms::TableLayoutSettings::RowStyles","System.Windows.Forms.TableLayoutSettings.SetCellPosition","System::Windows::Forms::TableLayoutSettings::SetCellPosition","System.Windows.Forms.TableLayoutSettings.SetColumn","System::Windows::Forms::TableLayoutSettings::SetColumn","System.Windows.Forms.TableLayoutSettings.SetColumnSpan","System::Windows::Forms::TableLayoutSettings::SetColumnSpan","System.Windows.Forms.TableLayoutSettings.SetRow","System::Windows::Forms::TableLayoutSettings::SetRow","System.Windows.Forms.TableLayoutSettings.SetRowSpan","System::Windows::Forms::TableLayoutSettings::SetRowSpan","System.Windows.Forms.TableLayoutSettings.System#Runtime#Serialization#ISerializable#GetObjectData","System::Windows::Forms::TableLayoutSettings::System#Runtime#Serialization#ISerializable#GetObjectData"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"1cb9cf50-7db8-16f5-524f-3c3e701d67bf","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Forms/TableLayoutSettings.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TableLayoutSettings class | Microsoft Docs","_op_ogTitle":"TableLayoutSettings class","description":"Collects the characteristics associated with table layouts.\n","toc_asset_id":"_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.TableLayoutSettings","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.tablelayoutsettings","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.forms.tablelayoutsettings","fileRelativePath":"System.Windows.Forms.TableLayoutSettings.html"},"themesRelativePathToOutputRoot":"_themes/"}