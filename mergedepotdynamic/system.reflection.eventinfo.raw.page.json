{"content":"    \r\n    <h1 id=\"System_Reflection_EventInfo\">\r\n      <span class=\"lang-csharp\">EventInfo</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Discovers the attributes of an event and provides access to event metadata.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">System.Reflection.MemberInfo</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">EventInfo</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_CustomAttributes\" data-linktype=\"relative-path\">CustomAttributes</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_DeclaringType\" data-linktype=\"relative-path\">DeclaringType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributesData\" data-linktype=\"relative-path\">GetCustomAttributesData()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_IsDefined_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MetadataToken\" data-linktype=\"relative-path\">MetadataToken</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Module\" data-linktype=\"relative-path\">Module</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_Name\" data-linktype=\"relative-path\">Name</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Equality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Equality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_op_Inequality_System_Reflection_MemberInfo_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">op_Inequality(MemberInfo,MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_ReflectedType\" data-linktype=\"relative-path\">ReflectedType</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetType\" data-linktype=\"relative-path\">_MemberInfo.GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_MemberInfo.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_System_Runtime_InteropServices__MemberInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the EventInfo class to inspect events and to hook up event handlers, as shown in the example code for the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_AddEventHandler_\" data-linktype=\"relative-path\">AddEventHandler</a> method.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> EventInfo is not intended to be used to raise events. An object raises events as dictated by its internal state.  </p>\n</div>\n<p> Events are used with delegates. An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source. In order to connect to the event source, the event listener adds this delegate to the invocation list on the source. When the event is raised, the invoke method of the event-handler delegate is called. Both multicast and single-cast event notifications are supported. The <code>Add</code> and <code>Remove</code> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.  </p>\n<p> Delegates are object-oriented function pointers. In C or C++, a function pointer is a reference to a method. In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method. Delegates can invoke a method without knowing the class type that declares or inherits the method. Delegates need only know the return type and parameter list of the method.  </p>\n<p> The event model works equally well for single-cast and multicast delegates. When the delegate&#39;s invoke method is called, only a single object will have a method called on it. A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.  </p>\n<p> Calling <a class=\"xref\" href=\"system.reflection.icustomattributeprovider#System_Reflection_ICustomAttributeProvider_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> on <code>EventInfo</code> when the <code>inherit</code> parameter of <code>GetCustomAttributes</code> is <code>true</code> does not walk the type hierarchy. Use <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">System.Attribute</a> to inherit custom attributes.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo__ctor\" data-linktype=\"self-bookmark\">EventInfo()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <code>EventInfo</code> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_AddMethod\" data-linktype=\"self-bookmark\">AddMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the <span class=\"xref\">stem.Reflection.EventInfo.AddEventHandler*</span> method of the event, including non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_Attributes\" data-linktype=\"self-bookmark\">Attributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the attributes for this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_EventHandlerType\" data-linktype=\"self-bookmark\">EventHandlerType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <code>Type</code> object of the underlying event-handler delegate associated with this event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_IsMulticast\" data-linktype=\"self-bookmark\">IsMulticast</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the event is multicast.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_IsSpecialName\" data-linktype=\"self-bookmark\">IsSpecialName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <code>EventInfo</code> has a name with a special meaning.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_MemberType\" data-linktype=\"self-bookmark\">MemberType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is an event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_RaiseMethod\" data-linktype=\"self-bookmark\">RaiseMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the method that is called when the event is raised, including non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_RemoveMethod\" data-linktype=\"self-bookmark\">RemoveMethod</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <code>MethodInfo</code> object for removing a method of the event, including non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_AddEventHandler_System_Object_System_Delegate_\" data-linktype=\"self-bookmark\">AddEventHandler(Object,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an event handler to an event source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetAddMethod\" data-linktype=\"self-bookmark\">GetAddMethod()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method used to add an event handler delegate to the event source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetAddMethod_System_Boolean_\" data-linktype=\"self-bookmark\">GetAddMethod(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, retrieves the <code>MethodInfo</code> object for the <span class=\"xref\">stem.Reflection.EventInfo.AddEventHandler*</span> method of the event, specifying whether to return non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the hash code for this instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetOtherMethods\" data-linktype=\"self-bookmark\">GetOtherMethods()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the public methods that have been associated with an event in metadata using the <code>.other</code> directive.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetOtherMethods_System_Boolean_\" data-linktype=\"self-bookmark\">GetOtherMethods(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the methods that have been associated with the event in metadata using the <code>.other</code> directive, specifying whether to include non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetRaiseMethod\" data-linktype=\"self-bookmark\">GetRaiseMethod()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method that is called when the event is raised.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetRaiseMethod_System_Boolean_\" data-linktype=\"self-bookmark\">GetRaiseMethod(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetRemoveMethod\" data-linktype=\"self-bookmark\">GetRemoveMethod()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the method used to remove an event handler delegate from the event source.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_GetRemoveMethod_System_Boolean_\" data-linktype=\"self-bookmark\">GetRemoveMethod(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>When overridden in a derived class, retrieves the <code>MethodInfo</code> object for removing a method of the event, specifying whether to return non-public methods.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_RemoveEventHandler_System_Object_System_Delegate_\" data-linktype=\"self-bookmark\">RemoveEventHandler(Object,Delegate)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes an event handler from an event source.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_op_Equality_System_Reflection_EventInfo_System_Reflection_EventInfo_\" data-linktype=\"self-bookmark\">op_Equality(EventInfo,EventInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_op_Inequality_System_Reflection_EventInfo_System_Reflection_EventInfo_\" data-linktype=\"self-bookmark\">op_Inequality(EventInfo,EventInfo)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects are not equal.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_EventInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetType\" data-linktype=\"self-bookmark\">_EventInfo.GetType()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <code>T:System.Type</code> object representing the <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"self-bookmark\">_EventInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetTypeInfoCount_System_UInt32__\" data-linktype=\"self-bookmark\">_EventInfo.GetTypeInfoCount(UInt32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"self-bookmark\">_EventInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo__ctor\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EventInfo()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <code>EventInfo</code> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected EventInfo ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_AddMethod\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_AddMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the <span class=\"xref\">stem.Reflection.EventInfo.AddEventHandler*</span> method of the event, including non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo AddMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object for the <span class=\"xref\">stem.Reflection.EventInfo.AddEventHandler*</span> method.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is the equivalent of calling the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetAddMethod_\" data-linktype=\"relative-path\">GetAddMethod</a> with a value of <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_Attributes\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_Attributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Attributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the attributes for this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.EventAttributes Attributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventattributes\" data-linktype=\"relative-path\">EventAttributes</a></div>\r\n                  </div>\r\n                  <p>The read-only attributes for this event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_EventHandlerType\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_EventHandlerType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EventHandlerType</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <code>Type</code> object of the underlying event-handler delegate associated with this event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual Type EventHandlerType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A read-only <code>Type</code> object representing the delegate event handler.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses the EventHandlerType property to discover the delegate type of an event and to display its parameter types.  </p>\n<p> The example defines a delegate named <code>MyDelegate</code> and an event named <code>ev</code> of type <code>MyDelegate</code>. The code in the <code>Main</code> method discovers the event signature by getting the delegate type of the event, getting the <code>Invoke</code> method of the delegate type, and then retrieving and displaying the parameters.  </p>\n<pre><code class=\"lang-cs\" name=\"eventarg#1\">// The following example uses instances of classes in \n// the System.Reflection namespace to discover an event argument type.\nusing System;\nusing System.Reflection;\n\npublic delegate void MyDelegate(int i);\npublic class MainClass \n{\n    public event MyDelegate ev;\n\n    public static void Main() \n    {\n        Type delegateType = typeof(MainClass).GetEvent(&quot;ev&quot;).EventHandlerType;\n        MethodInfo invoke = delegateType.GetMethod(&quot;Invoke&quot;);\n        ParameterInfo[] pars = invoke.GetParameters();\n        foreach (ParameterInfo p in pars) \n        {\n            Console.WriteLine(p.ParameterType);\n        }\n    }\n}\n// The example displays the following output:\n//       System.Int32\n</code></pre><pre><code class=\"lang-cpp\" name=\"eventarg#1\">// The following example uses instances of classes in\n// the System::Reflection namespace to discover an event argument type.\nusing namespace System;\nusing namespace System::Reflection;\n\npublic delegate void MyDelegate( int i );\npublic ref class MainClass\n{\npublic:\n   event MyDelegate^ ev;\n};\n\nint main()\n{\n   Type^ delegateType = MainClass::typeid-&gt;GetEvent( &quot;ev&quot; )-&gt;EventHandlerType;\n   MethodInfo^ invoke = delegateType-&gt;GetMethod( &quot;Invoke&quot; );\n   array&lt;ParameterInfo^&gt;^pars = invoke-&gt;GetParameters();\n   System::Collections::IEnumerator^ myEnum = pars-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      ParameterInfo^ p = safe_cast&lt;ParameterInfo^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( p-&gt;ParameterType );\n   }\n}\n// The example displays the following output:\n//       System.Int32\n</code></pre><pre><code class=\"lang-vb\" name=\"eventarg#1\">Imports System.Reflection\n\nPublic Delegate Sub MyDelegate(ByVal i As Integer)\n\nPublic Class MainClass\n    Public Event ev As MyDelegate\n\n    Public Shared Sub Main()\n        Dim delegateType As Type = GetType(MainClass).GetEvent(&quot;ev&quot;).EventHandlerType\n        Dim invoke As MethodInfo = delegateType.GetMethod(&quot;Invoke&quot;)\n        Dim pars As ParameterInfo() = invoke.GetParameters()\n        For Each p As ParameterInfo In pars\n            Console.WriteLine(p.ParameterType)\n        Next \n    End Sub \nEnd Class \n&#39; The example displays the following output:\n&#39;     System.Int32\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_IsMulticast\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_IsMulticast_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMulticast</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the event is multicast.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool IsMulticast { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the delegate is an instance of a multicast delegate; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The caller does not have the required permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_IsSpecialName\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_IsSpecialName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSpecialName</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <code>EventInfo</code> has a name with a special meaning.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSpecialName { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if this event has a special name; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property determines whether the event&#39;s name has a special meaning. Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_MemberType\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_MemberType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MemberType</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is an event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override System.Reflection.MemberTypes MemberType { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">MemberTypes</a> value indicating that this member is an event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property overrides <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a>. Therefore, when you examine a set of <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> objects â€” for example, the array returned by <a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a> â€” the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_MemberType_\" data-linktype=\"relative-path\">MemberType</a> property returns <a class=\"xref\" href=\"system.reflection.membertypes\" data-linktype=\"relative-path\">System.Reflection.MemberTypes</a> only when a given member is an event.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_RaiseMethod\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_RaiseMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RaiseMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the method that is called when the event is raised, including non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo RaiseMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The method that is called when the event is raised.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is the equivalent of calling the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetRaiseMethod_\" data-linktype=\"relative-path\">GetRaiseMethod</a> with a value of <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_RemoveMethod\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_RemoveMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveMethod</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <code>MethodInfo</code> object for removing a method of the event, including non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo RemoveMethod { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The <code>MethodInfo</code> object for removing a method of the event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is the equivalent of calling the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetRemoveMethod_\" data-linktype=\"relative-path\">GetRemoveMethod</a> with a value of <code>true</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_AddEventHandler_System_Object_System_Delegate_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_AddEventHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AddEventHandler(Object,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an event handler to an event source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AddEventHandler (object target, Delegate handler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Encapsulates a method or methods to be invoked when the event is raised by the target.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The event does not have a public <code>add</code> accessor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The handler that was passed in cannot be used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> The caller does not have access permission to the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The <code>target</code> parameter is <code>null</code> and the event is not static.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> is not declared on the target.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method attempts to add a delegate to synchronize the event on the target object.  </p>\n<p> Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler. All actions are performed using late binding.  </p>\n<p> The code example loads System.dll and creates an instance of the <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">System.Timers.Timer</a> class. The example uses the <a class=\"xref\" href=\"system.type#System_Type_GetEvent_\" data-linktype=\"relative-path\">GetEvent</a> method to get the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event, and the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_EventHandlerType_\" data-linktype=\"relative-path\">EventHandlerType</a> property to get the delegate type for the event.  </p>\n<p> The code example gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the <code>Invoke</code> method of the delegate type, and from the <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> obtains the signature of the delegate. The code example then creates a dynamic assembly with one module containing a single type named <code>Handler</code>, and gives the type a <code>static</code> method (<code>Shared</code> method in Visual Basic) named <code>DynamicHandler</code> that will be used to handle the event.  </p>\n<p> After the dynamic type is created, the code example gets a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> for the finished method and uses it to create a delegate instance. This instance is passed to the AddEventHandler method to hook up the event. The program then pauses to allow the event to be raised.  </p>\n<pre><code class=\"lang-cpp\" name=\"AddEventHandler#1\">// New example (user feedback bug 23592) GlennHa 1/4/06\nusing namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nvoid main()\n{\n    // The type used for this code example is the System::Timers::Timer \n    // class. The Timer object is stored in a variable of type object,\n    // and all code that accesses the Timer does so late-bound. This\n    // is because the scenario in which you might use the AddEVentHander\n    // method is when you load the type after the program is already\n    // compiled, when it is not possible to use the normal syntax to\n    // hook up the event. (Note that there is no &quot;using&quot; statement\n    // for the System::Timers namespace.)\n    //\n    Object^ timer;\n\n    // Get the assembly that contains the Timer type (Sytem.dll). \n    // The following code uses the fact that System.dll has the\n    // same public key as mscorlib.dll to construct a string\n    // representing the full assembly name. \n    String^ fullName = &quot;&quot;;\n    for each (Assembly^ assem in AppDomain::CurrentDomain-&gt;GetAssemblies())\n    {\n        if (assem-&gt;GetName()-&gt;Name == &quot;mscorlib&quot;)\n        {\n            fullName = assem-&gt;FullName;\n        }\n    }\n    Assembly^ sys = Assembly::Load(&quot;System&quot; + fullName-&gt;Substring(fullName-&gt;IndexOf(&quot;,&quot;)));\n\n    // Get a Type object representing the Timer type.\n    Type^ t = sys-&gt;GetType(&quot;System.Timers.Timer&quot;);\n\n    // Create an instance of the Timer type.\n    timer = Activator::CreateInstance(t);\n\n    // Use reflection to get the Elapsed event.\n    EventInfo^ eInfo = t-&gt;GetEvent(&quot;Elapsed&quot;);\n\n    // In order to create a method to handle the Elapsed event,\n    // it is necessary to know the signature of the delegate \n    // used to raise the event. Reflection::Emit can then be\n    // used to construct a dynamic class with a static method\n    // that has the correct signature.\n \n    // Get the event handler type of the Elapsed event. This is\n    // a delegate type, so it has an Invoke method that has\n    // the same signature as the delegate. The following code\n    // creates an array of Type objects that represent the \n    // parameter types of the Invoke method.\n    //\n    Type^ handlerType = eInfo-&gt;EventHandlerType;\n    MethodInfo^ invokeMethod = handlerType-&gt;GetMethod(&quot;Invoke&quot;);\n    array&lt;ParameterInfo^&gt;^ parms = invokeMethod-&gt;GetParameters();\n    array&lt;Type^&gt;^ parmTypes = gcnew array&lt;Type^&gt;(parms-&gt;Length);\n    for (int i = 0; i &lt; parms-&gt;Length; i++)\n    {\n        parmTypes[i] = parms[i]-&gt;ParameterType;\n    }\n\n    // Use Reflection::Emit to create a dynamic assembly that\n    // will be run but not saved. An assembly must have at \n    // least one module, which in this case contains a single\n    // type. The only purpose of this type is to contain the \n    // event handler method. (In the .NET Framework version \n    // 2.0 you can use dynamic methods, which are simpler \n    // because there is no need to create an assembly, module,\n    // or type.)\n    AssemblyName^ aName = gcnew AssemblyName();\n    aName-&gt;Name = &quot;DynamicTypes&quot;;\n    AssemblyBuilder^ ab = AppDomain::CurrentDomain-&gt;DefineDynamicAssembly(aName, AssemblyBuilderAccess::Run);\n    ModuleBuilder^ mb = ab-&gt;DefineDynamicModule(aName-&gt;Name);\n    TypeBuilder^ tb = mb-&gt;DefineType(&quot;Handler&quot;, TypeAttributes::Class | TypeAttributes::Public);\n\n    // Create the method that will handle the event. The name\n    // is not important. The method is static, because there is\n    // no reason to create an instance of the dynamic type.\n    //\n    // The parameter types and return type of the method are\n    // the same as those of the delegate&#39;s Invoke method, \n    // captured earlier.\n    MethodBuilder^ handler = tb-&gt;DefineMethod(&quot;DynamicHandler&quot;, \n        MethodAttributes::Public | MethodAttributes::Static, \n        invokeMethod-&gt;ReturnType, parmTypes);\n\n    // Generate code to handle the event. In this case, the \n    // handler simply prints a text string to the console.\n    //\n    ILGenerator^ il = handler-&gt;GetILGenerator();\n    il-&gt;EmitWriteLine(&quot;Timer&#39;s Elapsed event is raised.&quot;);\n    il-&gt;Emit(OpCodes::Ret);\n\n    // CreateType must be called before the Handler type can\n    // be used. In order to create the delegate that will\n    // handle the event, a MethodInfo from the finished type\n    // is required.\n    Type^ finished = tb-&gt;CreateType();\n    MethodInfo^ eventHandler = finished-&gt;GetMethod(&quot;DynamicHandler&quot;);\n\n    // Use the MethodInfo to create a delegate of the correct \n    // type, and call the AddEventHandler method to hook up \n    // the event.\n    Delegate^ d = Delegate::CreateDelegate(handlerType, eventHandler);\n    eInfo-&gt;AddEventHandler(timer, d);\n\n    // Late-bound calls to the Interval and Enabled property \n    // are required to enable the timer with a one-second\n    // interval.\n    t-&gt;InvokeMember(&quot;Interval&quot;, BindingFlags::SetProperty, nullptr, timer, gcnew array&lt;Object^&gt; { 1000 });\n    t-&gt;InvokeMember(&quot;Enabled&quot;, BindingFlags::SetProperty, nullptr, timer, gcnew array&lt;Object^&gt; { true });\n\n    Console::WriteLine(&quot;Press the Enter key to end the program.&quot;);\n    Console::ReadLine();\n\n    GC::KeepAlive(timer);\n}\n/* This code example produces output similar to the following:\n\nPress the Enter key to end the program.\nTimer&#39;s Elapsed event is raised.\nTimer&#39;s Elapsed event is raised.\nTimer&#39;s Elapsed event is raised.\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"AddEventHandler#1\">// New example (user feedback bug 23592) GlennHa 1/4/06\nusing System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class Example\n{\n    // The type used for this code example is the System.Timers.Timer \n    // class. The Timer object is stored in a variable of type object,\n    // and all code that accesses the Timer does so late-bound. This\n    // is because the scenario in which you might use the AddEVentHander\n    // method is when you load the type after the program is already\n    // compiled, when it is not possible to use the C# += syntax to\n    // hook up the event. (Note that there is no &quot;using&quot; statement\n    // for the System.Timers namespace.)\n    //\n    private static object timer;\n\n    public static void Main()\n    {\n        // Get the assembly that contains the Timer type (Sytem.dll). \n        // The following code uses the fact that System.dll has the\n        // same public key as mscorlib.dll to construct a string\n        // representing the full assembly name. \n        string fullName = &quot;&quot;;\n        foreach (Assembly assem in AppDomain.CurrentDomain.GetAssemblies())\n        {\n            if (assem.GetName().Name == &quot;mscorlib&quot;)\n            {\n                fullName = assem.FullName;\n            }\n        }\n        Assembly sys = Assembly.Load(&quot;System&quot; + fullName.Substring(fullName.IndexOf(&quot;,&quot;)));\n\n        // Get a Type object representing the Timer type.\n        Type t = sys.GetType(&quot;System.Timers.Timer&quot;);\n\n        // Create an instance of the Timer type.\n        timer = Activator.CreateInstance(t);\n\n        // Use reflection to get the Elapsed event.\n        EventInfo eInfo = t.GetEvent(&quot;Elapsed&quot;);\n\n        // In order to create a method to handle the Elapsed event,\n        // it is necessary to know the signature of the delegate \n        // used to raise the event. Reflection.Emit can then be\n        // used to construct a dynamic class with a static method\n        // that has the correct signature.\n \n        // Get the event handler type of the Elapsed event. This is\n        // a delegate type, so it has an Invoke method that has\n        // the same signature as the delegate. The following code\n        // creates an array of Type objects that represent the \n        // parameter types of the Invoke method.\n        //\n        Type handlerType = eInfo.EventHandlerType;\n        MethodInfo invokeMethod = handlerType.GetMethod(&quot;Invoke&quot;);\n        ParameterInfo[] parms = invokeMethod.GetParameters();\n        Type[] parmTypes = new Type[parms.Length];\n        for (int i = 0; i &lt; parms.Length; i++)\n        {\n            parmTypes[i] = parms[i].ParameterType;\n        }\n\n        // Use Reflection.Emit to create a dynamic assembly that\n        // will be run but not saved. An assembly must have at \n        // least one module, which in this case contains a single\n        // type. The only purpose of this type is to contain the \n        // event handler method. (In the .NET Framework version \n        // 2.0 you can use dynamic methods, which are simpler \n        // because there is no need to create an assembly, module,\n        // or type.)\n        AssemblyName aName = new AssemblyName();\n        aName.Name = &quot;DynamicTypes&quot;;\n        AssemblyBuilder ab = AppDomain.CurrentDomain.DefineDynamicAssembly(aName, AssemblyBuilderAccess.Run);\n        ModuleBuilder mb = ab.DefineDynamicModule(aName.Name);\n        TypeBuilder tb = mb.DefineType(&quot;Handler&quot;, TypeAttributes.Class | TypeAttributes.Public);\n\n        // Create the method that will handle the event. The name\n        // is not important. The method is static, because there is\n        // no reason to create an instance of the dynamic type.\n        //\n        // The parameter types and return type of the method are\n        // the same as those of the delegate&#39;s Invoke method, \n        // captured earlier.\n        MethodBuilder handler = tb.DefineMethod(&quot;DynamicHandler&quot;, \n            MethodAttributes.Public | MethodAttributes.Static, \n            invokeMethod.ReturnType, parmTypes);\n\n        // Generate code to handle the event. In this case, the \n        // handler simply prints a text string to the console.\n        //\n        ILGenerator il = handler.GetILGenerator();\n        il.EmitWriteLine(&quot;Timer&#39;s Elapsed event is raised.&quot;);\n        il.Emit(OpCodes.Ret);\n\n        // CreateType must be called before the Handler type can\n        // be used. In order to create the delegate that will\n        // handle the event, a MethodInfo from the finished type\n        // is required.\n        Type finished = tb.CreateType();\n        MethodInfo eventHandler = finished.GetMethod(&quot;DynamicHandler&quot;);\n\n        // Use the MethodInfo to create a delegate of the correct \n        // type, and call the AddEventHandler method to hook up \n        // the event.\n        Delegate d = Delegate.CreateDelegate(handlerType, eventHandler);\n        eInfo.AddEventHandler(timer, d);\n\n        // Late-bound calls to the Interval and Enabled property \n        // are required to enable the timer with a one-second\n        // interval.\n        t.InvokeMember(&quot;Interval&quot;, BindingFlags.SetProperty, null, timer, new Object[] { 1000 });\n        t.InvokeMember(&quot;Enabled&quot;, BindingFlags.SetProperty, null, timer, new Object[] { true });\n\n        Console.WriteLine(&quot;Press the Enter key to end the program.&quot;);\n        Console.ReadLine();\n    }\n}\n/* This code example produces output similar to the following:\n\nPress the Enter key to end the program.\nTimer&#39;s Elapsed event is raised.\nTimer&#39;s Elapsed event is raised.\nTimer&#39;s Elapsed event is raised.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AddEventHandler#1\">&#39; New example (user feedback bug 23592) GlennHa 1/4/06\nImports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class Example\n\n    &#39; The type used for this code example is the System.Timers.Timer \n    &#39; class. The Timer object is stored in a variable of type object,\n    &#39; and all code that accesses the Timer does so late-bound. This\n    &#39; is because the scenario in which you might use the AddEVentHander\n    &#39; method is when you load the type after the program is already\n    &#39; compiled, when it is not possible to use the Visual Basic\n    &#39; AddHandler syntax to hook up the event. (Note that there is no \n    &#39; &quot;Imports&quot; statement for the System.Timers namespace.)\n    &#39;\n    Private Shared timer As Object\n    \n    Public Shared Sub Main() \n        &#39; Get the assembly that contains the Timer type (Sytem.dll). \n        &#39; The following code uses the fact that System.dll has the\n        &#39; same public key as mscorlib.dll to construct a string\n        &#39; representing the full assembly name. \n        Dim fullName As String = &quot;&quot;\n        For Each assem As [Assembly] In AppDomain.CurrentDomain.GetAssemblies()\n            If assem.GetName().Name = &quot;mscorlib&quot; Then\n                fullName = assem.FullName\n            End If\n        Next\n        Dim sys As [Assembly] = [Assembly].Load(&quot;System&quot; &amp; fullName.Substring(fullName.IndexOf(&quot;,&quot;)))\n\n        &#39; Get a Type object representing the Timer type.\n        Dim t As Type = sys.GetType(&quot;System.Timers.Timer&quot;)\n        \n        &#39; Create an instance of the Timer type.\n        timer = Activator.CreateInstance(t)\n        \n        &#39; Use reflection to get the Elapsed event.\n        Dim eInfo As EventInfo = t.GetEvent(&quot;Elapsed&quot;)\n        \n        &#39; In order to create a method to handle the Elapsed event,\n        &#39; it is necessary to know the signature of the delegate \n        &#39; used to raise the event. Reflection.Emit can then be\n        &#39; used to construct a dynamic class with a static method\n        &#39; that has the correct signature.\n        &#39;\n        &#39; Get the event handler type of the Elapsed event. This is\n        &#39; a delegate type, so it has an Invoke method that has\n        &#39; the same signature as the delegate. The following code\n        &#39; creates an array of Type objects that represent the \n        &#39; parameter types of the Invoke method.\n        &#39;\n        Dim handlerType As Type = eInfo.EventHandlerType\n        Dim invokeMethod As MethodInfo = handlerType.GetMethod(&quot;Invoke&quot;)\n        Dim parms As ParameterInfo() = invokeMethod.GetParameters()\n        &#39;\n        &#39; Note that in Visual Basic you must dimension the array one\n        &#39; unit smaller than the source array in order to get an array\n        &#39; of the same size. This is because Visual Basic adds an extra\n        &#39; element to every array, for ease of use.\n        &#39;\n        Dim parmTypes(parms.Length - 1) As Type\n        Dim i As Integer\n        For i = 0 To parms.Length - 1\n            parmTypes(i) = parms(i).ParameterType\n        Next i\n        \n        &#39; Use Reflection.Emit to create a dynamic assembly that\n        &#39; will be run but not saved. An assembly must have at \n        &#39; least one module, which in this case contains a single\n        &#39; type. The only purpose of this type is to contain the \n        &#39; event handler method. (In the .NET Framework version \n        &#39; 2.0 you can use dynamic methods, which are simpler \n        &#39; because there is no need to create an assembly, module,\n        &#39; or type.)\n        Dim aName As New AssemblyName()\n        aName.Name = &quot;DynamicTypes&quot;\n        Dim ab As AssemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(aName, AssemblyBuilderAccess.Run)\n        Dim mb As ModuleBuilder = ab.DefineDynamicModule(aName.Name)\n        Dim tb As TypeBuilder = mb.DefineType(&quot;Handler&quot;, TypeAttributes.Class Or TypeAttributes.Public)\n        \n        &#39; Create the method that will handle the event. The name\n        &#39; is not important. The method is Shared (&quot;static&quot; in \n        &#39; reflection), because there is no reason to create an \n        &#39; instance of the dynamic type &quot;Handler&quot;.\n        &#39;\n        &#39; The parameter types and return type of the method are\n        &#39; the same as those of the delegate&#39;s Invoke method, \n        &#39; captured earlier.\n        Dim handler As MethodBuilder = tb.DefineMethod(&quot;DynamicHandler&quot;, MethodAttributes.Public Or MethodAttributes.Static, invokeMethod.ReturnType, parmTypes)\n        \n        &#39; Generate code to handle the event. In this case, the \n        &#39; handler simply prints a text string to the console.\n        &#39;\n        Dim il As ILGenerator = handler.GetILGenerator()\n        il.EmitWriteLine(&quot;Timer&#39;s Elapsed event is raised.&quot;)\n        il.Emit(OpCodes.Ret)\n        \n        &#39; CreateType must be called before the Handler type can\n        &#39; be used. In order to create the delegate that will\n        &#39; handle the event, a MethodInfo from the finished type\n        &#39; is required.\n        Dim finished As Type = tb.CreateType()\n        Dim eventHandler As MethodInfo = finished.GetMethod(&quot;DynamicHandler&quot;)\n        \n        &#39; Use the MethodInfo to create a delegate of the correct \n        &#39; type, and call the AddEventHandler method to hook up \n        &#39; the event.\n        Dim d As [Delegate] = [Delegate].CreateDelegate(handlerType, eventHandler)\n        eInfo.AddEventHandler(timer, d)\n        \n        &#39; Late-bound calls to the Interval and Enabled property \n        &#39; are required to enable the timer with a one-second\n        &#39; interval.\n        t.InvokeMember(&quot;Interval&quot;, BindingFlags.SetProperty, Nothing, timer, New [Object]() {1000})\n        t.InvokeMember(&quot;Enabled&quot;, BindingFlags.SetProperty, Nothing, timer, New [Object]() {True})\n        \n        Console.WriteLine(&quot;Press the Enter key to end the program.&quot;)\n        Console.ReadLine()\n    \n    End Sub \nEnd Class \n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Press the Enter key to end the program.\n&#39;Timer&#39;s Elapsed event is raised.\n&#39;Timer&#39;s Elapsed event is raised.\n&#39;Timer&#39;s Elapsed event is raised.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object obj);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>obj</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetAddMethod\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetAddMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAddMethod()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method used to add an event handler delegate to the event source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetAddMethod ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing the method used to add an event handler delegate to the event source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><code>GetAddMethod</code> initializes and adds the event subscribe method. The <code>AddEventHandler</code> method is used to add an event-handler delegate to the invocation list of an event source.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Typically, the method has the following signature:  </p>\n<pre><code>add_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetAddMethod_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetAddMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetAddMethod(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, retrieves the <code>MethodInfo</code> object for the <span class=\"xref\">stem.Reflection.EventInfo.AddEventHandler*</span> method of the event, specifying whether to return non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if non-public methods can be returned; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing the method used to add an event handler delegate to the event source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p><code>nonPublic</code> is <code>true</code>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>GetAddMethod</code> initializes and adds the event subscribe method as a Boolean value. The <code>AddEventHandler</code> method is used to add an event-handler delegate to the invocation list of an event source.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>Typically, the method has the following signature:  </p>\n<pre><code>add_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetHashCode\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the hash code for this instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit signed integer hash code.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetOtherMethods\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetOtherMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOtherMethods()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the public methods that have been associated with an event in metadata using the <code>.other</code> directive.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo[] GetOtherMethods ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects representing the public methods that have been associated with the event in metadata by using the <code>.other</code> directive. If there are no such public methods, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The metadata for an event can associate four kinds of methods with the event:  </p>\n<ul>\n<li><p>The <code>.addon</code> directive specifies the method used to add event handlers. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetAddMethod_\" data-linktype=\"relative-path\">GetAddMethod</a> method to retrieve an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> for that method.  </p>\n</li>\n<li><p>The <code>.removeon</code> directive specifies the method used to detach event handlers. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetRemoveMethod_\" data-linktype=\"relative-path\">GetRemoveMethod</a> method to retrieve an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> for that method.  </p>\n</li>\n<li><p>The <code>.fire</code> directive specifies the method used to raise the event. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetRaiseMethod_\" data-linktype=\"relative-path\">GetRaiseMethod</a> method to retrieve an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> for that method.  </p>\n</li>\n<li><p>The <code>.other</code> directive specifies any other methods associated with the event. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetOtherMethods_\" data-linktype=\"relative-path\">GetOtherMethods</a> method to retrieve an array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects for those methods.  </p>\n<p>The methods associated with an event using the <code>.other</code> directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the <code>.other</code> directive.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetOtherMethods_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetOtherMethods_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetOtherMethods(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the methods that have been associated with the event in metadata using the <code>.other</code> directive, specifying whether to include non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to include non-public methods; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a>[]</div>\r\n                  </div>\r\n                  <p>An array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects representing methods that have been associated with an event in metadata by using the <code>.other</code> directive. If there are no methods matching the specification, an empty array is returned.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>This method is not implemented.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The metadata for an event can associate four kinds of methods with the event:  </p>\n<ul>\n<li><p>The <code>.addon</code> directive specifies the method used to add event handlers. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetAddMethod_\" data-linktype=\"relative-path\">GetAddMethod</a> method to retrieve an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> for that method.  </p>\n</li>\n<li><p>The <code>.removeon</code> directive specifies the method used to detach event handlers. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetRemoveMethod_\" data-linktype=\"relative-path\">GetRemoveMethod</a> method to retrieve an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> for this method.  </p>\n</li>\n<li><p>The <code>.fire</code> directive specifies the method used to raise the event. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetRaiseMethod_\" data-linktype=\"relative-path\">GetRaiseMethod</a> method to retrieve an <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> for this method.  </p>\n</li>\n<li><p>The <code>.other</code> directive specifies any other methods associated with the event. Use the <a class=\"xref\" href=\"system.reflection.eventinfo#System_Reflection_EventInfo_GetOtherMethods_\" data-linktype=\"relative-path\">GetOtherMethods</a> method to retrieve an array of <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects for those methods.  </p>\n<p>The methods associated with an event using the <code>.other</code> directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the <code>.other</code> directive.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetRaiseMethod\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetRaiseMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRaiseMethod()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method that is called when the event is raised.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetRaiseMethod ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>The method that is called when the event is raised.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method usually returns <code>null</code> for events declared with the C# <code>event</code> keyword or the Visual Basic <code>Event</code> keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetRaiseMethod_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetRaiseMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRaiseMethod(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if non-public methods can be returned; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <code>MethodInfo</code> object that was called when the event was raised.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p><code>nonPublic</code> is <code>true</code>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method usually returns <code>null</code> for events declared with the C# <code>event</code> keyword or the Visual Basic <code>Event</code> keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetRemoveMethod\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetRemoveMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRemoveMethod()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the method used to remove an event handler delegate from the event source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Reflection.MethodInfo GetRemoveMethod ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing the method used to remove an event handler delegate from the event source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>Typically, the method has the following signature:  </p>\n<pre><code>remove_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_GetRemoveMethod_System_Boolean_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_GetRemoveMethod_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetRemoveMethod(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>When overridden in a derived class, retrieves the <code>MethodInfo</code> object for removing a method of the event, specifying whether to return non-public methods.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>nonPublic</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> if non-public methods can be returned; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object representing the method used to remove an event handler delegate from the event source.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <p><code>nonPublic</code> is <code>true</code>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>Typically, the method has the following signature:  </p>\n<pre><code>remove_&lt;EventName&gt;(&lt;EventHandlerType&gt; handler)  \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_RemoveEventHandler_System_Object_System_Delegate_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_RemoveEventHandler_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveEventHandler(Object,Delegate)</div>        \r\n          </div>\r\n    \r\n            <p>Removes an event handler from an event source.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void RemoveEventHandler (object target, Delegate handler);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>target</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The event source.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>handler</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The delegate to be disassociated from the events raised by target.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The event does not have a public <code>remove</code> accessor.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The handler that was passed in cannot be used.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.targetexception\" data-linktype=\"relative-path\">TargetException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> instead.<br>\n</div>  \n\n<p> The <code>target</code> parameter is <code>null</code> and the event is not static.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> is not declared on the target.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.methodaccessexception\" data-linktype=\"relative-path\">MethodAccessException</a></div>\r\n                  </div>\r\n                  <div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a>, instead.<br>\n</div>  \n\n<p> The caller does not have access permission to the member.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method attempts to remove the delegate that may synchronize this event on the target object.  </p>\n<p> When an event is raised by target, the method or methods encapsulated by <code>handler</code> will no longer be invoked.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_op_Equality_System_Reflection_EventInfo_System_Reflection_EventInfo_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(EventInfo,EventInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Reflection.EventInfo left, System.Reflection.EventInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_op_Inequality_System_Reflection_EventInfo_System_Reflection_EventInfo_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(EventInfo,EventInfo)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether two <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> objects are not equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Reflection.EventInfo left, System.Reflection.EventInfo right);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>left</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first object to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>right</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second object to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>left</code> is not equal to <code>right</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetIDsOfNames_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EventInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgszNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Passed-in array of names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>cNames</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Count of the names to be mapped.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret the names.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rgDispId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetType\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EventInfo.GetType()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <code>T:System.Type</code> object representing the <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">Type _EventInfo.GetType ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </div>\r\n                  <p>A <code>T:System.Type</code> object representing the <a class=\"xref\" href=\"system.reflection.eventinfo\" data-linktype=\"relative-path\">EventInfo</a> type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetTypeInfo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EventInfo.GetTypeInfo(UInt32,UInt32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>iTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type information to return.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale identifier for the type information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>ppTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Receives a pointer to the requested type information object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetTypeInfoCount_System_UInt32__\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_GetTypeInfoCount_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EventInfo.GetTypeInfoCount(UInt32)</div>        \r\n          </div>\r\n    \r\n            <p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EventInfo.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>pcTInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n    \r\n            <a id=\"System_Reflection_EventInfo_System_Runtime_InteropServices__EventInfo_Invoke_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">_EventInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides access to properties and methods exposed by an object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dispIdMember</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Identifies the member.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>riid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Reserved for future use. Must be IID_NULL.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>lcid</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The locale context in which to interpret arguments.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>wFlags</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Flags describing the context of the call.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pDispParams</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pVarResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to the location where the result is to be stored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>pExcepInfo</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Pointer to a structure that contains exception information.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>puArgErr</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The index of the first argument that has an error.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></div>\r\n                  </div>\r\n                  <p>Late-bound access using the COM <code>IDispatch</code> interface is not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.EventInfo.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.EventInfo.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.AddEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.AddMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.EventHandlerType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.GetAddMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.GetOtherMethods\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.GetRaiseMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.GetRemoveMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.IsMulticast\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.IsSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.MemberType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.RaiseMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.RemoveEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo.RemoveMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo._EventInfo.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo._EventInfo.GetType\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo._EventInfo.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo._EventInfo.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventInfo._EventInfo.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4ad98cb1-c24c-be6a-cc08-32c8c2842691\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Discovers the attributes of an event and provides access to event metadata.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Reflection/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.EventInfo\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Reflection.EventInfo.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Reflection.EventInfo.yml","open_to_public_contributors":true,"api_name":["System.Reflection.EventInfo","System.Reflection.EventInfo..ctor","System.Reflection.EventInfo.AddEventHandler","System.Reflection.EventInfo.AddMethod","System.Reflection.EventInfo.Attributes","System.Reflection.EventInfo.Equals","System.Reflection.EventInfo.EventHandlerType","System.Reflection.EventInfo.GetAddMethod","System.Reflection.EventInfo.GetHashCode","System.Reflection.EventInfo.GetOtherMethods","System.Reflection.EventInfo.GetRaiseMethod","System.Reflection.EventInfo.GetRemoveMethod","System.Reflection.EventInfo.IsMulticast","System.Reflection.EventInfo.IsSpecialName","System.Reflection.EventInfo.MemberType","System.Reflection.EventInfo.op_Equality","System.Reflection.EventInfo.op_op_Equality","System.Reflection.EventInfo.op_Inequality","System.Reflection.EventInfo.op_op_Inequality","System.Reflection.EventInfo.RaiseMethod","System.Reflection.EventInfo.RemoveEventHandler","System.Reflection.EventInfo.RemoveMethod","System.Reflection.EventInfo._EventInfo.GetIDsOfNames","System.Reflection.EventInfo._EventInfo.GetType","System.Reflection.EventInfo._EventInfo.GetTypeInfo","System.Reflection.EventInfo._EventInfo.GetTypeInfoCount","System.Reflection.EventInfo._EventInfo.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.EventInfo","System::Reflection::EventInfo","System.Reflection.EventInfo.#ctor","System::Reflection::EventInfo::#ctor","System.Reflection.EventInfo.AddEventHandler","System::Reflection::EventInfo::AddEventHandler","System.Reflection.EventInfo.AddMethod","System::Reflection::EventInfo::AddMethod","System.Reflection.EventInfo.Attributes","System::Reflection::EventInfo::Attributes","System.Reflection.EventInfo.Equals","System::Reflection::EventInfo::Equals","System.Reflection.EventInfo.EventHandlerType","System::Reflection::EventInfo::EventHandlerType","System.Reflection.EventInfo.GetAddMethod","System::Reflection::EventInfo::GetAddMethod","System.Reflection.EventInfo.GetHashCode","System::Reflection::EventInfo::GetHashCode","System.Reflection.EventInfo.GetOtherMethods","System::Reflection::EventInfo::GetOtherMethods","System.Reflection.EventInfo.GetRaiseMethod","System::Reflection::EventInfo::GetRaiseMethod","System.Reflection.EventInfo.GetRemoveMethod","System::Reflection::EventInfo::GetRemoveMethod","System.Reflection.EventInfo.IsMulticast","System::Reflection::EventInfo::IsMulticast","System.Reflection.EventInfo.IsSpecialName","System::Reflection::EventInfo::IsSpecialName","System.Reflection.EventInfo.MemberType","System::Reflection::EventInfo::MemberType","System.Reflection.EventInfo.op_Equality","System::Reflection::EventInfo::op_Equality","System.Reflection.EventInfo.op_Inequality","System::Reflection::EventInfo::op_Inequality","System.Reflection.EventInfo.RaiseMethod","System::Reflection::EventInfo::RaiseMethod","System.Reflection.EventInfo.RemoveEventHandler","System::Reflection::EventInfo::RemoveEventHandler","System.Reflection.EventInfo.RemoveMethod","System::Reflection::EventInfo::RemoveMethod","System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames","System::Reflection::EventInfo::System#Runtime#InteropServices#_EventInfo#GetIDsOfNames","System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType","System::Reflection::EventInfo::System#Runtime#InteropServices#_EventInfo#GetType","System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo","System::Reflection::EventInfo::System#Runtime#InteropServices#_EventInfo#GetTypeInfo","System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount","System::Reflection::EventInfo::System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount","System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke","System::Reflection::EventInfo::System#Runtime#InteropServices#_EventInfo#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4ad98cb1-c24c-be6a-cc08-32c8c2842691","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Reflection/EventInfo.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventInfo class | Microsoft Docs","_op_ogTitle":"EventInfo class","description":"Discovers the attributes of an event and provides access to event metadata.\n","toc_asset_id":"_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.EventInfo","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.eventinfo","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.reflection.eventinfo","fileRelativePath":"System.Reflection.EventInfo.html"},"themesRelativePathToOutputRoot":"_themes/"}