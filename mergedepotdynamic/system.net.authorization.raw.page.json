{"content":"    \r\n    <h1 id=\"System_Net_Authorization\">\r\n      <span class=\"lang-csharp\">Authorization</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains an authentication message for an Internet server.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class Authorization</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Authorization</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> returns an instance of the Authorization class that contains an authentication message. This message is sent to the Internet server to indicate that the client (such as <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> or one of its descendants) is authorized to access the server.  </p>\n<p> The Authorization instance is created by the authentication module that the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> designates to handle the request.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization__ctor_System_String_\" data-linktype=\"self-bookmark\">Authorization(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization__ctor_System_String_System_Boolean_\" data-linktype=\"self-bookmark\">Authorization(String,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message and completion status.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization__ctor_System_String_System_Boolean_System_String_\" data-linktype=\"self-bookmark\">Authorization(String,Boolean,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message, completion status, and connection group identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization_Complete\" data-linktype=\"self-bookmark\">Complete</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the completion status of the authorization.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization_ConnectionGroupId\" data-linktype=\"self-bookmark\">ConnectionGroupId</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a unique identifier for user-specific connections.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization_Message\" data-linktype=\"self-bookmark\">Message</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the message returned to the server in response to an authentication challenge.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization_MutuallyAuthenticated\" data-linktype=\"self-bookmark\">MutuallyAuthenticated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether mutual authentication occurred.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Authorization_ProtectionRealm\" data-linktype=\"self-bookmark\">ProtectionRealm</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the prefix for Uniform Resource Identifiers (URIs) that can be authenticated with the <span class=\"xref\">stem.Net.Authorization.Message*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Net_Authorization__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authorization(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Authorization (string token);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>token</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encrypted authorization message expected by the server.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance is created with the <a class=\"xref\" href=\"system.net.authorization#System_Net_Authorization_Message_\" data-linktype=\"relative-path\">Message</a> property set to <code>token</code> and the <a class=\"xref\" href=\"system.net.authorization#System_Net_Authorization_Complete_\" data-linktype=\"relative-path\">Complete</a> property set to <code>true</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to create an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> object. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#3\">    // Authenticate is the core method for this custom authentication.\n    // When an Internet resource requests authentication, the WebRequest.GetResponse \n    // method calls the AuthenticationManager.Authenticate method. This method, in \n    // turn, calls the Authenticate method on each of the registered authentication\n    // modules, in the order in which they were registered. When the authentication is \n    // complete an Authorization object is returned to the WebRequest.\n    public Authorization Authenticate(String challenge, WebRequest request, ICredentials credentials) \n    {\n      Encoding ASCII = Encoding.ASCII;        \n\n      // Get the username and password from the credentials\n      NetworkCredential MyCreds = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;);        \n\n      if (PreAuthenticate(request, credentials) == null)\n        Console.WriteLine(&quot;<br> Pre-authentication is not allowed.&quot;);\n      else\n        Console.WriteLine(&quot;<br> Pre-authentication is allowed.&quot;);\n\n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge(challenge, MyCreds.Domain);\n\n      if (!challengeOk)\n        return null;\n\n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate the username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n      // authorization.\n      string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n      string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n      // Create an Authorization object using the encoded authorization above.\n      Authorization resourceAuthorization = new Authorization(BasicToken);\n\n      // Get the Message property, which contains the authorization string that the \n      // client returns to the server when accessing protected resources.\n      Console.WriteLine(&quot;<br> Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n      // Get the Complete property, which is set to true when the authentication process \n      // between the client and the server is finished.\n      Console.WriteLine(&quot;<br> Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n\n      Console.WriteLine(&quot;<br> Authorization ConnectionGroupId:{0}&quot;,resourceAuthorization.ConnectionGroupId);\n\n\n      return resourceAuthorization;\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#3\">   // Authenticate is the core method for this custom authentication.\n   // When an internet resource requests authentication, the WebRequest::GetResponse\n   // method calls the AuthenticationManager::Authenticate method. This method, in\n   // turn, calls the Authenticate method on each of the registered authentication\n   // modules, in the order they were registered. When the authentication is\n   // complete an Authorization object is returned to the WebRequest, as\n   // shown by this routine&#39;s retun type.\n   virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n   {\n      Encoding^ ASCII = Encoding::ASCII;\n      \n      // Get the username and password from the credentials\n      NetworkCredential^ MyCreds = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;Basic&quot; );\n      if ( PreAuthenticate( request, credentials ) == nullptr )\n            Console::WriteLine( &quot;<br> Pre-authentication is not allowed.&quot; );\n      else\n            Console::WriteLine( &quot;<br> Pre-authentication is allowed.&quot; );\n\n      \n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge( challenge, MyCreds-&gt;Domain );\n      if (  !challengeOk )\n            return nullptr;\n\n      \n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;<br> Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;<br> Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n      Console::WriteLine( &quot;<br> Authorization ConnectionGroupId: {0}&quot;, resourceAuthorization-&gt;ConnectionGroupId );\n      return resourceAuthorization;\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#3\">      &#39; Authenticate is the core method for this custom authentication.\n      &#39; When an Internet resource requests authentication, the WebRequest.GetResponse \n      &#39; method calls the AuthenticationManager.Authenticate method. This method, in \n      &#39; turn, calls the Authenticate method on each of the registered authentication\n      &#39; modules, in the order in which they were registered. When the authentication is \n      &#39; complete an Authorization object is returned to the WebRequest.\n      Public Function Authenticate(ByVal challenge As String, ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n          Implements IAuthenticationModule.Authenticate\n\n\n        Dim ASCII As Encoding = Encoding.ASCII\n\n        &#39; Get the username and password from the credentials\n        Dim MyCreds As NetworkCredential = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;)\n\n        If PreAuthenticate(request, credentials) Is Nothing Then\n          Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is not allowed.&quot;)\n        Else\n          Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is allowed.&quot;)\n        End If\n        &#39; Verify that the challenge satisfies the authorization requirements.\n        Dim challengeOk As Boolean = checkChallenge(challenge, MyCreds.Domain)\n\n        If Not challengeOk Then\n          Return Nothing\n        End If\n\n        &#39; Create the encrypted string according to the Basic authentication format as\n        &#39; follows:\n        &#39; a)Concatenate the username and password separated by colon;\n        &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n        &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n        &#39; authorization.\n        Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n        Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n        &#39; Create an Authorization object using the encoded authorization above.\n        Dim resourceAuthorization As New Authorization(BasicToken)\n\n        &#39; Get the Message property, which contains the authorization string that the \n        &#39; client returns to the server when accessing protected resources.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n        &#39; Get the Complete property, which is set to true when the authentication process \n        &#39; between the client and the server is finished.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n\n\n        Return resourceAuthorization\n      End Function &#39;Authenticate\n    End Class &#39;CustomBasic \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization__ctor_System_String_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Authorization__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authorization(String,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message and completion status.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Authorization (string token, bool finished);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>token</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encrypted authorization message expected by the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>finished</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The completion status of the authorization attempt. <code>true</code> if the authorization attempt is complete; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance is created with the <a class=\"xref\" href=\"system.net.authorization#System_Net_Authorization_Message_\" data-linktype=\"relative-path\">Message</a> property set to <code>token</code> and the <a class=\"xref\" href=\"system.net.authorization#System_Net_Authorization_Complete_\" data-linktype=\"relative-path\">Complete</a> property set to <code>finished</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message and completion status.  </p>\n<pre><code class=\"lang-cpp\" name=\"Authorization_ProtectionRealm#1\">   virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n   {\n      try\n      {\n         String^ message;\n\n         // Check if Challenge String* was raised by a site which requires &#39;CloneBasic&#39; authentication.\n         if ( (challenge == nullptr) || ( !challenge-&gt;StartsWith( &quot;CloneBasic&quot; )) )\n                  return nullptr;\n         NetworkCredential^ myCredentials;\n         if ( dynamic_cast&lt;CredentialCache^&gt;(credentials) == nullptr )\n         {\n            myCredentials = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;CloneBasic&quot; );\n            if ( myCredentials == nullptr )\n                        return nullptr;\n         }\n         else\n                  myCredentials = dynamic_cast&lt;NetworkCredential^&gt;(credentials);\n\n         // Message encryption scheme :\n         //   a)Concatenate username and password seperated by space;\n         //   b)Apply ASCII encoding to obtain a stream of bytes;\n         //   c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message.\n         message = String::Concat( myCredentials-&gt;UserName, &quot; &quot;, myCredentials-&gt;Password );\n\n         // Apply AsciiEncoding to &#39;message&#39; String* to obtain it as an array of bytes.\n         Encoding^ ascii = Encoding::ASCII;\n         array&lt;Byte&gt;^byteArray = gcnew array&lt;Byte&gt;(ascii-&gt;GetByteCount( message ));\n         byteArray = ascii-&gt;GetBytes( message );\n\n         // Performing Base64 transformation.\n         message = Convert::ToBase64String( byteArray );\n         Authorization^ myAuthorization = gcnew Authorization( String::Concat( &quot;CloneBasic &quot;, message, true ) );\n         array&lt;String^&gt;^protectionRealm = gcnew array&lt;String^&gt;(1);\n         protectionRealm[ 0 ] = request-&gt;RequestUri-&gt;AbsolutePath;\n         myAuthorization-&gt;ProtectionRealm = protectionRealm;\n         return myAuthorization;\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following exception was raised in Authenticate method: {0}&quot;, e-&gt;Message );\n         return nullptr;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Authorization_ProtectionRealm#1\">        Function Authenticate(ByVal challenge As String, ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization Implements IAuthenticationModule.Authenticate\n            Try\n                Dim message As String\n                &#39; Check if Challenge string was raised by a site which requires &#39;CloneBasic&#39; authentication.\n                If challenge Is Nothing Or Not challenge.StartsWith(&quot;CloneBasic&quot;) Then\n                    Return Nothing\n                End If\n                Dim myCredentials As NetworkCredential\n                If TypeOf credentials Is CredentialCache Then\n                    myCredentials = credentials.GetCredential(request.RequestUri, &quot;CloneBasic&quot;)\n                    If myCredentials Is Nothing Then\n                        Return Nothing\n                    End If\n                Else\n                    myCredentials = CType(credentials, NetworkCredential)\n                End If\n                &#39; Message encryption scheme : \n                &#39; a)Concatenate username and password seperated by space\n                &#39; b)Apply ASCII encoding to obtain a stream of bytes\n                &#39; c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message\n                message = myCredentials.UserName + &quot; &quot; + myCredentials.Password\n                &#39; Apply AsciiEncoding to &#39;message&#39; string to obtain it as an array of bytes.\n                Dim ascii As Encoding = Encoding.ASCII\n                Dim byteArray(ascii.GetByteCount(message)) As Byte\n                byteArray = ascii.GetBytes(message)\n\n                &#39; Performing Base64 transformation.\n                message = Convert.ToBase64String(byteArray)\n                Dim myAuthorization As New Authorization(&quot;CloneBasic &quot; + message, True)\n                Dim protectionRealm() As String = {request.RequestUri.AbsolutePath}\n                myAuthorization.ProtectionRealm = protectionRealm\n\n                Return myAuthorization\n            Catch e As Exception\n                Console.WriteLine(&quot;The following exception was raised in Authenticate method:{0}&quot;, e.Message)\n                Return Nothing\n            End Try\n        End Function &#39;Authenticate\n</code></pre><pre><code class=\"lang-cs\" name=\"Authorization_ProtectionRealm#1\">        public Authorization Authenticate( string challenge,WebRequest request,ICredentials credentials)\n        {\n            try\n            {\n                string message;\n                // Check if Challenge string was raised by a site which requires &#39;CloneBasic&#39; authentication.\n                if ((challenge == null) || (!challenge.StartsWith(&quot;CloneBasic&quot;)))\n                    return null; \n                NetworkCredential myCredentials;\n                if (credentials is CredentialCache)\n                {\n                    myCredentials = credentials.GetCredential(request.RequestUri,&quot;CloneBasic&quot;);\n                    if (myCredentials == null)\n                        return null;\n                }\n                else    \n                    myCredentials = (NetworkCredential)credentials;  \n                // Message encryption scheme : \n                //   a)Concatenate username and password seperated by space;\n                //   b)Apply ASCII encoding to obtain a stream of bytes;\n                //   c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message.\n                 \n                message = myCredentials.UserName + &quot; &quot; + myCredentials.Password;\n                // Apply AsciiEncoding to &#39;message&#39; string to obtain it as an array of bytes.\n                Encoding ascii = Encoding.ASCII;\n                byte[] byteArray = new byte[ascii.GetByteCount(message)];\n                byteArray = ascii.GetBytes(message);\n\n                // Performing Base64 transformation.\n                message = Convert.ToBase64String(byteArray);\n                Authorization myAuthorization = new Authorization(&quot;CloneBasic &quot; + message,true);\n                string[] protectionRealm = new string[]{request.RequestUri.AbsolutePath};\n                myAuthorization.ProtectionRealm = protectionRealm;\n\n                return myAuthorization;\n            }\n            catch(Exception e)\n            {\n                Console.WriteLine(&quot;The following exception was raised in Authenticate method:{0}&quot;,e.Message);\n                return null;\n            }\n          }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization__ctor_System_String_System_Boolean_System_String_\">\r\n    \r\n            <a id=\"System_Net_Authorization__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Authorization(String,Boolean,String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message, completion status, and connection group identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Authorization (string token, bool finished, string connectionGroupId);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>token</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The encrypted authorization message expected by the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>finished</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The completion status of the authorization attempt. <code>true</code> if the authorization attempt is complete; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>connectionGroupId</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A unique identifier that can be used to create private client-server connections that are bound only to this authentication scheme.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a new instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class with the specified authorization message, completion status, and connection group identifier.  </p>\n<pre><code class=\"lang-vb\" name=\"Authorization_Constructor3#1\">        Public Function Authenticate(challenge As String, request As WebRequest, credentials As ICredentials) As Authorization Implements IAuthenticationModule.Authenticate\n            Try\n                Dim message As String\n                &#39; Check if Challenge string was raised by a site which requires CloneBasic authentication.\n                If challenge Is Nothing Or Not challenge.StartsWith(&quot;CloneBasic&quot;) Then\n                    Return Nothing\n                End If\n                Dim myCredentials As NetworkCredential\n                If TypeOf credentials Is CredentialCache Then\n                    myCredentials = credentials.GetCredential(request.RequestUri, &quot;CloneBasic&quot;)\n                    If myCredentials Is Nothing Then\n                        Return Nothing\n                    End If\n                Else\n                    myCredentials = CType(credentials, NetworkCredential)\n                End If &#39;Message encryption scheme : \n                &#39;        a)Concatenate username and password seperated by space\n                &#39;        b)Apply ASCII encoding to obtain a stream of bytes\n                &#39;        c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message\n\n                message = myCredentials.UserName + &quot; &quot; + myCredentials.Password\n                &#39;Apply AsciiEncoding to our user name and password to obtain it as an array of bytes\n                Dim asciiEncoding As Encoding = Encoding.ASCII\n                Dim byteArray(asciiEncoding.GetByteCount(message)) As Byte\n                byteArray = asciiEncoding.GetBytes(message)\n\n                &#39;Perform Base64 transform\n                message = Convert.ToBase64String(byteArray)\n                &#39;The following overloaded contructor sets the &#39;Message&#39; property of authorization to the base64 string\n                &#39;         *that  we just formed and it also sets the &#39;Complete&#39; property to true and the connection group id\n                &#39;         *to the domain of the NetworkCredential object\n                Dim myAuthorization As New Authorization(&quot;CloneBasic &quot; + message, True, request.ConnectionGroupName)\n                Return myAuthorization\n            Catch e As Exception\n                Console.WriteLine((&quot;Exception Raised ...:&quot; + e.Message))\n                Return Nothing\n            End Try\n        End Function &#39;Authenticate\n</code></pre><pre><code class=\"lang-cpp\" name=\"Authorization_Constructor3#1\">      virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n      {\n         try\n         {\n            String^ message;\n\n            // Check if Challenge String* was raised by a site which requires CloneBasic authentication.\n            if ( (challenge == nullptr) || ( !challenge-&gt;StartsWith( &quot;CloneBasic&quot; )) )\n                     return nullptr;\n            NetworkCredential^ myCredentials;\n            if ( dynamic_cast&lt;CredentialCache^&gt;(credentials) == nullptr )\n            {\n               myCredentials = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;CloneBasic&quot; );\n               if ( myCredentials == nullptr )\n                           return nullptr;\n            }\n            else\n                     myCredentials = dynamic_cast&lt;NetworkCredential^&gt;(credentials);\n\n            // Message encryption scheme :\n            // a)Concatenate username and password seperated by space;\n            // b)Apply ASCII encoding to obtain a stream of bytes;\n            // c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message.\n            message = String::Concat( myCredentials-&gt;UserName, &quot; &quot;, myCredentials-&gt;Password );\n\n            // Apply AsciiEncoding to our user name and password to obtain it as an array of bytes.\n            Encoding^ asciiEncoding = Encoding::ASCII;\n            array&lt;Byte&gt;^byteArray = gcnew array&lt;Byte&gt;(asciiEncoding-&gt;GetByteCount( message ));\n            byteArray = asciiEncoding-&gt;GetBytes( message );\n\n            // Perform Base64 transform.\n            message = Convert::ToBase64String( byteArray );\n\n            // The following overloaded contructor sets the &#39;Message&#39; property of authorization to the base64 String*;\n            // that  we just formed and it also sets the &#39;Complete&#39; property to true and the connection group id;\n            // to the domain of the NetworkCredential Object*.\n            Authorization^ myAuthorization = gcnew Authorization( String::Concat( &quot;CloneBasic &quot;, message, true, request-&gt;ConnectionGroupName ) );\n            return myAuthorization;\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot;Exception Raised ...: {0}&quot;, e-&gt;Message );\n            return nullptr;\n         }\n      }\n</code></pre><pre><code class=\"lang-cs\" name=\"Authorization_Constructor3#1\">        public Authorization Authenticate( string challenge,WebRequest request,ICredentials credentials)\n        {\n            try\n            {\n                string message;\n                // Check if Challenge string was raised by a site which requires CloneBasic authentication.\n                if ((challenge == null) || (!challenge.StartsWith(&quot;CloneBasic&quot;)))\n                    return null; \n                NetworkCredential myCredentials;\n                if (credentials is CredentialCache)\n                {\n                    myCredentials = credentials.GetCredential(request.RequestUri,&quot;CloneBasic&quot;);\n                    if (myCredentials == null)\n                        return null;\n                }\n                else    \n                    myCredentials = (NetworkCredential)credentials; \n            // Message encryption scheme : \n            // a)Concatenate username and password seperated by space;\n            // b)Apply ASCII encoding to obtain a stream of bytes;\n            // c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message.\n\n                message = myCredentials.UserName + &quot; &quot; + myCredentials.Password;\n                // Apply AsciiEncoding to our user name and password to obtain it as an array of bytes.\n                Encoding asciiEncoding = Encoding.ASCII;\n                byte[] byteArray = new byte[asciiEncoding.GetByteCount(message)];\n                byteArray = asciiEncoding.GetBytes(message);\n\n                // Perform Base64 transform.\n                message = Convert.ToBase64String(byteArray);\n            // The following overloaded contructor sets the &#39;Message&#39; property of authorization to the base64 string;\n            // that  we just formed and it also sets the &#39;Complete&#39; property to true and the connection group id;\n            // to the domain of the NetworkCredential object.\n                Authorization myAuthorization = new Authorization(&quot;CloneBasic &quot; + message,true,request.ConnectionGroupName);\n                return myAuthorization;\n            }\n            catch(Exception e)\n            {\n                    Console.WriteLine(&quot;Exception Raised ...:&quot;+e.Message);    \n                return null;\n            }\n          }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization_Complete\">\r\n    \r\n            <a id=\"System_Net_Authorization_Complete_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Complete</div>        \r\n          </div>\r\n    \r\n            <p>Gets the completion status of the authorization.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Complete { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the authentication process is complete; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Complete property is set to <code>true</code> when the authentication process between the client and the server is finished. Some authentication modules, such as the Kerberos module, use multiple round trips between the client and server to complete the authentication process. To keep the <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> or descendant that initiated the authentication process from interrupting while authorization is taking place, the authentication module sets the Complete property to <code>false</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Complete property to get the completion status of the authorization. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#5\">      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate the username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n      // authorization.\n      string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n      string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n      // Create an Authorization object using the encoded authorization above.\n      Authorization resourceAuthorization = new Authorization(BasicToken);\n\n      // Get the Message property, which contains the authorization string that the \n      // client returns to the server when accessing protected resources.\n      Console.WriteLine(&quot;<br> Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n      // Get the Complete property, which is set to true when the authentication process \n      // between the client and the server is finished.\n      Console.WriteLine(&quot;<br> Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#5\">      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;<br> Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;<br> Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#5\">\n        &#39; Create the encrypted string according to the Basic authentication format as\n        &#39; follows:\n        &#39; a)Concatenate the username and password separated by colon;\n        &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n        &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n        &#39; authorization.\n        Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n        Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n        &#39; Create an Authorization object using the encoded authorization above.\n        Dim resourceAuthorization As New Authorization(BasicToken)\n\n        &#39; Get the Message property, which contains the authorization string that the \n        &#39; client returns to the server when accessing protected resources.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n        &#39; Get the Complete property, which is set to true when the authentication process \n        &#39; between the client and the server is finished.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization_ConnectionGroupId\">\r\n    \r\n            <a id=\"System_Net_Authorization_ConnectionGroupId_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConnectionGroupId</div>        \r\n          </div>\r\n    \r\n            <p>Gets a unique identifier for user-specific connections.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ConnectionGroupId { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A unique string that associates a connection with an authenticating entity.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ConnectionGroupId property is a unique string that associates a connection with a specific authenticating entity. For example, the NTLM authorization module ties the authentication credential information to a specific connection to prevent invalid reuse of the connection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the ConnectionGroupId property to get the group identifier returned by the server. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#5\">      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate the username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n      // authorization.\n      string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n      string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n      // Create an Authorization object using the encoded authorization above.\n      Authorization resourceAuthorization = new Authorization(BasicToken);\n\n      // Get the Message property, which contains the authorization string that the \n      // client returns to the server when accessing protected resources.\n      Console.WriteLine(&quot;<br> Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n      // Get the Complete property, which is set to true when the authentication process \n      // between the client and the server is finished.\n      Console.WriteLine(&quot;<br> Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#5\">      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;<br> Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;<br> Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#5\">\n        &#39; Create the encrypted string according to the Basic authentication format as\n        &#39; follows:\n        &#39; a)Concatenate the username and password separated by colon;\n        &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n        &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n        &#39; authorization.\n        Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n        Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n        &#39; Create an Authorization object using the encoded authorization above.\n        Dim resourceAuthorization As New Authorization(BasicToken)\n\n        &#39; Get the Message property, which contains the authorization string that the \n        &#39; client returns to the server when accessing protected resources.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n        &#39; Get the Complete property, which is set to true when the authentication process \n        &#39; between the client and the server is finished.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization_Message\">\r\n    \r\n            <a id=\"System_Net_Authorization_Message_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Message</div>        \r\n          </div>\r\n    \r\n            <p>Gets the message returned to the server in response to an authentication challenge.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Message { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The message that will be returned to the server in response to an authentication challenge.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The Message property contains the authorization string that the client will return to the server when accessing protected resources. The actual contents of the message are defined by the authentication type the client and server are using. Basic HTTP authentication, for example, uses a different message than Kerberos authentication.  </p>\n<p> When an authentication module supports preauthentication, the Message property is sent with the initial request.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses the Message property to get the message returned to the server in response to an authentication challenge. For a complete example, refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#5\">      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate the username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n      // authorization.\n      string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n      string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n      // Create an Authorization object using the encoded authorization above.\n      Authorization resourceAuthorization = new Authorization(BasicToken);\n\n      // Get the Message property, which contains the authorization string that the \n      // client returns to the server when accessing protected resources.\n      Console.WriteLine(&quot;<br> Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n      // Get the Complete property, which is set to true when the authentication process \n      // between the client and the server is finished.\n      Console.WriteLine(&quot;<br> Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#5\">      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;<br> Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;<br> Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#5\">\n        &#39; Create the encrypted string according to the Basic authentication format as\n        &#39; follows:\n        &#39; a)Concatenate the username and password separated by colon;\n        &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n        &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n        &#39; authorization.\n        Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n        Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n        &#39; Create an Authorization object using the encoded authorization above.\n        Dim resourceAuthorization As New Authorization(BasicToken)\n\n        &#39; Get the Message property, which contains the authorization string that the \n        &#39; client returns to the server when accessing protected resources.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n        &#39; Get the Complete property, which is set to true when the authentication process \n        &#39; between the client and the server is finished.\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n        Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization_MutuallyAuthenticated\">\r\n    \r\n            <a id=\"System_Net_Authorization_MutuallyAuthenticated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MutuallyAuthenticated</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether mutual authentication occurred.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool MutuallyAuthenticated { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if both client and server were authenticated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns <code>false</code> if the authentication has not completed.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Authorization_ProtectionRealm\">\r\n    \r\n            <a id=\"System_Net_Authorization_ProtectionRealm_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ProtectionRealm</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the prefix for Uniform Resource Identifiers (URIs) that can be authenticated with the <span class=\"xref\">stem.Net.Authorization.Message*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] ProtectionRealm { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strings that contains URI prefixes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ProtectionRealm property contains a list of URI prefixes that the <a class=\"xref\" href=\"system.net.authorization#System_Net_Authorization_Message_\" data-linktype=\"relative-path\">Message</a> property can be used to authenticate. <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> and its descendants compare a URI to this list to determine if the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> is valid for a particular URI.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example gets or sets the prefix for URIs that can be authenticated with the <a class=\"xref\" href=\"system.net.authorization#System_Net_Authorization_Message_\" data-linktype=\"relative-path\">Message</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"Authorization_ProtectionRealm#1\">   virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n   {\n      try\n      {\n         String^ message;\n\n         // Check if Challenge String* was raised by a site which requires &#39;CloneBasic&#39; authentication.\n         if ( (challenge == nullptr) || ( !challenge-&gt;StartsWith( &quot;CloneBasic&quot; )) )\n                  return nullptr;\n         NetworkCredential^ myCredentials;\n         if ( dynamic_cast&lt;CredentialCache^&gt;(credentials) == nullptr )\n         {\n            myCredentials = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;CloneBasic&quot; );\n            if ( myCredentials == nullptr )\n                        return nullptr;\n         }\n         else\n                  myCredentials = dynamic_cast&lt;NetworkCredential^&gt;(credentials);\n\n         // Message encryption scheme :\n         //   a)Concatenate username and password seperated by space;\n         //   b)Apply ASCII encoding to obtain a stream of bytes;\n         //   c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message.\n         message = String::Concat( myCredentials-&gt;UserName, &quot; &quot;, myCredentials-&gt;Password );\n\n         // Apply AsciiEncoding to &#39;message&#39; String* to obtain it as an array of bytes.\n         Encoding^ ascii = Encoding::ASCII;\n         array&lt;Byte&gt;^byteArray = gcnew array&lt;Byte&gt;(ascii-&gt;GetByteCount( message ));\n         byteArray = ascii-&gt;GetBytes( message );\n\n         // Performing Base64 transformation.\n         message = Convert::ToBase64String( byteArray );\n         Authorization^ myAuthorization = gcnew Authorization( String::Concat( &quot;CloneBasic &quot;, message, true ) );\n         array&lt;String^&gt;^protectionRealm = gcnew array&lt;String^&gt;(1);\n         protectionRealm[ 0 ] = request-&gt;RequestUri-&gt;AbsolutePath;\n         myAuthorization-&gt;ProtectionRealm = protectionRealm;\n         return myAuthorization;\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( &quot;The following exception was raised in Authenticate method: {0}&quot;, e-&gt;Message );\n         return nullptr;\n      }\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"Authorization_ProtectionRealm#1\">        Function Authenticate(ByVal challenge As String, ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization Implements IAuthenticationModule.Authenticate\n            Try\n                Dim message As String\n                &#39; Check if Challenge string was raised by a site which requires &#39;CloneBasic&#39; authentication.\n                If challenge Is Nothing Or Not challenge.StartsWith(&quot;CloneBasic&quot;) Then\n                    Return Nothing\n                End If\n                Dim myCredentials As NetworkCredential\n                If TypeOf credentials Is CredentialCache Then\n                    myCredentials = credentials.GetCredential(request.RequestUri, &quot;CloneBasic&quot;)\n                    If myCredentials Is Nothing Then\n                        Return Nothing\n                    End If\n                Else\n                    myCredentials = CType(credentials, NetworkCredential)\n                End If\n                &#39; Message encryption scheme : \n                &#39; a)Concatenate username and password seperated by space\n                &#39; b)Apply ASCII encoding to obtain a stream of bytes\n                &#39; c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message\n                message = myCredentials.UserName + &quot; &quot; + myCredentials.Password\n                &#39; Apply AsciiEncoding to &#39;message&#39; string to obtain it as an array of bytes.\n                Dim ascii As Encoding = Encoding.ASCII\n                Dim byteArray(ascii.GetByteCount(message)) As Byte\n                byteArray = ascii.GetBytes(message)\n\n                &#39; Performing Base64 transformation.\n                message = Convert.ToBase64String(byteArray)\n                Dim myAuthorization As New Authorization(&quot;CloneBasic &quot; + message, True)\n                Dim protectionRealm() As String = {request.RequestUri.AbsolutePath}\n                myAuthorization.ProtectionRealm = protectionRealm\n\n                Return myAuthorization\n            Catch e As Exception\n                Console.WriteLine(&quot;The following exception was raised in Authenticate method:{0}&quot;, e.Message)\n                Return Nothing\n            End Try\n        End Function &#39;Authenticate\n</code></pre><pre><code class=\"lang-cs\" name=\"Authorization_ProtectionRealm#1\">        public Authorization Authenticate( string challenge,WebRequest request,ICredentials credentials)\n        {\n            try\n            {\n                string message;\n                // Check if Challenge string was raised by a site which requires &#39;CloneBasic&#39; authentication.\n                if ((challenge == null) || (!challenge.StartsWith(&quot;CloneBasic&quot;)))\n                    return null; \n                NetworkCredential myCredentials;\n                if (credentials is CredentialCache)\n                {\n                    myCredentials = credentials.GetCredential(request.RequestUri,&quot;CloneBasic&quot;);\n                    if (myCredentials == null)\n                        return null;\n                }\n                else    \n                    myCredentials = (NetworkCredential)credentials;  \n                // Message encryption scheme : \n                //   a)Concatenate username and password seperated by space;\n                //   b)Apply ASCII encoding to obtain a stream of bytes;\n                //   c)Apply Base64 Encoding to this array of bytes to obtain our encoded authorization message.\n                 \n                message = myCredentials.UserName + &quot; &quot; + myCredentials.Password;\n                // Apply AsciiEncoding to &#39;message&#39; string to obtain it as an array of bytes.\n                Encoding ascii = Encoding.ASCII;\n                byte[] byteArray = new byte[ascii.GetByteCount(message)];\n                byteArray = ascii.GetBytes(message);\n\n                // Performing Base64 transformation.\n                message = Convert.ToBase64String(byteArray);\n                Authorization myAuthorization = new Authorization(&quot;CloneBasic &quot; + message,true);\n                string[] protectionRealm = new string[]{request.RequestUri.AbsolutePath};\n                myAuthorization.ProtectionRealm = protectionRealm;\n\n                return myAuthorization;\n            }\n            catch(Exception e)\n            {\n                Console.WriteLine(&quot;The following exception was raised in Authenticate method:{0}&quot;,e.Message);\n                return null;\n            }\n          }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Authorization.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Authorization.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization.Complete\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization.ConnectionGroupId\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization.Message\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization.MutuallyAuthenticated\">\r\n<meta name=\"APIName\" content=\"System.Net.Authorization.ProtectionRealm\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"9a5fc8d4-c096-3e88-6613-8a925b2e5508\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains an authentication message for an Internet server.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Authorization\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Authorization.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Authorization.yml","open_to_public_contributors":true,"api_name":["System.Net.Authorization","System.Net.Authorization..ctor","System.Net.Authorization.Complete","System.Net.Authorization.ConnectionGroupId","System.Net.Authorization.Message","System.Net.Authorization.MutuallyAuthenticated","System.Net.Authorization.ProtectionRealm"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Authorization","System::Net::Authorization","System.Net.Authorization.#ctor","System::Net::Authorization::#ctor","System.Net.Authorization.Complete","System::Net::Authorization::Complete","System.Net.Authorization.ConnectionGroupId","System::Net::Authorization::ConnectionGroupId","System.Net.Authorization.Message","System::Net::Authorization::Message","System.Net.Authorization.MutuallyAuthenticated","System::Net::Authorization::MutuallyAuthenticated","System.Net.Authorization.ProtectionRealm","System::Net::Authorization::ProtectionRealm"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"9a5fc8d4-c096-3e88-6613-8a925b2e5508","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net/Authorization.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Authorization class | Microsoft Docs","_op_ogTitle":"Authorization class","description":"Contains an authentication message for an Internet server.\n","toc_asset_id":"_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.Authorization","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.authorization","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.authorization","fileRelativePath":"System.Net.Authorization.html"},"themesRelativePathToOutputRoot":"_themes/"}