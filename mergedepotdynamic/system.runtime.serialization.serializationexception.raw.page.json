{"content":"    \r\n    <h1 id=\"System_Runtime_Serialization_SerializationException\">\r\n      <span class=\"lang-csharp\">SerializationException</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>The exception thrown when an error occurs during serialization or deserialization.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class SerializationException : SystemException</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">System.SystemException</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">SerializationException</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Data\" data-linktype=\"relative-path\">Data</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetBaseException\" data-linktype=\"relative-path\">GetBaseException()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">GetObjectData(SerializationInfo,StreamingContext)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HelpLink\" data-linktype=\"relative-path\">HelpLink</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_HResult\" data-linktype=\"relative-path\">HResult</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_InnerException\" data-linktype=\"relative-path\">InnerException</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Message\" data-linktype=\"relative-path\">Message</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_SerializeObjectState\" data-linktype=\"relative-path\">SerializeObjectState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_Source\" data-linktype=\"relative-path\">Source</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_StackTrace\" data-linktype=\"relative-path\">StackTrace</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_TargetSite\" data-linktype=\"relative-path\">TargetSite</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.exception#System_Exception_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>SerializationException uses the <code>HRESULT</code> COR_E_SERIALIZATION with the value 0x8013150C.  </p>\n<p> SerializationException uses the default <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation, which supports reference equality.  </p>\n<p> For a list of initial property values for an instance of SerializationException, see the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception#System_Runtime_Serialization_SerializationException__ctor_\" data-linktype=\"relative-path\">SerializationException</a> constructors.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Serialization_SerializationException__ctor\" data-linktype=\"self-bookmark\">SerializationException()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class with default properties.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Serialization_SerializationException__ctor_System_String_\" data-linktype=\"self-bookmark\">SerializationException(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class with a specified message.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Serialization_SerializationException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">SerializationException(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class from serialized data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Serialization_SerializationException__ctor_System_String_System_Exception_\" data-linktype=\"self-bookmark\">SerializationException(String,Exception)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Serialization_SerializationException__ctor\">\r\n    \r\n            <a id=\"System_Runtime_Serialization_SerializationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SerializationException()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class with default properties.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SerializationException ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> inherits from the <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a> class. The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> initialized with the current constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>Localized error message for <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Serialization_SerializationException__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Runtime_Serialization_SerializationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SerializationException(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class with a specified message.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SerializationException (string message);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Indicates the reason why the exception occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> inherits from the <a class=\"xref\" href=\"system.systemexception\" data-linktype=\"relative-path\">SystemException</a> class. The following table shows initial property values for an instance of <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> initialized with the current constructor.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The <code>message</code> string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Serialization_SerializationException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Runtime_Serialization_SerializationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SerializationException(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class from serialized data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected SerializationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The serialization information object holding the serialized object data in the name-value form.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The contextual information about the source or destination of the exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The <code>info</code> parameter is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The current constructor is called during deserialization to reconstitute the exception object transmitted over a stream. (For more information on serialization see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.)</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-vb\" name=\"StreamingContext Example#1\">Imports System\nImports System.IO\nImports System.Collections\nImports System.Runtime.Serialization.Formatters.Binary\nImports System.Runtime.Serialization\nImports System.Runtime.InteropServices\nImports System.Security.Permissions\n\n&lt;Assembly: SecurityPermission( _\nSecurityAction.RequestMinimum, Execution:=True)&gt; \n&#39; This class includes several Win32 interop definitions.\nFriend Class Win32\n    Public Shared ReadOnly InvalidHandleValue As New IntPtr(-1)\n    Public Const FILE_MAP_WRITE As Int32 = 2\n    Public Const PAGE_READWRITE As Int32 = &amp;H4\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function CreateFileMapping(ByVal hFile As IntPtr, _\n                                             ByVal pAttributes As IntPtr, _\n                                             ByVal flProtect As Int32, _\n                                             ByVal dwMaximumSizeHigh As Int32, _\n                                             ByVal dwMaximumSizeLow As Int32, _\n                                             ByVal pName As String) As IntPtr\n    End Function\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function OpenFileMapping(ByVal dwDesiredAccess As Int32, _\n                                           ByVal bInheritHandle As Boolean, _\n                                           ByVal name As String) As IntPtr\n    End Function\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function CloseHandle(ByVal handle As IntPtr) As Boolean\n    End Function\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function MapViewOfFile(ByVal hFileMappingObject As IntPtr, _\n                                         ByVal dwDesiredAccess As Int32, _\n                                         ByVal dwFileOffsetHigh As Int32, _\n                                         ByVal dwFileOffsetLow As Int32, _\n                                         ByVal dwNumberOfBytesToMap As IntPtr) _\n                                         As IntPtr\n    End Function\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function UnmapViewOfFile(ByVal address As IntPtr) As Boolean\n    End Function\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Public Shared Function DuplicateHandle(ByVal hSourceProcessHandle As IntPtr, _\n                                           ByVal hSourceHandle As IntPtr, _\n                                           ByVal hTargetProcessHandle As IntPtr, _\n                                           ByRef lpTargetHandle As IntPtr, _\n                                           ByVal dwDesiredAccess As Int32, _\n                                           ByVal bInheritHandle As Boolean, _\n                                           ByVal dwOptions As Int32) As Boolean\n    End Function\n\n    Public Const DUPLICATE_CLOSE_SOURCE As Int32 = &amp;H1\n    Public Const DUPLICATE_SAME_ACCESS As Int32 = &amp;H2\n\n    &lt;DllImport(&quot;Kernel32&quot;, CharSet:=CharSet.Unicode)&gt; Public Shared Function GetCurrentProcess() As IntPtr\n    End Function\nEnd Class\n\n\n&#39; This class wraps memory that can be simultaneously \n&#39; shared by multiple AppDomains and Processes.\n&lt;Serializable()&gt; Public NotInheritable Class SharedMemory\n    Implements ISerializable\n    Implements IDisposable\n\n    &#39; The handle and string that identify \n    &#39; the Windows file-mapping object.\n    Private m_hFileMap As IntPtr = IntPtr.Zero\n    Private m_name As String\n\n    &#39; The address of the memory-mapped file-mapping object.\n    Private m_address As IntPtr\n    &lt;SecurityPermissionAttribute(SecurityAction.LinkDemand, _\n    Flags:=SecurityPermissionFlag.UnmanagedCode)&gt; _\n    Public Function GetByte(ByVal offset As Int32) As Byte\n        Dim b(0) As Byte\n        Marshal.Copy(New IntPtr(m_address.ToInt64() + offset), b, 0, 1)\n        Return b(0)\n    End Function\n\n    &lt;SecurityPermissionAttribute(SecurityAction.LinkDemand, _\n    Flags:=SecurityPermissionFlag.UnmanagedCode)&gt; _\n    Public Sub SetByte(ByVal offset As Int32, ByVal value As Byte)\n        Dim b(0) As Byte\n        b(0) = value\n        Marshal.Copy(b, 0, New IntPtr(m_address.ToInt64() + offset), 1)\n    End Sub\n\n\n    &#39; The constructors.\n    Public Sub New(ByVal size As Int32)\n        Me.New(size, Nothing)\n    End Sub\n\n    Public Sub New(ByVal size As Int32, ByVal name As String)\n        m_hFileMap = Win32.CreateFileMapping(Win32.InvalidHandleValue, _\n           IntPtr.Zero, Win32.PAGE_READWRITE, 0, size, name)\n        If (m_hFileMap.Equals(IntPtr.Zero)) Then _\n           Throw New Exception(&quot;Could not create memory-mapped file.&quot;)\n        m_name = name\n        m_address = Win32.MapViewOfFile(m_hFileMap, _\n           Win32.FILE_MAP_WRITE, 0, 0, IntPtr.Zero)\n    End Sub\n\n\n    &#39; The cleanup methods.\n    Public Sub Dispose() Implements IDisposable.Dispose\n        GC.SuppressFinalize(Me)\n        Dispose(True)\n    End Sub\n\n    Private Sub Dispose(ByVal disposing As Boolean)\n        Win32.UnmapViewOfFile(m_address)\n        Win32.CloseHandle(m_hFileMap)\n        m_address = IntPtr.Zero\n        m_hFileMap = IntPtr.Zero\n    End Sub\n\n    Protected Overrides Sub Finalize()\n        Dispose(False)\n    End Sub\n\n\n    &#39; Private helper methods.\n    Private Shared Function AllFlagsSet(ByVal flags As Int32, _\n                                        ByVal flagsToTest As Int32) As Boolean\n        Return (flags And flagsToTest) = flagsToTest\n    End Function\n\n    Private Shared Function AnyFlagsSet(ByVal flags As Int32, _\n                                        ByVal flagsToTest As Int32) As Boolean\n        Return (flags And flagsToTest) &lt;&gt; 0\n    End Function\n\n\n    &#39; The security attribute demands that code that calls  \n    &#39; this method have permission to perform serialization.\n    &lt;SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter:=True)&gt; _\n    Sub GetObjectData(ByVal info As SerializationInfo, _\n                      ByVal context As StreamingContext) _\n                      Implements ISerializable.GetObjectData\n        &#39; The context&#39;s State member indicates where the object will be deserialized.\n\n        &#39; A SharedMemory object cannot be serialized \n        &#39; to any of the following destinations.\n        Const InvalidDestinations As StreamingContextStates = _\n           StreamingContextStates.CrossMachine Or _\n           StreamingContextStates.File Or _\n           StreamingContextStates.Other Or _\n           StreamingContextStates.Persistence Or _\n           StreamingContextStates.Remoting\n        If AnyFlagsSet(CType(context.State, Int32), _\n                       CType(InvalidDestinations, Int32)) Then\n            Throw New SerializationException(&quot;The SharedMemory object &quot; &amp; _\n               &quot;cannot be serialized to any of the following streaming contexts: &quot; _\n               &amp; InvalidDestinations)\n        End If\n\n        Const DeserializableByHandle As StreamingContextStates = _\n                 StreamingContextStates.Clone Or _\n                 StreamingContextStates.CrossAppDomain\n\n        If AnyFlagsSet(CType(context.State, Int32), _\n              CType(DeserializableByHandle, Int32)) Then\n            info.AddValue(&quot;hFileMap&quot;, m_hFileMap)\n        End If\n\n        Const DeserializableByName As StreamingContextStates = _\n                 StreamingContextStates.CrossProcess   &#39; The same computer.\n        If AnyFlagsSet(CType(context.State, Int32), CType(DeserializableByName, _\n                       Int32)) Then\n            If m_name = Nothing Then\n                Throw New SerializationException(&quot;The SharedMemory object &quot; &amp; _\n                   &quot;cannot be serialized CrossProcess because it was not constructed &quot; &amp; _\n                   &quot;with a String name.&quot;)\n            End If\n            info.AddValue(&quot;name&quot;, m_name)\n        End If\n    End Sub\n\n    Private Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)\n        &#39; The context&#39;s State member indicates where the object was serialized from.\n\n        Const InvalidSources As StreamingContextStates = _\n                 StreamingContextStates.CrossMachine Or _\n                 StreamingContextStates.File Or _\n                 StreamingContextStates.Other Or _\n                 StreamingContextStates.Persistence Or _\n                 StreamingContextStates.Remoting\n\n        If AnyFlagsSet(CType(context.State, Int32), CType(InvalidSources, Int32)) Then\n            Throw New SerializationException(&quot;The SharedMemory object &quot; &amp; _\n               &quot;cannot be deserialized from any of the following stream contexts: &quot; &amp; _\n               InvalidSources)\n        End If\n\n        Const SerializedByHandle As StreamingContextStates = _\n                 StreamingContextStates.Clone Or _\n                 StreamingContextStates.CrossAppDomain &#39; The same process.\n        If AnyFlagsSet(CType(context.State, Int32), _\n              CType(SerializedByHandle, Int32)) Then\n            Try\n                Win32.DuplicateHandle(Win32.GetCurrentProcess(), _\n                   CType(info.GetValue(&quot;hFileMap&quot;, GetType(IntPtr)), IntPtr), _\n                      Win32.GetCurrentProcess(), m_hFileMap, 0, False, _\n                      Win32.DUPLICATE_SAME_ACCESS)\n            Catch e As SerializationException\n                Throw New SerializationException(&quot;A SharedMemory was not &quot; &amp; _\n                   &quot;serialized using any of the following streaming contexts: &quot; &amp; _\n                   SerializedByHandle)\n            End Try\n        End If\n\n        Const SerializedByName As StreamingContextStates = _\n                 StreamingContextStates.CrossProcess   &#39; The same computer.\n        If AnyFlagsSet(CType(context.State, Int32), _\n                       CType(SerializedByName, Int32)) Then\n            Try\n                m_name = info.GetString(&quot;name&quot;)\n            Catch e As SerializationException\n                Throw New SerializationException(&quot;A SharedMemory object &quot; &amp; _\n                   &quot;was not serialized using any of the following streaming contexts: &quot; &amp; _\n                   SerializedByName)\n            End Try\n            m_hFileMap = Win32.OpenFileMapping(Win32.FILE_MAP_WRITE, False, m_name)\n        End If\n        If Not m_hFileMap.Equals(IntPtr.Zero) Then\n            m_address = Win32.MapViewOfFile(m_hFileMap, _\n               Win32.FILE_MAP_WRITE, 0, 0, IntPtr.Zero)\n        Else\n            Throw New SerializationException(&quot;A SharedMemory object &quot; &amp; _\n               &quot;could not be deserialized.&quot;)\n        End If\n    End Sub\nEnd Class\n\nClass App\n    &lt;STAThread()&gt; Shared Sub Main()\n        Serialize()\n        Console.WriteLine()\n        Deserialize()\n    End Sub\n\n    Shared Sub Serialize()\n        &#39; Create a hashtable of values that will eventually be serialized.\n        Dim sm As New SharedMemory(1024, &quot;MyMemory&quot;)\n        Dim x As Int32\n        For x = 0 To 99\n            sm.SetByte(x, x)\n        Next\n\n        Dim b(9) As Byte\n        For x = 0 To b.Length - 1\n            b(x) = sm.GetByte(x)\n        Next\n        Console.WriteLine(BitConverter.ToString(b))\n\n        &#39; To serialize the hashtable (and its key/value pairs), you must first \n        &#39; open a stream for writing. Use a file stream here.\n        Dim fs As New FileStream(&quot;DataFile.dat&quot;, FileMode.Create)\n\n        &#39; Construct a BinaryFormatter telling it where \n        &#39; the objects will be serialized to.\n        Dim formatter As New BinaryFormatter(Nothing, _\n           New StreamingContext(StreamingContextStates.CrossAppDomain))\n        Try\n            formatter.Serialize(fs, sm)\n        Catch e As SerializationException\n            Console.WriteLine(&quot;Failed to serialize. Reason: &quot; + e.Message)\n            Throw\n        Finally\n            fs.Close()\n        End Try\n    End Sub\n\n    Shared Sub Deserialize()\n        &#39; Declare the hashtable reference.\n        Dim sm As SharedMemory = Nothing\n\n        &#39; Open the file containing the data that you want to deserialize.\n        Dim fs As New FileStream(&quot;DataFile.dat&quot;, FileMode.Open)\n        Try\n            Dim Formatter As New BinaryFormatter(Nothing, _\n               New StreamingContext(StreamingContextStates.CrossAppDomain))\n\n            &#39; Deserialize the SharedMemory object from the file and \n            &#39; assign the reference to the local variable.\n            sm = DirectCast(Formatter.Deserialize(fs), SharedMemory)\n        Catch e As SerializationException\n            Console.WriteLine(&quot;Failed to deserialize. Reason: &quot; &amp; e.Message)\n        Finally\n            fs.Close()\n        End Try\n\n        &#39; To prove that the SharedMemory object deserialized correctly, \n        &#39; display some of its bytes to the console.\n        Dim b(9) As Byte\n        Dim x As Int32\n        For x = 0 To b.Length - 1\n            b(x) = sm.GetByte(x)\n        Next\n        Console.WriteLine(BitConverter.ToString(b))\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"StreamingContext Example#1\">// Note: You must compile this file using the C# /unsafe switch.\nusing System;\nusing System.IO;\nusing System.Collections;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Runtime.Serialization;\nusing System.Runtime.InteropServices;\nusing System.Security.Permissions;\n\n[assembly: SecurityPermission(\nSecurityAction.RequestMinimum, Execution = true)]\n// This class includes several Win32 interop definitions.\ninternal class Win32\n{\n    public static readonly IntPtr InvalidHandleValue = new IntPtr(-1);\n    public const UInt32 FILE_MAP_WRITE = 2;\n    public const UInt32 PAGE_READWRITE = 0x04;\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern IntPtr CreateFileMapping(IntPtr hFile,\n        IntPtr pAttributes, UInt32 flProtect,\n        UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, String pName);\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern IntPtr OpenFileMapping(UInt32 dwDesiredAccess,\n        Boolean bInheritHandle, String name);\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern Boolean CloseHandle(IntPtr handle);\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern IntPtr MapViewOfFile(IntPtr hFileMappingObject,\n        UInt32 dwDesiredAccess,\n        UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow,\n        IntPtr dwNumberOfBytesToMap);\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern Boolean UnmapViewOfFile(IntPtr address);\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern Boolean DuplicateHandle(IntPtr hSourceProcessHandle,\n        IntPtr hSourceHandle,\n        IntPtr hTargetProcessHandle, ref IntPtr lpTargetHandle,\n        UInt32 dwDesiredAccess, Boolean bInheritHandle, UInt32 dwOptions);\n    public const UInt32 DUPLICATE_CLOSE_SOURCE = 0x00000001;\n    public const UInt32 DUPLICATE_SAME_ACCESS = 0x00000002;\n\n    [DllImport(&quot;Kernel32&quot;,CharSet=CharSet.Unicode)]\n    public static extern IntPtr GetCurrentProcess();\n}\n\n\n// This class wraps memory that can be simultaneously \n// shared by multiple AppDomains and Processes.\n[Serializable]\npublic sealed class SharedMemory : ISerializable, IDisposable\n{\n    // The handle and string that identify \n    // the Windows file-mapping object.\n    private IntPtr m_hFileMap = IntPtr.Zero;\n    private String m_name;\n\n    // The address of the memory-mapped file-mapping object.\n    private IntPtr m_address;\n\n    public unsafe Byte* Address\n    {\n        get { return (Byte*)m_address; }\n    }\n\n    // The constructors.\n    public SharedMemory(Int32 size) : this(size, null) { }\n\n    public SharedMemory(Int32 size, String name)\n    {\n        m_hFileMap = Win32.CreateFileMapping(Win32.InvalidHandleValue,\n            IntPtr.Zero, Win32.PAGE_READWRITE,\n            0, unchecked((UInt32)size), name);\n        if (m_hFileMap == IntPtr.Zero)\n            throw new Exception(&quot;Could not create memory-mapped file.&quot;);\n        m_name = name;\n        m_address = Win32.MapViewOfFile(m_hFileMap, Win32.FILE_MAP_WRITE,\n            0, 0, IntPtr.Zero);\n    }\n\n    // The cleanup methods.\n    public void Dispose()\n    {\n        GC.SuppressFinalize(this);\n        Dispose(true);\n    }\n\n    private void Dispose(Boolean disposing)\n    {\n        Win32.UnmapViewOfFile(m_address);\n        Win32.CloseHandle(m_hFileMap);\n        m_address = IntPtr.Zero;\n        m_hFileMap = IntPtr.Zero;\n    }\n\n    ~SharedMemory()\n    {\n        Dispose(false);\n    }\n\n    // Private helper methods.\n    private static Boolean AllFlagsSet(Int32 flags, Int32 flagsToTest)\n    {\n        return (flags &amp; flagsToTest) == flagsToTest;\n    }\n\n    private static Boolean AnyFlagsSet(Int32 flags, Int32 flagsToTest)\n    {\n        return (flags &amp; flagsToTest) != 0;\n    }\n\n\n    // The security attribute demands that code that calls  \n    // this method have permission to perform serialization.\n    [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]\n    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        // The context&#39;s State member indicates\n        // where the object will be deserialized.\n\n        // A SharedMemory object cannot be serialized \n        // to any of the following destinations.\n        const StreamingContextStates InvalidDestinations =\n                  StreamingContextStates.CrossMachine |\n                  StreamingContextStates.File |\n                  StreamingContextStates.Other |\n                  StreamingContextStates.Persistence |\n                  StreamingContextStates.Remoting;\n        if (AnyFlagsSet((Int32)context.State, (Int32)InvalidDestinations))\n            throw new SerializationException(&quot;The SharedMemory object &quot; +\n                &quot;cannot be serialized to any of the following streaming contexts: &quot; +\n                InvalidDestinations);\n\n        const StreamingContextStates DeserializableByHandle =\n                  StreamingContextStates.Clone |\n            // The same process.\n                  StreamingContextStates.CrossAppDomain;\n        if (AnyFlagsSet((Int32)context.State, (Int32)DeserializableByHandle))\n            info.AddValue(&quot;hFileMap&quot;, m_hFileMap);\n\n        const StreamingContextStates DeserializableByName =\n            // The same computer.\n                  StreamingContextStates.CrossProcess;\n        if (AnyFlagsSet((Int32)context.State, (Int32)DeserializableByName))\n        {\n            if (m_name == null)\n                throw new SerializationException(&quot;The SharedMemory object &quot; +\n                    &quot;cannot be serialized CrossProcess because it was not constructed &quot; +\n                    &quot;with a String name.&quot;);\n            info.AddValue(&quot;name&quot;, m_name);\n        }\n    }\n\n\n    // The security attribute demands that code that calls  \n    // this method have permission to perform serialization.\n    [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]\n    private SharedMemory(SerializationInfo info, StreamingContext context)\n    {\n        // The context&#39;s State member indicates \n        // where the object was serialized from.\n\n        const StreamingContextStates InvalidSources =\n                  StreamingContextStates.CrossMachine |\n                  StreamingContextStates.File |\n                  StreamingContextStates.Other |\n                  StreamingContextStates.Persistence |\n                  StreamingContextStates.Remoting;\n        if (AnyFlagsSet((Int32)context.State, (Int32)InvalidSources))\n            throw new SerializationException(&quot;The SharedMemory object &quot; +\n                &quot;cannot be deserialized from any of the following stream contexts: &quot; +\n                InvalidSources);\n\n        const StreamingContextStates SerializedByHandle =\n                  StreamingContextStates.Clone |\n            // The same process.\n                  StreamingContextStates.CrossAppDomain;\n        if (AnyFlagsSet((Int32)context.State, (Int32)SerializedByHandle))\n        {\n            try\n            {\n                Win32.DuplicateHandle(Win32.GetCurrentProcess(),\n                    (IntPtr)info.GetValue(&quot;hFileMap&quot;, typeof(IntPtr)),\n                    Win32.GetCurrentProcess(), ref m_hFileMap, 0, false,\n                    Win32.DUPLICATE_SAME_ACCESS);\n            }\n            catch (SerializationException)\n            {\n                throw new SerializationException(&quot;A SharedMemory was not serialized &quot; +\n                    &quot;using any of the following streaming contexts: &quot; +\n                    SerializedByHandle);\n            }\n        }\n\n        const StreamingContextStates SerializedByName =\n            // The same computer.\n                  StreamingContextStates.CrossProcess;\n        if (AnyFlagsSet((Int32)context.State, (Int32)SerializedByName))\n        {\n            try\n            {\n                m_name = info.GetString(&quot;name&quot;);\n            }\n            catch (SerializationException)\n            {\n                throw new SerializationException(&quot;A SharedMemory object was not &quot; +\n                    &quot;serialized using any of the following streaming contexts: &quot; +\n                    SerializedByName);\n            }\n            m_hFileMap = Win32.OpenFileMapping(Win32.FILE_MAP_WRITE, false, m_name);\n        }\n        if (m_hFileMap != IntPtr.Zero)\n        {\n            m_address = Win32.MapViewOfFile(m_hFileMap, Win32.FILE_MAP_WRITE,\n                0, 0, IntPtr.Zero);\n        }\n        else\n        {\n            throw new SerializationException(&quot;A SharedMemory object could not &quot; +\n                &quot;be deserialized.&quot;);\n        }\n    }\n}\n\n\nclass App\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        Serialize();\n        Console.WriteLine();\n        Deserialize();\n    }\n\n    unsafe static void Serialize()\n    {\n        // Create a hashtable of values that will eventually be serialized.\n        SharedMemory sm = new SharedMemory(1024, &quot;JeffMemory&quot;);\n        for (Int32 x = 0; x &lt; 100; x++)\n            *(sm.Address + x) = (Byte)x;\n\n        Byte[] b = new Byte[10];\n        for (Int32 x = 0; x &lt; b.Length; x++) b[x] = *(sm.Address + x);\n        Console.WriteLine(BitConverter.ToString(b));\n\n        // To serialize the SharedMemory object, \n        // you must first open a stream for writing. \n        // Use a file stream here.\n        FileStream fs = new FileStream(&quot;DataFile.dat&quot;, FileMode.Create);\n\n        // Construct a BinaryFormatter and tell it where \n        // the objects will be serialized to.\n        BinaryFormatter formatter = new BinaryFormatter(null,\n            new StreamingContext(StreamingContextStates.CrossAppDomain));\n        try\n        {\n            formatter.Serialize(fs, sm);\n        }\n        catch (SerializationException e)\n        {\n            Console.WriteLine(&quot;Failed to serialize. Reason: &quot; + e.Message);\n            throw;\n        }\n        finally\n        {\n            fs.Close();\n        }\n    }\n\n\n    unsafe static void Deserialize()\n    {\n        // Declare a SharedMemory reference.\n        SharedMemory sm = null;\n\n        // Open the file containing the data that you want to deserialize.\n        FileStream fs = new FileStream(&quot;DataFile.dat&quot;, FileMode.Open);\n        try\n        {\n            BinaryFormatter formatter = new BinaryFormatter(null,\n                new StreamingContext(StreamingContextStates.CrossAppDomain));\n\n            // Deserialize the SharedMemory object from the file and \n            // assign the reference to the local variable.\n            sm = (SharedMemory)formatter.Deserialize(fs);\n        }\n        catch (SerializationException e)\n        {\n            Console.WriteLine(&quot;Failed to deserialize. Reason: &quot; + e.Message);\n            throw;\n        }\n        finally\n        {\n            fs.Close();\n        }\n\n        // To prove that the SharedMemory object deserialized correctly, \n        // display some of its bytes to the console.\n        Byte[] b = new Byte[10];\n        for (Int32 x = 0; x &lt; b.Length; x++) b[x] = *(sm.Address + x);\n        Console.WriteLine(BitConverter.ToString(b));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Serialization_SerializationException__ctor_System_String_System_Exception_\">\r\n    \r\n            <a id=\"System_Runtime_Serialization_SerializationException__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SerializationException(String,Exception)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public SerializationException (string message, Exception innerException);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>message</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The error message that explains the reason for the exception.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerException</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not <code>null</code>, the current exception is raised in a <code>catch</code> block that handles the inner exception.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property. The <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property returns the same value that is passed into the constructor or <code>null</code> if the <a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> property does not supply the inner exception value to the constructor.  </p>\n<p> The following table shows the initial property values for an instance of <a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a>.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a></td>\n<td>The inner exception reference.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a></td>\n<td>The error message string.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Serialization.SerializationException.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Serialization.SerializationException.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.SerializationException\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.SerializationException..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"4e7c5abb-cb61-f2ff-b8f5-6d316c2a354c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The exception thrown when an error occurs during serialization or deserialization.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Serialization/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Serialization.SerializationException\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Serialization.SerializationException.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Serialization.SerializationException.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Serialization.SerializationException","System.Runtime.Serialization.SerializationException..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Serialization.SerializationException","System::Runtime::Serialization::SerializationException","System.Runtime.Serialization.SerializationException.#ctor","System::Runtime::Serialization::SerializationException::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"4e7c5abb-cb61-f2ff-b8f5-6d316c2a354c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Serialization/SerializationException.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SerializationException class | Microsoft Docs","_op_ogTitle":"SerializationException class","description":"The exception thrown when an error occurs during serialization or deserialization.\n","toc_asset_id":"_splitted/System.Runtime.Serialization/toc.json","toc_rel":"_splitted/System.Runtime.Serialization/toc.json","source_url":"","ms.assetid":"System.Runtime.Serialization.SerializationException","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.serialization.serializationexception","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.serialization.serializationexception","fileRelativePath":"System.Runtime.Serialization.SerializationException.html"},"themesRelativePathToOutputRoot":"_themes/"}