{"content":"    \r\n    <h1 id=\"System_Management_ManagementEventWatcher\">\r\n      <span class=\"lang-csharp\">ManagementEventWatcher</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Subscribes to temporary event notifications based on a specified <em>event query</em>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.ToolboxItem(false)]\npublic class ManagementEventWatcher : System.ComponentModel.Component</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">System.ComponentModel.Component</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ManagementEventWatcher</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor\" data-linktype=\"self-bookmark\">ManagementEventWatcher()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class. For further initialization, set the properties on the object. This is the default constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor_System_Management_EventQuery_\" data-linktype=\"self-bookmark\">ManagementEventWatcher(EventQuery)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class when given a WMI <em>event query</em>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor_System_String_\" data-linktype=\"self-bookmark\">ManagementEventWatcher(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class when given a WMI <em>event query</em> in the form of a string.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor_System_Management_ManagementScope_System_Management_EventQuery_\" data-linktype=\"self-bookmark\">ManagementEventWatcher(ManagementScope,EventQuery)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI <em>event query</em>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor_System_String_System_String_\" data-linktype=\"self-bookmark\">ManagementEventWatcher(String,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI <em>event query</em>. For this variant, the query and the scope are specified as strings.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor_System_Management_ManagementScope_System_Management_EventQuery_System_Management_EventWatcherOptions_\" data-linktype=\"self-bookmark\">ManagementEventWatcher(ManagementScope,EventQuery,EventWatcherOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI event query, according to the specified options. For this variant, the query and the scope are specified objects. The options object can specify options such as time-out and context information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher__ctor_System_String_System_String_System_Management_EventWatcherOptions_\" data-linktype=\"self-bookmark\">ManagementEventWatcher(String,String,EventWatcherOptions)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI <em>event query</em>, according to the specified options. For this variant, the query and the scope are specified as strings. The options object can specify options such as a time-out and context information.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Options\" data-linktype=\"self-bookmark\">Options</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the options used to watch for events.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Query\" data-linktype=\"self-bookmark\">Query</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the criteria to apply to events.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Scope\" data-linktype=\"self-bookmark\">Scope</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the scope in which to watch for events (namespace or scope).</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Finalize\" data-linktype=\"self-bookmark\">Finalize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ensures that outstanding calls are cleared. This is the destructor for the object. In C#, finalizers are expressed using destructor syntax.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Start\" data-linktype=\"self-bookmark\">Start()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Subscribes to events with the given query and delivers them, asynchronously, through the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_EventArrived\" data-linktype=\"relative-path\">EventArrived</a> event.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Stop\" data-linktype=\"self-bookmark\">Stop()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Cancels the subscription whether it is synchronous or asynchronous.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_WaitForNextEvent\" data-linktype=\"self-bookmark\">WaitForNextEvent()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Waits for the next event that matches the specified query to arrive, and then returns it.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Events\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_EventArrived\" data-linktype=\"self-bookmark\">EventArrived</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a new event arrives.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Management_ManagementEventWatcher_Stopped\" data-linktype=\"self-bookmark\">Stopped</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Occurs when a subscription is canceled.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class. For further initialization, set the properties on the object. This is the default constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher()#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        WqlEventQuery query = \n            new WqlEventQuery(&quot;__InstanceCreationEvent&quot;, \n            new TimeSpan(0,0,1), \n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher();\n        watcher.Query = query;\n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher()#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As New WqlEventQuery( _\n            &quot;__InstanceCreationEvent&quot;, _\n            New TimeSpan(0, 0, 1), _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;)\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher\n        watcher.Query = query\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor_System_Management_EventQuery_\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher(EventQuery)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class when given a WMI <em>event query</em>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher (System.Management.EventQuery query);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>query</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a> representing a WMI event query, which determines the events for which the watcher will listen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The namespace in which the watcher will be listening for events is the default namespace that is currently set.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In this code example, the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher(E)#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As String\n        query = &quot;SELECT * FROM __InstanceCreationEvent &quot; _\n            &amp; &quot;WITHIN 1 WHERE &quot; &amp; _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher(New EventQuery( _\n        query))\n\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher(E)#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        string query = \n            &quot;SELECT * FROM __InstanceCreationEvent &quot;\n            + &quot;WITHIN 1 WHERE &quot; +\n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;;\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher(new EventQuery(query));\n        \n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor_System_String_\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher(String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class when given a WMI <em>event query</em> in the form of a string.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher (string query);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>query</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A WMI event query, which defines the events for which the watcher will listen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The namespace in which the watcher will be listening for events is the default namespace that is currently set.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher(S)#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        string query = \n            &quot;SELECT * FROM __InstanceCreationEvent &quot;\n            + &quot;WITHIN 1 WHERE &quot; +\n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;;\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher(query);\n        \n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher(S)#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As String\n        query = &quot;SELECT * FROM __InstanceCreationEvent &quot; _\n            &amp; &quot;WITHIN 1 WHERE &quot; &amp; _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher(query)\n\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor_System_Management_ManagementScope_System_Management_EventQuery_\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher(ManagementScope,EventQuery)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI <em>event query</em>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher (System.Management.ManagementScope scope, System.Management.EventQuery query);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.managementscope\" data-linktype=\"relative-path\">ManagementScope</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.management.managementscope\" data-linktype=\"relative-path\">ManagementScope</a> representing the scope (namespace) in which the watcher will listen for events.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>query</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a> representing a WMI event query, which determines the events for which the watcher will listen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>In this code example, the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher(M_E)#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As String\n        query = &quot;SELECT * FROM __InstanceCreationEvent &quot; _\n            &amp; &quot;WITHIN 1 WHERE &quot; &amp; _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher( _\n            New ManagementScope(&quot;root\\CIMV2&quot;), _\n            New EventQuery(query))\n\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher(M_E)#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        string query = \n            &quot;SELECT * FROM __InstanceCreationEvent &quot;\n            + &quot;WITHIN 1 WHERE &quot; +\n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;;\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher(\n            new ManagementScope(&quot;root\\\\CIMV2&quot;),\n            new EventQuery(query));\n        \n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor_System_String_System_String_\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher(String,String)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI <em>event query</em>. For this variant, the query and the scope are specified as strings.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher (string scope, string query);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The management scope (namespace) in which the watcher will listen for events.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>query</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The query that defines the events for which the watcher will listen.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher(S_S)#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As String\n        query = &quot;SELECT * FROM __InstanceCreationEvent &quot; _\n            &amp; &quot;WITHIN 1 WHERE &quot; &amp; _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher( _\n            &quot;root\\CIMV2&quot;, query)\n\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher(S_S)#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        string query = \n            &quot;SELECT * FROM __InstanceCreationEvent &quot;\n            + &quot;WITHIN 1 WHERE &quot; +\n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;;\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher(&quot;root\\\\CIMV2&quot;, \n            query);\n        \n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor_System_Management_ManagementScope_System_Management_EventQuery_System_Management_EventWatcherOptions_\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher(ManagementScope,EventQuery,EventWatcherOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI event query, according to the specified options. For this variant, the query and the scope are specified objects. The options object can specify options such as time-out and context information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher (System.Management.ManagementScope scope, System.Management.EventQuery query, System.Management.EventWatcherOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.managementscope\" data-linktype=\"relative-path\">ManagementScope</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.management.managementscope\" data-linktype=\"relative-path\">ManagementScope</a> representing the scope (namespace) in which the watcher will listen for events.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>query</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a> representing a WMI event query, which determines the events for which the watcher will listen.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventwatcheroptions\" data-linktype=\"relative-path\">EventWatcherOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.management.eventwatcheroptions\" data-linktype=\"relative-path\">EventWatcherOptions</a> representing additional options used to watch for events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher(M_E_E)#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As String\n        query = &quot;SELECT * FROM __InstanceCreationEvent &quot; _\n            &amp; &quot;WITHIN 1 WHERE &quot; &amp; _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;\n\n        &#39; Event options\n        &#39; blockSize = 1, so wait for 1 event to return\n        Dim options As New EventWatcherOptions( _\n            Nothing, TimeSpan.MaxValue, 1)\n\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher( _\n            New ManagementScope(&quot;root\\CIMV2&quot;), _\n            New EventQuery(query), _\n            options)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher(M_E_E)#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        string query = \n            &quot;SELECT * FROM __InstanceCreationEvent &quot;\n            + &quot;WITHIN 1 WHERE &quot; +\n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;;\n\n        // Event options\n        // blockSize = 1, so wait for 1 event to return\n        EventWatcherOptions options = new EventWatcherOptions(\n            null, TimeSpan.MaxValue, 1);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher(\n            new ManagementScope(&quot;root\\\\CIMV2&quot;),\n            new EventQuery(query), options);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher__ctor_System_String_System_String_System_Management_EventWatcherOptions_\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ManagementEventWatcher(String,String,EventWatcherOptions)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.management.managementeventwatcher\" data-linktype=\"relative-path\">ManagementEventWatcher</a> class that listens for events conforming to the given WMI <em>event query</em>, according to the specified options. For this variant, the query and the scope are specified as strings. The options object can specify options such as a time-out and context information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public ManagementEventWatcher (string scope, string query, System.Management.EventWatcherOptions options);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scope</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The management scope (namespace) in which the watcher will listen for events.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>query</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The query that defines the events for which the watcher will listen.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>options</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventwatcheroptions\" data-linktype=\"relative-path\">EventWatcherOptions</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.management.eventwatcheroptions\" data-linktype=\"relative-path\">EventWatcherOptions</a> representing additional options used to watch for events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher(S_S_E)#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        string query = \n            &quot;SELECT * FROM __InstanceCreationEvent &quot;\n            + &quot;WITHIN 1 WHERE &quot; +\n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;;\n\n        // Event options\n        // blockSize = 1, so wait for 1 event to return\n        EventWatcherOptions options = new EventWatcherOptions(\n            null, TimeSpan.MaxValue, 1);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher(\n            new ManagementScope(&quot;root\\\\CIMV2&quot;),\n            new EventQuery(query), options);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher(S_S_E)#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As String\n        query = &quot;SELECT * FROM __InstanceCreationEvent &quot; _\n            &amp; &quot;WITHIN 1 WHERE &quot; &amp; _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;\n\n        &#39; Event options\n        &#39; blockSize = 1, so wait for 1 event to return\n        Dim options As New EventWatcherOptions( _\n            Nothing, TimeSpan.MaxValue, 1)\n\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher( _\n            &quot;root\\CIMV2&quot;, _\n            query, _\n            options)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Options\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_Options_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Options</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the options used to watch for events.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.EventWatcherOptions Options { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventwatcheroptions\" data-linktype=\"relative-path\">EventWatcherOptions</a></div>\r\n                  </div>\r\n                  <p>Returns an <a class=\"xref\" href=\"system.management.eventwatcheroptions\" data-linktype=\"relative-path\">EventWatcherOptions</a> that contains the event options used to watch for events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"property-value\">Property Value</h2>\n<p> The options used to watch for events.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher_Options#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        WqlEventQuery query = \n            new WqlEventQuery(&quot;__InstanceCreationEvent&quot;, \n            new TimeSpan(0,0,1), \n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher();\n        watcher.Query = query;\n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher_Options#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As New WqlEventQuery( _\n            &quot;__InstanceCreationEvent&quot;, _\n            New TimeSpan(0, 0, 1), _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;)\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher\n        watcher.Query = query\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Query\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_Query_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Query</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the criteria to apply to events.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.EventQuery Query { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a></div>\r\n                  </div>\r\n                  <p>Returns an <a class=\"xref\" href=\"system.management.eventquery\" data-linktype=\"relative-path\">EventQuery</a> that contains the query to apply to events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"property-value\">Property Value</h2>\n<p> The criteria to apply to the events, which is equal to the <em>event query</em>.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher_Query#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        WqlEventQuery query = \n            new WqlEventQuery(&quot;__InstanceCreationEvent&quot;, \n            new TimeSpan(0,0,1), \n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher();\n        watcher.Query = query;\n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher_Query#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As New WqlEventQuery( _\n            &quot;__InstanceCreationEvent&quot;, _\n            New TimeSpan(0, 0, 1), _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;)\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher\n        watcher.Query = query\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Scope\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_Scope_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Scope</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the scope in which to watch for events (namespace or scope).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.ManagementScope Scope { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.managementscope\" data-linktype=\"relative-path\">ManagementScope</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.management.managementscope\" data-linktype=\"relative-path\">ManagementScope</a> that contains the scope the in which to watch for events.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"property-value\">Property Value</h2>\n<p> The scope in which to watch for events (namespace or scope).  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher_Scope#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As New WqlEventQuery( _\n            &quot;__InstanceCreationEvent&quot;, _\n            New TimeSpan(0, 0, 1), _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;)\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher\n        watcher.Query = query\n        watcher.Scope = New ManagementScope(&quot;root\\CIMV2&quot;)\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre><pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher_Scope#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        WqlEventQuery query = \n            new WqlEventQuery(&quot;__InstanceCreationEvent&quot;, \n            new TimeSpan(0,0,1), \n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher();\n        watcher.Query = query;\n        watcher.Scope = new ManagementScope(&quot;root\\\\CIMV2&quot;);\n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Finalize\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_Finalize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Finalize()</div>        \r\n          </div>\r\n    \r\n            <p>Ensures that outstanding calls are cleared. This is the destructor for the object. In C#, finalizers are expressed using destructor syntax.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">~ManagementEventWatcher ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Start\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_Start_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Start()</div>        \r\n          </div>\r\n    \r\n            <p>Subscribes to events with the given query and delivers them, asynchronously, through the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_EventArrived\" data-linktype=\"relative-path\">EventArrived</a> event.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Start ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Stop\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_Stop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stop()</div>        \r\n          </div>\r\n    \r\n            <p>Cancels the subscription whether it is synchronous or asynchronous.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Stop ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the <a class=\"xref\" href=\"system.management.managementeventwatcher#System_Management_ManagementEventWatcher_WaitForNextEvent_\" data-linktype=\"relative-path\">WaitForNextEvent</a> method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher_Stop#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        WqlEventQuery query = \n            new WqlEventQuery(&quot;__InstanceCreationEvent&quot;, \n            new TimeSpan(0,0,1), \n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher();\n        watcher.Query = query;\n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher_Stop#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As New WqlEventQuery( _\n            &quot;__InstanceCreationEvent&quot;, _\n            New TimeSpan(0, 0, 1), _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;)\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher\n        watcher.Query = query\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_WaitForNextEvent\">\r\n    \r\n            <a id=\"System_Management_ManagementEventWatcher_WaitForNextEvent_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WaitForNextEvent()</div>        \r\n          </div>\r\n    \r\n            <p>Waits for the next event that matches the specified query to arrive, and then returns it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Management.ManagementBaseObject WaitForNextEvent ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.management.managementbaseobject\" data-linktype=\"relative-path\">ManagementBaseObject</a> representing the newly arrived event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the event watcher object contains options with a specified time-out, the API will wait for the next event only for the specified amount of time; otherwise, the API will be blocked until the next event occurs.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how the client receives notification when an instance of <strong>Win32_Process</strong> is created because the event class is <strong>__InstanceCreationEvent</strong>. For more information, see the Windows Management Instrumentation documentation in the MSDN Library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>. The client receives events synchronously by calling the WaitForNextEvent method. This example can be tested by starting a process, such as Notepad, while the example code is running.  </p>\n<pre><code class=\"lang-cs\" name=\"wminet_ManagementEventWatcher_WaitForNextEvent#1\">using System;\nusing System.Management;\n\n// This example shows synchronous consumption of events. \n// The client is blocked while waiting for events. \n\npublic class EventWatcherPolling \n{\n    public static int Main(string[] args) \n    {\n        // Create event query to be notified within 1 second of \n        // a change in a service\n        WqlEventQuery query = \n            new WqlEventQuery(&quot;__InstanceCreationEvent&quot;, \n            new TimeSpan(0,0,1), \n            &quot;TargetInstance isa \\&quot;Win32_Process\\&quot;&quot;);\n\n        // Initialize an event watcher and subscribe to events \n        // that match this query\n        ManagementEventWatcher watcher =\n            new ManagementEventWatcher();\n        watcher.Query = query;\n        // times out watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = new TimeSpan(0,0,5);\n      \n        // Block until the next event occurs \n        // Note: this can be done in a loop if waiting for \n        //        more than one occurrence\n        Console.WriteLine(\n            &quot;Open an application (notepad.exe) to trigger an event.&quot;);\n        ManagementBaseObject e = watcher.WaitForNextEvent();\n\n        //Display information from the event\n        Console.WriteLine(\n            &quot;Process {0} has been created, path is: {1}&quot;, \n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;Name&quot;],\n            ((ManagementBaseObject)e\n            [&quot;TargetInstance&quot;])[&quot;ExecutablePath&quot;]);\n\n        //Cancel the subscription\n        watcher.Stop();\n        return 0;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"wminet_ManagementEventWatcher_WaitForNextEvent#1\">Imports System\nImports System.Management\n\n&#39; This example shows synchronous consumption of events. \n&#39; The client is blocked while waiting for events. \n\nPublic Class EventWatcherPolling\n    Public Overloads Shared Function _\n        Main(ByVal args() As String) As Integer\n\n        &#39; Create event query to be notified within 1 second of \n        &#39; a change in a service\n        Dim query As New WqlEventQuery( _\n            &quot;__InstanceCreationEvent&quot;, _\n            New TimeSpan(0, 0, 1), _\n            &quot;TargetInstance isa &quot;&quot;Win32_Process&quot;&quot;&quot;)\n\n        &#39; Initialize an event watcher and subscribe to events \n        &#39; that match this query\n        Dim watcher As New ManagementEventWatcher\n        watcher.Query = query\n        &#39; times watcher.WaitForNextEvent in 5 seconds\n        watcher.Options.Timeout = New TimeSpan(0, 0, 5)\n\n        &#39; Block until the next event occurs \n        &#39; Note: this can be done in a loop\n        &#39; if waiting for more than one occurrence\n        Console.WriteLine( _\n          &quot;Open an application (notepad.exe) to trigger an event.&quot;)\n        Dim e As ManagementBaseObject = _\n            watcher.WaitForNextEvent()\n\n        &#39;Display information from the event\n        Console.WriteLine( _\n            &quot;Process {0} has created, path is: {1}&quot;, _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;Name&quot;), _\n            CType(e(&quot;TargetInstance&quot;), _\n                ManagementBaseObject)(&quot;ExecutablePath&quot;))\n\n        &#39;Cancel the subscription\n        watcher.Stop()\n        Return 0\n\n    End Function &#39;Main\nEnd Class &#39;EventWatcherPolling\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"events\">\r\n        <h2>Events\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_EventArrived\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EventArrived</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a new event arrives.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Management.EventArrivedEventHandler EventArrived;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"event-data\">Event Data</h2>\n<p> The event handler receives an argument of type <a class=\"xref\" href=\"system.management.eventarrivedeventargs\" data-linktype=\"relative-path\">EventArrivedEventArgs</a> containing data related to this event. The following <a class=\"xref\" href=\"system.management.eventarrivedeventargs\" data-linktype=\"relative-path\">EventArrivedEventArgs</a> properties provide information specific to this event.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.management.managementeventargs#System_Management_ManagementEventArgs_Context_\" data-linktype=\"relative-path\">Context</a> (inherited from <a class=\"xref\" href=\"system.management.managementeventargs\" data-linktype=\"relative-path\">ManagementEventArgs</a>)</td>\n<td>Gets the operation context echoed back from the operation that triggered the event.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.management.eventarrivedeventargs#System_Management_EventArrivedEventArgs_NewEvent_\" data-linktype=\"relative-path\">NewEvent</a></td>\n<td>Gets the WMI event that was delivered.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Management_ManagementEventWatcher_Stopped\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Stopped</div>        \r\n          </div>\r\n    \r\n            <p>Occurs when a subscription is canceled.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public event System.Management.StoppedEventHandler Stopped;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <h2 id=\"event-data\">Event Data</h2>\n<p> The event handler receives an argument of type <a class=\"xref\" href=\"system.management.stoppedeventargs\" data-linktype=\"relative-path\">StoppedEventArgs</a> containing data related to this event. The following <a class=\"xref\" href=\"system.management.stoppedeventargs\" data-linktype=\"relative-path\">StoppedEventArgs</a> properties provide information specific to this event.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.management.managementeventargs#System_Management_ManagementEventArgs_Context_\" data-linktype=\"relative-path\">Context</a> (inherited from <a class=\"xref\" href=\"system.management.managementeventargs\" data-linktype=\"relative-path\">ManagementEventArgs</a>)</td>\n<td>Gets the operation context echoed back from the operation that triggered the event.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.management.stoppedeventargs#System_Management_StoppedEventArgs_Status_\" data-linktype=\"relative-path\">Status</a></td>\n<td>Gets the completion status of the operation.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see <a href=\"../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md\" data-linktype=\"relative-path\">Using Libraries from Partially Trusted Code</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Management.ManagementEventWatcher.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Management.ManagementEventWatcher.yml\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher..ctor\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.EventArrived\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.add_EventArrived\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.remove_EventArrived\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Options\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Query\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Scope\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Start\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Stop\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.Stopped\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.add_Stopped\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.remove_Stopped\">\r\n<meta name=\"APIName\" content=\"System.Management.ManagementEventWatcher.WaitForNextEvent\">\r\n<meta name=\"APILocation\" content=\"System.Management.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"7de0b608-a00a-1b73-2680-6abc4e73a9a6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\o2y0\\s\\fulldocset\\xml\\System.Management\\ManagementEventWatcher.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Subscribes to temporary event notifications based on a specified event query.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Management/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Management.ManagementEventWatcher\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Management.ManagementEventWatcher.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Management.ManagementEventWatcher.yml","open_to_public_contributors":true,"api_name":["System.Management.ManagementEventWatcher","System.Management.ManagementEventWatcher..ctor","System.Management.ManagementEventWatcher.EventArrived","System.Management.ManagementEventWatcher.add_EventArrived","System.Management.ManagementEventWatcher.remove_EventArrived","System.Management.ManagementEventWatcher.Finalize","System.Management.ManagementEventWatcher.Options","System.Management.ManagementEventWatcher.Query","System.Management.ManagementEventWatcher.Scope","System.Management.ManagementEventWatcher.Start","System.Management.ManagementEventWatcher.Stop","System.Management.ManagementEventWatcher.Stopped","System.Management.ManagementEventWatcher.add_Stopped","System.Management.ManagementEventWatcher.remove_Stopped","System.Management.ManagementEventWatcher.WaitForNextEvent"],"api_location":["System.Management.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Management.ManagementEventWatcher","System::Management::ManagementEventWatcher","System.Management.ManagementEventWatcher.#ctor","System::Management::ManagementEventWatcher::#ctor","System.Management.ManagementEventWatcher.EventArrived","System::Management::ManagementEventWatcher::EventArrived","System.Management.ManagementEventWatcher.Finalize","System::Management::ManagementEventWatcher::Finalize","System.Management.ManagementEventWatcher.Options","System::Management::ManagementEventWatcher::Options","System.Management.ManagementEventWatcher.Query","System::Management::ManagementEventWatcher::Query","System.Management.ManagementEventWatcher.Scope","System::Management::ManagementEventWatcher::Scope","System.Management.ManagementEventWatcher.Start","System::Management::ManagementEventWatcher::Start","System.Management.ManagementEventWatcher.Stop","System::Management::ManagementEventWatcher::Stop","System.Management.ManagementEventWatcher.Stopped","System::Management::ManagementEventWatcher::Stopped","System.Management.ManagementEventWatcher.WaitForNextEvent","System::Management::ManagementEventWatcher::WaitForNextEvent"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"7de0b608-a00a-1b73-2680-6abc4e73a9a6","original_ecmaxml_local_path":"W:\\o2y0\\s\\fulldocset\\xml\\System.Management\\ManagementEventWatcher.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Management/ManagementEventWatcher.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ManagementEventWatcher class | Microsoft Docs","_op_ogTitle":"ManagementEventWatcher class","description":"Subscribes to temporary event notifications based on a specified event query.\n","toc_asset_id":"_splitted/System.Management/toc.json","toc_rel":"_splitted/System.Management/toc.json","source_url":"","ms.assetid":"System.Management.ManagementEventWatcher","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.management.managementeventwatcher","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.management.managementeventwatcher","fileRelativePath":"System.Management.ManagementEventWatcher.html"},"themesRelativePathToOutputRoot":"_themes/"}