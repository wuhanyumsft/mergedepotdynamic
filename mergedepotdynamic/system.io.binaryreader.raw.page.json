{"content":"    \r\n    <h1 id=\"System_IO_BinaryReader\">\r\n      <span class=\"lang-csharp\">BinaryReader</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Reads primitive data types as binary values in a specific encoding.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class BinaryReader : IDisposable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BinaryReader</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>The BinaryReader class provides methods that simplify reading primitive data types from a stream. For example, you can use the <a class=\"xref\" href=\"system.io.binaryreader#System_IO_BinaryReader_ReadBoolean_\" data-linktype=\"relative-path\">ReadBoolean</a> method to read the next byte as a Boolean value and advance the current position in the stream by one byte. The class includes read methods that support different data types.  </p>\n<p> When you create a new instance of the BinaryReader class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the BinaryReader object. If you do not specify an encoding type, UTF-8 is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the â€œUsing an Object that Implements IDisposableâ€ section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">BinaryReader(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class based on the specified stream and using UTF-8 encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader__ctor_System_IO_Stream_System_Text_Encoding_\" data-linktype=\"self-bookmark\">BinaryReader(Stream,Encoding)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class based on the specified stream and character encoding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_\" data-linktype=\"self-bookmark\">BinaryReader(Stream,Encoding,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_BaseStream\" data-linktype=\"self-bookmark\">BaseStream</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Exposes access to the underlying stream of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Close\" data-linktype=\"self-bookmark\">Close()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Closes the current reader and the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Dispose\" data-linktype=\"self-bookmark\">Dispose()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_FillBuffer_System_Int32_\" data-linktype=\"self-bookmark\">FillBuffer(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Fills the internal buffer with the specified number of bytes read from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_PeekChar\" data-linktype=\"self-bookmark\">PeekChar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the next available character and does not advance the byte or character position.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Read\" data-linktype=\"self-bookmark\">Read()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific character being read from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Read_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Read(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Read_System_Char___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Read(Char[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the specified number of characters from the stream, starting from a specified point in the character array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_Read7BitEncodedInt\" data-linktype=\"self-bookmark\">Read7BitEncodedInt()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads in a 32-bit integer in compressed format.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadBoolean\" data-linktype=\"self-bookmark\">ReadBoolean()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a <code>Boolean</code> value from the current stream and advances the current position of the stream by one byte.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadByte\" data-linktype=\"self-bookmark\">ReadByte()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next byte from the current stream and advances the current position of the stream by one byte.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadBytes_System_Int32_\" data-linktype=\"self-bookmark\">ReadBytes(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadChar\" data-linktype=\"self-bookmark\">ReadChar()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the next character from the current stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific character being read from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadChars_System_Int32_\" data-linktype=\"self-bookmark\">ReadChars(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <code>Encoding</code> used and the specific character being read from the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadDecimal\" data-linktype=\"self-bookmark\">ReadDecimal()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadDouble\" data-linktype=\"self-bookmark\">ReadDouble()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadInt16\" data-linktype=\"self-bookmark\">ReadInt16()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadInt32\" data-linktype=\"self-bookmark\">ReadInt32()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadInt64\" data-linktype=\"self-bookmark\">ReadInt64()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadSByte\" data-linktype=\"self-bookmark\">ReadSByte()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a signed byte from this stream and advances the current position of the stream by one byte.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadSingle\" data-linktype=\"self-bookmark\">ReadSingle()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadString\" data-linktype=\"self-bookmark\">ReadString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadUInt16\" data-linktype=\"self-bookmark\">ReadUInt16()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadUInt32\" data-linktype=\"self-bookmark\">ReadUInt32()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_IO_BinaryReader_ReadUInt64\" data-linktype=\"self-bookmark\">ReadUInt64()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryReader(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class based on the specified stream and using UTF-8 encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BinaryReader (System.IO.Stream input);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading, is <code>null</code>, or is already closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader__ctor_System_IO_Stream_System_Text_Encoding_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryReader(Stream,Encoding)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class based on the specified stream and character encoding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading, is <code>null</code>, or is already closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>encoding</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BinaryReader(Stream,Encoding,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>input</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The input stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>encoding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The character encoding to use.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>leaveOpen</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to leave the stream open after the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> object is disposed; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The stream does not support reading, is <code>null</code>, or is already closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>encoding</code> or <code>input</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_BaseStream\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_BaseStream_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BaseStream</div>        \r\n          </div>\r\n    \r\n            <p>Exposes access to the underlying stream of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.IO.Stream BaseStream { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </div>\r\n                  <p>The underlying stream associated with the <code>BinaryReader</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"CAUTION\"><h5>Caution</h5><p> Using the underlying stream while reading or while using the <code>BinaryReader</code> can cause data loss and corruption. For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.  </p>\n</div>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write <code>Double</code> data to memory by using the <code>BinaryReader</code> and <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> classes on top of the <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> class. <code>MemoryStream</code> only reads and writes <code>Byte</code> data.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   const int arrayLength = 1000;\n   \n   // Create random data to write to the stream.\n   array&lt;double&gt;^dataArray = gcnew array&lt;double&gt;(arrayLength);\n   Random^ randomGenerator = gcnew Random;\n   for ( i = 0; i &lt; arrayLength; i++ )\n   {\n      dataArray[ i ] = 100.1 * randomGenerator-&gt;NextDouble();\n\n   }\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   try\n   {\n      \n      // Write data to the stream.\n      Console::WriteLine( &quot;Writing data to the stream.&quot; );\n      i = 0;\n      for ( i = 0; i &lt; arrayLength; i++ )\n      {\n         binWriter-&gt;Write( dataArray[ i ] );\n\n      }\n      \n      // Create a reader using the stream from the writer.\n      BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n      \n      // Return to the beginning of the stream.\n      binReader-&gt;BaseStream-&gt;Position = 0;\n      try\n      {\n         \n         // Read and verify the data.\n         i = 0;\n         Console::WriteLine( &quot;Verifying the written data.&quot; );\n         for ( i = 0; i &lt; arrayLength; i++ )\n         {\n            if ( binReader-&gt;ReadDouble() != dataArray[ i ] )\n            {\n               Console::WriteLine( &quot;Error writing data.&quot; );\n               break;\n            }\n\n         }\n         Console::WriteLine( &quot;The data was written and verified.&quot; );\n      }\n      catch ( EndOfStreamException^ e ) \n      {\n         Console::WriteLine( &quot;Error writing data: {0}.&quot;, e-&gt;GetType()-&gt;Name );\n      }\n\n   }\n   finally\n   {\n      binWriter-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i;\n        const int arrayLength = 1000;\n\n        // Create random data to write to the stream.\n        Random randomGenerator = new Random();\n        double[] dataArray = new double[arrayLength];\n        for(i = 0; i &lt; arrayLength; i++)\n        {\n            dataArray[i] = 100.1 * randomGenerator.NextDouble();\n        }\n\n        using(BinaryWriter binWriter = \n            new BinaryWriter(new MemoryStream()))\n        {\n            // Write the data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;);\n            for(i = 0; i &lt; arrayLength; i++)\n            {\n                binWriter.Write(dataArray[i]);\n            }\n\n            // Create a reader using the stream from the writer.\n            using(BinaryReader binReader = \n                new BinaryReader(binWriter.BaseStream))\n            {\n                try\n                {\n                    // Return to the beginning of the stream.\n                    binReader.BaseStream.Position = 0;\n\n                    // Read and verify the data.\n                    Console.WriteLine(&quot;Verifying the written data.&quot;);\n                    for(i = 0; i &lt; arrayLength; i++)\n                    {\n                        if(binReader.ReadDouble() != dataArray[i])\n                        {\n                            Console.WriteLine(&quot;Error writing data.&quot;);\n                            break;\n                        }\n                    }\n                    Console.WriteLine(&quot;The data was written &quot; +\n                        &quot;and verified.&quot;);\n                }\n                catch(EndOfStreamException e)\n                {\n                    Console.WriteLine(&quot;Error writing data: {0}.&quot;,\n                        e.GetType().Name);\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer\n        Const upperBound As Integer = 1000\n\n        &#39; Create random data to write to the stream.\n        Dim dataArray(upperBound) As Double\n        Dim randomGenerator As New Random()\n        For i = 0 To upperBound\n            dataArray(i) = 100.1 * randomGenerator.NextDouble()\n        Next i\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n        Try\n\n            &#39; Write data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;)\n            \n            For i = 0 To upperBound\n                binWriter.Write(dataArray(i))\n            Next i\n\n            &#39; Create a reader using the stream from the writer.\n            Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n            &#39; Return to the beginning of the stream.\n            binReader.BaseStream.Position = 0\n\n            &#39; Read and verify the data.\n            Try\n                Console.WriteLine(&quot;Verifying the written data.&quot;)\n                For i = 0 To upperBound\n                    If binReader.ReadDouble() &lt;&gt; dataArray(i) Then\n                        Console.WriteLine(&quot;Error writing data.&quot;)\n                        Exit For\n                    End If\n                Next i\n                Console.WriteLine(&quot;The data was written and verified.&quot;)\n            Catch ex As EndOfStreamException\n                Console.WriteLine(&quot;Error writing data: {0}.&quot;, _\n                    ex.GetType().Name)\n            End Try\n        Finally\n            binWriter.Close()\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Close\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Close_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Close()</div>        \r\n          </div>\r\n    \r\n            <p>Closes the current reader and the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void Close ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This implementation of <code>Close</code> calls the <a class=\"xref\" href=\"system.io.binaryreader#System_IO_BinaryReader_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method passing a <code>true</code> value.  </p>\n<p> Flushing the stream will not flush its underlying encoder unless you explicitly call <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> or <code>Close</code>. Setting <a class=\"xref\" href=\"system.io.streamwriter#System_IO_StreamWriter_AutoFlush_\" data-linktype=\"relative-path\">AutoFlush</a> to <code>true</code> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Dispose\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose()</div>        \r\n          </div>\r\n    \r\n            <p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Dispose ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> was occupying.  </p>\n<p> For more information, see <a href=\"../Topic/Cleaning%20Up%20Unmanaged%20Resources.md\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../Topic/Implementing%20a%20Dispose%20Method.md\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> class and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by <code>Dispose</code> and <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a>. By default, this method specifies the <code>disposing</code> parameter as <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> specifies the <code>disposing</code> parameter as <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> references. This method invokes the <code>Dispose</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_FillBuffer_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_FillBuffer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FillBuffer(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Fills the internal buffer with the specified number of bytes read from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual void FillBuffer (int numBytes);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>numBytes</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to be read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached before <code>numBytes</code> could be read.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p>Requested <code>numBytes</code> is larger than the internal buffer size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The internal buffer size is the larger value between 16 and the value returned by <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> for the specified encoding.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_PeekChar\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_PeekChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PeekChar()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the next available character and does not advance the byte or character position.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int PeekChar ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The next available character, or -1 if no more characters are available or the stream does not support seeking.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The current character cannot be decoded into the internal character buffer by using the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> selected for the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If surrogate characters can be expected in the stream use the <a class=\"xref\" href=\"system.io.binaryreader#System_IO_BinaryReader_ReadChars_\" data-linktype=\"relative-path\">ReadChars</a> method, then set the stream back to the original position.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Read\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read()</div>        \r\n          </div>\r\n    \r\n            <p>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific character being read from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Read ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The next character from the input stream, or -1 if no characters are currently available.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to read and write data using memory as a backing store. This example displays a list of invalid file path characters to the console. Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters. Because the list of invalid characters can vary based on the system, output for this code may also vary.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChar2#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i = 0;\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        for(i = 0; i &lt; invalidPathChars.Length; i++)\n        {\n            binWriter.Write(invalidPathChars[i]);\n        }\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        char[] memoryData = \n            new char[memStream.Length - memStream.Position];\n        for(i = 0; i &lt; memoryData.Length; i++)\n        {\n            memoryData[i] = Convert.ToChar(binReader.Read());\n        }\n        Console.WriteLine(memoryData);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChar2#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer = 0\n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        For i = 0 To invalidPathChars.Length - 1\n            binWriter.Write(invalidPathChars(i))\n        Next i\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Dim memoryData( _\n            CInt(memStream.Length - memStream.Position) - 1) As Char\n        For i = 0 To memoryData.Length - 1\n            memoryData(i) = Convert.ToChar(binReader.Read())\n        Next i\n        Console.WriteLine(memoryData)\n    \n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChar2#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   for ( i = 0; i &lt; invalidPathChars-&gt;Length; i++ )\n   {\n      binWriter-&gt;Write( invalidPathChars[ i ] );\n\n   }\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   array&lt;Char&gt;^memoryData = gcnew array&lt;Char&gt;(memStream-&gt;Length - memStream-&gt;Position);\n   for ( i = 0; i &lt; memoryData-&gt;Length; i++ )\n   {\n      memoryData[ i ] = Convert::ToChar( binReader-&gt;Read() );\n\n   }\n   Console::WriteLine( memoryData );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Read_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Read (byte[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to read data into.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting point in the buffer at which to begin reading into the buffer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of bytes read into <code>buffer</code>. This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The buffer length minus <code>index</code> is less than <code>count</code>.  </p>\n<p> -or-  </p>\n<p> The number of decoded characters to read is greater than <code>count</code>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read operation.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to write binary data by using memory as a backing store. It displays a message to the console that indicates whether the data was written correctly.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWBytes2#1\">using System;\nusing System.IO;\n\nnamespace BinaryRW\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int arrayLength = 1000;\n            byte[] dataArray = new byte[arrayLength];\n            byte[] verifyArray = new byte[arrayLength];\n\n            new Random().NextBytes(dataArray);\n\n            using (BinaryWriter binWriter = new BinaryWriter(new MemoryStream()))\n            {\n                Console.WriteLine(&quot;Writing the data.&quot;);\n                binWriter.Write(dataArray, 0, arrayLength);\n\n                using (BinaryReader binReader = new BinaryReader(binWriter.BaseStream))\n                {\n                    binReader.BaseStream.Position = 0;\n                    \n                    if (binReader.Read(verifyArray, 0, arrayLength) != arrayLength)\n                    {\n                        Console.WriteLine(&quot;Error writing the data.&quot;);\n                        return;\n                    }\n                }\n            }\n\n            for (int i = 0; i &lt; arrayLength; i++)\n            {\n                if (verifyArray[i] != dataArray[i])\n                {\n                    Console.WriteLine(&quot;Error writing the data.&quot;);\n                    return;\n                }\n            }\n\n            Console.WriteLine(&quot;The data was written and verified.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWBytes2#1\">Imports System.IO\n\nModule Module1\n\n    Sub Main()\n        Const upperBound As Integer = 1000\n        Dim dataArray(upperBound) As Byte\n        Dim verifyArray(upperBound) As Byte\n\n        Dim randomGenerator As New Random\n        randomGenerator.NextBytes(dataArray)\n\n        Using binWriter As New BinaryWriter(New MemoryStream())\n            Console.WriteLine(&quot;Writing the data.&quot;)\n            binWriter.Write(dataArray, 0, dataArray.Length)\n\n            Using binReader As New BinaryReader(binWriter.BaseStream)\n                binReader.BaseStream.Position = 0\n\n                If binReader.Read(verifyArray, 0, dataArray.Length) &lt;&gt; dataArray.Length Then\n                    Console.WriteLine(&quot;Error writing the data.&quot;)\n                    Return\n                End If\n            End Using\n        End Using\n\n        For i As Integer = 0 To upperBound\n            If verifyArray(i) &lt;&gt; dataArray(i) Then\n                Console.WriteLine(&quot;Error writing the data.&quot;)\n                Return\n            End If\n        Next i\n\n        Console.WriteLine(&quot;The data was written and verified.&quot;)\n    End Sub\n\nEnd Module\n</code></pre><p> This example reads the contents of a file and displays each byte&#39;s numeric value in 16-column format. The end of the file that is being read is detected when the Read method returns zero bytes.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#6\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class DumpFileSample\n{\n    private static readonly int CHUNK_SIZE = 1024;\n    public static void Main(String[] args)\n    {\n        if ((args.Length == 0) || !File.Exists(args[0]))\n        {\n            Console.WriteLine(&quot;Please provide an existing file name.&quot;);\n        }\n        else\n        {\n            using (FileStream fs = new FileStream(args[0], FileMode.Open, FileAccess.Read))\n            {\n                using (BinaryReader br = new BinaryReader(fs, new ASCIIEncoding()))\n                {\n                    byte[] chunk;\n\n                    chunk = br.ReadBytes(CHUNK_SIZE);\n                    while(chunk.Length &gt; 0)\n                    {\n                        DumpBytes(chunk, chunk.Length);\n                        chunk = br.ReadBytes(CHUNK_SIZE);\n                    }\n                }\n            }\n        }\n    }\n\n    public static void DumpBytes(byte[] bdata, int len)\n    {\n        int i;\n        int j = 0;\n        char dchar;\n        // 3 * 16 chars for hex display, 16 chars for text and 8 chars\n        // for the &#39;gutter&#39; int the middle.\n        StringBuilder dumptext = new StringBuilder(&quot;        &quot;, 16 * 4 + 8);\n        for (i = 0; i &lt; len; i++)\n        {\n            dumptext.Insert(j * 3, String.Format(&quot;{0:X2} &quot;, (int)bdata[i]));\n            dchar = (char)bdata[i];\n            //&#39; replace &#39;non-printable&#39; chars with a &#39;.&#39;.\n            if (Char.IsWhiteSpace(dchar) || Char.IsControl(dchar))\n            {\n                dchar = &#39;.&#39;;\n            }\n            dumptext.Append(dchar);\n            j++;\n            if (j == 16)\n            {\n                Console.WriteLine(dumptext);\n                dumptext.Length = 0;\n                dumptext.Append(&quot;        &quot;);\n                j = 0;\n            }\n        }\n        // display the remaining line\n        if (j &gt; 0)\n        {\n            for (i = j; i &lt; 16; i++)\n            {\n                dumptext.Insert(j * 3, &quot;   &quot;);\n            }\n            Console.WriteLine(dumptext);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#6\">Imports System\nImports System.IO\nImports System.Text\n\nModule Module1\n    Private ReadOnly CHUNK_SIZE As Integer = 1024\n    Public Sub Main(args() As String)\n        If ((args.Length = 0) OrElse Not File.Exists(args(0))) Then\n            Console.WriteLine(&quot;Please provide an existing file name.&quot;)\n        Else\n            Using fs As FileStream = New FileStream(args(0), FileMode.Open, FileAccess.Read)\n                Using br As New BinaryReader(fs, New ASCIIEncoding())\n                    Dim chunk(CHUNK_SIZE) As Byte\n                    chunk = br.ReadBytes(CHUNK_SIZE)\n\n                    While chunk.Length &gt; 0\n                        DumpBytes(chunk, chunk.Length)\n                        chunk = br.ReadBytes(CHUNK_SIZE)\n                    End While\n                End Using\n            End Using\n        End If\n    End Sub\n\n    Public Sub DumpBytes(bdata() As Byte, len As Integer)\n        Dim i As Integer\n        Dim j As Integer = 0\n        Dim dchar As Char\n        &#39; 3 * 16 chars for hex display, 16 chars for text and 8 chars\n        &#39; for the &#39;gutter&#39; int the middle.\n        Dim dumptext As New StringBuilder(&quot;        &quot;, 16 * 4 + 8)\n        For i = 0 To len - 1\n            dumptext.Insert(j * 3, String.Format(&quot;{0:X2} &quot;, CType(bdata(i), Integer)))\n            dchar = Convert.ToChar(bdata(i))\n            &#39; replace &#39;non-printable&#39; chars with a &#39;.&#39;.\n            If Char.IsWhiteSpace(dchar) Or Char.IsControl(dchar) Then\n                dchar = &quot;.&quot;\n            End If\n            dumptext.Append(dchar)\n            j += 1\n            If j = 16 Then\n                Console.WriteLine(dumptext)\n                dumptext.Length = 0\n                dumptext.Append(&quot;        &quot;)\n                j = 0\n            End If\n        Next i\n        &#39; display the remaining line\n        If j &gt; 0 Then\n            &#39; add blank hex spots to align the &#39;gutter&#39;.\n            For i = j To 15\n                dumptext.Insert(j * 3, &quot;   &quot;)\n            Next i\n            Console.WriteLine(dumptext)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Read_System_Char___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(Char[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the specified number of characters from the stream, starting from a specified point in the character array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Read (char[] buffer, int index, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The buffer to read data into.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The starting point in the buffer at which to begin reading into the buffer.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The buffer length minus <code>index</code> is less than <code>count</code>.  </p>\n<p> -or-  </p>\n<p> The number of decoded characters to read is greater than <code>count</code>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> or <code>count</code> is negative.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read operation.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to read and write data using memory as a backing store. This example displays a list of invalid file path characters to the console. Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters. Because the list of invalid characters can vary based on the system, output for this code may also vary.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChars2#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        binWriter.Write(\n            Path.InvalidPathChars, 0, Path.InvalidPathChars.Length);\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        int arraySize = (int)(memStream.Length - memStream.Position);\n        char[] memoryData = new char[arraySize];\n        binReader.Read(memoryData, 0, arraySize);\n        Console.WriteLine(memoryData);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChars2#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   binWriter-&gt;Write( Path::InvalidPathChars, 0, Path::InvalidPathChars-&gt;Length );\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   int arraySize = (int)(memStream-&gt;Length - memStream-&gt;Position);\n   array&lt;Char&gt;^memoryData = gcnew array&lt;Char&gt;(arraySize);\n   binReader-&gt;Read( memoryData, 0, arraySize );\n   Console::WriteLine( memoryData );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChars2#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        binWriter.Write(Path.InvalidPathChars, 0, _\n            Path.InvalidPathChars.Length)\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Dim upperBound As Integer = _\n            CInt(memStream.Length - memStream.Position) - 1\n        Dim memoryData(upperBound) As Char\n        binReader.Read(memoryData, 0, upperBound)\n        Console.WriteLine(memoryData)\n    \n\tEnd Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_Read7BitEncodedInt\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_Read7BitEncodedInt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read7BitEncodedInt()</div>        \r\n          </div>\r\n    \r\n            <p>Reads in a 32-bit integer in compressed format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected int Read7BitEncodedInt ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 32-bit integer in compressed format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.formatexception\" data-linktype=\"relative-path\">FormatException</a></div>\r\n                  </div>\r\n                  <p>The stream is corrupted.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> If the integer will fit in seven bits, the integer takes only one byte of space. The integer is expected to have been written through <a class=\"xref\" href=\"system.io.binarywriter#System_IO_BinaryWriter_Write7BitEncodedInt_\" data-linktype=\"relative-path\">Write7BitEncodedInt</a>.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadBoolean\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadBoolean_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadBoolean()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a <code>Boolean</code> value from the current stream and advances the current position of the stream by one byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadBoolean ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the byte is nonzero; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadByte\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadByte()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next byte from the current stream and advances the current position of the stream by one byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte ReadByte ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a></div>\r\n                  </div>\r\n                  <p>The next byte read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> Because of data formatting conflicts, using this method with the following encodings is not recommended:  </p>\n<ul>\n<li><p>UTF-7  </p>\n</li>\n<li><p>ISO-2022-JP  </p>\n</li>\n<li><p>ISCII  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWByte#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i = 0;\n   \n   // Create random data to write to the stream.\n   array&lt;Byte&gt;^writeArray = gcnew array&lt;Byte&gt;(1000);\n   (gcnew Random)-&gt;NextBytes( writeArray );\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n   try\n   {\n      \n      // Write the data to the stream.\n      Console::WriteLine( &quot;Writing the data.&quot; );\n      for ( i = 0; i &lt; writeArray-&gt;Length; i++ )\n      {\n         binWriter-&gt;Write( writeArray[ i ] );\n\n      }\n      \n      // Set the stream position to the beginning of the stream.\n      binReader-&gt;BaseStream-&gt;Position = 0;\n      \n      // Read and verify the data from the stream.\n      for ( i = 0; i &lt; writeArray-&gt;Length; i++ )\n      {\n         if ( binReader-&gt;ReadByte() != writeArray[ i ] )\n         {\n            Console::WriteLine( &quot;Error writing the data.&quot; );\n            return  -1;\n         }\n\n      }\n      Console::WriteLine( &quot;The data was written and verified.&quot; );\n   }\n   // Catch the EndOfStreamException and write an error message.\n   catch ( EndOfStreamException^ e ) \n   {\n      Console::WriteLine( &quot;Error writing the data.<br>{0}&quot;, e-&gt;GetType()-&gt;Name );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWByte#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i = 0;\n\n        // Create random data to write to the stream.\n        byte[] writeArray = new byte[1000];\n        new Random().NextBytes(writeArray);\n\n        BinaryWriter binWriter = new BinaryWriter(new MemoryStream());\n        BinaryReader binReader = \n            new BinaryReader(binWriter.BaseStream);\n\n        try\n        {\n            // Write the data to the stream.\n            Console.WriteLine(&quot;Writing the data.&quot;);\n            for(i = 0; i &lt; writeArray.Length; i++)\n            {\n                binWriter.Write(writeArray[i]);\n            }\n\n            // Set the stream position to the beginning of the stream.\n            binReader.BaseStream.Position = 0;\n\n            // Read and verify the data from the stream.\n            for(i = 0; i &lt; writeArray.Length; i++)\n            {\n                if(binReader.ReadByte() != writeArray[i])\n                {\n                    Console.WriteLine(&quot;Error writing the data.&quot;);\n                    return;\n                }\n            }\n            Console.WriteLine(&quot;The data was written and verified.&quot;);\n        }\n\n        // Catch the EndOfStreamException and write an error message.\n        catch(EndOfStreamException e)\n        {\n            Console.WriteLine(&quot;Error writing the data.<br>{0}&quot;,\n                e.GetType().Name);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWByte#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer = 0\n\n        &#39; Create random data to write to the stream.\n        Dim writeArray(1000) As Byte\n        Dim randomGenerator As New Random()\n        randomGenerator.NextBytes(writeArray)\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n        Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n        Try\n        \n            &#39; Write the data to the stream.\n            Console.WriteLine(&quot;Writing the data.&quot;)\n            For i = 0 To writeArray.Length - 1\n                binWriter.Write(writeArray(i))\n            Next i\n\n            &#39; Set the stream position to the beginning of the stream.\n            binReader.BaseStream.Position = 0\n\n            &#39; Read and verify the data from the stream.\n            For i = 0 To writeArray.Length - 1\n                If binReader.ReadByte() &lt;&gt; writeArray(i) Then\n                    Console.WriteLine(&quot;Error writing the data.&quot;)\n                    Return\n                End If\n            Next i\n            Console.WriteLine(&quot;The data was written and verified.&quot;)\n\n        &#39; Catch the EndOfStreamException and write an error message.\n        Catch ex As EndOfStreamException\n            Console.WriteLine(&quot;Error writing the data: {0}&quot;, _\n                ex.GetType().Name)\n        End Try\n    \n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadBytes_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadBytes(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual byte[] ReadBytes (int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of decoded characters to read is greater than <code>count</code>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read operation.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWBytes1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   const int arrayLength = 1000;\n   \n   // Create random data to write to the stream.\n   array&lt;Byte&gt;^dataArray = gcnew array&lt;Byte&gt;(arrayLength);\n   (gcnew Random)-&gt;NextBytes( dataArray );\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   \n   // Write the data to the stream.\n   Console::WriteLine(  &quot;Writing the data.&quot; );\n   binWriter-&gt;Write( dataArray );\n   \n   // Create the reader using the stream from the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n   \n   // Set the stream position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read and verify the data.\n   array&lt;Byte&gt;^verifyArray = binReader-&gt;ReadBytes( arrayLength );\n   if ( verifyArray-&gt;Length != arrayLength )\n   {\n      Console::WriteLine( &quot;Error writing the data.&quot; );\n      return  -1;\n   }\n\n   for ( int i = 0; i &lt; arrayLength; i++ )\n   {\n      if ( verifyArray[ i ] != dataArray[ i ] )\n      {\n         Console::WriteLine( &quot;Error writing the data.&quot; );\n         return  -1;\n      }\n\n   }\n   Console::WriteLine( &quot;The data was written and verified.&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWBytes1#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Const upperBound As Integer = 1000\n\n        &#39; Create random data to write to the stream.\n        Dim dataArray(upperBound) As Byte\n        Dim randomGenerator As New Random\n        randomGenerator.NextBytes(dataArray)\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n\n        &#39; Write the data to the stream.\n        Console.WriteLine(&quot;Writing the data.&quot;)\n        binWriter.Write(dataArray)\n\n        &#39; Create the reader using the stream from the writer.\n        Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n        &#39; Set the stream position to the beginning of the stream.\n        binReader.BaseStream.Position = 0\n\n        &#39; Read and verify the data.\n        Dim verifyArray() As Byte = _\n            binReader.ReadBytes(dataArray.Length)\n        If verifyArray.Length &lt;&gt; dataArray.Length Then\n            Console.WriteLine(&quot;Error writing the data.&quot;)\n            Return\n        End If\n        For i As Integer = 0 To upperBound\n            If verifyArray(i) &lt;&gt; dataArray(i) Then\n                Console.WriteLine(&quot;Error writing the data.&quot;)\n                Return\n            End If\n        Next i\n        Console.WriteLine(&quot;The data was written and verified.&quot;)\n    \n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWBytes1#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        const int arrayLength = 1000;\n\n        // Create random data to write to the stream.\n        byte[] dataArray = new byte[arrayLength];\n        new Random().NextBytes(dataArray);\n\n        BinaryWriter binWriter = new BinaryWriter(new MemoryStream());\n\n        // Write the data to the stream.\n        Console.WriteLine(&quot;Writing the data.&quot;);\n        binWriter.Write(dataArray);\n\n        // Create the reader using the stream from the writer.\n        BinaryReader binReader = \n            new BinaryReader(binWriter.BaseStream);\n\n        // Set Position to the beginning of the stream.\n        binReader.BaseStream.Position = 0;\n\n        // Read and verify the data.\n        byte[] verifyArray = binReader.ReadBytes(arrayLength);\n        if(verifyArray.Length != arrayLength)\n        {\n            Console.WriteLine(&quot;Error writing the data.&quot;);\n            return;\n        }\n        for(int i = 0; i &lt; arrayLength; i++)\n        {\n            if(verifyArray[i] != dataArray[i])\n            {\n                Console.WriteLine(&quot;Error writing the data.&quot;);\n                return;\n            }\n        }\n        Console.WriteLine(&quot;The data was written and verified.&quot;);\n    }\n}\n</code></pre><p> This example reads the contents of a file and displays it to the console as dump text. The end of the file that is being read is detected when the length of the <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array returned from ReadBytes is zero.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#6\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class DumpFileSample\n{\n    private static readonly int CHUNK_SIZE = 1024;\n    public static void Main(String[] args)\n    {\n        if ((args.Length == 0) || !File.Exists(args[0]))\n        {\n            Console.WriteLine(&quot;Please provide an existing file name.&quot;);\n        }\n        else\n        {\n            using (FileStream fs = new FileStream(args[0], FileMode.Open, FileAccess.Read))\n            {\n                using (BinaryReader br = new BinaryReader(fs, new ASCIIEncoding()))\n                {\n                    byte[] chunk;\n\n                    chunk = br.ReadBytes(CHUNK_SIZE);\n                    while(chunk.Length &gt; 0)\n                    {\n                        DumpBytes(chunk, chunk.Length);\n                        chunk = br.ReadBytes(CHUNK_SIZE);\n                    }\n                }\n            }\n        }\n    }\n\n    public static void DumpBytes(byte[] bdata, int len)\n    {\n        int i;\n        int j = 0;\n        char dchar;\n        // 3 * 16 chars for hex display, 16 chars for text and 8 chars\n        // for the &#39;gutter&#39; int the middle.\n        StringBuilder dumptext = new StringBuilder(&quot;        &quot;, 16 * 4 + 8);\n        for (i = 0; i &lt; len; i++)\n        {\n            dumptext.Insert(j * 3, String.Format(&quot;{0:X2} &quot;, (int)bdata[i]));\n            dchar = (char)bdata[i];\n            //&#39; replace &#39;non-printable&#39; chars with a &#39;.&#39;.\n            if (Char.IsWhiteSpace(dchar) || Char.IsControl(dchar))\n            {\n                dchar = &#39;.&#39;;\n            }\n            dumptext.Append(dchar);\n            j++;\n            if (j == 16)\n            {\n                Console.WriteLine(dumptext);\n                dumptext.Length = 0;\n                dumptext.Append(&quot;        &quot;);\n                j = 0;\n            }\n        }\n        // display the remaining line\n        if (j &gt; 0)\n        {\n            for (i = j; i &lt; 16; i++)\n            {\n                dumptext.Insert(j * 3, &quot;   &quot;);\n            }\n            Console.WriteLine(dumptext);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#6\">Imports System\nImports System.IO\nImports System.Text\n\nModule Module1\n    Private ReadOnly CHUNK_SIZE As Integer = 1024\n    Public Sub Main(args() As String)\n        If ((args.Length = 0) OrElse Not File.Exists(args(0))) Then\n            Console.WriteLine(&quot;Please provide an existing file name.&quot;)\n        Else\n            Using fs As FileStream = New FileStream(args(0), FileMode.Open, FileAccess.Read)\n                Using br As New BinaryReader(fs, New ASCIIEncoding())\n                    Dim chunk(CHUNK_SIZE) As Byte\n                    chunk = br.ReadBytes(CHUNK_SIZE)\n\n                    While chunk.Length &gt; 0\n                        DumpBytes(chunk, chunk.Length)\n                        chunk = br.ReadBytes(CHUNK_SIZE)\n                    End While\n                End Using\n            End Using\n        End If\n    End Sub\n\n    Public Sub DumpBytes(bdata() As Byte, len As Integer)\n        Dim i As Integer\n        Dim j As Integer = 0\n        Dim dchar As Char\n        &#39; 3 * 16 chars for hex display, 16 chars for text and 8 chars\n        &#39; for the &#39;gutter&#39; int the middle.\n        Dim dumptext As New StringBuilder(&quot;        &quot;, 16 * 4 + 8)\n        For i = 0 To len - 1\n            dumptext.Insert(j * 3, String.Format(&quot;{0:X2} &quot;, CType(bdata(i), Integer)))\n            dchar = Convert.ToChar(bdata(i))\n            &#39; replace &#39;non-printable&#39; chars with a &#39;.&#39;.\n            If Char.IsWhiteSpace(dchar) Or Char.IsControl(dchar) Then\n                dchar = &quot;.&quot;\n            End If\n            dumptext.Append(dchar)\n            j += 1\n            If j = 16 Then\n                Console.WriteLine(dumptext)\n                dumptext.Length = 0\n                dumptext.Append(&quot;        &quot;)\n                j = 0\n            End If\n        Next i\n        &#39; display the remaining line\n        If j &gt; 0 Then\n            &#39; add blank hex spots to align the &#39;gutter&#39;.\n            For i = j To 15\n                dumptext.Insert(j * 3, &quot;   &quot;)\n            Next i\n            Console.WriteLine(dumptext)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadChar\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadChar_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadChar()</div>        \r\n          </div>\r\n    \r\n            <p>Reads the next character from the current stream and advances the current position of the stream in accordance with the <code>Encoding</code> used and the specific character being read from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char ReadChar ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a></div>\r\n                  </div>\r\n                  <p>A character read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>A surrogate character was read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the ReadChar method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance. The position is restored to the original location before ReadChar was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected. If surrogate characters can be expected in the stream, use the <a class=\"xref\" href=\"system.io.binaryreader#System_IO_BinaryReader_ReadChars_\" data-linktype=\"relative-path\">ReadChars</a> method instead.  </p>\n<p> Because of data formatting conflicts, using this method with the following encodings is not recommended:  </p>\n<ul>\n<li><p>UTF-7  </p>\n</li>\n<li><p>ISO-2022-JP  </p>\n</li>\n<li><p>ISCII  </p>\n<p>For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write data using memory as a backing store.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChar1#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i = 0;\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        for(i = 0; i &lt; invalidPathChars.Length; i++)\n        {\n            binWriter.Write(invalidPathChars[i]);\n        }\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        char[] memoryData = \n            new char[memStream.Length - memStream.Position];\n        for(i = 0; i &lt; memoryData.Length; i++)\n        {\n            memoryData[i] = binReader.ReadChar();\n        }\n        Console.WriteLine(memoryData);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChar1#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer = 0\n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        For i = 0 To invalidPathChars.Length - 1\n            binWriter.Write(invalidPathChars(i))\n        Next i\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Dim memoryData( _\n            CInt(memStream.Length - memStream.Position) - 1) As Char\n        For i = 0 To memoryData.Length - 1\n            memoryData(i) = binReader.ReadChar()\n        Next i\n        Console.WriteLine(memoryData)\n    \n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChar1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   for ( i = 0; i &lt; invalidPathChars-&gt;Length; i++ )\n   {\n      binWriter-&gt;Write( invalidPathChars[ i ] );\n\n   }\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   array&lt;Char&gt;^memoryData = gcnew array&lt;Char&gt;(memStream-&gt;Length - memStream-&gt;Position);\n   for ( i = 0; i &lt; memoryData-&gt;Length; i++ )\n   {\n      memoryData[ i ] = binReader-&gt;ReadChar();\n\n   }\n   Console::WriteLine( memoryData );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadChars_System_Int32_\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadChars_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadChars(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <code>Encoding</code> used and the specific character being read from the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual char[] ReadChars (int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of characters to read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</div>\r\n                  </div>\r\n                  <p>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of decoded characters to read is greater than <code>count</code>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>count</code> is negative.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read operation.  </p>\n<p> When reading from network streams, in some rare cases, the ReadChars method might read an extra character from the stream if the <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> was constructed with Unicode encoding. If this occurs, you can use the <a class=\"xref\" href=\"system.io.binaryreader#System_IO_BinaryReader_ReadBytes_\" data-linktype=\"relative-path\">ReadBytes</a> method to read a fixed-length byte array, and then pass that array to the ReadChars method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write data using memory as a backing store.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWChars1#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   array&lt;Char&gt;^invalidPathChars = Path::InvalidPathChars;\n   MemoryStream^ memStream = gcnew MemoryStream;\n   BinaryWriter^ binWriter = gcnew BinaryWriter( memStream );\n   \n   // Write to memory.\n   binWriter-&gt;Write( &quot;Invalid file path characters are: &quot; );\n   binWriter-&gt;Write( Path::InvalidPathChars );\n   \n   // Create the reader using the same MemoryStream \n   // as used with the writer.\n   BinaryReader^ binReader = gcnew BinaryReader( memStream );\n   \n   // Set Position to the beginning of the stream.\n   binReader-&gt;BaseStream-&gt;Position = 0;\n   \n   // Read the data from memory and write it to the console.\n   Console::Write( binReader-&gt;ReadString() );\n   Console::WriteLine( binReader-&gt;ReadChars( (int)(memStream-&gt;Length - memStream-&gt;Position) ) );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWChars1#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim invalidPathChars() As Char = Path.InvalidPathChars\n        Dim memStream As new MemoryStream()\n        Dim binWriter As New BinaryWriter(memStream)\n\n        &#39; Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;)\n        binWriter.Write(Path.InvalidPathChars)\n\n        &#39; Create the reader using the same MemoryStream \n        &#39; as used with the writer.\n        Dim binReader As New BinaryReader(memStream)\n\n        &#39; Set Position to the beginning of the stream.\n        memStream.Position = 0\n\n        &#39; Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString())\n        Console.WriteLine(binReader.ReadChars( _\n            CInt(memStream.Length - memStream.Position)))\n    \n\tEnd Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWChars1#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        char[] invalidPathChars = Path.InvalidPathChars;\n        MemoryStream memStream = new MemoryStream();\n        BinaryWriter binWriter = new BinaryWriter(memStream);\n\n        // Write to memory.\n        binWriter.Write(&quot;Invalid file path characters are: &quot;);\n        binWriter.Write(Path.InvalidPathChars);\n\n        // Create the reader using the same MemoryStream \n        // as used with the writer.\n        BinaryReader binReader = new BinaryReader(memStream);\n\n        // Set Position to the beginning of the stream.\n        memStream.Position = 0;\n\n        // Read the data from memory and write it to the console.\n        Console.Write(binReader.ReadString());\n        Console.WriteLine(binReader.ReadChars(\n            (int)(memStream.Length - memStream.Position)));\n    }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadDecimal\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadDecimal_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadDecimal()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual decimal ReadDecimal ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.decimal\" data-linktype=\"relative-path\">Decimal</a></div>\r\n                  </div>\r\n                  <p>A decimal value read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadDouble\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadDouble_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadDouble()</div>        \r\n          </div>\r\n    \r\n            <p>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual double ReadDouble ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>An 8-byte floating point value read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to read and write <code>Double</code> data to memory by using the <code>BinaryReader</code> and <a class=\"xref\" href=\"system.io.binarywriter\" data-linktype=\"relative-path\">BinaryWriter</a> classes on top of the <a class=\"xref\" href=\"system.io.memorystream\" data-linktype=\"relative-path\">MemoryStream</a> class. <code>MemoryStream</code> only reads and writes <code>Byte</code> data.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using namespace System;\nusing namespace System::IO;\nint main()\n{\n   int i;\n   const int arrayLength = 1000;\n   \n   // Create random data to write to the stream.\n   array&lt;double&gt;^dataArray = gcnew array&lt;double&gt;(arrayLength);\n   Random^ randomGenerator = gcnew Random;\n   for ( i = 0; i &lt; arrayLength; i++ )\n   {\n      dataArray[ i ] = 100.1 * randomGenerator-&gt;NextDouble();\n\n   }\n   BinaryWriter^ binWriter = gcnew BinaryWriter( gcnew MemoryStream );\n   try\n   {\n      \n      // Write data to the stream.\n      Console::WriteLine( &quot;Writing data to the stream.&quot; );\n      i = 0;\n      for ( i = 0; i &lt; arrayLength; i++ )\n      {\n         binWriter-&gt;Write( dataArray[ i ] );\n\n      }\n      \n      // Create a reader using the stream from the writer.\n      BinaryReader^ binReader = gcnew BinaryReader( binWriter-&gt;BaseStream );\n      \n      // Return to the beginning of the stream.\n      binReader-&gt;BaseStream-&gt;Position = 0;\n      try\n      {\n         \n         // Read and verify the data.\n         i = 0;\n         Console::WriteLine( &quot;Verifying the written data.&quot; );\n         for ( i = 0; i &lt; arrayLength; i++ )\n         {\n            if ( binReader-&gt;ReadDouble() != dataArray[ i ] )\n            {\n               Console::WriteLine( &quot;Error writing data.&quot; );\n               break;\n            }\n\n         }\n         Console::WriteLine( &quot;The data was written and verified.&quot; );\n      }\n      catch ( EndOfStreamException^ e ) \n      {\n         Console::WriteLine( &quot;Error writing data: {0}.&quot;, e-&gt;GetType()-&gt;Name );\n      }\n\n   }\n   finally\n   {\n      binWriter-&gt;Close();\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">using System;\nusing System.IO;\n\nclass BinaryRW\n{\n    static void Main()\n    {\n        int i;\n        const int arrayLength = 1000;\n\n        // Create random data to write to the stream.\n        Random randomGenerator = new Random();\n        double[] dataArray = new double[arrayLength];\n        for(i = 0; i &lt; arrayLength; i++)\n        {\n            dataArray[i] = 100.1 * randomGenerator.NextDouble();\n        }\n\n        using(BinaryWriter binWriter = \n            new BinaryWriter(new MemoryStream()))\n        {\n            // Write the data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;);\n            for(i = 0; i &lt; arrayLength; i++)\n            {\n                binWriter.Write(dataArray[i]);\n            }\n\n            // Create a reader using the stream from the writer.\n            using(BinaryReader binReader = \n                new BinaryReader(binWriter.BaseStream))\n            {\n                try\n                {\n                    // Return to the beginning of the stream.\n                    binReader.BaseStream.Position = 0;\n\n                    // Read and verify the data.\n                    Console.WriteLine(&quot;Verifying the written data.&quot;);\n                    for(i = 0; i &lt; arrayLength; i++)\n                    {\n                        if(binReader.ReadDouble() != dataArray[i])\n                        {\n                            Console.WriteLine(&quot;Error writing data.&quot;);\n                            break;\n                        }\n                    }\n                    Console.WriteLine(&quot;The data was written &quot; +\n                        &quot;and verified.&quot;);\n                }\n                catch(EndOfStreamException e)\n                {\n                    Console.WriteLine(&quot;Error writing data: {0}.&quot;,\n                        e.GetType().Name);\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter.RWDouble#1\">Imports System\nImports System.IO\n\nPublic Class BinaryRW\n\n    Shared Sub Main()\n    \n        Dim i As Integer\n        Const upperBound As Integer = 1000\n\n        &#39; Create random data to write to the stream.\n        Dim dataArray(upperBound) As Double\n        Dim randomGenerator As New Random()\n        For i = 0 To upperBound\n            dataArray(i) = 100.1 * randomGenerator.NextDouble()\n        Next i\n\n        Dim binWriter As New BinaryWriter(New MemoryStream())\n        Try\n\n            &#39; Write data to the stream.\n            Console.WriteLine(&quot;Writing data to the stream.&quot;)\n            \n            For i = 0 To upperBound\n                binWriter.Write(dataArray(i))\n            Next i\n\n            &#39; Create a reader using the stream from the writer.\n            Dim binReader As New BinaryReader(binWriter.BaseStream)\n\n            &#39; Return to the beginning of the stream.\n            binReader.BaseStream.Position = 0\n\n            &#39; Read and verify the data.\n            Try\n                Console.WriteLine(&quot;Verifying the written data.&quot;)\n                For i = 0 To upperBound\n                    If binReader.ReadDouble() &lt;&gt; dataArray(i) Then\n                        Console.WriteLine(&quot;Error writing data.&quot;)\n                        Exit For\n                    End If\n                Next i\n                Console.WriteLine(&quot;The data was written and verified.&quot;)\n            Catch ex As EndOfStreamException\n                Console.WriteLine(&quot;Error writing data: {0}.&quot;, _\n                    ex.GetType().Name)\n            End Try\n        Finally\n            binWriter.Close()\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadInt16\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt16()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual short ReadInt16 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></div>\r\n                  </div>\r\n                  <p>A 2-byte signed integer read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadInt32\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt32()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int ReadInt32 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A 4-byte signed integer read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadInt64\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadInt64()</div>        \r\n          </div>\r\n    \r\n            <p>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual long ReadInt64 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>An 8-byte signed integer read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadSByte\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadSByte_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadSByte()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a signed byte from this stream and advances the current position of the stream by one byte.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual sbyte ReadSByte ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.sbyte\" data-linktype=\"relative-path\">SByte</a></div>\r\n                  </div>\r\n                  <p>A signed byte read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadSingle\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadSingle_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadSingle()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual float ReadSingle ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></div>\r\n                  </div>\r\n                  <p>A 4-byte floating point value read from the current stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadString\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadString()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string ReadString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string being read.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates how to store and retrieve application settings in a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IO.BinaryReaderWriter#1\">using System;\nusing System.IO;\n\nclass ConsoleApplication\n{\n    const string fileName = &quot;AppSettings.dat&quot;;\n\n    static void Main()\n    {\n        WriteDefaultValues();\n        DisplayValues();\n    }\n\n    public static void WriteDefaultValues()\n    {\n        using (BinaryWriter writer = new BinaryWriter(File.Open(fileName, FileMode.Create)))\n        {\n            writer.Write(1.250F);\n            writer.Write(@&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;);\n            writer.Write(10);\n            writer.Write(true);\n        }\n    }\n\n    public static void DisplayValues()\n    {\n        float aspectRatio;\n        string tempDirectory;\n        int autoSaveTime;\n        bool showStatusBar;\n\n        if (File.Exists(fileName))\n        {\n            using (BinaryReader reader = new BinaryReader(File.Open(fileName, FileMode.Open)))\n            {\n                aspectRatio = reader.ReadSingle();\n                tempDirectory = reader.ReadString();\n                autoSaveTime = reader.ReadInt32();\n                showStatusBar = reader.ReadBoolean();\n            }\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; + aspectRatio);\n            Console.WriteLine(&quot;Temp directory is: &quot; + tempDirectory);\n            Console.WriteLine(&quot;Auto save time set to: &quot; + autoSaveTime);\n            Console.WriteLine(&quot;Show status bar: &quot; + showStatusBar);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IO.BinaryReaderWriter#1\">Imports System.IO\n\nModule Module1\n    Const fileName As String = &quot;AppSettings.dat&quot;\n\n    Sub Main()\n        WriteDefaultValues()\n        DisplayValues()\n    End Sub\n\n    Sub WriteDefaultValues()\n        Using writer As BinaryWriter = New BinaryWriter(File.Open(fileName, FileMode.Create))\n            writer.Write(1.25F)\n            writer.Write(&quot;c:&nbsp;&nbsp;&nbsp;&nbsp;emp&quot;)\n            writer.Write(10)\n            writer.Write(True)\n        End Using\n    End Sub\n\n    Sub DisplayValues()\n        Dim aspectRatio As Single\n        Dim tempDirectory As String\n        Dim autoSaveTime As Integer\n        Dim showStatusBar As Boolean\n\n        If (File.Exists(fileName)) Then\n\n            Using reader As BinaryReader = New BinaryReader(File.Open(fileName, FileMode.Open))\n                aspectRatio = reader.ReadSingle()\n                tempDirectory = reader.ReadString()\n                autoSaveTime = reader.ReadInt32()\n                showStatusBar = reader.ReadBoolean()\n            End Using\n\n            Console.WriteLine(&quot;Aspect ratio set to: &quot; &amp; aspectRatio)\n            Console.WriteLine(&quot;Temp directory is: &quot; &amp; tempDirectory)\n            Console.WriteLine(&quot;Auto save time set to: &quot; &amp; autoSaveTime)\n            Console.WriteLine(&quot;Show status bar: &quot; &amp; showStatusBar)\n        End If\n    End Sub\n\nEnd Module\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadUInt16\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadUInt16_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadUInt16()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual ushort ReadUInt16 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint16\" data-linktype=\"relative-path\">UInt16</a></div>\r\n                  </div>\r\n                  <p>A 2-byte unsigned integer read from this stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadUInt32\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadUInt32_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadUInt32()</div>        \r\n          </div>\r\n    \r\n            <p>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual uint ReadUInt32 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></div>\r\n                  </div>\r\n                  <p>A 4-byte unsigned integer read from this stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_IO_BinaryReader_ReadUInt64\">\r\n    \r\n            <a id=\"System_IO_BinaryReader_ReadUInt64_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadUInt64()</div>        \r\n          </div>\r\n    \r\n            <p>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual ulong ReadUInt64 ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint64\" data-linktype=\"relative-path\">UInt64</a></div>\r\n                  </div>\r\n                  <p>An 8-byte unsigned integer read from this stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.endofstreamexception\" data-linktype=\"relative-path\">EndOfStreamException</a></div>\r\n                  </div>\r\n                  <p>The end of the stream is reached.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>An I/O error occurs.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>The stream is closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.io.binaryreader\" data-linktype=\"relative-path\">BinaryReader</a> does not restore the file position after an unsuccessful read.  </p>\n<p> <code>BinaryReader</code> reads this data type in little-endian format.  </p>\n<p> For a list of common I/O tasks, see <a href=\"../Topic/Common%20I-O%20Tasks.md\" data-linktype=\"relative-path\">Common I/O Tasks</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.BinaryReader.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.BinaryReader.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader..ctor\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.BaseStream\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.Close\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.Dispose\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.FillBuffer\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.PeekChar\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.Read\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.Read7BitEncodedInt\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadBoolean\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadByte\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadBytes\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadChar\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadChars\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadDecimal\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadDouble\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadInt16\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadInt32\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadInt64\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadSByte\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadSingle\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadString\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadUInt16\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadUInt32\">\r\n<meta name=\"APIName\" content=\"System.IO.BinaryReader.ReadUInt64\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"21894fb5-0dbf-5afa-472d-0eed09e3dd36\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Reads primitive data types as binary values in a specific encoding.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.IO/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.BinaryReader\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.IO.BinaryReader.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.IO.BinaryReader.yml","open_to_public_contributors":true,"api_name":["System.IO.BinaryReader","System.IO.BinaryReader..ctor","System.IO.BinaryReader.BaseStream","System.IO.BinaryReader.Close","System.IO.BinaryReader.Dispose","System.IO.BinaryReader.FillBuffer","System.IO.BinaryReader.PeekChar","System.IO.BinaryReader.Read","System.IO.BinaryReader.Read7BitEncodedInt","System.IO.BinaryReader.ReadBoolean","System.IO.BinaryReader.ReadByte","System.IO.BinaryReader.ReadBytes","System.IO.BinaryReader.ReadChar","System.IO.BinaryReader.ReadChars","System.IO.BinaryReader.ReadDecimal","System.IO.BinaryReader.ReadDouble","System.IO.BinaryReader.ReadInt16","System.IO.BinaryReader.ReadInt32","System.IO.BinaryReader.ReadInt64","System.IO.BinaryReader.ReadSByte","System.IO.BinaryReader.ReadSingle","System.IO.BinaryReader.ReadString","System.IO.BinaryReader.ReadUInt16","System.IO.BinaryReader.ReadUInt32","System.IO.BinaryReader.ReadUInt64"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.BinaryReader","System::IO::BinaryReader","System.IO.BinaryReader.#ctor","System::IO::BinaryReader::#ctor","System.IO.BinaryReader.BaseStream","System::IO::BinaryReader::BaseStream","System.IO.BinaryReader.Close","System::IO::BinaryReader::Close","System.IO.BinaryReader.Dispose","System::IO::BinaryReader::Dispose","System.IO.BinaryReader.FillBuffer","System::IO::BinaryReader::FillBuffer","System.IO.BinaryReader.PeekChar","System::IO::BinaryReader::PeekChar","System.IO.BinaryReader.Read","System::IO::BinaryReader::Read","System.IO.BinaryReader.Read7BitEncodedInt","System::IO::BinaryReader::Read7BitEncodedInt","System.IO.BinaryReader.ReadBoolean","System::IO::BinaryReader::ReadBoolean","System.IO.BinaryReader.ReadByte","System::IO::BinaryReader::ReadByte","System.IO.BinaryReader.ReadBytes","System::IO::BinaryReader::ReadBytes","System.IO.BinaryReader.ReadChar","System::IO::BinaryReader::ReadChar","System.IO.BinaryReader.ReadChars","System::IO::BinaryReader::ReadChars","System.IO.BinaryReader.ReadDecimal","System::IO::BinaryReader::ReadDecimal","System.IO.BinaryReader.ReadDouble","System::IO::BinaryReader::ReadDouble","System.IO.BinaryReader.ReadInt16","System::IO::BinaryReader::ReadInt16","System.IO.BinaryReader.ReadInt32","System::IO::BinaryReader::ReadInt32","System.IO.BinaryReader.ReadInt64","System::IO::BinaryReader::ReadInt64","System.IO.BinaryReader.ReadSByte","System::IO::BinaryReader::ReadSByte","System.IO.BinaryReader.ReadSingle","System::IO::BinaryReader::ReadSingle","System.IO.BinaryReader.ReadString","System::IO::BinaryReader::ReadString","System.IO.BinaryReader.ReadUInt16","System::IO::BinaryReader::ReadUInt16","System.IO.BinaryReader.ReadUInt32","System::IO::BinaryReader::ReadUInt32","System.IO.BinaryReader.ReadUInt64","System::IO::BinaryReader::ReadUInt64"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"21894fb5-0dbf-5afa-472d-0eed09e3dd36","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.IO/BinaryReader.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BinaryReader class | Microsoft Docs","_op_ogTitle":"BinaryReader class","description":"Reads primitive data types as binary values in a specific encoding.\n","toc_asset_id":"_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.BinaryReader","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.binaryreader","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.io.binaryreader","fileRelativePath":"System.IO.BinaryReader.html"},"themesRelativePathToOutputRoot":"_themes/"}