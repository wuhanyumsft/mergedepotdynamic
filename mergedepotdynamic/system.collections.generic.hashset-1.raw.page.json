{"content":"    \r\n    <h1 id=\"System_Collections_Generic_HashSet_1\">\r\n      <span class=\"lang-csharp\">HashSet&lt;T&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a set of values.  </p>\n<p> To browse the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs#2d265edc718b158b\" data-linktype=\"external\">Reference Source</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.HashSetDebugView`1))]\npublic class HashSet&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.ISet&lt;T&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>The type of elements in the hash set.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">HashSet&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <div class=\"NOTE\"><h5>Note</h5><p> To view the .NET Framework source code for this type, see the <a href=\"http://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs#2d265edc718b158b\" data-linktype=\"external\">Reference Source</a>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <a href=\"http://referencesource.microsoft.com/\" data-linktype=\"external\">instructions</a>.  </p>\n</div>\n<p> The HashSet(T) class provides high-performance set operations. A set is a collection that contains no duplicate elements, and whose elements are in no particular order.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> HashSet(T) implements the <a class=\"xref\" href=\"system.collections.generic.ireadonlycollection-1\" data-linktype=\"relative-path\">IReadOnlyCollection&lt;T&gt;</a> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the HashSet(T) class did not implement this interface.  </p>\n</div>\n<p> The capacity of a HashSet(T) object is the number of elements that the object can hold. A HashSet(T) object&#39;s capacity automatically increases as elements are added to the object.  </p>\n<p> The HashSet(T) class is based on the model of mathematical sets and provides high-performance set operations similar to accessing the keys of the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> or <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> collections. In simple terms, the HashSet(T) class can be thought of as a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> collection without values.  </p>\n<p> A HashSet(T) collection is not sorted and cannot contain duplicate elements. If order or element duplication is more important than performance for your application, consider using the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class together with the <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Sort_\" data-linktype=\"relative-path\">Sort</a> method.  </p>\n<p> HashSet(T) provides many mathematical set operations, such as set addition (unions) and set subtraction. The following table lists the provided HashSet(T) operations and their mathematical equivalents.  </p>\n<table>\n<thead>\n<tr>\n<th>HashSet(Of T) operation</th>\n<th>Mathematical equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_UnionWith_\" data-linktype=\"relative-path\">UnionWith</a></td>\n<td>Union or set addition</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IntersectWith_\" data-linktype=\"relative-path\">IntersectWith</a></td>\n<td>Intersection</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_ExceptWith_\" data-linktype=\"relative-path\">ExceptWith</a></td>\n<td>Set subtraction</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_SymmetricExceptWith_\" data-linktype=\"relative-path\">SymmetricExceptWith</a></td>\n<td>Symmetric difference</td>\n</tr>\n</tbody>\n</table>\n<p> In addition to the listed set operations, the HashSet(T) class also provides methods for determining set equality, overlap of sets, and whether a set is a subset or superset of another set.  </p>\n<p> For very large HashSet(T) objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <code>enabled</code> attribute of the  configuration element to <code>true</code> in the run-time environment.  </p>\n<p> Starting with the .NET Framework 4, the HashSet(T) class implements the <a class=\"xref\" href=\"system.collections.generic.iset-1\" data-linktype=\"relative-path\">ISet&lt;T&gt;</a> interface.  </p>\n<h2 id=\"hashset-and-linq-set-operations\">HashSet and LINQ Set Operations</h2>\n<p> LINQ provides access to the <code>Distinct</code>, <code>Union</code>, <code>Intersect</code> and <code>Except</code> set operations on any data source that implements the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> or <a class=\"xref\" href=\"system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a> interfaces.  HashSet(T) provides a larger and more robust collection of set operations. For example, HashSet(T) provides comparisons such as <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IsSubsetOf_\" data-linktype=\"relative-path\">IsSubsetOf</a> and <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IsSupersetOf_\" data-linktype=\"relative-path\">IsSupersetOf</a>.  </p>\n<p> The primary difference between LINQ set operations and HashSet(T) operations is that LINQ set operations always return a new <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection, whereas the HashSet(T) equivalent methods modify the current collection.  </p>\n<p> Typically, if you must create a new set or if your application needs access only to the provided set operations, using LINQ set operations on any <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> collection or array will be sufficient. However, if your application requires access to additional set operations, or if it is not desirable or necessary to create a new collection, use the HashSet(T) class.  </p>\n<p> The following table shows the HashSet(T) operations and their equivalent LINQ set operations.  </p>\n<table>\n<thead>\n<tr>\n<th>HashSet(Of T) operation</th>\n<th>LINQ equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_UnionWith_\" data-linktype=\"relative-path\">UnionWith</a></td>\n<td>&lt;xref:System.Linq.Enumerable.Union%2A&gt;</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IntersectWith_\" data-linktype=\"relative-path\">IntersectWith</a></td>\n<td>&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_ExceptWith_\" data-linktype=\"relative-path\">ExceptWith</a></td>\n<td>&lt;xref:System.Linq.Enumerable.Except%2A&gt;</td>\n</tr>\n<tr>\n<td>Not provided.</td>\n<td>&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_SymmetricExceptWith_\" data-linktype=\"relative-path\">SymmetricExceptWith</a></td>\n<td>Not provided.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Overlaps_\" data-linktype=\"relative-path\">Overlaps</a></td>\n<td>Not provided.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IsSubsetOf_\" data-linktype=\"relative-path\">IsSubsetOf</a></td>\n<td>Not provided.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IsProperSubsetOf_\" data-linktype=\"relative-path\">IsProperSubsetOf</a></td>\n<td>Not provided.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IsSupersetOf_\" data-linktype=\"relative-path\">IsSupersetOf</a></td>\n<td>Not provided.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IsProperSupersetOf_\" data-linktype=\"relative-path\">IsProperSupersetOf</a></td>\n<td>Not provided.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_SetEquals_\" data-linktype=\"relative-path\">SetEquals</a></td>\n<td>Not provided.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1__ctor\" data-linktype=\"self-bookmark\">HashSet&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that is empty and uses the default equality comparer for the set type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1__ctor_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">HashSet&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1__ctor_System_Collections_Generic_IEqualityComparer__0__\" data-linktype=\"self-bookmark\">HashSet&lt;T&gt;(IEqualityComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that is empty and uses the specified equality comparer for the set type.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1__ctor_System_Collections_Generic_IEnumerable__0__System_Collections_Generic_IEqualityComparer__0__\" data-linktype=\"self-bookmark\">HashSet&lt;T&gt;(IEnumerable&lt;T&gt;,IEqualityComparer&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">HashSet&lt;T&gt;(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class with serialized data.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Comparer\" data-linktype=\"self-bookmark\">Comparer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> object that is used to determine equality for the values in the set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements that are contained in a set.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Add__0_\" data-linktype=\"self-bookmark\">Add(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds the specified element to a set.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements from a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Contains__0_\" data-linktype=\"self-bookmark\">Contains(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object contains the specified element.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_CopyTo__0___\" data-linktype=\"self-bookmark\">CopyTo(T[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to an array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_CopyTo__0___System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to an array, starting at the specified array index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_CopyTo__0___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(T[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the specified number of elements of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to an array, starting at the specified array index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_CreateSetComparer\" data-linktype=\"self-bookmark\">CreateSetComparer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that can be used for equality testing of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_ExceptWith_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">ExceptWith(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements in the specified collection from the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"self-bookmark\">GetObjectData(SerializationInfo,StreamingContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and returns the data needed to serialize a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_IntersectWith_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">IntersectWith(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Modifies the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to contain only elements that are present in that object and in the specified collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_IsProperSubsetOf_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">IsProperSubsetOf(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a proper subset of the specified collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_IsProperSupersetOf_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">IsProperSupersetOf(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a proper superset of the specified collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_IsSubsetOf_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">IsSubsetOf(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a subset of the specified collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_IsSupersetOf_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">IsSupersetOf(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a superset of the specified collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_OnDeserialization_System_Object_\" data-linktype=\"self-bookmark\">OnDeserialization(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and raises the deserialization event when the deserialization is complete.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Overlaps_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">Overlaps(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object and a specified collection share common elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_Remove__0_\" data-linktype=\"self-bookmark\">Remove(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the specified element from a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_RemoveWhere_System_Predicate__0__\" data-linktype=\"self-bookmark\">RemoveWhere(Predicate&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all elements that match the conditions defined by the specified predicate from a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_SetEquals_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">SetEquals(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object and the specified collection contain the same elements.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_SymmetricExceptWith_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">SymmetricExceptWith(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Modifies the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to contain only elements that are present either in that object or in the specified collection, but not both.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_TrimExcess\" data-linktype=\"self-bookmark\">TrimExcess()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_UnionWith_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">UnionWith(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Modifies the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to contain all elements that are present in itself, the specified collection, or both.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_System_Collections_Generic_ICollection_T__Add__0_\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.Add(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an item to an <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_System_Collections_Generic_ICollection_T__IsReadOnly\" data-linktype=\"self-bookmark\">ICollection&lt;T&gt;.IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether a collection is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable&lt;T&gt;.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_HashSet_1_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1__ctor\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSet&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that is empty and uses the default equality comparer for the set type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HashSet ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is the number of elements that the object can hold. A <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object&#39;s capacity automatically increases as elements are added to the object.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create and populate two <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_UnionWith_\" data-linktype=\"relative-path\">UnionWith</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_UnionWith#03\">        HashSet&lt;int&gt; evenNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; oddNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 5; i++)\n        {\n            // Populate numbers with just even numbers.\n            evenNumbers.Add(i * 2);\n\n            // Populate oddNumbers with just odd numbers.\n            oddNumbers.Add((i * 2) + 1);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1__ctor_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSet&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HashSet (System.Collections.Generic.IEnumerable&lt;T&gt; collection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection whose elements are copied to the new set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is the number of elements that the object can hold. A <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object&#39;s capacity automatically increases as elements are added to the object.  </p>\n<p> If <code>collection</code> contains duplicates, the set will contain one of each unique element. No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of <code>collection</code>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>collection</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection from an existing set. In this example, two sets are created with even and odd integers, respectively. A third <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is then created from the even integer set.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_UnionWith#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; evenNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; oddNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 5; i++)\n        {\n            // Populate numbers with just even numbers.\n            evenNumbers.Add(i * 2);\n\n            // Populate oddNumbers with just odd numbers.\n            oddNumbers.Add((i * 2) + 1);\n        }\n\n        Console.Write(&quot;evenNumbers contains {0} elements: &quot;, evenNumbers.Count);\n        DisplaySet(evenNumbers);\n\n        Console.Write(&quot;oddNumbers contains {0} elements: &quot;, oddNumbers.Count);\n        DisplaySet(oddNumbers);\n\n        // Create a new HashSet populated with even numbers.\n        HashSet&lt;int&gt; numbers = new HashSet&lt;int&gt;(evenNumbers);\n        Console.WriteLine(&quot;numbers UnionWith oddNumbers...&quot;);\n        numbers.UnionWith(oddNumbers);\n\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_UnionWith#02\">    Shared Sub Main()\n\n        Dim evenNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim oddNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 4\n\n            &#39; Populate evenNumbers with only even numbers.\n            evenNumbers.Add(i * 2)\n\n            &#39; Populate oddNumbers with only odd numbers.\n            oddNumbers.Add((i * 2) + 1)\n        Next i\n\n        Console.Write(&quot;evenNumbers contains {0} elements: &quot;, evenNumbers.Count)\n        DisplaySet(evenNumbers)\n\n        Console.Write(&quot;oddNumbers contains {0} elements: &quot;, oddNumbers.Count)\n        DisplaySet(oddNumbers)\n\n        &#39; Create a new HashSet populated with even numbers.\n        Dim numbers As HashSet(Of Integer) = New HashSet(Of Integer)(evenNumbers)\n        Console.WriteLine(&quot;numbers UnionWith oddNumbers...&quot;)\n        numbers.UnionWith(oddNumbers)\n\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n    End Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1__ctor_System_Collections_Generic_IEqualityComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSet&lt;T&gt;(IEqualityComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that is empty and uses the specified equality comparer for the set type.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HashSet (System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> implementation to use when comparing values in the set, or <code>null</code> to use the default <span class=\"xref\">stem.Collections.Generic.EqualityComparer`1</span> implementation for the set type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is the number of elements that the object can hold. A <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object&#39;s capacity automatically increases as elements are added to the object.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1__ctor_System_Collections_Generic_IEnumerable__0__System_Collections_Generic_IEqualityComparer__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSet&lt;T&gt;(IEnumerable&lt;T&gt;,IEqualityComparer&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public HashSet (System.Collections.Generic.IEnumerable&lt;T&gt; collection, System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection whose elements are copied to the new set.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>comparer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> implementation to use when comparing values in the set, or <code>null</code> to use the default <span class=\"xref\">stem.Collections.Generic.EqualityComparer`1</span> implementation for the set type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is the number of elements that the object can hold. A <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object&#39;s capacity automatically increases as elements are added to the object.  </p>\n<p> If <code>collection</code> contains duplicates, the set will contain one of each unique element. No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of <code>collection</code>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>collection</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example uses a supplied <a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> to allow case-insensitive comparisons on the elements of a  <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection of vehicle types.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_ExceptWith#03\">using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static void Main()\n    {\n        SameVehicleComparer compareVehicles = new SameVehicleComparer();\n        HashSet&lt;string&gt; allVehicles = new HashSet&lt;string&gt;(compareVehicles);\n        List&lt;string&gt; someVehicles = new List&lt;string&gt;();\n\n        someVehicles.Add(&quot;Planes&quot;);\n        someVehicles.Add(&quot;Trains&quot;);\n        someVehicles.Add(&quot;Automobiles&quot;);\n\n        // Add in the vehicles contained in the someVehicles list.\n        allVehicles.UnionWith(someVehicles);\n\n        Console.WriteLine(&quot;The current HashSet contains:<br>&quot;);\n        foreach (string vehicle in allVehicles)\n        {\n            Console.WriteLine(vehicle);\n        }\n\n        allVehicles.Add(&quot;Ships&quot;);\n        allVehicles.Add(&quot;Motorcycles&quot;);\n        allVehicles.Add(&quot;Rockets&quot;);\n        allVehicles.Add(&quot;Helicopters&quot;);\n        allVehicles.Add(&quot;Submarines&quot;);\n\n        Console.WriteLine(&quot;<br>The updated HashSet contains:<br>&quot;);\n        foreach (string vehicle in allVehicles)\n        {\n            Console.WriteLine(vehicle);\n        }\n\n        // Verify that the &#39;All Vehicles&#39; set contains at least the vehicles in\n        // the &#39;Some Vehicles&#39; list.\n        if (allVehicles.IsSupersetOf(someVehicles))\n        {\n            Console.Write(&quot;<br>The &#39;All&#39; vehicles set contains everything in &quot;);\n            Console.WriteLine(&quot;&#39;Some&#39; vechicles list.&quot;);\n        }\n\n        // Check for Rockets. Here the SameVehicleComparer will compare\n        // true for the mixed-case vehicle type.\n        if (allVehicles.Contains(&quot;roCKeTs&quot;))\n        {\n            Console.WriteLine(&quot;<br>The &#39;All&#39; vehicles set contains &#39;roCKeTs&#39;&quot;);\n        }\n\n        allVehicles.ExceptWith(someVehicles);\n        Console.WriteLine(&quot;<br>The excepted HashSet contains:<br>&quot;);\n        foreach (string vehicle in allVehicles)\n        {\n            Console.WriteLine(vehicle);\n        }\n\n        // Remove all the vehicles that are not &#39;super cool&#39;.\n        allVehicles.RemoveWhere(isNotSuperCool);\n\n        Console.WriteLine(&quot;<br>The super cool vehicles are:<br>&quot;);\n        foreach (string vehicle in allVehicles)\n        {\n            Console.WriteLine(vehicle);\n        }\n    }\n\n    // Predicate to determine vehicle &#39;coolness&#39;.\n    private static bool isNotSuperCool(string vehicle)\n    {\n        bool superCool = (vehicle == &quot;Helicopters&quot;) || (vehicle == &quot;Motorcycles&quot;);\n\n        return !superCool;\n    }\n}\n\nclass SameVehicleComparer : EqualityComparer&lt;string&gt;\n{\n    public override bool Equals(string s1, string s2)\n    {\n        return s1.Equals(s2, StringComparison.CurrentCultureIgnoreCase);\n    }\n\n\n    public override int GetHashCode(string s)\n    {\n        return base.GetHashCode();\n    }\n}\n\n// The program writes the following output to the console.\n//\n// The current HashSet contains:\n//\n// Planes\n// Trains\n// Automobiles\n//\n// The updated HashSet contains:\n//\n// Planes\n// Trains\n// Automobiles\n// Ships\n// Motorcycles\n// Rockets\n// Helicopters\n// Submarines\n//\n// The &#39;All&#39; vehicles set contains everything in &#39;Some&#39; vechicles list.\n//\n// The &#39;All&#39; vehicles set contains &#39;roCKeTs&#39;\n//\n// The excepted HashSet contains:\n//\n// Ships\n// Motorcycles\n// Rockets\n// Helicopters\n// Submarines\n//\n// The super cool vehicles are:\n//\n// Motorcycles\n// Helicopters\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.HashSet_ExceptWith#03\">#using &lt;System.Core.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Generic;\n\nref class SameVehicleComparer : public EqualityComparer&lt;String^&gt;\n{\npublic:\n    virtual bool Equals(String^ s1, String^ s2) override\n    {\n        return s1-&gt;Equals(s2, StringComparison::CurrentCultureIgnoreCase);\n    }\n\n\n    virtual int GetHashCode(String^ s) override\n    {\n        return this-&gt;GetHashCode();\n    }\n};\n\nref class Program\n{\npublic:\n    static void Main()\n    {\n        SameVehicleComparer^ compareVehicles = gcnew SameVehicleComparer();\n        HashSet&lt;String^&gt; ^allVehicles = gcnew HashSet&lt;String^&gt;(compareVehicles);\n        List&lt;String^&gt;^ someVehicles = gcnew List&lt;String^&gt;();\n\n        someVehicles-&gt;Add(&quot;Planes&quot;);\n        someVehicles-&gt;Add(&quot;Trains&quot;);\n        someVehicles-&gt;Add(&quot;Automobiles&quot;);\n\n        // Add in the vehicles contained in the someVehicles list.\n        allVehicles-&gt;UnionWith(someVehicles);\n\n        Console::WriteLine(&quot;The current HashSet contains:<br>&quot;);\n        for each (String^ vehicle in allVehicles)\n        {\n            Console::WriteLine(vehicle);\n        }\n\n        allVehicles-&gt;Add(&quot;Ships&quot;);\n        allVehicles-&gt;Add(&quot;Motorcycles&quot;);\n        allVehicles-&gt;Add(&quot;Rockets&quot;);\n        allVehicles-&gt;Add(&quot;Helicopters&quot;);\n        allVehicles-&gt;Add(&quot;Submarines&quot;);\n\n        Console::WriteLine(&quot;<br>The updated HashSet contains:<br>&quot;);\n        for each (String^ vehicle in allVehicles)\n        {\n            Console::WriteLine(vehicle);\n        }\n\n        // Verify that the &#39;All Vehicles&#39; set contains at least the vehicles in\n        // the &#39;Some Vehicles&#39; list.\n        if (allVehicles-&gt;IsSupersetOf(someVehicles))\n        {\n            Console::Write(&quot;<br>The &#39;All&#39; vehicles set contains everything in &quot;);\n            Console::WriteLine(&quot;&#39;Some&#39; vechicles list.&quot;);\n        }\n\n        // Check for Rockets. Here the SameVehicleComparer will compare\n        // true for the mixed-case vehicle type.\n        if (allVehicles-&gt;Contains(&quot;roCKeTs&quot;))\n        {\n            Console::WriteLine(&quot;<br>The &#39;All&#39; vehicles set contains &#39;roCKeTs&#39;&quot;);\n        }\n\n        allVehicles-&gt;ExceptWith(someVehicles);\n        Console::WriteLine(&quot;<br>The excepted HashSet contains:<br>&quot;);\n        for each (String^ vehicle in allVehicles)\n        {\n            Console::WriteLine(vehicle);\n        }\n\n        // Remove all the vehicles that are not &#39;super cool&#39;.\n        allVehicles-&gt;RemoveWhere(gcnew Predicate&lt;String^&gt;(&amp;isNotSuperCool));\n\n        Console::WriteLine(&quot;<br>The super cool vehicles are:<br>&quot;);\n        for each (String^ vehicle in allVehicles)\n        {\n            Console::WriteLine(vehicle);\n        }\n    }\n\nprivate:\n    // Predicate to determine vehicle &#39;coolness&#39;.\n    static bool isNotSuperCool(String^ vehicle)\n    {\n        bool superCool = (vehicle == &quot;Helicopters&quot;) || (vehicle == &quot;Motorcycles&quot;);\n\n        return !superCool;\n    }\n};\n\nint main()\n{\n    Program::Main();\n}\n\n// The program writes the following output to the console::\n//\n// The current HashSet contains:\n//\n// Planes\n// Trains\n// Automobiles\n//\n// The updated HashSet contains:\n//\n// Planes\n// Trains\n// Automobiles\n// Ships\n// Motorcycles\n// Rockets\n// Helicopters\n// Submarines\n//\n// The &#39;All&#39; vehicles set contains everything in &#39;Some&#39; vechicles list.\n//\n// The &#39;All&#39; vehicles set contains &#39;roCKeTs&#39;\n//\n// The excepted HashSet contains:\n//\n// Ships\n// Motorcycles\n// Rockets\n// Helicopters\n// Submarines\n//\n// The super cool vehicles are:\n//\n// Motorcycles\n// Helicopters\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_ExceptWith#03\">Imports System\nImports System.Collections.Generic\n\nClass Program\n    Public Shared Sub Main()\n        Dim compareVehicles As New SameVehicleComparer()\n        Dim allVehicles As New HashSet(Of String)(compareVehicles)\n        Dim someVehicles As New List(Of String)()\n\n        someVehicles.Add(&quot;Planes&quot;)\n        someVehicles.Add(&quot;Trains&quot;)\n        someVehicles.Add(&quot;Automobiles&quot;)\n\n        &#39; Add in the vehicles contained in the someVehicles list.\n        allVehicles.UnionWith(someVehicles)\n\n        Console.WriteLine(&quot;The current HashSet contains:&quot; + vbNewLine)\n        For Each vehicle As String In allVehicles\n            Console.WriteLine(vehicle)\n        Next vehicle\n\n        allVehicles.Add(&quot;Ships&quot;)\n        allVehicles.Add(&quot;Motorcycles&quot;)\n        allVehicles.Add(&quot;Rockets&quot;)\n        allVehicles.Add(&quot;Helicopters&quot;)\n        allVehicles.Add(&quot;Submarines&quot;)\n\n        Console.WriteLine(vbNewLine + &quot;The updated HashSet contains:&quot; + vbNewLine)\n        For Each vehicle As String In allVehicles\n            Console.WriteLine(vehicle)\n        Next vehicle\n\n        &#39; Verify that the &#39;All Vehicles&#39; set contains at least the vehicles in\n        &#39; the &#39;Some Vehicles&#39; list.\n        If allVehicles.IsSupersetOf(someVehicles) Then\n            Console.Write(vbNewLine + &quot;The &#39;All&#39; vehicles set contains everything in &quot;)\n            Console.WriteLine(&quot;&#39;Some&#39; vechicles list.&quot;)\n        End If\n\n        &#39; Check for Rockets. Here the SameVehicleComparer will compare\n        &#39; True for the mixed-case vehicle type.\n        If allVehicles.Contains(&quot;roCKeTs&quot;) Then\n            Console.WriteLine(vbNewLine + &quot;The &#39;All&#39; vehicles set contains &#39;roCKeTs&#39;&quot;)\n        End If\n\n        allVehicles.ExceptWith(someVehicles)\n        Console.WriteLine(vbNewLine + &quot;The excepted HashSet contains:&quot; + vbNewLine)\n        For Each vehicle As String In allVehicles\n            Console.WriteLine(vehicle)\n        Next vehicle\n\n        &#39; Remove all the vehicles that are not &#39;super cool&#39;.\n        allVehicles.RemoveWhere(AddressOf isNotSuperCool)\n\n        Console.WriteLine(vbNewLine + &quot;The super cool vehicles are:&quot; + vbNewLine)\n        For Each vehicle As String In allVehicles\n            Console.WriteLine(vehicle)\n        Next vehicle\n    End Sub\n\n    &#39; Predicate to determine vehicle &#39;coolness&#39;.\n    Private Shared Function isNotSuperCool(vehicle As String) As Boolean\n        Dim notSuperCool As Boolean = _\n            (vehicle &lt;&gt; &quot;Helicopters&quot;) And (vehicle &lt;&gt; &quot;Motorcycles&quot;)\n\n        Return notSuperCool\n    End Function\nEnd Class\n\nClass SameVehicleComparer\n    Inherits EqualityComparer(Of String)\n\n    Public Overrides Function Equals(s1 As String, s2 As String) As Boolean\n        Return s1.Equals(s2, StringComparison.CurrentCultureIgnoreCase)\n    End Function\n\n    Public Overrides Function GetHashCode(s As String) As Integer\n        return MyBase.GetHashCode()\n    End Function\nEnd Class\n\n&#39;\n&#39; The program writes the following output to the console.\n&#39;\n&#39; The current HashSet contains:\n&#39;\n&#39; Planes\n&#39; Trains\n&#39; Automobiles\n&#39;\n&#39; The updated HashSet contains:\n&#39;\n&#39; Planes\n&#39; Trains\n&#39; Automobiles\n&#39; Ships\n&#39; Motorcycles\n&#39; Rockets\n&#39; Helicopters\n&#39; Submarines\n&#39;\n&#39; The &#39;All&#39; vehicles set contains everything in &#39;Some&#39; vechicles list.\n&#39;\n&#39; The &#39;All&#39; vehicles set contains &#39;roCKeTs&#39;\n&#39;\n&#39; The excepted HashSet contains:\n&#39;\n&#39; Ships\n&#39; Motorcycles\n&#39; Rockets\n&#39; Helicopters\n&#39; Submarines\n&#39;\n&#39; The super cool vehicles are:\n&#39;\n&#39; Motorcycles\n&#39; Helicopters\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">HashSet&lt;T&gt;(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> class with serialized data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected HashSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that contains the information required to serialize the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> structure that contains the source and destination of the serialized stream associated with the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is called during deserialization to reconstitute an object that is transmitted over a stream. For more information, see <a href=\"../Topic/XML%20and%20SOAP%20Serialization.md\" data-linktype=\"relative-path\">XML and SOAP Serialization</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Comparer\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Comparer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Comparer</div>        \r\n          </div>\r\n    \r\n            <p>Gets the <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> object that is used to determine equality for the values in the set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.IEqualityComparer&lt;T&gt; Comparer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer<t></t></a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.IEqualityComparer`1</span> object that is used to determine equality for the values in the set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Count\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements that are contained in a set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that are contained in the set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is the number of elements that the object can hold. A <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object&#39;s capacity automatically increases as elements are added to the object.  </p>\n<p> The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is set to the first prime number that is greater than double the previous capacity.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create, populate, and manipulate two <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects. In this example, both the contents of the set and Count display to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_UnionWith#01\">using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        HashSet&lt;int&gt; evenNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; oddNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 5; i++)\n        {\n            // Populate numbers with just even numbers.\n            evenNumbers.Add(i * 2);\n\n            // Populate oddNumbers with just odd numbers.\n            oddNumbers.Add((i * 2) + 1);\n        }\n\n        Console.Write(&quot;evenNumbers contains {0} elements: &quot;, evenNumbers.Count);\n        DisplaySet(evenNumbers);\n\n        Console.Write(&quot;oddNumbers contains {0} elements: &quot;, oddNumbers.Count);\n        DisplaySet(oddNumbers);\n\n        // Create a new HashSet populated with even numbers.\n        HashSet&lt;int&gt; numbers = new HashSet&lt;int&gt;(evenNumbers);\n        Console.WriteLine(&quot;numbers UnionWith oddNumbers...&quot;);\n        numbers.UnionWith(oddNumbers);\n\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n    }\n\n    private static void DisplaySet(HashSet&lt;int&gt; set)\n    {\n        Console.Write(&quot;{&quot;);\n        foreach (int i in set)\n        {\n            Console.Write(&quot; {0}&quot;, i);\n        }\n        Console.WriteLine(&quot; }&quot;);\n    }\n}\n/* This example produces output similar to the following:\n * evenNumbers contains 5 elements: { 0 2 4 6 8 }\n * oddNumbers contains 5 elements: { 1 3 5 7 9 }\n * numbers UnionWith oddNumbers...\n * numbers contains 10 elements: { 0 2 4 6 8 1 3 5 7 9 }\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_UnionWith#01\">Imports System\nImports System.Collections.Generic\n\nClass Program\n\n    Shared Sub Main()\n\n        Dim evenNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim oddNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 4\n\n            &#39; Populate evenNumbers with only even numbers.\n            evenNumbers.Add(i * 2)\n\n            &#39; Populate oddNumbers with only odd numbers.\n            oddNumbers.Add((i * 2) + 1)\n        Next i\n\n        Console.Write(&quot;evenNumbers contains {0} elements: &quot;, evenNumbers.Count)\n        DisplaySet(evenNumbers)\n\n        Console.Write(&quot;oddNumbers contains {0} elements: &quot;, oddNumbers.Count)\n        DisplaySet(oddNumbers)\n\n        &#39; Create a new HashSet populated with even numbers.\n        Dim numbers As HashSet(Of Integer) = New HashSet(Of Integer)(evenNumbers)\n        Console.WriteLine(&quot;numbers UnionWith oddNumbers...&quot;)\n        numbers.UnionWith(oddNumbers)\n\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n    End Sub\n\n\n    Private Shared Sub DisplaySet(ByVal coll As HashSet(Of Integer))\n        Console.Write(&quot;{&quot;)\n        For Each i As Integer In coll\n            Console.Write(&quot; {0}&quot;, i)\n        Next i\n        Console.WriteLine(&quot; }&quot;)\n    End Sub\n\nEnd Class\n&#39; This example produces output similar to the following:\n&#39; evenNumbers contains 5 elements: { 0 2 4 6 8 }\n&#39; oddNumbers contains 5 elements: { 1 3 5 7 9 }\n&#39; numbers UnionWith oddNumbers...\n&#39; numbers contains 10 elements: { 0 2 4 6 8 1 3 5 7 9 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Add__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(T)</div>        \r\n          </div>\r\n    \r\n            <p>Adds the specified element to a set.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Add (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The element to add to the set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is added to the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object; <code>false</code> if the element is already present.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity of the <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, the capacity is automatically adjusted to accommodate the new item.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity of the internal array, this method is an O(1) operation. If the <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object must be resized, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create and populate two <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects. This example is part of a larger example provided for the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_UnionWith_\" data-linktype=\"relative-path\">UnionWith</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_UnionWith#03\">        HashSet&lt;int&gt; evenNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; oddNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 5; i++)\n        {\n            // Populate numbers with just even numbers.\n            evenNumbers.Add(i * 2);\n\n            // Populate oddNumbers with just odd numbers.\n            oddNumbers.Add((i * 2) + 1);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Clear\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements from a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero and references to other objects from elements of the collection are also released. The capacity remains unchanged until a call to <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a> is made.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates and populates a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection, then clears it and releases the memory referenced by the collection.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_Clear#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; Numbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Numbers.Add(i);\n        }\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count);\n        DisplaySet(Numbers);\n\n        Numbers.Clear();\n        Numbers.TrimExcess();\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count);\n        DisplaySet(Numbers);\n\n    }\n    /* This example produces output similar to the following:\n     * Numbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * Numbers contains 0 elements: { }\n     */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_Clear#02\">    Shared Sub Main()\n\n        Dim Numbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 9\n            Numbers.Add(i)\n        Next i\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count)\n        DisplaySet(Numbers)\n\n        Numbers.Clear()\n        Numbers.TrimExcess()\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count)\n        DisplaySet(Numbers)\n\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; Numbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; Numbers contains 0 elements: { }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Contains__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(T)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object contains the specified element.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The element to locate in the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object contains the specified element; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to remove values from a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection using the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method. In this example, the Contains method verifies that the set contains a value before removing it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_RemoveWhere#02\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    static void Main()\n    {\n        HashSet&lt;int&gt; numbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 20; i++) {\n            numbers.Add(i);\n        }\n\n        // Display all the numbers in the hash table.\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n        // Remove all odd numbers.\n        numbers.RemoveWhere(IsOdd);\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n        // Check if the hash table contains 0 and, if so, remove it.\n        if (numbers.Contains(0)) {\n            numbers.Remove(0);\n        }\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n    }\n\n    private static bool IsOdd(int i)\n    {\n        return ((i % 2) == 1);\n    }\n\n    private static void DisplaySet(HashSet&lt;int&gt; set)\n    {\n        Console.Write(&quot;{&quot;);\n        foreach (int i in set)\n            Console.Write(&quot; {0}&quot;, i);\n\n        Console.WriteLine(&quot; }&quot;);\n    }\n}\n// This example display the following output:\n//    numbers contains 20 elements: { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }\n//    numbers contains 10 elements: { 0 2 4 6 8 10 12 14 16 18 }\n//    numbers contains 9 elements: { 2 4 6 8 10 12 14 16 18 }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_RemoveWhere#02\">Imports System.Collections.Generic\n\nModule Example\n    Public Sub Main()\n        Dim numbers As New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 19\n            numbers.Add(i)\n        Next i\n\n        &#39; Display all the numbers in the hash table.\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n\n        &#39; Remove all odd numbers.\n        numbers.RemoveWhere(AddressOf IsOdd)\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n\n        &#39; Check if the hash table contains 0 and, if so, remove it.\n        If numbers.Contains(0) Then\n            numbers.Remove(0)\n        End If\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n    End Sub\n\n    Private Function IsOdd(ByVal i As Integer) As Boolean\n        Return ((i Mod 2) = 1)\n    End Function\n\n    Private Sub DisplaySet(ByVal coll As HashSet(Of Integer))\n        Console.Write(&quot;{&quot;)\n        For Each i As Integer In coll\n            Console.Write(&quot; {0}&quot;, i)\n        Next\n        Console.WriteLine(&quot; }&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    numbers contains 20 elements: { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }\n&#39;    numbers contains 10 elements: { 0 2 4 6 8 10 12 14 16 18 }\n&#39;    numbers contains 9 elements: { 2 4 6 8 10 12 14 16 18 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_CopyTo__0___\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[])</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to an array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array that is the destination of the elements copied from the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object. The array must have zero-based indexing.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_CopyTo__0___System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to an array, starting at the specified array index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array that is the destination of the elements copied from the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object. The array must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is greater than the length of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_CopyTo__0___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the specified number of elements of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to an array, starting at the specified array index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array, int arrayIndex, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional array that is the destination of the elements copied from the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object. The array must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The number of elements to copy to <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than 0.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is less than 0.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is greater than the length of the destination <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>count</code> is greater than the available space from the <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is <code>count</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_CreateSetComparer\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_CreateSetComparer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CreateSetComparer()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that can be used for equality testing of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Collections.Generic.IEqualityComparer&lt;System.Collections.Generic.HashSet&lt;T&gt;&gt; CreateSetComparer ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer</a>&lt;<a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet</a>&lt;<span class=\"xref\">T</span>&gt;&gt;</div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object that can be used for deep equality testing of the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.iequalitycomparer\" data-linktype=\"relative-path\">IEqualityComparer</a> object checks for equality at only one level; however, you can chain together comparers at additional levels to perform deeper equality testing.  </p>\n<p> Calling this method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_ExceptWith_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_ExceptWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ExceptWith(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements in the specified collection from the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void ExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection of items to remove from the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The ExceptWith method is the equivalent of mathematical set subtraction.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>other</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collections with overlapping sets of data. The lower range of values is then removed from the larger set using the ExceptWith method.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Generic.HashSet_ExceptWith#02\">    static void Main()\n    {\n        HashSet&lt;int&gt;^ lowNumbers = gcnew HashSet&lt;int&gt;();\n        HashSet&lt;int&gt;^ highNumbers = gcnew HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 6; i++)\n        {\n            lowNumbers-&gt;Add(i);\n        }\n\n        for (int i = 3; i &lt; 10; i++)\n        {\n            highNumbers-&gt;Add(i);\n        }\n\n        Console::Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers-&gt;Count);\n        DisplaySet(lowNumbers);\n\n        Console::Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers-&gt;Count);\n        DisplaySet(highNumbers);\n\n        Console::WriteLine(&quot;highNumbers ExceptWith lowNumbers...&quot;);\n        highNumbers-&gt;ExceptWith(lowNumbers);\n\n        Console::Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers-&gt;Count);\n        DisplaySet(highNumbers);\n    }\n    /* This example provides output similar to the following:\n     * lowNumbers contains 6 elements: { 0 1 2 3 4 5 }\n     * highNumbers contains 7 elements: { 3 4 5 6 7 8 9 }\n     * highNumbers ExceptWith lowNumbers...\n     * highNumbers contains 4 elements: { 6 7 8 9 }\n     */\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_ExceptWith#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; highNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 6; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 3; i &lt; 10; i++)\n        {\n            highNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers.Count);\n        DisplaySet(highNumbers);\n\n        Console.WriteLine(&quot;highNumbers ExceptWith lowNumbers...&quot;);\n        highNumbers.ExceptWith(lowNumbers);\n\n        Console.Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers.Count);\n        DisplaySet(highNumbers);\n\n\n\n    }\n    /* This example provides output similar to the following:\n     * lowNumbers contains 6 elements: { 0 1 2 3 4 5 }\n     * highNumbers contains 7 elements: { 3 4 5 6 7 8 9 }\n     * highNumbers ExceptWith lowNumbers...\n     * highNumbers contains 4 elements: { 6 7 8 9 }\n     */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_ExceptWith#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim highNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 5\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 3 To 9\n            highNumbers.Add(i)\n        Next i\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers.Count)\n        DisplaySet(highNumbers)\n\n        Console.WriteLine(&quot;highNumbers ExceptWith lowNumbers...&quot;)\n        highNumbers.ExceptWith(lowNumbers)\n\n        Console.Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers.Count)\n        DisplaySet(highNumbers)\n\n    End Sub\n    &#39; This example provides output similar to the following:\n    &#39; lowNumbers contains 6 elements: { 0 1 2 3 4 5 }\n    &#39; highNumbers contains 7 elements: { 3 4 5 6 7 8 9 }\n    &#39; highNumbers ExceptWith lowNumbers...\n    &#39; highNumbers contains 4 elements: { 6 7 8 9 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.HashSet&lt;T&gt;.Enumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator\" data-linktype=\"relative-path\">HashSet<t>+Enumerator</t></a></div>\r\n                  </div>\r\n                  <p>A <span class=\"xref\">stem.Collections.Generic.HashSet`1.Enumerator</span> object for the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of enumerators. Therefore, using <code>foreach</code> is recommended instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, the <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> property returns the same object until <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.hashset-1.enumerator#System_Collections_Generic_HashSet_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator object instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_GetObjectData_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetObjectData(SerializationInfo,StreamingContext)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and returns the data needed to serialize a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>info</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object that contains the information required to serialize the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>context</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a> structure that contains the source and destination of the serialized stream associated with the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>info</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_IntersectWith_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_IntersectWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IntersectWith(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Modifies the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to contain only elements that are present in that object and in the specified collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void IntersectWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the collection represented by the <code>other</code> parameter is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> and <code>m</code> is the number of elements in <code>other</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_IsProperSubsetOf_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_IsProperSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsProperSubsetOf(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a proper subset of the specified collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a proper subset of <code>other</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An empty set is a proper subset of any other collection. Therefore, this method returns <code>true</code> if the collection represented by the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is empty unless the <code>other</code> parameter is also an empty set.  </p>\n<p> This method always returns <code>false</code> if <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> is greater than or equal to the number of elements in <code>other</code>.  </p>\n<p> If the collection represented by <code>other</code> is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, then this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> and <code>m</code> is the number of elements in <code>other</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two disparate <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects and compares them to each other. In this example, <code>lowNumbers</code> is both a subset and a proper subset of <code>allNumbers</code> until <code>allNumbers</code> is modified, using the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IntersectWith_\" data-linktype=\"relative-path\">IntersectWith</a> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>lowNumbers</code> is still a subset of <code>allNumbers</code> but is no longer a proper subset.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim allNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 1 To 4\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 0 To 9\n            allNumbers.Add(i)\n        Next i\n\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;, _\n            lowNumbers.Overlaps(allNumbers))\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n\n        &#39; Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers)\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; lowNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; lowNumbers overlaps allNumbers: True\n    &#39; allNumbers and lowNumbers are equal sets: False\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: True\n    &#39; allNumbers is a proper superset of lowNumbers: True\n    &#39; allNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers and lowNumbers are equal sets: True\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: False\n    &#39; allNumbers is a proper superset of lowNumbers: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; allNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 1; i &lt; 5; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            allNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;,\n            lowNumbers.Overlaps(allNumbers));\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n\n        // Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers);\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n    }\n    /* This code example produces output similar to the following:\n     * lowNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * lowNumbers overlaps allNumbers: True\n     * allNumbers and lowNumbers are equal sets: False\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: True\n     * allNumbers is a proper superset of lowNumbers: True\n     * allNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers and lowNumbers are equal sets: True\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: False\n     * allNumbers is a proper superset of lowNumbers: False\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_IsProperSupersetOf_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_IsProperSupersetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsProperSupersetOf(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a proper superset of the specified collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a proper superset of <code>other</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An empty set is a proper superset of any other collection. Therefore, this method returns <code>true</code> if the collection represented by the <code>other</code> parameter is empty unless the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection is also empty.  </p>\n<p> This method always returns <code>false</code> if <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than or equal to the number of elements in <code>other</code>.  </p>\n<p> If the collection represented by <code>other</code> is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements in <code>other</code> and <code>m</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two disparate <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects and compares them to each other. In this example, <code>allNumbers</code> is both a superset and a proper superset of <code>lowNumbers</code> until <code>allNumbers</code> is modified, using the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IntersectWith_\" data-linktype=\"relative-path\">IntersectWith</a> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>allNumbers</code> is still a superset of <code>lowNumbers</code> but is no longer a proper superset.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim allNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 1 To 4\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 0 To 9\n            allNumbers.Add(i)\n        Next i\n\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;, _\n            lowNumbers.Overlaps(allNumbers))\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n\n        &#39; Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers)\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; lowNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; lowNumbers overlaps allNumbers: True\n    &#39; allNumbers and lowNumbers are equal sets: False\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: True\n    &#39; allNumbers is a proper superset of lowNumbers: True\n    &#39; allNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers and lowNumbers are equal sets: True\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: False\n    &#39; allNumbers is a proper superset of lowNumbers: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; allNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 1; i &lt; 5; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            allNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;,\n            lowNumbers.Overlaps(allNumbers));\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n\n        // Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers);\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n    }\n    /* This code example produces output similar to the following:\n     * lowNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * lowNumbers overlaps allNumbers: True\n     * allNumbers and lowNumbers are equal sets: False\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: True\n     * allNumbers is a proper superset of lowNumbers: True\n     * allNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers and lowNumbers are equal sets: True\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: False\n     * allNumbers is a proper superset of lowNumbers: False\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_IsSubsetOf_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_IsSubsetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSubsetOf(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a subset of the specified collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a subset of <code>other</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>An empty set is a subset of any other collection, including an empty set; therefore, this method returns <code>true</code> if the collection represented by the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is empty, even if the <code>other</code> parameter is an empty set.  </p>\n<p> This method always returns <code>false</code> if <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> is greater than the number of elements in <code>other</code>.  </p>\n<p> If the collection represented by <code>other</code> is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> and <code>m</code> is the number of elements in <code>other</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two disparate <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects and compares them to each other. In this example, <code>lowNumbers</code> is both a subset and a proper subset of <code>allNumbers</code> until <code>allNumbers</code> is modified, using the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IntersectWith_\" data-linktype=\"relative-path\">IntersectWith</a> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>lowNumbers</code> is still a subset of <code>allNumbers</code> but is no longer a proper subset.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim allNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 1 To 4\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 0 To 9\n            allNumbers.Add(i)\n        Next i\n\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;, _\n            lowNumbers.Overlaps(allNumbers))\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n\n        &#39; Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers)\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; lowNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; lowNumbers overlaps allNumbers: True\n    &#39; allNumbers and lowNumbers are equal sets: False\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: True\n    &#39; allNumbers is a proper superset of lowNumbers: True\n    &#39; allNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers and lowNumbers are equal sets: True\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: False\n    &#39; allNumbers is a proper superset of lowNumbers: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; allNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 1; i &lt; 5; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            allNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;,\n            lowNumbers.Overlaps(allNumbers));\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n\n        // Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers);\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n    }\n    /* This code example produces output similar to the following:\n     * lowNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * lowNumbers overlaps allNumbers: True\n     * allNumbers and lowNumbers are equal sets: False\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: True\n     * allNumbers is a proper superset of lowNumbers: True\n     * allNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers and lowNumbers are equal sets: True\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: False\n     * allNumbers is a proper superset of lowNumbers: False\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_IsSupersetOf_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_IsSupersetOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSupersetOf(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a superset of the specified collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is a superset of <code>other</code>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>All collections, including the empty set, are supersets of the empty set. Therefore, this method returns <code>true</code> if the collection represented by the <code>other</code> parameter is empty, even if the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is empty.  </p>\n<p> This method always returns <code>false</code> if <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than the number of elements in <code>other</code>.  </p>\n<p> If the collection represented by <code>other</code> is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements in <code>other</code> and <code>m</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two disparate <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects and compares them to each other. In this example, <code>allNumbers</code> is both a superset and a proper superset of <code>lowNumbers</code> until <code>allNumbers</code> is modified, using the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_IntersectWith_\" data-linktype=\"relative-path\">IntersectWith</a> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>allNumbers</code> is still a superset of <code>lowNumbers</code> but is no longer a proper superset.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim allNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 1 To 4\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 0 To 9\n            allNumbers.Add(i)\n        Next i\n\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;, _\n            lowNumbers.Overlaps(allNumbers))\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n\n        &#39; Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers)\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; lowNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; lowNumbers overlaps allNumbers: True\n    &#39; allNumbers and lowNumbers are equal sets: False\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: True\n    &#39; allNumbers is a proper superset of lowNumbers: True\n    &#39; allNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers and lowNumbers are equal sets: True\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: False\n    &#39; allNumbers is a proper superset of lowNumbers: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; allNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 1; i &lt; 5; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            allNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;,\n            lowNumbers.Overlaps(allNumbers));\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n\n        // Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers);\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n    }\n    /* This code example produces output similar to the following:\n     * lowNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * lowNumbers overlaps allNumbers: True\n     * allNumbers and lowNumbers are equal sets: False\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: True\n     * allNumbers is a proper superset of lowNumbers: True\n     * allNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers and lowNumbers are equal sets: True\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: False\n     * allNumbers is a proper superset of lowNumbers: False\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_OnDeserialization_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_OnDeserialization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OnDeserialization(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Implements the <a class=\"xref\" href=\"system.runtime.serialization.iserializable\" data-linktype=\"relative-path\">ISerializable</a> interface and raises the deserialization event when the deserialization is complete.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void OnDeserialization (object sender);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>sender</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The source of the deserialization event.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationexception\" data-linktype=\"relative-path\">SerializationException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a> object associated with the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is invalid.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Overlaps_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Overlaps_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Overlaps(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object and a specified collection share common elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Overlaps (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object and <code>other</code> share at least one common element; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>other</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two disparate <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects and compares them to each another. In this example, <code>allNumbers</code> and <code>lowNumbers</code> are shown to share common elements using the Overlaps method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim allNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 1 To 4\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 0 To 9\n            allNumbers.Add(i)\n        Next i\n\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;, _\n            lowNumbers.Overlaps(allNumbers))\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n\n        &#39; Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers)\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; lowNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; lowNumbers overlaps allNumbers: True\n    &#39; allNumbers and lowNumbers are equal sets: False\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: True\n    &#39; allNumbers is a proper superset of lowNumbers: True\n    &#39; allNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers and lowNumbers are equal sets: True\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: False\n    &#39; allNumbers is a proper superset of lowNumbers: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; allNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 1; i &lt; 5; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            allNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;,\n            lowNumbers.Overlaps(allNumbers));\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n\n        // Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers);\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n    }\n    /* This code example produces output similar to the following:\n     * lowNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * lowNumbers overlaps allNumbers: True\n     * allNumbers and lowNumbers are equal sets: False\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: True\n     * allNumbers is a proper superset of lowNumbers: True\n     * allNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers and lowNumbers are equal sets: True\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: False\n     * allNumbers is a proper superset of lowNumbers: False\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_Remove__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(T)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the specified element from a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Remove (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The element to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the element is successfully found and removed; otherwise, <code>false</code>.  This method returns <code>false</code> if <code>item</code> is not found in the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object does not contain the specified element, the object remains unchanged. No exception is thrown.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to remove values from a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection using the Remove method. In this example, zero is arbitrarily removed from the <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_RemoveWhere#02\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    static void Main()\n    {\n        HashSet&lt;int&gt; numbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 20; i++) {\n            numbers.Add(i);\n        }\n\n        // Display all the numbers in the hash table.\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n        // Remove all odd numbers.\n        numbers.RemoveWhere(IsOdd);\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n        // Check if the hash table contains 0 and, if so, remove it.\n        if (numbers.Contains(0)) {\n            numbers.Remove(0);\n        }\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n    }\n\n    private static bool IsOdd(int i)\n    {\n        return ((i % 2) == 1);\n    }\n\n    private static void DisplaySet(HashSet&lt;int&gt; set)\n    {\n        Console.Write(&quot;{&quot;);\n        foreach (int i in set)\n            Console.Write(&quot; {0}&quot;, i);\n\n        Console.WriteLine(&quot; }&quot;);\n    }\n}\n// This example display the following output:\n//    numbers contains 20 elements: { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }\n//    numbers contains 10 elements: { 0 2 4 6 8 10 12 14 16 18 }\n//    numbers contains 9 elements: { 2 4 6 8 10 12 14 16 18 }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_RemoveWhere#02\">Imports System.Collections.Generic\n\nModule Example\n    Public Sub Main()\n        Dim numbers As New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 19\n            numbers.Add(i)\n        Next i\n\n        &#39; Display all the numbers in the hash table.\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n\n        &#39; Remove all odd numbers.\n        numbers.RemoveWhere(AddressOf IsOdd)\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n\n        &#39; Check if the hash table contains 0 and, if so, remove it.\n        If numbers.Contains(0) Then\n            numbers.Remove(0)\n        End If\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n    End Sub\n\n    Private Function IsOdd(ByVal i As Integer) As Boolean\n        Return ((i Mod 2) = 1)\n    End Function\n\n    Private Sub DisplaySet(ByVal coll As HashSet(Of Integer))\n        Console.Write(&quot;{&quot;)\n        For Each i As Integer In coll\n            Console.Write(&quot; {0}&quot;, i)\n        Next\n        Console.WriteLine(&quot; }&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    numbers contains 20 elements: { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }\n&#39;    numbers contains 10 elements: { 0 2 4 6 8 10 12 14 16 18 }\n&#39;    numbers contains 9 elements: { 2 4 6 8 10 12 14 16 18 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_RemoveWhere_System_Predicate__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_RemoveWhere_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveWhere(Predicate&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Removes all elements that match the conditions defined by the specified predicate from a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RemoveWhere (Predicate&lt;T&gt; match);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>match</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.predicate-1\" data-linktype=\"relative-path\">Predicate<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <span class=\"xref\">stem.Predicate`1</span> delegate that defines the conditions of the elements to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements that were removed from the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>match</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to remove values from a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection using the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Remove_\" data-linktype=\"relative-path\">Remove</a> method. In this example, all odd integers are removed from the <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection as specified by the <code>match</code> delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_RemoveWhere#02\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    static void Main()\n    {\n        HashSet&lt;int&gt; numbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 20; i++) {\n            numbers.Add(i);\n        }\n\n        // Display all the numbers in the hash table.\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n        // Remove all odd numbers.\n        numbers.RemoveWhere(IsOdd);\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n        // Check if the hash table contains 0 and, if so, remove it.\n        if (numbers.Contains(0)) {\n            numbers.Remove(0);\n        }\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n    }\n\n    private static bool IsOdd(int i)\n    {\n        return ((i % 2) == 1);\n    }\n\n    private static void DisplaySet(HashSet&lt;int&gt; set)\n    {\n        Console.Write(&quot;{&quot;);\n        foreach (int i in set)\n            Console.Write(&quot; {0}&quot;, i);\n\n        Console.WriteLine(&quot; }&quot;);\n    }\n}\n// This example display the following output:\n//    numbers contains 20 elements: { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }\n//    numbers contains 10 elements: { 0 2 4 6 8 10 12 14 16 18 }\n//    numbers contains 9 elements: { 2 4 6 8 10 12 14 16 18 }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_RemoveWhere#02\">Imports System.Collections.Generic\n\nModule Example\n    Public Sub Main()\n        Dim numbers As New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 19\n            numbers.Add(i)\n        Next i\n\n        &#39; Display all the numbers in the hash table.\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n\n        &#39; Remove all odd numbers.\n        numbers.RemoveWhere(AddressOf IsOdd)\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n\n        &#39; Check if the hash table contains 0 and, if so, remove it.\n        If numbers.Contains(0) Then\n            numbers.Remove(0)\n        End If\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n    End Sub\n\n    Private Function IsOdd(ByVal i As Integer) As Boolean\n        Return ((i Mod 2) = 1)\n    End Function\n\n    Private Sub DisplaySet(ByVal coll As HashSet(Of Integer))\n        Console.Write(&quot;{&quot;)\n        For Each i As Integer In coll\n            Console.Write(&quot; {0}&quot;, i)\n        Next\n        Console.WriteLine(&quot; }&quot;)\n    End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    numbers contains 20 elements: { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }\n&#39;    numbers contains 10 elements: { 0 2 4 6 8 10 12 14 16 18 }\n&#39;    numbers contains 9 elements: { 2 4 6 8 10 12 14 16 18 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_SetEquals_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_SetEquals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetEquals(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object and the specified collection contain the same elements.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SetEquals (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object is equal to <code>other</code>; otherwise, false.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetEquals method ignores duplicate entries and the order of elements in the <code>other</code> parameter.  </p>\n<p> If the collection represented by <code>other</code> is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements in <code>other</code> and <code>m</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two disparate <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects and compares them to each another. Initially, the two sets are not equal, which is demonstrated by using the SetEquals method. The <code>allNumbers</code><a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is then modified, after which the sets are equal.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim allNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 1 To 4\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 0 To 9\n            allNumbers.Add(i)\n        Next i\n\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;, _\n            lowNumbers.Overlaps(allNumbers))\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n\n        &#39; Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers)\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count)\n        DisplaySet(allNumbers)\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;, _\n            allNumbers.SetEquals(lowNumbers))\n\n        &#39; Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsSupersetOf(lowNumbers))\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;, _\n            lowNumbers.IsProperSubsetOf(allNumbers))\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;, _\n            allNumbers.IsProperSupersetOf(lowNumbers))\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; lowNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; lowNumbers overlaps allNumbers: True\n    &#39; allNumbers and lowNumbers are equal sets: False\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: True\n    &#39; allNumbers is a proper superset of lowNumbers: True\n    &#39; allNumbers contains 4 elements: { 1 2 3 4 }\n    &#39; allNumbers and lowNumbers are equal sets: True\n    &#39; lowNumbers is a subset of allNumbers: True\n    &#39; allNumbers is a superset of lowNumbers: True\n    &#39; lowNumbers is a proper subset of allNumbers: False\n    &#39; allNumbers is a proper superset of lowNumbers: False\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_boolMethods#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; allNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 1; i &lt; 5; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            allNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;lowNumbers overlaps allNumbers: {0}&quot;,\n            lowNumbers.Overlaps(allNumbers));\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n\n        // Modify allNumbers to remove numbers that are not in lowNumbers.\n        allNumbers.IntersectWith(lowNumbers);\n        Console.Write(&quot;allNumbers contains {0} elements: &quot;, allNumbers.Count);\n        DisplaySet(allNumbers);\n\n        Console.WriteLine(&quot;allNumbers and lowNumbers are equal sets: {0}&quot;,\n            allNumbers.SetEquals(lowNumbers));\n\n        // Show the results of sub/superset testing with the modified set.\n        Console.WriteLine(&quot;lowNumbers is a subset of allNumbers: {0}&quot;,\n            lowNumbers.IsSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a superset of lowNumbers: {0}&quot;,\n            allNumbers.IsSupersetOf(lowNumbers));\n        Console.WriteLine(&quot;lowNumbers is a proper subset of allNumbers: {0}&quot;,\n            lowNumbers.IsProperSubsetOf(allNumbers));\n        Console.WriteLine(&quot;allNumbers is a proper superset of lowNumbers: {0}&quot;,\n            allNumbers.IsProperSupersetOf(lowNumbers));\n    }\n    /* This code example produces output similar to the following:\n     * lowNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * lowNumbers overlaps allNumbers: True\n     * allNumbers and lowNumbers are equal sets: False\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: True\n     * allNumbers is a proper superset of lowNumbers: True\n     * allNumbers contains 4 elements: { 1 2 3 4 }\n     * allNumbers and lowNumbers are equal sets: True\n     * lowNumbers is a subset of allNumbers: True\n     * allNumbers is a superset of lowNumbers: True\n     * lowNumbers is a proper subset of allNumbers: False\n     * allNumbers is a proper superset of lowNumbers: False\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_SymmetricExceptWith_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_SymmetricExceptWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SymmetricExceptWith(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Modifies the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to contain only elements that are present either in that object or in the specified collection, but not both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SymmetricExceptWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>other</code> parameter is a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection with the same equality comparer as the current <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object, this method is an O(<code>n</code>) operation. Otherwise, this method is an O(<code>n</code> + <code>m</code>) operation, where <code>n</code> is the number of elements in <code>other</code> and <code>m</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates two <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collections with overlapping sets of data. The set that contains the lower values is then modified, using the SymmetricExceptWith method, to contain only the values that are not present in both sets.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_SymmetricExceptWith#02\">    Shared Sub Main()\n\n        Dim lowNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim highNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 5\n            lowNumbers.Add(i)\n        Next i\n\n        For i As Integer = 3 To 9\n            highNumbers.Add(i)\n        Next i\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n\n        Console.Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers.Count)\n        DisplaySet(highNumbers)\n\n        Console.WriteLine(&quot;lowNumbers SymmetricExceptWith highNumbers...&quot;)\n        lowNumbers.SymmetricExceptWith(highNumbers)\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count)\n        DisplaySet(lowNumbers)\n    End Sub\n    &#39; This example produces output similar to the following:\n    &#39; lowNumbers contains 6 elements: { 0 1 2 3 4 5 }\n    &#39; highNumbers contains 7 elements: { 3 4 5 6 7 8 9 }\n    &#39; lowNumbers SymmetricExceptWith highNumbers...\n    &#39; lowNumbers contains 7 elements: { 0 1 2 8 7 6 9 }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_SymmetricExceptWith#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; lowNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; highNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 6; i++)\n        {\n            lowNumbers.Add(i);\n        }\n\n        for (int i = 3; i &lt; 10; i++)\n        {\n            highNumbers.Add(i);\n        }\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n        Console.Write(&quot;highNumbers contains {0} elements: &quot;, highNumbers.Count);\n        DisplaySet(highNumbers);\n\n        Console.WriteLine(&quot;lowNumbers SymmetricExceptWith highNumbers...&quot;);\n        lowNumbers.SymmetricExceptWith(highNumbers);\n\n        Console.Write(&quot;lowNumbers contains {0} elements: &quot;, lowNumbers.Count);\n        DisplaySet(lowNumbers);\n\n\n\n    }\n    /* This example provides output similar to the following:\n     * lowNumbers contains 6 elements: { 0 1 2 3 4 5 }\n     * highNumbers contains 7 elements: { 3 4 5 6 7 8 9 }\n     * lowNumbers SymmetricExceptWith highNumbers...\n     * lowNumbers contains 7 elements: { 0 1 2 8 7 6 9 }\n     */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_TrimExcess\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_TrimExcess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimExcess()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity of a <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TrimExcess ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use the TrimExcess method to minimize a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object&#39;s memory overhead once it is known that no new elements will be added. To completely clear a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object and release all memory referenced by it, call this method after calling the <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.hashset-1#System_Collections_Generic_HashSet_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates and populates a <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> collection, and then clears the collection and releases the memory referenced by it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_Clear#02\">    static void Main()\n    {\n        HashSet&lt;int&gt; Numbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 10; i++)\n        {\n            Numbers.Add(i);\n        }\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count);\n        DisplaySet(Numbers);\n\n        Numbers.Clear();\n        Numbers.TrimExcess();\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count);\n        DisplaySet(Numbers);\n\n    }\n    /* This example produces output similar to the following:\n     * Numbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n     * Numbers contains 0 elements: { }\n     */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_Clear#02\">    Shared Sub Main()\n\n        Dim Numbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 9\n            Numbers.Add(i)\n        Next i\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count)\n        DisplaySet(Numbers)\n\n        Numbers.Clear()\n        Numbers.TrimExcess()\n\n        Console.Write(&quot;Numbers contains {0} elements: &quot;, Numbers.Count)\n        DisplaySet(Numbers)\n\n    End Sub\n    &#39; This code example produces output similar to the following:\n    &#39; Numbers contains 10 elements: { 0 1 2 3 4 5 6 7 8 9 }\n    &#39; Numbers contains 0 elements: { }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_UnionWith_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_UnionWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UnionWith(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Modifies the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object to contain all elements that are present in itself, the specified collection, or both.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void UnionWith (System.Collections.Generic.IEnumerable&lt;T&gt; other);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>other</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection to compare to the current <span class=\"xref\">stem.Collections.Generic.HashSet`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>other</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in the <code>other</code> parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to merge two disparate sets. This example creates two <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> objects, and populates them with even and odd numbers, respectively. A third <a class=\"xref\" href=\"system.collections.generic.hashset-1\" data-linktype=\"relative-path\">HashSet&lt;T&gt;</a> object is created from the set that contains the even numbers. The example then calls the UnionWith method, which adds the odd number set to the third set.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.HashSet_UnionWith#01\">using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        HashSet&lt;int&gt; evenNumbers = new HashSet&lt;int&gt;();\n        HashSet&lt;int&gt; oddNumbers = new HashSet&lt;int&gt;();\n\n        for (int i = 0; i &lt; 5; i++)\n        {\n            // Populate numbers with just even numbers.\n            evenNumbers.Add(i * 2);\n\n            // Populate oddNumbers with just odd numbers.\n            oddNumbers.Add((i * 2) + 1);\n        }\n\n        Console.Write(&quot;evenNumbers contains {0} elements: &quot;, evenNumbers.Count);\n        DisplaySet(evenNumbers);\n\n        Console.Write(&quot;oddNumbers contains {0} elements: &quot;, oddNumbers.Count);\n        DisplaySet(oddNumbers);\n\n        // Create a new HashSet populated with even numbers.\n        HashSet&lt;int&gt; numbers = new HashSet&lt;int&gt;(evenNumbers);\n        Console.WriteLine(&quot;numbers UnionWith oddNumbers...&quot;);\n        numbers.UnionWith(oddNumbers);\n\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count);\n        DisplaySet(numbers);\n\n    }\n\n    private static void DisplaySet(HashSet&lt;int&gt; set)\n    {\n        Console.Write(&quot;{&quot;);\n        foreach (int i in set)\n        {\n            Console.Write(&quot; {0}&quot;, i);\n        }\n        Console.WriteLine(&quot; }&quot;);\n    }\n}\n/* This example produces output similar to the following:\n * evenNumbers contains 5 elements: { 0 2 4 6 8 }\n * oddNumbers contains 5 elements: { 1 3 5 7 9 }\n * numbers UnionWith oddNumbers...\n * numbers contains 10 elements: { 0 2 4 6 8 1 3 5 7 9 }\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.HashSet_UnionWith#01\">Imports System\nImports System.Collections.Generic\n\nClass Program\n\n    Shared Sub Main()\n\n        Dim evenNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n        Dim oddNumbers As HashSet(Of Integer) = New HashSet(Of Integer)()\n\n        For i As Integer = 0 To 4\n\n            &#39; Populate evenNumbers with only even numbers.\n            evenNumbers.Add(i * 2)\n\n            &#39; Populate oddNumbers with only odd numbers.\n            oddNumbers.Add((i * 2) + 1)\n        Next i\n\n        Console.Write(&quot;evenNumbers contains {0} elements: &quot;, evenNumbers.Count)\n        DisplaySet(evenNumbers)\n\n        Console.Write(&quot;oddNumbers contains {0} elements: &quot;, oddNumbers.Count)\n        DisplaySet(oddNumbers)\n\n        &#39; Create a new HashSet populated with even numbers.\n        Dim numbers As HashSet(Of Integer) = New HashSet(Of Integer)(evenNumbers)\n        Console.WriteLine(&quot;numbers UnionWith oddNumbers...&quot;)\n        numbers.UnionWith(oddNumbers)\n\n        Console.Write(&quot;numbers contains {0} elements: &quot;, numbers.Count)\n        DisplaySet(numbers)\n    End Sub\n\n\n    Private Shared Sub DisplaySet(ByVal coll As HashSet(Of Integer))\n        Console.Write(&quot;{&quot;)\n        For Each i As Integer In coll\n            Console.Write(&quot; {0}&quot;, i)\n        Next i\n        Console.WriteLine(&quot; }&quot;)\n    End Sub\n\nEnd Class\n&#39; This example produces output similar to the following:\n&#39; evenNumbers contains 5 elements: { 0 2 4 6 8 }\n&#39; oddNumbers contains 5 elements: { 1 3 5 7 9 }\n&#39; numbers UnionWith oddNumbers...\n&#39; numbers contains 10 elements: { 0 2 4 6 8 1 3 5 7 9 }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_System_Collections_Generic_ICollection_T__Add__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_System_Collections_Generic_ICollection_T__Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.Add(T)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an item to an <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection&lt;T&gt;.Add (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to add to the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Capacity_\" data-linktype=\"relative-path\">Capacity</a>, this method is an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.list-1#System_Collections_Generic_List_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_System_Collections_Generic_ICollection_T__IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_System_Collections_Generic_ICollection_T__IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection&lt;T&gt;.IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether a collection is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the collection is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_System_Collections_Generic_IEnumerable_T__GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable&lt;T&gt;.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator<t></t></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerator`1</span> object that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, the <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property returns the same object until <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator object instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_HashSet_1_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_HashSet_1_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> object that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property is undefined. Therefore, you must call the <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> property returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.HashSet-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Comparer\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.CreateSetComparer\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.ExceptWith\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.GetObjectData\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IntersectWith\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IsProperSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IsProperSupersetOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IsSubsetOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IsSupersetOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.OnDeserialization\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Overlaps\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.RemoveWhere\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.SetEquals\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.SymmetricExceptWith\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.ICollection&lt;T&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.ICollection&lt;T&gt;.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IEnumerable&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.TrimExcess\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.HashSet&lt;T&gt;.UnionWith\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-16 06:20 AM\">\r\n<meta name=\"document_id\" content=\"c897b339-58fc-8c6f-2c14-f45d9501110f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a set of values.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Generic/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.HashSet`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.HashSet-1.yml","open_to_public_contributors":true,"api_name":["System.Collections.Generic.HashSet<T>","System.Collections.Generic.HashSet<T>..ctor","System.Collections.Generic.HashSet<T>.Add","System.Collections.Generic.HashSet<T>.Clear","System.Collections.Generic.HashSet<T>.Comparer","System.Collections.Generic.HashSet<T>.Contains","System.Collections.Generic.HashSet<T>.CopyTo","System.Collections.Generic.HashSet<T>.Count","System.Collections.Generic.HashSet<T>.CreateSetComparer","System.Collections.Generic.HashSet<T>.ExceptWith","System.Collections.Generic.HashSet<T>.GetEnumerator","System.Collections.Generic.HashSet<T>.GetObjectData","System.Collections.Generic.HashSet<T>.IntersectWith","System.Collections.Generic.HashSet<T>.IsProperSubsetOf","System.Collections.Generic.HashSet<T>.IsProperSupersetOf","System.Collections.Generic.HashSet<T>.IsSubsetOf","System.Collections.Generic.HashSet<T>.IsSupersetOf","System.Collections.Generic.HashSet<T>.OnDeserialization","System.Collections.Generic.HashSet<T>.Overlaps","System.Collections.Generic.HashSet<T>.Remove","System.Collections.Generic.HashSet<T>.RemoveWhere","System.Collections.Generic.HashSet<T>.SetEquals","System.Collections.Generic.HashSet<T>.SymmetricExceptWith","System.Collections.Generic.HashSet<T>.ICollection<T>.Add","System.Collections.Generic.HashSet<T>.ICollection<T>.IsReadOnly","System.Collections.Generic.HashSet<T>.IEnumerable<T>.GetEnumerator","System.Collections.Generic.HashSet<T>.IEnumerable.GetEnumerator","System.Collections.Generic.HashSet<T>.TrimExcess","System.Collections.Generic.HashSet<T>.UnionWith"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.HashSet`1","System::Collections::Generic::HashSet`1","System.Collections.Generic.HashSet`1.#ctor","System::Collections::Generic::HashSet`1::#ctor","System.Collections.Generic.HashSet`1.Add","System::Collections::Generic::HashSet`1::Add","System.Collections.Generic.HashSet`1.Clear","System::Collections::Generic::HashSet`1::Clear","System.Collections.Generic.HashSet`1.Comparer","System::Collections::Generic::HashSet`1::Comparer","System.Collections.Generic.HashSet`1.Contains","System::Collections::Generic::HashSet`1::Contains","System.Collections.Generic.HashSet`1.CopyTo","System::Collections::Generic::HashSet`1::CopyTo","System.Collections.Generic.HashSet`1.Count","System::Collections::Generic::HashSet`1::Count","System.Collections.Generic.HashSet`1.CreateSetComparer","System::Collections::Generic::HashSet`1::CreateSetComparer","System.Collections.Generic.HashSet`1.ExceptWith","System::Collections::Generic::HashSet`1::ExceptWith","System.Collections.Generic.HashSet`1.GetEnumerator","System::Collections::Generic::HashSet`1::GetEnumerator","System.Collections.Generic.HashSet`1.GetObjectData","System::Collections::Generic::HashSet`1::GetObjectData","System.Collections.Generic.HashSet`1.IntersectWith","System::Collections::Generic::HashSet`1::IntersectWith","System.Collections.Generic.HashSet`1.IsProperSubsetOf","System::Collections::Generic::HashSet`1::IsProperSubsetOf","System.Collections.Generic.HashSet`1.IsProperSupersetOf","System::Collections::Generic::HashSet`1::IsProperSupersetOf","System.Collections.Generic.HashSet`1.IsSubsetOf","System::Collections::Generic::HashSet`1::IsSubsetOf","System.Collections.Generic.HashSet`1.IsSupersetOf","System::Collections::Generic::HashSet`1::IsSupersetOf","System.Collections.Generic.HashSet`1.OnDeserialization","System::Collections::Generic::HashSet`1::OnDeserialization","System.Collections.Generic.HashSet`1.Overlaps","System::Collections::Generic::HashSet`1::Overlaps","System.Collections.Generic.HashSet`1.Remove","System::Collections::Generic::HashSet`1::Remove","System.Collections.Generic.HashSet`1.RemoveWhere","System::Collections::Generic::HashSet`1::RemoveWhere","System.Collections.Generic.HashSet`1.SetEquals","System::Collections::Generic::HashSet`1::SetEquals","System.Collections.Generic.HashSet`1.SymmetricExceptWith","System::Collections::Generic::HashSet`1::SymmetricExceptWith","System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add","System::Collections::Generic::HashSet`1::System#Collections#Generic#ICollection{T}#Add","System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly","System::Collections::Generic::HashSet`1::System#Collections#Generic#ICollection{T}#IsReadOnly","System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator","System::Collections::Generic::HashSet`1::System#Collections#Generic#IEnumerable{T}#GetEnumerator","System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator","System::Collections::Generic::HashSet`1::System#Collections#IEnumerable#GetEnumerator","System.Collections.Generic.HashSet`1.TrimExcess","System::Collections::Generic::HashSet`1::TrimExcess","System.Collections.Generic.HashSet`1.UnionWith","System::Collections::Generic::HashSet`1::UnionWith"],"dev_langs":["csharp"],"updated_at":"2017-03-16 06:20 AM","document_id":"c897b339-58fc-8c6f-2c14-f45d9501110f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Generic/HashSet`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HashSet<T> class | Microsoft Docs","_op_ogTitle":"HashSet<T> class","description":"Represents a set of values.  \n To browse the .NET Framework source code for this type, see the Reference Source.\n","toc_asset_id":"_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.HashSet`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.hashset-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.hashset-1","fileRelativePath":"System.Collections.Generic.HashSet-1.html"},"themesRelativePathToOutputRoot":"_themes/"}