{"content":"    \r\n    <h1 id=\"System_Windows_DependencyPropertyKey\">\r\n      <span class=\"lang-csharp\">DependencyPropertyKey</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a dependency property identifier for limited write access to a read-only dependency property.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public sealed class DependencyPropertyKey</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">DependencyPropertyKey</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>DependencyPropertyKey instances are obtained as the return value of a dependency property registration call using the methods <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterReadOnly_\" data-linktype=\"relative-path\">RegisterReadOnly</a> or <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_RegisterAttachedReadOnly_\" data-linktype=\"relative-path\">RegisterAttachedReadOnly</a>.  </p>\n<p> The types that register a dependency property can use the DependencyPropertyKey in calls to <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_SetValue_\" data-linktype=\"relative-path\">SetValue</a> and <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_ClearValue_\" data-linktype=\"relative-path\">ClearValue</a> that adjust the property&#39;s value as part of class logic. If permitted by the access level of the key, related classes can use the key and the dependency property also. For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.  </p>\n<p> The DependencyPropertyKey returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property. Also, exposing the key causes a mismatch between the available dependency property behaviors and its common language runtime (CLR) property wrapper implementations, which is bad class design.  </p>\n<p> Instead of exposing the key itself, you should instead expose the <a class=\"xref\" href=\"system.windows.dependencypropertykey#System_Windows_DependencyPropertyKey_DependencyProperty_\" data-linktype=\"relative-path\">DependencyProperty</a> value of the DependencyPropertyKey as a <code>public static readonly</code><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> on your class. This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values. However, the identifier thus obtained does not have the full capabilities of a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> for many property system operations.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyPropertyKey_DependencyProperty\" data-linktype=\"self-bookmark\">DependencyProperty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_DependencyPropertyKey_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_\" data-linktype=\"self-bookmark\">OverrideMetadata(Type,PropertyMetadata)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyPropertyKey_DependencyProperty\">\r\n    \r\n            <a id=\"System_Windows_DependencyPropertyKey_DependencyProperty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DependencyProperty</div>        \r\n          </div>\r\n    \r\n            <p>Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.DependencyProperty DependencyProperty { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a></div>\r\n                  </div>\r\n                  <p>The relevant dependency property identifier.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DependencyProperty value enables a read-only property&#39;s identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.  </p>\n<p> In order to implement the get property accessor for a read-only dependency property, you should create and expose a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier on your class. This serves two purposes:  </p>\n<ul>\n<li><p>Your own class needs the <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier in order to implement the get accessor for the property wrapper. You use the <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> as a parameter for the <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetValue_\" data-linktype=\"relative-path\">GetValue</a> call that implements the get accessor.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form. For instance, if you called <a class=\"xref\" href=\"system.windows.dependencyobject#System_Windows_DependencyObject_GetLocalValueEnumerator_\" data-linktype=\"relative-path\">GetLocalValueEnumerator</a> on some <a class=\"xref\" href=\"system.windows.dependencyobject\" data-linktype=\"relative-path\">DependencyObject</a> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> value rather than the key. Not exposing a <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.  </p>\n<p>To expose the  <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier on your class, you call DependencyProperty directly on your key. Use this value to create a <code>public static readonly</code><a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier on the class, which parallels the <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a>.</p>\n</li>\n</ul>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example calls DependencyProperty to expose the <a class=\"xref\" href=\"system.windows.dependencyproperty\" data-linktype=\"relative-path\">DependencyProperty</a> identifier (<code>AquariumGraphicProperty</code>) for the <code>AquariumGraphic</code> read-only dependency property on a class. The example also shows the <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> creation (as an internal member) and the get accessor for <code>AquariumGraphic</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"WPFAquariumSln#RODP\">internal static readonly DependencyPropertyKey AquariumSizeKey = DependencyProperty.RegisterReadOnly(\n  &quot;AquariumSize&quot;,\n  typeof(double),\n  typeof(Aquarium),\n  new PropertyMetadata(double.NaN)\n);\npublic static readonly DependencyProperty AquariumSizeProperty =\n  AquariumSizeKey.DependencyProperty;\npublic double AquariumSize\n{\n  get { return (double)GetValue(AquariumSizeProperty); }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WPFAquariumSln#RODP\">Friend Shared ReadOnly AquariumSizeKey As DependencyPropertyKey = DependencyProperty.RegisterReadOnly(&quot;AquariumSize&quot;, GetType(Double), GetType(Aquarium), New PropertyMetadata(Double.NaN))\nPublic Shared ReadOnly AquariumSizeProperty As DependencyProperty = AquariumSizeKey.DependencyProperty\nPublic ReadOnly Property AquariumSize() As Double\n    Get\n        Return CDbl(GetValue(AquariumSizeProperty))\n    End Get\nEnd Property\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_DependencyPropertyKey_OverrideMetadata_System_Type_System_Windows_PropertyMetadata_\">\r\n    \r\n            <a id=\"System_Windows_DependencyPropertyKey_OverrideMetadata_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">OverrideMetadata(Type,PropertyMetadata)</div>        \r\n          </div>\r\n    \r\n            <p>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>forType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The type on which this dependency property exists and metadata should be overridden.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>typeMetadata</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.propertymetadata\" data-linktype=\"relative-path\">PropertyMetadata</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Metadata supplied for this type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Attempted metadata override on a read-write dependency property (cannot be done using this signature).</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Metadata was already established for the property as it exists on the provided type.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).  </p>\n<p> As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated). Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <code>forType</code> parameter of this method, or equivalent initialization for that class.  </p>\n<p> This method effectively forwards to the <a class=\"xref\" href=\"system.windows.dependencyproperty#System_Windows_DependencyProperty_OverrideMetadata_\" data-linktype=\"relative-path\">OverrideMetadata</a> method, passing the <a class=\"xref\" href=\"system.windows.dependencypropertykey\" data-linktype=\"relative-path\">DependencyPropertyKey</a> instance as the key parameter.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example overrides metadata for an existing read-only dependency property that a class inherits. In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have. You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <a class=\"xref\" href=\"system.windows.frameworkpropertymetadataoptions\" data-linktype=\"relative-path\">FrameworkPropertyMetadataOptions</a> values, etc.)  </p>\n<pre><code class=\"lang-cs\" name=\"WPFAquariumSln#RODPOverride\">static Fishbowl() {\n  Aquarium.AquariumSizeKey.OverrideMetadata(\n    typeof(Aquarium),\n    new PropertyMetadata(\n      double.NaN,\n      null,\n      new CoerceValueCallback(CoerceFishbowlAquariumSize)\n    )\n  );\n}\n\nstatic object CoerceFishbowlAquariumSize(DependencyObject d,Object baseValue)\n{\n    //Aquarium is 2D, a Fishbowl is a round Aquarium, so the Size we return is the ellipse of that height/width rather than the rectangle\n    Fishbowl fb = (Fishbowl)d;\n    //other constraints assure that H,W are positive\n    return Convert.ToInt32(Math.PI * (fb.Width / 2) * (fb.Height / 2));\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WPFAquariumSln#RODPOverride\">Shared Sub New()\n    Aquarium.AquariumSizeKey.OverrideMetadata(GetType(Aquarium), New PropertyMetadata(Double.NaN, Nothing, New CoerceValueCallback(AddressOf CoerceFishbowlAquariumSize)))\nEnd Sub\n\nPrivate Shared Function CoerceFishbowlAquariumSize(ByVal d As DependencyObject, ByVal baseValue As Object) As Object\n    &#39;Aquarium is 2D, a Fishbowl is a round Aquarium, so the Size we return is the ellipse of that height/width rather than the rectangle\n    Dim fb As Fishbowl = CType(d, Fishbowl)\n    &#39;other constraints assure that H,W are positive\n    Return Convert.ToInt32(Math.PI * (fb.Width / 2) * (fb.Height / 2))\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.DependencyPropertyKey.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.DependencyPropertyKey.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyPropertyKey\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyPropertyKey.DependencyProperty\">\r\n<meta name=\"APIName\" content=\"System.Windows.DependencyPropertyKey.OverrideMetadata\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"d8deef7e-b05d-a725-10c2-b6b40eb51512\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a dependency property identifier for limited write access to a read-only dependency property.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.DependencyPropertyKey\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.DependencyPropertyKey.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.DependencyPropertyKey.yml","open_to_public_contributors":true,"api_name":["System.Windows.DependencyPropertyKey","System.Windows.DependencyPropertyKey.DependencyProperty","System.Windows.DependencyPropertyKey.OverrideMetadata"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.DependencyPropertyKey","System::Windows::DependencyPropertyKey","System.Windows.DependencyPropertyKey.DependencyProperty","System::Windows::DependencyPropertyKey::DependencyProperty","System.Windows.DependencyPropertyKey.OverrideMetadata","System::Windows::DependencyPropertyKey::OverrideMetadata"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"d8deef7e-b05d-a725-10c2-b6b40eb51512","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/DependencyPropertyKey.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DependencyPropertyKey class | Microsoft Docs","_op_ogTitle":"DependencyPropertyKey class","description":"Provides a dependency property identifier for limited write access to a read-only dependency property.\n","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.DependencyPropertyKey","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.dependencypropertykey","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.dependencypropertykey","fileRelativePath":"System.Windows.DependencyPropertyKey.html"},"themesRelativePathToOutputRoot":"_themes/"}