{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">UnicodeEncoding</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a UTF-16 encoding of Unicode characters.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class UnicodeEncoding : System.Text.Encoding</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div>\r\n  \t\t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">System.Text.Encoding</a></span></div>\r\n  \t\t\t<span class=\"lang-csharp\">UnicodeEncoding</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_ASCII\" data-linktype=\"relative-path\">ASCII</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BigEndianUnicode\" data-linktype=\"relative-path\">BigEndianUnicode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BodyName\" data-linktype=\"relative-path\">BodyName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Clone\" data-linktype=\"relative-path\">Clone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_CodePage\" data-linktype=\"relative-path\">CodePage</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___\" data-linktype=\"relative-path\">Convert(Encoding,Encoding,Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">Convert(Encoding,Encoding,Byte[],Int32,Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_DecoderFallback\" data-linktype=\"relative-path\">DecoderFallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default\" data-linktype=\"relative-path\">Default</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncoderFallback\" data-linktype=\"relative-path\">EncoderFallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName\" data-linktype=\"relative-path\">EncodingName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_System_Char___\" data-linktype=\"relative-path\">GetByteCount(Char[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char___\" data-linktype=\"relative-path\">GetBytes(Char[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char[],Int32,Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_String_\" data-linktype=\"relative-path\">GetBytes(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_System_Byte___\" data-linktype=\"relative-path\">GetCharCount(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte___\" data-linktype=\"relative-path\">GetChars(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte[],Int32,Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_\" data-linktype=\"relative-path\">GetEncoding(Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(Int32,EncoderFallback,DecoderFallback)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_\" data-linktype=\"relative-path\">GetEncoding(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(String,EncoderFallback,DecoderFallback)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings\" data-linktype=\"relative-path\">GetEncodings()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetString(Byte*,Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_System_Byte___\" data-linktype=\"relative-path\">GetString(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_HeaderName\" data-linktype=\"relative-path\">HeaderName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsAlwaysNormalized\" data-linktype=\"relative-path\">IsAlwaysNormalized()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsAlwaysNormalized_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">IsAlwaysNormalized(NormalizationForm)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsBrowserDisplay\" data-linktype=\"relative-path\">IsBrowserDisplay</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsBrowserSave\" data-linktype=\"relative-path\">IsBrowserSave</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsMailNewsDisplay\" data-linktype=\"relative-path\">IsMailNewsDisplay</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsMailNewsSave\" data-linktype=\"relative-path\">IsMailNewsSave</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsSingleByte\" data-linktype=\"relative-path\">IsSingleByte</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_RegisterProvider_System_Text_EncodingProvider_\" data-linktype=\"relative-path\">RegisterProvider(EncodingProvider)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Unicode\" data-linktype=\"relative-path\">Unicode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32\" data-linktype=\"relative-path\">UTF32</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF7\" data-linktype=\"relative-path\">UTF7</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8\" data-linktype=\"relative-path\">UTF8</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName\" data-linktype=\"relative-path\">WebName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WindowsCodePage\" data-linktype=\"relative-path\">WindowsCodePage</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  </p>\n<p> The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> uses the following UTFs:  </p>\n<ul>\n<li><p>UTF-8, which represents each code point as a sequence of one to four bytes.  </p>\n</li>\n<li><p>UTF-16, which represents each code point as a sequence of one to two 16-bit integers.  </p>\n</li>\n<li><p>UTF-32, which represents each code point as a 32-bit integer.  </p>\n<p>For more information about the UTFs and other encodings supported by <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a>, see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a>.  </p>\n<p>The UnicodeEncoding class represents a UTF-16 encoding. The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):  </p>\n</li>\n<li><p>Big endian byte order: 00 00 00 41  </p>\n</li>\n<li><p>Little endian byte order: 41 00 00 00  </p>\n<p>It is generally more efficient to store Unicode characters using the native byte order of a particular platform. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. The UnicodeEncoding class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order). You can determine the &quot;endianness&quot; of a particular architecture by calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_IsLittleEndian\" data-linktype=\"relative-path\">System.BitConverter.IsLittleEndian</a> method.  </p>\n<p>Optionally, the UnicodeEncoding object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.  </p>\n<p>If the UnicodeEncoding instance is configured to provide a BOM, you can retrieve it by calling the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method; otherwise, the method returns an empty array. Note that, even if a UnicodeEncoding object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the UnicodeEncoding class do not do this automatically.  </p>\n<p>To enable error detection and to make the class instance more secure, you should instantiate a UnicodeEncoding object by calling the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UnicodeEncoding(Boolean,Boolean,Boolean)</a> constructor and setting its <code>throwOnInvalidBytes</code> argument to <code>true</code>. With error detection, a method that detects an invalid sequence of characters or bytes throws a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.  </p>\n<p>You can instantiate a UnicodeEncoding object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the UnicodeEncoding constructors and the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> properties that return a UnicodeEncoding object.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Endianness</th>\n<th>BOM</th>\n<th>Error detection</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BigEndianUnicode_\" data-linktype=\"relative-path\">BigEndianUnicode</a></td>\n<td>Big-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Unicode_\" data-linktype=\"relative-path\">Unicode</a></td>\n<td>Little-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor\" data-linktype=\"relative-path\">System.Text.UnicodeEncoding.UnicodeEncoding()</a></td>\n<td>Little-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UnicodeEncoding(Boolean,Boolean)</a></td>\n<td>Configurable</td>\n<td>Configurable</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UnicodeEncoding.UnicodeEncoding(Boolean,Boolean,Boolean)</a></td>\n<td>Configurable</td>\n<td>Configurable</td>\n<td>Configurable</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding.  </p>\n<p> Likewise, the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> and <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetString_\" data-linktype=\"relative-path\">GetString</a> methods perform the actual decoding.  </p>\n<p> For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> and <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> properties, respectively.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UnicodeEncoding()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UnicodeEncoding ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UnicodeEncoding(Boolean,Boolean,Boolean)</a> constructor and setting its <code>throwOnInvalidBytes</code> argument to <code>true</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UnicodeEncoding(Boolean,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> class. Parameters specify whether to use the big endian byte order and whether the <span class=\"xref\">stem.Text.UnicodeEncoding.GetPreamble*</span> method returns a Unicode byte order mark.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UnicodeEncoding (bool bigEndian, bool byteOrderMark);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bigEndian</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to use the big endian byte order (most significant byte first), or <code>false</code> to use the little endian byte order (least significant byte first).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteOrderMark</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to specify that the <span class=\"xref\">stem.Text.UnicodeEncoding.GetPreamble*</span> method returns a Unicode byte order mark; otherwise, <code>false</code>. See the Remarks section for more information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UnicodeEncoding(Boolean,Boolean,Boolean)</a> constructor and setting its <code>throwOnInvalidBytes</code> argument to <code>true</code>.  </p>\n</div>\n<p> The <code>byteOrderMark</code> parameter controls the operation of the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method. If <code>true</code>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If <code>false</code>, it returns a zero-length byte array. However, setting <code>byteOrderMark</code> to <code>true</code> does not cause the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method to prefix the BOM at the beginning of the byte array, nor does it cause the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method to include the number of bytes in the BOM in the byte count.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UnicodeEncoding(Boolean,Boolean,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bigEndian</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to use the big endian byte order (most significant byte first); <code>false</code> to use the little endian byte order (least significant byte first).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteOrderMark</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to specify that the <span class=\"xref\">stem.Text.UnicodeEncoding.GetPreamble*</span> method returns a Unicode byte order mark; otherwise, <code>false</code>. See the Remarks section for more information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>throwOnInvalidBytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>byteOrderMark</code> parameter controls the operation of the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method. If <code>true</code>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.  If <code>false</code>, it returns a zero-length byte array. However, setting <code>byteOrderMark</code> to <code>true</code> does not cause the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method to prefix the BOM at the beginning of the byte array, nor does it cause the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method to include the number of bytes in the BOM in the byte count.  </p>\n<p> If the <code>throwOnInvalidBytes</code> parameter is <code>true</code>, a method that detects an invalid byte sequence throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">System.ArgumentException</a>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, your applications are recommended to use this constructor to create an instance of the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> class and turn on error detection by setting <code>throwOnInvalidBytes</code> to <code>true</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_CharSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CharSize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents the Unicode character size in bytes. This field is a constant.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public const int CharSize = 2;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value of this field is a 32-bit signed constant with a value of 2.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare with the current object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> is an instance of <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> and is equal to the current object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Two <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> objects are considered equal if all of the following conditions are true:  </p>\n<ul>\n<li><p>Both objects use the same byte order (little-endian or big-endian).  </p>\n</li>\n<li><p>Both objects provide the byte order mark, or both do not.  </p>\n</li>\n<li><p>Both objects use the same encoder fallback.  </p>\n</li>\n<li><p>Both objects use the same decoder fallback.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetByteCount_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetByteCount(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of bytes produced by encoding the characters in the specified string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetByteCount (string s);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>s</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string that contains the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes produced by encoding the specified characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>s</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble is not reflected in the value returned by the GetByteCount method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetByteCount_System_Char__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetByteCount(Char*,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetByteCount (char* chars, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes produced by encoding the specified characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled and <code>chars</code> contains an invalid sequence of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> requires to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <a class=\"xref\" href=\"system.text.utf8encoding#System_Text_UTF8Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetByteCount_System_Char___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetByteCount(Char[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetByteCount (char[] chars, int index, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character array containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes produced by encoding the specified characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, the application uses GetByteCount. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The GetByteCount method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection enabled, an invalid sequence causes this method to throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the GetByteCount method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetBytes(Char*,Int32,Byte*,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of bytes to write.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>byteCount</code> is less than the resulting number of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> requires to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object provided by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> or the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The GetBytes method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetBytes(Char[],Int32,Int32,Byte[],Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character array containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The GetBytes method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetBytes_System_String_System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetBytes(String,Int32,Int32,Byte[],Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encodes a set of characters from the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>s</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>s</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by GetBytes to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The GetBytes method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetCharCount_System_Byte__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCharCount(Byte*,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetCharCount (byte* bytes, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, the application uses <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. To calculate the maximum array size, the application should use <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetCharCount_System_Byte___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCharCount(Byte[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetCharCount (byte[] bytes, int index, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array containing the sequence of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, the application uses GetCharCount. To calculate the maximum array size, the application should use <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>. The GetCharCount method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetChars(Byte*,Int32,Char*,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the location at which to start writing the resulting set of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters to write.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The actual number of characters written at the location indicated by the <code>chars</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>byteCount</code> or <code>charCount</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  </p>\n<p> -or-  </p>\n<p> <code>charCount</code> is less than the resulting number of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size that <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> requires to store the resulting characters, the application uses <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. To calculate the maximum array size, the application should use <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object provided by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> or the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetChars(Byte[],Int32,Int32,Char[],Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array containing the sequence of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character array to contain the resulting set of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index at which to start writing the resulting set of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The actual number of characters written into <code>chars</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> is not a valid index in <code>chars</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by GetChars to store the resulting characters, the application uses <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. To calculate the maximum array size, the application should use <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetDecoder\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDecoder()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Text.Decoder GetDecoder ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>. However, a <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, GetDecoder and <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<p> If error detection is enabled, that is, the <code>throwOnInvalidBytes</code> parameter of the constructor is set to <code>true</code>, error detection is also enabled in the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetEncoder\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEncoder()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Text.Encoder GetEncoder ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method of this class. However, a <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object maintains state information between calls so that it can correctly encode character sequences that span blocks. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> and GetEncoder are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<p> If error detection is enabled, that is, the <code>throwOnInvalidBytes</code> parameter of the constructor is set to <code>true</code>, error detection is also enabled in the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for the current instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The hash code for the current <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetMaxByteCount_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMaxByteCount(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetMaxByteCount (int charCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, the application uses <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a>. To calculate the maximum array size, the application should use GetMaxByteCount. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the GetMaxByteCount method generally executes faster.  </p>\n<p> GetMaxByteCount retrieves a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>. If a fallback is chosen with a potentially large string, GetMaxByteCount can return large values.  </p>\n<p> In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> or <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxByteCount has no relation to <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>. If your application needs a similar function to use with <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>, it should use <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetMaxCharCount_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMaxCharCount(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetMaxCharCount (int byteCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>byteCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, the application uses <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a>. To calculate the maximum array size, the application should use GetMaxCharCount. The <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the GetMaxCharCount method generally executes faster.  </p>\n<p> GetMaxCharCount retrieves a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a>. If a fallback is chosen with a potentially large string, GetMaxCharCount retrieves large values.  </p>\n<p> In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxCharCount has no relation to <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>. If your application needs a similar function to use with <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>, it should use <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetPreamble\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetPreamble()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override byte[] GetPreamble ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing the Unicode byte order mark, if the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object is configured to supply one. Otherwise, this method returns a zero-length byte array.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  </p>\n<ul>\n<li><p>Big endian byte order: FE FF  </p>\n</li>\n<li><p>Little endian byte order: FF FE  </p>\n<p>You can instantiate a <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object whose GetPreamble method returns a valid BOM in the following ways:  </p>\n</li>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object returned by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Unicode_\" data-linktype=\"relative-path\">Unicode</a> or <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BigEndianUnicode_\" data-linktype=\"relative-path\">BigEndianUnicode</a> property.  </p>\n</li>\n<li><p>By calling the parameterless <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor\" data-linktype=\"relative-path\">UnicodeEncoding()</a> constructor to instantiate a <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object.  </p>\n</li>\n<li><p>By supplying <code>true</code> as the value of the <code>byteOrderMark</code> argument to the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UnicodeEncoding(Boolean,Boolean)</a> or <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UnicodeEncoding(Boolean,Boolean,Boolean)</a> constructors.  </p>\n<p>We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns. Often user problems might be avoided if data is consistently and properly tagged.  </p>\n<p>For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  </p>\n<p>There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  </p>\n</li>\n</ul>\n<div class=\"CAUTION\"><h5>Caution</h5><p> To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble. Note that the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer&#39;s responsibility.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UnicodeEncoding_GetString_System_Byte___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetString(Byte[],Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decodes a range of bytes from a byte array into a string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string GetString (byte[] bytes, int index, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array containing the sequence of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> object containing the results of decoding the specified sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>(<code>Nothing</code>).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for fuller explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> object provided by the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> or the <a class=\"xref\" href=\"system.text.unicodeencoding#System_Text_UnicodeEncoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.UnicodeEncoding.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.UnicodeEncoding.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.CharSize\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetChars\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetDecoder\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetEncoder\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetMaxByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetMaxCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetPreamble\">\r\n<meta name=\"APIName\" content=\"System.Text.UnicodeEncoding.GetString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e768de37-afe3-3795-da9a-2eacb83ed0bf\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a UTF-16 encoding of Unicode characters.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Text/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.UnicodeEncoding\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Text.UnicodeEncoding.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Text.UnicodeEncoding.yml","open_to_public_contributors":true,"api_name":["System.Text.UnicodeEncoding","System.Text.UnicodeEncoding..ctor","System.Text.UnicodeEncoding.CharSize","System.Text.UnicodeEncoding.Equals","System.Text.UnicodeEncoding.GetByteCount","System.Text.UnicodeEncoding.GetBytes","System.Text.UnicodeEncoding.GetCharCount","System.Text.UnicodeEncoding.GetChars","System.Text.UnicodeEncoding.GetDecoder","System.Text.UnicodeEncoding.GetEncoder","System.Text.UnicodeEncoding.GetHashCode","System.Text.UnicodeEncoding.GetMaxByteCount","System.Text.UnicodeEncoding.GetMaxCharCount","System.Text.UnicodeEncoding.GetPreamble","System.Text.UnicodeEncoding.GetString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.UnicodeEncoding","System::Text::UnicodeEncoding","System.Text.UnicodeEncoding.#ctor","System::Text::UnicodeEncoding::#ctor","System.Text.UnicodeEncoding.CharSize","System::Text::UnicodeEncoding::CharSize","System.Text.UnicodeEncoding.Equals","System::Text::UnicodeEncoding::Equals","System.Text.UnicodeEncoding.GetByteCount","System::Text::UnicodeEncoding::GetByteCount","System.Text.UnicodeEncoding.GetBytes","System::Text::UnicodeEncoding::GetBytes","System.Text.UnicodeEncoding.GetCharCount","System::Text::UnicodeEncoding::GetCharCount","System.Text.UnicodeEncoding.GetChars","System::Text::UnicodeEncoding::GetChars","System.Text.UnicodeEncoding.GetDecoder","System::Text::UnicodeEncoding::GetDecoder","System.Text.UnicodeEncoding.GetEncoder","System::Text::UnicodeEncoding::GetEncoder","System.Text.UnicodeEncoding.GetHashCode","System::Text::UnicodeEncoding::GetHashCode","System.Text.UnicodeEncoding.GetMaxByteCount","System::Text::UnicodeEncoding::GetMaxByteCount","System.Text.UnicodeEncoding.GetMaxCharCount","System::Text::UnicodeEncoding::GetMaxCharCount","System.Text.UnicodeEncoding.GetPreamble","System::Text::UnicodeEncoding::GetPreamble","System.Text.UnicodeEncoding.GetString","System::Text::UnicodeEncoding::GetString"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e768de37-afe3-3795-da9a-2eacb83ed0bf","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Text/UnicodeEncoding.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UnicodeEncoding class | Microsoft Docs","_op_ogTitle":"UnicodeEncoding class","description":"Represents a UTF-16 encoding of Unicode characters.\n","toc_asset_id":"_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.UnicodeEncoding","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.unicodeencoding","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.text.unicodeencoding","fileRelativePath":"System.Text.UnicodeEncoding.html"},"themesRelativePathToOutputRoot":"_themes/"}