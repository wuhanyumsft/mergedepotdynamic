{"content":"    \r\n    <h1 id=\"System_FlagsAttribute\">\r\n      <span class=\"lang-csharp\">FlagsAttribute</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class FlagsAttribute : Attribute</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">System.Attribute</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">FlagsAttribute</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type,Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32,UInt32,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements. Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not. Languages vary in their use of bit fields compared to enumeration constants.  </p>\n<h2 id=\"attributes-of-the-flagsattribute\">Attributes of the FlagsAttribute</h2>\n<p> <a class=\"xref\" href=\"system.attributeusageattribute\" data-linktype=\"relative-path\">AttributeUsageAttribute</a> is applied to this class, and its <a class=\"xref\" href=\"system.attributeusageattribute#System_AttributeUsageAttribute_Inherited_\" data-linktype=\"relative-path\">Inherited</a> property specifies <code>false</code>. This attribute can only be applied to enumerations.  </p>\n<h2 id=\"guidelines-for-flagsattribute-and-enum\">Guidelines for FlagsAttribute and Enum</h2>\n<ul>\n<li><p>Use the FlagsAttribute custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.  </p>\n</li>\n<li><p>Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on. This means the individual flags in combined enumeration constants do not overlap.  </p>\n</li>\n<li><p>Consider creating an enumerated constant for commonly used flag combinations. For example, if you have an enumeration used for file I/O operations that contains the enumerated constants <code>Read = 1</code> and <code>Write = 2</code>, consider creating the enumerated constant <code>ReadWrite = Read OR Write</code>, which combines the <code>Read</code> and <code>Write</code> flags. In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.  </p>\n</li>\n<li><p>Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.  </p>\n</li>\n<li><p>A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.  </p>\n</li>\n<li><p>Use <code>None</code> as the name of the flag enumerated constant whose value is zero. You cannot use the <code>None</code> enumerated constant in a bitwise AND operation to test for a flag because the result is always zero. However, you can perform a logical, not a bitwise, comparison between the numeric value and the <code>None</code> enumerated constant to determine whether any bits in the numeric value are set.  </p>\n<p> If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a <code>None</code> enumerated constant. The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime. Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.  </p>\n<p> If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default. If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.  </p>\n</li>\n<li><p>Do not define an enumeration value solely to mirror the state of the enumeration itself. For example, do not define an enumerated constant that merely marks the end of the enumeration. If you need to determine the last value of the enumeration, check for that value explicitly. In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.  </p>\n</li>\n<li><p>Do not specify enumerated constants that are reserved for future use.  </p>\n</li>\n<li><p>When you define a method or property that takes an enumerated constant as a value, consider validating the value. The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_FlagsAttribute__ctor\" data-linktype=\"self-bookmark\">FlagsAttribute()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_FlagsAttribute__ctor\">\r\n    \r\n            <a id=\"System_FlagsAttribute__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FlagsAttribute()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public FlagsAttribute ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example defines a <code>PhoneService</code> enumeration that represents forms of communication provided by a telephone company. It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service. Finally, it implicitly calls the <a class=\"xref\" href=\"system.enum#System_Enum_ToString_System_String_\" data-linktype=\"relative-path\">System.Enum.ToString(String)</a> method to display the types of service provided to each household.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.FlagsAttribute#2\">using namespace System;\n\n[FlagsAttribute] enum class PhoneService\n{\n   None = 0,\n   LandLine = 1,\n   Cell = 2,\n   Fax = 4,\n   Internet = 8,\n   Other = 16\n};\n\nvoid main()\n{\n   // Define three variables representing the types of phone service\n   // in three households.\n   PhoneService household1 = PhoneService::LandLine | PhoneService::Cell |\n                             PhoneService::Internet;\n   PhoneService household2 = PhoneService::None;\n   PhoneService household3 = PhoneService::Cell | PhoneService::Internet;\n\n   // Store the variables in an array for ease of access.\n   array&lt;PhoneService&gt;^ households = { household1, household2, household3 };\n\n   // Which households have no service?\n   for (int ctr = 0; ctr &lt; households-&gt;Length; ctr++)\n      Console::WriteLine(&quot;Household {0} has phone service: {1}&quot;,\n                         ctr + 1,\n                         households[ctr] == PhoneService::None ?\n                             &quot;No&quot; : &quot;Yes&quot;);\n   Console::WriteLine();\n\n   // Which households have cell phone service?\n   for (int ctr = 0; ctr &lt; households-&gt;Length; ctr++)\n      Console::WriteLine(&quot;Household {0} has cell phone service: {1}&quot;,\n                         ctr + 1,\n                         (households[ctr] &amp; PhoneService::Cell) == PhoneService::Cell ?\n                            &quot;Yes&quot; : &quot;No&quot;);\n   Console::WriteLine();\n\n   // Which households have cell phones and land lines?\n   PhoneService cellAndLand = PhoneService::Cell | PhoneService::LandLine;\n   for (int ctr = 0; ctr &lt; households-&gt;Length; ctr++)\n      Console::WriteLine(&quot;Household {0} has cell and land line service: {1}&quot;,\n                         ctr + 1,\n                         (households[ctr] &amp; cellAndLand) == cellAndLand ?\n                            &quot;Yes&quot; : &quot;No&quot;);\n   Console::WriteLine();\n\n   // List all types of service of each household?//\n   for (int ctr = 0; ctr &lt; households-&gt;Length; ctr++)\n      Console::WriteLine(&quot;Household {0} has: {1:G}&quot;,\n                         ctr + 1, households[ctr]);\n   Console::WriteLine();\n}\n// The example displays the following output:\n//    Household 1 has phone service: Yes\n//    Household 2 has phone service: No\n//    Household 3 has phone service: Yes\n//\n//    Household 1 has cell phone service: Yes\n//    Household 2 has cell phone service: No\n//    Household 3 has cell phone service: Yes\n//\n//    Household 1 has cell and land line service: Yes\n//    Household 2 has cell and land line service: No\n//    Household 3 has cell and land line service: No\n//\n//    Household 1 has: LandLine, Cell, Internet\n//    Household 2 has: None\n//    Household 3 has: Cell, Internet\n</code></pre><pre><code class=\"lang-cs\" name=\"System.FlagsAttribute#2\">using System;\n\n[FlagsAttribute] public enum PhoneService\n{\n   None = 0,\n   LandLine = 1,\n   Cell = 2,\n   Fax = 4,\n   Internet = 8,\n   Other = 16\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define three variables representing the types of phone service\n      // in three households.\n      var household1 = PhoneService.LandLine | PhoneService.Cell |\n                       PhoneService.Internet;\n      var household2 = PhoneService.None;\n      var household3 = PhoneService.Cell | PhoneService.Internet;\n\n      // Store the variables in an array for ease of access.\n      PhoneService[] households = { household1, household2, household3 };\n\n      // Which households have no service?\n      for (int ctr = 0; ctr &lt; households.Length; ctr++)\n         Console.WriteLine(&quot;Household {0} has phone service: {1}&quot;,\n                           ctr + 1,\n                           households[ctr] == PhoneService.None ?\n                               &quot;No&quot; : &quot;Yes&quot;);\n      Console.WriteLine();\n\n      // Which households have cell phone service?\n      for (int ctr = 0; ctr &lt; households.Length; ctr++)\n         Console.WriteLine(&quot;Household {0} has cell phone service: {1}&quot;,\n                           ctr + 1,\n                           (households[ctr] &amp; PhoneService.Cell) == PhoneService.Cell ?\n                              &quot;Yes&quot; : &quot;No&quot;);\n      Console.WriteLine();\n\n      // Which households have cell phones and land lines?\n      var cellAndLand = PhoneService.Cell | PhoneService.LandLine;\n      for (int ctr = 0; ctr &lt; households.Length; ctr++)\n         Console.WriteLine(&quot;Household {0} has cell and land line service: {1}&quot;,\n                           ctr + 1,\n                           (households[ctr] &amp; cellAndLand) == cellAndLand ?\n                              &quot;Yes&quot; : &quot;No&quot;);\n      Console.WriteLine();\n\n      // List all types of service of each household?//\n      for (int ctr = 0; ctr &lt; households.Length; ctr++)\n         Console.WriteLine(&quot;Household {0} has: {1:G}&quot;,\n                           ctr + 1, households[ctr]);\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Household 1 has phone service: Yes\n//    Household 2 has phone service: No\n//    Household 3 has phone service: Yes\n//\n//    Household 1 has cell phone service: Yes\n//    Household 2 has cell phone service: No\n//    Household 3 has cell phone service: Yes\n//\n//    Household 1 has cell and land line service: Yes\n//    Household 2 has cell and land line service: No\n//    Household 3 has cell and land line service: No\n//\n//    Household 1 has: LandLine, Cell, Internet\n//    Household 2 has: None\n//    Household 3 has: Cell, Internet\n</code></pre><pre><code class=\"lang-vb\" name=\"System.FlagsAttribute#2\">&lt;FlagsAttribute&gt; Public Enum PhoneService As Integer\n   None = 0\n   LandLine = 1\n   Cell = 2\n   Fax = 4\n   Internet = 8\n   Other = 16\nEnd Enum\n\nModule Example\n   Public Sub Main()\n      &#39; Define three variables representing the types of phone service\n      &#39; in three households.\n      Dim household1 As PhoneService = PhoneService.LandLine Or\n                                       PhoneService.Cell Or\n                                       PhoneService.Internet\n      Dim household2 As PhoneService = PhoneService.None\n      Dim household3 As PhoneService = PhoneService.Cell Or\n                                       PhoneService.Internet\n\n      &#39; Store the variables in an array for ease of access.\n      Dim households() As PhoneService = { household1, household2,\n                                           household3 }\n\n      &#39; Which households have no service?\n      For ctr As Integer = 0 To households.Length - 1\n         Console.WriteLine(&quot;Household {0} has phone service: {1}&quot;,\n                           ctr + 1,\n                           If(households(ctr) = PhoneService.None,\n                              &quot;No&quot;, &quot;Yes&quot;))\n      Next\n      Console.WriteLine()\n      \n      &#39; Which households have cell phone service?\n      For ctr As Integer = 0 To households.Length - 1\n         Console.WriteLine(&quot;Household {0} has cell phone service: {1}&quot;,\n                           ctr + 1,\n                           If((households(ctr) And PhoneService.Cell) = PhoneService.Cell,\n                              &quot;Yes&quot;, &quot;No&quot;))\n      Next\n      Console.WriteLine()\n      \n      &#39; Which households have cell phones and land lines?\n      Dim cellAndLand As PhoneService = PhoneService.Cell Or PhoneService.LandLine\n      For ctr As Integer = 0 To households.Length - 1\n         Console.WriteLine(&quot;Household {0} has cell and land line service: {1}&quot;,\n                           ctr + 1,\n                           If((households(ctr) And cellAndLand) = cellAndLand,\n                              &quot;Yes&quot;, &quot;No&quot;))\n      Next\n      Console.WriteLine()\n      \n      &#39; List all types of service of each household?&#39;\n      For ctr As Integer = 0 To households.Length - 1\n         Console.WriteLine(&quot;Household {0} has: {1:G}&quot;,\n                           ctr + 1, households(ctr))\n      Next\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Household 1 has phone service: Yes\n&#39;    Household 2 has phone service: No\n&#39;    Household 3 has phone service: Yes\n&#39;\n&#39;    Household 1 has cell phone service: Yes\n&#39;    Household 2 has cell phone service: No\n&#39;    Household 3 has cell phone service: Yes\n&#39;\n&#39;    Household 1 has cell and land line service: Yes\n&#39;    Household 2 has cell and land line service: No\n&#39;    Household 3 has cell and land line service: No\n&#39;\n&#39;    Household 1 has: LandLine, Cell, Internet\n&#39;    Household 2 has: None\n&#39;    Household 3 has: Cell, Internet\n</code></pre><p> The following example illustrates the use of the <code>FlagsAttribute</code> attribute and shows the effect on the <a class=\"xref\" href=\"system.enum#System_Enum_ToString_\" data-linktype=\"relative-path\">ToString</a> method of using <code>FlagsAttribute</code> on an <a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a> declaration.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.FlagsAttribute#1\">using namespace System;\n\n// Define an Enum without FlagsAttribute.\npublic enum class SingleHue : short\n{\n   None = 0,\n   Black = 1,\n   Red = 2,\n   Green = 4,\n   Blue = 8\n};\n\n// Define an Enum with FlagsAttribute.\n[FlagsAttribute]\nenum class MultiHue : short\n{\n   None = 0,\n   Black = 1,\n   Red = 2,\n   Green = 4,\n   Blue = 8\n};\n\nint main()\n{\n   // Display all possible combinations of values.\n   Console::WriteLine(\n        &quot;All possible combinations of values without FlagsAttribute:&quot;);\n   for (int val = 0; val &lt;= 16; val++)\n      Console::WriteLine(&quot;{0,3} - {1:G}&quot;, val, (SingleHue)val);\n      \n   Console::WriteLine(\n        &quot;<br>All possible combinations of values with FlagsAttribute:&quot;);\n   \n   // Display all combinations of values, and invalid values.\n   for (int val = 0; val &lt;= 16; val++ )\n      Console::WriteLine(&quot;{0,3} - {1:G}&quot;, val, (MultiHue)val);\n}\n// The example displays the following output:\n//       All possible combinations of values without FlagsAttribute:\n//         0 - None\n//         1 - Black\n//         2 - Red\n//         3 - 3\n//         4 - Green\n//         5 - 5\n//         6 - 6\n//         7 - 7\n//         8 - Blue\n//         9 - 9\n//        10 - 10\n//        11 - 11\n//        12 - 12\n//        13 - 13\n//        14 - 14\n//        15 - 15\n//        16 - 16\n//       \n//       All possible combinations of values with FlagsAttribute:\n//         0 - None\n//         1 - Black\n//         2 - Red\n//         3 - Black, Red\n//         4 - Green\n//         5 - Black, Green\n//         6 - Red, Green\n//         7 - Black, Red, Green\n//         8 - Blue\n//         9 - Black, Blue\n//        10 - Red, Blue\n//        11 - Black, Red, Blue\n//        12 - Green, Blue\n//        13 - Black, Green, Blue\n//        14 - Red, Green, Blue\n//        15 - Black, Red, Green, Blue\n//        16 - 16\n</code></pre><pre><code class=\"lang-cs\" name=\"System.FlagsAttribute#1\">using System;\n\nclass Example\n{\n   // Define an Enum without FlagsAttribute.\n   enum SingleHue : short\n   {\n      None = 0,\n      Black = 1,\n      Red = 2,\n      Green = 4,\n      Blue = 8\n   };\n\n   // Define an Enum with FlagsAttribute.\n   [FlagsAttribute] \n   enum MultiHue : short\n   {\n      None = 0,\n      Black = 1,\n      Red = 2,\n      Green = 4,\n      Blue = 8\n   };\n\n   static void Main( )\n   {\n      // Display all possible combinations of values.\n      Console.WriteLine( \n           &quot;All possible combinations of values without FlagsAttribute:&quot;);\n      for(int val = 0; val &lt;= 16; val++ )\n         Console.WriteLine( &quot;{0,3} - {1:G}&quot;, val, (SingleHue)val);\n\n      // Display all combinations of values, and invalid values.\n      Console.WriteLine( \n           &quot;<br>All possible combinations of values with FlagsAttribute:&quot;);\n      for( int val = 0; val &lt;= 16; val++ )\n         Console.WriteLine( &quot;{0,3} - {1:G}&quot;, val, (MultiHue)val);\n   } \n} \n// The example displays the following output:\n//       All possible combinations of values without FlagsAttribute:\n//         0 - None\n//         1 - Black\n//         2 - Red\n//         3 - 3\n//         4 - Green\n//         5 - 5\n//         6 - 6\n//         7 - 7\n//         8 - Blue\n//         9 - 9\n//        10 - 10\n//        11 - 11\n//        12 - 12\n//        13 - 13\n//        14 - 14\n//        15 - 15\n//        16 - 16\n//       \n//       All possible combinations of values with FlagsAttribute:\n//         0 - None\n//         1 - Black\n//         2 - Red\n//         3 - Black, Red\n//         4 - Green\n//         5 - Black, Green\n//         6 - Red, Green\n//         7 - Black, Red, Green\n//         8 - Blue\n//         9 - Black, Blue\n//        10 - Red, Blue\n//        11 - Black, Red, Blue\n//        12 - Green, Blue\n//        13 - Black, Green, Blue\n//        14 - Red, Green, Blue\n//        15 - Black, Red, Green, Blue\n//        16 - 16\n</code></pre><pre><code class=\"lang-vb\" name=\"System.FlagsAttribute#1\">Module Example\n   &#39; Define an Enum without FlagsAttribute.\n   Enum SingleHue As Short\n      None = 0\n      Black = 1\n      Red = 2\n      Green = 4\n      Blue = 8\n   End Enum\n\n   &#39; Define an Enum with FlagsAttribute.\n   &lt;FlagsAttribute&gt; \n   Enum MultiHue As Short\n      None = 0\n      Black = 1\n      Red = 2\n      Green = 4\n      Blue = 8\n   End Enum\n\n   Sub Main()\n      &#39; Display all possible combinations of values.\n      Console.WriteLine(\n           &quot;All possible combinations of values without FlagsAttribute:&quot;)\n      For val As Integer = 0 To 16\n         Console.WriteLine(&quot;{0,3} - {1:G}&quot;, val, CType(val, SingleHue))\n     Next \n     Console.WriteLine()\n     \n     &#39; Display all combinations of values, and invalid values.\n     Console.WriteLine( \n          &quot;All possible combinations of values with FlagsAttribute:&quot;)\n     For val As Integer = 0 To 16\n        Console.WriteLine( &quot;{0,3} - {1:G}&quot;, val, CType(val, MultiHue))\n     Next \n   End Sub \nEnd Module \n&#39; The example displays the following output:\n&#39;       All possible combinations of values without FlagsAttribute:\n&#39;         0 - None\n&#39;         1 - Black\n&#39;         2 - Red\n&#39;         3 - 3\n&#39;         4 - Green\n&#39;         5 - 5\n&#39;         6 - 6\n&#39;         7 - 7\n&#39;         8 - Blue\n&#39;         9 - 9\n&#39;        10 - 10\n&#39;        11 - 11\n&#39;        12 - 12\n&#39;        13 - 13\n&#39;        14 - 14\n&#39;        15 - 15\n&#39;        16 - 16\n&#39;       \n&#39;       All possible combinations of values with FlagsAttribute:\n&#39;         0 - None\n&#39;         1 - Black\n&#39;         2 - Red\n&#39;         3 - Black, Red\n&#39;         4 - Green\n&#39;         5 - Black, Green\n&#39;         6 - Red, Green\n&#39;         7 - Black, Red, Green\n&#39;         8 - Blue\n&#39;         9 - Black, Blue\n&#39;        10 - Red, Blue\n&#39;        11 - Black, Red, Blue\n&#39;        12 - Green, Blue\n&#39;        13 - Black, Green, Blue\n&#39;        14 - Red, Green, Blue\n&#39;        15 - Black, Red, Green, Blue\n&#39;        16 - 16\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.FlagsAttribute.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.FlagsAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.FlagsAttribute\">\r\n<meta name=\"APIName\" content=\"System.FlagsAttribute..ctor\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c9bf930a-c323-3155-0511-0a50a05173b0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Indicates that an enumeration can be treated as a bit field; that is, a set of flags.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.FlagsAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.FlagsAttribute.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.FlagsAttribute.yml","open_to_public_contributors":true,"api_name":["System.FlagsAttribute","System.FlagsAttribute..ctor"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.FlagsAttribute","System::FlagsAttribute","System.FlagsAttribute.#ctor","System::FlagsAttribute::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c9bf930a-c323-3155-0511-0a50a05173b0","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/FlagsAttribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FlagsAttribute class | Microsoft Docs","_op_ogTitle":"FlagsAttribute class","description":"Indicates that an enumeration can be treated as a bit field; that is, a set of flags.\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.FlagsAttribute","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.flagsattribute","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.flagsattribute","fileRelativePath":"System.FlagsAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}