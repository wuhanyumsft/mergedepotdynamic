{"content":"    \r\n    <h1 id=\"System_Web_UI_WebControls_BoundColumn\">\r\n      <span class=\"lang-csharp\">BoundColumn</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>A column type for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control that is bound to a field in a data source.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class BoundColumn : System.Web.UI.WebControls.DataGridColumn</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn\" data-linktype=\"relative-path\">System.Web.UI.WebControls.DataGridColumn</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">BoundColumn</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_DesignMode\" data-linktype=\"relative-path\">DesignMode</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_FooterStyle\" data-linktype=\"relative-path\">FooterStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_FooterText\" data-linktype=\"relative-path\">FooterText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_HeaderImageUrl\" data-linktype=\"relative-path\">HeaderImageUrl</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_HeaderStyle\" data-linktype=\"relative-path\">HeaderStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_HeaderText\" data-linktype=\"relative-path\">HeaderText</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_IsTrackingViewState\" data-linktype=\"relative-path\">IsTrackingViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_ItemStyle\" data-linktype=\"relative-path\">ItemStyle</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_LoadViewState_System_Object_\" data-linktype=\"relative-path\">LoadViewState(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_OnColumnChanged\" data-linktype=\"relative-path\">OnColumnChanged()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_Owner\" data-linktype=\"relative-path\">Owner</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_SaveViewState\" data-linktype=\"relative-path\">SaveViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_SortExpression\" data-linktype=\"relative-path\">SortExpression</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_IsTrackingViewState\" data-linktype=\"relative-path\">IStateManager.IsTrackingViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_LoadViewState_System_Object_\" data-linktype=\"relative-path\">IStateManager.LoadViewState(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_SaveViewState\" data-linktype=\"relative-path\">IStateManager.SaveViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_System_Web_UI_IStateManager_TrackViewState\" data-linktype=\"relative-path\">IStateManager.TrackViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_TrackViewState\" data-linktype=\"relative-path\">TrackViewState()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_ViewState\" data-linktype=\"relative-path\">ViewState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.web.ui.webcontrols.datagridcolumn#System_Web_UI_WebControls_DataGridColumn_Visible\" data-linktype=\"relative-path\">Visible</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the BoundColumn column type in a <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control to display the contents of a field in the data source. The values are listed in a single column. The field is linked to the BoundColumn, so any updates in the data source will reflect in the corresponding cells of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This column type is the default for the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n</div>\n<p> To control appearance of this column, use the style properties of the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Text is not HTML encoded before it is displayed in the BoundColumn. This makes it possible to embed script within HTML tags in the text. If the values for this column come from user input, be sure to validate the values to reduce security vulnerabilities.</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn__ctor\" data-linktype=\"self-bookmark\">BoundColumn()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Fields\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_thisExpr\" data-linktype=\"self-bookmark\">thisExpr</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Represents the string &quot;!&quot;. This field is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_DataField\" data-linktype=\"self-bookmark\">DataField</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the field name from the data source to bind to the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_DataFormatString\" data-linktype=\"self-bookmark\">DataFormatString</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the string that specifies the display format for items in the column.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_ReadOnly\" data-linktype=\"self-bookmark\">ReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> can be edited.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_FormatDataValue_System_Object_\" data-linktype=\"self-bookmark\">FormatDataValue(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Converts the specified value to the format indicated by the <span class=\"xref\">stem.Web.UI.WebControls.BoundColumn.DataFormatString*</span> property.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_Initialize\" data-linktype=\"self-bookmark\">Initialize()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> to its initial state.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Web_UI_WebControls_BoundColumn_InitializeCell_System_Web_UI_WebControls_TableCell_System_Int32_System_Web_UI_WebControls_ListItemType_\" data-linktype=\"self-bookmark\">InitializeCell(TableCell,Int32,ListItemType)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Resets the specified cell in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> to its initial state.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn__ctor\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BoundColumn()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public BoundColumn ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this constructor to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> class and add it to the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid#System_Web_UI_WebControls_DataGrid_Columns_\" data-linktype=\"relative-path\">Columns</a> collection.  </p>\n<pre><code class=\"lang-cs\" name=\"DataGridCtor#1\">\n&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n\n      ICollection CreateDataSource() \n      {\n      \n         // Create sample data for the DataGrid control.\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         // Define the columns of the table.\n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         // Populate the table with sample values.\n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n\n         // Create a DataGrid control.\n         DataGrid ItemsGrid = new DataGrid();\n\n         // Set the properties of the DataGrid.\n         ItemsGrid.ID = &quot;ItemsGrid&quot;;\n         ItemsGrid.BorderColor = System.Drawing.Color.Black;\n         ItemsGrid.CellPadding = 3;\n         ItemsGrid.AutoGenerateColumns = false;\n\n         // Set the styles for the DataGrid.\n         ItemsGrid.HeaderStyle.BackColor = \n             System.Drawing.Color.FromArgb(0x0000aaaa);\n\n         // Create the columns for the DataGrid control. The DataGrid\n         // columns are dynamically generated. Therefore, the columns   \n         // must be re-created each time the page is refreshed.\n         \n         // Create and add the columns to the collection.\n         ItemsGrid.Columns.Add(CreateBoundColumn(&quot;IntegerValue&quot;, &quot;Item&quot;));\n         ItemsGrid.Columns.Add(\n             CreateBoundColumn(&quot;StringValue&quot;, &quot;Description&quot;));\n         ItemsGrid.Columns.Add(\n             CreateBoundColumn(&quot;CurrencyValue&quot;, &quot;Price&quot;, &quot;{0:c}&quot;, \n             HorizontalAlign.Right));\n         ItemsGrid.Columns.Add(\n             CreateLinkColumn(&quot;http://www.microsoft.com&quot;, &quot;_self&quot;, \n             &quot;Microsoft&quot;, &quot;Related link&quot;));\n        \n         // Specify the data source and bind it to the control.\n         ItemsGrid.DataSource = CreateDataSource();\n         ItemsGrid.DataBind();\n\n         // Add the DataGrid control to the Controls collection of \n         // the PlaceHolder control.\n         Place.Controls.Add(ItemsGrid);\n\n      }\n\n      BoundColumn CreateBoundColumn(String DataFieldValue, \n          String HeaderTextValue)\n      {\n\n         // This version of the CreateBoundColumn method sets only the\n         // DataField and HeaderText properties.\n\n         // Create a BoundColumn.\n         BoundColumn column = new BoundColumn();\n\n         // Set the properties of the BoundColumn.\n         column.DataField = DataFieldValue;\n         column.HeaderText = HeaderTextValue;\n\n         return column;\n\n      }\n\n      BoundColumn CreateBoundColumn(String DataFieldValue, \n          String HeaderTextValue, String FormatValue, \n          HorizontalAlign AlignValue)\n      {\n\n         // This version of CreateBoundColumn method sets the DataField,\n         // HeaderText, and DataFormatString properties. It also sets the \n         // HorizontalAlign property of the ItemStyle property of the column. \n\n         // Create a BoundColumn using the overloaded CreateBoundColumn method.\n         BoundColumn column = CreateBoundColumn(DataFieldValue, HeaderTextValue);\n\n         // Set the properties of the BoundColumn.\n         column.DataFormatString = FormatValue;\n         column.ItemStyle.HorizontalAlign = AlignValue;\n\n         return column;\n\n      }\n\n      HyperLinkColumn CreateLinkColumn(String NavUrlValue, \n          String TargetValue, String TextValue, String HeaderTextValue)\n      {\n\n         // Create a BoundColumn.\n         HyperLinkColumn column = new HyperLinkColumn();\n\n         // Set the properties of the ButtonColumn.\n         column.NavigateUrl = NavUrlValue;\n         column.Target = TargetValue;\n         column.Text = TextValue;\n         column.HeaderText = HeaderTextValue;\n\n         return column;\n\n      }\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Constructor Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid Constructor Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n\n      &lt;asp:PlaceHolder id=&quot;Place&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DataGridCtor#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script runat=&quot;server&quot;&gt;\n\n      Function CreateDataSource() As ICollection \n      \n         &#39; Create sample data for the DataGrid control.\n         Dim dt As DataTable = New DataTable()\n         Dim dr As DataRow\n \n         &#39; Define the columns of the table.\n         dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n         dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(string)))\n         dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(double)))\n \n         &#39; Populate the table with sample values.\n         Dim i As Integer\n\n         For i = 0 to 8 \n        \n            dr = dt.NewRow()\n \n            dr(0) = i\n            dr(1) = &quot;Item &quot; &amp; i.ToString()\n            dr(2) = 1.23 * (i + 1)\n \n            dt.Rows.Add(dr)\n\n         Next i\n \n         Dim dv As DataView = New DataView(dt)\n         Return dv\n\n      End Function\n \n      Sub Page_Load(sender As Object, e As EventArgs) \n\n         &#39; Create a DataGrid control.\n         Dim ItemsGrid As DataGrid = New DataGrid()\n\n         &#39; Set the properties of the DataGrid.\n         ItemsGrid.ID = &quot;ItemsGrid&quot;\n         ItemsGrid.BorderColor = System.Drawing.Color.Black\n         ItemsGrid.CellPadding = 3\n         ItemsGrid.AutoGenerateColumns = False\n\n         &#39; Set the styles for the DataGrid.\n         ItemsGrid.HeaderStyle.BackColor = System.Drawing.Color.FromArgb(&amp;H0000aaaa)\n\n         &#39; Create the columns for the DataGrid control. The DataGrid\n         &#39; columns are dynamically generated. Therefore, the columns   \n         &#39; must be re-created each time the page is refreshed.\n         \n         &#39; Create and add the columns to the collection.\n         ItemsGrid.Columns.Add(CreateBoundColumn(&quot;IntegerValue&quot;, &quot;Item&quot;))\n         ItemsGrid.Columns.Add( _\n             CreateBoundColumn(&quot;StringValue&quot;, &quot;Description&quot;))\n         ItemsGrid.Columns.Add( _\n             CreateBoundColumn(&quot;CurrencyValue&quot;, &quot;Price&quot;, &quot;{0:c}&quot;, _\n             HorizontalAlign.Right))\n         ItemsGrid.Columns.Add( _\n             CreateLinkColumn(&quot;http:&#39;www.microsoft.com&quot;, &quot;_self&quot;, _\n             &quot;Microsoft&quot;, &quot;Related link&quot;))\n        \n         &#39; Specify the data source and bind it to the control.     \n         ItemsGrid.DataSource = CreateDataSource()\n         ItemsGrid.DataBind()\n\n         &#39; Add the DataGrid control to the Controls collection of \n         &#39; the PlaceHolder control.\n         Place.Controls.Add(ItemsGrid)\n\n      End Sub\n\n      Function CreateBoundColumn(DataFieldValue As String, HeaderTextValue As String) As BoundColumn\n\n         &#39; This version of CreateBoundColumn method sets only the \n         &#39; DataField and HeaderText properties.\n\n         &#39; Create a BoundColumn.\n         Dim column As BoundColumn = New BoundColumn()\n\n         &#39; Set the properties of the BoundColumn.\n         column.DataField = DataFieldValue\n         column.HeaderText = HeaderTextValue\n\n         Return column\n\n      End Function\n\n      Function CreateBoundColumn(DataFieldValue As String, _\n          HeaderTextValue As String, FormatValue As String, _\n          AlignValue As HorizontalAlign) As BoundColumn\n\n         &#39; This version of CreateBoundColumn method sets the DataField,\n         &#39; HeaderText, and DataFormatString properties. It also sets the \n         &#39; HorizontalAlign property of the ItemStyle property of the column. \n\n         &#39; Create a BoundColumn using the overloaded CreateBoundColumn method.\n         Dim column As BoundColumn = CreateBoundColumn(DataFieldValue, HeaderTextValue)\n\n         &#39; Set the properties of the BoundColumn.\n         column.DataFormatString = FormatValue\n         column.ItemStyle.HorizontalAlign = AlignValue\n\n         Return column\n\n      End Function\n\n      Function CreateLinkColumn(NavUrlValue As String, TargetValue As String, _\n         TextValue As String, HeaderTextValue As String) As HyperLinkColumn \n\n         &#39; Create a BoundColumn.\n         Dim column As HyperLinkColumn = New HyperLinkColumn()\n\n         &#39; Set the properties of the ButtonColumn.\n         column.NavigateUrl = NavUrlValue\n         column.Target = TargetValue\n         column.Text = TextValue\n         column.HeaderText = HeaderTextValue\n\n         Return column\n\n      End Function\n\n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DataGrid Constructor Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;DataGrid Constructor Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n\n      &lt;asp:PlaceHolder id=&quot;Place&quot;\n           runat=&quot;server&quot;/&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"fields\">\r\n        <h2>Fields\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_thisExpr\">\r\n    \r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">thisExpr</div>        \r\n          </div>\r\n    \r\n            <p>Represents the string &quot;!&quot;. This field is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static readonly string thisExpr;</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the thisExpr field to represent the &quot;!&quot; string.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_DataField\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn_DataField_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataField</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the field name from the data source to bind to the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string DataField { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the field to bind to the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a>. The default value is <a class=\"xref\" href=\"system.string#System_String_Empty\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the DataField property to specify the field to bind to the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the DataField property to specify the name of the field in the data source to bind to the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"Classic BoundColumn Example#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;\n    Function CreateDataSource() As ICollection\n        Dim dt As New DataTable()\n        Dim dr As DataRow\n        \n        dt.Columns.Add(New DataColumn(&quot;IntegerValue&quot;, GetType(Int32)))\n        dt.Columns.Add(New DataColumn(&quot;StringValue&quot;, GetType(String)))\n        dt.Columns.Add(New DataColumn(&quot;CurrencyValue&quot;, GetType(Double)))\n        \n        Dim i As Integer\n        For i = 0 To 8\n            dr = dt.NewRow()\n            \n            dr(0) = i\n            dr(1) = &quot;Item &quot; + i.ToString()\n            dr(2) = 1.23 *(i + 1)\n            \n            dt.Rows.Add(dr)\n        Next i\n        \n        Dim dv As New DataView(dt)\n        Return dv\n    End Function &#39;CreateDataSource\n\n\n    Sub Page_Load(sender As Object, e As EventArgs)\n        \n        If Not IsPostBack Then\n            &#39; Load this data only once.\n            ItemsGrid.DataSource = CreateDataSource()\n            ItemsGrid.DataBind()\n        End If\n    End Sub &#39;Page_Load\n   &lt;/script&gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;BoundColumn Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;BoundColumn Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Number&quot; \n                 DataField=&quot;IntegerValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Description&quot; \n                 DataField=&quot;StringValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;CurrencyValue&quot; \n                 DataFormatString=&quot;{0:c}&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic BoundColumn Example#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n   &lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;\n \n      ICollection CreateDataSource() \n      {\n         DataTable dt = new DataTable();\n         DataRow dr;\n \n         dt.Columns.Add(new DataColumn(&quot;IntegerValue&quot;, typeof(Int32)));\n         dt.Columns.Add(new DataColumn(&quot;StringValue&quot;, typeof(string)));\n         dt.Columns.Add(new DataColumn(&quot;CurrencyValue&quot;, typeof(double)));\n \n         for (int i = 0; i &lt; 9; i++) \n         {\n            dr = dt.NewRow();\n \n            dr[0] = i;\n            dr[1] = &quot;Item &quot; + i.ToString();\n            dr[2] = 1.23 * (i + 1);\n \n            dt.Rows.Add(dr);\n         }\n \n         DataView dv = new DataView(dt);\n         return dv;\n      }\n \n      void Page_Load(Object sender, EventArgs e) \n      {\n \n         if (!IsPostBack) \n         {\n            // Load this data only once.\n            ItemsGrid.DataSource= CreateDataSource();\n            ItemsGrid.DataBind();\n         }\n      }\n \n   &lt;/script&gt;\n \n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;BoundColumn Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n   &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n \n      &lt;h3&gt;BoundColumn Example&lt;/h3&gt;\n \n      &lt;b&gt;Product List&lt;/b&gt;\n \n      &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n           BorderColor=&quot;black&quot;\n           BorderWidth=&quot;1&quot;\n           CellPadding=&quot;3&quot;\n           AutoGenerateColumns=&quot;false&quot;\n           runat=&quot;server&quot;&gt;\n\n         &lt;HeaderStyle BackColor=&quot;#00aaaa&quot;&gt;\n         &lt;/HeaderStyle&gt;\n\n         &lt;Columns&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Number&quot; \n                 DataField=&quot;IntegerValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Description&quot; \n                 DataField=&quot;StringValue&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n            &lt;asp:BoundColumn\n                 HeaderText=&quot;Price&quot; \n                 DataField=&quot;CurrencyValue&quot; \n                 DataFormatString=&quot;{0:c}&quot;&gt;\n            &lt;/asp:BoundColumn&gt;\n\n         &lt;/Columns&gt;\n \n      &lt;/asp:DataGrid&gt;\n \n   &lt;/form&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_DataFormatString\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn_DataFormatString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DataFormatString</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the string that specifies the display format for items in the column.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual string DataFormatString { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A formatting string that specifies the display format of items in the column. The default value is <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the DataFormatString property to provide a custom format for the items in the column.  </p>\n<p> The data format string consists of two parts, separated by a colon, in the form { <code>A</code> : <code>Bxx</code> }. For example, the formatting string {0:F2} displays a fixed-point number with two decimal places.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The entire string must be enclosed in braces to indicate that it is a format string and not a literal string. Any text outside the braces is displayed as literal text.  </p>\n</div>\n<p> The value before the colon (<code>A</code> in the general example) specifies the parameter index in a zero-based list of parameters.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This value can only be set to 0 because there is only one value in each cell.  </p>\n</div>\n<p> The character after the colon (<code>B</code> in the general example) specifies the format to display the value in. The following table lists the common formats.  </p>\n<table>\n<thead>\n<tr>\n<th>Format character</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>C</code></td>\n<td>Displays numeric values in currency format.</td>\n</tr>\n<tr>\n<td><code>D</code></td>\n<td>Displays numeric values in decimal format.</td>\n</tr>\n<tr>\n<td><code>E</code></td>\n<td>Displays numeric values in scientific (exponential) format.</td>\n</tr>\n<tr>\n<td><code>F</code></td>\n<td>Displays numeric values in fixed format.</td>\n</tr>\n<tr>\n<td><code>G</code></td>\n<td>Displays numeric values in general format.</td>\n</tr>\n<tr>\n<td><code>N</code></td>\n<td>Displays numeric values in number format.</td>\n</tr>\n<tr>\n<td><code>X</code></td>\n<td>Displays numeric values in hexadecimal format.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> The format character is not case-sensitive, except for <code>X</code>, which displays the hexadecimal characters in the case specified.  </p>\n</div>\n<p> The value after the format character (<code>xx</code> in the general example) specifies the number of significant digits or decimal places to display.  </p>\n<p> For more information on formatting strings, see <a href=\"../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md\" data-linktype=\"relative-path\">Formatting Types</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the DataFormatString property to specify various formats for the columns in the <a class=\"xref\" href=\"system.web.ui.webcontrols.datagrid\" data-linktype=\"relative-path\">DataGrid</a> control. The <code>Qty</code> column is formatted as an integer, the <code>Price</code> column is formatted as currency, the <code>Weight</code> column is formatted as a decimal number, and the <code>Expires</code> column is formatted as a short date and time string.  </p>\n<pre><code class=\"lang-vb\" name=\"BoundColumnDataFormatString#1\">\n&lt;%@ Page language=&quot;VB&quot; AutoEventWireup=&quot;true&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Globalization&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n    &lt;head runat=&quot;server&quot;&gt;\n        &lt;title&gt;BoundColumn Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n  \n       &#39; The Cart and CartView objects temporarily store the data source \n       &#39; for the DataGrid control while the page is being processed.\n       Dim Cart As DataTable\n       Dim CartView As DataView   \n \n       Sub Page_Load(sender as Object, e As EventArgs) \n \n          &#39; With a database, use a select query to retrieve the data. \n          &#39; Because the data source in this example is an in-memory \n          &#39; DataTable, retrieve the data from session state if it exists; \n          &#39; otherwise, create the data source.\n          GetSource()\n\n          &#39; The DataGrid control maintains state between posts to the \n          &#39; server; therefore it only needs to be bound to a data source \n          &#39; the first time the page is loaded or when the data source \n          &#39; is updated.\n          If Not IsPostBack Then\n\n             BindGrid()\n\n          End If\n                   \n       End Sub\n \n       Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n \n          &#39; Set the EditItemIndex property to the index of the item \n          &#39; clicked in the DataGrid control to enable editing for that\n          &#39; item. Be sure to rebind the DateGrid to the data source \n          &#39; to refresh the control.\n          ItemsGrid.EditItemIndex = e.Item.ItemIndex\n          BindGrid()\n \n       End Sub\n  \n       Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n \n          &#39; Set the EditItemIndex property to -1 to exit editing mode.  \n          &#39; Be sure to rebind the DateGrid to the data source to \n          &#39; refresh the control.\n          ItemsGrid.EditItemIndex = -1\n          BindGrid()\n \n       End Sub\n  \n       Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n \n          &#39; Retrieve the updated values.\n          &#39; For bound columns, the edited value is stored in a TextBox.\n          &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n          &#39; Each cell in the Cells collection of a DataGrid item represents\n          &#39; a column in the DataGrid control.\n          Dim updateItem As DataGridItem\n             updateItem = e.Item\n \n          Dim qtyText As TextBox = CType(e.Item.Cells(2).Controls(0), TextBox)\n          Dim priceText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n \n          Try \n              &#39; Try to parse the updated values from the input text.\n              Dim newQty As Int32\n              Dim newPrice As Decimal\n             \n              newQty = Int32.Parse(qtyText.Text, NumberStyles.Number)\n              newPrice = Decimal.Parse(priceText.Text, NumberStyles.Currency)\n \n              &#39; Get the item cell value - &quot;Item 1&quot;, &quot;Item 2&quot;, etc.\n              &#39; For read-only columns, the value is stored in the cell text.\n              Dim item As String = updateItem.Cells(1).Text\n         \n  \n              &#39; With a database, use an update command to update the data. Because \n              &#39; the data source in this example is an in-memory DataTable, delete \n              &#39; the old row and replace it with a new one.\n \n              &#39; Remove the old entry and clear the row filter.\n              CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n              If CartView.Count &gt; 0 Then\n             \n                  CartView.Delete(0)\n          \n              End If\n \n              CartView.RowFilter = &quot;&quot;\n  \n              &#39; Add the new entry.\n              Dim dr As DataRow\n              dr = Cart.NewRow()\n \n              dr(&quot;Item&quot;) = item\n              dr(&quot;Qty&quot;) = newQty\n              dr(&quot;Price&quot;) = newPrice\n              dr(&quot;Weight&quot;) = updateItem.Cells(4).Text\n              dr(&quot;Expires&quot;) = updateItem.Cells(5).Text\n              \n\n              Cart.Rows.Add(dr)\n          Catch ex As System.FormatException\n\n             &#39; If parsing the price or quantity caused an \n             &#39; exception, then leave edit mode without\n             &#39; changing any cell values.\n          End Try\n \n          &#39; Set the EditItemIndex property to -1 to exit editing mode. \n          &#39; Be sure to rebind the DateGrid to the data source to refresh\n          &#39; the control.\n          ItemsGrid.EditItemIndex = -1\n          BindGrid()\n\n       End Sub\n \n       Sub BindGrid() \n       \n          &#39; Set the data source and bind to the Data Grid control.\n          ItemsGrid.DataSource = CartView\n          ItemsGrid.DataBind()\n \n       End Sub\n \n       Sub GetSource()\n \n          &#39; For this example, the data source will be a DataTable that is\n          &#39; stored in session state.\n          &#39; If the data source does not exist, create it; otherwise, \n          &#39; load the data.\n          If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n \n              Cart = New DataTable\n              InitSource()\n \n          Else\n \n             &#39; Retrieve the sample data from session state.\n             Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n \n          End If         \n  \n          &#39; Create a DataView and specify the field to sort by.\n          CartView = New DataView(Cart)\n          CartView.Sort=&quot;Item&quot;\n \n          Return\n \n       End Sub\n \n       Sub InitSource()\n \n           &#39; Create the sample data.\n  \n           &#39; Define the columns of the table.\n            Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(System.Int32)))\n            Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(System.String)))\n            Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(System.Decimal)))\n            Cart.Columns.Add(New DataColumn(&quot;Weight&quot;, GetType(System.Decimal)))\n            Cart.Columns.Add(New DataColumn(&quot;Expires&quot;, GetType(System.DateTime)))\n\n           &#39; Store the table in session state to persist its values \n           &#39; between posts to the server.\n           Session(&quot;ShoppingCart&quot;) = Cart\n             \n           &#39; Populate the DataTable with sample data.\n           &#39; The generated table row data look like this:\n\n           Dim dr As DataRow\n           Dim i As Integer\n\n           For i = 1 to 4 \n          \n               dr = Cart.NewRow()\n               dr(&quot;Qty&quot;) = i Mod 2 + 1\n               dr(&quot;Item&quot;) = &quot;Item &quot; + i.ToString()\n               dr(&quot;Price&quot;) = (0.5 * (i + 1))\n               dr(&quot;Weight&quot;) = 5.0\n               dr(&quot;Expires&quot;) = DateTime.Now + TimeSpan.FromDays(7)\n               Cart.Rows.Add(dr)\n\n           Next\n       End Sub\n    &lt;/script&gt;\n    &lt;body&gt;\n        &lt;form runat=&quot;server&quot; id=&quot;form1&quot;&gt;\n            &lt;h3&gt;BoundColumn DataFormatString Example&lt;/h3&gt;\n            &lt;asp:DataGrid id=&quot;ItemsGrid&quot; \n                BorderColor=&quot;black&quot; BorderWidth=&quot;1&quot; CellPadding=&quot;3&quot;\n                OnEditCommand=&quot;ItemsGrid_Edit&quot; OnCancelCommand=&quot;ItemsGrid_Cancel&quot; \n                OnUpdateCommand=&quot;ItemsGrid_Update&quot; AutoGenerateColumns=&quot;false&quot;\n                runat=&quot;server&quot; &gt;\n\n                &lt;HeaderStyle backcolor=&quot;#aaaadd&quot;&gt;&lt;/HeaderStyle&gt;\n\n                &lt;Columns&gt;\n                    &lt;asp:EditCommandColumn EditText=&quot;Edit&quot; CancelText=&quot;Cancel&quot; \n                         UpdateText=&quot;Update&quot; HeaderText=&quot;Edit Command Column&quot;&gt;\n                        &lt;ItemStyle Wrap=&quot;False&quot;&gt;&lt;/ItemStyle&gt;\n                        &lt;HeaderStyle wrap=&quot;false&quot;&gt;&lt;/HeaderStyle&gt;\n                    &lt;/asp:EditCommandColumn&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Item&quot; DataField=&quot;Item&quot; \n                                     ReadOnly=&quot;True&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; DataField=&quot;Qty&quot; \n                                     DataFormatString=&quot;{0:N0}&quot;/&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Price&quot; DataField=&quot;Price&quot;\n                                     DataFormatString=&quot;{0:c}&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Weight&quot; DataField=&quot;Weight&quot; \n                                     ReadOnly=&quot;True&quot; DataFormatString=&quot;{0:F3}&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Expires&quot; DataField=&quot;Expires&quot; \n                                     ReadOnly=&quot;True&quot; DataFormatString=&quot;{0:g}&quot; /&gt;\n\n                &lt;/Columns&gt;\n            &lt;/asp:DataGrid&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"BoundColumnDataFormatString#1\">\n&lt;%@ Page language=&quot;c#&quot; AutoEventWireup=&quot;true&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Globalization&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n    &lt;head runat=&quot;server&quot;&gt;\n        &lt;title&gt;BoundColumn Example&lt;/title&gt;\n    &lt;/head&gt;\n       &lt;script runat=&quot;server&quot;&gt;\n        // The Cart and CartView objects temporarily store the data source\n        // for the DataGrid control while the page is being processed.\n        DataTable Cart;\n        DataView CartView;   \n \n        void Page_Load(Object sender, EventArgs e) \n        {\n            // With a database, use a select query to retrieve the data. \n            // Because the data source in this example is an in-memory \n            // DataTable, retrieve the data from session state if it exists; \n            // otherwise, create the data source.\n            GetSource();\n\n            // The DataGrid control maintains state between posts to the \n            // server; therefore it only needs to be bound to a data source \n            // the first time the page is loaded or when the data source \n            // is updated.\n            if (!IsPostBack)\n            {\n                BindGrid();\n            }\n        }\n \n        void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n        {\n            // Set the EditItemIndex property to the index of the item \n            // clicked in the DataGrid control to enable editing for that\n            // item. Be sure to rebind the DateGrid to the data source \n            // to refresh the control.\n            ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n            BindGrid();\n        }\n \n        void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n        {\n            // Set the EditItemIndex property to -1 to exit editing mode.  \n            // Be sure to rebind the DateGrid to the data source to \n            // refresh the control.\n            ItemsGrid.EditItemIndex = -1;\n            BindGrid();\n        }\n \n        void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n        {\n            // Retrieve the updated values.\n            // For bound columns, the edited value is stored in a TextBox.\n            // The TextBox is the 0th control in a cell&#39;s Controls collection.\n            // Each cell in the Cells collection of a DataGrid item represents\n            // a column in the DataGrid control.\n            DataGridItem updateItem = e.Item;\n\n            TextBox qtyText = (TextBox)updateItem.Cells[2].Controls[0];\n            TextBox priceText = (TextBox)updateItem.Cells[3].Controls[0];\n            \n            try {\n                // Try to parse the updated values from the input text.\n                Int32 newQty;\n                Decimal newPrice;\n            \n                newQty = Int32.Parse(qtyText.Text, NumberStyles.Number);\n                newPrice = Decimal.Parse(priceText.Text, NumberStyles.Currency);\n\n                // Get the item cell value - &quot;Item 1&quot;, &quot;Item 2&quot;, etc.\n                // For read-only columns, the value is stored in the cell text.\n                String item = updateItem.Cells[1].Text;\n       \n                // With a database, use an update command to update the data. \n                // Because the data source in this example is an in-memory\n                // DataTable, delete the old row and replace it with a new one.\n    \n                // Filter on the updated item, remove it,\n                // then clear the row filter.\n                CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n                if (CartView.Count &gt; 0)\n                {\n                    CartView.Delete(0);\n                }\n                CartView.RowFilter = &quot;&quot;;\n \n                // Add the updated entry for the item.\n                DataRow dr = Cart.NewRow();\n                dr[&quot;Item&quot;] = item;\n                dr[&quot;Qty&quot;] = newQty;\n                dr[&quot;Price&quot;] = newPrice;\n                dr[&quot;Weight&quot;] = updateItem.Cells[4].Text;\n                dr[&quot;Expires&quot;] = updateItem.Cells[5].Text;\n            \n                Cart.Rows.Add(dr);\n            }\n            catch (System.FormatException)\n            {\n                // If parsing the price or quantity caused an \n                // exception, then leave edit mode without\n                // changing any cell values.\n            }\n\n            // Set the EditItemIndex property to -1 to exit editing mode.  \n            // Be sure to rebind the DataGrid to the data source to refresh\n            // the control.\n            ItemsGrid.EditItemIndex = -1;\n            BindGrid();\n        }\n \n        void BindGrid() \n        {\n            // Set the data source and bind to the Data Grid control.\n            ItemsGrid.DataSource = CartView;\n            ItemsGrid.DataBind();\n        }\n\n        void GetSource()\n        {\n            // For this example, the data source is a DataTable that is \n            // stored in session state.\n            // If the data source does not exist, create it; otherwise, \n            // load the data.\n            \n            if (Session[&quot;ShoppingCart&quot;] == null) \n            {     \n                Cart = new DataTable();\n                InitSource();\n            } \n            else\n            {\n                // Retrieve the sample data from session state.\n                Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n            }         \n \n            // Create a DataView and specify the field to sort by.\n            CartView = new DataView(Cart);\n            CartView.Sort=&quot;Item&quot;;\n\n            return;\n        }\n        \n        void InitSource()\n        {\n            // Create the sample data.\n \n            // Define the columns of the table.\n            Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(Int32)));\n            Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n            Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(Decimal)));\n            Cart.Columns.Add(new DataColumn(&quot;Weight&quot;, typeof(Decimal)));\n            Cart.Columns.Add(new DataColumn(&quot;Expires&quot;, typeof(DateTime)));\n\n            // Store the table in session state to persist its values \n            // between posts to the server.\n            Session[&quot;ShoppingCart&quot;] = Cart;\n            \n            // Populate the DataTable with sample data.\n            DataRow dr;  \n\n            for (int i = 1; i &lt;= 4; i++) \n            {\n                dr = Cart.NewRow();\n                dr[&quot;Qty&quot;] = i % 2 + 1;\n                dr[&quot;Item&quot;] = &quot;Item &quot; + i.ToString();\n                dr[&quot;Price&quot;] = (0.50 * (i + 1));\n                dr[&quot;Weight&quot;] = 5.0;\n                dr[&quot;Expires&quot;] = DateTime.Now + TimeSpan.FromDays(7);\n                Cart.Rows.Add(dr);\n            }\n        }\n        &lt;/script&gt;\n    &lt;body&gt;\n        &lt;form runat=&quot;server&quot; id=&quot;form1&quot;&gt;\n            &lt;h3&gt;BoundColumn DataFormatString Example&lt;/h3&gt;\n            &lt;asp:DataGrid id=&quot;ItemsGrid&quot; \n                BorderColor=&quot;black&quot; BorderWidth=&quot;1&quot; CellPadding=&quot;3&quot;\n                OnEditCommand=&quot;ItemsGrid_Edit&quot; OnCancelCommand=&quot;ItemsGrid_Cancel&quot; \n                OnUpdateCommand=&quot;ItemsGrid_Update&quot; AutoGenerateColumns=&quot;false&quot;\n                runat=&quot;server&quot; &gt;\n\n                &lt;HeaderStyle backcolor=&quot;#aaaadd&quot;&gt;&lt;/HeaderStyle&gt;\n\n                &lt;Columns&gt;\n                    &lt;asp:EditCommandColumn EditText=&quot;Edit&quot; CancelText=&quot;Cancel&quot; \n                         UpdateText=&quot;Update&quot; HeaderText=&quot;Edit Command Column&quot;&gt;\n                        &lt;ItemStyle Wrap=&quot;False&quot;&gt;&lt;/ItemStyle&gt;\n                        &lt;HeaderStyle wrap=&quot;false&quot;&gt;&lt;/HeaderStyle&gt;\n                    &lt;/asp:EditCommandColumn&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Item&quot; DataField=&quot;Item&quot; \n                                     ReadOnly=&quot;True&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; DataField=&quot;Qty&quot; \n                                     DataFormatString=&quot;{0:N0}&quot;/&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Price&quot; DataField=&quot;Price&quot;\n                                     DataFormatString=&quot;{0:c}&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Weight&quot; DataField=&quot;Weight&quot; \n                                     ReadOnly=&quot;True&quot; DataFormatString=&quot;{0:F3}&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Expires&quot; DataField=&quot;Expires&quot; \n                                     ReadOnly=&quot;True&quot; DataFormatString=&quot;{0:g}&quot; /&gt;\n\n                &lt;/Columns&gt;\n            &lt;/asp:DataGrid&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_ReadOnly\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn_ReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> can be edited.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual bool ReadOnly { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> cannot be edited; otherwise, <code>false</code>. The default value is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the ReadOnly property to specify whether the items in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> can be edited. This property can also be used to programmatically determine whether the column is read-only.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ReadOnly property to specify that a <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> is read-only. The .aspx file defines three BoundColumn controls, and sets the Item column to read-only.  </p>\n<pre><code class=\"lang-cs\" name=\"BoundColumnReadOnly#1\">\n&lt;%@ Page language=&quot;c#&quot; AutoEventWireup=&quot;true&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n    &lt;head runat=&quot;server&quot;&gt;\n        &lt;title&gt;BoundColumn Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;script runat=&quot;server&quot;&gt;\n        // The Cart and CartView objects temporarily store the data source\n        // for the DataGrid control while the page is being processed.\n        DataTable Cart = new DataTable();\n        DataView CartView;   \n \n        void Page_Load(Object sender, EventArgs e) \n        {\n            // With a database, use a select query to retrieve the data. \n            // Because the data source in this example is an in-memory \n            // DataTable, retrieve the data from session state if it exists; \n            // otherwise, create the data source.\n            GetSource();\n\n            // The DataGrid control maintains state between posts to the \n            // server; therefore it only needs to be bound to a data source \n            // the first time the page is loaded or when the data source \n            // is updated.\n            if (!IsPostBack)\n            {\n                BindGrid();\n            }\n        }\n \n        void ItemsGrid_Edit(Object sender, DataGridCommandEventArgs e) \n        {\n            // Set the EditItemIndex property to the index of the item \n            // clicked in the DataGrid control to enable editing for that\n            // item. Be sure to rebind the DateGrid to the data source \n            // to refresh the control.\n            ItemsGrid.EditItemIndex = e.Item.ItemIndex;\n            BindGrid();\n        }\n \n        void ItemsGrid_Cancel(Object sender, DataGridCommandEventArgs e) \n        {\n            // Set the EditItemIndex property to -1 to exit editing mode.  \n            // Be sure to rebind the DateGrid to the data source to \n            // refresh the control.\n            ItemsGrid.EditItemIndex = -1;\n            BindGrid();\n        }\n \n        void ItemsGrid_Update(Object sender, DataGridCommandEventArgs e) \n        {\n\n            // Retrieve the text boxes that contain the values to update.\n            // For bound columns, the edited value is stored in a TextBox.\n            // The TextBox is the 0th control in a cell&#39;s Controls collection.\n            // Each cell in the Cells collection of a DataGrid item represents\n            // a column in the DataGrid control.\n            TextBox qtyText = (TextBox)e.Item.Cells[2].Controls[0];\n            TextBox priceText = (TextBox)e.Item.Cells[3].Controls[0];\n \n            // Retrieve the updated values.\n            String item = e.Item.Cells[1].Text;\n            String qty = qtyText.Text;\n            String price = priceText.Text;\n        \n            DataRow dr;\n \n            // With a database, use an update command to update the data. Because \n            // the data source in this example is an in-memory DataTable, delete  \n            // the old row and replace it with a new one.\n \n            // Remove the old entry and clear the row filter.\n            CartView.RowFilter = &quot;Item=&#39;&quot; + item + &quot;&#39;&quot;;\n            if (CartView.Count &gt; 0)\n            {\n                CartView.Delete(0);\n            }\n            CartView.RowFilter = &quot;&quot;;\n \n            // Add the new entry.\n            dr = Cart.NewRow();\n            dr[0] = qty;\n            dr[1] = item;\n            dr[2] = price;\n            Cart.Rows.Add(dr);\n \n            // Set the EditItemIndex property to -1 to exit editing mode.  \n            // Be sure to rebind the DateGrid to the data source to refresh\n            // the control.\n            ItemsGrid.EditItemIndex = -1;\n            BindGrid();\n        }\n \n        void BindGrid() \n        {\n            // Set the data source and bind to the Data Grid control.\n            ItemsGrid.DataSource = CartView;\n            ItemsGrid.DataBind();\n        }\n\n        void GetSource()\n        {\n\n            // For this example, the data source is a DataTable that is \n            // stored in session state.\n            // If the data source does not exist, create it; otherwise, \n            // load the data.\n            if (Session[&quot;ShoppingCart&quot;] == null) \n            {     \n\n                // Create the sample data.\n                DataRow dr;  \n \n                // Define the columns of the table.\n                Cart.Columns.Add(new DataColumn(&quot;Qty&quot;, typeof(String)));\n                Cart.Columns.Add(new DataColumn(&quot;Item&quot;, typeof(String)));\n                Cart.Columns.Add(new DataColumn(&quot;Price&quot;, typeof(String)));\n\n                // Store the table in session state to persist its values \n                // between posts to the server.\n                Session[&quot;ShoppingCart&quot;] = Cart;\n         \n            \n                // Populate the DataTable with sample data.\n                // The generated table row data looks like this:\n                //\n                //   Qty   Item   Price\n                //    1   Item 1   2.46\n                //    2   Item 2   3.69\n                //    1   Item 3   4.92\n                //    2   Item 4   6.15\n\n                for (int i = 1; i &lt;= 4; i++) \n                {\n                    dr = Cart.NewRow();\n                    if (i % 2 != 0)\n                    {\n                        dr[0] = &quot;2&quot;;\n                    }\n                    else\n                    {\n                        dr[0] = &quot;1&quot;;\n                    }\n                    dr[1] = &quot;Item &quot; + i.ToString();\n                    dr[2] = (1.23 * (i + 1)).ToString();\n                    Cart.Rows.Add(dr);\n                }\n            } \n\n            else\n            {\n                // Retrieve the sample data from session state.\n                Cart = (DataTable)Session[&quot;ShoppingCart&quot;];\n            }         \n \n            // Create a DataView and specify the field to sort by.\n            CartView = new DataView(Cart);\n            CartView.Sort=&quot;Item&quot;;\n\n            return;\n        }\n    &lt;/script&gt;\n\n    &lt;body&gt;\n        &lt;form runat=&quot;server&quot; id=&quot;form1&quot;&gt;\n            &lt;h3&gt;BoundColumn ReadOnly Example&lt;/h3&gt;\n\n            &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n                 BorderColor=&quot;black&quot;\n                 BorderWidth=&quot;1&quot;\n                 CellPadding=&quot;3&quot;\n                 OnEditCommand=&quot;ItemsGrid_Edit&quot;\n                 OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n                 OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n                 AutoGenerateColumns=&quot;false&quot;\n                 runat=&quot;server&quot;&gt;\n\n                &lt;HeaderStyle backcolor=&quot;#aaaadd&quot;&gt;&lt;/HeaderStyle&gt;\n\n                &lt;Columns&gt;\n\n                    &lt;asp:EditCommandColumn EditText=&quot;Edit&quot; CancelText=&quot;Cancel&quot; \n                         UpdateText=&quot;Update&quot; HeaderText=&quot;Edit Command Column&quot;&gt;\n                        &lt;ItemStyle Wrap=&quot;False&quot;&gt;&lt;/ItemStyle&gt;\n                        &lt;HeaderStyle wrap=&quot;false&quot;&gt;&lt;/HeaderStyle&gt;\n                    &lt;/asp:EditCommandColumn&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Item&quot; DataField=&quot;Item&quot; \n                                     ReadOnly=&quot;True&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; DataField=&quot;Qty&quot; /&gt;\n\n                    &lt;asp:BoundColumn HeaderText=&quot;Price&quot; DataField=&quot;Price&quot; /&gt;\n                &lt;/Columns&gt;\n            &lt;/asp:DataGrid&gt;\n\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"BoundColumnReadOnly#1\">\n&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;True&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n\n   &lt;script runat=&quot;server&quot;&gt;\n \n      &#39; The Cart and CartView objects temporarily store the data source \n      &#39; for the DataGrid control while the page is being processed.\n      Dim Cart As DataTable = New DataTable()\n      Dim CartView As DataView   \n \n      Sub Page_Load(sender as Object, e As EventArgs) \n \n         &#39; With a database, use a select query to retrieve the data. \n         &#39; Because the data source in this example is an in-memory \n         &#39; DataTable, retrieve the data from session state if it exists; \n         &#39; otherwise, create the data source.\n         GetSource()\n\n         &#39; The DataGrid control maintains state between posts to the \n         &#39; server; therefore it only needs to be bound to a data source \n         &#39; the first time the page is loaded or when the data source \n         &#39; is updated.\n         If Not IsPostBack Then\n\n            BindGrid()\n\n         End If\n                   \n      End Sub\n \n      Sub ItemsGrid_Edit(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to the index of the item \n         &#39; clicked in the DataGrid control to enable editing for that\n         &#39; item. Be sure to rebind the DateGrid to the data source \n         &#39; to refresh the control.\n         ItemsGrid.EditItemIndex = e.Item.ItemIndex\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Cancel(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Set the EditItemIndex property to -1 to exit editing mode.  \n         &#39; Be sure to rebind the DateGrid to the data source to \n         &#39; refresh the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub ItemsGrid_Update(sender As Object, e As DataGridCommandEventArgs) \n\n         &#39; Retrieve the text boxes that contain the values to update.\n         &#39; For bound columns, the edited value is stored in a TextBox.\n         &#39; The TextBox is the 0th control in a cell&#39;s Controls collection.\n         &#39; Each cell in the Cells collection of a DataGrid item represents\n         &#39; a column in the DataGrid control.\n         Dim qtyText As TextBox = CType(e.Item.Cells(2).Controls(0), TextBox)\n         Dim priceText As TextBox = CType(e.Item.Cells(3).Controls(0), TextBox)\n \n         &#39; Retrieve the updated values.\n         Dim item As String = e.Item.Cells(1).Text\n         Dim qty As String = qtyText.Text\n         Dim price As String = priceText.Text\n        \n         Dim dr As DataRow\n \n         &#39; With a database, use an update command to update the data. Because \n         &#39; the data source in this example is an in-memory DataTable, delete \n         &#39; the old row and replace it with a new one.\n \n         &#39; Remove the old entry and clear the row filter.\n         CartView.RowFilter = &quot;Item=&#39;&quot; &amp; item &amp; &quot;&#39;&quot;\n         If CartView.Count &gt; 0 Then\n         \n            CartView.Delete(0)\n         \n         End If\n\n         CartView.RowFilter = &quot;&quot;\n \n         &#39; Add the new entry.\n         dr = Cart.NewRow()\n         dr(0) = qty\n         dr(1) = item\n         dr(2) = price\n         Cart.Rows.Add(dr)\n \n         &#39; Set the EditItemIndex property to -1 to exit editing mode. \n         &#39; Be sure to rebind the DateGrid to the data source to refresh\n         &#39; the control.\n         ItemsGrid.EditItemIndex = -1\n         BindGrid()\n\n      End Sub\n \n      Sub BindGrid() \n      \n         &#39; Set the data source and bind to the Data Grid control.\n         ItemsGrid.DataSource = CartView\n         ItemsGrid.DataBind()\n\n      End Sub\n\n      Sub GetSource()\n\n         &#39; For this example, the data source will be a DataTable that is\n         &#39; stored in session state.\n         &#39; If the data source does not exist, create it; otherwise, \n         &#39; load the data.\n         If Session(&quot;ShoppingCart&quot;) Is Nothing Then \n\n            &#39; Create the sample data.\n            Dim dr As DataRow  \n \n            &#39; Define the columns of the table.\n            Cart.Columns.Add(New DataColumn(&quot;Qty&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Item&quot;, GetType(String)))\n            Cart.Columns.Add(New DataColumn(&quot;Price&quot;, GetType(String)))\n\n            &#39; Store the table in session state to persist its values \n            &#39; between posts to the server.\n            Session(&quot;ShoppingCart&quot;) = Cart\n             \n            &#39; Populate the DataTable with sample data.\n            &#39; The generated table row data look like this:\n            &#39;\n            &#39;   Qty   Item   Price\n            &#39;    1   Item 1   2.46\n            &#39;    2   Item 2   3.69\n            &#39;    1   Item 3   4.92\n            &#39;    2   Item 4   6.15\n\n            Dim i As Integer\n\n            For i = 1 to 4 \n          \n               dr = Cart.NewRow()\n               If (i Mod 2) &lt;&gt; 0 Then\n                  dr(0) = &quot;2&quot;\n               Else\n                  dr(0) = &quot;1&quot;\n               End If\n               dr(1) = &quot;Item &quot; &amp; i.ToString()\n               dr(2) = (1.23 * (i + 1)).ToString()\n               Cart.Rows.Add(dr)\n\n            Next\n\n         Else\n\n            &#39; Retrieve the sample data from session state.\n            Cart = CType(Session(&quot;ShoppingCart&quot;), DataTable)\n\n         End If         \n \n         &#39; Create a DataView and specify the field to sort by.\n         CartView = New DataView(Cart)\n         CartView.Sort=&quot;Item&quot;\n\n         Return\n\n      End Sub\n \n   &lt;/script&gt;\n \n   &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;BoundColumn ReadOnly Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n      &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n         &lt;h3&gt;BoundColumn ReadOnly Example&lt;/h3&gt;\n \n         &lt;asp:DataGrid id=&quot;ItemsGrid&quot;\n              BorderColor=&quot;black&quot;\n              BorderWidth=&quot;1&quot;\n              CellPadding=&quot;3&quot;\n              OnEditCommand=&quot;ItemsGrid_Edit&quot;\n              OnCancelCommand=&quot;ItemsGrid_Cancel&quot;\n              OnUpdateCommand=&quot;ItemsGrid_Update&quot;\n              AutoGenerateColumns=&quot;false&quot;\n              runat=&quot;server&quot;&gt;\n\n            &lt;HeaderStyle BackColor=&quot;#aaaadd&quot;&gt;&lt;/HeaderStyle&gt;\n \n            &lt;Columns&gt;\n\n               &lt;asp:EditCommandColumn\n                    EditText=&quot;Edit&quot;\n                    CancelText=&quot;Cancel&quot;\n                    UpdateText=&quot;Update&quot; \n                    HeaderText=&quot;Edit Command Column&quot;&gt;\n\n                  &lt;ItemStyle Wrap=&quot;False&quot;&gt;&lt;/ItemStyle&gt;\n\n                  &lt;HeaderStyle Wrap=&quot;False&quot;&gt;&lt;/HeaderStyle&gt;\n\n               &lt;/asp:EditCommandColumn&gt;            \n \n               &lt;asp:BoundColumn HeaderText=&quot;Item&quot; DataField=&quot;Item&quot; \n                                ReadOnly=&quot;True&quot; /&gt;\n\n               &lt;asp:BoundColumn HeaderText=&quot;Quantity&quot; DataField=&quot;Qty&quot; /&gt;\n\n               &lt;asp:BoundColumn HeaderText=&quot;Price&quot; DataField=&quot;Price&quot; /&gt;\n    \n            &lt;/Columns&gt;\n         &lt;/asp:DataGrid&gt;\n\n      &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_FormatDataValue_System_Object_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn_FormatDataValue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FormatDataValue(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Converts the specified value to the format indicated by the <span class=\"xref\">stem.Web.UI.WebControls.BoundColumn.DataFormatString*</span> property.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected virtual string FormatDataValue (object dataValue);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>dataValue</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The value to format.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The specified value converted to the format indicated by the <span class=\"xref\">stem.Web.UI.WebControls.BoundColumn.DataFormatString*</span> property.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the FormatDataValue method to convert the specified value to the format indicated by the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn#System_Web_UI_WebControls_BoundColumn_DataFormatString_\" data-linktype=\"relative-path\">DataFormatString</a> property.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This method returns the string equivalent of the value if the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn#System_Web_UI_WebControls_BoundColumn_DataFormatString_\" data-linktype=\"relative-path\">DataFormatString</a> property is not set.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_Initialize\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn_Initialize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Initialize()</div>        \r\n          </div>\r\n    \r\n            <p>Resets the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> to its initial state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Initialize ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the Initialize method to reset the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> to its initial state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Web_UI_WebControls_BoundColumn_InitializeCell_System_Web_UI_WebControls_TableCell_System_Int32_System_Web_UI_WebControls_ListItemType_\">\r\n    \r\n            <a id=\"System_Web_UI_WebControls_BoundColumn_InitializeCell_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InitializeCell(TableCell,Int32,ListItemType)</div>        \r\n          </div>\r\n    \r\n            <p>Resets the specified cell in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> to its initial state.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void InitializeCell (System.Web.UI.WebControls.TableCell cell, int columnIndex, System.Web.UI.WebControls.ListItemType itemType);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>cell</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.tablecell\" data-linktype=\"relative-path\">TableCell</a> object that represents the cell to reset.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>columnIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The column number where the cell is located.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>itemType</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.web.ui.webcontrols.listitemtype\" data-linktype=\"relative-path\">ListItemType</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The InitializeCell method resets the specified cell in the <a class=\"xref\" href=\"system.web.ui.webcontrols.boundcolumn\" data-linktype=\"relative-path\">BoundColumn</a> to its initial state.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.BoundColumn.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.BoundColumn.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.DataField\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.DataFormatString\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.FormatDataValue\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.Initialize\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.InitializeCell\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.BoundColumn.thisExpr\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"e066f92d-de44-4fab-8123-24e5114fc773\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A column type for the  control that is bound to a field in a data source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Web.UI.WebControls/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.BoundColumn\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Web.UI.WebControls.BoundColumn.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Web.UI.WebControls.BoundColumn.yml","open_to_public_contributors":true,"api_name":["System.Web.UI.WebControls.BoundColumn","System.Web.UI.WebControls.BoundColumn..ctor","System.Web.UI.WebControls.BoundColumn.DataField","System.Web.UI.WebControls.BoundColumn.DataFormatString","System.Web.UI.WebControls.BoundColumn.FormatDataValue","System.Web.UI.WebControls.BoundColumn.Initialize","System.Web.UI.WebControls.BoundColumn.InitializeCell","System.Web.UI.WebControls.BoundColumn.ReadOnly","System.Web.UI.WebControls.BoundColumn.thisExpr"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.BoundColumn","System::Web::UI::WebControls::BoundColumn","System.Web.UI.WebControls.BoundColumn.#ctor","System::Web::UI::WebControls::BoundColumn::#ctor","System.Web.UI.WebControls.BoundColumn.DataField","System::Web::UI::WebControls::BoundColumn::DataField","System.Web.UI.WebControls.BoundColumn.DataFormatString","System::Web::UI::WebControls::BoundColumn::DataFormatString","System.Web.UI.WebControls.BoundColumn.FormatDataValue","System::Web::UI::WebControls::BoundColumn::FormatDataValue","System.Web.UI.WebControls.BoundColumn.Initialize","System::Web::UI::WebControls::BoundColumn::Initialize","System.Web.UI.WebControls.BoundColumn.InitializeCell","System::Web::UI::WebControls::BoundColumn::InitializeCell","System.Web.UI.WebControls.BoundColumn.ReadOnly","System::Web::UI::WebControls::BoundColumn::ReadOnly","System.Web.UI.WebControls.BoundColumn.thisExpr","System::Web::UI::WebControls::BoundColumn::thisExpr"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"e066f92d-de44-4fab-8123-24e5114fc773","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Web.UI.WebControls/BoundColumn.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BoundColumn class | Microsoft Docs","_op_ogTitle":"BoundColumn class","description":"A column type for the  control that is bound to a field in a data source.\n","toc_asset_id":"_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.BoundColumn","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.boundcolumn","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.web.ui.webcontrols.boundcolumn","fileRelativePath":"System.Web.UI.WebControls.BoundColumn.html"},"themesRelativePathToOutputRoot":"_themes/"}