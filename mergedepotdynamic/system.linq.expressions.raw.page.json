{"content":"\r\n<div style=\"display:none\">\r\n\t\r\n</div>\r\n\r\n  <h1>\r\n    <span class=\"lang-csharp\">System.Linq.Expressions</span>\r\n      Namespace\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>The System.Linq.Expressions namespace contains classes, interfaces and enumerations that enable language-level code expressions to be represented as objects in the form of expression trees.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \r\n  \t<h2 class=\"accented\">Introduction</h2>\r\n  \t<p>The abstract class <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> provides the root of a class hierarchy used to model expression trees.  </p>\n<p> The classes in this namespace that derive from <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a>, for example <a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a> and <a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a>, are used to represent nodes in an expression tree. The <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> class contains <code>static</code> (<code>Shared</code> in Visual Basic) factory methods to create expression tree nodes of the various types.  </p>\n<p> The enumeration type <a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a> specifies the unique node types.</p>\n\r\n  \r\n  \t\t<h2 class=\"accented\" id=\"classes\">Classes\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Linq_Expressions_BinaryExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.binaryexpression\" data-linktype=\"relative-path\">BinaryExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an expression that has a binary operator.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_BlockExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a block that contains a sequence of expressions where variables can be defined.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_CatchBlock\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.catchblock\" data-linktype=\"relative-path\">CatchBlock</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a catch statement in a try block.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_ConditionalExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.conditionalexpression\" data-linktype=\"relative-path\">ConditionalExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an expression that has a conditional operator.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_ConstantExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an expression that has a constant value.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_DebugInfoExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.debuginfoexpression\" data-linktype=\"relative-path\">DebugInfoExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_DefaultExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.defaultexpression\" data-linktype=\"relative-path\">DefaultExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents the default value of a type or an empty expression.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_DynamicExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpression\" data-linktype=\"relative-path\">DynamicExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a dynamic operation.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_DynamicExpressionVisitor\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.dynamicexpressionvisitor\" data-linktype=\"relative-path\">DynamicExpressionVisitor</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a visitor or rewriter for dynamic expression trees.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_ElementInit\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.elementinit\" data-linktype=\"relative-path\">ElementInit</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an initializer for a single element of an <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> collection.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_Expression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains <code>static</code> (<code>Shared</code> in Visual Basic) factory methods to create the various node types. This is an <code>abstract</code> class.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_Expression_1\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expression-1\" data-linktype=\"relative-path\">Expression&lt;TDelegate&gt;</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_ExpressionVisitor\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressionvisitor\" data-linktype=\"relative-path\">ExpressionVisitor</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a visitor or rewriter for expression trees.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_GotoExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_IndexExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.indexexpression\" data-linktype=\"relative-path\">IndexExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents indexing a property or array.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_InvocationExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.invocationexpression\" data-linktype=\"relative-path\">InvocationExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_LabelExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a label, which can be put in any <a class=\"xref\" href=\"system.linq.expressions.expression\" data-linktype=\"relative-path\">Expression</a> context. If it is jumped to, it will get the value provided by the corresponding <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a>. Otherwise, it receives the value in <span class=\"xref\">stem.Linq.Expressions.LabelExpression.DefaultValue*</span>. If the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> equals System.Void, no value should be provided.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_LabelTarget\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Used to represent the target of a <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_LambdaExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Describes a lambda expression. This captures a block of code that is similar to a .NET method body.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_ListInitExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.listinitexpression\" data-linktype=\"relative-path\">ListInitExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a constructor call that has a collection initializer.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_LoopExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.loopexpression\" data-linktype=\"relative-path\">LoopExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an infinite loop. It can be exited with &quot;break&quot;.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberAssignment\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberassignment\" data-linktype=\"relative-path\">MemberAssignment</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents assignment operation for a field or property of an object.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberBinding\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberbinding\" data-linktype=\"relative-path\">MemberBinding</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberexpression\" data-linktype=\"relative-path\">MemberExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents accessing a field or property.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberInitExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents calling a constructor and initializing one or more members of the new object.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberListBinding\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberlistbinding\" data-linktype=\"relative-path\">MemberListBinding</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents initializing the elements of a collection member of a newly created object.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberMemberBinding\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.membermemberbinding\" data-linktype=\"relative-path\">MemberMemberBinding</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents initializing members of a member of a newly created object.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MethodCallExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.methodcallexpression\" data-linktype=\"relative-path\">MethodCallExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a call to either static or an instance method.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_NewArrayExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newarrayexpression\" data-linktype=\"relative-path\">NewArrayExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents creating a new array and possibly initializing the elements of the new array.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_NewExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.newexpression\" data-linktype=\"relative-path\">NewExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a constructor call.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_ParameterExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a named parameter expression.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_RuntimeVariablesExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.runtimevariablesexpression\" data-linktype=\"relative-path\">RuntimeVariablesExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>An expression that provides runtime read/write permission for variables.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_SwitchCase\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents one case of a <a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_SwitchExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.switchexpression\" data-linktype=\"relative-path\">SwitchExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a control expression that handles multiple selections by passing control to <a class=\"xref\" href=\"system.linq.expressions.switchcase\" data-linktype=\"relative-path\">SwitchCase</a>.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_SymbolDocumentInfo\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.symboldocumentinfo\" data-linktype=\"relative-path\">SymbolDocumentInfo</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_TryExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.tryexpression\" data-linktype=\"relative-path\">TryExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents a try/catch/finally/fault block.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_TypeBinaryExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.typebinaryexpression\" data-linktype=\"relative-path\">TypeBinaryExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an operation between an expression and a type.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_UnaryExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.unaryexpression\" data-linktype=\"relative-path\">UnaryExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Represents an expression that has a unary operator.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n  \t\t<h2 class=\"accented\" id=\"interfaces\">Interfaces\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Linq_Expressions_IArgumentProvider\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.iargumentprovider\" data-linktype=\"relative-path\">IArgumentProvider</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.  </p>\n<p> This enables two optimizations which reduce the size of expression trees.  The first enables the tree nodes to hold onto an IList<t> instead of a ReadOnlyCollection.  IList<t> saves the cost of allocating the ReadOnlyCollection for each node.  The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).  Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.  <p>\n<p> The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.  The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.  </p>\n<p> For the array case, the collection is typed to IList<t> instead of ReadOnlyCollection<t>.  When the node is initially constructed it is an array.  When the compiler accesses the members it uses this interface.  Accessing array elements promotes the array to a ReadOnlyCollection.  <p>\n<p> For the object case we store the first argument in a field typed to object.  When the node is initially constructed, the field holds the Expression.  The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.  When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.  </p>\n<p> It is important that the Expressions consistently return the same ReadOnlyCollection.  Otherwise, the re-writer tree walker will break.  It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.  Currently users can rely on object identity to tell if the node has changed.  Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</p>\n</t></t></t></t>\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_IDynamicExpression\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.idynamicexpression\" data-linktype=\"relative-path\">IDynamicExpression</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n  \t\t<h2 class=\"accented\" id=\"enums\">Enums\r\n  </h2>\r\n  \r\n  \t<table class=\"nameValue \">\r\n  \t\t<tr id=\"System_Linq_Expressions_ExpressionType\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.expressiontype\" data-linktype=\"relative-path\">ExpressionType</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Describes the node types for the nodes of an expression tree.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_GotoExpressionKind\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.gotoexpressionkind\" data-linktype=\"relative-path\">GotoExpressionKind</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Specifies what kind of jump this <a class=\"xref\" href=\"system.linq.expressions.gotoexpression\" data-linktype=\"relative-path\">GotoExpression</a> represents.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t\t<tr id=\"System_Linq_Expressions_MemberBindingType\" class=\"\">\r\n  \t\t<td>\r\n  \t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.linq.expressions.memberbindingtype\" data-linktype=\"relative-path\">MemberBindingType</a></span>\r\n  \t\t</td>\r\n  \t\t<td>\r\n  \t\t<p>Describes the binding types that are used in <a class=\"xref\" href=\"system.linq.expressions.memberinitexpression\" data-linktype=\"relative-path\">MemberInitExpression</a> objects.</p>\n\r\n  \t\t</td>\r\n  \t\t</tr>\r\n  \t</table>\r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.yml\">\r\n<meta name=\"updated_at\" content=\"2017-03-20 09:40 AM\">\r\n<meta name=\"document_id\" content=\"ff035c66-221b-73df-8906-adad08bec51b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"The System.Linq.Expressions namespace contains classes, interfaces and enumerations that enable language-level code expressions to be represented as objects in the form of expression trees.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Linq.Expressions/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Expressions\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Linq.Expressions.yml","open_to_public_contributors":true,"f1_keywords":["System.Linq.Expressions","System::Linq::Expressions"],"dev_langs":["csharp"],"updated_at":"2017-03-20 09:40 AM","document_id":"ff035c66-221b-73df-8906-adad08bec51b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/ns-System.Linq.Expressions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"System.Linq.Expressions namespace | Microsoft Docs","_op_ogTitle":"System.Linq.Expressions namespace","description":"The System.Linq.Expressions namespace contains classes, interfaces and enumerations that enable language-level code expressions to be represented as objects in the form of expression trees.\n","toc_asset_id":"_splitted/System.Linq.Expressions/toc.json","toc_rel":"_splitted/System.Linq.Expressions/toc.json","source_url":"","ms.assetid":"System.Linq.Expressions","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.linq.expressions","fileRelativePath":"System.Linq.Expressions.html"},"themesRelativePathToOutputRoot":"_themes/"}