{"content":"    \r\n    <h1 id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs\">\r\n      <span class=\"lang-csharp\">CheckForUpdateCompletedEventArgs</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents detailed update information obtained through a call to <span class=\"xref\">stem.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*</span>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class CheckForUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventArgs</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l3\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">CheckForUpdateCompletedEventArgs</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled\" data-linktype=\"relative-path\">Cancelled</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error\" data-linktype=\"relative-path\">Error</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_RaiseExceptionIfNecessary\" data-linktype=\"relative-path\">RaiseExceptionIfNecessary()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_UserState\" data-linktype=\"relative-path\">UserState</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>With CheckForUpdateCompletedEventArgs, you can decide whether to upgrade your ClickOnce application based on information about the newest version. <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable_\" data-linktype=\"relative-path\">UpdateAvailable</a> will return a Boolean value indicating whether there is a new update at all. The <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion_\" data-linktype=\"relative-path\">AvailableVersion</a> property provides the version number of the new version, while <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion_\" data-linktype=\"relative-path\">MinimumRequiredVersion</a> provides the earliest version that the user should have installed on the computer. <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired_\" data-linktype=\"relative-path\">IsUpdateRequired</a> expresses whether the latest available update is required of the user. Finally, <a class=\"xref\" href=\"system.deployment.application.checkforupdatecompletedeventargs#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes_\" data-linktype=\"relative-path\">UpdateSizeBytes</a> expresses the total size of the update.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion\" data-linktype=\"self-bookmark\">AvailableVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the version number of the latest uninstalled version.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired\" data-linktype=\"self-bookmark\">IsUpdateRequired</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the update must be installed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion\" data-linktype=\"self-bookmark\">MinimumRequiredVersion</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the minimum version that the user must have installed on the computer.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable\" data-linktype=\"self-bookmark\">UpdateAvailable</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets whether an uninstalled update is available.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes\" data-linktype=\"self-bookmark\">UpdateSizeBytes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the size of the available update.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion\">\r\n    \r\n            <a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_AvailableVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AvailableVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the version number of the latest uninstalled version.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version AvailableVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> expressing the major, minor, build and revision numbers of the latest version.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You can use AvailableVersion to decide whether to install the update based on the severity of the update. For example, if only the <a class=\"xref\" href=\"system.version#System_Version_Build_\" data-linktype=\"relative-path\">Build</a> or <a class=\"xref\" href=\"system.version#System_Version_Revision_\" data-linktype=\"relative-path\">Revision</a> version properties have changed, your application may not need to update until either the <a class=\"xref\" href=\"system.version#System_Version_Minor_\" data-linktype=\"relative-path\">Minor</a> or <a class=\"xref\" href=\"system.version#System_Version_Major_\" data-linktype=\"relative-path\">Major</a> properties change.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired\">\r\n    \r\n            <a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_IsUpdateRequired_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsUpdateRequired</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the update must be installed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsUpdateRequired { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the update is required; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you deploy an update to your ClickOnce application, you can mark it as a required update, signaling to your application that it should upgrade immediately. You want mark the update if the latest version contains a critical update, or if it is incompatible with file formats or back-end data sources used by the former version.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example uses IsUpdateRequired to determine whether to ask the user to install the update, or to install it without prompting.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion\">\r\n    \r\n            <a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_MinimumRequiredVersion_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">MinimumRequiredVersion</div>        \r\n          </div>\r\n    \r\n            <p>Gets the minimum version that the user must have installed on the computer.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Version MinimumRequiredVersion { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object expressing the earliest version that all users must install.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Applications can miss required updates when a user takes on a special assignment or is away from the computer for weeks or months. Use  </p>\n<p> MinimumRequiredVersion to determine if the user has not upgraded the application in a while, and has missed one or more required updates.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example calls <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CheckForUpdateAsync_\" data-linktype=\"relative-path\">CheckForUpdateAsync</a>, and forces an application update if MinimumRequiredVersion is greater than <a class=\"xref\" href=\"system.deployment.application.applicationdeployment#System_Deployment_Application_ApplicationDeployment_CurrentVersion_\" data-linktype=\"relative-path\">CurrentVersion</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#10\">ApplicationDeployment adCheckForUpdateAsyncMin;\n\nprivate void CheckForUpdateAsyncMin()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        adCheckForUpdateAsyncMin = ApplicationDeployment.CurrentDeployment;\n        adCheckForUpdateAsyncMin.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(adCheckForUpdateAsyncMin_CheckForUpdateCompleted);\n\n        adCheckForUpdateAsyncMin.CheckForUpdate();\n    }\n}\n\nvoid adCheckForUpdateAsyncMin_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;Could not install application update. Please try again later,  or contact a system administrator.&quot;, &quot;Application Update Error&quot;);\n        return;\n    }\n    else if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The application update has been cancelled.&quot;, &quot;Application Update Cancelled&quot;);\n        return;\n    }\n\n    adCheckForUpdateAsyncMin = ApplicationDeployment.CurrentDeployment;\n    if (e.MinimumRequiredVersion &gt; adCheckForUpdateAsyncMin.CurrentVersion)\n    {\n        // Launch an install of the minimum required version. \n        adCheckForUpdateAsyncMin.UpdateCompleted += new AsyncCompletedEventHandler(adCheckForUpdateAsyncMin_UpdateCompleted);\n        adCheckForUpdateAsyncMin.UpdateAsync();\n    }\n}\n\nvoid adCheckForUpdateAsyncMin_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    // Alert user that update is complete.\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;Could not install application update. We will try and upgrade the application later.&quot;, &quot;Application Update Error&quot;);\n        return;\n    }\n    else if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The application update has been cancelled.&quot;, &quot;Application Update Cancelled&quot;);\n        return;\n    }\n\n    MessageBox.Show(&quot;The update was successful. Your application will now be restarted.&quot;, &quot;Restart Application&quot;);\n    Application.Restart();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#10\">Dim WithEvents ADCheckForUpdateAsyncMin As ApplicationDeployment\n\nPrivate Sub CheckForUpdateAsyncMin()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADCheckForUpdateAsyncMin = ApplicationDeployment.CurrentDeployment\n\n        ADCheckForUpdateAsyncMin.CheckForUpdate()\n    End If\nEnd Sub\n\n\nPrivate Sub ADCheckForUpdateAsyncMin_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADCheckForUpdateAsyncMin.CheckForUpdateCompleted\n    If Not (e.Error Is Nothing) Then\n        MessageBox.Show(&quot;Could not install application update. Please try again later,  or contact a system administrator.&quot;, &quot;Application Update Error&quot;)\n        Return\n    Else\n        If (e.Cancelled) Then\n            MessageBox.Show(&quot;The application update has been cancelled.&quot;, &quot;Application Update Cancelled&quot;)\n            Return\n        End If\n    End If\n\n    ADCheckForUpdateAsyncMin = ApplicationDeployment.CurrentDeployment\n    If (e.MinimumRequiredVersion &gt; ADCheckForUpdateAsyncMin.CurrentVersion) Then\n        &#39; Launch an install of the minimum required version. \n        ADCheckForUpdateAsyncMin.UpdateAsync()\n    End If\nEnd Sub\n\n\nPrivate Sub ADCheckForUpdateAsyncMin_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADCheckForUpdateAsyncMin.UpdateCompleted\n    &#39; Alert user that update is complete.\n    If Not (e.Error Is Nothing) Then\n        MessageBox.Show(&quot;Could not install application update. We will try and upgrade the application later.&quot;, &quot;Application Update Error&quot;)\n        Return\n    Else\n        If (e.Cancelled) Then\n            MessageBox.Show(&quot;The application update has been cancelled.&quot;, &quot;Application Update Cancelled&quot;)\n            Return\n        End If\n    End If\n\n    MessageBox.Show(&quot;The update was successful. Your application will now be restarted.&quot;, &quot;Restart Application&quot;)\n    Application.Restart()\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable\">\r\n    \r\n            <a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateAvailable_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateAvailable</div>        \r\n          </div>\r\n    \r\n            <p>Gets whether an uninstalled update is available.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool UpdateAvailable { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if new version of the application is available; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example inspects UpdateAvailable to determine whether or not there is an update to install.  </p>\n<pre><code class=\"lang-cs\" name=\"ClickOnceAPI#1\">long sizeOfUpdate = 0;\n\nprivate void UpdateApplication()\n{\n    if (ApplicationDeployment.IsNetworkDeployed)\n    {\n        ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n        ad.CheckForUpdateCompleted += new CheckForUpdateCompletedEventHandler(ad_CheckForUpdateCompleted);\n        ad.CheckForUpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_CheckForUpdateProgressChanged);\n\n        ad.CheckForUpdateAsync();\n    }\n}\n\nvoid  ad_CheckForUpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    downloadStatus.Text = String.Format(&quot;Downloading: {0}. {1:D}K of {2:D}K downloaded.&quot;, GetProgressString(e.State), e.BytesCompleted/1024, e.BytesTotal/1024);   \n}\n\nstring GetProgressString(DeploymentProgressState state)\n{\n    if (state == DeploymentProgressState.DownloadingApplicationFiles)\n    {\n        return &quot;application files&quot;;\n    } \n    else if (state == DeploymentProgressState.DownloadingApplicationInformation) \n    {\n        return &quot;application manifest&quot;;\n    } \n    else \n    {\n        return &quot;deployment manifest&quot;;\n    }\n}\n\nvoid ad_CheckForUpdateCompleted(object sender, CheckForUpdateCompletedEventArgs e)\n{\n    if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not retrieve new version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n    else if (e.Cancelled == true)\n    {\n        MessageBox.Show(&quot;The update was cancelled.&quot;);\n    }\n\n    // Ask the user if they would like to update the application now.\n    if (e.UpdateAvailable)\n    {\n        sizeOfUpdate = e.UpdateSizeBytes;\n\n        if (!e.IsUpdateRequired)\n        {\n            DialogResult dr = MessageBox.Show(&quot;An update is available. Would you like to update the application now?<br><br>Estimated Download Time: &quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel);\n            if (DialogResult.OK == dr)\n            {\n                BeginUpdate();\n            }\n        }\n        else\n        {\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;);\n            BeginUpdate();\n        }\n    }\n}\n\nprivate void BeginUpdate()\n{\n    ApplicationDeployment ad = ApplicationDeployment.CurrentDeployment;\n    ad.UpdateCompleted += new AsyncCompletedEventHandler(ad_UpdateCompleted);\n\n    // Indicate progress in the application&#39;s status bar.\n    ad.UpdateProgressChanged += new DeploymentProgressChangedEventHandler(ad_UpdateProgressChanged);\n    ad.UpdateAsync();\n}\n\nvoid ad_UpdateProgressChanged(object sender, DeploymentProgressChangedEventArgs e)\n{\n    String progressText = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage);\n    downloadStatus.Text = progressText;\n}\n\nvoid ad_UpdateCompleted(object sender, AsyncCompletedEventArgs e)\n{\n    if (e.Cancelled)\n    {\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;);\n        return;\n    }\n    else if (e.Error != null)\n    {\n        MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: <br>&quot; + e.Error.Message + &quot;<br>Please report this error to the system administrator.&quot;);\n        return;\n    }\n\n    DialogResult dr = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel);\n    if (DialogResult.OK == dr)\n    {\n        Application.Restart();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ClickOnceAPI#1\">    private:\n        long sizeOfUpdate;\n\n\n    private:\n        void Form1_Load(Object^ sender, System::EventArgs^ e)\n        {\n            DoUpdate();\n        }\n\n    public:\n        void DoUpdate()\n        {\n            if (ApplicationDeployment::IsNetworkDeployed)\n            {\n                ApplicationDeployment^ currentAppDeployment =\n                    ApplicationDeployment::CurrentDeployment;\n                currentAppDeployment-&gt;CheckForUpdateCompleted +=\n                    gcnew CheckForUpdateCompletedEventHandler(\n                    this, &amp;Form1::currentDeploy_CheckForUpdateCompleted);\n                currentAppDeployment-&gt;CheckForUpdateAsync();\n            }\n        }\n\n        // If update is available, fetch it.\n        void currentDeploy_CheckForUpdateCompleted(Object^ sender,\n            CheckForUpdateCompletedEventArgs^ e)\n        {\n            if (nullptr != e-&gt;Error)\n            {\n                // Log error.\n                return;\n            }\n\n            if (e-&gt;UpdateAvailable)\n            {\n                sizeOfUpdate = (long) e-&gt;UpdateSizeBytes;\n                if (!e-&gt;IsUpdateRequired)\n                {\n                    System::Windows::Forms::DialogResult \n                        updateDialogueResult = MessageBox::Show(\n                        &quot;An update is available.Would you like to update the&quot; +\n                        &quot; application now?&quot;, &quot;Update Available&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        updateDialogueResult)\n                    {\n                        BeginUpdate();\n                    }\n                }\n                else\n                {\n                    BeginUpdate();\n                }\n            }\n        }\n\n        void BeginUpdate()\n        {\n            ApplicationDeployment^ ad = ApplicationDeployment::CurrentDeployment;\n            ad-&gt;UpdateCompleted +=\n                gcnew AsyncCompletedEventHandler(\n                this, &amp;Form1::CurrentDeployment_UpdateCompleted);\n\n            // Indicate progress in the application&#39;s status bar.\n            ad-&gt;UpdateProgressChanged +=\n                gcnew DeploymentProgressChangedEventHandler(this, \n                &amp;Form1::ad_ProgressChanged);\n\n            ad-&gt;UpdateAsync();\n        }\n\n        void CurrentDeployment_UpdateCompleted(Object^ sender,\n            AsyncCompletedEventArgs^ e)\n        {\n            if (!e-&gt;Cancelled)\n            {\n                if (nullptr != e-&gt;Error)\n                {\n                    System::Windows::Forms::DialogResult \n                        restartDialogueResult = MessageBox::Show(\n                        &quot;The application has been updated. Restart?&quot;,\n                        &quot;Restart Application&quot;,\n                        MessageBoxButtons::OKCancel);\n                    if (System::Windows::Forms::DialogResult::OK == \n                        restartDialogueResult)\n                    {\n                        Application::Restart();\n                    }\n                }\n                else\n                {\n                    // Replace with your own error reporting or logging.\n                    MessageBox::Show(\n                        &quot;The application encountered an error in downloading&quot; +\n                        &quot; the latest update. Error: {0}&quot;,\n                        e-&gt;Error-&gt;Message);\n                }\n            }\n            else\n            {\n                // Replace with your own error reporting or logging.\n                MessageBox::Show(&quot;The update of the application&#39;s latest&quot; +\n                    &quot; version was cancelled.&quot;);\n            }\n        }\n\n        void ad_ProgressChanged(Object^ sender,\n            DeploymentProgressChangedEventArgs^ e)\n        {\n            String^ progressText =\n                String::Format(\n                &quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;,\n                e-&gt;BytesCompleted / 1024, e-&gt;BytesTotal / 1024,\n                e-&gt;ProgressPercentage);\n            statusStrip1-&gt;Text = progressText;\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"ClickOnceAPI#1\">Private sizeOfUpdate As Long = 0\n\nDim WithEvents ADUpdateAsync As ApplicationDeployment\n\nPrivate Sub UpdateApplication()\n    If (ApplicationDeployment.IsNetworkDeployed) Then\n        ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n\n        ADUpdateAsync.CheckForUpdateAsync()\n    End If\nEnd Sub\n\nPrivate Sub ADUpdateAsync_CheckForUpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.CheckForUpdateProgressChanged\n    DownloadStatus.Text = [String].Format(&quot;{0:D}K of {1:D}K downloaded.&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024)\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_CheckForUpdateCompleted(ByVal sender As Object, ByVal e As CheckForUpdateCompletedEventArgs) Handles ADUpdateAsync.CheckForUpdateCompleted\n    If (e.Error IsNot Nothing) Then\n        MessageBox.Show((&quot;ERROR: Could not retrieve new version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;))\n        Return\n    Else\n        If (e.Cancelled = True) Then\n            MessageBox.Show(&quot;The update was cancelled.&quot;)\n        End If\n    End If\n\n    &#39; Ask the user if they would like to update the application now.\n    If (e.UpdateAvailable) Then\n        sizeOfUpdate = e.UpdateSizeBytes\n\n        If (Not e.IsUpdateRequired) Then\n            Dim dr As DialogResult = MessageBox.Show(&quot;An update is available. Would you like to update the application now?&quot;, &quot;Update Available&quot;, MessageBoxButtons.OKCancel)\n            If (System.Windows.Forms.DialogResult.OK = dr) Then\n                BeginUpdate()\n            End If\n        Else\n            MessageBox.Show(&quot;A mandatory update is available for your application. We will install the update now, after which we will save all of your in-progress data and restart your application.&quot;)\n            BeginUpdate()\n        End If\n    End If\nEnd Sub\n\nPrivate Sub BeginUpdate()\n    ADUpdateAsync = ApplicationDeployment.CurrentDeployment\n    ADUpdateAsync.UpdateAsync()\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateProgressChanged(ByVal sender As Object, ByVal e As DeploymentProgressChangedEventArgs) Handles ADUpdateAsync.UpdateProgressChanged\n    Dim progressText As String = String.Format(&quot;{0:D}K out of {1:D}K downloaded - {2:D}% complete&quot;, e.BytesCompleted / 1024, e.BytesTotal / 1024, e.ProgressPercentage)\n    DownloadStatus.Text = progressText\nEnd Sub\n\n\nPrivate Sub ADUpdateAsync_UpdateCompleted(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs) Handles ADUpdateAsync.UpdateCompleted\n    If (e.Cancelled) Then\n        MessageBox.Show(&quot;The update of the application&#39;s latest version was cancelled.&quot;)\n        Exit Sub\n    Else\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(&quot;ERROR: Could not install the latest version of the application. Reason: &quot; + ControlChars.Lf + e.Error.Message + ControlChars.Lf + &quot;Please report this error to the system administrator.&quot;)\n            Exit Sub\n        End If\n    End If\n\n    Dim dr As DialogResult = MessageBox.Show(&quot;The application has been updated. Restart? (If you do not restart now, the new version will not take effect until after you quit and launch the application again.)&quot;, &quot;Restart Application&quot;, MessageBoxButtons.OKCancel)\n    If (dr = System.Windows.Forms.DialogResult.OK) Then\n        Application.Restart()\n    End If\nEnd Sub\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes\">\r\n    \r\n            <a id=\"System_Deployment_Application_CheckForUpdateCompletedEventArgs_UpdateSizeBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">UpdateSizeBytes</div>        \r\n          </div>\r\n    \r\n            <p>Gets the size of the available update.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public long UpdateSizeBytes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> describing the size, in bytes, of the available update. If no update is available, returns 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Deployment.Application.CheckForUpdateCompletedEventArgs.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Deployment.Application.CheckForUpdateCompletedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable\">\r\n<meta name=\"APIName\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes\">\r\n<meta name=\"APILocation\" content=\"System.Deployment.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"56135f16-74a4-96c2-8f0a-ab4f32a8e408\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents detailed update information obtained through a call to .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Deployment.Application/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Deployment.Application.CheckForUpdateCompletedEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Deployment.Application.CheckForUpdateCompletedEventArgs.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Deployment.Application.CheckForUpdateCompletedEventArgs.yml","open_to_public_contributors":true,"api_name":["System.Deployment.Application.CheckForUpdateCompletedEventArgs","System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired","System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes"],"api_location":["System.Deployment.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Deployment.Application.CheckForUpdateCompletedEventArgs","System::Deployment::Application::CheckForUpdateCompletedEventArgs","System.Deployment.Application.CheckForUpdateCompletedEventArgs.AvailableVersion","System::Deployment::Application::CheckForUpdateCompletedEventArgs::AvailableVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.IsUpdateRequired","System::Deployment::Application::CheckForUpdateCompletedEventArgs::IsUpdateRequired","System.Deployment.Application.CheckForUpdateCompletedEventArgs.MinimumRequiredVersion","System::Deployment::Application::CheckForUpdateCompletedEventArgs::MinimumRequiredVersion","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateAvailable","System::Deployment::Application::CheckForUpdateCompletedEventArgs::UpdateAvailable","System.Deployment.Application.CheckForUpdateCompletedEventArgs.UpdateSizeBytes","System::Deployment::Application::CheckForUpdateCompletedEventArgs::UpdateSizeBytes"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"56135f16-74a4-96c2-8f0a-ab4f32a8e408","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Deployment.Application/CheckForUpdateCompletedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CheckForUpdateCompletedEventArgs class | Microsoft Docs","_op_ogTitle":"CheckForUpdateCompletedEventArgs class","description":"Represents detailed update information obtained through a call to .\n","toc_asset_id":"_splitted/System.Deployment.Application/toc.json","toc_rel":"_splitted/System.Deployment.Application/toc.json","source_url":"","ms.assetid":"System.Deployment.Application.CheckForUpdateCompletedEventArgs","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.deployment.application.checkforupdatecompletedeventargs","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.deployment.application.checkforupdatecompletedeventargs","fileRelativePath":"System.Deployment.Application.CheckForUpdateCompletedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}