{"content":"    \r\n    <h1 id=\"System_Collections_IList\">\r\n      <span class=\"lang-csharp\">IList</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a non-generic collection of objects that can be individually accessed by index.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IList : System.Collections.ICollection</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>IList is a descendant of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> interface and is the base interface of all non-generic lists. IList implementations fall into three categories: read-only, fixed-size, and variable-size. A read-only IList cannot be modified. A fixed-size IList does not allow the addition or removal of elements, but it allows the modification of existing elements. A variable-size IList allows the addition, removal, and modification of elements.  </p>\n<p> For the generic version of this interface, see <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">System.Collections.Generic.IList&lt;T&gt;</a>.</p>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_IsFixedSize\" data-linktype=\"self-bookmark\">IsFixedSize</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_IsReadOnly\" data-linktype=\"self-bookmark\">IsReadOnly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_Item_System_Int32_\" data-linktype=\"self-bookmark\">Item(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_Add_System_Object_\" data-linktype=\"self-bookmark\">Add(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all items from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_Contains_System_Object_\" data-linktype=\"self-bookmark\">Contains(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> contains a specific value.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_IndexOf_System_Object_\" data-linktype=\"self-bookmark\">IndexOf(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_Insert_System_Int32_System_Object_\" data-linktype=\"self-bookmark\">Insert(Int32,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Inserts an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_Remove_System_Object_\" data-linktype=\"self-bookmark\">Remove(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_IList_RemoveAt_System_Int32_\" data-linktype=\"self-bookmark\">RemoveAt(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> item at the specified index.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_IsFixedSize\">\r\n    \r\n            <a id=\"System_Collections_IList_IsFixedSize_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsFixedSize</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsFixedSize { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_IsReadOnly\">\r\n    \r\n            <a id=\"System_Collections_IList_IsReadOnly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsReadOnly</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsReadOnly { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_Item_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_IList_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the element at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object this[int index] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the element to get or set.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>The element at the specified index.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The property is set and the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.  </p>\n<p> The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_Add_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IList_Add_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Add(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Add (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to add to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_Clear\">\r\n    \r\n            <a id=\"System_Collections_IList_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all items from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Implementations of this method can vary in how they handle the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_Count_\" data-linktype=\"relative-path\">Count</a> and the capacity of a collection. Typically, the count is set to zero, and references to other objects from elements of the collection are also released. The capacity can be set to zero or a default value, or it can remain unchanged.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_Contains_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IList_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> contains a specific value.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is found in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_IndexOf_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IList_IndexOf_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IndexOf(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Determines the index of a specific item in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int IndexOf (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The index of <code>value</code> if found in the list; otherwise, -1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods on <code>item</code> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a> and <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> methods of the <code>item</code> parameter on the objects in the collection.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_Insert_System_Int32_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IList_Insert_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Insert(Int32,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Inserts an item to the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Insert (int index, object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index at which <code>value</code> should be inserted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to insert into the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a></div>\r\n                  </div>\r\n                  <p><code>value</code> is null reference in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <code>index</code> equals the number of items in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>, then <code>value</code> is appended to the end.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_Remove_System_Object_\">\r\n    \r\n            <a id=\"System_Collections_IList_Remove_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Remove(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the first occurrence of a specific object from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Remove (object value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to remove from the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table. If <code>value</code> is not found in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>, the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> remains unchanged and no exception is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_IList_RemoveAt_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_IList_RemoveAt_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoveAt(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Removes the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> item at the specified index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void RemoveAt (int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index of the item to remove.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is not a valid index in the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> is read-only.  </p>\n<p> -or-  </p>\n<p> The <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> has a fixed size.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates the implementation of the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface to create a simple list, fixed-size list. This code is part of a larger example for the <a class=\"xref\" href=\"system.collections.ilist\" data-linktype=\"relative-path\">IList</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.IList_Implementation#02\">class SimpleList : IList\n{\n    private object[] _contents = new object[8];\n    private int _count;\n\n    public SimpleList()\n    {\n        _count = 0;\n    }\n\n    // IList Members\n    public int Add(object value)\n    {\n        if (_count &lt; _contents.Length)\n        {\n            _contents[_count] = value;\n            _count++;\n\n            return (_count - 1);\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    public void Clear()\n    {\n        _count = 0;\n    }\n\n    public bool Contains(object value)\n    {\n        bool inList = false;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                inList = true;\n                break;\n            }\n        }\n        return inList;\n    }\n\n    public int IndexOf(object value)\n    {\n        int itemIndex = -1;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            if (_contents[i] == value)\n            {\n                itemIndex = i;\n                break;\n            }\n        }\n        return itemIndex;\n    }\n\n    public void Insert(int index, object value)\n    {\n        if ((_count + 1 &lt;= _contents.Length) &amp;&amp; (index &lt; Count) &amp;&amp; (index &gt;= 0))\n        {\n            _count++;\n\n            for (int i = Count - 1; i &gt; index; i--)\n            {\n                _contents[i] = _contents[i - 1];\n            }\n            _contents[index] = value;\n        }\n    }\n\n    public bool IsFixedSize\n    {\n        get\n        {\n            return true;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    public void Remove(object value)\n    {\n        RemoveAt(IndexOf(value));\n    }\n\n    public void RemoveAt(int index)\n    {\n        if ((index &gt;= 0) &amp;&amp; (index &lt; Count))\n        {\n            for (int i = index; i &lt; Count - 1; i++)\n            {\n                _contents[i] = _contents[i + 1];\n            }\n            _count--;\n        }\n    }\n\n    public object this[int index]\n    {\n        get\n        {\n            return _contents[index];\n        }\n        set\n        {\n            _contents[index] = value;\n        }\n    }\n\n    // ICollection Members\n\n    public void CopyTo(Array array, int index)\n    {\n        int j = index;\n        for (int i = 0; i &lt; Count; i++)\n        {\n            array.SetValue(_contents[i], j);\n            j++;\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return _count;\n        }\n    }\n\n    public bool IsSynchronized\n    {\n        get\n        {\n            return false;\n        }\n    }\n\n    // Return the current instance since the underlying store is not\n    // publicly available.\n    public object SyncRoot\n    {\n        get\n        {\n            return this;\n        }\n    }\n\n    // IEnumerable Members\n\n    public IEnumerator GetEnumerator()\n    {\n        // Refer to the IEnumerator documentation for an example of\n        // implementing an enumerator.\n        throw new Exception(&quot;The method or operation is not implemented.&quot;);\n    }\n\n    public void PrintContents()\n    {\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length, _count);\n        Console.Write(&quot;List contents:&quot;);\n        for (int i = 0; i &lt; Count; i++)\n        {\n            Console.Write(&quot; {0}&quot;, _contents[i]);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.IList_Implementation#02\">Public Class SimpleList\n    Implements IList\n\n    Private _contents(8) As Object\n    Private _count As Integer\n\n    Public Sub New()\n\n        _count = 0\n    End Sub\n\n    &#39; IList Members\n    Public Function Add(ByVal value As Object) As Integer Implements IList.Add\n\n        If (_count &lt; _contents.Length - 1) Then\n\n            _contents(_count) = value\n            _count = _count + 1\n\n            Return (_count - 1)\n\n        Else\n\n            Return -1\n        End If\n    End Function\n\n    Public Sub Clear() Implements IList.Clear\n        _count = 0\n    End Sub\n\n    Public Function Contains(ByVal value As Object) As Boolean Implements IList.Contains\n\n        Dim inList As Boolean = False\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                inList = True\n                Exit For\n\n            End If\n\n        Next i\n\n        Return inList\n    End Function\n\n    Public Function IndexOf(ByVal value As Object) As Integer Implements IList.IndexOf\n\n        Dim itemIndex As Integer = -1\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            If _contents(i) = value Then\n\n                itemIndex = i\n                Exit For\n\n            End If\n\n        Next i\n\n        Return itemIndex\n    End Function\n\n    Public Sub Insert(ByVal index As Integer, ByVal value As Object) Implements IList.Insert\n\n        If (_count + 1) &lt;= (_contents.Length - 1) And (index &lt; Count) And (index &gt;= 0) Then\n\n            _count = _count + 1\n\n            Dim i As Integer\n            For i = Count - 1 To index\n\n                _contents(i) = _contents(i - 1)\n            Next i\n\n            _contents(index) = value\n        End If\n    End Sub\n\n    Public ReadOnly Property IsFixedSize() As Boolean Implements IList.IsFixedSize\n        Get\n            Return True\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean Implements IList.IsReadOnly\n\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Sub Remove(ByVal value As Object) Implements IList.Remove\n        RemoveAt(IndexOf(value))\n    End Sub\n\n    Public Sub RemoveAt(ByVal index As Integer) Implements IList.RemoveAt\n\n        If index &gt;= 0 And index &lt; Count Then\n\n            Dim i As Integer\n            For i = index To Count - 1\n\n                _contents(i) = _contents(i + 1)\n            Next i\n            _count = _count - 1\n\n        End If\n    End Sub\n\n    Public Property Item(ByVal index As Integer) As Object Implements IList.Item\n\n        Get\n            Return _contents(index)\n        End Get\n\n        Set(ByVal value As Object)\n            _contents(index) = value\n        End Set\n    End Property\n\n    &#39; ICollection Members\n\n    Public Sub CopyTo(ByVal array As Array, ByVal index As Integer) Implements ICollection.CopyTo\n        Dim j As Integer = index\n        Dim i As Integer\n        For i = 0 To Count\n            array.SetValue(_contents(i), j)\n            j = j + 1\n        Next i\n    End Sub\n\n    Public ReadOnly Property Count() As Integer Implements ICollection.Count\n        Get\n            Return _count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsSynchronized() As Boolean Implements ICollection.IsSynchronized\n        Get\n            Return False\n        End Get\n    End Property\n\n    &#39; Return the current instance since the underlying store is not\n    &#39; publicly available.\n    Public ReadOnly Property SyncRoot() As Object Implements ICollection.SyncRoot\n        Get\n            Return Me\n        End Get\n    End Property\n\n    &#39; IEnumerable Members\n    Public Function GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator\n\n        &#39; Refer to the IEnumerator documentation for an example of\n        &#39; implementing an enumerator.\n        Throw New Exception(&quot;The method or operation is not implemented.&quot;)\n    End Function\n\n    Public Sub PrintContents()\n\n        Console.WriteLine(&quot;List has a capacity of {0} and currently has {1} elements.&quot;, _contents.Length - 1, _count)\n        Console.Write(&quot;List contents:&quot;)\n\n        Dim i As Integer\n        For i = 0 To Count\n\n            Console.Write(&quot; {0}&quot;, _contents(i))\n        Next i\n\n        Console.WriteLine()\n\n    End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IList.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IList.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.IndexOf\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.Insert\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.IsFixedSize\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.Item\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.Remove\">\r\n<meta name=\"APIName\" content=\"System.Collections.IList.RemoveAt\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"0603137c-133c-62a3-681d-fce6f1843e7b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a non-generic collection of objects that can be individually accessed by index.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.IList\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.IList.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.IList.yml","open_to_public_contributors":true,"api_name":["System.Collections.IList","System.Collections.IList.Add","System.Collections.IList.Clear","System.Collections.IList.Contains","System.Collections.IList.IndexOf","System.Collections.IList.Insert","System.Collections.IList.IsFixedSize","System.Collections.IList.IsReadOnly","System.Collections.IList.Item","System.Collections.IList.Remove","System.Collections.IList.RemoveAt"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.IList","System::Collections::IList","System.Collections.IList.Add","System::Collections::IList::Add","System.Collections.IList.Clear","System::Collections::IList::Clear","System.Collections.IList.Contains","System::Collections::IList::Contains","System.Collections.IList.IndexOf","System::Collections::IList::IndexOf","System.Collections.IList.Insert","System::Collections::IList::Insert","System.Collections.IList.IsFixedSize","System::Collections::IList::IsFixedSize","System.Collections.IList.IsReadOnly","System::Collections::IList::IsReadOnly","System.Collections.IList.Item","System::Collections::IList::Item","System.Collections.IList.Remove","System::Collections::IList::Remove","System.Collections.IList.RemoveAt","System::Collections::IList::RemoveAt"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"0603137c-133c-62a3-681d-fce6f1843e7b","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/IList.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IList interface | Microsoft Docs","_op_ogTitle":"IList interface","description":"Represents a non-generic collection of objects that can be individually accessed by index.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.IList","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.ilist","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.ilist","fileRelativePath":"System.Collections.IList.html"},"themesRelativePathToOutputRoot":"_themes/"}