{"content":"    \r\n    <h1 id=\"System_Speech_Recognition_ReplacementText\">\r\n      <span class=\"lang-csharp\">ReplacementText</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Contains information about a speech normalization procedure that has been performed on recognition results.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class ReplacementText</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ReplacementText</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Speech normalization is the use of special constructs or symbols to express speech in writing.  </p>\n<p> For example, suppose that this is recognized text:  </p>\n<p> â€œjuly four at twelve thirty one PM, I bought one point six kilograms of fish for fourteen dollars and six cents, at the pike place market in seattle washington nine eight one two twoâ€œ  </p>\n<p> This is the same text after normalization:  </p>\n<p> â€œJuly 4 at 12:31 PM, I bought 1.6 kg of fish for $14.06, at the pike place market in Seattle WA 98122â€œ  </p>\n<p> In this example there are five substitutions, each of which would be described by an instance of ReplacementText.  </p>\n<p> Using the ReplacementText object, an application can determine:  </p>\n<ul>\n<li><p>The location and number of words replaced by normalization. For more information, see <a class=\"xref\" href=\"system.speech.recognition.replacementtext#System_Speech_Recognition_ReplacementText_FirstWordIndex_\" data-linktype=\"relative-path\">FirstWordIndex</a> or <a class=\"xref\" href=\"system.speech.recognition.replacementtext#System_Speech_Recognition_ReplacementText_CountOfWords_\" data-linktype=\"relative-path\">CountOfWords</a>.  </p>\n</li>\n<li><p>The replaced text and its display attributes. For more information, see <a class=\"xref\" href=\"system.speech.recognition.replacementtext#System_Speech_Recognition_ReplacementText_Text_\" data-linktype=\"relative-path\">Text</a>, and  <a class=\"xref\" href=\"system.speech.recognition.replacementtext#System_Speech_Recognition_ReplacementText_DisplayAttributes_\" data-linktype=\"relative-path\">DisplayAttributes</a>.  </p>\n<p>Instances of ReplacementText are typically obtained as members of the <a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection&lt;T&gt;</a> object returned by the <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase#System_Speech_Recognition_RecognizedPhrase_ReplacementWordUnits_\" data-linktype=\"relative-path\">ReplacementWordUnits</a> property on <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a> (or classes that inherit from <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a>, such as <a class=\"xref\" href=\"system.speech.recognition.recognitionresult\" data-linktype=\"relative-path\">RecognitionResult</a>) when returned text has been normalized.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_ReplacementText_CountOfWords\" data-linktype=\"self-bookmark\">CountOfWords</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of recognized words replaced by the speech normalization procedure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_ReplacementText_DisplayAttributes\" data-linktype=\"self-bookmark\">DisplayAttributes</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets information about the leading and trailing spaces for the text replaced by the speech normalization procedure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_ReplacementText_FirstWordIndex\" data-linktype=\"self-bookmark\">FirstWordIndex</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the location of the first recognized word replaced by the speech normalization procedure.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Speech_Recognition_ReplacementText_Text\" data-linktype=\"self-bookmark\">Text</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the recognized text replaced by the speech normalization procedure.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_ReplacementText_CountOfWords\">\r\n    \r\n            <a id=\"System_Speech_Recognition_ReplacementText_CountOfWords_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CountOfWords</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of recognized words replaced by the speech normalization procedure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int CountOfWords { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns the number of recognized words replaced by the speech normalization procedure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The example below displays information in a user interface about a <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a> object returned by a recognition engine.  </p>\n<pre><code class=\"lang-c#\">internal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null &amp;&amp; label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             &quot;  Recognizer currently at:   {0} mSec<br>&quot; +  \n                             &quot;  Audio Device currently at: {1} mSec<br>&quot;,  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n\n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(&quot;  Emulated input<br>&quot;);  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               &quot;  Candidate Phrase at:       {0} mSec<br>&quot; +  \n                               &quot;  Phrase Length:             {1} mSec<br>&quot; +  \n                               &quot;  Input State Time:          {2}<br>&quot; +  \n                               &quot;  Input Format:              {3}<br>&quot;,  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n\n      label.Text += String.Format(&quot;  Confidence Level:          {0}<br>&quot;, result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            &quot;  Recognizing Grammar:       {0}<br>&quot; +  \n                            &quot;  Recognizing Rule:          {1}<br>&quot;,  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : &quot;None&quot;),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : &quot;None&quot;));  \n      }  \n\n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(&quot;  Replacement text:<br>&quot;);  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n\n          if ((rep.DisplayAttributes &amp; DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += &quot; &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += &quot;  &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           &quot;      At index {0} for {1} words. Text: \\&quot;{2}\\&quot;<br>&quot;,  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n\n        }  \n        label.Text += String.Format(&quot;<br><br>&quot;);  \n      }  \n    }  \n  }    \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_ReplacementText_DisplayAttributes\">\r\n    \r\n            <a id=\"System_Speech_Recognition_ReplacementText_DisplayAttributes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisplayAttributes</div>        \r\n          </div>\r\n    \r\n            <p>Gets information about the leading and trailing spaces for the text replaced by the speech normalization procedure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.speech.recognition.displayattributes\" data-linktype=\"relative-path\">DisplayAttributes</a></div>\r\n                  </div>\r\n                  <p>Returns a <a class=\"xref\" href=\"system.speech.recognition.displayattributes\" data-linktype=\"relative-path\">DisplayAttributes</a> object that specifies the use of white space to display text replaced by normalization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The example below displays information in a user interface about a <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a> object returned by a recognition engine.  </p>\n<pre><code class=\"lang-c#\">internal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null &amp;&amp; label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             &quot;  Recognizer currently at:   {0} mSec<br>&quot; +  \n                             &quot;  Audio Device currently at: {1} mSec<br>&quot;,  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n\n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(&quot;  Emulated input<br>&quot;);  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               &quot;  Candidate Phrase at:       {0} mSec<br>&quot; +  \n                               &quot;  Phrase Length:             {1} mSec<br>&quot; +  \n                               &quot;  Input State Time:          {2}<br>&quot; +  \n                               &quot;  Input Format:              {3}<br>&quot;,  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n\n      label.Text += String.Format(&quot;  Confidence Level:          {0}<br>&quot;, result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            &quot;  Recognizing Grammar:       {0}<br>&quot; +  \n                            &quot;  Recognizing Rule:          {1}<br>&quot;,  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : &quot;None&quot;),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : &quot;None&quot;));  \n      }  \n\n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(&quot;  Replacement text:<br>&quot;);  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n\n          if ((rep.DisplayAttributes &amp; DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += &quot; &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += &quot;  &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           &quot;      At index {0} for {1} words. Text: \\&quot;{2}\\&quot;<br>&quot;,  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n\n        }  \n        label.Text += String.Format(&quot;<br><br>&quot;);  \n      }  \n    }  \n  }    \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_ReplacementText_FirstWordIndex\">\r\n    \r\n            <a id=\"System_Speech_Recognition_ReplacementText_FirstWordIndex_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">FirstWordIndex</div>        \r\n          </div>\r\n    \r\n            <p>Gets the location of the first recognized word replaced by the speech normalization procedure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int FirstWordIndex { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>Returns the location of the first recognized word replaced by the speech normalization procedure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, information about a <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a> object returned by a recognition engine is displayed to a user interface.  </p>\n<pre><code class=\"lang-c#\">internal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null &amp;&amp; label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             &quot;  Recognizer currently at:   {0} mSec<br>&quot; +  \n                             &quot;  Audio Device currently at: {1} mSec<br>&quot;,  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n\n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(&quot;  Emulated input<br>&quot;);  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               &quot;  Candidate Phrase at:       {0} mSec<br>&quot; +  \n                               &quot;  Phrase Length:             {1} mSec<br>&quot; +  \n                               &quot;  Input State Time:          {2}<br>&quot; +  \n                               &quot;  Input Format:              {3}<br>&quot;,  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n\n      label.Text += String.Format(&quot;  Confidence Level:          {0}<br>&quot;, result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            &quot;  Recognizing Grammar:       {0}<br>&quot; +  \n                            &quot;  Recognizing Rule:          {1}<br>&quot;,  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : &quot;None&quot;),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : &quot;None&quot;));  \n      }  \n\n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(&quot;  Replacement text:<br>&quot;);  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n\n          if ((rep.DisplayAttributes &amp; DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += &quot; &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += &quot;  &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           &quot;      At index {0} for {1} words. Text: \\&quot;{2}\\&quot;<br>&quot;,  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n\n        }  \n        label.Text += String.Format(&quot;<br><br>&quot;);  \n      }  \n    }  \n  }    \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Speech_Recognition_ReplacementText_Text\">\r\n    \r\n            <a id=\"System_Speech_Recognition_ReplacementText_Text_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Text</div>        \r\n          </div>\r\n    \r\n            <p>Gets the recognized text replaced by the speech normalization procedure.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string Text { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>Returns the recognized text replaced by the speech normalization procedure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The example below displays information in a user interface about a <a class=\"xref\" href=\"system.speech.recognition.recognizedphrase\" data-linktype=\"relative-path\">RecognizedPhrase</a> object returned by a recognition engine.  </p>\n<pre><code class=\"lang-c#\">internal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null &amp;&amp; label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             &quot;  Recognizer currently at:   {0} mSec<br>&quot; +  \n                             &quot;  Audio Device currently at: {1} mSec<br>&quot;,  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n\n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(&quot;  Emulated input<br>&quot;);  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               &quot;  Candidate Phrase at:       {0} mSec<br>&quot; +  \n                               &quot;  Phrase Length:             {1} mSec<br>&quot; +  \n                               &quot;  Input State Time:          {2}<br>&quot; +  \n                               &quot;  Input Format:              {3}<br>&quot;,  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n\n      label.Text += String.Format(&quot;  Confidence Level:          {0}<br>&quot;, result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            &quot;  Recognizing Grammar:       {0}<br>&quot; +  \n                            &quot;  Recognizing Rule:          {1}<br>&quot;,  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : &quot;None&quot;),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : &quot;None&quot;));  \n      }  \n\n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(&quot;  Replacement text:<br>&quot;);  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n\n          if ((rep.DisplayAttributes &amp; DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += &quot; &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += &quot;  &quot;;  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes &amp; DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           &quot;      At index {0} for {1} words. Text: \\&quot;{2}\\&quot;<br>&quot;,  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n\n        }  \n        label.Text += String.Format(&quot;<br><br>&quot;);  \n      }  \n    }  \n  }    \n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Speech.Recognition.ReplacementText.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Speech.Recognition.ReplacementText.yml\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.ReplacementText\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.ReplacementText.CountOfWords\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.ReplacementText.DisplayAttributes\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.ReplacementText.FirstWordIndex\">\r\n<meta name=\"APIName\" content=\"System.Speech.Recognition.ReplacementText.Text\">\r\n<meta name=\"APILocation\" content=\"System.Speech.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"b61ab4f6-8499-ce73-e0cd-2ef937e25a71\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Speech.Recognition\\ReplacementText.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains information about a speech normalization procedure that has been performed on recognition results.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Speech.Recognition/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Speech.Recognition.ReplacementText\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Speech.Recognition.ReplacementText.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Speech.Recognition.ReplacementText.yml","open_to_public_contributors":true,"api_name":["System.Speech.Recognition.ReplacementText","System.Speech.Recognition.ReplacementText.CountOfWords","System.Speech.Recognition.ReplacementText.DisplayAttributes","System.Speech.Recognition.ReplacementText.FirstWordIndex","System.Speech.Recognition.ReplacementText.Text"],"api_location":["System.Speech.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Speech.Recognition.ReplacementText","System::Speech::Recognition::ReplacementText","System.Speech.Recognition.ReplacementText.CountOfWords","System::Speech::Recognition::ReplacementText::CountOfWords","System.Speech.Recognition.ReplacementText.DisplayAttributes","System::Speech::Recognition::ReplacementText::DisplayAttributes","System.Speech.Recognition.ReplacementText.FirstWordIndex","System::Speech::Recognition::ReplacementText::FirstWordIndex","System.Speech.Recognition.ReplacementText.Text","System::Speech::Recognition::ReplacementText::Text"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"b61ab4f6-8499-ce73-e0cd-2ef937e25a71","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Speech.Recognition\\ReplacementText.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Speech.Recognition/ReplacementText.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ReplacementText class | Microsoft Docs","_op_ogTitle":"ReplacementText class","description":"Contains information about a speech normalization procedure that has been performed on recognition results.\n","toc_asset_id":"_splitted/System.Speech.Recognition/toc.json","toc_rel":"_splitted/System.Speech.Recognition/toc.json","source_url":"","ms.assetid":"System.Speech.Recognition.ReplacementText","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.speech.recognition.replacementtext","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.speech.recognition.replacementtext","fileRelativePath":"System.Speech.Recognition.ReplacementText.html"},"themesRelativePathToOutputRoot":"_themes/"}