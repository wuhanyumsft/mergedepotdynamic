{"content":"    \r\n    <h1 id=\"System_Collections_Generic_Queue_1\">\r\n      <span class=\"lang-csharp\">Queue&lt;T&gt;</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents a first-in, first-out collection of objects.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;Count = {Count}&quot;)]\n[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))]\n[System.Runtime.InteropServices.ComVisible(false)]\npublic class Queue&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection</code></pre>\r\n    \r\n    \r\n    \t<h2>Type Parameters</h2>\r\n    \r\n    \t<table class=\"nameValue\">\r\n    \t\t<tr>\r\n    \t\t<td>\r\n    \t\tT\r\n    \t\t</td>\r\n    \t\t<td>\r\n    \t\t<p>Specifies the type of elements in the queue.</p>\n\r\n    \t\t</td>\r\n    \t\t</tr>\r\n    \t</table>\r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Queue&lt;T&gt;</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>This class implements a generic queue as a circular array. Objects stored in a Queue(T) are inserted at one end and removed from the other. Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use Queue(T) if you need to access the information in the same order that it is stored in the collection. Use <a class=\"xref\" href=\"system.collections.generic.stack-1\" data-linktype=\"relative-path\">Stack&lt;T&gt;</a> if you need to access the information in reverse order. Use <a class=\"xref\" href=\"system.collections.concurrent.concurrentqueue-1\" data-linktype=\"relative-path\">ConcurrentQueue&lt;T&gt;</a> or <a class=\"xref\" href=\"system.collections.concurrent.concurrentstack-1\" data-linktype=\"relative-path\">ConcurrentStack&lt;T&gt;</a> if you need to access the collection from multiple threads concurrently.  </p>\n<p> Three main operations can be performed on a Queue(T) and its elements:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> adds an element to the end of the Queue(T).  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> removes the oldest element from the start of the Queue(T).  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> peek returns the oldest element that is at the start of the Queue(T) but does not remove it from the Queue(T).  </p>\n<p>The capacity of a Queue(T) is the number of elements the Queue(T) can hold. As elements are added to a Queue(T), the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a>.  </p>\n<p>Queue(T) accepts <code>null</code> as a valid value for reference types and allows duplicate elements.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1__ctor\" data-linktype=\"self-bookmark\">Queue&lt;T&gt;()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> class that is empty and has the default initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1__ctor_System_Collections_Generic_IEnumerable__0__\" data-linktype=\"self-bookmark\">Queue&lt;T&gt;(IEnumerable&lt;T&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1__ctor_System_Int32_\" data-linktype=\"self-bookmark\">Queue&lt;T&gt;(Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> class that is empty and has the specified initial capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_Clear\" data-linktype=\"self-bookmark\">Clear()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes all objects from the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_Contains__0_\" data-linktype=\"self-bookmark\">Contains(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Determines whether an element is in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_CopyTo__0___System_Int32_\" data-linktype=\"self-bookmark\">CopyTo(T[],Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> elements to an existing one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified array index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_Dequeue\" data-linktype=\"self-bookmark\">Dequeue()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Removes and returns the object at the beginning of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_Enqueue__0_\" data-linktype=\"self-bookmark\">Enqueue(T)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Adds an object to the end of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_Peek\" data-linktype=\"self-bookmark\">Peek()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the object at the beginning of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> without removing it.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_ToArray\" data-linktype=\"self-bookmark\">ToArray()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> elements to a new array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_TrimExcess\" data-linktype=\"self-bookmark\">TrimExcess()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the capacity to the actual number of elements in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>, if that number is less than 90 percent of current capacity.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable&lt;T&gt;.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_Generic_Queue_1_System_Collections_IEnumerable_GetEnumerator\" data-linktype=\"self-bookmark\">IEnumerable.GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1__ctor\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue&lt;T&gt;()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> class that is empty and has the default initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a>.  </p>\n<p> This constructor is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates this constructor and several other methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class. The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1__ctor_System_Collections_Generic_IEnumerable__0__\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue&lt;T&gt;(IEnumerable&lt;T&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>collection</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable<t></t></a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The collection whose elements are copied to the new <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>collection</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a>.  </p>\n<p> The elements are copied onto the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> in the same order they are read by the <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> of the collection.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is the number of elements in <code>collection</code>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates this constructor and several other methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class. The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the Queue(T) constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The Queue(T) constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1__ctor_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Queue&lt;T&gt;(Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> class that is empty and has the specified initial capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Queue (int capacity);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>capacity</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The initial number of elements that the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> can contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>capacity</code> is less than zero.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> can hold. As elements are added to a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>, the capacity is automatically increased as required by reallocating the internal array.  </p>\n<p> If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> The capacity can be decreased by calling <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a>.  </p>\n<p> This constructor is an O(<code>n</code>) operation, where <code>n</code> is <code>capacity</code>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_Count\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The capacity of a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> is the number of elements that the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> can store. Count is the number of elements that are actually in the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several properties and methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the Count property.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the Count property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_Clear\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_Clear_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Clear()</div>        \r\n          </div>\r\n    \r\n            <p>Removes all objects from the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Clear ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p><a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> is set to zero, and references to other objects from elements of the collection are also released.  </p>\n<p> The capacity remains unchanged. To reset the capacity of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>, call <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_TrimExcess_\" data-linktype=\"relative-path\">TrimExcess</a>. Trimming an empty <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> to the default capacity.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the Clear method.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the Clear method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_Contains__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(T)</div>        \r\n          </div>\r\n    \r\n            <p>Determines whether an element is in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>item</code> is found in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method determines equality using the default equality comparer <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1#System_Collections_Generic_EqualityComparer_1_Default_\" data-linktype=\"relative-path\">Default</a> for <code>T</code>, the type of values in the queue.  </p>\n<p> This method performs a linear search; therefore, this method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the Contains method.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The Contains method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_CopyTo__0___System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CopyTo(T[],Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> elements to an existing one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified array index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void CopyTo (T[] array, int arrayIndex);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <span class=\"xref\">stem.Collections.Generic.Queue`1</span>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>arrayIndex</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>arrayIndex</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The number of elements in the source <span class=\"xref\">stem.Collections.Generic.Queue`1</span> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The elements are copied to the <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> in the same order in which the enumerator iterates through the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_Dequeue\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_Dequeue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dequeue()</div>        \r\n          </div>\r\n    \r\n            <p>Removes and returns the object at the beginning of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T Dequeue ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The object that is removed from the beginning of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.Queue`1</span> is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method, but <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> does not modify the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> If type <code>T</code> is a reference type, <code>null</code> can be added to the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> as a value.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the Dequeue method.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The Dequeue method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the Dequeue method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_Enqueue__0_\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_Enqueue_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Enqueue(T)</div>        \r\n          </div>\r\n    \r\n            <p>Adds an object to the end of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Enqueue (T item);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>item</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to add to the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>. The value can be <code>null</code> for reference types.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> already equals the capacity, the capacity of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the Enqueue method.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the Enqueue method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.Generic.Queue&lt;T&gt;.Enumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator\" data-linktype=\"relative-path\">Queue<t>+Enumerator</t></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.Queue`1.Enumerator</span> for the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.queue-1.enumerator#System_Collections_Generic_Queue_1_Enumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates that the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class is enumerable. The <code>foreach</code> statement (<code>For Each</code> in Visual Basic, <code>for each</code> in C++) is used to enumerate the queue.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_Peek\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_Peek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Peek()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the object at the beginning of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> without removing it.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T Peek ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T</span></div>\r\n                  </div>\r\n                  <p>The object at the beginning of the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Collections.Generic.Queue`1</span> is empty.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is similar to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method, but Peek does not modify the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a>.  </p>\n<p> If type <code>T</code> is a reference type, <code>null</code> can be added to the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> as a value.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the Peek method.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The Peek method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_ToArray_\" data-linktype=\"relative-path\">ToArray</a> method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_ToArray\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_ToArray_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToArray()</div>        \r\n          </div>\r\n    \r\n            <p>Copies the <span class=\"xref\">stem.Collections.Generic.Queue`1</span> elements to a new array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public T[] ToArray ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><span class=\"xref\">T[]</span>[]</div>\r\n                  </div>\r\n                  <p>A new array containing elements copied from the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> to its end.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates several methods of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> generic class, including the ToArray method.  </p>\n<p> The code example creates a queue of strings with default capacity and uses the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Enqueue_\" data-linktype=\"relative-path\">Enqueue</a> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue the first string. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Peek_\" data-linktype=\"relative-path\">Peek</a> method is used to look at the next item in the queue, and then the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Dequeue_\" data-linktype=\"relative-path\">Dequeue</a> method is used to dequeue it.  </p>\n<p> The ToArray method is used to create an array and copy the queue elements to it, then the array is passed to the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor that takes <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, creating a copy of the queue. The elements of the copy are displayed.  </p>\n<p> An array twice the size of the queue is created, and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method is used to copy the array elements beginning at the middle of the array. The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1__ctor_\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  </p>\n<p> The <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method is used to show that the string &quot;four&quot; is in the first copy of the queue, after which the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method clears the copy and the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a> property shows that the queue is empty.  </p>\n<pre><code class=\"lang-vb\" name=\"Generic.Queue#1\">Imports System\nImports System.Collections.Generic\n\nModule Example\n\n    Sub Main\n\n        Dim numbers As New Queue(Of String)\n        numbers.Enqueue(&quot;one&quot;)\n        numbers.Enqueue(&quot;two&quot;)\n        numbers.Enqueue(&quot;three&quot;)\n        numbers.Enqueue(&quot;four&quot;)\n        numbers.Enqueue(&quot;five&quot;)\n\n        &#39; A queue can be enumerated without disturbing its contents.\n        For Each number As String In numbers\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, _\n            numbers.Peek())    \n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue())\n\n        &#39; Create a copy of the queue, using the ToArray method and the\n        &#39; constructor that accepts an IEnumerable(Of T).\n        Dim queueCopy As New Queue(Of String)(numbers.ToArray())\n\n        Console.WriteLine(vbLf &amp; &quot;Contents of the first copy:&quot;)\n        For Each number As String In queueCopy\n            Console.WriteLine(number)\n        Next\n        \n        &#39; Create an array twice the size of the queue, compensating\n        &#39; for the fact that Visual Basic allocates an extra array \n        &#39; element. Copy the elements of the queue, starting at the\n        &#39; middle of the array. \n        Dim array2((numbers.Count * 2) - 1) As String\n        numbers.CopyTo(array2, numbers.Count)\n        \n        &#39; Create a second queue, using the constructor that accepts an\n        &#39; IEnumerable(Of T).\n        Dim queueCopy2 As New Queue(Of String)(array2)\n\n        Console.WriteLine(vbLf &amp; _\n            &quot;Contents of the second copy, with duplicates and nulls:&quot;)\n        For Each number As String In queueCopy2\n            Console.WriteLine(number)\n        Next\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Contains(&quot;&quot;four&quot;&quot;) = {0}&quot;, _\n            queueCopy.Contains(&quot;four&quot;))\n\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Clear()&quot;)\n        queueCopy.Clear()\n        Console.WriteLine(vbLf &amp; &quot;queueCopy.Count = {0}&quot;, _\n            queueCopy.Count)\n    End Sub\nEnd Module\n\n&#39; This code example produces the following output:\n&#39;\n&#39;one\n&#39;two\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Dequeuing &#39;one&#39;\n&#39;Peek at next item to dequeue: two\n&#39;\n&#39;Dequeuing &#39;two&#39;\n&#39;\n&#39;Contents of the copy:\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;Contents of the second copy, with duplicates and nulls:\n&#39;\n&#39;\n&#39;\n&#39;three\n&#39;four\n&#39;five\n&#39;\n&#39;queueCopy.Contains(&quot;four&quot;) = True\n&#39;\n&#39;queueCopy.Clear()\n&#39;\n&#39;queueCopy.Count = 0\n</code></pre><pre><code class=\"lang-cs\" name=\"Generic.Queue#1\">using System;\nusing System.Collections.Generic;\n\nclass Example\n{\n    public static void Main()\n    {\n        Queue&lt;string&gt; numbers = new Queue&lt;string&gt;();\n        numbers.Enqueue(&quot;one&quot;);\n        numbers.Enqueue(&quot;two&quot;);\n        numbers.Enqueue(&quot;three&quot;);\n        numbers.Enqueue(&quot;four&quot;);\n        numbers.Enqueue(&quot;five&quot;);\n\n        // A queue can be enumerated without disturbing its contents.\n        foreach( string number in numbers )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n        Console.WriteLine(&quot;Peek at next item to dequeue: {0}&quot;, \n            numbers.Peek());\n        Console.WriteLine(&quot;Dequeuing &#39;{0}&#39;&quot;, numbers.Dequeue());\n\n        // Create a copy of the queue, using the ToArray method and the\n        // constructor that accepts an IEnumerable&lt;T&gt;.\n        Queue&lt;string&gt; queueCopy = new Queue&lt;string&gt;(numbers.ToArray());\n\n        Console.WriteLine(&quot;<br>Contents of the first copy:&quot;);\n        foreach( string number in queueCopy )\n        {\n            Console.WriteLine(number);\n        }\n        \n        // Create an array twice the size of the queue and copy the\n        // elements of the queue, starting at the middle of the \n        // array. \n        string[] array2 = new string[numbers.Count * 2];\n        numbers.CopyTo(array2, numbers.Count);\n        \n        // Create a second queue, using the constructor that accepts an\n        // IEnumerable(Of T).\n        Queue&lt;string&gt; queueCopy2 = new Queue&lt;string&gt;(array2);\n\n        Console.WriteLine(&quot;<br>Contents of the second copy, with duplicates and nulls:&quot;);\n        foreach( string number in queueCopy2 )\n        {\n            Console.WriteLine(number);\n        }\n\n        Console.WriteLine(&quot;<br>queueCopy.Contains(\\&quot;four\\&quot;) = {0}&quot;, \n            queueCopy.Contains(&quot;four&quot;));\n\n        Console.WriteLine(&quot;<br>queueCopy.Clear()&quot;);\n        queueCopy.Clear();\n        Console.WriteLine(&quot;<br>queueCopy.Count = {0}&quot;, queueCopy.Count);\n    }\n}\n\n/* This code example produces the following output:\n\none\ntwo\nthree\nfour\nfive\n\nDequeuing &#39;one&#39;\nPeek at next item to dequeue: two\nDequeuing &#39;two&#39;\n\nContents of the copy:\nthree\nfour\nfive\n\nContents of the second copy, with duplicates and nulls:\n\n\n\nthree\nfour\nfive\n\nqueueCopy.Contains(&quot;four&quot;) = True\n\nqueueCopy.Clear()\n\nqueueCopy.Count = 0\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_TrimExcess\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_TrimExcess_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TrimExcess()</div>        \r\n          </div>\r\n    \r\n            <p>Sets the capacity to the actual number of elements in the <span class=\"xref\">stem.Collections.Generic.Queue`1</span>, if that number is less than 90 percent of current capacity.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void TrimExcess ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method can be used to minimize a collection&#39;s memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> can be considerable, however, so the TrimExcess method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.  </p>\n<p> To reset a <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> to its initial state, call the <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Clear_\" data-linktype=\"relative-path\">Clear</a> method before calling TrimExcess method. Trimming an empty <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> sets the capacity of the <a class=\"xref\" href=\"system.collections.generic.queue-1\" data-linktype=\"relative-path\">Queue&lt;T&gt;</a> to the default capacity.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_System_Collections_Generic_IEnumerable_T__GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_System_Collections_Generic_IEnumerable_T__GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable&lt;T&gt;.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator<t></t></a></div>\r\n                  </div>\r\n                  <p>An <span class=\"xref\">stem.Collections.Generic.IEnumerator`1</span> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. At this position, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. You cannot set <a class=\"xref\" href=\"system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again; you must create a new enumerator instance instead.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the elements of the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> <code>array</code> does not have zero-based indexing.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  </p>\n<p> -or-  </p>\n<p> The type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <div class=\"NOTE\"><h5>Note</h5><p> If the type of the source <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> cannot be cast automatically to the type of the destination <code>array</code>, the non-generic implementations of <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> throw <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>, whereas the generic implementations throw <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>.  </p>\n</div>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.generic.queue-1#System_Collections_Generic_Queue_1_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a> is synchronized (thread safe); otherwise, <code>false</code>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.Queue`1</span>, this property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> returns an object, which can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>.  In the default implementation of <span class=\"xref\">stem.Collections.Generic.Queue`1</span>, this property always returns the current instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> returns an object, which can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property for C#, C++, and Visual Basic.  </p>\n<pre><code class=\"lang-c#\">ICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}\n</code></pre><pre><code class=\"lang-vb#\">Dim ic As IColletion = ...  \nSyncLock ic.SyncRoot  \n   &#39; Access the collection.  \nEnd SyncLock\n</code></pre><pre><code class=\"lang-cpp#\">ICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic-&gt;SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic-&gt;SyncRoot);  \n}\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_Generic_Queue_1_System_Collections_IEnumerable_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_Generic_Queue_1_System_Collections_IEnumerable_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IEnumerable.GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through a collection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that can be used to iterate through the collection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in C++, <code>For Each</code> in Visual Basic) hides the complexity of the enumerators. Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> Default implementations of collections in <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> are not synchronized.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.Queue-1.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.Queue-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.Dequeue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.Enqueue\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.Peek\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.IEnumerable&lt;T&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.ICollection.SyncRoot\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.ToArray\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.Queue&lt;T&gt;.TrimExcess\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"248a1e1a-a520-c554-9638-5e6935e396bf\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Generic\\Queue`1.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a first-in, first-out collection of objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections.Generic/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.Queue`1\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.Generic.Queue-1.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.Generic.Queue-1.yml","open_to_public_contributors":true,"api_name":["System.Collections.Generic.Queue<T>","System.Collections.Generic.Queue<T>..ctor","System.Collections.Generic.Queue<T>.Clear","System.Collections.Generic.Queue<T>.Contains","System.Collections.Generic.Queue<T>.CopyTo","System.Collections.Generic.Queue<T>.Count","System.Collections.Generic.Queue<T>.Dequeue","System.Collections.Generic.Queue<T>.Enqueue","System.Collections.Generic.Queue<T>.GetEnumerator","System.Collections.Generic.Queue<T>.Peek","System.Collections.Generic.Queue<T>.IEnumerable<T>.GetEnumerator","System.Collections.Generic.Queue<T>.ICollection.CopyTo","System.Collections.Generic.Queue<T>.ICollection.IsSynchronized","System.Collections.Generic.Queue<T>.ICollection.SyncRoot","System.Collections.Generic.Queue<T>.IEnumerable.GetEnumerator","System.Collections.Generic.Queue<T>.ToArray","System.Collections.Generic.Queue<T>.TrimExcess"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.Queue`1","System::Collections::Generic::Queue`1","System.Collections.Generic.Queue`1.#ctor","System::Collections::Generic::Queue`1::#ctor","System.Collections.Generic.Queue`1.Clear","System::Collections::Generic::Queue`1::Clear","System.Collections.Generic.Queue`1.Contains","System::Collections::Generic::Queue`1::Contains","System.Collections.Generic.Queue`1.CopyTo","System::Collections::Generic::Queue`1::CopyTo","System.Collections.Generic.Queue`1.Count","System::Collections::Generic::Queue`1::Count","System.Collections.Generic.Queue`1.Dequeue","System::Collections::Generic::Queue`1::Dequeue","System.Collections.Generic.Queue`1.Enqueue","System::Collections::Generic::Queue`1::Enqueue","System.Collections.Generic.Queue`1.GetEnumerator","System::Collections::Generic::Queue`1::GetEnumerator","System.Collections.Generic.Queue`1.Peek","System::Collections::Generic::Queue`1::Peek","System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator","System::Collections::Generic::Queue`1::System#Collections#Generic#IEnumerable{T}#GetEnumerator","System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo","System::Collections::Generic::Queue`1::System#Collections#ICollection#CopyTo","System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized","System::Collections::Generic::Queue`1::System#Collections#ICollection#IsSynchronized","System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot","System::Collections::Generic::Queue`1::System#Collections#ICollection#SyncRoot","System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator","System::Collections::Generic::Queue`1::System#Collections#IEnumerable#GetEnumerator","System.Collections.Generic.Queue`1.ToArray","System::Collections::Generic::Queue`1::ToArray","System.Collections.Generic.Queue`1.TrimExcess","System::Collections::Generic::Queue`1::TrimExcess"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"248a1e1a-a520-c554-9638-5e6935e396bf","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections.Generic\\Queue`1.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections.Generic/Queue`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Queue<T> class | Microsoft Docs","_op_ogTitle":"Queue<T> class","description":"Represents a first-in, first-out collection of objects.\n","toc_asset_id":"_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.Queue`1","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.queue-1","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.generic.queue-1","fileRelativePath":"System.Collections.Generic.Queue-1.html"},"themesRelativePathToOutputRoot":"_themes/"}