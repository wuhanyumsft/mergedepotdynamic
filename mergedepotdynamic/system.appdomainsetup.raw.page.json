{"content":"    \r\n    <h1 id=\"System_AppDomainSetup\">\r\n      <span class=\"lang-csharp\">AppDomainSetup</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Represents assembly binding information that can be added to an instance of <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class AppDomainSetup : IAppDomainSetup</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">AppDomainSetup</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Changing the properties of an AppDomainSetup instance does not affect any existing <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>. It can affect only the creation of a new <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>, when the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> method is called with the AppDomainSetup instance as a parameter.  </p>\n<p> This class implements the <a class=\"xref\" href=\"system.iappdomainsetup\" data-linktype=\"relative-path\">IAppDomainSetup</a> interface.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The default value for the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_DisallowCodeDownload_\" data-linktype=\"relative-path\">DisallowCodeDownload</a> property is false. This setting is unsafe for services. To help prevent services from downloading partially trusted code, set this property to true</p>\n</div>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup__ctor\" data-linktype=\"self-bookmark\">AppDomainSetup()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup__ctor_System_ActivationContext_\" data-linktype=\"self-bookmark\">AppDomainSetup(ActivationContext)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class with the specified activation context to use for manifest-based activation of an application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup__ctor_System_Runtime_Hosting_ActivationArguments_\" data-linktype=\"self-bookmark\">AppDomainSetup(ActivationArguments)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class with the specified activation arguments required for manifest-based activation of an application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ActivationArguments\" data-linktype=\"self-bookmark\">ActivationArguments</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets data about the activation of an application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_AppDomainInitializer\" data-linktype=\"self-bookmark\">AppDomainInitializer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate, which represents a callback method that is invoked when the application domain is initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_AppDomainInitializerArguments\" data-linktype=\"self-bookmark\">AppDomainInitializerArguments</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the arguments passed to the callback method represented by the <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate. The callback method is invoked when the application domain is initialized.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_AppDomainManagerAssembly\" data-linktype=\"self-bookmark\">AppDomainManagerAssembly</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_AppDomainManagerType\" data-linktype=\"self-bookmark\">AppDomainManagerType</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the full name of the type that provides the application domain manager for application domains created using this <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ApplicationBase\" data-linktype=\"self-bookmark\">ApplicationBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the directory containing the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ApplicationName\" data-linktype=\"self-bookmark\">ApplicationName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the application.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ApplicationTrust\" data-linktype=\"self-bookmark\">ApplicationTrust</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets an object containing security and trust information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_CachePath\" data-linktype=\"self-bookmark\">CachePath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of an area specific to the application where files are shadow copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ConfigurationFile\" data-linktype=\"self-bookmark\">ConfigurationFile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the name of the configuration file for an application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_DisallowApplicationBaseProbing\" data-linktype=\"self-bookmark\">DisallowApplicationBaseProbing</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies whether the application base path and private binary path are probed when searching for assemblies to load.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_DisallowBindingRedirects\" data-linktype=\"self-bookmark\">DisallowBindingRedirects</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether an application domain allows assembly binding redirection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_DisallowCodeDownload\" data-linktype=\"self-bookmark\">DisallowCodeDownload</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_DisallowPublisherPolicy\" data-linktype=\"self-bookmark\">DisallowPublisherPolicy</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether the <a href=\"../Topic/%3CpublisherPolicy%3E%20Element.md\" data-linktype=\"relative-path\"><publisherpolicy></publisherpolicy></a> section of the configuration file is applied to an application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_DynamicBase\" data-linktype=\"self-bookmark\">DynamicBase</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the base directory where the directory for dynamically generated files is located.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_LicenseFile\" data-linktype=\"self-bookmark\">LicenseFile</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the location of the license file associated with this domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_LoaderOptimization\" data-linktype=\"self-bookmark\">LoaderOptimization</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Specifies the optimization policy used to load an executable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_PartialTrustVisibleAssemblies\" data-linktype=\"self-bookmark\">PartialTrustVisibleAssemblies</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a list of assemblies marked with the <a class=\"xref\" href=\"system.security.partialtrustvisibilitylevel\" data-linktype=\"relative-path\">PartialTrustVisibilityLevel</a> flag that are made visible to partial-trust code running in a sandboxed application domain.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_PrivateBinPath\" data-linktype=\"self-bookmark\">PrivateBinPath</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the list of directories under the application base directory that are probed for private assemblies.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_PrivateBinPathProbe\" data-linktype=\"self-bookmark\">PrivateBinPathProbe</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a string value that includes or excludes <span class=\"xref\">stem.AppDomainSetup.ApplicationBase*</span> from the search path for the application, and searches only <span class=\"xref\">stem.AppDomainSetup.PrivateBinPath*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_SandboxInterop\" data-linktype=\"self-bookmark\">SandboxInterop</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <code>QueryInterface</code> is performed on each call.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ShadowCopyDirectories\" data-linktype=\"self-bookmark\">ShadowCopyDirectories</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the names of the directories containing assemblies to be shadow copied.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_ShadowCopyFiles\" data-linktype=\"self-bookmark\">ShadowCopyFiles</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a string that indicates whether shadow copying is turned on or off.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_TargetFrameworkName\" data-linktype=\"self-bookmark\">TargetFrameworkName</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <span class=\"xref\">stem.Runtime.Versioning.FrameworkName.#ctor(System.String)</span> constructor.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_GetConfigurationBytes\" data-linktype=\"self-bookmark\">GetConfigurationBytes()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the XML configuration information set by the <span class=\"xref\">stem.AppDomainSetup.SetConfigurationBytes*</span> method, which overrides the application&#39;s XML configuration information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_SetCompatibilitySwitches_System_Collections_Generic_IEnumerable_System_String__\" data-linktype=\"self-bookmark\">SetCompatibilitySwitches(IEnumerable&lt;String&gt;)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_SetConfigurationBytes_System_Byte___\" data-linktype=\"self-bookmark\">SetConfigurationBytes(Byte[])</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides XML configuration information for the application domain, replacing the application&#39;s XML configuration information.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_AppDomainSetup_SetNativeFunction_System_String_System_Int32_System_IntPtr_\" data-linktype=\"self-bookmark\">SetNativeFunction(String,Int32,IntPtr)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Provides the common language runtime with an alternate implementation of a string comparison function.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup__ctor\">\r\n    \r\n            <a id=\"System_AppDomainSetup__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainSetup()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AppDomainSetup ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup__ctor_System_ActivationContext_\">\r\n    \r\n            <a id=\"System_AppDomainSetup__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainSetup(ActivationContext)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class with the specified activation context to use for manifest-based activation of an application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AppDomainSetup (ActivationContext activationContext);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationContext</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.activationcontext\" data-linktype=\"relative-path\">ActivationContext</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The activation context to be used for an application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>activationContext</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.activationcontext\" data-linktype=\"relative-path\">ActivationContext</a> object specified for <code>activationContext</code> is used to generate an <a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a> object containing information required to activate a new application domain. This <a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a> object can be accessed by using the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ActivationArguments_\" data-linktype=\"relative-path\">ActivationArguments</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup__ctor_System_Runtime_Hosting_ActivationArguments_\">\r\n    \r\n            <a id=\"System_AppDomainSetup__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainSetup(ActivationArguments)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> class with the specified activation arguments required for manifest-based activation of an application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AppDomainSetup (System.Runtime.Hosting.ActivationArguments activationArguments);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>activationArguments</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An object that specifies information required for the manifest-based activation of a new application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>activationArguments</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The object specified for <code>activationArguments</code> can be accessed by using the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ActivationArguments_\" data-linktype=\"relative-path\">ActivationArguments</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ActivationArguments\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ActivationArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ActivationArguments</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets data about the activation of an application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Runtime.Hosting.ActivationArguments ActivationArguments { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a></div>\r\n                  </div>\r\n                  <p>An object that contains data about the activation of an application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is set to an <a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a> object whose application identity does not match the application identity of the <a class=\"xref\" href=\"system.security.policy.applicationtrust\" data-linktype=\"relative-path\">ApplicationTrust</a> object returned by the <span class=\"xref\">stem.AppDomainSetup.ApplicationTrust*</span> property. No exception is thrown if the <span class=\"xref\">stem.AppDomainSetup.ApplicationTrust*</span> property is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>No exception is thrown if this property is set to <code>null</code>.  </p>\n<p> The information provided by the <a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a> object supports manifest-based activation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_AppDomainInitializer\">\r\n    \r\n            <a id=\"System_AppDomainSetup_AppDomainInitializer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainInitializer</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate, which represents a callback method that is invoked when the application domain is initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public AppDomainInitializer AppDomainInitializer { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a></div>\r\n                  </div>\r\n                  <p>A delegate that represents a callback method that is invoked when the application domain is initialized.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To pass information to the callback method, assign an array of strings to the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainInitializerArguments_\" data-linktype=\"relative-path\">AppDomainInitializerArguments</a> property. The array is passed to the callback method each time an <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> is initialized.  </p>\n<p> The callback method is executed in the context of the newly created application domain.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a child application domain named <code>ChildDomain</code>, using an <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object and evidence from the default application domain. The AppDomainInitializer property is set to the callback method <code>AppDomainInit</code>, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainInitializerArguments_\" data-linktype=\"relative-path\">AppDomainInitializerArguments</a> property. When the child domain is created, the callback method simply prints the strings.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomainInitializer#1\">using namespace System;\nusing namespace System::Security::Policy;\n\npublic ref class AppDomainInitializerExample\n{\n    // The callback method invoked when the child application domain is\n    // initialized. The method simply displays the arguments that were\n    // passed to it.\n    //\npublic:\n    static void AppDomainInit(array&lt;String^&gt;^ args)\n    {\n        Console::WriteLine(&quot;AppDomain \\&quot;{0}\\&quot; is initialized with these &quot; +\n            &quot;arguments:&quot;, AppDomain::CurrentDomain-&gt;FriendlyName);\n        for each (String^ arg in args)\n        {\n            Console::WriteLine(&quot;    {0}&quot;, arg);\n        }\n    }\n};\n\nint main()\n{\n    // Get a reference to the default application domain.\n    //\n    AppDomain^ currentDomain = AppDomain::CurrentDomain;\n    \n    // Create the AppDomainSetup that will be used to set up the child\n    // AppDomain.\n    AppDomainSetup^ domainSetup = gcnew AppDomainSetup();\n\n    // Use the evidence from the default application domain to\n    // create evidence for the child application domain.\n    //\n    Evidence^ evidence = gcnew Evidence(currentDomain-&gt;Evidence);\n\n    // Create an AppDomainInitializer delegate that represents the\n    // callback method, AppDomainInit. Assign this delegate to the\n    // AppDomainInitializer property of the AppDomainSetup object.\n    //\n    AppDomainInitializer^ domainInitializer =\n        gcnew AppDomainInitializer(AppDomainInitializerExample::AppDomainInit);\n    domainSetup-&gt;AppDomainInitializer = domainInitializer;\n\n    // Create an array of strings to pass as arguments to the callback\n    // method. Assign the array to the AppDomainInitializerArguments\n    // property.\n    array&lt;String^&gt;^ initialArguments = {&quot;String1&quot;, &quot;String2&quot;};\n    domainSetup-&gt;AppDomainInitializerArguments = initialArguments;\n\n    // Create a child application domain named &quot;ChildDomain&quot;, using\n    // the evidence and the AppDomainSetup object.\n    //\n    AppDomain^ appDomain = AppDomain::CreateDomain(&quot;ChildDomain&quot;,\n        evidence, domainSetup);\n\n    Console::WriteLine(&quot;Press the Enter key to exit the example program.&quot;);\n    Console::ReadLine();\n}\n\n/* This code example produces the following output:\n\nAppDomain &quot;ChildDomain&quot; is initialized with these arguments:\nString1\nString2\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomainInitializer#1\">using System;\nusing System.Security.Policy;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get a reference to the default application domain.\n        //\n        AppDomain current = AppDomain.CurrentDomain;\n\n        // Create the AppDomainSetup that will be used to set up the child\n        // AppDomain.\n        AppDomainSetup ads = new AppDomainSetup();\n\n        // Use the evidence from the default application domain to\n        // create evidence for the child application domain.\n        //\n        Evidence ev = new Evidence(current.Evidence);\n\n        // Create an AppDomainInitializer delegate that represents the \n        // callback method, AppDomainInit. Assign this delegate to the\n        // AppDomainInitializer property of the AppDomainSetup object.\n        //\n        AppDomainInitializer adi = new AppDomainInitializer(AppDomainInit);\n        ads.AppDomainInitializer = adi;\n\n        // Create an array of strings to pass as arguments to the callback\n        // method. Assign the array to the AppDomainInitializerArguments\n        // property.\n        string[] initArgs = {&quot;String1&quot;, &quot;String2&quot;};\n        ads.AppDomainInitializerArguments = initArgs;\n\n        // Create a child application domain named &quot;ChildDomain&quot;, using \n        // the evidence and the AppDomainSetup object.\n        //\n        AppDomain ad = AppDomain.CreateDomain(&quot;ChildDomain&quot;, ev, ads);\n\n        Console.WriteLine(&quot;Press the Enter key to exit the example program.&quot;);\n        Console.ReadLine();\n    }\n\n    // The callback method invoked when the child application domain is\n    // initialized. The method simply displays the arguments that were\n    // passed to it.\n    //\n    public static void AppDomainInit(string[] args)\n    {\n        Console.WriteLine(&quot;AppDomain \\&quot;{0}\\&quot; is initialized with these arguments:&quot;, \n            AppDomain.CurrentDomain.FriendlyName);\n        foreach (string arg in args)\n        {\n            Console.WriteLine(&quot;    {0}&quot;, arg);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAppDomain &quot;ChildDomain&quot; is initialized with these arguments:\n    String1\n    String2\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomainInitializer#1\">Imports System\nImports System.Security.Policy\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Get a reference to the default application domain.\n        &#39;\n        Dim current As AppDomain = AppDomain.CurrentDomain\n\n        &#39; Create the AppDomainSetup that will be used to set up the child\n        &#39; AppDomain.\n        Dim ads As New AppDomainSetup()\n\n        &#39; Use the evidence from the default application domain to\n        &#39; create evidence for the child application domain.\n        &#39;\n        Dim ev As Evidence = New Evidence(current.Evidence)\n\n        &#39; Create an AppDomainInitializer delegate that represents the \n        &#39; callback method, AppDomainInit. Assign this delegate to the\n        &#39; AppDomainInitializer property of the AppDomainSetup object.\n        &#39;\n        Dim adi As New AppDomainInitializer(AddressOf AppDomainInit)\n        ads.AppDomainInitializer = adi\n\n        &#39; Create an array of strings to pass as arguments to the callback\n        &#39; method. Assign the array to the AppDomainInitializerArguments\n        &#39; property.\n        Dim initArgs() As String = {&quot;String1&quot;, &quot;String2&quot;}\n        ads.AppDomainInitializerArguments = initArgs\n\n        &#39; Create a child application domain named &quot;ChildDomain&quot;, using \n        &#39; the evidence and the AppDomainSetup object.\n        &#39;\n        Dim ad As AppDomain = _\n            AppDomain.CreateDomain(&quot;ChildDomain&quot;, ev, ads)\n\n        Console.WriteLine(&quot;Press the Enter key to exit the example program.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    &#39; The callback method invoked when the child application domain is\n    &#39; initialized. The method simply displays the arguments that were\n    &#39; passed to it.\n    &#39;\n    Public Shared Sub AppDomainInit(ByVal args() As String)\n        Console.WriteLine(&quot;AppDomain &quot;&quot;{0}&quot;&quot; is initialized with these arguments:&quot;, _\n            AppDomain.CurrentDomain.FriendlyName)\n        For Each arg As String In args\n            Console.WriteLine(&quot;    {0}&quot;, arg)\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;AppDomain &quot;ChildDomain&quot; is initialized with these arguments:\n&#39;    String1\n&#39;    String2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_AppDomainInitializerArguments\">\r\n    \r\n            <a id=\"System_AppDomainSetup_AppDomainInitializerArguments_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainInitializerArguments</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the arguments passed to the callback method represented by the <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate. The callback method is invoked when the application domain is initialized.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] AppDomainInitializerArguments { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of strings that is passed to the callback method represented by the <a class=\"xref\" href=\"system.appdomaininitializer\" data-linktype=\"relative-path\">AppDomainInitializer</a> delegate, when the callback method is invoked during <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> initialization.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainInitializer_\" data-linktype=\"relative-path\">AppDomainInitializer</a> property to specify a callback method that is invoked during <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> initialization. If the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainInitializer_\" data-linktype=\"relative-path\">AppDomainInitializer</a> property is not set, the array assigned to this property is not used.  </p>\n<p> The callback method is executed in the context of the newly created application domain.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example creates a child application domain named <code>ChildDomain</code>, using an <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object and evidence from the default application domain. The <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainInitializer_\" data-linktype=\"relative-path\">AppDomainInitializer</a> property is set to the callback method <code>AppDomainInit</code>, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the AppDomainInitializerArguments property. When the child domain is created, the callback method simply prints the strings.  </p>\n<pre><code class=\"lang-cpp\" name=\"AppDomainInitializer#1\">using namespace System;\nusing namespace System::Security::Policy;\n\npublic ref class AppDomainInitializerExample\n{\n    // The callback method invoked when the child application domain is\n    // initialized. The method simply displays the arguments that were\n    // passed to it.\n    //\npublic:\n    static void AppDomainInit(array&lt;String^&gt;^ args)\n    {\n        Console::WriteLine(&quot;AppDomain \\&quot;{0}\\&quot; is initialized with these &quot; +\n            &quot;arguments:&quot;, AppDomain::CurrentDomain-&gt;FriendlyName);\n        for each (String^ arg in args)\n        {\n            Console::WriteLine(&quot;    {0}&quot;, arg);\n        }\n    }\n};\n\nint main()\n{\n    // Get a reference to the default application domain.\n    //\n    AppDomain^ currentDomain = AppDomain::CurrentDomain;\n    \n    // Create the AppDomainSetup that will be used to set up the child\n    // AppDomain.\n    AppDomainSetup^ domainSetup = gcnew AppDomainSetup();\n\n    // Use the evidence from the default application domain to\n    // create evidence for the child application domain.\n    //\n    Evidence^ evidence = gcnew Evidence(currentDomain-&gt;Evidence);\n\n    // Create an AppDomainInitializer delegate that represents the\n    // callback method, AppDomainInit. Assign this delegate to the\n    // AppDomainInitializer property of the AppDomainSetup object.\n    //\n    AppDomainInitializer^ domainInitializer =\n        gcnew AppDomainInitializer(AppDomainInitializerExample::AppDomainInit);\n    domainSetup-&gt;AppDomainInitializer = domainInitializer;\n\n    // Create an array of strings to pass as arguments to the callback\n    // method. Assign the array to the AppDomainInitializerArguments\n    // property.\n    array&lt;String^&gt;^ initialArguments = {&quot;String1&quot;, &quot;String2&quot;};\n    domainSetup-&gt;AppDomainInitializerArguments = initialArguments;\n\n    // Create a child application domain named &quot;ChildDomain&quot;, using\n    // the evidence and the AppDomainSetup object.\n    //\n    AppDomain^ appDomain = AppDomain::CreateDomain(&quot;ChildDomain&quot;,\n        evidence, domainSetup);\n\n    Console::WriteLine(&quot;Press the Enter key to exit the example program.&quot;);\n    Console::ReadLine();\n}\n\n/* This code example produces the following output:\n\nAppDomain &quot;ChildDomain&quot; is initialized with these arguments:\nString1\nString2\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"AppDomainInitializer#1\">using System;\nusing System.Security.Policy;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get a reference to the default application domain.\n        //\n        AppDomain current = AppDomain.CurrentDomain;\n\n        // Create the AppDomainSetup that will be used to set up the child\n        // AppDomain.\n        AppDomainSetup ads = new AppDomainSetup();\n\n        // Use the evidence from the default application domain to\n        // create evidence for the child application domain.\n        //\n        Evidence ev = new Evidence(current.Evidence);\n\n        // Create an AppDomainInitializer delegate that represents the \n        // callback method, AppDomainInit. Assign this delegate to the\n        // AppDomainInitializer property of the AppDomainSetup object.\n        //\n        AppDomainInitializer adi = new AppDomainInitializer(AppDomainInit);\n        ads.AppDomainInitializer = adi;\n\n        // Create an array of strings to pass as arguments to the callback\n        // method. Assign the array to the AppDomainInitializerArguments\n        // property.\n        string[] initArgs = {&quot;String1&quot;, &quot;String2&quot;};\n        ads.AppDomainInitializerArguments = initArgs;\n\n        // Create a child application domain named &quot;ChildDomain&quot;, using \n        // the evidence and the AppDomainSetup object.\n        //\n        AppDomain ad = AppDomain.CreateDomain(&quot;ChildDomain&quot;, ev, ads);\n\n        Console.WriteLine(&quot;Press the Enter key to exit the example program.&quot;);\n        Console.ReadLine();\n    }\n\n    // The callback method invoked when the child application domain is\n    // initialized. The method simply displays the arguments that were\n    // passed to it.\n    //\n    public static void AppDomainInit(string[] args)\n    {\n        Console.WriteLine(&quot;AppDomain \\&quot;{0}\\&quot; is initialized with these arguments:&quot;, \n            AppDomain.CurrentDomain.FriendlyName);\n        foreach (string arg in args)\n        {\n            Console.WriteLine(&quot;    {0}&quot;, arg);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAppDomain &quot;ChildDomain&quot; is initialized with these arguments:\n    String1\n    String2\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"AppDomainInitializer#1\">Imports System\nImports System.Security.Policy\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Get a reference to the default application domain.\n        &#39;\n        Dim current As AppDomain = AppDomain.CurrentDomain\n\n        &#39; Create the AppDomainSetup that will be used to set up the child\n        &#39; AppDomain.\n        Dim ads As New AppDomainSetup()\n\n        &#39; Use the evidence from the default application domain to\n        &#39; create evidence for the child application domain.\n        &#39;\n        Dim ev As Evidence = New Evidence(current.Evidence)\n\n        &#39; Create an AppDomainInitializer delegate that represents the \n        &#39; callback method, AppDomainInit. Assign this delegate to the\n        &#39; AppDomainInitializer property of the AppDomainSetup object.\n        &#39;\n        Dim adi As New AppDomainInitializer(AddressOf AppDomainInit)\n        ads.AppDomainInitializer = adi\n\n        &#39; Create an array of strings to pass as arguments to the callback\n        &#39; method. Assign the array to the AppDomainInitializerArguments\n        &#39; property.\n        Dim initArgs() As String = {&quot;String1&quot;, &quot;String2&quot;}\n        ads.AppDomainInitializerArguments = initArgs\n\n        &#39; Create a child application domain named &quot;ChildDomain&quot;, using \n        &#39; the evidence and the AppDomainSetup object.\n        &#39;\n        Dim ad As AppDomain = _\n            AppDomain.CreateDomain(&quot;ChildDomain&quot;, ev, ads)\n\n        Console.WriteLine(&quot;Press the Enter key to exit the example program.&quot;)\n        Console.ReadLine()\n    End Sub\n\n    &#39; The callback method invoked when the child application domain is\n    &#39; initialized. The method simply displays the arguments that were\n    &#39; passed to it.\n    &#39;\n    Public Shared Sub AppDomainInit(ByVal args() As String)\n        Console.WriteLine(&quot;AppDomain &quot;&quot;{0}&quot;&quot; is initialized with these arguments:&quot;, _\n            AppDomain.CurrentDomain.FriendlyName)\n        For Each arg As String In args\n            Console.WriteLine(&quot;    {0}&quot;, arg)\n        Next\n    End Sub\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;AppDomain &quot;ChildDomain&quot; is initialized with these arguments:\n&#39;    String1\n&#39;    String2\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_AppDomainManagerAssembly\">\r\n    \r\n            <a id=\"System_AppDomainSetup_AppDomainManagerAssembly_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainManagerAssembly</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AppDomainManagerAssembly { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The display name of the assembly that provides the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the application domain manager.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To specify the type of the application domain manager, set both this property and the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainManagerType_\" data-linktype=\"relative-path\">AppDomainManagerType</a> property. If either of these properties is not set, the other is ignored.  </p>\n<p> If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> method is called).  </p>\n<p> When the application domain is loaded, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainManagerType_\" data-linktype=\"relative-path\">AppDomainManagerType</a> property. <a class=\"xref\" href=\"system.io.fileloadexception\" data-linktype=\"relative-path\">FileLoadException</a> is thrown if the assembly is found but the version information does not match.  </p>\n<p> To set the application domain manager for the default application domain, use the <a href=\"../Topic/%3CappDomainManagerAssembly%3E%20Element.md\" data-linktype=\"relative-path\">&lt;appDomainManagerAssembly&gt;</a> and <a href=\"../Topic/%3CappDomainManagerType%3E%20Element.md\" data-linktype=\"relative-path\">&lt;appDomainManagerType&gt;</a> elements in the <a href=\"../Topic/%3Cruntime%3E%20Element.md\" data-linktype=\"relative-path\">&lt;runtime&gt;</a> section of the application configuration file, or use the environment variables described in <a class=\"xref\" href=\"system.appdomainmanager\" data-linktype=\"relative-path\">AppDomainManager</a>.  </p>\n<p> This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown.  </p>\n<p> The format of the assembly display name is given by the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_FullName_\" data-linktype=\"relative-path\">FullName</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_AppDomainManagerType\">\r\n    \r\n            <a id=\"System_AppDomainSetup_AppDomainManagerType_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AppDomainManagerType</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the full name of the type that provides the application domain manager for application domains created using this <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string AppDomainManagerType { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The full name of the type, including the namespace.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>To specify the type of the application domain manager, set both this property and the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainManagerAssembly_\" data-linktype=\"relative-path\">AppDomainManagerAssembly</a> property. If either of these properties is not set, the other is ignored.  </p>\n<p> If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateDomain_\" data-linktype=\"relative-path\">CreateDomain</a> method is called).  </p>\n<p> When the application domain is loaded, <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown if the assembly specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_AppDomainManagerAssembly_\" data-linktype=\"relative-path\">AppDomainManagerAssembly</a> property does not contain the type specified by this property.  </p>\n<p> To set the application domain manager for the default application domain, use the <a href=\"../Topic/%3CappDomainManagerAssembly%3E%20Element.md\" data-linktype=\"relative-path\">&lt;appDomainManagerAssembly&gt;</a> and <a href=\"../Topic/%3CappDomainManagerType%3E%20Element.md\" data-linktype=\"relative-path\">&lt;appDomainManagerType&gt;</a> elements in the <a href=\"../Topic/%3Cruntime%3E%20Element.md\" data-linktype=\"relative-path\">&lt;runtime&gt;</a> section of the application configuration file, or use the environment variables described in <a class=\"xref\" href=\"system.appdomainmanager\" data-linktype=\"relative-path\">AppDomainManager</a>.  </p>\n<p> This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <a class=\"xref\" href=\"system.typeloadexception\" data-linktype=\"relative-path\">TypeLoadException</a> is thrown.  </p>\n<p> The format of the full name of a type is given by the <a class=\"xref\" href=\"system.type#System_Type_FullName_\" data-linktype=\"relative-path\">FullName</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ApplicationBase\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ApplicationBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the directory containing the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ApplicationBase { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the application base directory.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The application base directory is where the assembly manager begins probing for assemblies.  </p>\n<p> The ApplicationBase property can influence which permissions are granted to an application domain. For example, an application domain originating from the local computer normally receives full trust based on its location of origin. However, if the ApplicationBase property of that <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> is set to the full name of an intranet directory, the ApplicationBase setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the ApplicationBase property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must ensure that the folder you specify exists.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"ADApplicationBase#1\">Class ADSetupInformation\n\n    Shared Sub Main()\n\n        Dim root As AppDomain = AppDomain.CurrentDomain\n\n        Dim setup As New AppDomainSetup()\n        setup.ApplicationBase = _\n            root.SetupInformation.ApplicationBase &amp; &quot;MyAppSubfolder\\&quot;\n\n        Dim domain As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, Nothing, setup)\n\n        Console.WriteLine(&quot;Application base of {0}:&quot; &amp; vbCrLf &amp; vbTab &amp; &quot;{1}&quot;, _\n            root.FriendlyName, root.SetupInformation.ApplicationBase)\n        Console.WriteLine(&quot;Application base of {0}:&quot; &amp; vbCrLf &amp; vbTab &amp; &quot;{1}&quot;, _\n            domain.FriendlyName, domain.SetupInformation.ApplicationBase)\n\n        AppDomain.Unload(domain)\n    End Sub\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Application base of MyApp.exe:\n&#39;        C:\\Program Files\\MyApp\\\n&#39;Application base of MyDomain:\n&#39;        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n</code></pre><pre><code class=\"lang-cpp\" name=\"ADApplicationBase#1\">using namespace System;\n\nint main()\n{\n    AppDomain^ root = AppDomain::CurrentDomain;\n\n    AppDomainSetup^ setup = gcnew AppDomainSetup();\n    setup-&gt;ApplicationBase = \n        root-&gt;SetupInformation-&gt;ApplicationBase + &quot;MyAppSubfolder\\\\&quot;;\n\n    AppDomain^ domain = AppDomain::CreateDomain(&quot;MyDomain&quot;, nullptr, setup);\n\n    Console::WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n        root-&gt;FriendlyName, root-&gt;SetupInformation-&gt;ApplicationBase);\n    Console::WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n        domain-&gt;FriendlyName, domain-&gt;SetupInformation-&gt;ApplicationBase);\n\n    AppDomain::Unload(domain);\n}\n\n/* This example produces output similar to the following:\n\nApplication base of MyApp.exe:\n        C:\\Program Files\\MyApp\\\nApplication base of MyDomain:\n        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ADApplicationBase#1\">using System;\n\nclass ADSetupInformation\n{\n    static void Main()\n    {\n        AppDomain root = AppDomain.CurrentDomain;\n\n        AppDomainSetup setup = new AppDomainSetup();\n        setup.ApplicationBase = \n            root.SetupInformation.ApplicationBase + @&quot;MyAppSubfolder\\&quot;;\n\n        AppDomain domain = AppDomain.CreateDomain(&quot;MyDomain&quot;, null, setup);\n\n        Console.WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            root.FriendlyName, root.SetupInformation.ApplicationBase);\n        Console.WriteLine(&quot;Application base of {0}:\\r<br>&nbsp;&nbsp;&nbsp;&nbsp;{1}&quot;, \n            domain.FriendlyName, domain.SetupInformation.ApplicationBase);\n\n        AppDomain.Unload(domain);\n    }\n}\n\n/* This example produces output similar to the following:\n\nApplication base of MyApp.exe:\n        C:\\Program Files\\MyApp\\\nApplication base of MyDomain:\n        C:\\Program Files\\MyApp\\MyAppSubfolder\\\n */\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ApplicationName\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ApplicationName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the application.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ApplicationName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the application.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to set the ApplicationName property when you create a new application domain.  </p>\n<p> The example creates a new application domain, and then calls the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a> method to load the example assembly into the new application domain and create an instance of the <code>Worker</code> class. The <code>Worker</code> class inherits <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, so the example can use the proxy returned by <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a> to call the <code>TestLoad</code> method.  </p>\n<p> The <code>TestLoad</code> method loads an assembly that you specify. You must either specify a valid, fully qualified assembly name, or comment out the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_Load_System_String_\" data-linktype=\"relative-path\">Load(String)</a> method. The <code>TestLoad</code> method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.  </p>\n<p> The example uses the <a class=\"xref\" href=\"system.loaderoptimizationattribute\" data-linktype=\"relative-path\">LoaderOptimizationAttribute</a> attribute to tell the assembly loader how the application will share code across application domains.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADMultiDomain#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Security::Policy;\n\nref class Worker : MarshalByRefObject\n{\npublic:\n   void TestLoad()\n   {\n      // You must supply a valid fully qualified assembly name here.\n      Assembly::Load(&quot;Text assembly name, Culture, PublicKeyToken, Version&quot;);\n      for each (Assembly^ assem in AppDomain::CurrentDomain-&gt;GetAssemblies())\n         Console::WriteLine(assem-&gt;FullName);\n   }\n};\n\n//for evidence Object*\n// The following attribute indicates to loader that multiple application\n// domains are used in this application.\n\n[LoaderOptimizationAttribute(LoaderOptimization::MultiDomainHost)]\nint main()\n{\n   \n   // Create application domain setup information for new application domain.\n   AppDomainSetup^ domaininfo = gcnew AppDomainSetup;\n   domaininfo-&gt;ApplicationBase = System::Environment::CurrentDirectory;\n   domaininfo-&gt;ApplicationName = &quot;MyMultiDomain Application&quot;;\n   \n   //Create evidence for the new appdomain from evidence of current application domain.\n   Evidence^ adevidence = AppDomain::CurrentDomain-&gt;Evidence;\n   \n   // Create appdomain.\n   AppDomain^ newDomain = AppDomain::CreateDomain( &quot;MyMultiDomain&quot;, adevidence, domaininfo );\n   \n   // Load an assembly into the new application domain.\n   Worker^ w = (Worker^) newDomain-&gt;CreateInstanceAndUnwrap(\n      Worker::typeid-&gt;Assembly-&gt;GetName()-&gt;Name,\n      &quot;Worker&quot;\n   );\n   w-&gt;TestLoad();\n\n   //Unload the application domain, which also unloads the assembly.\n   AppDomain::Unload(newDomain);\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ADMultiDomain#1\">using System;\nusing System.Reflection;\nusing System.Security.Policy;  //for evidence object\n\nclass ADMultiDomain\n{\n   // The following attribute indicates to loader that multiple application \n   // domains are used in this application.\n   [LoaderOptimizationAttribute( LoaderOptimization.MultiDomainHost)]\n   public static void Main()\n   {\n      // Create application domain setup information for new application domain.\n      AppDomainSetup domaininfo = new AppDomainSetup();\n      domaininfo.ApplicationBase = System.Environment.CurrentDirectory;\n      domaininfo.ApplicationName = &quot;MyMultiDomain Application&quot;;\n\n      //Create evidence for the new appdomain from evidence of current application domain.\n      Evidence adevidence = AppDomain.CurrentDomain.Evidence;\n\n      // Create appdomain.\n      AppDomain newDomain = AppDomain.CreateDomain(&quot;MyMultiDomain&quot;, adevidence, domaininfo);\n\n      // Load an assembly into the new application domain.\n      Worker w = (Worker) newDomain.CreateInstanceAndUnwrap( \n         typeof(Worker).Assembly.GetName().Name,\n         &quot;Worker&quot;\n      );\n      w.TestLoad();\n\n      //Unload the application domain, which also unloads the assembly.\n      AppDomain.Unload(newDomain);\n   }\n}\n\nclass Worker : MarshalByRefObject\n{\n   internal void TestLoad()\n   {\n      // You must supply a valid fully qualified assembly name here.\n      Assembly.Load(&quot;Text assembly name, Culture, PublicKeyToken, Version&quot;);\n      foreach (Assembly assem in AppDomain.CurrentDomain.GetAssemblies())\n         Console.WriteLine(assem.FullName);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADMultiDomain#1\">Imports System\nImports System.Reflection\nImports System.Security.Policy\n&#39;Imports System.Data\n &#39;for evidence object\n\nClass ADMultiDomain\n   \n   &#39; The following attribute indicates to loader that multiple application \n   &#39; domains are used in this application.\n   &lt;LoaderOptimizationAttribute(LoaderOptimization.MultiDomainHost)&gt;  _\n   Public Shared Sub Main()\n      &#39; Create application domain setup information for new application domain.\n      Dim domaininfo As New AppDomainSetup()\n      domaininfo.ApplicationBase = System.Environment.CurrentDirectory\n      domaininfo.ApplicationName = &quot;MyMultiDomain Application&quot;\n      \n      &#39;Create evidence for the new appdomain from evidence of current application domain.\n      Dim adevidence As Evidence = AppDomain.CurrentDomain.Evidence\n      \n      &#39; Create appdomain.\n      Dim newDomain As AppDomain = AppDomain.CreateDomain(&quot;MyMultiDomain&quot;, adevidence, domaininfo)\n      \n      &#39;Load an assembly into the new application domain.\n      Dim w As Worker = CType( _\n         newDomain.CreateInstanceAndUnwrap( \n            GetType(Worker).Assembly().GetName().Name, &quot;Worker&quot;), \n            Worker) \n      w.TestLoad()\n      \n      &#39;Unload the application domain, which also unloads the assembly.\n      AppDomain.Unload(newDomain)\n      \n   End Sub &#39;Main\nEnd Class &#39;ADMultiDomain\n\nClass Worker\n   Inherits MarshalByRefObject\n\n   Friend Sub TestLoad()\n      &#39; You must supply a valid assembly display name here.\n      [Assembly].Load(&quot;Text assembly name, Culture, PublicKeyToken, Version&quot;)\n\n      For Each assem As [Assembly] In AppDomain.CurrentDomain.GetAssemblies()\n         Console.WriteLine(assem.FullName)\n      Next\n   End Sub\nEnd Class\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ApplicationTrust\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ApplicationTrust_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ApplicationTrust</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets an object containing security and trust information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Security.Policy.ApplicationTrust ApplicationTrust { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.applicationtrust\" data-linktype=\"relative-path\">ApplicationTrust</a></div>\r\n                  </div>\r\n                  <p>An object that contains security and trust information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>The property is set to an <a class=\"xref\" href=\"system.security.policy.applicationtrust\" data-linktype=\"relative-path\">ApplicationTrust</a> object whose application identity does not match the application identity of the <a class=\"xref\" href=\"system.runtime.hosting.activationarguments\" data-linktype=\"relative-path\">ActivationArguments</a> object returned by the <span class=\"xref\">stem.AppDomainSetup.ActivationArguments*</span> property. No exception is thrown if the <span class=\"xref\">stem.AppDomainSetup.ActivationArguments*</span> property is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p>The property is set to <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property is <code>null</code> when the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> is created. Once changed, it cannot be reset to a null reference.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_CachePath\">\r\n    \r\n            <a id=\"System_AppDomainSetup_CachePath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CachePath</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of an area specific to the application where files are shadow copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string CachePath { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The fully qualified name of the directory path and file name where files are shadow copied.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>In order for this property to have an effect, the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property must also be set. If the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property is not set, the CachePath property is ignored and the shadow copy cache location defaults to the download cache.  </p>\n<p> For more information on shadow copying, see <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ConfigurationFile\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ConfigurationFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ConfigurationFile</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the name of the configuration file for an application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ConfigurationFile { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The name of the configuration file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The configuration file describes the search rules and configuration data for the application domain. The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.  </p>\n<p> For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer. Only the host knows the specifics of the configuration data for a particular circumstance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_DisallowApplicationBaseProbing\">\r\n    \r\n            <a id=\"System_AppDomainSetup_DisallowApplicationBaseProbing_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisallowApplicationBaseProbing</div>        \r\n          </div>\r\n    \r\n            <p>Specifies whether the application base path and private binary path are probed when searching for assemblies to load.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DisallowApplicationBaseProbing { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if probing is not allowed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the DisallowApplicationBaseProbing property is <code>true</code>, the value of the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> property is ignored. That is, no assemblies are probed for in the directories specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> property. In addition, the values of the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> property and the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPathProbe_\" data-linktype=\"relative-path\">PrivateBinPathProbe</a> property are ignored. No assemblies are probed for in the directories specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> property.  </p>\n<p> The DisallowApplicationBaseProbing property provides an additional layer of control over the loading process. In the normal assembly loading sequence, the application base is probed before the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_AssemblyResolve\" data-linktype=\"relative-path\">System.AppDomain.AssemblyResolve</a> event is raised. However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> properties. Such applications can use the DisallowApplicationBaseProbing property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_DisallowBindingRedirects\">\r\n    \r\n            <a id=\"System_AppDomainSetup_DisallowBindingRedirects_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisallowBindingRedirects</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether an application domain allows assembly binding redirection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DisallowBindingRedirects { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if redirection of assemblies is not allowed; <code>false</code> if it is allowed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DisallowBindingRedirects property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_DisallowCodeDownload\">\r\n    \r\n            <a id=\"System_AppDomainSetup_DisallowCodeDownload_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisallowCodeDownload</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DisallowCodeDownload { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if HTTP download of assemblies is not allowed; <code>false</code> if it is allowed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DisallowCodeDownload property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> The default value for the DisallowCodeDownload property is <code>false</code>. This setting is unsafe for services. To help prevent services from downloading partially trusted code, set this property to <code>true</code>.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_DisallowPublisherPolicy\">\r\n    \r\n            <a id=\"System_AppDomainSetup_DisallowPublisherPolicy_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DisallowPublisherPolicy</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether the <a href=\"../Topic/%3CpublisherPolicy%3E%20Element.md\" data-linktype=\"relative-path\"><publisherpolicy></publisherpolicy></a> section of the configuration file is applied to an application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool DisallowPublisherPolicy { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the <code>&lt;publisherPolicy&gt;</code> section of the configuration file for an application domain is ignored; <code>false</code> if the declared publisher policy is honored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The DisallowPublisherPolicy property specifically applies to a Web application that is loaded locally. Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.  </p>\n<p> For more information about bypassing publisher policy, see the <a href=\"../Topic/Redirecting%20Assembly%20Versions.md\" data-linktype=\"relative-path\">Redirecting Assembly Versions</a> topic. For more information about safe mode, see the &quot;Examining the Configuration Files&quot; section of the <a href=\"../Topic/How%20the%20Runtime%20Locates%20Assemblies.md\" data-linktype=\"relative-path\">How the Runtime Locates Assemblies</a> topic.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_DynamicBase\">\r\n    \r\n            <a id=\"System_AppDomainSetup_DynamicBase_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">DynamicBase</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the base directory where the directory for dynamically generated files is located.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string DynamicBase { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The directory where the <span class=\"xref\">stem.AppDomain.DynamicDirectory*</span> is located.  </p>\n <div class=\"alert NOTE\"><br> The return value of this property is different from the value assigned. See the Remarks section.<br>\n</div>\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.memberaccessexception\" data-linktype=\"relative-path\">MemberAccessException</a></div>\r\n                  </div>\r\n                  <p>This property cannot be set because the application name on the application domain is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use this property to set the base directory where the dynamic directory for the new application domain will be located. When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths. If it does not find the assembly, it looks in the dynamic directory, which is returned by the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DynamicDirectory_\" data-linktype=\"relative-path\">DynamicDirectory</a> property. Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.  </p>\n<p> When you assign a path to the DynamicBase property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property. Thus, the base directory subsequently returned by this property is always different from the value assigned.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Assigning a value to this property does not create any directories. The directories must be created or verified by the code that uses them.  </p>\n</div>\n<p> The dynamic directory is a subdirectory of DynamicBase. Its simple name is the value returned by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property, so its format is <em>original path</em>\\<em>hash code</em>\\<em>application name</em>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example demonstrates how to use the DynamicBase property to set the path an application domain probes when loading dynamic assemblies.  </p>\n<p> The example creates an <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object and sets its <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationName_\" data-linktype=\"relative-path\">ApplicationName</a> property to &quot;Example&quot; and its DynamicBase property to &quot;C:\\DynamicAssemblyDir&quot;. The example then displays the DynamicBase property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base directory in this example is intended to be outside the probing path for the example application. Be sure to compile the example in a different location. Delete the base directory and all its subdirectories each time you run the example.  </p>\n</div>\n<p> The example creates a new application domain using the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object. The example then creates the dynamic directory if it does not already exist. Although the example uses the application domain&#39;s <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DynamicDirectory_\" data-linktype=\"relative-path\">DynamicDirectory</a> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.  </p>\n<p> The example has a <code>GenerateDynamicAssembly</code> method that emits an assembly named <code>DynamicHelloWorld.dll</code> and stores it in the new application domain&#39;s dynamic directory. The dynamic assembly contains one type, <code>HelloWorld</code>, that has a static method (<code>Shared</code> method in Visual Basic) named <code>HelloFromAD</code>. Calling this method displays the name of the application domain.  </p>\n<p> The <code>Example</code> class derives from <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>, so the example can create an instance of the class in the new application domain and call its <code>Test</code> method. The <code>Test</code> method loads the dynamic assembly by its display name and calls the static <code>HelloFromAD</code> method.  </p>\n<p> You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named <code>DynamicHelloWorld.dll</code> and compiling it in the same directory as this example. The assembly must have a class named <code>HelloWorld</code> with a static method named <code>HelloFromAD</code>. This method does not have to have the same functionality as the one in the example; it can simply display a string to the console. The assembly must also have an <a class=\"xref\" href=\"system.reflection.assemblyversionattribute\" data-linktype=\"relative-path\">AssemblyVersionAttribute</a> attribute that sets its version to 1.0.0.0. When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADDynamicBase#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\npublic ref class Example : MarshalByRefObject\n{\npublic:\n   void Test()\n   {\n      Assembly^ dynAssem = Assembly::Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;);\n\n      Type^ myType = dynAssem-&gt;GetType(&quot;HelloWorld&quot;);\n      myType-&gt;InvokeMember(&quot;HelloFromAD&quot;, BindingFlags::Public | \n         BindingFlags::Static | BindingFlags::InvokeMethod, \n         Type::DefaultBinder, nullptr, nullptr);\n   }\n};\n\n\nstatic void GenerateDynamicAssembly(String^ location)\n{\n   // Define the dynamic assembly and the module. There is only one\n   // module in this assembly. Note that the call to DefineDynamicAssembly \n   // specifies the location where the assembly will be saved. The \n   // assembly version is 1.0.0.0.\n   //\n   AssemblyName^ asmName = gcnew AssemblyName(&quot;DynamicHelloWorld&quot;);\n   asmName-&gt;Version = gcnew Version(&quot;1.0.0.0&quot;);\n\n   AssemblyBuilder^ ab = \n      AppDomain::CurrentDomain-&gt;DefineDynamicAssembly( \n         asmName, AssemblyBuilderAccess::Save, location);\n\n   String^ moduleName = asmName-&gt;Name + &quot;.exe&quot;;\n   ModuleBuilder^ mb = ab-&gt;DefineDynamicModule(asmName-&gt;Name, moduleName);\n   \n   // Define the &quot;HelloWorld&quot; type, with one static method.\n   TypeBuilder^ tb = mb-&gt;DefineType(&quot;HelloWorld&quot;, TypeAttributes::Public);\n   MethodBuilder^ hello = tb-&gt;DefineMethod(&quot;HelloFromAD&quot;, \n      MethodAttributes::Public | MethodAttributes::Static, nullptr, nullptr);\n\n   // The method displays a message that contains the name of the application\n   // domain where the method is executed.\n   ILGenerator^ il = hello-&gt;GetILGenerator();\n   il-&gt;Emit(OpCodes::Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;);\n   il-&gt;Emit(OpCodes::Call, AppDomain::typeid-&gt;GetProperty(&quot;CurrentDomain&quot;)-&gt;GetGetMethod());\n   il-&gt;Emit(OpCodes::Call, AppDomain::typeid-&gt;GetProperty(&quot;FriendlyName&quot;)-&gt;GetGetMethod());\n   il-&gt;Emit(OpCodes::Call, Console::typeid-&gt;GetMethod(&quot;WriteLine&quot;, \n                            gcnew array&lt;Type^&gt; { String::typeid, String::typeid }));\n   il-&gt;Emit(OpCodes::Ret);\n\n   // Complete the HelloWorld type and save the assembly. The assembly\n   // is placed in the location specified by DefineDynamicAssembly.\n   Type^ myType = tb-&gt;CreateType();\n   ab-&gt;Save(moduleName);\n};\n\nvoid main()\n{\n   // Prepare to create a new application domain.\n   AppDomainSetup^ setup = gcnew AppDomainSetup();\n\n   // Set the application name before setting the dynamic base.\n   setup-&gt;ApplicationName = &quot;Example&quot;;\n   \n   // Set the location of the base directory where assembly resolution \n   // probes for dynamic assemblies. Note that the hash code of the \n   // application name is concatenated to the base directory name you \n   // supply. \n   setup-&gt;DynamicBase = &quot;C:\\\\DynamicAssemblyDir&quot;;\n   Console::WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup-&gt;DynamicBase);\n\n   AppDomain^ ad = AppDomain::CreateDomain(&quot;MyDomain&quot;, nullptr, setup);\n   \n   // The dynamic directory name is the dynamic base concatenated with\n   // the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n   String^ dynamicDir = ad-&gt;DynamicDirectory;\n   Console::WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir);\n\n   // The AssemblyBuilder won&#39;t create this directory automatically.\n   if (!System::IO::Directory::Exists(dynamicDir))\n   {\n      Console::WriteLine(&quot;Creating the dynamic directory.&quot;);\n      System::IO::Directory::CreateDirectory(dynamicDir);\n   }\n\n   // Generate a dynamic assembly and store it in the dynamic \n   // directory.\n   GenerateDynamicAssembly(dynamicDir);\n\n   // Create an instance of the Example class in the application domain,\n   // and call its Test method to load the dynamic assembly and use it.\n   Example^ ex = (Example^) ad-&gt;CreateInstanceAndUnwrap( \n         Example::typeid-&gt;Assembly-&gt;FullName, &quot;Example&quot;);\n   ex-&gt;Test();\n}\n\n/* This example produces output similar to the following:\n\nDynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\nDynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\nCreating the dynamic directory.\nHello from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"ADDynamicBase#1\">using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\npublic class Example : MarshalByRefObject\n{\n   static void Main()\n   {\n      // Prepare to create a new application domain.\n      AppDomainSetup setup = new AppDomainSetup();\n   \n      // Set the application name before setting the dynamic base.\n      setup.ApplicationName = &quot;Example&quot;;\n   \n      // Set the location of the base directory where assembly resolution \n      // probes for dynamic assemblies. Note that the hash code of the \n      // application name is concatenated to the base directory name you \n      // supply. \n      setup.DynamicBase = &quot;C:\\\\DynamicAssemblyDir&quot;;\n      Console.WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup.DynamicBase);\n\n      AppDomain ad = AppDomain.CreateDomain(&quot;MyDomain&quot;, null, setup);\n   \n      // The dynamic directory name is the dynamic base concatenated with\n      // the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n      string dynamicDir = ad.DynamicDirectory;\n      Console.WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir);\n\n      // The AssemblyBuilder won&#39;t create this directory automatically.\n      if (!System.IO.Directory.Exists(dynamicDir))\n      {\n         Console.WriteLine(&quot;Creating the dynamic directory.&quot;);\n         System.IO.Directory.CreateDirectory(dynamicDir);\n      }\n\n      // Generate a dynamic assembly and store it in the dynamic \n      // directory.\n      GenerateDynamicAssembly(dynamicDir);\n\n      // Create an instance of the Example class in the application domain,\n      // and call its Test method to load the dynamic assembly and use it.\n      Example ex = (Example) ad.CreateInstanceAndUnwrap(\n         typeof(Example).Assembly.FullName, &quot;Example&quot;);\n      ex.Test();\n   }\n\n   public void Test()\n   {\n      Assembly dynAssem = Assembly.Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;);\n\n      Type myType = dynAssem.GetType(&quot;HelloWorld&quot;);\n      myType.InvokeMember(&quot;HelloFromAD&quot;, BindingFlags.Public | \n         BindingFlags.Static | BindingFlags.InvokeMethod, \n         Type.DefaultBinder, null, null);\n   }\n\n\n   private static void GenerateDynamicAssembly(string location)\n   {\n      // Define the dynamic assembly and the module. There is only one\n      // module in this assembly. Note that the call to DefineDynamicAssembly \n      // specifies the location where the assembly will be saved. The \n      // assembly version is 1.0.0.0.\n      //\n      AssemblyName asmName = new AssemblyName(&quot;DynamicHelloWorld&quot;);\n      asmName.Version = new Version(&quot;1.0.0.0&quot;);\n\n      AssemblyBuilder ab = \n         AppDomain.CurrentDomain.DefineDynamicAssembly( \n            asmName, AssemblyBuilderAccess.Save, location);\n\n      String moduleName = asmName.Name + &quot;.exe&quot;;\n      ModuleBuilder mb = ab.DefineDynamicModule(asmName.Name, moduleName);\n      \n      // Define the &quot;HelloWorld&quot; type, with one static method.\n      TypeBuilder tb = mb.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n      MethodBuilder hello = tb.DefineMethod(&quot;HelloFromAD&quot;, \n         MethodAttributes.Public | MethodAttributes.Static, null, null);\n\n      // The method displays a message that contains the name of the application\n      // domain where the method is executed.\n      ILGenerator il = hello.GetILGenerator();\n      il.Emit(OpCodes.Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;);\n      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty(&quot;CurrentDomain&quot;).GetGetMethod());\n      il.Emit(OpCodes.Call, typeof(AppDomain).GetProperty(&quot;FriendlyName&quot;).GetGetMethod());\n      il.Emit(OpCodes.Call, typeof(Console).GetMethod(&quot;WriteLine&quot;, \n                             new Type[] { typeof(String), typeof(String) }));\n      il.Emit(OpCodes.Ret);\n\n      // Complete the HelloWorld type and save the assembly. The assembly\n      // is placed in the location specified by DefineDynamicAssembly.\n      Type myType = tb.CreateType();\n      ab.Save(moduleName);\n   }\n}\n\n/* This example produces output similar to the following:\n\nDynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\nDynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\nCreating the dynamic directory.\nHello from &#39;MyDomain&#39;!\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"ADDynamicBase#1\">Imports System\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class Example \n   Inherits MarshalByRefObject\n   \n   Shared Sub Main(args() As String)\n\n      &#39; Prepare to create a new application domain.\n      Dim setup As New AppDomainSetup()\n\n      &#39; Set the application name before setting the dynamic base.\n      setup.ApplicationName = &quot;Example&quot;\n      \n      &#39; Set the location of the base directory where assembly resolution \n      &#39; probes for dynamic assemblies. Note that the hash code of the \n      &#39; application name is concatenated to the base directory name you \n      &#39; supply. \n      setup.DynamicBase = &quot;C:\\DynamicAssemblyDir&quot;\n      Console.WriteLine(&quot;DynamicBase is set to &#39;{0}&#39;.&quot;, setup.DynamicBase)\n\n      Dim ad As AppDomain = AppDomain.CreateDomain(&quot;MyDomain&quot;, Nothing, setup)\n      \n      &#39; The dynamic directory name is the dynamic base concatenated with\n      &#39; the application name: &lt;DynamicBase&gt;\\&lt;hash code&gt;\\&lt;ApplicationName&gt;\n      Dim dynamicDir As String = ad.DynamicDirectory \n      Console.WriteLine(&quot;Dynamic directory is &#39;{0}&#39;.&quot;, dynamicDir)\n\n      &#39; The AssemblyBuilder won&#39;t create this directory automatically.\n      If Not System.IO.Directory.Exists(dynamicDir) Then \n         Console.WriteLine(&quot;Creating the dynamic directory.&quot;)\n         System.IO.Directory.CreateDirectory(dynamicDir)\n      End If\n\n      &#39; Generate a dynamic assembly and store it in the dynamic \n      &#39; directory.\n      GenerateDynamicAssembly(dynamicDir) \n\n      &#39; Create an instance of the Example class in the application domain,\n      &#39; and call its Test method to load the dynamic assembly and use it.  \n      Dim ex As Example = CType( _\n         ad.CreateInstanceAndUnwrap( _\n            GetType(Example).Assembly.FullName, &quot;Example&quot;), Example)\n      ex.Test()\n   End Sub\n\n   Public Sub Test() \n\n      Dim dynAssem As [Assembly] = Assembly.Load(\n         &quot;DynamicHelloWorld, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;)\n\n      Dim myType As Type = dynAssem.GetType(&quot;HelloWorld&quot;)\n      myType.InvokeMember(&quot;HelloFromAD&quot;, BindingFlags.Public Or _\n         BindingFlags.Static Or BindingFlags.InvokeMethod, _\n         Type.DefaultBinder, Nothing, Nothing) &#39;New Object() {})\n   End Sub\n\n\n   Private Shared Sub GenerateDynamicAssembly(ByVal location As String)\n      \n      &#39; Define the dynamic assembly and the module. There is only one\n      &#39; module in this assembly. Note that the call to DefineDynamicAssembly \n      &#39; specifies the location where the assembly will be saved. The \n      &#39; assembly version is 1.0.0.0.\n      &#39;\n      Dim asmName As New AssemblyName(&quot;DynamicHelloWorld&quot;)\n      asmName.Version = New Version(&quot;1.0.0.0&quot;)\n\n      Dim ab As AssemblyBuilder = _\n         AppDomain.CurrentDomain.DefineDynamicAssembly( _\n            asmName, AssemblyBuilderAccess.Save, location)\n\n      Dim moduleName As String = asmName.Name &amp; &quot;.dll&quot;\n      Dim mb As ModuleBuilder = ab.DefineDynamicModule(asmName.Name, moduleName)\n      \n      &#39; Define the &quot;HelloWorld&quot; type, with one static method.\n      Dim tb As TypeBuilder = mb.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public)\n      Dim hello As MethodBuilder = tb.DefineMethod(&quot;HelloFromAD&quot;, _\n         MethodAttributes.Public Or MethodAttributes.Static, Nothing, Nothing)\n\n      &#39; The method displays a message that contains the name of the application\n      &#39; domain where the method is executed.\n      Dim il As ILGenerator = hello.GetILGenerator()\n      il.Emit(OpCodes.Ldstr, &quot;Hello from &#39;{0}&#39;!&quot;)\n      il.Emit(OpCodes.Call, GetType(AppDomain).GetProperty(&quot;CurrentDomain&quot;).GetGetMethod())\n      il.Emit(OpCodes.Call, GetType(AppDomain).GetProperty(&quot;FriendlyName&quot;).GetGetMethod())\n      il.Emit(OpCodes.Call, GetType(Console).GetMethod(&quot;WriteLine&quot;, _\n                             New Type() { GetType(String), GetType(String) }))\n      il.Emit(OpCodes.Ret)\n\n      &#39; Complete the HelloWorld type and save the assembly. The assembly\n      &#39; is placed in the location specified by DefineDynamicAssembly.\n      Dim myType As Type = tb.CreateType()\n      ab.Save(moduleName)\n   End Sub\nEnd Class \n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;DynamicBase is set to &#39;C:\\DynamicAssemblyDir\\5e4a7545&#39;.\n&#39;Dynamic directory is &#39;C:\\DynamicAssemblyDir\\5e4a7545\\Example&#39;.\n&#39;Creating the dynamic directory.\n&#39;Hello from &#39;MyDomain&#39;!\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_LicenseFile\">\r\n    \r\n            <a id=\"System_AppDomainSetup_LicenseFile_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LicenseFile</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the location of the license file associated with this domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string LicenseFile { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The location and name of the license file.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_LoaderOptimization\">\r\n    \r\n            <a id=\"System_AppDomainSetup_LoaderOptimization_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">LoaderOptimization</div>        \r\n          </div>\r\n    \r\n            <p>Specifies the optimization policy used to load an executable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public LoaderOptimization LoaderOptimization { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.loaderoptimization\" data-linktype=\"relative-path\">LoaderOptimization</a></div>\r\n                  </div>\r\n                  <p>An enumerated constant that is used with the <a class=\"xref\" href=\"system.loaderoptimizationattribute\" data-linktype=\"relative-path\">LoaderOptimizationAttribute</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example creates a dynamic assembly and saves it to disk, and then uses the LoaderOptimization property to set the optimization policy used to load the assembly into an application domain.  </p>\n<pre><code class=\"lang-cpp\" name=\"ADDyno#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\nusing namespace System::Runtime::Remoting;\n\nref class ADDyno\n{\npublic:\n   static Type^ CreateADynamicAssembly( interior_ptr&lt;AppDomain^&gt; myNewDomain, String^ executableNameNoExe )\n   {\n      String^ executableName = String::Concat( executableNameNoExe, &quot;.exe&quot; );\n      AssemblyName^ myAsmName = gcnew AssemblyName;\n      myAsmName-&gt;Name = executableNameNoExe;\n      myAsmName-&gt;CodeBase = Environment::CurrentDirectory;\n      AssemblyBuilder^ myAsmBuilder = ( *myNewDomain)-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::RunAndSave );\n      Console::WriteLine( &quot;-- Dynamic Assembly instantiated.&quot; );\n      ModuleBuilder^ myModBuilder = myAsmBuilder-&gt;DefineDynamicModule( executableNameNoExe, executableName );\n      TypeBuilder^ myTypeBuilder = myModBuilder-&gt;DefineType( executableNameNoExe, TypeAttributes::Public, MarshalByRefObject::typeid );\n      array&lt;Type^&gt;^temp0 = nullptr;\n      MethodBuilder^ myFCMethod = myTypeBuilder-&gt;DefineMethod( &quot;CountLocalFiles&quot;, static_cast&lt;MethodAttributes&gt;(MethodAttributes::Public | MethodAttributes::Static), nullptr, temp0 );\n      MethodInfo^ currentDirGetMI = Environment::typeid-&gt;GetProperty( &quot;CurrentDirectory&quot; )-&gt;GetGetMethod();\n      array&lt;Type^&gt;^temp1 = {String::typeid};\n      MethodInfo^ writeLine0objMI = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, temp1 );\n      array&lt;Type^&gt;^temp2 = {String::typeid,Object::typeid,Object::typeid};\n      MethodInfo^ writeLine2objMI = Console::typeid-&gt;GetMethod( &quot;WriteLine&quot;, temp2 );\n      array&lt;Type^&gt;^temp3 = {String::typeid};\n      MethodInfo^ getFilesMI = Directory::typeid-&gt;GetMethod( &quot;GetFiles&quot;, temp3 );\n      myFCMethod-&gt;InitLocals = true;\n      ILGenerator^ myFCIL = myFCMethod-&gt;GetILGenerator();\n      Console::WriteLine( &quot;-- Generating MSIL method body...&quot; );\n      LocalBuilder^ v0 = myFCIL-&gt;DeclareLocal( String::typeid );\n      LocalBuilder^ v1 = myFCIL-&gt;DeclareLocal( int::typeid );\n      LocalBuilder^ v2 = myFCIL-&gt;DeclareLocal( String::typeid );\n      LocalBuilder^ v3 = myFCIL-&gt;DeclareLocal( array&lt;String^&gt;::typeid );\n      Label evalForEachLabel = myFCIL-&gt;DefineLabel();\n      Label topOfForEachLabel = myFCIL-&gt;DefineLabel();\n\n      // Build the method body.\n      myFCIL-&gt;EmitCall( OpCodes::Call, currentDirGetMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v0 );\n      myFCIL-&gt;Emit( OpCodes::Ldc_I4_0 );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldstr, &quot;---&quot; );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine0objMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v0 );\n      myFCIL-&gt;EmitCall( OpCodes::Call, getFilesMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v3 );\n      myFCIL-&gt;Emit( OpCodes::Br_S, evalForEachLabel );\n\n      // foreach loop starts here.\n      myFCIL-&gt;MarkLabel( topOfForEachLabel );\n\n      // Load array of strings and index, store value at index for output.\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v3 );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldelem_Ref );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v2 );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v2 );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine0objMI, nullptr );\n\n      // Increment counter by one.\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldc_I4_1 );\n      myFCIL-&gt;Emit( OpCodes::Add );\n      myFCIL-&gt;Emit( OpCodes::Stloc_S, v1 );\n\n      // Determine if end of file list array has been reached.\n      myFCIL-&gt;MarkLabel( evalForEachLabel );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v3 );\n      myFCIL-&gt;Emit( OpCodes::Ldlen );\n      myFCIL-&gt;Emit( OpCodes::Conv_I4 );\n      myFCIL-&gt;Emit( OpCodes::Blt_S, topOfForEachLabel );\n\n      //foreach loop end here.\n      myFCIL-&gt;Emit( OpCodes::Ldstr, &quot;---&quot; );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine0objMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Ldstr, &quot;There are {0} files in {1}.&quot; );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v1 );\n      myFCIL-&gt;Emit( OpCodes::Box, int::typeid );\n      myFCIL-&gt;Emit( OpCodes::Ldloc_S, v0 );\n      myFCIL-&gt;EmitCall( OpCodes::Call, writeLine2objMI, nullptr );\n      myFCIL-&gt;Emit( OpCodes::Ret );\n      Type^ myType = myTypeBuilder-&gt;CreateType();\n      myAsmBuilder-&gt;SetEntryPoint( myFCMethod );\n      myAsmBuilder-&gt;Save( executableName );\n      Console::WriteLine( &quot;-- Method generated, type completed, and assembly saved to disk.&quot; );\n      return myType;\n   }\n};\n\nint main()\n{\n   String^ domainDir;\n   String^ executableName = nullptr;\n   Console::Write( &quot;Enter a name for the file counting assembly: &quot; );\n   String^ executableNameNoExe = Console::ReadLine();\n   executableName = String::Concat( executableNameNoExe, &quot;.exe&quot; );\n   Console::WriteLine( &quot;---&quot; );\n   domainDir = Environment::CurrentDirectory;\n   AppDomain^ curDomain = Thread::GetDomain();\n\n   // Create a new AppDomain, with the current directory as the base.\n   Console::WriteLine( &quot;Current Directory: {0}&quot;, Environment::CurrentDirectory );\n   AppDomainSetup^ mySetupInfo = gcnew AppDomainSetup;\n   mySetupInfo-&gt;ApplicationBase = domainDir;\n   mySetupInfo-&gt;ApplicationName = executableNameNoExe;\n   mySetupInfo-&gt;LoaderOptimization = LoaderOptimization::SingleDomain;\n   AppDomain^ myDomain = AppDomain::CreateDomain( executableNameNoExe, nullptr, mySetupInfo );\n   Console::WriteLine( &quot;Creating a new AppDomain &#39;{0}&#39;...&quot;, executableNameNoExe );\n   Console::WriteLine( &quot;-- Base Directory = &#39;{0}&#39;&quot;, myDomain-&gt;BaseDirectory );\n   Console::WriteLine( &quot;-- Shadow Copy? = &#39;{0}&#39;&quot;, myDomain-&gt;ShadowCopyFiles );\n   Console::WriteLine( &quot;---&quot; );\n   Type^ myFCType = ADDyno::CreateADynamicAssembly(  &amp;curDomain, executableNameNoExe );\n   Console::WriteLine( &quot;Loading &#39;{0}&#39; from &#39;{1}&#39;...&quot;, executableName, myDomain-&gt;BaseDirectory );\n   BindingFlags bFlags = static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::CreateInstance | BindingFlags::Instance);\n   Object^ myObjInstance = myDomain-&gt;CreateInstanceAndUnwrap( executableNameNoExe, executableNameNoExe, false, bFlags, nullptr, nullptr, nullptr, nullptr, nullptr );\n   Console::WriteLine( &quot;Executing method &#39;CountLocalFiles&#39; in {0}...&quot;, myObjInstance );\n   array&lt;Object^&gt;^temp4 = nullptr;\n   myFCType-&gt;InvokeMember( &quot;CountLocalFiles&quot;, BindingFlags::InvokeMethod, nullptr, myObjInstance, temp4 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"ADDyno#1\">\nusing System;\nusing System.IO;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Runtime.Remoting;\n\nclass ADDyno\n\n{\n\n   public static Type CreateADynamicAssembly(ref AppDomain myNewDomain,\n\t\t\t\t\t     string executableNameNoExe)\n   {\n\n\tstring executableName = executableNameNoExe + &quot;.exe&quot;;\n\n\tAssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = executableNameNoExe;\n\tmyAsmName.CodeBase = Environment.CurrentDirectory;\n\n\tAssemblyBuilder myAsmBuilder = myNewDomain.DefineDynamicAssembly(myAsmName,\n\t\t\t\t\t\tAssemblyBuilderAccess.RunAndSave);\n\tConsole.WriteLine(&quot;-- Dynamic Assembly instantiated.&quot;);\n\n\tModuleBuilder myModBuilder = myAsmBuilder.DefineDynamicModule(executableNameNoExe,\n\t\t\t\t\t\t\t\t      executableName);\n\n\tTypeBuilder myTypeBuilder = myModBuilder.DefineType(executableNameNoExe,\n\t\t\t\t\t\tTypeAttributes.Public,\n\t\t\t\t\t\ttypeof(MarshalByRefObject));\n\n\tMethodBuilder myFCMethod = myTypeBuilder.DefineMethod(&quot;CountLocalFiles&quot;,\n\t\t\t\t\t\tMethodAttributes.Public |\n\t\t\t\t\t\tMethodAttributes.Static,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tnew Type[] {  });\n\n\tMethodInfo currentDirGetMI = typeof(Environment).GetProperty(&quot;CurrentDirectory&quot;).GetGetMethod();\n\tMethodInfo writeLine0objMI = typeof(Console).GetMethod(&quot;WriteLine&quot;,\n\t\t\t\t     new Type[] { typeof(string) });\n\tMethodInfo writeLine2objMI = typeof(Console).GetMethod(&quot;WriteLine&quot;,\n\t\t\t\t     new Type[] { typeof(string), typeof(object), typeof(object) });\n\tMethodInfo getFilesMI = typeof(Directory).GetMethod(&quot;GetFiles&quot;, \n\t\t\t\tnew Type[] { typeof(string) });\n\n\tmyFCMethod.InitLocals = true;\n\n\tILGenerator myFCIL = myFCMethod.GetILGenerator();\n\n\tConsole.WriteLine(&quot;-- Generating MSIL method body...&quot;);\n\tLocalBuilder v0 = myFCIL.DeclareLocal(typeof(string));\n\tLocalBuilder v1 = myFCIL.DeclareLocal(typeof(int));\n\tLocalBuilder v2 = myFCIL.DeclareLocal(typeof(string));\n\tLocalBuilder v3 = myFCIL.DeclareLocal(typeof(string[]));\n\n\tLabel evalForEachLabel = myFCIL.DefineLabel();\n\tLabel topOfForEachLabel = myFCIL.DefineLabel();\n\n\t// Build the method body.\n\n\tmyFCIL.EmitCall(OpCodes.Call, currentDirGetMI, null);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v0);\n\tmyFCIL.Emit(OpCodes.Ldc_I4_0);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v0);\n\tmyFCIL.EmitCall(OpCodes.Call, getFilesMI, null);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v3);\n\n\tmyFCIL.Emit(OpCodes.Br_S, evalForEachLabel);\n\n\t// foreach loop starts here.\n\tmyFCIL.MarkLabel(topOfForEachLabel);\n\t\n        // Load array of strings and index, store value at index for output.\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v3);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldelem_Ref);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v2);\n\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v2);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);\n\n\t// Increment counter by one.\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldc_I4_1);\n\tmyFCIL.Emit(OpCodes.Add);\n\tmyFCIL.Emit(OpCodes.Stloc_S, v1);\n\n\t// Determine if end of file list array has been reached.\n\tmyFCIL.MarkLabel(evalForEachLabel);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v3);\n\tmyFCIL.Emit(OpCodes.Ldlen);\n\tmyFCIL.Emit(OpCodes.Conv_I4);\n\tmyFCIL.Emit(OpCodes.Blt_S, topOfForEachLabel);\n\t//foreach loop end here.\n\n\tmyFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine0objMI, null);\n\tmyFCIL.Emit(OpCodes.Ldstr, &quot;There are {0} files in {1}.&quot;);\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v1);\n\tmyFCIL.Emit(OpCodes.Box, typeof(int));\n\tmyFCIL.Emit(OpCodes.Ldloc_S, v0);\n\tmyFCIL.EmitCall(OpCodes.Call, writeLine2objMI, null);\n\n\tmyFCIL.Emit(OpCodes.Ret);\n\n\tType myType = myTypeBuilder.CreateType();\n\n\tmyAsmBuilder.SetEntryPoint(myFCMethod);\n\tmyAsmBuilder.Save(executableName);\t\t\n\tConsole.WriteLine(&quot;-- Method generated, type completed, and assembly saved to disk.&quot;); \n\n\treturn myType;\n\n   }\n\n   public static void Main() \n   {\n\n\tstring domainDir, executableName = null;\n\t\n\tConsole.Write(&quot;Enter a name for the file counting assembly: &quot;);\n\tstring executableNameNoExe = Console.ReadLine();\n\texecutableName = executableNameNoExe + &quot;.exe&quot;;\n\tConsole.WriteLine(&quot;---&quot;);\n\n\tdomainDir = Environment.CurrentDirectory;\n\n\tAppDomain curDomain = Thread.GetDomain();\t\n\n\n\t// Create a new AppDomain, with the current directory as the base.\n\n\tConsole.WriteLine(&quot;Current Directory: {0}&quot;, Environment.CurrentDirectory);\n\tAppDomainSetup mySetupInfo = new AppDomainSetup();\n\tmySetupInfo.ApplicationBase = domainDir;\n\tmySetupInfo.ApplicationName = executableNameNoExe;\n\tmySetupInfo.LoaderOptimization = LoaderOptimization.SingleDomain;\n\n\tAppDomain myDomain = AppDomain.CreateDomain(executableNameNoExe,\n\t\t\t\t\tnull, mySetupInfo);\n\n\tConsole.WriteLine(&quot;Creating a new AppDomain &#39;{0}&#39;...&quot;,\n\t\t\t\t\texecutableNameNoExe);\n\n\tConsole.WriteLine(&quot;-- Base Directory = &#39;{0}&#39;&quot;, myDomain.BaseDirectory); \n\tConsole.WriteLine(&quot;-- Shadow Copy? = &#39;{0}&#39;&quot;, myDomain.ShadowCopyFiles); \n\n\tConsole.WriteLine(&quot;---&quot;);\n\tType myFCType = CreateADynamicAssembly(ref curDomain, \n\t\t\t\t\t executableNameNoExe);\n\n\tConsole.WriteLine(&quot;Loading &#39;{0}&#39; from &#39;{1}&#39;...&quot;, executableName,\n\t\t\t  myDomain.BaseDirectory.ToString());\n\n\n\tBindingFlags bFlags = (BindingFlags.Public | BindingFlags.CreateInstance |\n\t\t\t       BindingFlags.Instance);\n\n\tObject myObjInstance = myDomain.CreateInstanceAndUnwrap(executableNameNoExe,\n\t\t\t\texecutableNameNoExe, false, bFlags, \n\t\t\t\tnull, null, null, null, null);\n\n\tConsole.WriteLine(&quot;Executing method &#39;CountLocalFiles&#39; in {0}...&quot;,\n\t\t\t   myObjInstance.ToString());\n\n\tmyFCType.InvokeMember(&quot;CountLocalFiles&quot;, BindingFlags.InvokeMethod, null,\n\t\t\t\tmyObjInstance, new object[] { });\n\t\t\t\n\t\t\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ADDyno#1\">Imports System\nImports System.IO\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\nImports System.Runtime.Remoting\n\n\n\nClass ADDyno\n   \n   \n   \n   Public Shared Function CreateADynamicAssembly(ByRef myNewDomain As AppDomain, executableNameNoExe As String) As Type\n      \n      Dim executableName As String = executableNameNoExe + &quot;.exe&quot;\n      \n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = executableNameNoExe\n      myAsmName.CodeBase = Environment.CurrentDirectory\n      \n      Dim myAsmBuilder As AssemblyBuilder = myNewDomain.DefineDynamicAssembly(myAsmName, AssemblyBuilderAccess.RunAndSave)\n      Console.WriteLine(&quot;-- Dynamic Assembly instantiated.&quot;)\n      \n      Dim myModBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(executableNameNoExe, executableName)\n      \n      Dim myTypeBuilder As TypeBuilder = myModBuilder.DefineType(executableNameNoExe, TypeAttributes.Public, GetType(MarshalByRefObject))\n      \n      Dim myFCMethod As MethodBuilder = myTypeBuilder.DefineMethod(&quot;CountLocalFiles&quot;, MethodAttributes.Public Or MethodAttributes.Static, Nothing, New Type() {})\n      \n      Dim currentDirGetMI As MethodInfo = GetType(Environment).GetProperty(&quot;CurrentDirectory&quot;).GetGetMethod()\n      Dim writeLine0objMI As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String)})\n      Dim writeLine2objMI As MethodInfo = GetType(Console).GetMethod(&quot;WriteLine&quot;, New Type() {GetType(String), GetType(Object), GetType(Object)})\n      Dim getFilesMI As MethodInfo = GetType(Directory).GetMethod(&quot;GetFiles&quot;, New Type() {GetType(String)})\n      \n      myFCMethod.InitLocals = True\n      \n      Dim myFCIL As ILGenerator = myFCMethod.GetILGenerator()\n      \n      Console.WriteLine(&quot;-- Generating MSIL method body...&quot;)\n      Dim v0 As LocalBuilder = myFCIL.DeclareLocal(GetType(String))\n      Dim v1 As LocalBuilder = myFCIL.DeclareLocal(GetType(Integer))\n      Dim v2 As LocalBuilder = myFCIL.DeclareLocal(GetType(String))\n      Dim v3 As LocalBuilder = myFCIL.DeclareLocal(GetType(String()))\n      \n      Dim evalForEachLabel As Label = myFCIL.DefineLabel()\n      Dim topOfForEachLabel As Label = myFCIL.DefineLabel()\n      \n      &#39; Build the method body.\n      myFCIL.EmitCall(OpCodes.Call, currentDirGetMI, Nothing)\n      myFCIL.Emit(OpCodes.Stloc_S, v0)\n      myFCIL.Emit(OpCodes.Ldc_I4_0)\n      myFCIL.Emit(OpCodes.Stloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;)\n      myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, Nothing)\n      myFCIL.Emit(OpCodes.Ldloc_S, v0)\n      myFCIL.EmitCall(OpCodes.Call, getFilesMI, Nothing)\n      myFCIL.Emit(OpCodes.Stloc_S, v3)\n      \n      myFCIL.Emit(OpCodes.Br_S, evalForEachLabel)\n      \n      &#39; foreach loop starts here.\n      myFCIL.MarkLabel(topOfForEachLabel)\n      \n      &#39; Load array of strings and index, store value at index for output.\n      myFCIL.Emit(OpCodes.Ldloc_S, v3)\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldelem_Ref)\n      myFCIL.Emit(OpCodes.Stloc_S, v2)\n      \n      myFCIL.Emit(OpCodes.Ldloc_S, v2)\n      myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, Nothing)\n      \n      &#39; Increment counter by one.\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldc_I4_1)\n      myFCIL.Emit(OpCodes.Add)\n      myFCIL.Emit(OpCodes.Stloc_S, v1)\n      \n      &#39; Determine if end of file list array has been reached.\n      myFCIL.MarkLabel(evalForEachLabel)\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Ldloc_S, v3)\n      myFCIL.Emit(OpCodes.Ldlen)\n      myFCIL.Emit(OpCodes.Conv_I4)\n      myFCIL.Emit(OpCodes.Blt_S, topOfForEachLabel)\n      &#39;foreach loop end here.\n      myFCIL.Emit(OpCodes.Ldstr, &quot;---&quot;)\n      myFCIL.EmitCall(OpCodes.Call, writeLine0objMI, Nothing)\n      myFCIL.Emit(OpCodes.Ldstr, &quot;There are {0} files in {1}.&quot;)\n      myFCIL.Emit(OpCodes.Ldloc_S, v1)\n      myFCIL.Emit(OpCodes.Box, GetType(Integer))\n      myFCIL.Emit(OpCodes.Ldloc_S, v0)\n      myFCIL.EmitCall(OpCodes.Call, writeLine2objMI, Nothing)\n      \n      myFCIL.Emit(OpCodes.Ret)\n      \n      Dim myType As Type = myTypeBuilder.CreateType()\n      \n      myAsmBuilder.SetEntryPoint(myFCMethod)\n      myAsmBuilder.Save(executableName)\n      Console.WriteLine(&quot;-- Method generated, type completed, and assembly saved to disk.&quot;)\n      \n      Return myType\n   End Function &#39;CreateADynamicAssembly\n    \n   \n   Public Shared Sub Main()\n      \n      Dim executableName As String = Nothing\n      Dim domainDir As String\n      \n      Console.Write(&quot;Enter a name for the file counting assembly: &quot;)\n      Dim executableNameNoExe As String = Console.ReadLine()\n      executableName = executableNameNoExe + &quot;.exe&quot;\n      Console.WriteLine(&quot;---&quot;)\n      \n      domainDir = Environment.CurrentDirectory\n      \n      Dim curDomain As AppDomain = Thread.GetDomain()\n      \n      \n      &#39; Create a new AppDomain, with the current directory as the base.\n      Console.WriteLine(&quot;Current Directory: {0}&quot;, Environment.CurrentDirectory)\n      Dim mySetupInfo As New AppDomainSetup()\n      mySetupInfo.ApplicationBase = domainDir\n      mySetupInfo.ApplicationName = executableNameNoExe\n      mySetupInfo.LoaderOptimization = LoaderOptimization.SingleDomain\n      \n      Dim myDomain As AppDomain = AppDomain.CreateDomain(executableNameNoExe, Nothing, mySetupInfo)\n      \n      Console.WriteLine(&quot;Creating a new AppDomain &#39;{0}&#39;...&quot;, executableNameNoExe)\n      \n      Console.WriteLine(&quot;-- Base Directory = &#39;{0}&#39;&quot;, myDomain.BaseDirectory)\n      Console.WriteLine(&quot;-- Shadow Copy? = &#39;{0}&#39;&quot;, myDomain.ShadowCopyFiles)\n      \n      Console.WriteLine(&quot;---&quot;)\n      Dim myFCType As Type = CreateADynamicAssembly(curDomain, executableNameNoExe)\n      \n      Console.WriteLine(&quot;Loading &#39;{0}&#39; from &#39;{1}&#39;...&quot;, executableName, myDomain.BaseDirectory.ToString())\n      \n      \n      Dim bFlags As BindingFlags = BindingFlags.Public Or BindingFlags.CreateInstance Or BindingFlags.Instance\n      \n      Dim myObjInstance As [Object] = myDomain.CreateInstanceAndUnwrap(executableNameNoExe, executableNameNoExe, False, bFlags, Nothing, Nothing, Nothing, Nothing, Nothing)\n      \n      Console.WriteLine(&quot;Executing method &#39;CountLocalFiles&#39; in {0}...&quot;, myObjInstance.ToString())\n      \n      myFCType.InvokeMember(&quot;CountLocalFiles&quot;, BindingFlags.InvokeMethod, Nothing, myObjInstance, New Object() {})\n   End Sub &#39;Main\nEnd Class &#39;ADDyno \n\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_PartialTrustVisibleAssemblies\">\r\n    \r\n            <a id=\"System_AppDomainSetup_PartialTrustVisibleAssemblies_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PartialTrustVisibleAssemblies</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a list of assemblies marked with the <a class=\"xref\" href=\"system.security.partialtrustvisibilitylevel\" data-linktype=\"relative-path\">PartialTrustVisibilityLevel</a> flag that are made visible to partial-trust code running in a sandboxed application domain.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string[] PartialTrustVisibleAssemblies { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</div>\r\n                  </div>\r\n                  <p>An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Beginning with the .NET Framework 4, the <a class=\"xref\" href=\"system.security.allowpartiallytrustedcallersattribute\" data-linktype=\"relative-path\">AllowPartiallyTrustedCallersAttribute</a> (APTCA) attribute can be made conditional by setting its <a class=\"xref\" href=\"system.security.allowpartiallytrustedcallersattribute#System_Security_AllowPartiallyTrustedCallersAttribute_PartialTrustVisibilityLevel_\" data-linktype=\"relative-path\">PartialTrustVisibilityLevel</a> property to <a class=\"xref\" href=\"system.security.partialtrustvisibilitylevel\" data-linktype=\"relative-path\">PartialTrustVisibilityLevel</a>. An APTCA assembly that is marked with <a class=\"xref\" href=\"system.security.partialtrustvisibilitylevel\" data-linktype=\"relative-path\">PartialTrustVisibilityLevel</a> cannot be used by partially trusted code unless the host application allows it.  </p>\n<p> The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property. For example, an element of the array might look like the following: &quot;MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9&quot;.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> If you are using a subclass of <a class=\"xref\" href=\"system.appdomainmanager\" data-linktype=\"relative-path\">AppDomainManager</a>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the PartialTrustVisibleAssemblies property of the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> you use to create application domains. Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> When you are debugging an application that is running in a sandboxed application domain, some <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> messages can be misleading. For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.</p>\n</div>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_PrivateBinPath\">\r\n    \r\n            <a id=\"System_AppDomainSetup_PrivateBinPath_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrivateBinPath</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the list of directories under the application base directory that are probed for private assemblies.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PrivateBinPath { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A list of directory names separated by semicolons.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Private assemblies are deployed in the same directory structure as the application. If the directories specified for PrivateBinPath are not under <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a>, they are ignored.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_PrivateBinPathProbe\">\r\n    \r\n            <a id=\"System_AppDomainSetup_PrivateBinPathProbe_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">PrivateBinPathProbe</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a string value that includes or excludes <span class=\"xref\">stem.AppDomainSetup.ApplicationBase*</span> from the search path for the application, and searches only <span class=\"xref\">stem.AppDomainSetup.PrivateBinPath*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string PrivateBinPathProbe { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A null reference (<code>Nothing</code> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path. The default value is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to any non-null string value, including <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">System.String</a> (&quot;&quot;), to exclude the application directory path â€” that is, <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> â€” from the search path for the application, and to search for assemblies only in <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_SandboxInterop\">\r\n    \r\n            <a id=\"System_AppDomainSetup_SandboxInterop_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SandboxInterop</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <code>QueryInterface</code> is performed on each call.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool SandboxInterop { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if interface caching is disabled for interop calls in application domains created with the current <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Disabling interface caching has a significant impact on the performance of interop calls.  </p>\n<p> This member is introduced in the  .NET Framework 3.5 .</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ShadowCopyDirectories\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ShadowCopyDirectories_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShadowCopyDirectories</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the names of the directories containing assemblies to be shadow copied.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ShadowCopyDirectories { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A list of directory names separated by semicolons.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> properties. The ShadowCopyDirectories property restricts the shadow copy to the assemblies in the directories specified by ShadowCopyDirectories.  </p>\n<p> If you donâ€™t assign a string to the ShadowCopyDirectories property, or if you set this property to <code>null</code>, all assemblies in the directories specified by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ApplicationBase_\" data-linktype=\"relative-path\">ApplicationBase</a> and <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_PrivateBinPath_\" data-linktype=\"relative-path\">PrivateBinPath</a> properties are shadow copied.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Directory paths must not contain semicolons, because the semicolon is the delimiter character. There is no escape character for semicolons.  </p>\n</div>\n<p> When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded. The original assembly file is not locked, so it can be updated. For more information on shadow copying, see <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_ShadowCopyFiles\">\r\n    \r\n            <a id=\"System_AppDomainSetup_ShadowCopyFiles_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ShadowCopyFiles</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a string that indicates whether shadow copying is turned on or off.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ShadowCopyFiles { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The string value &quot;true&quot; to indicate that shadow copying is turned on; or &quot;false&quot; to indicate that shadow copying is turned off.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>For more information on shadow copying, see <a href=\"../Topic/Shadow%20Copying%20Assemblies.md\" data-linktype=\"relative-path\">Shadow Copying Assemblies</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_TargetFrameworkName\">\r\n    \r\n            <a id=\"System_AppDomainSetup_TargetFrameworkName_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TargetFrameworkName</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <span class=\"xref\">stem.Runtime.Versioning.FrameworkName.#ctor(System.String)</span> constructor.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string TargetFrameworkName { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>The target version and profile of the .NET Framework.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile. If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility. This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.  </p>\n<p> For client applications, the value of the TargetFrameworkName property is inferred from the <a class=\"xref\" href=\"system.runtime.versioning.targetframeworkattribute\" data-linktype=\"relative-path\">TargetFrameworkAttribute</a> attribute. In Visual Studio 2010 and later, this attribute is added to the assembly automatically based on the setting of the project&#39;s <strong>Target Framework</strong> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_GetConfigurationBytes\">\r\n    \r\n            <a id=\"System_AppDomainSetup_GetConfigurationBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetConfigurationBytes()</div>        \r\n          </div>\r\n    \r\n            <p>Returns the XML configuration information set by the <span class=\"xref\">stem.AppDomainSetup.SetConfigurationBytes*</span> method, which overrides the application&#39;s XML configuration information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public byte[] GetConfigurationBytes ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </div>\r\n                  <p>An array that contains the XML configuration information that was set by the <span class=\"xref\">stem.AppDomainSetup.SetConfigurationBytes*</span> method, or <code>null</code> if the <span class=\"xref\">stem.AppDomainSetup.SetConfigurationBytes*</span> method has not been called.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_SetConfigurationBytes_\" data-linktype=\"relative-path\">SetConfigurationBytes</a> method provides a way to override the configuration information of an application that creates a new application domain. The configuration file information in <code>value</code> overrides the configuration file information for the application. For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Some consumers of configuration file information do not use the information stored by the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_SetConfigurationBytes_\" data-linktype=\"relative-path\">SetConfigurationBytes</a> method. The runtime does not enforce this. To ensure that all configuration file information is overridden in a new application domain, use the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ConfigurationFile_\" data-linktype=\"relative-path\">ConfigurationFile</a> property to specify a configuration file. The <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_SetConfigurationBytes_\" data-linktype=\"relative-path\">SetConfigurationBytes</a> method does affect assembly binding.  </p>\n</div>\n<p> The XML in <code>value</code> is the same as the XML in a normal configuration file, except that it is stored as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array.  </p>\n<p> To access the configuration bytes for an application domain, use the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_SetupInformation_\" data-linktype=\"relative-path\">SetupInformation</a> property to get the <a class=\"xref\" href=\"system.appdomainsetup\" data-linktype=\"relative-path\">AppDomainSetup</a> object for the application domain, then use the GetConfigurationBytes method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_SetCompatibilitySwitches_System_Collections_Generic_IEnumerable_System_String__\">\r\n    \r\n            <a id=\"System_AppDomainSetup_SetCompatibilitySwitches_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetCompatibilitySwitches(IEnumerable&lt;String&gt;)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetCompatibilitySwitches (System.Collections.Generic.IEnumerable&lt;string&gt; switches);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>switches</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An enumerable set of string values that specify compatibility switches, or <code>null</code> to erase the existing compatibility switches.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Major versions of the .NET Framework sometimes introduce breaking changes from the previous version. For example, the .NET Framework 4 introduces a small number of breaking changes from the  .NET Framework 3.5 . Use the SetCompatibilitySwitches method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.  </p>\n<p> Each time you call this method, it replaces the existing switch settings. To erase the settings, specify <code>null</code> for the <code>switches</code> parameter.  </p>\n<p> The set of string values you provide for <code>switches</code> can be a simple string array, because arrays implement the <a class=\"xref\" href=\"system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> interface.  </p>\n<p> The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.  </p>\n<table>\n<thead>\n<tr>\n<th>Switch</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;NetFx40_LegacySecurityPolicy&quot;</td>\n<td>Code access security (CAS) for the .NET Framework 3.5 is enabled in this application domain. See <a href=\"../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;NetFx40_LegacySecurityPolicy&amp;gt; Element</a>.</td>\n</tr>\n<tr>\n<td>&quot;NetFx40_Legacy20SortingBehavior&quot;</td>\n<td>String sorting defaults for the .NET Framework 3.5 are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system. See <a href=\"../Topic/%3CCompatSortNLSVersion%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;CompatSortNLSVersion&amp;gt; Element</a>.</td>\n</tr>\n<tr>\n<td>&quot;NetFx40_Legacy40SortingBehavior&quot;</td>\n<td>String sorting defaults for the .NET Framework 4 and Unicode 5.0 are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.</td>\n</tr>\n<tr>\n<td>&quot;NetFx40_TimeSpanLegacyFormatMode&quot;</td>\n<td><a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> formatting behavior for the .NET Framework 3.5 is enabled in this application domain. See <a href=\"../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;TimeSpan_LegacyFormatMode&amp;gt; Element</a> and the &quot;Restoring Legacy TimeSpan Formatting&quot; section of the <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> topic.</td>\n</tr>\n<tr>\n<td>&quot;UseRandomizedStringHashAlgorithm&quot;</td>\n<td>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains. See <a href=\"../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;UseRandomizedStringHashAlgorithm&amp;gt; Element</a>.</td>\n</tr>\n</tbody>\n</table>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_SetConfigurationBytes_System_Byte___\">\r\n    \r\n            <a id=\"System_AppDomainSetup_SetConfigurationBytes_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetConfigurationBytes(Byte[])</div>        \r\n          </div>\r\n    \r\n            <p>Provides XML configuration information for the application domain, replacing the application&#39;s XML configuration information.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetConfigurationBytes (byte[] value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An array that contains the XML configuration information to be used for the application domain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The SetConfigurationBytes method provides a way to replace the configuration information of an application that creates a new application domain. The configuration file information in <code>value</code>replaces the configuration file information for the application. For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Some consumers of configuration file information do not use the information stored by the SetConfigurationBytes method. The runtime does not enforce this. To ensure that all configuration file information is replaced in a new application domain, use the <a class=\"xref\" href=\"system.appdomainsetup#System_AppDomainSetup_ConfigurationFile_\" data-linktype=\"relative-path\">ConfigurationFile</a> property to specify a configuration file. The SetConfigurationBytes method does affect assembly binding.  </p>\n</div>\n<p> The XML in <code>value</code> is the same as the XML in a normal configuration file, except that it is stored as a <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_AppDomainSetup_SetNativeFunction_System_String_System_Int32_System_IntPtr_\">\r\n    \r\n            <a id=\"System_AppDomainSetup_SetNativeFunction_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetNativeFunction(String,Int32,IntPtr)</div>        \r\n          </div>\r\n    \r\n            <p>Provides the common language runtime with an alternate implementation of a string comparison function.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void SetNativeFunction (string functionName, int functionVersion, IntPtr functionPointer);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>functionName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The name of the string comparison function to override.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>functionVersion</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The function version. For .NET Framework 4.5, its value must be 1 or greater.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>functionPointer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A pointer to the function that overrides <code>functionName</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>functionName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>functionVersion</code> is not 1 or greater.  </p>\n<p> -or-  </p>\n<p> <code>functionPointer</code> is <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following string comparison and sorting methods can be overridden by the SetNativeFunction method:  </p>\n<ul>\n<li><p><code>IsNLSDefinedString</code>  </p>\n</li>\n<li><p><code>CompareStringEx</code>  </p>\n</li>\n<li><p><code>LCMapStringEx</code>  </p>\n</li>\n<li><p><code>FindNLSStringEx</code>  </p>\n</li>\n<li><p><code>CompareStringOrdinal</code>  </p>\n</li>\n<li><p><code>GetNLSVersion</code>  </p>\n<p>For information about these functions, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=228134\" data-linktype=\"external\">National Language Support Functions</a>.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.AppDomainSetup.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.AppDomainSetup.yml\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup..ctor\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ActivationArguments\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.AppDomainInitializer\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.AppDomainInitializerArguments\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.AppDomainManagerAssembly\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.AppDomainManagerType\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ApplicationBase\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ApplicationName\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ApplicationTrust\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.CachePath\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ConfigurationFile\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.DisallowApplicationBaseProbing\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.DisallowBindingRedirects\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.DisallowCodeDownload\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.DisallowPublisherPolicy\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.DynamicBase\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.GetConfigurationBytes\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.LicenseFile\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.LoaderOptimization\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.PartialTrustVisibleAssemblies\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.PrivateBinPath\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.PrivateBinPathProbe\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.SandboxInterop\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.SetCompatibilitySwitches\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.SetConfigurationBytes\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.SetNativeFunction\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ShadowCopyDirectories\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.ShadowCopyFiles\">\r\n<meta name=\"APIName\" content=\"System.AppDomainSetup.TargetFrameworkName\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"62f7c90d-6e6e-0567-7f9c-0402cc30ed4f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents assembly binding information that can be added to an instance of .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.AppDomainSetup\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.AppDomainSetup.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.AppDomainSetup.yml","open_to_public_contributors":true,"api_name":["System.AppDomainSetup","System.AppDomainSetup..ctor","System.AppDomainSetup.ActivationArguments","System.AppDomainSetup.AppDomainInitializer","System.AppDomainSetup.AppDomainInitializerArguments","System.AppDomainSetup.AppDomainManagerAssembly","System.AppDomainSetup.AppDomainManagerType","System.AppDomainSetup.ApplicationBase","System.AppDomainSetup.ApplicationName","System.AppDomainSetup.ApplicationTrust","System.AppDomainSetup.CachePath","System.AppDomainSetup.ConfigurationFile","System.AppDomainSetup.DisallowApplicationBaseProbing","System.AppDomainSetup.DisallowBindingRedirects","System.AppDomainSetup.DisallowCodeDownload","System.AppDomainSetup.DisallowPublisherPolicy","System.AppDomainSetup.DynamicBase","System.AppDomainSetup.GetConfigurationBytes","System.AppDomainSetup.LicenseFile","System.AppDomainSetup.LoaderOptimization","System.AppDomainSetup.PartialTrustVisibleAssemblies","System.AppDomainSetup.PrivateBinPath","System.AppDomainSetup.PrivateBinPathProbe","System.AppDomainSetup.SandboxInterop","System.AppDomainSetup.SetCompatibilitySwitches","System.AppDomainSetup.SetConfigurationBytes","System.AppDomainSetup.SetNativeFunction","System.AppDomainSetup.ShadowCopyDirectories","System.AppDomainSetup.ShadowCopyFiles","System.AppDomainSetup.TargetFrameworkName"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.AppDomainSetup","System::AppDomainSetup","System.AppDomainSetup.#ctor","System::AppDomainSetup::#ctor","System.AppDomainSetup.ActivationArguments","System::AppDomainSetup::ActivationArguments","System.AppDomainSetup.AppDomainInitializer","System::AppDomainSetup::AppDomainInitializer","System.AppDomainSetup.AppDomainInitializerArguments","System::AppDomainSetup::AppDomainInitializerArguments","System.AppDomainSetup.AppDomainManagerAssembly","System::AppDomainSetup::AppDomainManagerAssembly","System.AppDomainSetup.AppDomainManagerType","System::AppDomainSetup::AppDomainManagerType","System.AppDomainSetup.ApplicationBase","System::AppDomainSetup::ApplicationBase","System.AppDomainSetup.ApplicationName","System::AppDomainSetup::ApplicationName","System.AppDomainSetup.ApplicationTrust","System::AppDomainSetup::ApplicationTrust","System.AppDomainSetup.CachePath","System::AppDomainSetup::CachePath","System.AppDomainSetup.ConfigurationFile","System::AppDomainSetup::ConfigurationFile","System.AppDomainSetup.DisallowApplicationBaseProbing","System::AppDomainSetup::DisallowApplicationBaseProbing","System.AppDomainSetup.DisallowBindingRedirects","System::AppDomainSetup::DisallowBindingRedirects","System.AppDomainSetup.DisallowCodeDownload","System::AppDomainSetup::DisallowCodeDownload","System.AppDomainSetup.DisallowPublisherPolicy","System::AppDomainSetup::DisallowPublisherPolicy","System.AppDomainSetup.DynamicBase","System::AppDomainSetup::DynamicBase","System.AppDomainSetup.GetConfigurationBytes","System::AppDomainSetup::GetConfigurationBytes","System.AppDomainSetup.LicenseFile","System::AppDomainSetup::LicenseFile","System.AppDomainSetup.LoaderOptimization","System::AppDomainSetup::LoaderOptimization","System.AppDomainSetup.PartialTrustVisibleAssemblies","System::AppDomainSetup::PartialTrustVisibleAssemblies","System.AppDomainSetup.PrivateBinPath","System::AppDomainSetup::PrivateBinPath","System.AppDomainSetup.PrivateBinPathProbe","System::AppDomainSetup::PrivateBinPathProbe","System.AppDomainSetup.SandboxInterop","System::AppDomainSetup::SandboxInterop","System.AppDomainSetup.SetCompatibilitySwitches","System::AppDomainSetup::SetCompatibilitySwitches","System.AppDomainSetup.SetConfigurationBytes","System::AppDomainSetup::SetConfigurationBytes","System.AppDomainSetup.SetNativeFunction","System::AppDomainSetup::SetNativeFunction","System.AppDomainSetup.ShadowCopyDirectories","System::AppDomainSetup::ShadowCopyDirectories","System.AppDomainSetup.ShadowCopyFiles","System::AppDomainSetup::ShadowCopyFiles","System.AppDomainSetup.TargetFrameworkName","System::AppDomainSetup::TargetFrameworkName"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"62f7c90d-6e6e-0567-7f9c-0402cc30ed4f","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System/AppDomainSetup.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AppDomainSetup class | Microsoft Docs","_op_ogTitle":"AppDomainSetup class","description":"Represents assembly binding information that can be added to an instance of .\n","toc_asset_id":"_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.AppDomainSetup","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.appdomainsetup","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.appdomainsetup","fileRelativePath":"System.AppDomainSetup.html"},"themesRelativePathToOutputRoot":"_themes/"}