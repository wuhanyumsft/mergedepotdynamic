{"content":"    \r\n    <h1 id=\"System_Collections_ReadOnlyCollectionBase\">\r\n      <span class=\"lang-csharp\">ReadOnlyCollectionBase</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides the <code>abstract</code> base class for a strongly typed non-generic read-only collection.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class ReadOnlyCollectionBase : System.Collections.ICollection</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l1\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">ReadOnlyCollectionBase</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>A ReadOnlyCollectionBase instance is always read-only. See <a class=\"xref\" href=\"system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> for a modifiable version of this class.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase__ctor\" data-linktype=\"self-bookmark\">ReadOnlyCollectionBase()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase_Count\" data-linktype=\"self-bookmark\">Count</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase_InnerList\" data-linktype=\"self-bookmark\">InnerList</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the list of elements contained in the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\" data-linktype=\"self-bookmark\">ICollection.CopyTo(Array,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_IsSynchronized\" data-linktype=\"self-bookmark\">ICollection.IsSynchronized</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value indicating whether access to a <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object is synchronized (thread safe).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_SyncRoot\" data-linktype=\"self-bookmark\">ICollection.SyncRoot</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets an object that can be used to synchronize access to a <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase__ctor\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadOnlyCollectionBase()</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected ReadOnlyCollectionBase ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This constructor is an O(1) operation.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase_Count\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase_Count_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Count</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of elements contained in the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual int Count { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of elements contained in the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.  </p>\n<p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ReadOnlyCollectionBase#1\">using namespace System;\nusing namespace System::Collections;\npublic ref class ROCollection: public ReadOnlyCollectionBase\n{\npublic:\n   ROCollection( IList^ sourceList )\n   {\n      InnerList-&gt;AddRange( sourceList );\n   }\n\n   property Object^ Item [int]\n   {\n      Object^ get( int index )\n      {\n         return (InnerList[ index ]);\n      }\n\n   }\n   int IndexOf( Object^ value )\n   {\n      return (InnerList-&gt;IndexOf( value ));\n   }\n\n   bool Contains( Object^ value )\n   {\n      return (InnerList-&gt;Contains( value ));\n   }\n\n};\n\nvoid PrintIndexAndValues( ROCollection^ myCol );\nvoid PrintValues2( ROCollection^ myCol );\nint main()\n{\n   // Create an ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;red&quot; );\n   myAL-&gt;Add( &quot;blue&quot; );\n   myAL-&gt;Add( &quot;yellow&quot; );\n   myAL-&gt;Add( &quot;green&quot; );\n   myAL-&gt;Add( &quot;orange&quot; );\n   myAL-&gt;Add( &quot;purple&quot; );\n\n   // Create a new ROCollection that contains the elements in myAL.\n   ROCollection^ myCol = gcnew ROCollection( myAL );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myCol );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myCol );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains yellow: {0}&quot;, myCol-&gt;Contains( &quot;yellow&quot; ) );\n   Console::WriteLine( &quot;orange is at index {0}.&quot;, myCol-&gt;IndexOf( &quot;orange&quot; ) );\n   Console::WriteLine();\n}\n\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( ROCollection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n\n// Uses the enumerator. \nvoid PrintValues2( ROCollection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using Count and Item):\n   [0]:   red\n   [1]:   blue\n   [2]:   yellow\n   [3]:   green\n   [4]:   orange\n   [5]:   purple\n\nContains yellow: True\norange is at index 4.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ReadOnlyCollectionBase#1\">using System;\nusing System.Collections;\n\npublic class ROCollection : ReadOnlyCollectionBase  {\n\n   public ROCollection( IList sourceList )  {\n      InnerList.AddRange( sourceList );\n   }\n\n   public Object this[ int index ]  {\n      get  {\n         return( InnerList[index] );\n      }\n   }\n\n   public int IndexOf( Object value )  {\n      return( InnerList.IndexOf( value ) );\n   }\n\n   public bool Contains( Object value )  {\n      return( InnerList.Contains( value ) );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n\n      // Create an ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;red&quot; );\n      myAL.Add( &quot;blue&quot; );\n      myAL.Add( &quot;yellow&quot; );\n      myAL.Add( &quot;green&quot; );\n      myAL.Add( &quot;orange&quot; );\n      myAL.Add( &quot;purple&quot; );\n \n      // Create a new ROCollection that contains the elements in myAL.\n      ROCollection myCol = new ROCollection( myAL );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myCol );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myCol );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains yellow: {0}&quot;, myCol.Contains( &quot;yellow&quot; ) );\n      Console.WriteLine( &quot;orange is at index {0}.&quot;, myCol.IndexOf( &quot;orange&quot; ) );\n      Console.WriteLine();\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( ROCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( ROCollection myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( ROCollection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using enumerator):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using Count and Item):\n   [0]:   red\n   [1]:   blue\n   [2]:   yellow\n   [3]:   green\n   [4]:   orange\n   [5]:   purple\n\nContains yellow: True\norange is at index 4.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ReadOnlyCollectionBase#1\">Imports System\nImports System.Collections\n\nPublic Class ROCollection\n    Inherits ReadOnlyCollectionBase\n\n\n    Public Sub New(sourceList As IList)\n        InnerList.AddRange(sourceList)\n    End Sub &#39;New\n\n\n    Default Public ReadOnly Property Item(index As Integer) As [Object]\n        Get\n            Return InnerList(index)\n        End Get\n    End Property\n\n\n    Public Function IndexOf(value As [Object]) As Integer\n        Return InnerList.IndexOf(value)\n    End Function &#39;IndexOf\n\n\n    Public Function Contains(value As [Object]) As Boolean\n        Return InnerList.Contains(value)\n    End Function &#39;Contains\n\nEnd Class &#39;ROCollection \n\n\nPublic Class SamplesCollectionBase\n\n    Public Shared Sub Main()\n\n        &#39; Create an ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;red&quot;)\n        myAL.Add(&quot;blue&quot;)\n        myAL.Add(&quot;yellow&quot;)\n        myAL.Add(&quot;green&quot;)\n        myAL.Add(&quot;orange&quot;)\n        myAL.Add(&quot;purple&quot;)\n\n        &#39; Create a new ROCollection that contains the elements in myAL.\n        Dim myCol As New ROCollection(myAL)\n\n        &#39; Display the contents of the collection using For Each. This is the preferred method.\n        Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n        PrintValues1(myCol)\n\n        &#39; Display the contents of the collection using the enumerator.\n        Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n        PrintValues2(myCol)\n\n        &#39; Display the contents of the collection using the Count property and the Item property.\n        Console.WriteLine(&quot;Contents of the collection (using Count and Item):&quot;)\n        PrintIndexAndValues(myCol)\n\n        &#39; Search the collection with Contains and IndexOf.\n        Console.WriteLine(&quot;Contains yellow: {0}&quot;, myCol.Contains(&quot;yellow&quot;))\n        Console.WriteLine(&quot;orange is at index {0}.&quot;, myCol.IndexOf(&quot;orange&quot;))\n        Console.WriteLine()\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As ROCollection)\n        Dim i As Integer\n        For i = 0 To myCol.Count - 1\n            Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As ROCollection)\n        Dim obj As [Object]\n        For Each obj In  myCol\n            Console.WriteLine(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As ROCollection)\n        Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n        While myEnumerator.MoveNext()\n            Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   red\n&#39;   blue\n&#39;   yellow\n&#39;   green\n&#39;   orange\n&#39;   purple\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   red\n&#39;   blue\n&#39;   yellow\n&#39;   green\n&#39;   orange\n&#39;   purple\n&#39;\n&#39;Contents of the collection (using Count and Item):\n&#39;   [0]:   red\n&#39;   [1]:   blue\n&#39;   [2]:   yellow\n&#39;   [3]:   green\n&#39;   [4]:   orange\n&#39;   [5]:   purple\n&#39;\n&#39;Contains yellow: True\n&#39;orange is at index 4.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase_InnerList\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase_InnerList_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">InnerList</div>        \r\n          </div>\r\n    \r\n            <p>Gets the list of elements contained in the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected System.Collections.ArrayList InnerList { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a> representing the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance itself.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ReadOnlyCollectionBase#1\">using namespace System;\nusing namespace System::Collections;\npublic ref class ROCollection: public ReadOnlyCollectionBase\n{\npublic:\n   ROCollection( IList^ sourceList )\n   {\n      InnerList-&gt;AddRange( sourceList );\n   }\n\n   property Object^ Item [int]\n   {\n      Object^ get( int index )\n      {\n         return (InnerList[ index ]);\n      }\n\n   }\n   int IndexOf( Object^ value )\n   {\n      return (InnerList-&gt;IndexOf( value ));\n   }\n\n   bool Contains( Object^ value )\n   {\n      return (InnerList-&gt;Contains( value ));\n   }\n\n};\n\nvoid PrintIndexAndValues( ROCollection^ myCol );\nvoid PrintValues2( ROCollection^ myCol );\nint main()\n{\n   // Create an ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;red&quot; );\n   myAL-&gt;Add( &quot;blue&quot; );\n   myAL-&gt;Add( &quot;yellow&quot; );\n   myAL-&gt;Add( &quot;green&quot; );\n   myAL-&gt;Add( &quot;orange&quot; );\n   myAL-&gt;Add( &quot;purple&quot; );\n\n   // Create a new ROCollection that contains the elements in myAL.\n   ROCollection^ myCol = gcnew ROCollection( myAL );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myCol );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myCol );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains yellow: {0}&quot;, myCol-&gt;Contains( &quot;yellow&quot; ) );\n   Console::WriteLine( &quot;orange is at index {0}.&quot;, myCol-&gt;IndexOf( &quot;orange&quot; ) );\n   Console::WriteLine();\n}\n\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( ROCollection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n\n// Uses the enumerator. \nvoid PrintValues2( ROCollection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using Count and Item):\n   [0]:   red\n   [1]:   blue\n   [2]:   yellow\n   [3]:   green\n   [4]:   orange\n   [5]:   purple\n\nContains yellow: True\norange is at index 4.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ReadOnlyCollectionBase#1\">using System;\nusing System.Collections;\n\npublic class ROCollection : ReadOnlyCollectionBase  {\n\n   public ROCollection( IList sourceList )  {\n      InnerList.AddRange( sourceList );\n   }\n\n   public Object this[ int index ]  {\n      get  {\n         return( InnerList[index] );\n      }\n   }\n\n   public int IndexOf( Object value )  {\n      return( InnerList.IndexOf( value ) );\n   }\n\n   public bool Contains( Object value )  {\n      return( InnerList.Contains( value ) );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n\n      // Create an ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;red&quot; );\n      myAL.Add( &quot;blue&quot; );\n      myAL.Add( &quot;yellow&quot; );\n      myAL.Add( &quot;green&quot; );\n      myAL.Add( &quot;orange&quot; );\n      myAL.Add( &quot;purple&quot; );\n \n      // Create a new ROCollection that contains the elements in myAL.\n      ROCollection myCol = new ROCollection( myAL );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myCol );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myCol );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains yellow: {0}&quot;, myCol.Contains( &quot;yellow&quot; ) );\n      Console.WriteLine( &quot;orange is at index {0}.&quot;, myCol.IndexOf( &quot;orange&quot; ) );\n      Console.WriteLine();\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( ROCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( ROCollection myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( ROCollection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using enumerator):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using Count and Item):\n   [0]:   red\n   [1]:   blue\n   [2]:   yellow\n   [3]:   green\n   [4]:   orange\n   [5]:   purple\n\nContains yellow: True\norange is at index 4.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ReadOnlyCollectionBase#1\">Imports System\nImports System.Collections\n\nPublic Class ROCollection\n    Inherits ReadOnlyCollectionBase\n\n\n    Public Sub New(sourceList As IList)\n        InnerList.AddRange(sourceList)\n    End Sub &#39;New\n\n\n    Default Public ReadOnly Property Item(index As Integer) As [Object]\n        Get\n            Return InnerList(index)\n        End Get\n    End Property\n\n\n    Public Function IndexOf(value As [Object]) As Integer\n        Return InnerList.IndexOf(value)\n    End Function &#39;IndexOf\n\n\n    Public Function Contains(value As [Object]) As Boolean\n        Return InnerList.Contains(value)\n    End Function &#39;Contains\n\nEnd Class &#39;ROCollection \n\n\nPublic Class SamplesCollectionBase\n\n    Public Shared Sub Main()\n\n        &#39; Create an ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;red&quot;)\n        myAL.Add(&quot;blue&quot;)\n        myAL.Add(&quot;yellow&quot;)\n        myAL.Add(&quot;green&quot;)\n        myAL.Add(&quot;orange&quot;)\n        myAL.Add(&quot;purple&quot;)\n\n        &#39; Create a new ROCollection that contains the elements in myAL.\n        Dim myCol As New ROCollection(myAL)\n\n        &#39; Display the contents of the collection using For Each. This is the preferred method.\n        Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n        PrintValues1(myCol)\n\n        &#39; Display the contents of the collection using the enumerator.\n        Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n        PrintValues2(myCol)\n\n        &#39; Display the contents of the collection using the Count property and the Item property.\n        Console.WriteLine(&quot;Contents of the collection (using Count and Item):&quot;)\n        PrintIndexAndValues(myCol)\n\n        &#39; Search the collection with Contains and IndexOf.\n        Console.WriteLine(&quot;Contains yellow: {0}&quot;, myCol.Contains(&quot;yellow&quot;))\n        Console.WriteLine(&quot;orange is at index {0}.&quot;, myCol.IndexOf(&quot;orange&quot;))\n        Console.WriteLine()\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As ROCollection)\n        Dim i As Integer\n        For i = 0 To myCol.Count - 1\n            Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As ROCollection)\n        Dim obj As [Object]\n        For Each obj In  myCol\n            Console.WriteLine(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As ROCollection)\n        Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n        While myEnumerator.MoveNext()\n            Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   red\n&#39;   blue\n&#39;   yellow\n&#39;   green\n&#39;   orange\n&#39;   purple\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   red\n&#39;   blue\n&#39;   yellow\n&#39;   green\n&#39;   orange\n&#39;   purple\n&#39;\n&#39;Contents of the collection (using Count and Item):\n&#39;   [0]:   red\n&#39;   [1]:   blue\n&#39;   [2]:   yellow\n&#39;   [3]:   green\n&#39;   [4]:   orange\n&#39;   [5]:   purple\n&#39;\n&#39;Contains yellow: True\n&#39;orange is at index 4.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase_GetEnumerator\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns an enumerator that iterates through the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> for the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> instance.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <code>foreach</code> statement of the C# language (<code>for each</code> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <code>foreach</code> is recommended, instead of directly manipulating the enumerator.  </p>\n<p> Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  </p>\n<p> Initially, the enumerator is positioned before the first element in the collection. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> also brings the enumerator back to this position.  At this position, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. Therefore, you must call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> to advance the enumerator to the first element of the collection before reading the value of <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>.  </p>\n<p> <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> returns the same object until either <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> or <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> is called. <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> sets <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the next element.  </p>\n<p> If <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> passes the end of the collection, the enumerator is positioned after the last element in the collection and <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returns <code>false</code>. When the enumerator is at this position, subsequent calls to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> also return <code>false</code>. If the last call to <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> returned <code>false</code>, <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> is undefined. To set <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> to the first element of the collection again, you can call <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a> followed by <a class=\"xref\" href=\"system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>.  </p>\n<p> An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  </p>\n<p> The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  </p>\n<p> This method is an O(1) operation.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example implements the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ReadOnlyCollectionBase#1\">using namespace System;\nusing namespace System::Collections;\npublic ref class ROCollection: public ReadOnlyCollectionBase\n{\npublic:\n   ROCollection( IList^ sourceList )\n   {\n      InnerList-&gt;AddRange( sourceList );\n   }\n\n   property Object^ Item [int]\n   {\n      Object^ get( int index )\n      {\n         return (InnerList[ index ]);\n      }\n\n   }\n   int IndexOf( Object^ value )\n   {\n      return (InnerList-&gt;IndexOf( value ));\n   }\n\n   bool Contains( Object^ value )\n   {\n      return (InnerList-&gt;Contains( value ));\n   }\n\n};\n\nvoid PrintIndexAndValues( ROCollection^ myCol );\nvoid PrintValues2( ROCollection^ myCol );\nint main()\n{\n   // Create an ArrayList.\n   ArrayList^ myAL = gcnew ArrayList;\n   myAL-&gt;Add( &quot;red&quot; );\n   myAL-&gt;Add( &quot;blue&quot; );\n   myAL-&gt;Add( &quot;yellow&quot; );\n   myAL-&gt;Add( &quot;green&quot; );\n   myAL-&gt;Add( &quot;orange&quot; );\n   myAL-&gt;Add( &quot;purple&quot; );\n\n   // Create a new ROCollection that contains the elements in myAL.\n   ROCollection^ myCol = gcnew ROCollection( myAL );\n\n   // Display the contents of the collection using the enumerator.\n   Console::WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n   PrintValues2( myCol );\n\n   // Display the contents of the collection using the Count property and the Item property.\n   Console::WriteLine( &quot;Contents of the collection (using Count and Item):&quot; );\n   PrintIndexAndValues( myCol );\n\n   // Search the collection with Contains and IndexOf.\n   Console::WriteLine( &quot;Contains yellow: {0}&quot;, myCol-&gt;Contains( &quot;yellow&quot; ) );\n   Console::WriteLine( &quot;orange is at index {0}.&quot;, myCol-&gt;IndexOf( &quot;orange&quot; ) );\n   Console::WriteLine();\n}\n\n\n// Uses the Count property and the Item property.\nvoid PrintIndexAndValues( ROCollection^ myCol )\n{\n   for ( int i = 0; i &lt; myCol-&gt;Count; i++ )\n      Console::WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol-&gt;Item[ i ] );\n   Console::WriteLine();\n}\n\n\n// Uses the enumerator. \nvoid PrintValues2( ROCollection^ myCol )\n{\n   System::Collections::IEnumerator^ myEnumerator = myCol-&gt;GetEnumerator();\n   while ( myEnumerator-&gt;MoveNext() )\n      Console::WriteLine( &quot;   {0}&quot;, myEnumerator-&gt;Current );\n\n   Console::WriteLine();\n}\n\n/* \nThis code produces the following output.\n\nContents of the collection (using enumerator):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using Count and Item):\n   [0]:   red\n   [1]:   blue\n   [2]:   yellow\n   [3]:   green\n   [4]:   orange\n   [5]:   purple\n\nContains yellow: True\norange is at index 4.\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ReadOnlyCollectionBase#1\">using System;\nusing System.Collections;\n\npublic class ROCollection : ReadOnlyCollectionBase  {\n\n   public ROCollection( IList sourceList )  {\n      InnerList.AddRange( sourceList );\n   }\n\n   public Object this[ int index ]  {\n      get  {\n         return( InnerList[index] );\n      }\n   }\n\n   public int IndexOf( Object value )  {\n      return( InnerList.IndexOf( value ) );\n   }\n\n   public bool Contains( Object value )  {\n      return( InnerList.Contains( value ) );\n   }\n\n}\n\n\npublic class SamplesCollectionBase  {\n\n   public static void Main()  {\n\n      // Create an ArrayList.\n      ArrayList myAL = new ArrayList();\n      myAL.Add( &quot;red&quot; );\n      myAL.Add( &quot;blue&quot; );\n      myAL.Add( &quot;yellow&quot; );\n      myAL.Add( &quot;green&quot; );\n      myAL.Add( &quot;orange&quot; );\n      myAL.Add( &quot;purple&quot; );\n \n      // Create a new ROCollection that contains the elements in myAL.\n      ROCollection myCol = new ROCollection( myAL );\n\n      // Display the contents of the collection using foreach. This is the preferred method.\n      Console.WriteLine( &quot;Contents of the collection (using foreach):&quot; );\n      PrintValues1( myCol );\n\n      // Display the contents of the collection using the enumerator.\n      Console.WriteLine( &quot;Contents of the collection (using enumerator):&quot; );\n      PrintValues2( myCol );\n\n      // Display the contents of the collection using the Count property and the Item property.\n      Console.WriteLine( &quot;Contents of the collection (using Count and Item):&quot; );\n      PrintIndexAndValues( myCol );\n\n      // Search the collection with Contains and IndexOf.\n      Console.WriteLine( &quot;Contains yellow: {0}&quot;, myCol.Contains( &quot;yellow&quot; ) );\n      Console.WriteLine( &quot;orange is at index {0}.&quot;, myCol.IndexOf( &quot;orange&quot; ) );\n      Console.WriteLine();\n\n   }\n \n   // Uses the Count property and the Item property.\n   public static void PrintIndexAndValues( ROCollection myCol )  {\n      for ( int i = 0; i &lt; myCol.Count; i++ )\n         Console.WriteLine( &quot;   [{0}]:   {1}&quot;, i, myCol[i] );\n      Console.WriteLine();\n   }\n\n   // Uses the foreach statement which hides the complexity of the enumerator.\n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues1( ROCollection myCol )  {\n      foreach ( Object obj in myCol )\n         Console.WriteLine( &quot;   {0}&quot;, obj );\n      Console.WriteLine();\n   }\n\n   // Uses the enumerator. \n   // NOTE: The foreach statement is the preferred way of enumerating the contents of a collection.\n   public static void PrintValues2( ROCollection myCol )  {\n      System.Collections.IEnumerator myEnumerator = myCol.GetEnumerator();\n      while ( myEnumerator.MoveNext() )\n         Console.WriteLine( &quot;   {0}&quot;, myEnumerator.Current );\n      Console.WriteLine();\n   }\n\n}\n\n\n/* \nThis code produces the following output.\n\nContents of the collection (using foreach):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using enumerator):\n   red\n   blue\n   yellow\n   green\n   orange\n   purple\n\nContents of the collection (using Count and Item):\n   [0]:   red\n   [1]:   blue\n   [2]:   yellow\n   [3]:   green\n   [4]:   orange\n   [5]:   purple\n\nContains yellow: True\norange is at index 4.\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ReadOnlyCollectionBase#1\">Imports System\nImports System.Collections\n\nPublic Class ROCollection\n    Inherits ReadOnlyCollectionBase\n\n\n    Public Sub New(sourceList As IList)\n        InnerList.AddRange(sourceList)\n    End Sub &#39;New\n\n\n    Default Public ReadOnly Property Item(index As Integer) As [Object]\n        Get\n            Return InnerList(index)\n        End Get\n    End Property\n\n\n    Public Function IndexOf(value As [Object]) As Integer\n        Return InnerList.IndexOf(value)\n    End Function &#39;IndexOf\n\n\n    Public Function Contains(value As [Object]) As Boolean\n        Return InnerList.Contains(value)\n    End Function &#39;Contains\n\nEnd Class &#39;ROCollection \n\n\nPublic Class SamplesCollectionBase\n\n    Public Shared Sub Main()\n\n        &#39; Create an ArrayList.\n        Dim myAL As New ArrayList()\n        myAL.Add(&quot;red&quot;)\n        myAL.Add(&quot;blue&quot;)\n        myAL.Add(&quot;yellow&quot;)\n        myAL.Add(&quot;green&quot;)\n        myAL.Add(&quot;orange&quot;)\n        myAL.Add(&quot;purple&quot;)\n\n        &#39; Create a new ROCollection that contains the elements in myAL.\n        Dim myCol As New ROCollection(myAL)\n\n        &#39; Display the contents of the collection using For Each. This is the preferred method.\n        Console.WriteLine(&quot;Contents of the collection (using For Each):&quot;)\n        PrintValues1(myCol)\n\n        &#39; Display the contents of the collection using the enumerator.\n        Console.WriteLine(&quot;Contents of the collection (using enumerator):&quot;)\n        PrintValues2(myCol)\n\n        &#39; Display the contents of the collection using the Count property and the Item property.\n        Console.WriteLine(&quot;Contents of the collection (using Count and Item):&quot;)\n        PrintIndexAndValues(myCol)\n\n        &#39; Search the collection with Contains and IndexOf.\n        Console.WriteLine(&quot;Contains yellow: {0}&quot;, myCol.Contains(&quot;yellow&quot;))\n        Console.WriteLine(&quot;orange is at index {0}.&quot;, myCol.IndexOf(&quot;orange&quot;))\n        Console.WriteLine()\n\n    End Sub &#39;Main\n\n\n    &#39; Uses the Count property and the Item property.\n    Public Shared Sub PrintIndexAndValues(myCol As ROCollection)\n        Dim i As Integer\n        For i = 0 To myCol.Count - 1\n            Console.WriteLine(&quot;   [{0}]:   {1}&quot;, i, myCol(i))\n        Next i\n        Console.WriteLine()\n    End Sub &#39;PrintIndexAndValues\n\n\n    &#39; Uses the For Each statement which hides the complexity of the enumerator.\n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues1(myCol As ROCollection)\n        Dim obj As [Object]\n        For Each obj In  myCol\n            Console.WriteLine(&quot;   {0}&quot;, obj)\n        Next obj\n        Console.WriteLine()\n    End Sub &#39;PrintValues1\n\n\n    &#39; Uses the enumerator. \n    &#39; NOTE: The For Each statement is the preferred way of enumerating the contents of a collection.\n    Public Shared Sub PrintValues2(myCol As ROCollection)\n        Dim myEnumerator As System.Collections.IEnumerator = myCol.GetEnumerator()\n        While myEnumerator.MoveNext()\n            Console.WriteLine(&quot;   {0}&quot;, myEnumerator.Current)\n        End While\n        Console.WriteLine()\n    End Sub &#39;PrintValues2\n\nEnd Class &#39;SamplesCollectionBase \n\n\n&#39;This code produces the following output.\n&#39;\n&#39;Contents of the collection (using For Each):\n&#39;   red\n&#39;   blue\n&#39;   yellow\n&#39;   green\n&#39;   orange\n&#39;   purple\n&#39;\n&#39;Contents of the collection (using enumerator):\n&#39;   red\n&#39;   blue\n&#39;   yellow\n&#39;   green\n&#39;   orange\n&#39;   purple\n&#39;\n&#39;Contents of the collection (using Count and Item):\n&#39;   [0]:   red\n&#39;   [1]:   blue\n&#39;   [2]:   yellow\n&#39;   [3]:   green\n&#39;   [4]:   orange\n&#39;   [5]:   purple\n&#39;\n&#39;Contains yellow: True\n&#39;orange is at index 4.\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_CopyTo_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.CopyTo(Array,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Copies the entire <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> to a compatible one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at the specified index of the target array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>array</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>index</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>index</code> is less than zero.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>array</code> is multidimensional.  </p>\n<p> -or-  </p>\n<p> The number of elements in the source <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></div>\r\n                  </div>\r\n                  <p>The type of the source <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> cannot be cast automatically to the type of the destination <code>array</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The specified array must be of a compatible type.  </p>\n<p> This method uses <a class=\"xref\" href=\"system.array#System_Array_Copy_\" data-linktype=\"relative-path\">Copy</a> to copy the elements.  </p>\n<p> This method is an O(<code>n</code>) operation, where <code>n</code> is <a class=\"xref\" href=\"system.collections.readonlycollectionbase#System_Collections_ReadOnlyCollectionBase_Count_\" data-linktype=\"relative-path\">Count</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_IsSynchronized\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_IsSynchronized_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.IsSynchronized</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value indicating whether access to a <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object is synchronized (thread safe).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if access to the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object is synchronized (thread safe); otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>A <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object is not synchronized. Derived classes can provide a synchronized version of the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ReadOnlyCollectionBase#2\">        // Get the ICollection interface from the ReadOnlyCollectionBase\n        // derived class.\n        ICollection^ myCollection = myReadOnlyCollection;\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ReadOnlyCollectionBase#2\">        // Get the ICollection interface from the ReadOnlyCollectionBase\n        // derived class.\n        ICollection myCollection = myReadOnlyCollection;\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ReadOnlyCollectionBase#2\">        &#39; Get the ICollection interface from the ReadOnlyCollectionBase\n        &#39; derived class.\n        Dim myCollection As ICollection = myReadOnlyCollection\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_SyncRoot\">\r\n    \r\n            <a id=\"System_Collections_ReadOnlyCollectionBase_System_Collections_ICollection_SyncRoot_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ICollection.SyncRoot</div>        \r\n          </div>\r\n    \r\n            <p>Gets an object that can be used to synchronize access to a <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></div>\r\n                  </div>\r\n                  <p>An object that can be used to synchronize access to the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Derived classes can provide their own synchronized version of the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> class using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property. The synchronizing code must perform operations on the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property of the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object, not directly on the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <a class=\"xref\" href=\"system.collections.readonlycollectionbase\" data-linktype=\"relative-path\">ReadOnlyCollectionBase</a> object.  </p>\n<p> Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example shows how to lock the collection using the <a class=\"xref\" href=\"system.collections.icollection#System_Collections_ICollection_SyncRoot_\" data-linktype=\"relative-path\">SyncRoot</a> property during the entire enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.ReadOnlyCollectionBase#2\">        // Get the ICollection interface from the ReadOnlyCollectionBase\n        // derived class.\n        ICollection^ myCollection = myReadOnlyCollection;\n        bool lockTaken = false;\n        try\n        {\n            Monitor::Enter(myCollection-&gt;SyncRoot, lockTaken);\n            for each (Object^ item in myCollection);\n            {\n                // Insert your code here.\n            }\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor::Exit(myCollection-&gt;SyncRoot);\n            }\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.ReadOnlyCollectionBase#2\">        // Get the ICollection interface from the ReadOnlyCollectionBase\n        // derived class.\n        ICollection myCollection = myReadOnlyCollection;\n        lock(myCollection.SyncRoot)\n        {\n            foreach (object item in myCollection)\n            {\n                // Insert your code here.\n            }\n        }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.ReadOnlyCollectionBase#2\">        &#39; Get the ICollection interface from the ReadOnlyCollectionBase\n        &#39; derived class.\n        Dim myCollection As ICollection = myReadOnlyCollection\n        SyncLock myCollection.SyncRoot\n            For Each item As Object In myCollection\n                &#39; Insert your code here.\n            Next item\n        End SyncLock\n</code></pre><p> Retrieving the value of this property is an O(1) operation.</p>\n\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.ReadOnlyCollectionBase.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.ReadOnlyCollectionBase.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase..ctor\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase.InnerList\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Collections.ReadOnlyCollectionBase.ICollection.SyncRoot\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"79825ed9-1302-c25e-1f7a-fda28ac2638d\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\ReadOnlyCollectionBase.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the abstract base class for a strongly typed non-generic read-only collection.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Collections/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.ReadOnlyCollectionBase\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Collections.ReadOnlyCollectionBase.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Collections.ReadOnlyCollectionBase.yml","open_to_public_contributors":true,"api_name":["System.Collections.ReadOnlyCollectionBase","System.Collections.ReadOnlyCollectionBase..ctor","System.Collections.ReadOnlyCollectionBase.Count","System.Collections.ReadOnlyCollectionBase.GetEnumerator","System.Collections.ReadOnlyCollectionBase.InnerList","System.Collections.ReadOnlyCollectionBase.ICollection.CopyTo","System.Collections.ReadOnlyCollectionBase.ICollection.IsSynchronized","System.Collections.ReadOnlyCollectionBase.ICollection.SyncRoot"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.ReadOnlyCollectionBase","System::Collections::ReadOnlyCollectionBase","System.Collections.ReadOnlyCollectionBase.#ctor","System::Collections::ReadOnlyCollectionBase::#ctor","System.Collections.ReadOnlyCollectionBase.Count","System::Collections::ReadOnlyCollectionBase::Count","System.Collections.ReadOnlyCollectionBase.GetEnumerator","System::Collections::ReadOnlyCollectionBase::GetEnumerator","System.Collections.ReadOnlyCollectionBase.InnerList","System::Collections::ReadOnlyCollectionBase::InnerList","System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo","System::Collections::ReadOnlyCollectionBase::System#Collections#ICollection#CopyTo","System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized","System::Collections::ReadOnlyCollectionBase::System#Collections#ICollection#IsSynchronized","System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot","System::Collections::ReadOnlyCollectionBase::System#Collections#ICollection#SyncRoot"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"79825ed9-1302-c25e-1f7a-fda28ac2638d","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Collections\\ReadOnlyCollectionBase.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Collections/ReadOnlyCollectionBase.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ReadOnlyCollectionBase class | Microsoft Docs","_op_ogTitle":"ReadOnlyCollectionBase class","description":"Provides the abstract base class for a strongly typed non-generic read-only collection.\n","toc_asset_id":"_splitted/System.Collections/toc.json","toc_rel":"_splitted/System.Collections/toc.json","source_url":"","ms.assetid":"System.Collections.ReadOnlyCollectionBase","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.readonlycollectionbase","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.collections.readonlycollectionbase","fileRelativePath":"System.Collections.ReadOnlyCollectionBase.html"},"themesRelativePathToOutputRoot":"_themes/"}