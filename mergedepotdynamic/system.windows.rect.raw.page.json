{"content":"    \r\n    <h1 id=\"System_Windows_Rect\">\r\n      <span class=\"lang-csharp\">Rect</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Describes the width, height, and location of a rectangle.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))]\n[System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))]\npublic struct Rect : IFormattable</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">Rect</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p><a name=\"xamlAttributeUsage_Duration\"></a>   </p>\n<h2 id=\"xaml-attribute-usage\">XAML Attribute Usage</h2>\n<pre><code>&lt;object property=&quot;x,y,width,height&quot;/&gt;  \n</code></pre><p><a name=\"xamlValues_MinWidth\"></a>   </p>\n<h2 id=\"xaml-values\">XAML Values</h2>\n<p> <em>x</em>  </p>\n <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a>  \n\n<p> The x-coordinate location of the left side of the rectangle.  </p>\n<p> <em>y</em>  </p>\n <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a>  \n\n<p> The y-coordinate location of the top side of the rectangle.  </p>\n<p> <em>width</em>  </p>\n <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a>  \n\n<p> A non-negative value that represents the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> of the rectangle.  </p>\n<p> <em>height</em>  </p>\n <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">System.Double</a>  \n\n<p> A non-negative value that represents the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> of the rectangle.</p>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect__ctor_System_Windows_Size_\" data-linktype=\"self-bookmark\">Rect(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that is of the specified size and is located at (0,0).</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect__ctor_System_Windows_Point_System_Windows_Point_\" data-linktype=\"self-bookmark\">Rect(Point,Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that is exactly large enough to contain the two specified points.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect__ctor_System_Windows_Point_System_Windows_Size_\" data-linktype=\"self-bookmark\">Rect(Point,Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that has the specified top-left corner location and the specified width and height.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect__ctor_System_Windows_Point_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Rect(Point,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect__ctor_System_Double_System_Double_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Rect(Double,Double,Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that has the specified x-coordinate, y-coordinate, width, and height.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Bottom\" data-linktype=\"self-bookmark\">Bottom</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the y-axis value of the bottom of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_BottomLeft\" data-linktype=\"self-bookmark\">BottomLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the bottom-left corner of the rectangle</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_BottomRight\" data-linktype=\"self-bookmark\">BottomRight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the bottom-right corner of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Empty\" data-linktype=\"self-bookmark\">Empty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a special value that represents a rectangle with no position or area.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Height\" data-linktype=\"self-bookmark\">Height</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the height of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_IsEmpty\" data-linktype=\"self-bookmark\">IsEmpty</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates whether the rectangle is the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Left\" data-linktype=\"self-bookmark\">Left</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the x-axis value of the left side of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Location\" data-linktype=\"self-bookmark\">Location</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the position of the top-left corner of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Right\" data-linktype=\"self-bookmark\">Right</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the x-axis value of the right side of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Size\" data-linktype=\"self-bookmark\">Size</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the width and height of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Top\" data-linktype=\"self-bookmark\">Top</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the y-axis position of the top of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_TopLeft\" data-linktype=\"self-bookmark\">TopLeft</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the top-left corner of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_TopRight\" data-linktype=\"self-bookmark\">TopRight</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the position of the top-right corner of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Width\" data-linktype=\"self-bookmark\">Width</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the width of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_X\" data-linktype=\"self-bookmark\">X</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the x-axis value of the left side of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Y\" data-linktype=\"self-bookmark\">Y</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the y-axis value of the top side of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Contains_System_Windows_Point_\" data-linktype=\"self-bookmark\">Contains(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the rectangle contains the specified point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Contains_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Contains(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the rectangle contains the specified rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Contains_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Contains(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Equals_System_Object_\" data-linktype=\"self-bookmark\">Equals(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified object is equal to the current rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Equals_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Equals(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified rectangle is equal to the current rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Equals_System_Windows_Rect_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Equals(Rect,Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified rectangles are equal.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_GetHashCode\" data-linktype=\"self-bookmark\">GetHashCode()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a hash code for the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Inflate_System_Windows_Size_\" data-linktype=\"self-bookmark\">Inflate(Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands the rectangle by using the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a>, in all directions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Inflate_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Inflate(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Inflate_System_Windows_Rect_System_Windows_Size_\" data-linktype=\"self-bookmark\">Inflate(Rect,Size)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the rectangle that results from expanding the specified rectangle by the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a>, in all directions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Inflate_System_Windows_Rect_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Inflate(Rect,Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Intersect_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Intersect(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Intersect_System_Windows_Rect_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Intersect(Rect,Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the intersection of the specified rectangles.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_IntersectsWith_System_Windows_Rect_\" data-linktype=\"self-bookmark\">IntersectsWith(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Indicates whether the specified rectangle intersects with the current rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Offset_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Offset(Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves the rectangle by the specified vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Offset_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Offset(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Moves the rectangle by the specified horizontal and vertical amounts.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Offset_System_Windows_Rect_System_Windows_Vector_\" data-linktype=\"self-bookmark\">Offset(Rect,Vector)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a rectangle that is offset from the specified rectangle by using the specified vector.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Offset_System_Windows_Rect_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Offset(Rect,Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Parse_System_String_\" data-linktype=\"self-bookmark\">Parse(String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a new rectangle from the specified string representation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Scale_System_Double_System_Double_\" data-linktype=\"self-bookmark\">Scale(Double,Double)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Multiplies the size of the current rectangle by the specified x and y values.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_ToString\" data-linktype=\"self-bookmark\">ToString()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representation of the rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_ToString_System_IFormatProvider_\" data-linktype=\"self-bookmark\">ToString(IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a string representation of the rectangle by using the specified format provider.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Transform_System_Windows_Media_Matrix_\" data-linktype=\"self-bookmark\">Transform(Matrix)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Transforms the rectangle by applying the specified matrix.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Transform_System_Windows_Rect_System_Windows_Media_Matrix_\" data-linktype=\"self-bookmark\">Transform(Rect,Matrix)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns the rectangle that results from applying the specified matrix to the specified rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Union_System_Windows_Point_\" data-linktype=\"self-bookmark\">Union(Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands the current rectangle exactly enough to contain the specified point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Union_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Union(Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Expands the current rectangle exactly enough to contain the specified rectangle.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Union_System_Windows_Rect_System_Windows_Point_\" data-linktype=\"self-bookmark\">Union(Rect,Point)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_Union_System_Windows_Rect_System_Windows_Rect_\" data-linktype=\"self-bookmark\">Union(Rect,Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Creates a rectangle that is exactly large enough to contain the two specified rectangles.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Operators\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_op_Equality_System_Windows_Rect_System_Windows_Rect_\" data-linktype=\"self-bookmark\">op_Equality(Rect,Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two rectangles for exact equality.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_op_Inequality_System_Windows_Rect_System_Windows_Rect_\" data-linktype=\"self-bookmark\">op_Inequality(Rect,Rect)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Compares two rectangles for inequality.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Explicit Interface Implementations\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Rect_System_IFormattable_ToString_System_String_System_IFormatProvider_\" data-linktype=\"self-bookmark\">IFormattable.ToString(String,IFormatProvider)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Formats the value of the current instance using the specified format.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect__ctor_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_Rect__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rect(Size)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that is of the specified size and is located at (0,0).</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Rect (System.Windows.Size size);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure that specifies the width and height of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure by using the Rect constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample2_csharp\">private Rect createRectExample2()\n{\n    // This constructor initializes a new instance of the Rect structure that \n    // is of the specified size and is located at (0,0). \n    Rect myRectangle = new Rect(new Size(200, 50));\n\n    // Returns a rectangle with a width of 200, a height of 50 and a position\n    // of 0,0.\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect__ctor_System_Windows_Point_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Rect__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rect(Point,Point)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that is exactly large enough to contain the two specified points.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Rect (System.Windows.Point point1, System.Windows.Point point2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first point that the new rectangle must contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second point that the new rectangle must contain.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure by using the Rect constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample3_csharp\">private Rect createRectExample3()\n{\n    // This constructor intializes a new instance of the Rect structure that is \n    // exactly large enough to contain the two specified points.  \n    Rect myRectangle = new Rect(new Point(15, 30), new Point(50,70));\n\n    // Returns a rectangle with a position of 15,30, a width of 35 and height of 40.\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect__ctor_System_Windows_Point_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_Rect__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rect(Point,Size)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that has the specified top-left corner location and the specified width and height.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Rect (System.Windows.Point location, System.Windows.Size size);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>location</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A point that specifies the location of the top-left corner of the rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure that specifies the width and height of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure by using the Rect constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample4_csharp\">private Rect createRectExample4()\n{\n    // This constructor initializes a new instance of the Rect structure that has the \n    // specified top-left corner location and the specified width and height (Size).    \n    Rect myRectangle = new Rect(new Point(15, 30), new Size(35, 40));\n\n    // Returns a rectangle with a position of 15,30, a width of 35 and height of 40.\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect__ctor_System_Windows_Point_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Rect__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rect(Point,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Rect (System.Windows.Point point, System.Windows.Vector vector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first point the rectangle must contain.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>vector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure by using the Rect constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample5_csharp\">private Rect createRectExample5()\n{\n    // This constructor Intializes a new instance of the Rect structure that is exactly \n    // large enough to contain the specified point and the sum of the specified point \n    // and the specified vector.   \n    Rect myRectangle = new Rect(new Point(15, 30), new Vector(35, 40));\n\n    // Returns a rectangle with a position of 15,30, a width of 35 and height of 40.\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect__ctor_System_Double_System_Double_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Rect(Double,Double,Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that has the specified x-coordinate, y-coordinate, width, and height.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public Rect (double x, double y, double width, double height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The x-coordinate of the top-left corner of the rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The y-coordinate of the top-left corner of the rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The width of the rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The height of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>width</code> is a negative value.  </p>\n<p> -or-  </p>\n<p> <code>height</code> is a negative value.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following example shows how to create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure by using the Rect constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample6_csharp\">private Rect createRectExample6()\n{\n    // This constructor intializes a new instance of the Rect structure with the specified \n    // x- and y-coordinates and the specified width and height. \n    Rect myRectangle = new Rect(15, 30, 35, 40);\n\n    // Returns a rectangle with a position of 15,30, a width of 35 and height of 40.\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Bottom\">\r\n    \r\n            <a id=\"System_Windows_Rect_Bottom_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Bottom</div>        \r\n          </div>\r\n    \r\n            <p>Gets the y-axis value of the bottom of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Bottom { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> .</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The y-axis value of the bottom of the rectangle is equal to the sum of the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> and <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_BottomLeft\">\r\n    \r\n            <a id=\"System_Windows_Rect_BottomLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BottomLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the bottom-left corner of the rectangle</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point BottomLeft { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The position of the bottom-left corner of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The position of the bottom-left corner of the rectangle is equal to (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> + <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_BottomRight\">\r\n    \r\n            <a id=\"System_Windows_Rect_BottomRight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BottomRight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the bottom-right corner of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point BottomRight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The position of the bottom-right corner of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The position of the bottom-right corner of the rectangle is equal to (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> + <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> + <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Empty\">\r\n    \r\n            <a id=\"System_Windows_Rect_Empty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Empty</div>        \r\n          </div>\r\n    \r\n            <p>Gets a special value that represents a rectangle with no position or area.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Empty { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The empty rectangle, which has <span class=\"xref\">stem.Windows.Rect.X*</span> and <span class=\"xref\">stem.Windows.Rect.Y*</span> property values of <a class=\"xref\" href=\"system.double#System_Double_PositiveInfinity\" data-linktype=\"relative-path\">PositiveInfinity</a>, and has <span class=\"xref\">stem.Windows.Rect.Width*</span> and <span class=\"xref\">stem.Windows.Rect.Height*</span> property values of <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Avoid mathematical computations involving empty rectangles. Because both <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> are infinite values, processor operations are severely impaired by these operations. Comparisons involving these values will not affect application performance.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Height\">\r\n    \r\n            <a id=\"System_Windows_Rect_Height_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Height</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the height of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Height { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A positive number that represents the height of the rectangle. The default is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Height is set to a negative value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Height is set on an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> rectangle has a Height of <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>. The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> rectangle is read-only; its Height cannot not be changed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to specify the dimensions and location of a rectangle using XAML.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class RectExample : Page\n    {\n        public RectExample()\n        {   \n            Path myPath1 = new Path();\n            myPath1.Stroke = Brushes.Black;\n            myPath1.StrokeThickness = 1;\n            SolidColorBrush mySolidColorBrush = new SolidColorBrush();\n            mySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255);\n            myPath1.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This RectangleGeometry specifies a rectangle that is 100 pixels high and\n            // 150 wide. The left side of the rectangle is 10 pixels from the left of the \n            // Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n            // Note: You could alternatively use the Rect Constructor to create this:\n            // Rect my Rect1 = new Rect(10,100,150,100&quot;);\n            Rect myRect1 = new Rect();\n            myRect1.X = 10;\n            myRect1.Y = 100;\n            myRect1.Width = 150;\n            myRect1.Height = 100;\n            RectangleGeometry myRectangleGeometry1 = new RectangleGeometry();\n            myRectangleGeometry1.Rect = myRect1;\n\n            GeometryGroup myGeometryGroup1 = new GeometryGroup();\n            myGeometryGroup1.Children.Add(myRectangleGeometry1);\n\n            myPath1.Data = myGeometryGroup1;\n\n            Path myPath2 = new Path();\n            myPath2.Stroke = Brushes.Black;\n            myPath2.StrokeThickness = 1;\n            myPath2.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This Rect uses the Size property to specify a height of 50 and width\n            // of 200. The Location property uses a Point value to determine the location of the\n            // top-left corner of the rectangle.\n            Rect myRect2 = new Rect();\n            myRect2.Size = new Size(50, 200);\n            myRect2.Location = new Point(300, 100);\n            RectangleGeometry myRectangleGeometry2 = new RectangleGeometry();\n            myRectangleGeometry2.Rect = myRect2;\n\n            GeometryGroup myGeometryGroup2 = new GeometryGroup();\n            myGeometryGroup2.Children.Add(myRectangleGeometry2);\n\n            myPath2.Data = myGeometryGroup2;\n\n            // Add path shape to the UI.\n            Canvas myCanvas = new Canvas();\n            myCanvas.Children.Add(myPath1);\n            myCanvas.Children.Add(myPath2);\n            this.Content = myCanvas;       \n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class RectExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\tDim myPath1 As New Path()\n\t\t\tmyPath1.Stroke = Brushes.Black\n\t\t\tmyPath1.StrokeThickness = 1\n\t\t\tDim mySolidColorBrush As New SolidColorBrush()\n\t\t\tmySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255)\n\t\t\tmyPath1.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This RectangleGeometry specifies a rectangle that is 100 pixels high and\n\t\t\t&#39; 150 wide. The left side of the rectangle is 10 pixels from the left of the \n\t\t\t&#39; Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n\t\t\t&#39; Note: You could alternatively use the Rect Constructor to create this:\n\t\t\t&#39; Dim myRect1 As New Rect(10,100,150,100&quot;)\n\t\t\tDim myRect1 As New Rect()\n\t\t\tmyRect1.X = 10\n\t\t\tmyRect1.Y = 100\n\t\t\tmyRect1.Width = 150\n\t\t\tmyRect1.Height = 100\n\t\t\tDim myRectangleGeometry1 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry1.Rect = myRect1\n\n\t\t\tDim myGeometryGroup1 As New GeometryGroup()\n\t\t\tmyGeometryGroup1.Children.Add(myRectangleGeometry1)\n\n\t\t\tmyPath1.Data = myGeometryGroup1\n\n\t\t\tDim myPath2 As New Path()\n\t\t\tmyPath2.Stroke = Brushes.Black\n\t\t\tmyPath2.StrokeThickness = 1\n\t\t\tmyPath2.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This Rect uses the Size property to specify a height of 50 and width\n\t\t\t&#39; of 200. The Location property uses a Point value to determine the location of the\n\t\t\t&#39; top-left corner of the rectangle.\n\t\t\tDim myRect2 As New Rect()\n\t\t\tmyRect2.Size = New Size(50, 200)\n\t\t\tmyRect2.Location = New Point(300, 100)\n\t\t\tDim myRectangleGeometry2 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry2.Rect = myRect2\n\n\t\t\tDim myGeometryGroup2 As New GeometryGroup()\n\t\t\tmyGeometryGroup2.Children.Add(myRectangleGeometry2)\n\n\t\t\tmyPath2.Data = myGeometryGroup2\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim myCanvas As New Canvas()\n\t\t\tmyCanvas.Children.Add(myPath1)\n\t\t\tmyCanvas.Children.Add(myPath2)\n\t\t\tMe.Content = myCanvas\n\t\tEnd Sub\n\tEnd Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-xml\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">&lt;Page  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n  &lt;Canvas&gt;\n    \n    &lt;!-- This rectangle demonstrates using the X, Y, Width, and Height properties\n         of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry specifies a rectangle that is 100 pixels high and\n             150 wide. The left side of the rectangle is 10 pixels from the left of the \n             Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n             Note: An abbreviated syntax for creating an equivalent rectangle is:\n             &lt;RectangleGeometry Rect=&quot;10,100,150,100&quot; /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect X=&quot;10&quot; Y=&quot;100&quot; Width=&quot;150&quot; Height=&quot;100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n\n    &lt;!-- This rectangle demonstrates using the Size and Location properties of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry uses the Size property to specify a height of 50 and width\n             of 200. The Location property uses a Point value to determine the location of the\n             top-left corner of the rectangle. /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect Size=&quot;50,200&quot; Location=&quot;300,100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n  &lt;/Canvas&gt;\n&lt;/Page&gt;\n\n</code></pre><p> The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_IsEmpty\">\r\n    \r\n            <a id=\"System_Windows_Rect_IsEmpty_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEmpty</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates whether the rectangle is the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IsEmpty { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the rectangle is the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> rectangle. For more information, see the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> property.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Left\">\r\n    \r\n            <a id=\"System_Windows_Rect_Left_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Left</div>        \r\n          </div>\r\n    \r\n            <p>Gets the x-axis value of the left side of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Left { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The x-axis value of the left side of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Getting this property is equivalent to getting the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Location\">\r\n    \r\n            <a id=\"System_Windows_Rect_Location_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Location</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the position of the top-left corner of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point Location { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The position of the top-left corner of the rectangle. The default is (0, 0).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Location is set on an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The position of the top-left corner of the rectangle is equal to (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to specify the dimensions and location of a rectangle using XAML.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class RectExample : Page\n    {\n        public RectExample()\n        {   \n            Path myPath1 = new Path();\n            myPath1.Stroke = Brushes.Black;\n            myPath1.StrokeThickness = 1;\n            SolidColorBrush mySolidColorBrush = new SolidColorBrush();\n            mySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255);\n            myPath1.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This RectangleGeometry specifies a rectangle that is 100 pixels high and\n            // 150 wide. The left side of the rectangle is 10 pixels from the left of the \n            // Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n            // Note: You could alternatively use the Rect Constructor to create this:\n            // Rect my Rect1 = new Rect(10,100,150,100&quot;);\n            Rect myRect1 = new Rect();\n            myRect1.X = 10;\n            myRect1.Y = 100;\n            myRect1.Width = 150;\n            myRect1.Height = 100;\n            RectangleGeometry myRectangleGeometry1 = new RectangleGeometry();\n            myRectangleGeometry1.Rect = myRect1;\n\n            GeometryGroup myGeometryGroup1 = new GeometryGroup();\n            myGeometryGroup1.Children.Add(myRectangleGeometry1);\n\n            myPath1.Data = myGeometryGroup1;\n\n            Path myPath2 = new Path();\n            myPath2.Stroke = Brushes.Black;\n            myPath2.StrokeThickness = 1;\n            myPath2.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This Rect uses the Size property to specify a height of 50 and width\n            // of 200. The Location property uses a Point value to determine the location of the\n            // top-left corner of the rectangle.\n            Rect myRect2 = new Rect();\n            myRect2.Size = new Size(50, 200);\n            myRect2.Location = new Point(300, 100);\n            RectangleGeometry myRectangleGeometry2 = new RectangleGeometry();\n            myRectangleGeometry2.Rect = myRect2;\n\n            GeometryGroup myGeometryGroup2 = new GeometryGroup();\n            myGeometryGroup2.Children.Add(myRectangleGeometry2);\n\n            myPath2.Data = myGeometryGroup2;\n\n            // Add path shape to the UI.\n            Canvas myCanvas = new Canvas();\n            myCanvas.Children.Add(myPath1);\n            myCanvas.Children.Add(myPath2);\n            this.Content = myCanvas;       \n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class RectExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\tDim myPath1 As New Path()\n\t\t\tmyPath1.Stroke = Brushes.Black\n\t\t\tmyPath1.StrokeThickness = 1\n\t\t\tDim mySolidColorBrush As New SolidColorBrush()\n\t\t\tmySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255)\n\t\t\tmyPath1.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This RectangleGeometry specifies a rectangle that is 100 pixels high and\n\t\t\t&#39; 150 wide. The left side of the rectangle is 10 pixels from the left of the \n\t\t\t&#39; Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n\t\t\t&#39; Note: You could alternatively use the Rect Constructor to create this:\n\t\t\t&#39; Dim myRect1 As New Rect(10,100,150,100&quot;)\n\t\t\tDim myRect1 As New Rect()\n\t\t\tmyRect1.X = 10\n\t\t\tmyRect1.Y = 100\n\t\t\tmyRect1.Width = 150\n\t\t\tmyRect1.Height = 100\n\t\t\tDim myRectangleGeometry1 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry1.Rect = myRect1\n\n\t\t\tDim myGeometryGroup1 As New GeometryGroup()\n\t\t\tmyGeometryGroup1.Children.Add(myRectangleGeometry1)\n\n\t\t\tmyPath1.Data = myGeometryGroup1\n\n\t\t\tDim myPath2 As New Path()\n\t\t\tmyPath2.Stroke = Brushes.Black\n\t\t\tmyPath2.StrokeThickness = 1\n\t\t\tmyPath2.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This Rect uses the Size property to specify a height of 50 and width\n\t\t\t&#39; of 200. The Location property uses a Point value to determine the location of the\n\t\t\t&#39; top-left corner of the rectangle.\n\t\t\tDim myRect2 As New Rect()\n\t\t\tmyRect2.Size = New Size(50, 200)\n\t\t\tmyRect2.Location = New Point(300, 100)\n\t\t\tDim myRectangleGeometry2 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry2.Rect = myRect2\n\n\t\t\tDim myGeometryGroup2 As New GeometryGroup()\n\t\t\tmyGeometryGroup2.Children.Add(myRectangleGeometry2)\n\n\t\t\tmyPath2.Data = myGeometryGroup2\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim myCanvas As New Canvas()\n\t\t\tmyCanvas.Children.Add(myPath1)\n\t\t\tmyCanvas.Children.Add(myPath2)\n\t\t\tMe.Content = myCanvas\n\t\tEnd Sub\n\tEnd Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-xml\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">&lt;Page  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n  &lt;Canvas&gt;\n    \n    &lt;!-- This rectangle demonstrates using the X, Y, Width, and Height properties\n         of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry specifies a rectangle that is 100 pixels high and\n             150 wide. The left side of the rectangle is 10 pixels from the left of the \n             Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n             Note: An abbreviated syntax for creating an equivalent rectangle is:\n             &lt;RectangleGeometry Rect=&quot;10,100,150,100&quot; /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect X=&quot;10&quot; Y=&quot;100&quot; Width=&quot;150&quot; Height=&quot;100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n\n    &lt;!-- This rectangle demonstrates using the Size and Location properties of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry uses the Size property to specify a height of 50 and width\n             of 200. The Location property uses a Point value to determine the location of the\n             top-left corner of the rectangle. /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect Size=&quot;50,200&quot; Location=&quot;300,100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n  &lt;/Canvas&gt;\n&lt;/Page&gt;\n\n</code></pre><p> The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Right\">\r\n    \r\n            <a id=\"System_Windows_Rect_Right_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Right</div>        \r\n          </div>\r\n    \r\n            <p>Gets the x-axis value of the right side of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Right { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The x-axis value of the right side of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The x-axis value of the right side of the rectangle is equal to the sum of the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> properties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Size\">\r\n    \r\n            <a id=\"System_Windows_Rect_Size_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Size</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the width and height of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Size Size { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure that specifies the width and height of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Size is set on an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to specify the dimensions and location of a rectangle using XAML.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class RectExample : Page\n    {\n        public RectExample()\n        {   \n            Path myPath1 = new Path();\n            myPath1.Stroke = Brushes.Black;\n            myPath1.StrokeThickness = 1;\n            SolidColorBrush mySolidColorBrush = new SolidColorBrush();\n            mySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255);\n            myPath1.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This RectangleGeometry specifies a rectangle that is 100 pixels high and\n            // 150 wide. The left side of the rectangle is 10 pixels from the left of the \n            // Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n            // Note: You could alternatively use the Rect Constructor to create this:\n            // Rect my Rect1 = new Rect(10,100,150,100&quot;);\n            Rect myRect1 = new Rect();\n            myRect1.X = 10;\n            myRect1.Y = 100;\n            myRect1.Width = 150;\n            myRect1.Height = 100;\n            RectangleGeometry myRectangleGeometry1 = new RectangleGeometry();\n            myRectangleGeometry1.Rect = myRect1;\n\n            GeometryGroup myGeometryGroup1 = new GeometryGroup();\n            myGeometryGroup1.Children.Add(myRectangleGeometry1);\n\n            myPath1.Data = myGeometryGroup1;\n\n            Path myPath2 = new Path();\n            myPath2.Stroke = Brushes.Black;\n            myPath2.StrokeThickness = 1;\n            myPath2.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This Rect uses the Size property to specify a height of 50 and width\n            // of 200. The Location property uses a Point value to determine the location of the\n            // top-left corner of the rectangle.\n            Rect myRect2 = new Rect();\n            myRect2.Size = new Size(50, 200);\n            myRect2.Location = new Point(300, 100);\n            RectangleGeometry myRectangleGeometry2 = new RectangleGeometry();\n            myRectangleGeometry2.Rect = myRect2;\n\n            GeometryGroup myGeometryGroup2 = new GeometryGroup();\n            myGeometryGroup2.Children.Add(myRectangleGeometry2);\n\n            myPath2.Data = myGeometryGroup2;\n\n            // Add path shape to the UI.\n            Canvas myCanvas = new Canvas();\n            myCanvas.Children.Add(myPath1);\n            myCanvas.Children.Add(myPath2);\n            this.Content = myCanvas;       \n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class RectExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\tDim myPath1 As New Path()\n\t\t\tmyPath1.Stroke = Brushes.Black\n\t\t\tmyPath1.StrokeThickness = 1\n\t\t\tDim mySolidColorBrush As New SolidColorBrush()\n\t\t\tmySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255)\n\t\t\tmyPath1.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This RectangleGeometry specifies a rectangle that is 100 pixels high and\n\t\t\t&#39; 150 wide. The left side of the rectangle is 10 pixels from the left of the \n\t\t\t&#39; Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n\t\t\t&#39; Note: You could alternatively use the Rect Constructor to create this:\n\t\t\t&#39; Dim myRect1 As New Rect(10,100,150,100&quot;)\n\t\t\tDim myRect1 As New Rect()\n\t\t\tmyRect1.X = 10\n\t\t\tmyRect1.Y = 100\n\t\t\tmyRect1.Width = 150\n\t\t\tmyRect1.Height = 100\n\t\t\tDim myRectangleGeometry1 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry1.Rect = myRect1\n\n\t\t\tDim myGeometryGroup1 As New GeometryGroup()\n\t\t\tmyGeometryGroup1.Children.Add(myRectangleGeometry1)\n\n\t\t\tmyPath1.Data = myGeometryGroup1\n\n\t\t\tDim myPath2 As New Path()\n\t\t\tmyPath2.Stroke = Brushes.Black\n\t\t\tmyPath2.StrokeThickness = 1\n\t\t\tmyPath2.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This Rect uses the Size property to specify a height of 50 and width\n\t\t\t&#39; of 200. The Location property uses a Point value to determine the location of the\n\t\t\t&#39; top-left corner of the rectangle.\n\t\t\tDim myRect2 As New Rect()\n\t\t\tmyRect2.Size = New Size(50, 200)\n\t\t\tmyRect2.Location = New Point(300, 100)\n\t\t\tDim myRectangleGeometry2 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry2.Rect = myRect2\n\n\t\t\tDim myGeometryGroup2 As New GeometryGroup()\n\t\t\tmyGeometryGroup2.Children.Add(myRectangleGeometry2)\n\n\t\t\tmyPath2.Data = myGeometryGroup2\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim myCanvas As New Canvas()\n\t\t\tmyCanvas.Children.Add(myPath1)\n\t\t\tmyCanvas.Children.Add(myPath2)\n\t\t\tMe.Content = myCanvas\n\t\tEnd Sub\n\tEnd Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-xml\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">&lt;Page  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n  &lt;Canvas&gt;\n    \n    &lt;!-- This rectangle demonstrates using the X, Y, Width, and Height properties\n         of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry specifies a rectangle that is 100 pixels high and\n             150 wide. The left side of the rectangle is 10 pixels from the left of the \n             Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n             Note: An abbreviated syntax for creating an equivalent rectangle is:\n             &lt;RectangleGeometry Rect=&quot;10,100,150,100&quot; /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect X=&quot;10&quot; Y=&quot;100&quot; Width=&quot;150&quot; Height=&quot;100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n\n    &lt;!-- This rectangle demonstrates using the Size and Location properties of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry uses the Size property to specify a height of 50 and width\n             of 200. The Location property uses a Point value to determine the location of the\n             top-left corner of the rectangle. /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect Size=&quot;50,200&quot; Location=&quot;300,100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n  &lt;/Canvas&gt;\n&lt;/Page&gt;\n\n</code></pre><p> The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Top\">\r\n    \r\n            <a id=\"System_Windows_Rect_Top_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Top</div>        \r\n          </div>\r\n    \r\n            <p>Gets the y-axis position of the top of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Top { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The y-axis position of the top of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Getting this property is equivalent to getting the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_TopLeft\">\r\n    \r\n            <a id=\"System_Windows_Rect_TopLeft_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TopLeft</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the top-left corner of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point TopLeft { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The position of the top-left corner of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The position of the top-left corner of the rectangle is equal to (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_TopRight\">\r\n    \r\n            <a id=\"System_Windows_Rect_TopRight_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">TopRight</div>        \r\n          </div>\r\n    \r\n            <p>Gets the position of the top-right corner of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Point TopRight { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </div>\r\n                  <p>The position of the top-right corner of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The position of the top-right corner of the rectangle is equal to (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> + <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a>).</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Width\">\r\n    \r\n            <a id=\"System_Windows_Rect_Width_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Width</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the width of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Width { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>A positive number that represents the width of the rectangle. The default is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>Width is set to a negative value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Width is set on an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> rectangle has a Width of <a class=\"xref\" href=\"system.double#System_Double_NegativeInfinity\" data-linktype=\"relative-path\">NegativeInfinity</a>. The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> rectangle is read-only; its Width cannot not be changed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to specify the dimensions and location of a rectangle using XAML.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class RectExample : Page\n    {\n        public RectExample()\n        {   \n            Path myPath1 = new Path();\n            myPath1.Stroke = Brushes.Black;\n            myPath1.StrokeThickness = 1;\n            SolidColorBrush mySolidColorBrush = new SolidColorBrush();\n            mySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255);\n            myPath1.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This RectangleGeometry specifies a rectangle that is 100 pixels high and\n            // 150 wide. The left side of the rectangle is 10 pixels from the left of the \n            // Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n            // Note: You could alternatively use the Rect Constructor to create this:\n            // Rect my Rect1 = new Rect(10,100,150,100&quot;);\n            Rect myRect1 = new Rect();\n            myRect1.X = 10;\n            myRect1.Y = 100;\n            myRect1.Width = 150;\n            myRect1.Height = 100;\n            RectangleGeometry myRectangleGeometry1 = new RectangleGeometry();\n            myRectangleGeometry1.Rect = myRect1;\n\n            GeometryGroup myGeometryGroup1 = new GeometryGroup();\n            myGeometryGroup1.Children.Add(myRectangleGeometry1);\n\n            myPath1.Data = myGeometryGroup1;\n\n            Path myPath2 = new Path();\n            myPath2.Stroke = Brushes.Black;\n            myPath2.StrokeThickness = 1;\n            myPath2.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This Rect uses the Size property to specify a height of 50 and width\n            // of 200. The Location property uses a Point value to determine the location of the\n            // top-left corner of the rectangle.\n            Rect myRect2 = new Rect();\n            myRect2.Size = new Size(50, 200);\n            myRect2.Location = new Point(300, 100);\n            RectangleGeometry myRectangleGeometry2 = new RectangleGeometry();\n            myRectangleGeometry2.Rect = myRect2;\n\n            GeometryGroup myGeometryGroup2 = new GeometryGroup();\n            myGeometryGroup2.Children.Add(myRectangleGeometry2);\n\n            myPath2.Data = myGeometryGroup2;\n\n            // Add path shape to the UI.\n            Canvas myCanvas = new Canvas();\n            myCanvas.Children.Add(myPath1);\n            myCanvas.Children.Add(myPath2);\n            this.Content = myCanvas;       \n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class RectExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\tDim myPath1 As New Path()\n\t\t\tmyPath1.Stroke = Brushes.Black\n\t\t\tmyPath1.StrokeThickness = 1\n\t\t\tDim mySolidColorBrush As New SolidColorBrush()\n\t\t\tmySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255)\n\t\t\tmyPath1.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This RectangleGeometry specifies a rectangle that is 100 pixels high and\n\t\t\t&#39; 150 wide. The left side of the rectangle is 10 pixels from the left of the \n\t\t\t&#39; Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n\t\t\t&#39; Note: You could alternatively use the Rect Constructor to create this:\n\t\t\t&#39; Dim myRect1 As New Rect(10,100,150,100&quot;)\n\t\t\tDim myRect1 As New Rect()\n\t\t\tmyRect1.X = 10\n\t\t\tmyRect1.Y = 100\n\t\t\tmyRect1.Width = 150\n\t\t\tmyRect1.Height = 100\n\t\t\tDim myRectangleGeometry1 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry1.Rect = myRect1\n\n\t\t\tDim myGeometryGroup1 As New GeometryGroup()\n\t\t\tmyGeometryGroup1.Children.Add(myRectangleGeometry1)\n\n\t\t\tmyPath1.Data = myGeometryGroup1\n\n\t\t\tDim myPath2 As New Path()\n\t\t\tmyPath2.Stroke = Brushes.Black\n\t\t\tmyPath2.StrokeThickness = 1\n\t\t\tmyPath2.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This Rect uses the Size property to specify a height of 50 and width\n\t\t\t&#39; of 200. The Location property uses a Point value to determine the location of the\n\t\t\t&#39; top-left corner of the rectangle.\n\t\t\tDim myRect2 As New Rect()\n\t\t\tmyRect2.Size = New Size(50, 200)\n\t\t\tmyRect2.Location = New Point(300, 100)\n\t\t\tDim myRectangleGeometry2 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry2.Rect = myRect2\n\n\t\t\tDim myGeometryGroup2 As New GeometryGroup()\n\t\t\tmyGeometryGroup2.Children.Add(myRectangleGeometry2)\n\n\t\t\tmyPath2.Data = myGeometryGroup2\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim myCanvas As New Canvas()\n\t\t\tmyCanvas.Children.Add(myPath1)\n\t\t\tmyCanvas.Children.Add(myPath2)\n\t\t\tMe.Content = myCanvas\n\t\tEnd Sub\n\tEnd Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-xml\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">&lt;Page  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n  &lt;Canvas&gt;\n    \n    &lt;!-- This rectangle demonstrates using the X, Y, Width, and Height properties\n         of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry specifies a rectangle that is 100 pixels high and\n             150 wide. The left side of the rectangle is 10 pixels from the left of the \n             Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n             Note: An abbreviated syntax for creating an equivalent rectangle is:\n             &lt;RectangleGeometry Rect=&quot;10,100,150,100&quot; /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect X=&quot;10&quot; Y=&quot;100&quot; Width=&quot;150&quot; Height=&quot;100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n\n    &lt;!-- This rectangle demonstrates using the Size and Location properties of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry uses the Size property to specify a height of 50 and width\n             of 200. The Location property uses a Point value to determine the location of the\n             top-left corner of the rectangle. /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect Size=&quot;50,200&quot; Location=&quot;300,100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n  &lt;/Canvas&gt;\n&lt;/Page&gt;\n\n</code></pre><p> The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_X\">\r\n    \r\n            <a id=\"System_Windows_Rect_X_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">X</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the x-axis value of the left side of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double X { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The x-axis value of the left side of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>X is set on an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Getting this property is equivalent to getting the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Left_\" data-linktype=\"relative-path\">Left</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to specify the dimensions and location of a rectangle using XAML.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class RectExample : Page\n    {\n        public RectExample()\n        {   \n            Path myPath1 = new Path();\n            myPath1.Stroke = Brushes.Black;\n            myPath1.StrokeThickness = 1;\n            SolidColorBrush mySolidColorBrush = new SolidColorBrush();\n            mySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255);\n            myPath1.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This RectangleGeometry specifies a rectangle that is 100 pixels high and\n            // 150 wide. The left side of the rectangle is 10 pixels from the left of the \n            // Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n            // Note: You could alternatively use the Rect Constructor to create this:\n            // Rect my Rect1 = new Rect(10,100,150,100&quot;);\n            Rect myRect1 = new Rect();\n            myRect1.X = 10;\n            myRect1.Y = 100;\n            myRect1.Width = 150;\n            myRect1.Height = 100;\n            RectangleGeometry myRectangleGeometry1 = new RectangleGeometry();\n            myRectangleGeometry1.Rect = myRect1;\n\n            GeometryGroup myGeometryGroup1 = new GeometryGroup();\n            myGeometryGroup1.Children.Add(myRectangleGeometry1);\n\n            myPath1.Data = myGeometryGroup1;\n\n            Path myPath2 = new Path();\n            myPath2.Stroke = Brushes.Black;\n            myPath2.StrokeThickness = 1;\n            myPath2.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This Rect uses the Size property to specify a height of 50 and width\n            // of 200. The Location property uses a Point value to determine the location of the\n            // top-left corner of the rectangle.\n            Rect myRect2 = new Rect();\n            myRect2.Size = new Size(50, 200);\n            myRect2.Location = new Point(300, 100);\n            RectangleGeometry myRectangleGeometry2 = new RectangleGeometry();\n            myRectangleGeometry2.Rect = myRect2;\n\n            GeometryGroup myGeometryGroup2 = new GeometryGroup();\n            myGeometryGroup2.Children.Add(myRectangleGeometry2);\n\n            myPath2.Data = myGeometryGroup2;\n\n            // Add path shape to the UI.\n            Canvas myCanvas = new Canvas();\n            myCanvas.Children.Add(myPath1);\n            myCanvas.Children.Add(myPath2);\n            this.Content = myCanvas;       \n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class RectExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\tDim myPath1 As New Path()\n\t\t\tmyPath1.Stroke = Brushes.Black\n\t\t\tmyPath1.StrokeThickness = 1\n\t\t\tDim mySolidColorBrush As New SolidColorBrush()\n\t\t\tmySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255)\n\t\t\tmyPath1.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This RectangleGeometry specifies a rectangle that is 100 pixels high and\n\t\t\t&#39; 150 wide. The left side of the rectangle is 10 pixels from the left of the \n\t\t\t&#39; Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n\t\t\t&#39; Note: You could alternatively use the Rect Constructor to create this:\n\t\t\t&#39; Dim myRect1 As New Rect(10,100,150,100&quot;)\n\t\t\tDim myRect1 As New Rect()\n\t\t\tmyRect1.X = 10\n\t\t\tmyRect1.Y = 100\n\t\t\tmyRect1.Width = 150\n\t\t\tmyRect1.Height = 100\n\t\t\tDim myRectangleGeometry1 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry1.Rect = myRect1\n\n\t\t\tDim myGeometryGroup1 As New GeometryGroup()\n\t\t\tmyGeometryGroup1.Children.Add(myRectangleGeometry1)\n\n\t\t\tmyPath1.Data = myGeometryGroup1\n\n\t\t\tDim myPath2 As New Path()\n\t\t\tmyPath2.Stroke = Brushes.Black\n\t\t\tmyPath2.StrokeThickness = 1\n\t\t\tmyPath2.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This Rect uses the Size property to specify a height of 50 and width\n\t\t\t&#39; of 200. The Location property uses a Point value to determine the location of the\n\t\t\t&#39; top-left corner of the rectangle.\n\t\t\tDim myRect2 As New Rect()\n\t\t\tmyRect2.Size = New Size(50, 200)\n\t\t\tmyRect2.Location = New Point(300, 100)\n\t\t\tDim myRectangleGeometry2 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry2.Rect = myRect2\n\n\t\t\tDim myGeometryGroup2 As New GeometryGroup()\n\t\t\tmyGeometryGroup2.Children.Add(myRectangleGeometry2)\n\n\t\t\tmyPath2.Data = myGeometryGroup2\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim myCanvas As New Canvas()\n\t\t\tmyCanvas.Children.Add(myPath1)\n\t\t\tmyCanvas.Children.Add(myPath2)\n\t\t\tMe.Content = myCanvas\n\t\tEnd Sub\n\tEnd Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-xml\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">&lt;Page  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n  &lt;Canvas&gt;\n    \n    &lt;!-- This rectangle demonstrates using the X, Y, Width, and Height properties\n         of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry specifies a rectangle that is 100 pixels high and\n             150 wide. The left side of the rectangle is 10 pixels from the left of the \n             Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n             Note: An abbreviated syntax for creating an equivalent rectangle is:\n             &lt;RectangleGeometry Rect=&quot;10,100,150,100&quot; /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect X=&quot;10&quot; Y=&quot;100&quot; Width=&quot;150&quot; Height=&quot;100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n\n    &lt;!-- This rectangle demonstrates using the Size and Location properties of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry uses the Size property to specify a height of 50 and width\n             of 200. The Location property uses a Point value to determine the location of the\n             top-left corner of the rectangle. /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect Size=&quot;50,200&quot; Location=&quot;300,100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n  &lt;/Canvas&gt;\n&lt;/Page&gt;\n\n</code></pre><p> The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Y\">\r\n    \r\n            <a id=\"System_Windows_Rect_Y_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Y</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the y-axis value of the top side of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public double Y { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </div>\r\n                  <p>The y-axis value of the top side of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Y is set on an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Getting this property is equivalent to getting the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Top_\" data-linktype=\"relative-path\">Top</a> property.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to specify the dimensions and location of a rectangle using XAML.  </p>\n<pre><code class=\"lang-cs\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\n\nnamespace SDKSample\n{\n    public partial class RectExample : Page\n    {\n        public RectExample()\n        {   \n            Path myPath1 = new Path();\n            myPath1.Stroke = Brushes.Black;\n            myPath1.StrokeThickness = 1;\n            SolidColorBrush mySolidColorBrush = new SolidColorBrush();\n            mySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255);\n            myPath1.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This RectangleGeometry specifies a rectangle that is 100 pixels high and\n            // 150 wide. The left side of the rectangle is 10 pixels from the left of the \n            // Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n            // Note: You could alternatively use the Rect Constructor to create this:\n            // Rect my Rect1 = new Rect(10,100,150,100&quot;);\n            Rect myRect1 = new Rect();\n            myRect1.X = 10;\n            myRect1.Y = 100;\n            myRect1.Width = 150;\n            myRect1.Height = 100;\n            RectangleGeometry myRectangleGeometry1 = new RectangleGeometry();\n            myRectangleGeometry1.Rect = myRect1;\n\n            GeometryGroup myGeometryGroup1 = new GeometryGroup();\n            myGeometryGroup1.Children.Add(myRectangleGeometry1);\n\n            myPath1.Data = myGeometryGroup1;\n\n            Path myPath2 = new Path();\n            myPath2.Stroke = Brushes.Black;\n            myPath2.StrokeThickness = 1;\n            myPath2.Fill = mySolidColorBrush;\n\n            // Create the rectangle.\n            // This Rect uses the Size property to specify a height of 50 and width\n            // of 200. The Location property uses a Point value to determine the location of the\n            // top-left corner of the rectangle.\n            Rect myRect2 = new Rect();\n            myRect2.Size = new Size(50, 200);\n            myRect2.Location = new Point(300, 100);\n            RectangleGeometry myRectangleGeometry2 = new RectangleGeometry();\n            myRectangleGeometry2.Rect = myRect2;\n\n            GeometryGroup myGeometryGroup2 = new GeometryGroup();\n            myGeometryGroup2.Children.Add(myRectangleGeometry2);\n\n            myPath2.Data = myGeometryGroup2;\n\n            // Add path shape to the UI.\n            Canvas myCanvas = new Canvas();\n            myCanvas.Children.Add(myPath1);\n            myCanvas.Children.Add(myPath2);\n            this.Content = myCanvas;       \n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">\nImports System\nImports System.Windows\nImports System.Windows.Controls\nImports System.Windows.Media\nImports System.Windows.Shapes\n\nNamespace SDKSample\n\tPartial Public Class RectExample\n\t\tInherits Page\n\t\tPublic Sub New()\n\t\t\tDim myPath1 As New Path()\n\t\t\tmyPath1.Stroke = Brushes.Black\n\t\t\tmyPath1.StrokeThickness = 1\n\t\t\tDim mySolidColorBrush As New SolidColorBrush()\n\t\t\tmySolidColorBrush.Color = Color.FromArgb(255, 204, 204, 255)\n\t\t\tmyPath1.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This RectangleGeometry specifies a rectangle that is 100 pixels high and\n\t\t\t&#39; 150 wide. The left side of the rectangle is 10 pixels from the left of the \n\t\t\t&#39; Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n\t\t\t&#39; Note: You could alternatively use the Rect Constructor to create this:\n\t\t\t&#39; Dim myRect1 As New Rect(10,100,150,100&quot;)\n\t\t\tDim myRect1 As New Rect()\n\t\t\tmyRect1.X = 10\n\t\t\tmyRect1.Y = 100\n\t\t\tmyRect1.Width = 150\n\t\t\tmyRect1.Height = 100\n\t\t\tDim myRectangleGeometry1 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry1.Rect = myRect1\n\n\t\t\tDim myGeometryGroup1 As New GeometryGroup()\n\t\t\tmyGeometryGroup1.Children.Add(myRectangleGeometry1)\n\n\t\t\tmyPath1.Data = myGeometryGroup1\n\n\t\t\tDim myPath2 As New Path()\n\t\t\tmyPath2.Stroke = Brushes.Black\n\t\t\tmyPath2.StrokeThickness = 1\n\t\t\tmyPath2.Fill = mySolidColorBrush\n\n\t\t\t&#39; Create the rectangle.\n\t\t\t&#39; This Rect uses the Size property to specify a height of 50 and width\n\t\t\t&#39; of 200. The Location property uses a Point value to determine the location of the\n\t\t\t&#39; top-left corner of the rectangle.\n\t\t\tDim myRect2 As New Rect()\n\t\t\tmyRect2.Size = New Size(50, 200)\n\t\t\tmyRect2.Location = New Point(300, 100)\n\t\t\tDim myRectangleGeometry2 As New RectangleGeometry()\n\t\t\tmyRectangleGeometry2.Rect = myRect2\n\n\t\t\tDim myGeometryGroup2 As New GeometryGroup()\n\t\t\tmyGeometryGroup2.Children.Add(myRectangleGeometry2)\n\n\t\t\tmyPath2.Data = myGeometryGroup2\n\n\t\t\t&#39; Add path shape to the UI.\n\t\t\tDim myCanvas As New Canvas()\n\t\t\tmyCanvas.Children.Add(myPath1)\n\t\t\tmyCanvas.Children.Add(myPath2)\n\t\t\tMe.Content = myCanvas\n\t\tEnd Sub\n\tEnd Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-xml\" name=\"GeometriesMiscSnippets_snip#RectExampleWholePage\">&lt;Page  xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n  xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n  &lt;Canvas&gt;\n    \n    &lt;!-- This rectangle demonstrates using the X, Y, Width, and Height properties\n         of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry specifies a rectangle that is 100 pixels high and\n             150 wide. The left side of the rectangle is 10 pixels from the left of the \n             Canvas and the top side of the rectangle is 100 pixels from the top of the Canvas.  \n             Note: An abbreviated syntax for creating an equivalent rectangle is:\n             &lt;RectangleGeometry Rect=&quot;10,100,150,100&quot; /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect X=&quot;10&quot; Y=&quot;100&quot; Width=&quot;150&quot; Height=&quot;100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n\n    &lt;!-- This rectangle demonstrates using the Size and Location properties of a Rect object. --&gt;\n    &lt;Path Stroke=&quot;Black&quot; StrokeThickness=&quot;1&quot; Fill=&quot;LemonChiffon&quot;&gt;\n      &lt;Path.Data&gt;\n\n        &lt;!-- This RectangleGeometry uses the Size property to specify a height of 50 and width\n             of 200. The Location property uses a Point value to determine the location of the\n             top-left corner of the rectangle. /&gt; --&gt;\n        &lt;RectangleGeometry&gt;\n          &lt;RectangleGeometry.Rect&gt;\n            &lt;Rect Size=&quot;50,200&quot; Location=&quot;300,100&quot; /&gt;\n          &lt;/RectangleGeometry.Rect&gt;\n        &lt;/RectangleGeometry&gt;\n      &lt;/Path.Data&gt;\n    &lt;/Path&gt;\n  &lt;/Canvas&gt;\n&lt;/Page&gt;\n\n</code></pre><p> The following example shows how to use code to create a rectangle and add it to the page. The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <a class=\"xref\" href=\"system.windows.controls.textbox\" data-linktype=\"relative-path\">TextBox</a> below the rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#CreateRectExample1_csharp\">// Create a rectangle and add it to the page. Also,\n// find size and coordinate information about this\n// new rectangle and render information in a TextBox \n// below the rectangle.\nprivate StackPanel createRectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. Set the Location property to an X coordinate of 10 and a\n    // Y coordinate of 5. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    RectangleGeometry myRectangleGeometry = new RectangleGeometry();\n    myRectangleGeometry.Rect = myRectangle;\n\n    // This path is defined by the rectangle.\n    Path myPath = new Path();\n    myPath.Fill = Brushes.LemonChiffon;\n    myPath.Stroke = Brushes.Black;\n    myPath.StrokeThickness = 1;\n    myPath.Data = myRectangleGeometry;\n\n    //////////// Create string of rectangle property information /////////////\n    // This string will contain all the size and coordinate property\n    // information about the rectangle.\n    /////////////////////////////////////////////////////////////////////////\n    string rectInfo = &quot;Rectangle Property Information: &quot;;\n\n    // Bottom property gets the y-axis value of the bottom of the rectangle. \n    // For this rectangle the value is 55.\n    rectInfo = rectInfo + &quot;Bottom: &quot; + myRectangle.Bottom;\n\n    // BottomLeft property gets the coordinates of the bottom left corner of the rectangle. \n    // For this rectangle the value is 10,55.\n    rectInfo = rectInfo + &quot;| BottomLeft: &quot; + myRectangle.BottomLeft;\n\n    // BottomRight property gets the coordinates of the bottom right corner of the rectangle. \n    // For this rectangle the value is 210,55.\n    rectInfo = rectInfo + &quot;| BottomRight: &quot; + myRectangle.BottomRight;\n\n    // Height property gets or sets the height of the rectangle. \n    // For this rectangle the value is 50.\n    rectInfo = rectInfo + &quot;| Height: &quot; + myRectangle.Height;\n\n    // Width property gets or sets the width of the rectangle. \n    // For this rectangle the value is 200.\n    rectInfo = rectInfo + &quot;| Width: &quot; + myRectangle.Width;\n\n    // Left property gets the x-axis position of the left side of the rectangle which is \n    // equivalent to getting the rectangle&#39;s X property. \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| Left: &quot; + myRectangle.Left;\n\n    // Location property gets or sets the position of the rectangle&#39;s top-left corner.\n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| Location: &quot; + myRectangle.Location;\n\n    // Right property gets the x-axis value of the right side of the rectangle. \n    // For this rectangle the value is 210.\n    rectInfo = rectInfo + &quot;| Right: &quot; + myRectangle.Right;\n\n    // Size property gets or sets the width and height of the rectangle.  \n    // For this rectangle the value is 200,50.\n    rectInfo = rectInfo + &quot;| Size: &quot; + myRectangle.Size;\n\n    // Top property gets the y-axis position of the top of the rectangle which is \n    // equivalent to getting the rectangle&#39;s Y property.\n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Top: &quot; + myRectangle.Top;\n\n    // TopLeft property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X, Y).   \n    // For this rectangle the value is 10,5.\n    rectInfo = rectInfo + &quot;| TopLeft: &quot; + myRectangle.TopLeft;\n\n    // TopRight property gets the position of the top-left corner of the rectangle, which \n    // is equivalent to (X + Width, Y).   \n    // For this rectangle the value is 210,5.\n    rectInfo = rectInfo + &quot;| TopRight: &quot; + myRectangle.TopRight;\n\n    // X property gets or sets the location of the rectangle&#39;s left side.  \n    // For this rectangle the value is 10.\n    rectInfo = rectInfo + &quot;| X: &quot; + myRectangle.X;\n\n    // Y property gets or sets the location of the rectangle&#39;s top side.  \n    // For this rectangle the value is 5.\n    rectInfo = rectInfo + &quot;| Y: &quot; + myRectangle.Y;\n\n    //////// End of creating string containing rectangle property information ////////\n\n    // This StackPanel will contain the rectangle and TextBlock.\n    StackPanel parentPanel = new StackPanel();\n\n    // Add the rectangle path to the StackPanel. This will display the rectangle.\n    parentPanel.Children.Add(myPath);\n\n    // Add a TextBlock to display the rectangle&#39;s size and coordinate information.\n    TextBlock myTextBlock = new TextBlock();\n    myTextBlock.Text = rectInfo;\n    parentPanel.Children.Add(myTextBlock);\n\n    // Return the parent container to be displayed to the screen.\n    return parentPanel;\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Contains_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the rectangle contains the specified point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (System.Windows.Point point);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the rectangle contains the specified point; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Contains method to determine if the rectangle contains the specified <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#ContainsExample1_csharp\">private bool rectContainsExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Using the Contains method, see if the rectangle contains the specified\n    // point. doesContain is true because the point is inside of myRectangle.\n    bool doesContain = myRectangle.Contains(new Point(13, 30));\n\n    return doesContain;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Contains_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the rectangle contains the specified rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (System.Windows.Rect rect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>rect</code> is entirely contained by the rectangle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Contains method to determine if one rectangle is contained by another rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#ContainsExample2_csharp\">private bool rectContainsExample2()\n{\n    // Create a rectangle.\n    Rect myRectangle1 = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle1.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle1.Size = new Size(200, 50);\n\n    // Create second rectangle.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(12, 12);\n    myRectangle2.Size = new Size(10, 60);\n\n    // Using the Contains method, see if the second rectangle is \n    // contained within the first rectangle. doesContain is false\n    // because only part of myRectangle2 is contained in myRectangle1 \n    // (myRectangle2 is too wide).\n    bool doesContain = myRectangle1.Contains(myRectangle2);\n\n    return doesContain;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Contains_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Contains_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Contains(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Contains (double x, double y);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>x</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The x-coordinate of the point to check.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>y</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The y-coordinate of the point to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if (<code>x</code>, <code>y</code>) is contained by the rectangle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Contains method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#ContainsExample3_csharp\">private bool rectContainsExample3()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Using the Contains method, see if the rectangle contains the specified\n    // point specified by the given X and Y coordinates. doesContain is false \n    // because the X and Y coordinates specify a point outside of myRectangle.\n    bool doesContain = myRectangle.Contains(4, 13);\n\n    return doesContain;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Equals_System_Object_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified object is equal to the current rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool Equals (object o);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>o</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The object to compare to the current rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if <code>o</code> is a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> and has the same <span class=\"xref\">stem.Windows.Rect.Location*</span> and <span class=\"xref\">stem.Windows.Rect.Size*</span> values as the current rectangle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation tests for object equality.  </p>\n<p> In this comparison, two instances of <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> are considered equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A rectangle&#39;s position and dimensions are described by <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Equals method to determine if a rectangle is equal to a specified object.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#EqualsExample1_csharp\">private bool rectEqualsExample1()\n{\n    // Create a rectangle.\n    Rect myRectangle1 = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle1.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle1.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(10, 5);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Using the Equals method, see if the second rectangle is the\n    // same as the first rectangle. doesEqual is true because both\n    // rectangles are exactly the same with respect to location and size. \n    bool doesEqual = myRectangle1.Equals(myRectangle2);\n\n    return doesEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Equals_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified rectangle is equal to the current rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool Equals (System.Windows.Rect value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to compare to the current rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified rectangle has the same <span class=\"xref\">stem.Windows.Rect.Location*</span> and <span class=\"xref\">stem.Windows.Rect.Size*</span> values as the current rectangle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation tests for object equality.  </p>\n<p> In this comparison, two instances of <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> are considered equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A rectangle&#39;s position and dimensions are described by <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Equals method to determine if a rectangle is equal to a specified rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#EqualsExample1_csharp\">private bool rectEqualsExample1()\n{\n    // Create a rectangle.\n    Rect myRectangle1 = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle1.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle1.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(10, 5);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Using the Equals method, see if the second rectangle is the\n    // same as the first rectangle. doesEqual is true because both\n    // rectangles are exactly the same with respect to location and size. \n    bool doesEqual = myRectangle1.Equals(myRectangle2);\n\n    return doesEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Equals_System_Windows_Rect_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Equals_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Equals(Rect,Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified rectangles are equal.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first rectangle to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second rectangle to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the rectangles have the same <span class=\"xref\">stem.Windows.Rect.Location*</span> and <span class=\"xref\">stem.Windows.Rect.Size*</span> values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation tests for object equality.  </p>\n<p> In this comparison, two instances of <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> are considered equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A rectangle&#39;s position and dimensions are described by <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Equals method to determine if one rectangle is equal to another.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#EqualsExample2_csharp\">private bool rectEqualsExample2()\n{\n    // Create a rectangle.\n    Rect myRectangle1 = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle1.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle1.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(10, 5);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Using the Equals method, see if the second rectangle is \n    // the same as the first rectangle. doesEqual is true because\n    // both rectangles are exactly the same in that they both have the \n    // same location and size.\n    bool doesEqual = Rect.Equals(myRectangle1, myRectangle2);\n\n    return doesEqual;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_GetHashCode\">\r\n    \r\n            <a id=\"System_Windows_Rect_GetHashCode_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetHashCode()</div>        \r\n          </div>\r\n    \r\n            <p>Creates a hash code for the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int GetHashCode ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A hash code for the current <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method creates a hash code by using the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a>, <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a>, and <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> property values.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the GetHashCode method to get the hash code of a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#GetHashCodeExample_csharp\">private int getHashCodeExample()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n    \n    // Get the hashcode of the rectangle.\n    int returnHashCode = myRectangle.GetHashCode();\n\n    return returnHashCode;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Inflate_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Inflate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Inflate(Size)</div>        \r\n          </div>\r\n    \r\n            <p>Expands the rectangle by using the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a>, in all directions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Inflate (System.Windows.Size size);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the amount to expand the rectangle. The <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure&#39;s <span class=\"xref\">stem.Windows.Size.Width*</span> property specifies the amount to increase the rectangle&#39;s <span class=\"xref\">stem.Windows.Rect.Left*</span> and <span class=\"xref\">stem.Windows.Rect.Right*</span> properties. The <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure&#39;s <span class=\"xref\">stem.Windows.Size.Height*</span> property specifies the amount to increase the rectangle&#39;s <span class=\"xref\">stem.Windows.Rect.Top*</span> and <span class=\"xref\">stem.Windows.Rect.Bottom*</span> properties.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method is called on the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> of the resulting rectangle is increased by twice the <a class=\"xref\" href=\"system.windows.size#System_Windows_Size_Width_\" data-linktype=\"relative-path\">Width</a> of the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> of the resulting rectangle is increased by twice the <a class=\"xref\" href=\"system.windows.size#System_Windows_Size_Height_\" data-linktype=\"relative-path\">Height</a> of the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Inflate method to increase the size of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#InflateExample1_csharp\">private Size inflateExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Use the Inflate method to expand the rectangle by the specified Size in all\n    // directions. The new size is 240,110. Note: Width of the resulting rectangle  \n    // is increased by twice the Width of the specified Size structure because  \n    // both the left and right sides of the rectangle are inflated. Likewise, the \n    // Height of the resulting rectangle is increased by twice the Height of the \n    // specified Size structure.\n    myRectangle.Inflate(new Size(20,30));\n\n    return myRectangle.Size;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Inflate_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Inflate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Inflate(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Inflate (double width, double height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount by which to expand or shrink the left and right sides of the rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount by which to expand or shrink the top and bottom sides of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method is called on the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> of the resulting rectangle is increased or decreased by twice the specified height.  </p>\n<p> If the specified width or height shrink the rectangle by more than its current <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a>—giving the rectangle a negative area—the rectangle becomes the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a> rectangle.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Inflate method to change the size of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#InflateExample2_csharp\">private Size inflateExample2()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200,50);\n\n    // Use the Inflate method to expand or shrink the rectangle by the specified \n    // width and height amounts. The new size is 160,150 (width shrunk by 40 and  \n    // height increased by 100). Note: Width of the resulting rectangle is increased \n    // or shrunk by twice the specified width, because both the left and right sides  \n    // of the rectangle are inflated or shrunk. Likewise, the height of the resulting \n    // rectangle is increased or shrunk by twice the specified height.\n    myRectangle.Inflate(-20,50);\n\n    return myRectangle.Size;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Inflate_System_Windows_Rect_System_Windows_Size_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Inflate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Inflate(Rect,Size)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the rectangle that results from expanding the specified rectangle by the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a>, in all directions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to modify.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>size</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Specifies the amount to expand the rectangle. The <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure&#39;s <span class=\"xref\">stem.Windows.Size.Width*</span> property specifies the amount to increase the rectangle&#39;s <span class=\"xref\">stem.Windows.Rect.Left*</span> and <span class=\"xref\">stem.Windows.Rect.Right*</span> properties. The <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure&#39;s <span class=\"xref\">stem.Windows.Size.Height*</span> property specifies the amount to increase the rectangle&#39;s <span class=\"xref\">stem.Windows.Rect.Top*</span> and <span class=\"xref\">stem.Windows.Rect.Bottom*</span> properties.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The resulting rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>rect</code> is an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> of the resulting rectangle is increased by twice the <a class=\"xref\" href=\"system.windows.size#System_Windows_Size_Width_\" data-linktype=\"relative-path\">Width</a> of the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure, because both the left and right sides of the rectangle are inflated. Likewise, the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> of the resulting rectangle is increased by twice the <a class=\"xref\" href=\"system.windows.size#System_Windows_Size_Height_\" data-linktype=\"relative-path\">Height</a> of the specified <a class=\"xref\" href=\"system.windows.size\" data-linktype=\"relative-path\">Size</a> structure.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Inflate method to change the size of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#InflateExample3_csharp\">private Size inflateExample3()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Use the static Inflate method to return an expanded version of myRectangle1.   \n    // The size of myRectangle2 is 240,110. Note: Width of the resulting rectangle is increased \n    // by twice the Width of the specified Size structure, because both the left and right \n    // sides of the rectangle are inflated. Likewise, the Height of the resulting \n    // rectangle is increased by twice the Height of the specified Size structure.\n    Rect myRectangle2 = Rect.Inflate(myRectangle, new Size(20, 30));\n\n    return myRectangle2.Size;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Inflate_System_Windows_Rect_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Inflate_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Inflate(Rect,Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure to modify.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>width</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount by which to expand or shrink the left and right sides of the rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>height</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount by which to expand or shrink the top and bottom sides of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The resulting rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>rect</code> is an <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a> of the resulting rectangle is increased or decreased by twice the specified height.  </p>\n<p> If the specified width or height modifiers shrink the rectangle by more than its current <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Width_\" data-linktype=\"relative-path\">Width</a> or <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Height_\" data-linktype=\"relative-path\">Height</a>—giving the rectangle a negative area—this method returns <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Inflate method to change the size of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#InflateExample4_csharp\">private Size inflateExample4()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Use the static Inflate method to return a version of myRectangle with a shrunk\n    // width and expanded height. The size of myRectangle2 is 160,150. Note: Width of the resulting \n    // rectangle is increased or shrunk by twice the specified width, because both the\n    // left and right sides of the rectangle are inflated or shrunk. Likewise, the height \n    // of the resulting rectangle is increased or shrunk by twice the specified height.\n    Rect myRectangle2 = Rect.Inflate(myRectangle, -20, 50);\n\n    return myRectangle2.Size;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Intersect_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Intersect (System.Windows.Rect rect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to intersect with the current rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If no intersection exists, the current rectangle becomes <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Intersect method to find the intersection of two rectangles and store the result as a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#IntersectExample1_csharp\">private Rect intersectExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Intersect method finds the intersection between the current rectangle and the \n    // specified rectangle, and stores the result as the current rectangle. If no \n    // intersection exists, the current rectangle becomes the Empty rectangle. \n    // myRectangle now has a size of 190,45 and location of 10,5. \n    myRectangle.Intersect(myRectangle2);\n\n    // myRectangle has been changed into the intersection area between the old myRectangle\n    // and myRectangle2 (new size of 190,45 and new location of 10,5).\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Intersect_System_Windows_Rect_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Intersect_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Intersect(Rect,Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the intersection of the specified rectangles.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first rectangle to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second rectangle to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The intersection of the two rectangles, or <span class=\"xref\">stem.Windows.Rect.Empty*</span> if no intersection exists.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The following example shows how to use the Intersect method to find the intersection of two rectangles.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#IntersectExample2_csharp\">private Rect intersectExample2()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Intersect method finds the intersection between the specified rectangles and \n    // returns the result as a Rect. If there is no intersection then the Empty Rect \n    // is returned. resultRectangle has a size of 190,45 and location of 10,5. \n    Rect resultRectangle = Rect.Intersect(myRectangle, myRectangle2);\n\n    return resultRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_IntersectsWith_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_IntersectsWith_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IntersectsWith(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Indicates whether the specified rectangle intersects with the current rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public bool IntersectsWith (System.Windows.Rect rect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to check.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the specified rectangle intersects with the current rectangle; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the IntersectsWith method to determine if two rectangles intersect.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#IntersectsWithExample_csharp\">private bool intersectsWithExample()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // IntersectsWith method indicates whether the specified rectangle intersects \n    // with this rectangle. doesIntersect returns true because the two rectangles\n    // intersect. \n    bool doesIntersect = myRectangle.IntersectsWith(myRectangle2);\n\n    // Returns true.\n    return doesIntersect;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Offset_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Offset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Offset(Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Moves the rectangle by the specified vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Offset (System.Windows.Vector offsetVector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetVector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A vector that specifies the horizontal and vertical amounts to move the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method is called on the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method on an empty rectangle (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a>) is not allowed.  </p>\n<p> Note that calling the Offset method will only have an effect if you can change the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> properties directly. Because <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> is a value type, if you reference a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> or <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> that is referenced as a property or indexer, create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a>, modify its fields, and then assign the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> back to the property or indexer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Offset method to change the position of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#OffsetExample1_csharp\">private Point offsetExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create a vector to use to offset the position of the rectangle.\n    Vector vector1 = new Vector(20, 30);\n\n    // The Offset method translates this rectangle by the specified vector.\n    // myRectangle location changed from 10,5 to 30,35.\n    myRectangle.Offset(vector1);\n\n    // This rectangle&#39;s location changed from 10,5 to 30,35.\n    return myRectangle.Location;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Offset_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Offset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Offset(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Moves the rectangle by the specified horizontal and vertical amounts.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Offset (double offsetX, double offsetY);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetX</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount to move the rectangle horizontally.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetY</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The amount to move the rectangle vertically.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>This method is called on the <span class=\"xref\">stem.Windows.Rect.Empty*</span> rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method on an empty rectangle (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a>) is not allowed.  </p>\n<p> Note that calling the Offset method will only have an effect if you can change the <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> and <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> properties directly. Because <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> is a value type, if you reference a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> object by using a property or indexer, you get a copy of the object, not a reference to the object. If you attempt to change <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_X_\" data-linktype=\"relative-path\">X</a> or <a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Y_\" data-linktype=\"relative-path\">Y</a> on a property or indexer reference, a compiler error occurs. Similarly, calling Offset on the property or indexer will not change the underlying object.  If you want to change the value of a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> that is referenced as a property or indexer, create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a>, modify its fields, and then assign the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> back to the property or indexer.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Offset method to change the position of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#OffsetExample2_csharp\">private Point offsetExample2()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // The Offset method translates this rectangle by the specified horizontal and \n    // vertical amounts. \n    // myRectangle location changed from 10,5 to 30,35.\n    myRectangle.Offset(20,30);\n\n    // This rectangle&#39;s location changed from 10,5 to 30,35.\n    return myRectangle.Location;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Offset_System_Windows_Rect_System_Windows_Vector_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Offset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Offset(Rect,Vector)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a rectangle that is offset from the specified rectangle by using the specified vector.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The original rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetVector</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.vector\" data-linktype=\"relative-path\">Vector</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A vector that specifies the horizontal and vertical offsets for the new rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The resulting rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>rect</code> is <span class=\"xref\">stem.Windows.Rect.Empty*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method with an empty rectangle (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a>) is not allowed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Offset method to change the position of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#OffsetExample3_csharp\">private Point offsetExample3()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create a vector to use to offset the position of the rectangle.\n    Vector vector1 = new Vector(20, 30);\n\n    // The Offset method translates the specified rectangle by the specified amount \n    // and returns the resulting Rect. \n    // resultRect location changed from 10,5 to 30,35.\n    Rect resultRect = Rect.Offset(myRectangle, vector1);\n\n    // This rectangle&#39;s location changed from 10,5 to 30,35.\n    return resultRect.Location;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Offset_System_Windows_Rect_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Offset_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Offset(Rect,Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to move.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetX</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The horizontal offset for the new rectangle.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offsetY</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The vertical offset for the new rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The resulting rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p><code>rect</code> is <span class=\"xref\">stem.Windows.Rect.Empty*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Calling this method with an empty rectangle (<a class=\"xref\" href=\"system.windows.rect#System_Windows_Rect_Empty_\" data-linktype=\"relative-path\">Empty</a>) is not allowed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Offset method to change the position of a rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#OffsetExample4_csharp\">private Point offsetExample4()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create a vector to use to offset the position of the rectangle.\n    Vector vector1 = new Vector(20, 30);\n\n    // The Offset method translates the specified rectangle by the specified horizontal \n    // and vertical amounts and returns the resulting Rect. \n    // resultRect location changed from 10,5 to 30,35.\n    Rect resultRect = Rect.Offset(myRectangle, 20, 30);\n\n    // This rectangle&#39;s location changed from 10,5 to 30,35.\n    return resultRect.Location;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Parse_System_String_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Parse_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Parse(String)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a new rectangle from the specified string representation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Parse (string source);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>source</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The string representation of the rectangle, in the form &quot;x, y, width, height&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The resulting rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Parse method to convert a string representation of a rectangle into a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#ParseExample\">private Rect parseExample()\n{\n\n    // Converts a string representation of a Rect into a Rect structure\n    // using the Parse static method.\n    Rect resultRect = Rect.Parse(&quot;10,5, 200,50&quot;);\n\n    return resultRect;\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RectExamples_snip#ParseExample\">Private Function parseExample() As Rect\n\n\t&#39; Converts a string representation of a Rect into a Rect structure\n\t&#39; using the Parse static method.\n\tDim resultRect As Rect = Rect.Parse(&quot;10,5, 200,50&quot;)\n\n\tReturn resultRect\n\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Scale_System_Double_System_Double_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Scale_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Scale(Double,Double)</div>        \r\n          </div>\r\n    \r\n            <p>Multiplies the size of the current rectangle by the specified x and y values.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Scale (double scaleX, double scaleY);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>scaleX</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scale factor in the x-direction.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>scaleY</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The scale factor in the y-direction.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Scale method to multiply the width and height of a rectangle by the specified amount.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#ScaleExample_csharp\">private Size scaleExample()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n  \n    // The Scale method multiplies the size of the rectangle by the specified amount. \n    // myRectangle size changed from (200,50) to (4000,1500).\n    myRectangle.Scale(20, 30);\n\n    // Returns a size of 4000,1500.\n    return myRectangle.Size;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_ToString\">\r\n    \r\n            <a id=\"System_Windows_Rect_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representation of the rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override string ToString ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of the current rectangle. The string has the following form: &quot;<span class=\"xref\">stem.Windows.Rect.X*</span>,<span class=\"xref\">stem.Windows.Rect.Y*</span>,<span class=\"xref\">stem.Windows.Rect.Width*</span>,<span class=\"xref\">stem.Windows.Rect.Height*</span>&quot;.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the ToString method to get a string representation of a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#ToStringExample_csharp\">private string toStringExample()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Get a string representation of a Rect structure.\n    // rectString is equal to &quot;10,5,200,50&quot;\t.\n    string rectString = myRectangle.ToString();\n\n    return rectString;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_ToString_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Windows_Rect_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ToString(IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Returns a string representation of the rectangle by using the specified format provider.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public string ToString (IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>Culture-specific formatting information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of the current rectangle that is determined by the specified format provider.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Transform_System_Windows_Media_Matrix_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Transform_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Transform(Matrix)</div>        \r\n          </div>\r\n    \r\n            <p>Transforms the rectangle by applying the specified matrix.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Transform (System.Windows.Media.Matrix matrix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>matrix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A matrix that specifies the transformation to apply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Transform method to transform a <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure by using a <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#TransformExample1_csharp\">private Rect transformExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 60.\n    myRectangle.Size = new Size(200, 60);\n\n    // Creating a Matrix structure.\n    Matrix myMatrix = new Matrix(0, 1, 1, 0, 20, 2);\n\n    // The Transform method transforms this rectangle using the specified matrix.  \n    // myRectangle location changed from 0,0 to 20, 2 and the size changed from\n    // 200,60 to 60,200.\n    myRectangle.Transform(myMatrix);\n\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Transform_System_Windows_Rect_System_Windows_Media_Matrix_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Transform_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Transform(Rect,Matrix)</div>        \r\n          </div>\r\n    \r\n            <p>Returns the rectangle that results from applying the specified matrix to the specified rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A rectangle that is the basis for the transformation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>matrix</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A matrix that specifies the transformation to apply.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The rectangle that results from the operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Transform method to create a new <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> structure that results from applying a <a class=\"xref\" href=\"system.windows.media.matrix\" data-linktype=\"relative-path\">Matrix</a> to an existing rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#TransformExample2_csharp\">private Rect transformExample2()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 60.\n    myRectangle.Size = new Size(200, 60);\n\n    // Creating a Matrix structure.\n    Matrix myMatrix = new Matrix(0, 1, 1, 0, 20, 2);\n\n    // The Transform method Transforms the specified rectangle using the specified matrix \n    // and returns the results.  \n    // resultRect is an alterned version of myRectangle with a location of 20,2 rather\n    // then 0,0 and a size of 60,200 rather then 200,60.\n    Rect resultRect = Rect.Transform(myRectangle,myMatrix);\n\n    return resultRect;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Union_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(Point)</div>        \r\n          </div>\r\n    \r\n            <p>Expands the current rectangle exactly enough to contain the specified point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Union (System.Windows.Point point);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point to include.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Union method to expand the current rectangle exactly enough to contain a given <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#UnionExample1_csharp\">private Rect unionExample1()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // The Union method expands the current rectangle exactly enough to contain \n    // the specified point. myRectangle expands to a location of 0,0 and a size\n    // of 210,55.\n    myRectangle.Union(new Point(0,0));\n\n    // Returns 0,0,210,55\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Union_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Expands the current rectangle exactly enough to contain the specified rectangle.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public void Union (System.Windows.Rect rect);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to include.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Union method to expand the current rectangle exactly enough to contain the specified rectangle.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#UnionExample2_csharp\">private Rect unionExample2()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // The Union method expands the current rectangle exactly enough to contain \n    // the specified rectangle. myRectangle expands to a location of 0,0 and a size\n    // of 210,55.\n    myRectangle.Union(myRectangle2);\n\n    // Returns 0,0,210,55\n    return myRectangle;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Union_System_Windows_Rect_System_Windows_Point_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(Rect,Point)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The rectangle to include.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>point</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The point to include.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain a given rectangle and a given <a class=\"xref\" href=\"system.windows.point\" data-linktype=\"relative-path\">Point</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#UnionExample3_csharp\">private Rect unionExample3()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // The Union method expands the current rectangle exactly enough to contain \n    // the specified rectangle and the specified Point. In this example, returnRect \n    // expands to a location of 0,0 and a size of 250,60.\n    Rect returnRect = Rect.Union(myRectangle2, new Point(250,60));\n\n    // Returns 0,0,250,60\n    return returnRect;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_Union_System_Windows_Rect_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_Union_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Union(Rect,Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Creates a rectangle that is exactly large enough to contain the two specified rectangles.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first rectangle to include.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second rectangle to include.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </div>\r\n                  <p>The resulting rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Union method to create a rectangle that is exactly large enough to contain two given rectangles.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#UnionExample4_csharp\">private Rect unionExample4()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Create a third rectangle.\n    Rect myRectangle3 = new Rect();\n    myRectangle3.Location = new Point(210, 60);\n    myRectangle3.Size = new Size(50, 50);\n\n    // The Union method expands the current rectangle exactly enough to contain \n    // the two specified rectangles. In this example, returnRect expands to \n    // a location of 0,0 and a size of 260,110.\n    Rect returnRect = Rect.Union(myRectangle2, myRectangle3);\n\n    // Returns 0,0,260,110\n    return returnRect;\n\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"operators\">\r\n        <h2>Operators\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_op_Equality_System_Windows_Rect_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_op_Equality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Equality(Rect,Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two rectangles for exact equality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Equality (System.Windows.Rect rect1, System.Windows.Rect rect2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first rectangle to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second rectangle to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the rectangles have the same <span class=\"xref\">stem.Windows.Rect.Location*</span> and <span class=\"xref\">stem.Windows.Rect.Size*</span> values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation tests for object equality.  </p>\n<p> In this comparison, two instances of <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> are considered equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A rectangle&#39;s position and dimensions are described by <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Equality operator to determine if two rectangles are exactly equal.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#OverloadedEqualityOperatorExample\">private Boolean overloadedEqualityOperatorExample()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Check if the two Rects are exactly equal using the overloaded equality operator.\n    // areEqual is false because although the size of each rectangle is the same,\n    // the locations are different.\n    bool areEqual = (myRectangle == myRectangle2);\n\n    // Returns false.\n    return areEqual;\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RectExamples_snip#OverloadedEqualityOperatorExample\">Private Function overloadedEqualityOperatorExample() As Boolean\n\t&#39; Initialize new rectangle.\n\tDim myRectangle As New Rect()\n\n\t&#39; The Location property specifies the coordinates of the upper left-hand \n\t&#39; corner of the rectangle. \n\tmyRectangle.Location = New Point(10, 5)\n\n\t&#39; Set the Size property of the rectangle with a width of 200\n\t&#39; and a height of 50.\n\tmyRectangle.Size = New Size(200, 50)\n\n\t&#39; Create second rectangle to compare to the first.\n\tDim myRectangle2 As New Rect()\n\tmyRectangle2.Location = New Point(0, 0)\n\tmyRectangle2.Size = New Size(200, 50)\n\n\t&#39; Check if the two Rects are exactly equal using the overloaded equality operator.\n\t&#39; areEqual is false because although the size of each rectangle is the same,\n\t&#39; the locations are different.\n\tDim areEqual As Boolean = (myRectangle = myRectangle2)\n\n\t&#39; Returns false.\n\tReturn areEqual\n\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_op_Inequality_System_Windows_Rect_System_Windows_Rect_\">\r\n    \r\n            <a id=\"System_Windows_Rect_op_Inequality_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">op_Inequality(Rect,Rect)</div>        \r\n          </div>\r\n    \r\n            <p>Compares two rectangles for inequality.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public static bool op_Inequality (System.Windows.Rect rect1, System.Windows.Rect rect2);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect1</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The first rectangle to compare.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>rect2</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The second rectangle to compare.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the rectangles do not have the same <span class=\"xref\">stem.Windows.Rect.Location*</span> and <span class=\"xref\">stem.Windows.Rect.Size*</span> values; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This operation tests for object inequality.  </p>\n<p> In this comparison, two instances of <a class=\"xref\" href=\"system.double#System_Double_NaN\" data-linktype=\"relative-path\">System.Double.NaN</a> are considered equal.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A rectangle&#39;s position and dimensions are described by <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values. Because <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</p>\n</div>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following example shows how to use the Inequality operator to determine if two rectangles are not exactly equal.  </p>\n<pre><code class=\"lang-cs\" name=\"RectExamples_snip#OverloadedInequalityOperatorExample\">private Boolean overloadedInequalityOperatorExample()\n{\n    // Initialize new rectangle.\n    Rect myRectangle = new Rect();\n\n    // The Location property specifies the coordinates of the upper left-hand \n    // corner of the rectangle. \n    myRectangle.Location = new Point(10, 5);\n\n    // Set the Size property of the rectangle with a width of 200\n    // and a height of 50.\n    myRectangle.Size = new Size(200, 50);\n\n    // Create second rectangle to compare to the first.\n    Rect myRectangle2 = new Rect();\n    myRectangle2.Location = new Point(0, 0);\n    myRectangle2.Size = new Size(200, 50);\n\n    // Check if the two Rects are not equal using the overloaded inequality operator.\n    // notEqual is true because although the size of each rectangle is the same,\n    // the locations are different.\n    bool notEqual = (myRectangle != myRectangle2);\n\n    // Returns true.\n    return notEqual;\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RectExamples_snip#OverloadedInequalityOperatorExample\">Private Function overloadedInequalityOperatorExample() As Boolean\n\t&#39; Initialize new rectangle.\n\tDim myRectangle As New Rect()\n\n\t&#39; The Location property specifies the coordinates of the upper left-hand \n\t&#39; corner of the rectangle. \n\tmyRectangle.Location = New Point(10, 5)\n\n\t&#39; Set the Size property of the rectangle with a width of 200\n\t&#39; and a height of 50.\n\tmyRectangle.Size = New Size(200, 50)\n\n\t&#39; Create second rectangle to compare to the first.\n\tDim myRectangle2 As New Rect()\n\tmyRectangle2.Location = New Point(0, 0)\n\tmyRectangle2.Size = New Size(200, 50)\n\n\t&#39; Check if the two Rects are not equal using the overloaded inequality operator.\n\t&#39; notEqual is true because although the size of each rectangle is the same,\n\t&#39; the locations are different.\n\tDim notEqual As Boolean = (myRectangle &lt;&gt; myRectangle2)\n\n\t&#39; Returns true.\n\tReturn notEqual\n\nEnd Function\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"eii\">\r\n        <h2>Explicit Interface Implementations\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Rect_System_IFormattable_ToString_System_String_System_IFormatProvider_\">\r\n    \r\n            <a id=\"System_Windows_Rect_System_IFormattable_ToString_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IFormattable.ToString(String,IFormatProvider)</div>        \r\n          </div>\r\n    \r\n            <p>Formats the value of the current instance using the specified format.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">string IFormattable.ToString (string format, IFormatProvider provider);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>format</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The format to use.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic) to use the default format defined for the type of the <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> implementation.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>provider</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The provider to use to format the value.  </p>\n<p> -or-  </p>\n<p> A null reference (<code>Nothing</code> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </div>\r\n                  <p>A string representation of the rectangle.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This member is an explicit interface member implementation. It can be used only when the <a class=\"xref\" href=\"system.windows.rect\" data-linktype=\"relative-path\">Rect</a> instance is cast to an <a class=\"xref\" href=\"system.iformattable\" data-linktype=\"relative-path\">IFormattable</a> interface.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Rect.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Rect.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Bottom\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.BottomLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.BottomRight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Contains\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Empty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Equals\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Height\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Inflate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Intersect\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.IntersectsWith\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.IsEmpty\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Left\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Location\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Offset\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Parse\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Right\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Scale\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Size\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.IFormattable.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Top\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.TopLeft\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.TopRight\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.ToString\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Transform\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Union\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Width\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.X\">\r\n<meta name=\"APIName\" content=\"System.Windows.Rect.Y\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"332528b6-f3a1-ad04-7ca7-9113666e79d6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes the width, height, and location of a rectangle.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Rect\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Rect.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Rect.yml","open_to_public_contributors":true,"api_name":["System.Windows.Rect","System.Windows.Rect..ctor","System.Windows.Rect.Bottom","System.Windows.Rect.BottomLeft","System.Windows.Rect.BottomRight","System.Windows.Rect.Contains","System.Windows.Rect.Empty","System.Windows.Rect.Equals","System.Windows.Rect.GetHashCode","System.Windows.Rect.Height","System.Windows.Rect.Inflate","System.Windows.Rect.Intersect","System.Windows.Rect.IntersectsWith","System.Windows.Rect.IsEmpty","System.Windows.Rect.Left","System.Windows.Rect.Location","System.Windows.Rect.Offset","System.Windows.Rect.op_Equality","System.Windows.Rect.op_op_Equality","System.Windows.Rect.op_Inequality","System.Windows.Rect.op_op_Inequality","System.Windows.Rect.Parse","System.Windows.Rect.Right","System.Windows.Rect.Scale","System.Windows.Rect.Size","System.Windows.Rect.IFormattable.ToString","System.Windows.Rect.Top","System.Windows.Rect.TopLeft","System.Windows.Rect.TopRight","System.Windows.Rect.ToString","System.Windows.Rect.Transform","System.Windows.Rect.Union","System.Windows.Rect.Width","System.Windows.Rect.X","System.Windows.Rect.Y"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Rect","System::Windows::Rect","System.Windows.Rect.#ctor","System::Windows::Rect::#ctor","System.Windows.Rect.Bottom","System::Windows::Rect::Bottom","System.Windows.Rect.BottomLeft","System::Windows::Rect::BottomLeft","System.Windows.Rect.BottomRight","System::Windows::Rect::BottomRight","System.Windows.Rect.Contains","System::Windows::Rect::Contains","System.Windows.Rect.Empty","System::Windows::Rect::Empty","System.Windows.Rect.Equals","System::Windows::Rect::Equals","System.Windows.Rect.GetHashCode","System::Windows::Rect::GetHashCode","System.Windows.Rect.Height","System::Windows::Rect::Height","System.Windows.Rect.Inflate","System::Windows::Rect::Inflate","System.Windows.Rect.Intersect","System::Windows::Rect::Intersect","System.Windows.Rect.IntersectsWith","System::Windows::Rect::IntersectsWith","System.Windows.Rect.IsEmpty","System::Windows::Rect::IsEmpty","System.Windows.Rect.Left","System::Windows::Rect::Left","System.Windows.Rect.Location","System::Windows::Rect::Location","System.Windows.Rect.Offset","System::Windows::Rect::Offset","System.Windows.Rect.op_Equality","System::Windows::Rect::op_Equality","System.Windows.Rect.op_Inequality","System::Windows::Rect::op_Inequality","System.Windows.Rect.Parse","System::Windows::Rect::Parse","System.Windows.Rect.Right","System::Windows::Rect::Right","System.Windows.Rect.Scale","System::Windows::Rect::Scale","System.Windows.Rect.Size","System::Windows::Rect::Size","System.Windows.Rect.System#IFormattable#ToString","System::Windows::Rect::System#IFormattable#ToString","System.Windows.Rect.Top","System::Windows::Rect::Top","System.Windows.Rect.TopLeft","System::Windows::Rect::TopLeft","System.Windows.Rect.TopRight","System::Windows::Rect::TopRight","System.Windows.Rect.ToString","System::Windows::Rect::ToString","System.Windows.Rect.Transform","System::Windows::Rect::Transform","System.Windows.Rect.Union","System::Windows::Rect::Union","System.Windows.Rect.Width","System::Windows::Rect::Width","System.Windows.Rect.X","System::Windows::Rect::X","System.Windows.Rect.Y","System::Windows::Rect::Y"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"332528b6-f3a1-ad04-7ca7-9113666e79d6","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows/Rect.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Rect struct | Microsoft Docs","_op_ogTitle":"Rect struct","description":"Describes the width, height, and location of a rectangle.\n","toc_asset_id":"_splitted/System.Windows/toc.json","toc_rel":"_splitted/System.Windows/toc.json","source_url":"","ms.assetid":"System.Windows.Rect","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.rect","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.rect","fileRelativePath":"System.Windows.Rect.html"},"themesRelativePathToOutputRoot":"_themes/"}