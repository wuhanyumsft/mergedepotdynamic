{"content":"    \r\n    <h1 id=\"System_Runtime_Remoting_Channels_ITransportHeaders\">\r\n      <span class=\"lang-csharp\">ITransportHeaders</span>\r\n        Interface\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Stores a collection of headers used in the channel sinks.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface ITransportHeaders</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_ITransportHeaders_Item_System_Object_\" data-linktype=\"self-bookmark\">Item(Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets a transport header associated with the given key.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Runtime_Remoting_Channels_ITransportHeaders_GetEnumerator\" data-linktype=\"self-bookmark\">GetEnumerator()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Returns a <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates over all entries in the <a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a> object.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_ITransportHeaders_Item_System_Object_\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_ITransportHeaders_Item_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Item(Object)</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets a transport header associated with the given key.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public object this[object key] { get; set; }</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>key</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The key the requested transport header is associated with.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </div>\r\n                  <p>A transport header associated with the given key.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If a stored header is set to <code>null</code>, the key-value pair is removed.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"ITransportHeaders_Item#1\">#using &lt;System.Runtime.Remoting.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;ITransportHeaders_3_Share.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Runtime::Remoting::Channels;\nusing namespace System::Runtime::Remoting::Channels::Tcp;\nref class MyITransportHeadersClass: public ITransportHeaders\n{\nprivate:\n\n   int myInt;\n   array&lt;DictionaryEntry&gt;^myDictionaryEntry;\n\npublic:\n   MyITransportHeadersClass()\n   {\n      myInt = 0;\n      myDictionaryEntry = gcnew array&lt;DictionaryEntry&gt;(10);\n   }\n\n\n   property Object^ Item [Object^]\n   {\n\n      // Implement the &#39;Item&#39; property.\n     virtual Object^ get( Object^ myKey )\n      {\n         if ( myKey != nullptr )\n         {\n            for ( int i = 0; i &lt;= myInt; i++ )\n               if ( myDictionaryEntry[ i ].Key == myKey )\n                              return myDictionaryEntry[ i ].Value;\n         }\n\n         return nullptr;\n      }\n\n      virtual void set( Object^ myKey, Object^ value )\n      {\n         myDictionaryEntry[ myInt ] = DictionaryEntry(myKey,value);\n         myInt++;\n      }\n\n   }\n\n   // Implement the &#39;GetEnumerator&#39; method.\n   virtual IEnumerator^ GetEnumerator()\n   {\n      Hashtable^ myHashtable = gcnew Hashtable;\n      for ( int j = 0; j &lt; myInt; j++ )\n         myHashtable-&gt;Add( myDictionaryEntry[ j ].Key, myDictionaryEntry[ j ].Value );\n      return myHashtable-&gt;GetEnumerator();\n   }\n\n};\n\nint main()\n{\n   try\n   {\n      \n      // Create and register a &#39;TcpChannel&#39; object.\n      TcpChannel^ myTcpChannel = gcnew TcpChannel( 8085 );\n      ChannelServices::RegisterChannel( myTcpChannel, false );\n\t  RemotingConfiguration::RegisterWellKnownServiceType( MyHelloServer::typeid, &quot;SayHello&quot;, WellKnownObjectMode::SingleCall );\n      \n      // Create an instance of &#39;myITransportHeadersObj&#39;.\n      MyITransportHeadersClass^ myITransportHeadersObj = gcnew MyITransportHeadersClass;\n      ITransportHeaders^ myITransportHeaders = dynamic_cast&lt;ITransportHeaders^&gt;(myITransportHeadersObj);\n      \n      // Add items to the header list.\n      myITransportHeaders-&gt;default[ &quot;Header1&quot; ] = &quot;TransportHeader1&quot;;\n      myITransportHeaders-&gt;default[ &quot;Header2&quot; ] = &quot;TransportHeader2&quot;;\n      \n      // Get the &#39;ITranportHeader&#39; item value with key &#39;Header2&#39;.\n      Console::WriteLine( &quot;ITransport Header item value with key &#39;Header2&#39; is :{0}&quot;, myITransportHeaders-&gt;default[ &quot;Header2&quot; ] );\n      IEnumerator^ myEnumerator = myITransportHeaders-&gt;GetEnumerator();\n      Console::WriteLine( &quot;     -KEY-      -VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         \n         // Display the &#39;Key&#39; and &#39;Value&#39; of the current element.\n         Object^ myEntry = myEnumerator-&gt;Current;\n         DictionaryEntry myDictionaryEntry =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEntry);\n         Console::WriteLine( &quot;   {0}:   {1}&quot;, myDictionaryEntry.Key, myDictionaryEntry.Value );\n      }\n      Console::WriteLine( &quot;Hit &lt;enter&gt; to exit...&quot; );\n      Console::ReadLine();\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;The following exception is raised on the server side: {0}&quot;, ex-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ITransportHeaders_Item#1\">\nImports System\nImports System.Collections\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Channels\nImports System.Runtime.Remoting.Channels.Tcp\n\nClass MyITransportHeadersClass\n   Implements ITransportHeaders\n   Private myInt As Integer = 0\n   Private myDictionaryEntry(9) As DictionaryEntry\n   &#39; Implement the &#39;Item&#39; property.\n   Property ITransportHeaders(myKey As Object) As Object Implements ITransportHeaders.Item\n      Get\n         If Not (myKey Is Nothing) Then\n            Dim i As Integer\n            For i = 0 To myInt\n               If myDictionaryEntry(i).Key = myKey Then\n                  Return myDictionaryEntry(i).Value\n               End If\n            Next i\n         End If\n         Return 0\n      End Get\n      Set\n         myDictionaryEntry(myInt) = New DictionaryEntry(myKey, value)\n         myInt += 1\n      End Set\n   End Property\n\n   &#39; Implement the &#39;GetEnumerator&#39; method.\n   Function GetEnumerator() As IEnumerator  Implements ITransportHeaders.GetEnumerator\n      Dim myHashtable As New Hashtable()\n      Dim j As Integer\n      For j = 0 To myInt - 1\n         myHashtable.Add(myDictionaryEntry(j).Key, myDictionaryEntry(j).Value)\n      Next j\n      Return myHashtable.GetEnumerator()\n   End Function &#39;ITransportHeaders.GetEnumerator\n\n   Public Shared Sub Main()\n      Try\n         &#39; Create and register a &#39;TcpChannel&#39; object.\n         Dim myTcpChannel As New TcpChannel(8085)\n         ChannelServices.RegisterChannel(myTcpChannel)\n         RemotingConfiguration.RegisterWellKnownServiceType(GetType(MyHelloServer), &quot;SayHello&quot;, _\n                                                         WellKnownObjectMode.SingleCall)\n         &#39; Create an instance of &#39;myITransportHeadersObj&#39;.\n         Dim myITransportHeadersObj As New MyITransportHeadersClass()\n         Dim myITransportHeaders As ITransportHeaders = _\n                                              CType(myITransportHeadersObj, ITransportHeaders)\n         &#39; Add items to the header list.\n         myITransportHeaders(&quot;Header1&quot;) = &quot;TransportHeader1&quot;\n         myITransportHeaders(&quot;Header2&quot;) = &quot;TransportHeader2&quot;\n         &#39; Get the &#39;ITranportHeader&#39; item value with key &#39;Header2&#39;.\n         Console.WriteLine(&quot;ITransport Header item value with key &#39;Header2&#39; is :&quot; + _\n                                                        myITransportHeaders(&quot;Header2&quot;))\n         Dim myEnumerator As IEnumerator = myITransportHeaders.GetEnumerator()\n         Console.WriteLine(&quot;     -KEY-      -VALUE-&quot;)\n         While myEnumerator.MoveNext()\n            &#39; Display the &#39;Key&#39; and &#39;Value&#39; of the current element.\n            Dim myEntry As Object = myEnumerator.Current\n            Dim myDictionaryEntry As DictionaryEntry = CType(myEntry, DictionaryEntry)\n            Console.WriteLine(&quot;   {0}:   {1}&quot;, myDictionaryEntry.Key, myDictionaryEntry.Value)\n         End While\n         Console.WriteLine(&quot;Hit &lt;enter&gt; to exit...&quot;)\n         Console.ReadLine()\n      Catch ex As Exception\n         Console.WriteLine(&quot;The following exception is raised on the server side: &quot; + ex.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;MyITransportHeadersClass\n</code></pre><pre><code class=\"lang-cs\" name=\"ITransportHeaders_Item#1\">\nusing System;\nusing System.Collections;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Channels.Tcp;\n\nclass MyITransportHeadersClass : ITransportHeaders\n{\n   int myInt = 0;\n   DictionaryEntry[] myDictionaryEntry = new DictionaryEntry[10];\n   // Implement the &#39;Item&#39; property.\n   object ITransportHeaders.this[object myKey]\n   {\n      get\n      {\n         if(myKey != null)\n         {\n            for(int i = 0; i &lt;= myInt; i++)\n               if(myDictionaryEntry[i].Key == myKey)\n                  return myDictionaryEntry[i].Value;\n         }\n         return 0;\n      }\n      set\n      {\n         myDictionaryEntry[myInt] = new DictionaryEntry(myKey, value);\n         myInt++;\n      }\n   }\n   // Implement the &#39;GetEnumerator&#39; method.\n   IEnumerator ITransportHeaders.GetEnumerator()\n   {\n      Hashtable myHashtable = new Hashtable();\n      for(int j = 0; j &lt; myInt; j++)\n         myHashtable.Add(myDictionaryEntry[j].Key, myDictionaryEntry[j].Value);\n      return myHashtable.GetEnumerator();\n   }\n\n   public static void Main()\n   {\n      try\n      {\n         // Create and register a &#39;TcpChannel&#39; object.\n         TcpChannel myTcpChannel = new TcpChannel(8085);\n         ChannelServices.RegisterChannel(myTcpChannel);\n         RemotingConfiguration.RegisterWellKnownServiceType(typeof(MyHelloServer), &quot;SayHello&quot;,\n            WellKnownObjectMode.SingleCall);\n         // Create an instance of &#39;myITransportHeadersObj&#39;.\n         MyITransportHeadersClass myITransportHeadersObj = new MyITransportHeadersClass();\n         ITransportHeaders myITransportHeaders = (ITransportHeaders)myITransportHeadersObj;\n         // Add items to the header list.\n         myITransportHeaders[&quot;Header1&quot;] = &quot;TransportHeader1&quot;;\n         myITransportHeaders[&quot;Header2&quot;] = &quot;TransportHeader2&quot;;\n         // Get the &#39;ITranportHeader&#39; item value with key &#39;Header2&#39;.\n         Console.WriteLine(&quot;ITransport Header item value with key &#39;Header2&#39; is :&quot;\n            +myITransportHeaders[&quot;Header2&quot;]);\n         IEnumerator myEnumerator = myITransportHeaders.GetEnumerator();\n         Console.WriteLine( &quot;     -KEY-      -VALUE-&quot; );\n         while ( myEnumerator.MoveNext() )\n         {\n            // Display the &#39;Key&#39; and &#39;Value&#39; of the current element.\n            object myEntry = myEnumerator.Current;\n            DictionaryEntry myDictionaryEntry = (DictionaryEntry)myEntry;\n            Console.WriteLine(&quot;   {0}:   {1}&quot;, myDictionaryEntry.Key, myDictionaryEntry.Value);\n         }\n         Console.WriteLine(&quot;Hit &lt;enter&gt; to exit...&quot;);\n         Console.ReadLine();\n      }\n      catch(Exception ex)\n      {\n         Console.WriteLine(&quot;The following exception is raised on the server side: &quot; +ex.Message);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Runtime_Remoting_Channels_ITransportHeaders_GetEnumerator\">\r\n    \r\n            <a id=\"System_Runtime_Remoting_Channels_ITransportHeaders_GetEnumerator_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">GetEnumerator()</div>        \r\n          </div>\r\n    \r\n            <p>Returns a <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates over all entries in the <a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a> object.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> that iterates over all entries in the <a class=\"xref\" href=\"system.runtime.remoting.channels.itransportheaders\" data-linktype=\"relative-path\">ITransportHeaders</a> object.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></div>\r\n                  </div>\r\n                  <p>The immediate caller does not have infrastructure permission.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <pre><code class=\"lang-cpp\" name=\"ITransportHeaders_Item#1\">#using &lt;System.Runtime.Remoting.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;ITransportHeaders_3_Share.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Runtime::Remoting::Channels;\nusing namespace System::Runtime::Remoting::Channels::Tcp;\nref class MyITransportHeadersClass: public ITransportHeaders\n{\nprivate:\n\n   int myInt;\n   array&lt;DictionaryEntry&gt;^myDictionaryEntry;\n\npublic:\n   MyITransportHeadersClass()\n   {\n      myInt = 0;\n      myDictionaryEntry = gcnew array&lt;DictionaryEntry&gt;(10);\n   }\n\n\n   property Object^ Item [Object^]\n   {\n\n      // Implement the &#39;Item&#39; property.\n     virtual Object^ get( Object^ myKey )\n      {\n         if ( myKey != nullptr )\n         {\n            for ( int i = 0; i &lt;= myInt; i++ )\n               if ( myDictionaryEntry[ i ].Key == myKey )\n                              return myDictionaryEntry[ i ].Value;\n         }\n\n         return nullptr;\n      }\n\n      virtual void set( Object^ myKey, Object^ value )\n      {\n         myDictionaryEntry[ myInt ] = DictionaryEntry(myKey,value);\n         myInt++;\n      }\n\n   }\n\n   // Implement the &#39;GetEnumerator&#39; method.\n   virtual IEnumerator^ GetEnumerator()\n   {\n      Hashtable^ myHashtable = gcnew Hashtable;\n      for ( int j = 0; j &lt; myInt; j++ )\n         myHashtable-&gt;Add( myDictionaryEntry[ j ].Key, myDictionaryEntry[ j ].Value );\n      return myHashtable-&gt;GetEnumerator();\n   }\n\n};\n\nint main()\n{\n   try\n   {\n      \n      // Create and register a &#39;TcpChannel&#39; object.\n      TcpChannel^ myTcpChannel = gcnew TcpChannel( 8085 );\n      ChannelServices::RegisterChannel( myTcpChannel, false );\n\t  RemotingConfiguration::RegisterWellKnownServiceType( MyHelloServer::typeid, &quot;SayHello&quot;, WellKnownObjectMode::SingleCall );\n      \n      // Create an instance of &#39;myITransportHeadersObj&#39;.\n      MyITransportHeadersClass^ myITransportHeadersObj = gcnew MyITransportHeadersClass;\n      ITransportHeaders^ myITransportHeaders = dynamic_cast&lt;ITransportHeaders^&gt;(myITransportHeadersObj);\n      \n      // Add items to the header list.\n      myITransportHeaders-&gt;default[ &quot;Header1&quot; ] = &quot;TransportHeader1&quot;;\n      myITransportHeaders-&gt;default[ &quot;Header2&quot; ] = &quot;TransportHeader2&quot;;\n      \n      // Get the &#39;ITranportHeader&#39; item value with key &#39;Header2&#39;.\n      Console::WriteLine( &quot;ITransport Header item value with key &#39;Header2&#39; is :{0}&quot;, myITransportHeaders-&gt;default[ &quot;Header2&quot; ] );\n      IEnumerator^ myEnumerator = myITransportHeaders-&gt;GetEnumerator();\n      Console::WriteLine( &quot;     -KEY-      -VALUE-&quot; );\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         \n         // Display the &#39;Key&#39; and &#39;Value&#39; of the current element.\n         Object^ myEntry = myEnumerator-&gt;Current;\n         DictionaryEntry myDictionaryEntry =  *dynamic_cast&lt;DictionaryEntry^&gt;(myEntry);\n         Console::WriteLine( &quot;   {0}:   {1}&quot;, myDictionaryEntry.Key, myDictionaryEntry.Value );\n      }\n      Console::WriteLine( &quot;Hit &lt;enter&gt; to exit...&quot; );\n      Console::ReadLine();\n   }\n   catch ( Exception^ ex ) \n   {\n      Console::WriteLine( &quot;The following exception is raised on the server side: {0}&quot;, ex-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ITransportHeaders_Item#1\">\nImports System\nImports System.Collections\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Channels\nImports System.Runtime.Remoting.Channels.Tcp\n\nClass MyITransportHeadersClass\n   Implements ITransportHeaders\n   Private myInt As Integer = 0\n   Private myDictionaryEntry(9) As DictionaryEntry\n   &#39; Implement the &#39;Item&#39; property.\n   Property ITransportHeaders(myKey As Object) As Object Implements ITransportHeaders.Item\n      Get\n         If Not (myKey Is Nothing) Then\n            Dim i As Integer\n            For i = 0 To myInt\n               If myDictionaryEntry(i).Key = myKey Then\n                  Return myDictionaryEntry(i).Value\n               End If\n            Next i\n         End If\n         Return 0\n      End Get\n      Set\n         myDictionaryEntry(myInt) = New DictionaryEntry(myKey, value)\n         myInt += 1\n      End Set\n   End Property\n\n   &#39; Implement the &#39;GetEnumerator&#39; method.\n   Function GetEnumerator() As IEnumerator  Implements ITransportHeaders.GetEnumerator\n      Dim myHashtable As New Hashtable()\n      Dim j As Integer\n      For j = 0 To myInt - 1\n         myHashtable.Add(myDictionaryEntry(j).Key, myDictionaryEntry(j).Value)\n      Next j\n      Return myHashtable.GetEnumerator()\n   End Function &#39;ITransportHeaders.GetEnumerator\n\n   Public Shared Sub Main()\n      Try\n         &#39; Create and register a &#39;TcpChannel&#39; object.\n         Dim myTcpChannel As New TcpChannel(8085)\n         ChannelServices.RegisterChannel(myTcpChannel)\n         RemotingConfiguration.RegisterWellKnownServiceType(GetType(MyHelloServer), &quot;SayHello&quot;, _\n                                                         WellKnownObjectMode.SingleCall)\n         &#39; Create an instance of &#39;myITransportHeadersObj&#39;.\n         Dim myITransportHeadersObj As New MyITransportHeadersClass()\n         Dim myITransportHeaders As ITransportHeaders = _\n                                              CType(myITransportHeadersObj, ITransportHeaders)\n         &#39; Add items to the header list.\n         myITransportHeaders(&quot;Header1&quot;) = &quot;TransportHeader1&quot;\n         myITransportHeaders(&quot;Header2&quot;) = &quot;TransportHeader2&quot;\n         &#39; Get the &#39;ITranportHeader&#39; item value with key &#39;Header2&#39;.\n         Console.WriteLine(&quot;ITransport Header item value with key &#39;Header2&#39; is :&quot; + _\n                                                        myITransportHeaders(&quot;Header2&quot;))\n         Dim myEnumerator As IEnumerator = myITransportHeaders.GetEnumerator()\n         Console.WriteLine(&quot;     -KEY-      -VALUE-&quot;)\n         While myEnumerator.MoveNext()\n            &#39; Display the &#39;Key&#39; and &#39;Value&#39; of the current element.\n            Dim myEntry As Object = myEnumerator.Current\n            Dim myDictionaryEntry As DictionaryEntry = CType(myEntry, DictionaryEntry)\n            Console.WriteLine(&quot;   {0}:   {1}&quot;, myDictionaryEntry.Key, myDictionaryEntry.Value)\n         End While\n         Console.WriteLine(&quot;Hit &lt;enter&gt; to exit...&quot;)\n         Console.ReadLine()\n      Catch ex As Exception\n         Console.WriteLine(&quot;The following exception is raised on the server side: &quot; + ex.Message)\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;MyITransportHeadersClass\n</code></pre><pre><code class=\"lang-cs\" name=\"ITransportHeaders_Item#1\">\nusing System;\nusing System.Collections;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Channels.Tcp;\n\nclass MyITransportHeadersClass : ITransportHeaders\n{\n   int myInt = 0;\n   DictionaryEntry[] myDictionaryEntry = new DictionaryEntry[10];\n   // Implement the &#39;Item&#39; property.\n   object ITransportHeaders.this[object myKey]\n   {\n      get\n      {\n         if(myKey != null)\n         {\n            for(int i = 0; i &lt;= myInt; i++)\n               if(myDictionaryEntry[i].Key == myKey)\n                  return myDictionaryEntry[i].Value;\n         }\n         return 0;\n      }\n      set\n      {\n         myDictionaryEntry[myInt] = new DictionaryEntry(myKey, value);\n         myInt++;\n      }\n   }\n   // Implement the &#39;GetEnumerator&#39; method.\n   IEnumerator ITransportHeaders.GetEnumerator()\n   {\n      Hashtable myHashtable = new Hashtable();\n      for(int j = 0; j &lt; myInt; j++)\n         myHashtable.Add(myDictionaryEntry[j].Key, myDictionaryEntry[j].Value);\n      return myHashtable.GetEnumerator();\n   }\n\n   public static void Main()\n   {\n      try\n      {\n         // Create and register a &#39;TcpChannel&#39; object.\n         TcpChannel myTcpChannel = new TcpChannel(8085);\n         ChannelServices.RegisterChannel(myTcpChannel);\n         RemotingConfiguration.RegisterWellKnownServiceType(typeof(MyHelloServer), &quot;SayHello&quot;,\n            WellKnownObjectMode.SingleCall);\n         // Create an instance of &#39;myITransportHeadersObj&#39;.\n         MyITransportHeadersClass myITransportHeadersObj = new MyITransportHeadersClass();\n         ITransportHeaders myITransportHeaders = (ITransportHeaders)myITransportHeadersObj;\n         // Add items to the header list.\n         myITransportHeaders[&quot;Header1&quot;] = &quot;TransportHeader1&quot;;\n         myITransportHeaders[&quot;Header2&quot;] = &quot;TransportHeader2&quot;;\n         // Get the &#39;ITranportHeader&#39; item value with key &#39;Header2&#39;.\n         Console.WriteLine(&quot;ITransport Header item value with key &#39;Header2&#39; is :&quot;\n            +myITransportHeaders[&quot;Header2&quot;]);\n         IEnumerator myEnumerator = myITransportHeaders.GetEnumerator();\n         Console.WriteLine( &quot;     -KEY-      -VALUE-&quot; );\n         while ( myEnumerator.MoveNext() )\n         {\n            // Display the &#39;Key&#39; and &#39;Value&#39; of the current element.\n            object myEntry = myEnumerator.Current;\n            DictionaryEntry myDictionaryEntry = (DictionaryEntry)myEntry;\n            Console.WriteLine(&quot;   {0}:   {1}&quot;, myDictionaryEntry.Key, myDictionaryEntry.Value);\n         }\n         Console.WriteLine(&quot;Hit &lt;enter&gt; to exit...&quot;);\n         Console.ReadLine();\n      }\n      catch(Exception ex)\n      {\n         Console.WriteLine(&quot;The following exception is raised on the server side: &quot; +ex.Message);\n      }\n   }\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.ITransportHeaders.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.ITransportHeaders.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.ITransportHeaders\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.ITransportHeaders.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Channels.ITransportHeaders.Item\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"bc26e34e-05ee-0f41-1682-95b0921974f4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Stores a collection of headers used in the channel sinks.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Runtime.Remoting.Channels/toc.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Channels.ITransportHeaders\">\r\n","rawMetadata":{"author":"dotnet-bot","breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Runtime.Remoting.Channels.ITransportHeaders.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Runtime.Remoting.Channels.ITransportHeaders.yml","open_to_public_contributors":true,"api_name":["System.Runtime.Remoting.Channels.ITransportHeaders","System.Runtime.Remoting.Channels.ITransportHeaders.GetEnumerator","System.Runtime.Remoting.Channels.ITransportHeaders.Item"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Channels.ITransportHeaders","System::Runtime::Remoting::Channels::ITransportHeaders","System.Runtime.Remoting.Channels.ITransportHeaders.GetEnumerator","System::Runtime::Remoting::Channels::ITransportHeaders::GetEnumerator","System.Runtime.Remoting.Channels.ITransportHeaders.Item","System::Runtime::Remoting::Channels::ITransportHeaders::Item"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"bc26e34e-05ee-0f41-1682-95b0921974f4","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Runtime.Remoting.Channels/ITransportHeaders.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ITransportHeaders interface | Microsoft Docs","_op_ogTitle":"ITransportHeaders interface","description":"Stores a collection of headers used in the channel sinks.\n","toc_asset_id":"_splitted/System.Runtime.Remoting.Channels/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Channels/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Channels.ITransportHeaders","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.itransportheaders","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.runtime.remoting.channels.itransportheaders","fileRelativePath":"System.Runtime.Remoting.Channels.ITransportHeaders.html"},"themesRelativePathToOutputRoot":"_themes/"}