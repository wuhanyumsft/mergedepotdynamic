{"content":"    \r\n    <h1 id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation\">\r\n      <span class=\"lang-csharp\">GridItemPattern+GridItemPatternInformation</span>\r\n        Struct\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides access to the property values of a <a class=\"xref\" href=\"system.windows.automation.griditempattern\" data-linktype=\"relative-path\">GridItemPattern</a> object using its <span class=\"xref\">stem.Windows.Automation.GridItemPattern.Current*</span> or <span class=\"xref\">stem.Windows.Automation.GridItemPattern.Cached*</span> accessors.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public struct GridItemPattern.GridItemPatternInformation</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">System.ValueType</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l2\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">GridItemPattern+GridItemPatternInformation</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_GridItemPattern_GridItemPatternInformation_Column\" data-linktype=\"self-bookmark\">Column</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the ordinal number of the column that contains the cell or item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_GridItemPattern_GridItemPatternInformation_ColumnSpan\" data-linktype=\"self-bookmark\">ColumnSpan</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of columns spanned by a cell or item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_GridItemPattern_GridItemPatternInformation_ContainingGrid\" data-linktype=\"self-bookmark\">ContainingGrid</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element that supports <a class=\"xref\" href=\"system.windows.automation.gridpattern\" data-linktype=\"relative-path\">GridPattern</a> and represents the container of the cell or item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_GridItemPattern_GridItemPatternInformation_Row\" data-linktype=\"self-bookmark\">Row</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the ordinal number of the row that contains the cell or item.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Windows_Automation_GridItemPattern_GridItemPatternInformation_RowSpan\" data-linktype=\"self-bookmark\">RowSpan</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the number of rows spanned by a cell or item.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_Column\">\r\n    \r\n            <a id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_Column_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Column</div>        \r\n          </div>\r\n    \r\n            <p>Gets the ordinal number of the column that contains the cell or item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Column { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based ordinal number that identifies the column containing the cell or item. The default value is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_AutomationFocusChangedEvent\" data-linktype=\"relative-path\">AutomationFocusChangedEvent</a> listener is declared to track the traversal of grid items within a grid container. Item properties are echoed to the console upon each focus-changed event.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridItemPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridItemPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridItemPattern GetGridItemPattern(\n    AutomationElement targetControl)\n{\n    GridItemPattern gridItemPattern = null;\n\n    try\n    {\n        gridItemPattern =\n            targetControl.GetCurrentPattern(\n            GridItemPattern.Pattern)\n            as GridItemPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridItemPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridItemPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridItemPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridItemPattern( _\nByVal targetControl As AutomationElement) As GridItemPattern\n    Dim gridItemPattern As GridItemPattern = Nothing\n\n    Try\n        gridItemPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridItemPattern.Pattern), _\n        GridItemPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridItemPattern\n\nEnd Function &#39;GetGridItemPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#1015\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridPattern GetGridPattern(\n    AutomationElement targetControl)\n{\n    GridPattern gridPattern = null;\n\n    try\n    {\n        gridPattern =\n            targetControl.GetCurrentPattern(\n            GridPattern.Pattern)\n            as GridPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#1015\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridPattern( _\nByVal targetControl As AutomationElement) As GridPattern\n    Dim gridPattern As GridPattern = Nothing\n\n    Try\n        gridPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridPattern.Pattern), GridPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridPattern\nEnd Function &#39;GetGridPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Set up grid item event listeners.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The grid item container of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetGridItemEventListeners(AutomationElement targetControl)\n{\n    AutomationFocusChangedEventHandler gridItemFocusChangedListener =\n        new AutomationFocusChangedEventHandler(OnGridItemFocusChange);\n    Automation.AddAutomationFocusChangedEventHandler(\n        gridItemFocusChangedListener);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#102\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Set up grid item event listeners.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The grid item container of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub SetGridItemEventListeners( _\nByVal targetControl As AutomationElement)\n    Dim gridItemFocusChangedListener As AutomationFocusChangedEventHandler = _\n    AddressOf OnGridItemFocusChange\n    Automation.AddAutomationFocusChangedEventHandler( _\n    gridItemFocusChangedListener)\nEnd Sub &#39;SetGridItemEventListeners\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Event handler for grid item focus change.\n/// Can be used to track traversal of individual grid items \n/// within a grid.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnGridItemFocusChange(\n    object src, AutomationFocusChangedEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n\n    // Gets a GridItemPattern from the source of the event.\n    GridItemPattern gridItemPattern = \n        GetGridItemPattern(sourceElement);\n\n    if (gridItemPattern == null)\n    {\n        return;\n    }\n\n    // Gets a GridPattern from the grid container.\n    GridPattern gridPattern = \n        GetGridPattern(gridItemPattern.Current.ContainingGrid);\n\n    if (gridPattern == null)\n    {\n        return;\n    }\n\n    AutomationElement gridItem = null;\n    try\n    {\n        gridItem = gridPattern.GetItem(\n        gridItemPattern.Current.Row, \n        gridItemPattern.Current.Column);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // If the requested row coordinate is larger than the RowCount \n        // or the column coordinate is larger than the ColumnCount.\n        // -- OR --\n        // If either of the requested row or column coordinates \n        // are less than zero.\n        // TO DO: error handling.\n    }\n\n    // Further event processing can be done at this point.\n    // For the purposes of this sample we just report item properties.\n    StringBuilder gridItemReport = new StringBuilder();\n    gridItemReport.AppendLine(\n        gridItemPattern.Current.Row.ToString()).AppendLine(\n        gridItemPattern.Current.Column.ToString()).AppendLine(\n        gridItemPattern.Current.RowSpan.ToString()).AppendLine(\n        gridItemPattern.Current.ColumnSpan.ToString()).AppendLine(\n        gridItem.Current.AutomationId.ToString());\n    Console.WriteLine(gridItemReport.ToString());\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Handles our application shutdown.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprotected override void OnExit(System.Windows.ExitEventArgs args)\n{\n    Automation.RemoveAllEventHandlers();\n    base.OnExit(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Event handler for grid item focus change.\n&#39;&#39;&#39; Can be used to track traversal of individual grid items \n&#39;&#39;&#39; within a grid.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub OnGridItemFocusChange( _\nByVal src As Object, ByVal e As AutomationFocusChangedEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch exc As ElementNotAvailableException\n        Return\n    End Try\n\n    &#39; Gets a GridItemPattern from the source of the event.\n    Dim gridItemPattern As GridItemPattern = _\n    GetGridItemPattern(sourceElement)\n\n    If gridItemPattern Is Nothing Then\n        Return\n    End If\n\n    &#39; Gets a GridPattern from the grid container.\n    Dim gridPattern As GridPattern = _\n    GetGridPattern(gridItemPattern.Current.ContainingGrid)\n\n    If gridPattern Is Nothing Then\n        Return\n    End If\n\n    Dim gridItem As AutomationElement = Nothing\n    Try\n        gridItem = gridPattern.GetItem( _\n        gridItemPattern.Current.Row, gridItemPattern.Current.Column)\n    Catch\n        &#39; If the requested row coordinate is larger than the RowCount \n        &#39; or the column coordinate is larger than the ColumnCount.\n        &#39; -- OR --\n        &#39; If either of the requested row or column coordinates \n        &#39; are less than zero.\n        &#39; TO DO: error handling.\n    End Try\n\n    &#39; Further event processing can be done at this point.\n    &#39; For the purposes of this sample we just report item properties.\n    Dim gridItemReport As New StringBuilder()\n    gridItemReport.AppendLine( _\n    gridItemPattern.Current.Row.ToString()).AppendLine( _\n    gridItemPattern.Current.Column.ToString()).AppendLine( _\n    gridItemPattern.Current.RowSpan.ToString()).AppendLine( _\n    gridItemPattern.Current.ColumnSpan.ToString()).AppendLine( _\n    gridItem.Current.AutomationId.ToString())\n    Console.WriteLine(gridItemReport.ToString())\n\nEnd Sub &#39;OnGridItemFocusChange\n\n\n&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Handles our application shutdown.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nProtected Overrides Sub OnExit(ByVal args As System.Windows.ExitEventArgs) \n    Automation.RemoveAllEventHandlers()\n    MyBase.OnExit(args)\n\nEnd Sub &#39;OnExit    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_ColumnSpan\">\r\n    \r\n            <a id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_ColumnSpan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ColumnSpan</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of columns spanned by a cell or item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int ColumnSpan { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of columns spanned. The default value is 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_AutomationFocusChangedEvent\" data-linktype=\"relative-path\">AutomationFocusChangedEvent</a> listener is declared to track the traversal of grid items within a grid container. Item properties are echoed to the console upon each focus-changed event.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridItemPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridItemPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridItemPattern GetGridItemPattern(\n    AutomationElement targetControl)\n{\n    GridItemPattern gridItemPattern = null;\n\n    try\n    {\n        gridItemPattern =\n            targetControl.GetCurrentPattern(\n            GridItemPattern.Pattern)\n            as GridItemPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridItemPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridItemPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridItemPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridItemPattern( _\nByVal targetControl As AutomationElement) As GridItemPattern\n    Dim gridItemPattern As GridItemPattern = Nothing\n\n    Try\n        gridItemPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridItemPattern.Pattern), _\n        GridItemPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridItemPattern\n\nEnd Function &#39;GetGridItemPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#1015\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridPattern GetGridPattern(\n    AutomationElement targetControl)\n{\n    GridPattern gridPattern = null;\n\n    try\n    {\n        gridPattern =\n            targetControl.GetCurrentPattern(\n            GridPattern.Pattern)\n            as GridPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#1015\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridPattern( _\nByVal targetControl As AutomationElement) As GridPattern\n    Dim gridPattern As GridPattern = Nothing\n\n    Try\n        gridPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridPattern.Pattern), GridPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridPattern\nEnd Function &#39;GetGridPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Set up grid item event listeners.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The grid item container of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetGridItemEventListeners(AutomationElement targetControl)\n{\n    AutomationFocusChangedEventHandler gridItemFocusChangedListener =\n        new AutomationFocusChangedEventHandler(OnGridItemFocusChange);\n    Automation.AddAutomationFocusChangedEventHandler(\n        gridItemFocusChangedListener);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#102\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Set up grid item event listeners.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The grid item container of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub SetGridItemEventListeners( _\nByVal targetControl As AutomationElement)\n    Dim gridItemFocusChangedListener As AutomationFocusChangedEventHandler = _\n    AddressOf OnGridItemFocusChange\n    Automation.AddAutomationFocusChangedEventHandler( _\n    gridItemFocusChangedListener)\nEnd Sub &#39;SetGridItemEventListeners\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Event handler for grid item focus change.\n/// Can be used to track traversal of individual grid items \n/// within a grid.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnGridItemFocusChange(\n    object src, AutomationFocusChangedEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n\n    // Gets a GridItemPattern from the source of the event.\n    GridItemPattern gridItemPattern = \n        GetGridItemPattern(sourceElement);\n\n    if (gridItemPattern == null)\n    {\n        return;\n    }\n\n    // Gets a GridPattern from the grid container.\n    GridPattern gridPattern = \n        GetGridPattern(gridItemPattern.Current.ContainingGrid);\n\n    if (gridPattern == null)\n    {\n        return;\n    }\n\n    AutomationElement gridItem = null;\n    try\n    {\n        gridItem = gridPattern.GetItem(\n        gridItemPattern.Current.Row, \n        gridItemPattern.Current.Column);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // If the requested row coordinate is larger than the RowCount \n        // or the column coordinate is larger than the ColumnCount.\n        // -- OR --\n        // If either of the requested row or column coordinates \n        // are less than zero.\n        // TO DO: error handling.\n    }\n\n    // Further event processing can be done at this point.\n    // For the purposes of this sample we just report item properties.\n    StringBuilder gridItemReport = new StringBuilder();\n    gridItemReport.AppendLine(\n        gridItemPattern.Current.Row.ToString()).AppendLine(\n        gridItemPattern.Current.Column.ToString()).AppendLine(\n        gridItemPattern.Current.RowSpan.ToString()).AppendLine(\n        gridItemPattern.Current.ColumnSpan.ToString()).AppendLine(\n        gridItem.Current.AutomationId.ToString());\n    Console.WriteLine(gridItemReport.ToString());\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Handles our application shutdown.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprotected override void OnExit(System.Windows.ExitEventArgs args)\n{\n    Automation.RemoveAllEventHandlers();\n    base.OnExit(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Event handler for grid item focus change.\n&#39;&#39;&#39; Can be used to track traversal of individual grid items \n&#39;&#39;&#39; within a grid.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub OnGridItemFocusChange( _\nByVal src As Object, ByVal e As AutomationFocusChangedEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch exc As ElementNotAvailableException\n        Return\n    End Try\n\n    &#39; Gets a GridItemPattern from the source of the event.\n    Dim gridItemPattern As GridItemPattern = _\n    GetGridItemPattern(sourceElement)\n\n    If gridItemPattern Is Nothing Then\n        Return\n    End If\n\n    &#39; Gets a GridPattern from the grid container.\n    Dim gridPattern As GridPattern = _\n    GetGridPattern(gridItemPattern.Current.ContainingGrid)\n\n    If gridPattern Is Nothing Then\n        Return\n    End If\n\n    Dim gridItem As AutomationElement = Nothing\n    Try\n        gridItem = gridPattern.GetItem( _\n        gridItemPattern.Current.Row, gridItemPattern.Current.Column)\n    Catch\n        &#39; If the requested row coordinate is larger than the RowCount \n        &#39; or the column coordinate is larger than the ColumnCount.\n        &#39; -- OR --\n        &#39; If either of the requested row or column coordinates \n        &#39; are less than zero.\n        &#39; TO DO: error handling.\n    End Try\n\n    &#39; Further event processing can be done at this point.\n    &#39; For the purposes of this sample we just report item properties.\n    Dim gridItemReport As New StringBuilder()\n    gridItemReport.AppendLine( _\n    gridItemPattern.Current.Row.ToString()).AppendLine( _\n    gridItemPattern.Current.Column.ToString()).AppendLine( _\n    gridItemPattern.Current.RowSpan.ToString()).AppendLine( _\n    gridItemPattern.Current.ColumnSpan.ToString()).AppendLine( _\n    gridItem.Current.AutomationId.ToString())\n    Console.WriteLine(gridItemReport.ToString())\n\nEnd Sub &#39;OnGridItemFocusChange\n\n\n&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Handles our application shutdown.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nProtected Overrides Sub OnExit(ByVal args As System.Windows.ExitEventArgs) \n    Automation.RemoveAllEventHandlers()\n    MyBase.OnExit(args)\n\nEnd Sub &#39;OnExit    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_ContainingGrid\">\r\n    \r\n            <a id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_ContainingGrid_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ContainingGrid</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element that supports <a class=\"xref\" href=\"system.windows.automation.gridpattern\" data-linktype=\"relative-path\">GridPattern</a> and represents the container of the cell or item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public System.Windows.Automation.AutomationElement ContainingGrid { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a></div>\r\n                  </div>\r\n                  <p>A <!-- BEGIN INCLUDE: Include content from &quot;~/add/includes/tla2sharptla-uiautomation-md.md&quot; -->UI Automation<!--END INCLUDE --> element that supports the GridPattern and represents the table cell or item container. The default is a null reference (<code>Nothing</code> in Microsoft Visual Basic .NET).</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement\" data-linktype=\"relative-path\">AutomationElement</a> listener is declared to track the traversal of grid items within a grid container. Item properties are echoed to the console upon each focus-changed event.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridItemPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridItemPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridItemPattern GetGridItemPattern(\n    AutomationElement targetControl)\n{\n    GridItemPattern gridItemPattern = null;\n\n    try\n    {\n        gridItemPattern =\n            targetControl.GetCurrentPattern(\n            GridItemPattern.Pattern)\n            as GridItemPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridItemPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridItemPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridItemPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridItemPattern( _\nByVal targetControl As AutomationElement) As GridItemPattern\n    Dim gridItemPattern As GridItemPattern = Nothing\n\n    Try\n        gridItemPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridItemPattern.Pattern), _\n        GridItemPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridItemPattern\n\nEnd Function &#39;GetGridItemPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#1015\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridPattern GetGridPattern(\n    AutomationElement targetControl)\n{\n    GridPattern gridPattern = null;\n\n    try\n    {\n        gridPattern =\n            targetControl.GetCurrentPattern(\n            GridPattern.Pattern)\n            as GridPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#1015\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridPattern( _\nByVal targetControl As AutomationElement) As GridPattern\n    Dim gridPattern As GridPattern = Nothing\n\n    Try\n        gridPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridPattern.Pattern), GridPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridPattern\nEnd Function &#39;GetGridPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Set up grid item event listeners.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The grid item container of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetGridItemEventListeners(AutomationElement targetControl)\n{\n    AutomationFocusChangedEventHandler gridItemFocusChangedListener =\n        new AutomationFocusChangedEventHandler(OnGridItemFocusChange);\n    Automation.AddAutomationFocusChangedEventHandler(\n        gridItemFocusChangedListener);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#102\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Set up grid item event listeners.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The grid item container of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub SetGridItemEventListeners( _\nByVal targetControl As AutomationElement)\n    Dim gridItemFocusChangedListener As AutomationFocusChangedEventHandler = _\n    AddressOf OnGridItemFocusChange\n    Automation.AddAutomationFocusChangedEventHandler( _\n    gridItemFocusChangedListener)\nEnd Sub &#39;SetGridItemEventListeners\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Event handler for grid item focus change.\n/// Can be used to track traversal of individual grid items \n/// within a grid.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnGridItemFocusChange(\n    object src, AutomationFocusChangedEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n\n    // Gets a GridItemPattern from the source of the event.\n    GridItemPattern gridItemPattern = \n        GetGridItemPattern(sourceElement);\n\n    if (gridItemPattern == null)\n    {\n        return;\n    }\n\n    // Gets a GridPattern from the grid container.\n    GridPattern gridPattern = \n        GetGridPattern(gridItemPattern.Current.ContainingGrid);\n\n    if (gridPattern == null)\n    {\n        return;\n    }\n\n    AutomationElement gridItem = null;\n    try\n    {\n        gridItem = gridPattern.GetItem(\n        gridItemPattern.Current.Row, \n        gridItemPattern.Current.Column);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // If the requested row coordinate is larger than the RowCount \n        // or the column coordinate is larger than the ColumnCount.\n        // -- OR --\n        // If either of the requested row or column coordinates \n        // are less than zero.\n        // TO DO: error handling.\n    }\n\n    // Further event processing can be done at this point.\n    // For the purposes of this sample we just report item properties.\n    StringBuilder gridItemReport = new StringBuilder();\n    gridItemReport.AppendLine(\n        gridItemPattern.Current.Row.ToString()).AppendLine(\n        gridItemPattern.Current.Column.ToString()).AppendLine(\n        gridItemPattern.Current.RowSpan.ToString()).AppendLine(\n        gridItemPattern.Current.ColumnSpan.ToString()).AppendLine(\n        gridItem.Current.AutomationId.ToString());\n    Console.WriteLine(gridItemReport.ToString());\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Handles our application shutdown.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprotected override void OnExit(System.Windows.ExitEventArgs args)\n{\n    Automation.RemoveAllEventHandlers();\n    base.OnExit(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Event handler for grid item focus change.\n&#39;&#39;&#39; Can be used to track traversal of individual grid items \n&#39;&#39;&#39; within a grid.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub OnGridItemFocusChange( _\nByVal src As Object, ByVal e As AutomationFocusChangedEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch exc As ElementNotAvailableException\n        Return\n    End Try\n\n    &#39; Gets a GridItemPattern from the source of the event.\n    Dim gridItemPattern As GridItemPattern = _\n    GetGridItemPattern(sourceElement)\n\n    If gridItemPattern Is Nothing Then\n        Return\n    End If\n\n    &#39; Gets a GridPattern from the grid container.\n    Dim gridPattern As GridPattern = _\n    GetGridPattern(gridItemPattern.Current.ContainingGrid)\n\n    If gridPattern Is Nothing Then\n        Return\n    End If\n\n    Dim gridItem As AutomationElement = Nothing\n    Try\n        gridItem = gridPattern.GetItem( _\n        gridItemPattern.Current.Row, gridItemPattern.Current.Column)\n    Catch\n        &#39; If the requested row coordinate is larger than the RowCount \n        &#39; or the column coordinate is larger than the ColumnCount.\n        &#39; -- OR --\n        &#39; If either of the requested row or column coordinates \n        &#39; are less than zero.\n        &#39; TO DO: error handling.\n    End Try\n\n    &#39; Further event processing can be done at this point.\n    &#39; For the purposes of this sample we just report item properties.\n    Dim gridItemReport As New StringBuilder()\n    gridItemReport.AppendLine( _\n    gridItemPattern.Current.Row.ToString()).AppendLine( _\n    gridItemPattern.Current.Column.ToString()).AppendLine( _\n    gridItemPattern.Current.RowSpan.ToString()).AppendLine( _\n    gridItemPattern.Current.ColumnSpan.ToString()).AppendLine( _\n    gridItem.Current.AutomationId.ToString())\n    Console.WriteLine(gridItemReport.ToString())\n\nEnd Sub &#39;OnGridItemFocusChange\n\n\n&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Handles our application shutdown.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nProtected Overrides Sub OnExit(ByVal args As System.Windows.ExitEventArgs) \n    Automation.RemoveAllEventHandlers()\n    MyBase.OnExit(args)\n\nEnd Sub &#39;OnExit    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_Row\">\r\n    \r\n            <a id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_Row_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Row</div>        \r\n          </div>\r\n    \r\n            <p>Gets the ordinal number of the row that contains the cell or item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int Row { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A zero-based ordinal number that identifies the row containing the table cell or item. The default value is 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_AutomationFocusChangedEvent\" data-linktype=\"relative-path\">AutomationFocusChangedEvent</a> listener is declared to track the traversal of grid items within a grid container. Item properties are echoed to the console upon each focus-changed event.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridItemPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridItemPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridItemPattern GetGridItemPattern(\n    AutomationElement targetControl)\n{\n    GridItemPattern gridItemPattern = null;\n\n    try\n    {\n        gridItemPattern =\n            targetControl.GetCurrentPattern(\n            GridItemPattern.Pattern)\n            as GridItemPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridItemPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridItemPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridItemPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridItemPattern( _\nByVal targetControl As AutomationElement) As GridItemPattern\n    Dim gridItemPattern As GridItemPattern = Nothing\n\n    Try\n        gridItemPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridItemPattern.Pattern), _\n        GridItemPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridItemPattern\n\nEnd Function &#39;GetGridItemPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#1015\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridPattern GetGridPattern(\n    AutomationElement targetControl)\n{\n    GridPattern gridPattern = null;\n\n    try\n    {\n        gridPattern =\n            targetControl.GetCurrentPattern(\n            GridPattern.Pattern)\n            as GridPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#1015\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridPattern( _\nByVal targetControl As AutomationElement) As GridPattern\n    Dim gridPattern As GridPattern = Nothing\n\n    Try\n        gridPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridPattern.Pattern), GridPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridPattern\nEnd Function &#39;GetGridPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Set up grid item event listeners.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The grid item container of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetGridItemEventListeners(AutomationElement targetControl)\n{\n    AutomationFocusChangedEventHandler gridItemFocusChangedListener =\n        new AutomationFocusChangedEventHandler(OnGridItemFocusChange);\n    Automation.AddAutomationFocusChangedEventHandler(\n        gridItemFocusChangedListener);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#102\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Set up grid item event listeners.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The grid item container of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub SetGridItemEventListeners( _\nByVal targetControl As AutomationElement)\n    Dim gridItemFocusChangedListener As AutomationFocusChangedEventHandler = _\n    AddressOf OnGridItemFocusChange\n    Automation.AddAutomationFocusChangedEventHandler( _\n    gridItemFocusChangedListener)\nEnd Sub &#39;SetGridItemEventListeners\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Event handler for grid item focus change.\n/// Can be used to track traversal of individual grid items \n/// within a grid.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnGridItemFocusChange(\n    object src, AutomationFocusChangedEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n\n    // Gets a GridItemPattern from the source of the event.\n    GridItemPattern gridItemPattern = \n        GetGridItemPattern(sourceElement);\n\n    if (gridItemPattern == null)\n    {\n        return;\n    }\n\n    // Gets a GridPattern from the grid container.\n    GridPattern gridPattern = \n        GetGridPattern(gridItemPattern.Current.ContainingGrid);\n\n    if (gridPattern == null)\n    {\n        return;\n    }\n\n    AutomationElement gridItem = null;\n    try\n    {\n        gridItem = gridPattern.GetItem(\n        gridItemPattern.Current.Row, \n        gridItemPattern.Current.Column);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // If the requested row coordinate is larger than the RowCount \n        // or the column coordinate is larger than the ColumnCount.\n        // -- OR --\n        // If either of the requested row or column coordinates \n        // are less than zero.\n        // TO DO: error handling.\n    }\n\n    // Further event processing can be done at this point.\n    // For the purposes of this sample we just report item properties.\n    StringBuilder gridItemReport = new StringBuilder();\n    gridItemReport.AppendLine(\n        gridItemPattern.Current.Row.ToString()).AppendLine(\n        gridItemPattern.Current.Column.ToString()).AppendLine(\n        gridItemPattern.Current.RowSpan.ToString()).AppendLine(\n        gridItemPattern.Current.ColumnSpan.ToString()).AppendLine(\n        gridItem.Current.AutomationId.ToString());\n    Console.WriteLine(gridItemReport.ToString());\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Handles our application shutdown.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprotected override void OnExit(System.Windows.ExitEventArgs args)\n{\n    Automation.RemoveAllEventHandlers();\n    base.OnExit(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Event handler for grid item focus change.\n&#39;&#39;&#39; Can be used to track traversal of individual grid items \n&#39;&#39;&#39; within a grid.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub OnGridItemFocusChange( _\nByVal src As Object, ByVal e As AutomationFocusChangedEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch exc As ElementNotAvailableException\n        Return\n    End Try\n\n    &#39; Gets a GridItemPattern from the source of the event.\n    Dim gridItemPattern As GridItemPattern = _\n    GetGridItemPattern(sourceElement)\n\n    If gridItemPattern Is Nothing Then\n        Return\n    End If\n\n    &#39; Gets a GridPattern from the grid container.\n    Dim gridPattern As GridPattern = _\n    GetGridPattern(gridItemPattern.Current.ContainingGrid)\n\n    If gridPattern Is Nothing Then\n        Return\n    End If\n\n    Dim gridItem As AutomationElement = Nothing\n    Try\n        gridItem = gridPattern.GetItem( _\n        gridItemPattern.Current.Row, gridItemPattern.Current.Column)\n    Catch\n        &#39; If the requested row coordinate is larger than the RowCount \n        &#39; or the column coordinate is larger than the ColumnCount.\n        &#39; -- OR --\n        &#39; If either of the requested row or column coordinates \n        &#39; are less than zero.\n        &#39; TO DO: error handling.\n    End Try\n\n    &#39; Further event processing can be done at this point.\n    &#39; For the purposes of this sample we just report item properties.\n    Dim gridItemReport As New StringBuilder()\n    gridItemReport.AppendLine( _\n    gridItemPattern.Current.Row.ToString()).AppendLine( _\n    gridItemPattern.Current.Column.ToString()).AppendLine( _\n    gridItemPattern.Current.RowSpan.ToString()).AppendLine( _\n    gridItemPattern.Current.ColumnSpan.ToString()).AppendLine( _\n    gridItem.Current.AutomationId.ToString())\n    Console.WriteLine(gridItemReport.ToString())\n\nEnd Sub &#39;OnGridItemFocusChange\n\n\n&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Handles our application shutdown.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nProtected Overrides Sub OnExit(ByVal args As System.Windows.ExitEventArgs) \n    Automation.RemoveAllEventHandlers()\n    MyBase.OnExit(args)\n\nEnd Sub &#39;OnExit    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_RowSpan\">\r\n    \r\n            <a id=\"System_Windows_Automation_GridItemPattern_GridItemPatternInformation_RowSpan_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RowSpan</div>        \r\n          </div>\r\n    \r\n            <p>Gets the number of rows spanned by a cell or item.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public int RowSpan { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>The number of rows spanned. The default value is 1.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>In the following example, an <a class=\"xref\" href=\"system.windows.automation.automationelement#System_Windows_Automation_AutomationElement_AutomationFocusChangedEvent\" data-linktype=\"relative-path\">AutomationFocusChangedEvent</a> listener is declared to track the traversal of grid items within a grid container. Item properties are echoed to the console upon each focus-changed event.  </p>\n<pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#101\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridItemPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridItemPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridItemPattern GetGridItemPattern(\n    AutomationElement targetControl)\n{\n    GridItemPattern gridItemPattern = null;\n\n    try\n    {\n        gridItemPattern =\n            targetControl.GetCurrentPattern(\n            GridItemPattern.Pattern)\n            as GridItemPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridItemPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#101\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridItemPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridItemPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridItemPattern( _\nByVal targetControl As AutomationElement) As GridItemPattern\n    Dim gridItemPattern As GridItemPattern = Nothing\n\n    Try\n        gridItemPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridItemPattern.Pattern), _\n        GridItemPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridItemPattern\n\nEnd Function &#39;GetGridItemPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#1015\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Obtains a GridPattern control pattern from an \n/// automation element.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The automation element of interest.\n/// &lt;/param&gt;\n/// &lt;returns&gt;\n/// A GridPattern object.\n/// &lt;/returns&gt;\n///--------------------------------------------------------------------\nprivate GridPattern GetGridPattern(\n    AutomationElement targetControl)\n{\n    GridPattern gridPattern = null;\n\n    try\n    {\n        gridPattern =\n            targetControl.GetCurrentPattern(\n            GridPattern.Pattern)\n            as GridPattern;\n    }\n    // Object doesn&#39;t support the \n    // GridPattern control pattern\n    catch (InvalidOperationException)\n    {\n        return null;\n    }\n\n    return gridPattern;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#1015\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Obtains a GridPattern control pattern from an \n&#39;&#39;&#39; automation element.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The automation element of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39; &lt;returns&gt;\n&#39;&#39;&#39; A GridPattern object.\n&#39;&#39;&#39; &lt;/returns&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Function GetGridPattern( _\nByVal targetControl As AutomationElement) As GridPattern\n    Dim gridPattern As GridPattern = Nothing\n\n    Try\n        gridPattern = DirectCast( _\n        targetControl.GetCurrentPattern(gridPattern.Pattern), GridPattern)\n    Catch exc As InvalidOperationException\n        &#39; Object doesn&#39;t support the \n        &#39; GridPattern control pattern\n        Return Nothing\n    End Try\n\n    Return gridPattern\nEnd Function &#39;GetGridPattern\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#102\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Set up grid item event listeners.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;targetControl&quot;&gt;\n/// The grid item container of interest.\n/// &lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void SetGridItemEventListeners(AutomationElement targetControl)\n{\n    AutomationFocusChangedEventHandler gridItemFocusChangedListener =\n        new AutomationFocusChangedEventHandler(OnGridItemFocusChange);\n    Automation.AddAutomationFocusChangedEventHandler(\n        gridItemFocusChangedListener);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#102\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Set up grid item event listeners.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;targetControl&quot;&gt;\n&#39;&#39;&#39; The grid item container of interest.\n&#39;&#39;&#39; &lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub SetGridItemEventListeners( _\nByVal targetControl As AutomationElement)\n    Dim gridItemFocusChangedListener As AutomationFocusChangedEventHandler = _\n    AddressOf OnGridItemFocusChange\n    Automation.AddAutomationFocusChangedEventHandler( _\n    gridItemFocusChangedListener)\nEnd Sub &#39;SetGridItemEventListeners\n</code></pre><pre><code class=\"lang-cs\" name=\"UIAGridItemPattern_snip#103\">///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Event handler for grid item focus change.\n/// Can be used to track traversal of individual grid items \n/// within a grid.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n/// &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprivate void OnGridItemFocusChange(\n    object src, AutomationFocusChangedEventArgs e)\n{\n    // Make sure the element still exists. Elements such as tooltips\n    // can disappear before the event is processed.\n    AutomationElement sourceElement;\n    try\n    {\n        sourceElement = src as AutomationElement;\n    }\n    catch (ElementNotAvailableException)\n    {\n        return;\n    }\n\n    // Gets a GridItemPattern from the source of the event.\n    GridItemPattern gridItemPattern = \n        GetGridItemPattern(sourceElement);\n\n    if (gridItemPattern == null)\n    {\n        return;\n    }\n\n    // Gets a GridPattern from the grid container.\n    GridPattern gridPattern = \n        GetGridPattern(gridItemPattern.Current.ContainingGrid);\n\n    if (gridPattern == null)\n    {\n        return;\n    }\n\n    AutomationElement gridItem = null;\n    try\n    {\n        gridItem = gridPattern.GetItem(\n        gridItemPattern.Current.Row, \n        gridItemPattern.Current.Column);\n    }\n    catch (ArgumentOutOfRangeException)\n    {\n        // If the requested row coordinate is larger than the RowCount \n        // or the column coordinate is larger than the ColumnCount.\n        // -- OR --\n        // If either of the requested row or column coordinates \n        // are less than zero.\n        // TO DO: error handling.\n    }\n\n    // Further event processing can be done at this point.\n    // For the purposes of this sample we just report item properties.\n    StringBuilder gridItemReport = new StringBuilder();\n    gridItemReport.AppendLine(\n        gridItemPattern.Current.Row.ToString()).AppendLine(\n        gridItemPattern.Current.Column.ToString()).AppendLine(\n        gridItemPattern.Current.RowSpan.ToString()).AppendLine(\n        gridItemPattern.Current.ColumnSpan.ToString()).AppendLine(\n        gridItem.Current.AutomationId.ToString());\n    Console.WriteLine(gridItemReport.ToString());\n}\n\n///--------------------------------------------------------------------\n/// &lt;summary&gt;\n/// Handles our application shutdown.\n/// &lt;/summary&gt;\n/// &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n///--------------------------------------------------------------------\nprotected override void OnExit(System.Windows.ExitEventArgs args)\n{\n    Automation.RemoveAllEventHandlers();\n    base.OnExit(args);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"UIAGridItemPattern_snip#103\">&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Event handler for grid item focus change.\n&#39;&#39;&#39; Can be used to track traversal of individual grid items \n&#39;&#39;&#39; within a grid.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;src&quot;&gt;Object that raised the event.&lt;/param&gt;\n&#39;&#39;&#39; &lt;param name=&quot;e&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nPrivate Sub OnGridItemFocusChange( _\nByVal src As Object, ByVal e As AutomationFocusChangedEventArgs)\n    &#39; Make sure the element still exists. Elements such as tooltips\n    &#39; can disappear before the event is processed.\n    Dim sourceElement As AutomationElement\n    Try\n        sourceElement = DirectCast(src, AutomationElement)\n    Catch exc As ElementNotAvailableException\n        Return\n    End Try\n\n    &#39; Gets a GridItemPattern from the source of the event.\n    Dim gridItemPattern As GridItemPattern = _\n    GetGridItemPattern(sourceElement)\n\n    If gridItemPattern Is Nothing Then\n        Return\n    End If\n\n    &#39; Gets a GridPattern from the grid container.\n    Dim gridPattern As GridPattern = _\n    GetGridPattern(gridItemPattern.Current.ContainingGrid)\n\n    If gridPattern Is Nothing Then\n        Return\n    End If\n\n    Dim gridItem As AutomationElement = Nothing\n    Try\n        gridItem = gridPattern.GetItem( _\n        gridItemPattern.Current.Row, gridItemPattern.Current.Column)\n    Catch\n        &#39; If the requested row coordinate is larger than the RowCount \n        &#39; or the column coordinate is larger than the ColumnCount.\n        &#39; -- OR --\n        &#39; If either of the requested row or column coordinates \n        &#39; are less than zero.\n        &#39; TO DO: error handling.\n    End Try\n\n    &#39; Further event processing can be done at this point.\n    &#39; For the purposes of this sample we just report item properties.\n    Dim gridItemReport As New StringBuilder()\n    gridItemReport.AppendLine( _\n    gridItemPattern.Current.Row.ToString()).AppendLine( _\n    gridItemPattern.Current.Column.ToString()).AppendLine( _\n    gridItemPattern.Current.RowSpan.ToString()).AppendLine( _\n    gridItemPattern.Current.ColumnSpan.ToString()).AppendLine( _\n    gridItem.Current.AutomationId.ToString())\n    Console.WriteLine(gridItemReport.ToString())\n\nEnd Sub &#39;OnGridItemFocusChange\n\n\n&#39;&#39;&#39;--------------------------------------------------------------------\n&#39;&#39;&#39; &lt;summary&gt;\n&#39;&#39;&#39; Handles our application shutdown.\n&#39;&#39;&#39; &lt;/summary&gt;\n&#39;&#39;&#39; &lt;param name=&quot;args&quot;&gt;Event arguments.&lt;/param&gt;\n&#39;&#39;&#39;--------------------------------------------------------------------\nProtected Overrides Sub OnExit(ByVal args As System.Windows.ExitEventArgs) \n    Automation.RemoveAllEventHandlers()\n    MyBase.OnExit(args)\n\nEnd Sub &#39;OnExit    \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.GridItemPattern.GridItemPatternInformation.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.GridItemPattern.GridItemPatternInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.GridItemPattern+GridItemPatternInformation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.GridItemPattern+GridItemPatternInformation.Column\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.GridItemPattern+GridItemPatternInformation.ColumnSpan\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.GridItemPattern+GridItemPatternInformation.ContainingGrid\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.GridItemPattern+GridItemPatternInformation.Row\">\r\n<meta name=\"APIName\" content=\"System.Windows.Automation.GridItemPattern+GridItemPatternInformation.RowSpan\">\r\n<meta name=\"APILocation\" content=\"UIAutomationClient.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"c4e613c2-983b-baf5-16f9-abb15ebf4d5b\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Automation\\GridItemPattern+GridItemPatternInformation.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to the property values of a  object using its  or  accessors.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Windows.Automation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Automation.GridItemPattern.GridItemPatternInformation\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Windows.Automation.GridItemPattern.GridItemPatternInformation.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Windows.Automation.GridItemPattern.GridItemPatternInformation.yml","open_to_public_contributors":true,"api_name":["System.Windows.Automation.GridItemPattern+GridItemPatternInformation","System.Windows.Automation.GridItemPattern+GridItemPatternInformation.Column","System.Windows.Automation.GridItemPattern+GridItemPatternInformation.ColumnSpan","System.Windows.Automation.GridItemPattern+GridItemPatternInformation.ContainingGrid","System.Windows.Automation.GridItemPattern+GridItemPatternInformation.Row","System.Windows.Automation.GridItemPattern+GridItemPatternInformation.RowSpan"],"api_location":["UIAutomationClient.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Automation.GridItemPattern.GridItemPatternInformation","System::Windows::Automation::GridItemPattern::GridItemPatternInformation","System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Column","System::Windows::Automation::GridItemPattern::GridItemPatternInformation::Column","System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ColumnSpan","System::Windows::Automation::GridItemPattern::GridItemPatternInformation::ColumnSpan","System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ContainingGrid","System::Windows::Automation::GridItemPattern::GridItemPatternInformation::ContainingGrid","System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Row","System::Windows::Automation::GridItemPattern::GridItemPatternInformation::Row","System.Windows.Automation.GridItemPattern.GridItemPatternInformation.RowSpan","System::Windows::Automation::GridItemPattern::GridItemPatternInformation::RowSpan"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"c4e613c2-983b-baf5-16f9-abb15ebf4d5b","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Windows.Automation\\GridItemPattern+GridItemPatternInformation.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Windows.Automation/GridItemPattern+GridItemPatternInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GridItemPattern+GridItemPatternInformation struct | Microsoft Docs","_op_ogTitle":"GridItemPattern+GridItemPatternInformation struct","description":"Provides access to the property values of a  object using its  or  accessors.\n","toc_asset_id":"_splitted/System.Windows.Automation/toc.json","toc_rel":"_splitted/System.Windows.Automation/toc.json","source_url":"","ms.assetid":"System.Windows.Automation.GridItemPattern.GridItemPatternInformation","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.griditempattern.griditempatterninformation","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.windows.automation.griditempattern.griditempatterninformation","fileRelativePath":"System.Windows.Automation.GridItemPattern.GridItemPatternInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}