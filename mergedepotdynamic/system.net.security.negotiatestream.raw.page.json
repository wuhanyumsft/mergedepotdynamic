{"content":"    \r\n    <h1 id=\"System_Net_Security_NegotiateStream\">\r\n      <span class=\"lang-csharp\">NegotiateStream</span>\r\n        Class\r\n    </h1>\r\n    \r\n    \r\n    <nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n      <h3>In this Article</h3>\r\n    </nav><div class=\"summary\">\r\n    \t<p>Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</p>\n\r\n    </div><h2>Syntax</h2>\r\n    \r\n    \t<h3>Declaration</h3>\r\n    \t<pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public class NegotiateStream : System.Net.Security.AuthenticatedStream</code></pre>\r\n    \r\n    \r\n    \r\n    <h3>Inheritance Hierarchy</h3>\r\n    <ul class=\"inheritance\">\r\n        <li class=\"l0\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l1\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l2\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>\r\n          </div>\r\n        </li>\r\n        <li class=\"l3\">\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.security.authenticatedstream\" data-linktype=\"relative-path\">System.Net.Security.AuthenticatedStream</a>\r\n          </div>\r\n        </li>\r\n      <li class=\"l4\">\r\n        <div class=\"xref\">\r\n          <div class=\"lang-csharp\">NegotiateStream</div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    \r\n      <div class=\"referencebox inheritedMembers\">\r\n        <h3>Inherited Members</h3>\r\n        <h4></h4>\r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Close\" data-linktype=\"relative-path\">Close()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyTo_System_IO_Stream_\" data-linktype=\"relative-path\">CopyTo(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyTo_System_IO_Stream_System_Int32_\" data-linktype=\"relative-path\">CopyTo(Stream,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_\" data-linktype=\"relative-path\">CopyToAsync(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_\" data-linktype=\"relative-path\">CopyToAsync(Stream,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CopyToAsync_System_IO_Stream_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">CopyToAsync(Stream,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CreateWaitHandle\" data-linktype=\"relative-path\">CreateWaitHandle()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Dispose\" data-linktype=\"relative-path\">Dispose()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync\" data-linktype=\"relative-path\">FlushAsync()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_FlushAsync_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">FlushAsync(CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Null\" data-linktype=\"relative-path\">Null</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ObjectInvariant\" data-linktype=\"relative-path\">ObjectInvariant()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ReadAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">ReadAsync(Byte[],Int32,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadByte\" data-linktype=\"relative-path\">ReadByte()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Synchronized_System_IO_Stream_\" data-linktype=\"relative-path\">Synchronized(Stream)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">WriteAsync(Byte[],Int32,Int32)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteAsync_System_Byte___System_Int32_System_Int32_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">WriteAsync(Byte[],Int32,Int32,CancellationToken)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteByte_System_Byte_\" data-linktype=\"relative-path\">WriteByte(Byte)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.security.authenticatedstream#System_Net_Security_AuthenticatedStream_InnerStream\" data-linktype=\"relative-path\">InnerStream</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.net.security.authenticatedstream#System_Net_Security_AuthenticatedStream_LeaveInnerStreamOpen\" data-linktype=\"relative-path\">LeaveInnerStreamOpen</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a>\r\n          </div>\r\n          , \r\n          <div class=\"lang-csharp\">\r\n            <a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a>\r\n          </div>\r\n          \r\n      </div>\r\n    \r\n    \r\n      <h2>Remarks</h2>\r\n      <p>Use the NegotiateStream class for authentication and to help secure information transmitted between a client and a server. Using NegotiateStream, you can do the following.  </p>\n<ul>\n<li><p>Send the client&#39;s credentials to the server for Impersonation or Delegation.  </p>\n</li>\n<li><p>Request server authentication.  </p>\n</li>\n<li><p>Encrypt and/or sign data before transmitting it.  </p>\n<p>Authentication must be performed before transmitting information. Clients request authentication using the synchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> methods, which block until the authentication completes, or the asynchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a> methods, which do not block while waiting for the authentication to complete. Servers request authentication using the synchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> or asynchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods. The client, and optionally the server, is authenticated using the Negotiate security protocol. On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication. On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used. For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/. The NegotiateStream class performs the authentication using the Security Support Provider Interface (SSPI).  </p>\n<p>When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services will be used by the NegotiateStream to help secure your data during transmission. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred. You can get information about the remote client or server using the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_RemoteIdentity_\" data-linktype=\"relative-path\">RemoteIdentity</a> property.  </p>\n<p>If the authentication fails, you will receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or a <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.  </p>\n<p>You send data using the synchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_Write_\" data-linktype=\"relative-path\">Write</a> or asynchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginWrite_\" data-linktype=\"relative-path\">BeginWrite</a> methods. You receive data using the synchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_Read_\" data-linktype=\"relative-path\">Read</a> or asynchronous <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginRead_\" data-linktype=\"relative-path\">BeginRead</a> methods. If security services such as encryption or signing are enabled, these are automatically applied to your data by the NegotiateStream.  </p>\n<p>The NegotiateStream transmits data using a stream that you supply when creating the NegotiateStream. When you supply this underlying stream, you have the option to specify whether closing the NegotiateStream also closes the underlying stream.</p>\n</li>\n</ul>\n\r\n    \r\n    \r\n    <h2>Constructors\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream__ctor_System_IO_Stream_\" data-linktype=\"self-bookmark\">NegotiateStream(Stream)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream__ctor_System_IO_Stream_System_Boolean_\" data-linktype=\"self-bookmark\">NegotiateStream(Stream,Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and stream closure behavior.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Properties\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_CanRead\" data-linktype=\"self-bookmark\">CanRead</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream is readable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_CanSeek\" data-linktype=\"self-bookmark\">CanSeek</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream is seekable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_CanTimeout\" data-linktype=\"self-bookmark\">CanTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream supports time-outs.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_CanWrite\" data-linktype=\"self-bookmark\">CanWrite</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream is writable.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_ImpersonationLevel\" data-linktype=\"self-bookmark\">ImpersonationLevel</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a value that indicates how the server can use the client&#39;s credentials.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_IsAuthenticated\" data-linktype=\"self-bookmark\">IsAuthenticated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether authentication was successful.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_IsEncrypted\" data-linktype=\"self-bookmark\">IsEncrypted</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> uses data encryption.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated\" data-linktype=\"self-bookmark\">IsMutuallyAuthenticated</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether both the server and the client have been authenticated.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_IsServer\" data-linktype=\"self-bookmark\">IsServer</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the local side of the connection used by this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> was authenticated as the server.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_IsSigned\" data-linktype=\"self-bookmark\">IsSigned</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the data sent using this stream is signed.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Length\" data-linktype=\"self-bookmark\">Length</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets the length of the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Position\" data-linktype=\"self-bookmark\">Position</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the current position in the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_ReadTimeout\" data-linktype=\"self-bookmark\">ReadTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the amount of time a read operation blocks waiting for data.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_RemoteIdentity\" data-linktype=\"self-bookmark\">RemoteIdentity</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets information about the identity of the remote party sharing this authenticated stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_WriteTimeout\" data-linktype=\"self-bookmark\">WriteTimeout</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Gets or sets the amount of time a write operation blocks waiting for data.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <h2>Methods\r\n     summary</h2>\r\n    \r\n    <table class=\"nameValue\">\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClient\" data-linktype=\"self-bookmark\">AuthenticateAsClient()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_String_\" data-linktype=\"self-bookmark\">AuthenticateAsClient(NetworkCredential,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_\" data-linktype=\"self-bookmark\">AuthenticateAsClient(NetworkCredential,ChannelBinding,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClientAsync\" data-linktype=\"self-bookmark\">AuthenticateAsClientAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_String_\" data-linktype=\"self-bookmark\">AuthenticateAsClientAsync(NetworkCredential,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_\" data-linktype=\"self-bookmark\">AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServer\" data-linktype=\"self-bookmark\">AuthenticateAsServer()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServer_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_\" data-linktype=\"self-bookmark\">AuthenticateAsServer(ExtendedProtectionPolicy)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServer_System_Net_NetworkCredential_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServer_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServerAsync\" data-linktype=\"self-bookmark\">AuthenticateAsServerAsync()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_\" data-linktype=\"self-bookmark\">AuthenticateAsServerAsync(ExtendedProtectionPolicy)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_System_Net_NetworkCredential_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\" data-linktype=\"self-bookmark\">AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsClient(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_String_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsServer(AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_Net_NetworkCredential_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginRead_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_BeginWrite_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\" data-linktype=\"self-bookmark\">BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Begins an asynchronous write operation that writes <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>s from the specified buffer to the stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Dispose_System_Boolean_\" data-linktype=\"self-bookmark\">Dispose(Boolean)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> and optionally releases the managed resources.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_EndAuthenticateAsClient_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndAuthenticateAsClient(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends a pending asynchronous client authentication operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsClient*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_EndAuthenticateAsServer_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndAuthenticateAsServer(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends a pending asynchronous client authentication operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsServer*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_EndRead_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndRead(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous read operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginRead*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_EndWrite_System_IAsyncResult_\" data-linktype=\"self-bookmark\">EndWrite(IAsyncResult)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Ends an asynchronous write operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginWrite*</span>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Flush\" data-linktype=\"self-bookmark\">Flush()</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Causes any buffered data to be written to the underlying device.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Read_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Read(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Reads data from this stream and stores it in the specified array.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Seek_System_Int64_System_IO_SeekOrigin_\" data-linktype=\"self-bookmark\">Seek(Int64,SeekOrigin)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Throws <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_SetLength_System_Int64_\" data-linktype=\"self-bookmark\">SetLength(Int64)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Sets the length of the underlying stream.</p>\n\r\n            </td>\r\n        </tr>\r\n        <tr class=\" enable-platform-filter\">\r\n          <td>\r\n            <div class=\"lang-csharp\"><a href=\"#System_Net_Security_NegotiateStream_Write_System_Byte___System_Int32_System_Int32_\" data-linktype=\"self-bookmark\">Write(Byte[],Int32,Int32)</a></div>\r\n          </td>\r\n            <td>\r\n            <p>Write the specified number of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>s to the underlying stream using the specified buffer and offset.</p>\n\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    <section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"constructors\">\r\n        <h2>Constructors\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream__ctor_System_IO_Stream_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NegotiateStream(Stream)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public NegotiateStream (System.IO.Stream innerStream);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> for sending and receiving data.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this constructor.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#3\">            // Establish the remote endpoint for the socket.\n            // For this example, use the local machine.\n            IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());\n            IPAddress ipAddress = ipHostInfo.AddressList[0];\n            // Client and server use port 11000. \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress,11000);\n            // Create a TCP/IP socket.\n           TcpClient client = new TcpClient();\n            // Connect the socket to the remote endpoint.\n            client.Connect(remoteEP);\n            Console.WriteLine(&quot;Client connected to {0}.&quot;,\n                remoteEP.ToString());\n            // Ensure the client does not close when there is \n            // still data to be sent to the server.\n            client.LingerState = (new LingerOption(true,0));\n            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream); \n            // Request authentication for the client only (no mutual authentication).\n            // Authenicate using the client&#39;s default credetials.\n            // Permit the server to impersonate the client to access resources on the server only.\n            // Request that data be transmitted using encryption and data signing.\n            authStream.AuthenticateAsClient(\n                 (NetworkCredential) CredentialCache.DefaultCredentials, \n                 &quot;&quot;,\n                 ProtectionLevel.EncryptAndSign,\n                 TokenImpersonationLevel.Impersonation);\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#3\">   // Establish the remote endpoint for the socket.\n   // For this example, use the local machine.\n   IPHostEntry^ ipHostInfo = Dns::GetHostEntry( Dns::GetHostName() );\n   IPAddress^ ipAddress = ipHostInfo-&gt;AddressList[ 0 ];\n   \n   // Client and server use port 11000. \n   IPEndPoint^ remoteEP = gcnew IPEndPoint( ipAddress,11000 );\n   \n   // Create a TCP/IP socket.\n   TcpClient^ client = gcnew TcpClient;\n   \n   // Connect the socket to the remote endpoint.\n   client-&gt;Connect( remoteEP );\n   Console::WriteLine( L&quot;Client connected to {0}.&quot;, remoteEP );\n   \n   // Ensure the client does not close when there is \n   // still data to be sent to the server.\n   client-&gt;LingerState = (gcnew LingerOption( true,0 ));\n   \n   // Request authentication.\n   NetworkStream^ clientStream = client-&gt;GetStream();\n   NegotiateStream^ authStream = gcnew NegotiateStream( clientStream );\n   \n   // Request authentication for the client only (no mutual authentication).\n   // Authenicate using the client&#39;s default credetials.\n   // Permit the server to impersonate the client to access resources on the server only.\n   // Request that data be transmitted using encryption and data signing.\n   authStream-&gt;AuthenticateAsClient( dynamic_cast&lt;NetworkCredential^&gt;(CredentialCache::DefaultCredentials), \n          L&quot;&quot;, \n          ProtectionLevel::EncryptAndSign, \n          TokenImpersonationLevel::Impersonation );\n   \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream__ctor_System_IO_Stream_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream__ctor_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">NegotiateStream(Stream,Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class using the specified <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> and stream closure behavior.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>innerStream</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> for sending and receiving data.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>leaveInnerStreamOpen</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to indicate that closing this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> has no effect on <code>innerstream</code>; <code>false</code> to indicate that closing this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> also closes <code>innerStream</code>. See the Remarks section for more information.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>innerStream</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>innerStream</code> is equal to <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Null\" data-linktype=\"relative-path\">Null</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When you specify <code>true</code> for the <code>leaveStreamOpen</code> parameter, closing the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> has no effect on the <code>innerStream</code> stream; you must explicitly close <code>innerStream</code> when you no longer need it.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclNegoAsyncClient#1\">      // Establish the remote endpoint for the socket.\n      // For this example, use the local machine.\n      IPHostEntry^ ipHostInfo = Dns::GetHostEntry( Dns::GetHostName() );\n      IPAddress^ ipAddress = ipHostInfo-&gt;AddressList[ 0 ];\n      \n      // Client and server use port 11000. \n      IPEndPoint^ remoteEP = gcnew IPEndPoint( ipAddress,11000 );\n      \n      // Create a TCP/IP socket.\n      client = gcnew TcpClient;\n      \n      // Connect the socket to the remote endpoint.\n      client-&gt;Connect( remoteEP );\n      Console::WriteLine( L&quot;Client connected to {0}.&quot;, remoteEP );\n      \n      // Ensure the client does not close when there is \n      // still data to be sent to the server.\n      client-&gt;LingerState = (gcnew LingerOption( true,0 ));\n      \n      // Request authentication.\n      NetworkStream^ clientStream = client-&gt;GetStream();\n      NegotiateStream^ authStream = gcnew NegotiateStream( clientStream,false );\n      \n</code></pre><pre><code class=\"lang-cs\" name=\"NclNegoAsyncClient#1\">            // Establish the remote endpoint for the socket.\n            // For this example, use the local machine.\n            IPHostEntry ipHostInfo = Dns.GetHostEntry(&quot;localhost&quot;);\n            IPAddress ipAddress = ipHostInfo.AddressList[0];\n            // Client and server use port 11000. \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress, 11000);\n            // Create a TCP/IP socket.\n            client = new TcpClient();\n            // Connect the socket to the remote endpoint.\n            client.Connect(remoteEP);\n            Console.WriteLine(&quot;Client connected to {0}.&quot;, remoteEP.ToString());\n            // Ensure the client does not close when there is \n            // still data to be sent to the server.\n            client.LingerState = (new LingerOption(true, 0));\n            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream, false); \n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"properties\">\r\n        <h2>Properties\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_CanRead\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_CanRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanRead</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream is readable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanRead { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if authentication has occurred and the underlying stream is readable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If successful authentication has occurred, this property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanRead_\" data-linktype=\"relative-path\">CanRead</a> property on the underlying stream. The underlying stream is specified when you create an instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_CanSeek\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_CanSeek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanSeek</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream is seekable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanSeek { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p>This property always returns <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You should not attempt to set the position of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> object or its underlying stream. The underlying stream is specified when you create an instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_CanTimeout\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_CanTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream supports time-outs.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanTimeout { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the underlying stream supports time-outs; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanTimeout_\" data-linktype=\"relative-path\">CanTimeout</a> property on the underlying stream. The underlying stream is specified when you create an instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_CanWrite\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_CanWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">CanWrite</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the underlying stream is writable.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool CanWrite { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if authentication has occurred and the underlying stream is writable; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If successful authentication has occurred, this property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_CanWrite_\" data-linktype=\"relative-path\">CanWrite</a> property on the underlying stream. The underlying stream is specified when you create an instance of the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_ImpersonationLevel\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_ImpersonationLevel_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ImpersonationLevel</div>        \r\n          </div>\r\n    \r\n            <p>Gets a value that indicates how the server can use the client&#39;s credentials.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </div>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication failed or has not occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>You must successfully authenticate before calling this method. Clients specify the impersonation level when they request authentication by calling one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a> methods. If you authenticate without specifying a <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> , <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> is used.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#1\">         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#1\">static void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_IsAuthenticated\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_IsAuthenticated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsAuthenticated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether authentication was successful.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsAuthenticated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if successful authentication occurred; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Clients authenticate by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a> methods. Servers authenticate by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#1\">         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#1\">static void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_IsEncrypted\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_IsEncrypted_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsEncrypted</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> uses data encryption.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsEncrypted { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#1\">         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#1\">static void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_IsMutuallyAuthenticated\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsMutuallyAuthenticated</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether both the server and the client have been authenticated.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsMutuallyAuthenticated { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the server has been authenticated; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication. By default, clients request mutual authentication.  </p>\n<p> The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server. NTLM does not support mutual authentication.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#1\">         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#1\">static void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_IsServer\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_IsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsServer</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the local side of the connection used by this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> was authenticated as the server.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsServer { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If authentication failed or did not occur, this property returns <code>false</code>.  </p>\n<p> To authenticate as the server, call the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#1\">         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#1\">static void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_IsSigned\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_IsSigned_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">IsSigned</div>        \r\n          </div>\r\n    \r\n            <p>Gets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the data sent using this stream is signed.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override bool IsSigned { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </div>\r\n                  <p><code>true</code> if the data is signed before being transmitted; otherwise, <code>false</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#1\">         static void DisplayAuthenticationProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;IsAuthenticated: {0}&quot;, stream.IsAuthenticated);\n            Console.WriteLine(&quot;IsMutuallyAuthenticated: {0}&quot;, stream.IsMutuallyAuthenticated);\n            Console.WriteLine(&quot;IsEncrypted: {0}&quot;, stream.IsEncrypted);\n            Console.WriteLine(&quot;IsSigned: {0}&quot;, stream.IsSigned);\n            Console.WriteLine(&quot;ImpersonationLevel: {0}&quot;, stream.ImpersonationLevel);\n            Console.WriteLine(&quot;IsServer: {0}&quot;, stream.IsServer);\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#1\">static void DisplayAuthenticationProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;IsAuthenticated: {0}&quot;, stream-&gt;IsAuthenticated );\n   Console::WriteLine( L&quot;IsMutuallyAuthenticated: {0}&quot;, stream-&gt;IsMutuallyAuthenticated );\n   Console::WriteLine( L&quot;IsEncrypted: {0}&quot;, stream-&gt;IsEncrypted );\n   Console::WriteLine( L&quot;IsSigned: {0}&quot;, stream-&gt;IsSigned );\n   Console::WriteLine( L&quot;ImpersonationLevel: {0}&quot;, stream-&gt;ImpersonationLevel );\n   Console::WriteLine( L&quot;IsServer: {0}&quot;, stream-&gt;IsServer );\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Length\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Length_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Length</div>        \r\n          </div>\r\n    \r\n            <p>Gets the length of the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long Length { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that specifies the length of the underlying stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Getting the value of this property is not supported when the underlying stream is a <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Length_\" data-linktype=\"relative-path\">Length</a> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Position\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Position_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Position</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the current position in the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long Position { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> that specifies the current position in the underlying stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Setting this property is not supported.  </p>\n<p> - or -  </p>\n<p> Getting the value of this property is not supported when the underlying stream is a <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Position_\" data-linktype=\"relative-path\">Position</a> property on the underlying stream. If the underlying stream is not seekable, this property will typically throw an exception. The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_ReadTimeout\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_ReadTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">ReadTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the amount of time a read operation blocks waiting for data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int ReadTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the amount of time that will elapse before a read operation fails.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadTimeout_\" data-linktype=\"relative-path\">ReadTimeout</a> property on the underlying stream. When you set this property, the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_ReadTimeout_\" data-linktype=\"relative-path\">ReadTimeout</a> value on the underlying stream is set to the specified value.  </p>\n<p> If the underlying stream is a <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>, ReadTimeout is in milliseconds and is set to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> by default so that read operations do not time out.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_RemoteIdentity\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_RemoteIdentity_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">RemoteIdentity</div>        \r\n          </div>\r\n    \r\n            <p>Gets information about the identity of the remote party sharing this authenticated stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.iidentity\" data-linktype=\"relative-path\">IIdentity</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.security.principal.iidentity\" data-linktype=\"relative-path\">IIdentity</a> object that describes the identity of the remote endpoint.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication failed or has not occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When accessed by the client, this property returns a <a class=\"xref\" href=\"system.security.principal.genericidentity\" data-linktype=\"relative-path\">GenericIdentity</a> containing the Service Principal Name (SPN) of the server and the authentication protocol used. When accessed by the server, this property returns a <a class=\"xref\" href=\"system.security.principal.windowsidentity\" data-linktype=\"relative-path\">WindowsIdentity</a> that describes the client. If the <a class=\"xref\" href=\"system.security.principal.windowsidentity\" data-linktype=\"relative-path\">WindowsIdentity</a> is not available, client information is returned to the server in a <a class=\"xref\" href=\"system.security.principal.genericidentity\" data-linktype=\"relative-path\">GenericIdentity</a>.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoAsyncServer#2\">        public static void EndAuthenticateCallback (IAsyncResult ar)\n        {\n            // Get the saved data.\n            ClientState cState = (ClientState) ar.AsyncState;\n            TcpClient clientRequest = cState.Client;\n            NegotiateStream authStream = (NegotiateStream) cState.AuthenticatedStream;\n            Console.WriteLine(&quot;Ending authentication.&quot;);\n            // Any exceptions that occurred during authentication are\n            // thrown by the EndAuthenticateAsServer method.\n            try \n            {\n                // This call blocks until the authentication is complete.\n                authStream.EndAuthenticateAsServer(ar);\n            }\n            catch (AuthenticationException e)\n            {\n                Console.WriteLine(e);\n                Console.WriteLine(&quot;Authentication failed - closing connection.&quot;);\n                cState.Waiter.Set();\n                return;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n                Console.WriteLine(&quot;Closing connection.&quot;);\n                cState.Waiter.Set();\n                return;\n            }\n            // Display properties of the authenticated client.\n            IIdentity id = authStream.RemoteIdentity;\n            Console.WriteLine(&quot;{0} was authenticated using {1}.&quot;, \n                id.Name, \n                id.AuthenticationType\n                );\n            cState.Waiter.Set();\n\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoAsyncServer#2\">   static void EndAuthenticateCallback( IAsyncResult^ ar )\n   {\n      \n      // Get the saved data.\n      ClientState^ cState = dynamic_cast&lt;ClientState^&gt;(ar-&gt;AsyncState);\n      TcpClient^ clientRequest = cState-&gt;Client;\n      NegotiateStream^ authStream = dynamic_cast&lt;NegotiateStream^&gt;(cState-&gt;AuthStream);\n      Console::WriteLine( L&quot;Ending authentication.&quot; );\n      \n      // Any exceptions that occurred during authentication are\n      // thrown by the EndServerAuthenticate method.\n      try\n      {\n         \n         // This call blocks until the authentication is complete.\n         authStream-&gt;EndAuthenticateAsServer( ar );\n      }\n      catch ( AuthenticationException^ e ) \n      {\n         Console::WriteLine( e );\n         Console::WriteLine( L&quot;Authentication failed - closing connection.&quot; );\n         cState-&gt;Waiter-&gt;Set();\n         return;\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e );\n         Console::WriteLine( L&quot;Closing connection.&quot; );\n         cState-&gt;Waiter-&gt;Set();\n         return;\n      }\n\n      \n      // Display properties of the authenticated client.\n      IIdentity^ id = authStream-&gt;RemoteIdentity;\n      Console::WriteLine( L&quot;{0} was authenticated using {1}.&quot;, id-&gt;Name, id-&gt;AuthenticationType );\n      cState-&gt;Waiter-&gt;Set();\n   }\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_WriteTimeout\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_WriteTimeout_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">WriteTimeout</div>        \r\n          </div>\r\n    \r\n            <p>Gets or sets the amount of time a write operation blocks waiting for data.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int WriteTimeout { get; set; }</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n              <h4>Property Value</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the amount of time that will elapse before a write operation fails.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This property returns the value returned by invoking the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteTimeout_\" data-linktype=\"relative-path\">WriteTimeout</a> property on the underlying stream. For set operations, the specified value sets the <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_WriteTimeout_\" data-linktype=\"relative-path\">WriteTimeout</a> value on the underlying stream.  </p>\n<p> If the underlying stream is a <a class=\"xref\" href=\"system.net.sockets.networkstream\" data-linktype=\"relative-path\">NetworkStream</a>, WriteTimeout is in milliseconds and is set to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> by default so that write operations do not time out.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates displaying the value of this property.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#2\">         static void DisplayStreamProperties(NegotiateStream stream)\n        {\n             Console.WriteLine(&quot;Can read: {0}&quot;, stream.CanRead);\n             Console.WriteLine(&quot;Can write: {0}&quot;, stream.CanWrite);\n             Console.WriteLine(&quot;Can seek: {0}&quot;, stream.CanSeek);\n             try \n             {\n                 // If the underlying stream supports it, display the length.\n                 Console.WriteLine(&quot;Length: {0}&quot;, stream.Length);\n             } catch (NotSupportedException)\n             {\n                     Console.WriteLine(&quot;Cannot get the length of the underlying stream.&quot;);\n             }\n             \n             if (stream.CanTimeout)\n             {\n                 Console.WriteLine(&quot;Read time-out: {0}&quot;, stream.ReadTimeout);\n                 Console.WriteLine(&quot;Write time-out: {0}&quot;, stream.WriteTimeout);\n             }\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#2\">static void DisplayStreamProperties( NegotiateStream^ stream )\n{\n   Console::WriteLine( L&quot;Can read: {0}&quot;, stream-&gt;CanRead );\n   Console::WriteLine( L&quot;Can write: {0}&quot;, stream-&gt;CanWrite );\n   Console::WriteLine( L&quot;Can seek: {0}&quot;, stream-&gt;CanSeek );\n   try\n   {\n      \n      // If the underlying stream supports it, display the length.\n      Console::WriteLine( L&quot;Length: {0}&quot;, stream-&gt;Length );\n   }\n   catch ( NotSupportedException^ ) \n   {\n      Console::WriteLine( L&quot;Cannot get the length of the underlying stream.&quot; );\n   }\n\n   if ( stream-&gt;CanTimeout )\n   {\n      Console::WriteLine( L&quot;Read time-out: {0}&quot;, stream-&gt;ReadTimeout );\n      Console::WriteLine( L&quot;Write time-out: {0}&quot;, stream-&gt;WriteTimeout );\n   }\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section><section class=\"memberGroup\">\r\n      <header class=\"header enable-platform-filter\" id=\"methods\">\r\n        <h2>Methods\r\n    </h2>\r\n      </header>\r\n    \r\n      <ul class=\"list-clean enable-platform-filter\">\r\n    \r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClient()</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsClient ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the client&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>, and mutual authentication is requested. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_String_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClient(NetworkCredential,String)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>, and mutual authentication is requested. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClient(NetworkCredential,ChannelBinding,String)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified client credential and the channel binding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>credential</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>, and mutual authentication is requested. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> used for extended protection that is passed to this method in the <code>binding</code> parameter would be retrieved by an application from <a class=\"xref\" href=\"system.net.security.sslstream#System_Net_Security_SslStream_TransportContext_\" data-linktype=\"relative-path\">TransportContext</a> property on the associated <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>allowedImpersonationLevel</code> is not a valid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credential, authentication options, and channel binding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>credential</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>allowedImpersonationLevel</code> is not a valid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> used for extended protection that is passed to this method in the <code>binding</code> parameter would be retrieved by an application from <a class=\"xref\" href=\"system.net.security.sslstream#System_Net_Security_SslStream_TransportContext_\" data-linktype=\"relative-path\">TransportContext</a> property on the associated <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a>.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClientAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the client&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>, and mutual authentication is requested. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_String_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClientAsync(NetworkCredential,String)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>, and mutual authentication is requested. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified client credential and the channel binding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>credential</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>, and mutual authentication is requested. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> used for extended protection that is passed to this method in the <code>binding</code> parameter would be retrieved by an application from <a class=\"xref\" href=\"system.net.security.sslstream#System_Net_Security_SslStream_TransportContext_\" data-linktype=\"relative-path\">TransportContext</a> property on the associated <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credentials and authentication options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>allowedImpersonationLevel</code> is not a valid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is null.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsClientAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified credential, authentication options, and channel binding.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>targetName</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>credential</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>allowedImpersonationLevel</code> is not a valid value.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> used for extended protection that is passed to this method in the <code>binding</code> parameter would be retrieved by an application from <a class=\"xref\" href=\"system.net.security.sslstream#System_Net_Security_SslStream_TransportContext_\" data-linktype=\"relative-path\">TransportContext</a> property on the associated <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a>.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServer()</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsServer ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the server&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, and the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> method overloads.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServer(ExtendedProtectionPolicy)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that is used for extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> and <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*</span> on the extended protection policy passed in the <code>policy</code> parameter are both <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>policy</code> parameter was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the server&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, and the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>.  </p>\n<p> If the <code>policy</code> parameter is <code>null</code>, then an extended protection policy is used that has <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> method overloads.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_System_Net_NetworkCredential_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>requiredImpersonationLevel</code> must be <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, or <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>,</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to try to r-authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> method overloads.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> and <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*</span> on the extended protection policy passed in the <code>policy</code> parameter are both <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>requiredImpersonationLevel</code> must be <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, or <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>,</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to try to r-authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>policy</code> parameter was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>policy</code> parameter is <code>null</code>, then an extended protection policy is used that has <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> This method blocks until the operation completes. To prevent blocking until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> method overloads.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServerAsync()</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();</code></pre>\r\n    \r\n    \r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the server&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, and the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServerAsync(ExtendedProtectionPolicy)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that is used for extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> and <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*</span> on the extended protection policy passed in the <code>policy</code> parameter are both <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>policy</code> parameter was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the server&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, and the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>.  </p>\n<p> If the <code>policy</code> parameter is <code>null</code>, then an extended protection policy is used that has <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_System_Net_NetworkCredential_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials and authentication options.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>requiredImpersonationLevel</code> must be <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, or <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>,</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to try to r-authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_AuthenticateAsServerAsync_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified server credentials, authentication options, and extended protection policy.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></div>\r\n                  </div>\r\n                  <p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>  </p>\n<p> The task object representing the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> and <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*</span> on the extended protection policy passed in the <code>policy</code> parameter are both <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential </code>is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>requiredImpersonationLevel</code> must be <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, or <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>,</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to try to r-authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>policy</code> parameter was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the <code>policy</code> parameter is <code>null</code>, then an extended protection policy is used that has <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsClient(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the client&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, and the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>. The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class will construct the SPN used for mutual authentication.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsClient_\" data-linktype=\"relative-path\">EndAuthenticateAsClient</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclNegoAsyncClient#2\">      // Establish the remote endpoint for the socket.\n      // For this example, use the local machine.\n      IPHostEntry^ ipHostInfo = Dns::GetHostEntry( Dns::GetHostName() );\n      IPAddress^ ipAddress = ipHostInfo-&gt;AddressList[ 0 ];\n      \n      // Client and server use port 11000. \n      IPEndPoint^ remoteEP = gcnew IPEndPoint( ipAddress,11000 );\n      \n      // Create a TCP/IP socket.\n      client = gcnew TcpClient;\n      \n      // Connect the socket to the remote endpoint.\n      client-&gt;Connect( remoteEP );\n      Console::WriteLine( L&quot;Client connected to {0}.&quot;, remoteEP );\n      \n      // Ensure the client does not close when there is \n      // still data to be sent to the server.\n      client-&gt;LingerState = (gcnew LingerOption( true,0 ));\n      \n      // Request authentication.\n      NetworkStream^ clientStream = client-&gt;GetStream();\n      NegotiateStream^ authStream = gcnew NegotiateStream( clientStream,false );\n      \n      // Pass the NegotiateStream as the AsyncState object \n      // so that it is available to the callback delegate.\n      IAsyncResult^ ar = authStream-&gt;BeginAuthenticateAsClient( gcnew AsyncCallback( EndAuthenticateCallback ), authStream );\n      \n</code></pre><pre><code class=\"lang-cs\" name=\"NclNegoAsyncClient#2\">            // Establish the remote endpoint for the socket.\n            // For this example, use the local machine.\n            IPHostEntry ipHostInfo = Dns.GetHostEntry(&quot;localhost&quot;);\n            IPAddress ipAddress = ipHostInfo.AddressList[0];\n            // Client and server use port 11000. \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress, 11000);\n            // Create a TCP/IP socket.\n            client = new TcpClient();\n            // Connect the socket to the remote endpoint.\n            client.Connect(remoteEP);\n            Console.WriteLine(&quot;Client connected to {0}.&quot;, remoteEP.ToString());\n            // Ensure the client does not close when there is \n            // still data to be sent to the server.\n            client.LingerState = (new LingerOption(true, 0));\n            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream, false); \n            // Pass the NegotiateStream as the AsyncState object \n            // so that it is available to the callback delegate.\n            IAsyncResult ar = authStream.BeginAuthenticateAsClient(\n                new AsyncCallback(EndAuthenticateCallback),\n                authStream\n                );\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_String_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>targetName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsClient_\" data-linktype=\"relative-path\">EndAuthenticateAsClient</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and channel binding. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>targetName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsClient_\" data-linktype=\"relative-path\">EndAuthenticateAsClient</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials and authentication options. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>targetName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsClient_\" data-linktype=\"relative-path\">EndAuthenticateAsClient</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ChannelBinding_System_String_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified credentials, authentication options, and channel binding. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>binding</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.channelbinding\" data-linktype=\"relative-path\">ChannelBinding</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>targetName</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>allowedImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>targetName</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsClient_\" data-linktype=\"relative-path\">EndAuthenticateAsClient</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsServer(AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the server&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> method overloads.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified extended protection policy. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> and <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*</span> on the extended protection policy passed in the <code>policy</code> parameter are both <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>policy</code> parameter was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The authentication uses the server&#39;s <a class=\"xref\" href=\"system.net.credentialcache#System_Net_CredentialCache_DefaultCredentials_\" data-linktype=\"relative-path\">DefaultCredentials</a>. No Service Principal Name (SPN) is specified for the server. The impersonation level is <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, the security level is <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a>.  </p>\n<p> If the <code>policy</code> parameter is <code>null</code>, then an extended protection policy is used that has <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> method overloads.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_Net_NetworkCredential_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials and authentication options. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>requiredImpersonationLevel</code> must be <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, or <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>,</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that, the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsServer_\" data-linktype=\"relative-path\">EndAuthenticateAsServer</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_System_Net_NetworkCredential_System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_System_Net_Security_ProtectionLevel_System_Security_Principal_TokenImpersonationLevel_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection. The authentication process uses the specified server credentials, authentication options, and extended protection policy. This method does not block.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>credential</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.net.networkcredential\" data-linktype=\"relative-path\">NetworkCredential</a> that is used to establish the identity of the client.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>policy</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy\" data-linktype=\"relative-path\">ExtendedProtectionPolicy</a> that is used for extended protection.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredProtectionLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> values, indicating the security services for the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>requiredImpersonationLevel</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>One of the <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a> values, indicating how the server can use the client&#39;s credentials to access resources.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the authentication is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*</span> and <span class=\"xref\">stem.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames*</span> on the extended protection policy passed in the <code>policy</code> parameter are both <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>credential</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></div>\r\n                  </div>\r\n                  <p><code>requiredImpersonationLevel</code> must be <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>, or <a class=\"xref\" href=\"system.security.principal.tokenimpersonationlevel\" data-linktype=\"relative-path\">TokenImpersonationLevel</a>,</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has already occurred.  </p>\n<p> - or -  </p>\n<p> This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Windows 95 and Windows 98 are not supported.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.platformnotsupportedexception\" data-linktype=\"relative-path\">PlatformNotSupportedException</a></div>\r\n                  </div>\r\n                  <p>The <code>policy</code> parameter was set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a> on a platform that does not support extended protection.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Use the <code>requiredProtectionLevel</code> parameter to request security services for data transmitted using the authenticated stream. For example, to have the data encrypted and signed, specify the <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> value. Successful authentication does not guarantee that, the requested <a class=\"xref\" href=\"system.net.security.protectionlevel\" data-linktype=\"relative-path\">ProtectionLevel</a> has been granted. You must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<p> If the <code>policy</code> parameter is <code>null</code>, then an extended protection policy is used that has <a class=\"xref\" href=\"system.security.authentication.extendedprotection.extendedprotectionpolicy#System_Security_Authentication_ExtendedProtection_ExtendedProtectionPolicy_PolicyEnforcement_\" data-linktype=\"relative-path\">PolicyEnforcement</a> set to <a class=\"xref\" href=\"system.security.authentication.extendedprotection.policyenforcement\" data-linktype=\"relative-path\">PolicyEnforcement</a>.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> method overloads.  </p>\n<p> The asynchronous authentication operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndAuthenticateAsServer_\" data-linktype=\"relative-path\">EndAuthenticateAsServer</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginRead_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that receives the bytes read from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based location in <code>buffer</code> at which to begin storing the data read from this stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The maximum number of bytes to read from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the read operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the read operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>offset</code> is less than 0.  </p>\n<p> - or -  </p>\n<p> <code>offset</code> is greater than the length of <code>buffer</code>.  </p>\n<p> - or -  </p>\n<p> <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The read operation failed.  </p>\n<p> - or -  </p>\n<p> Encryption is in use, but the data could not be decrypted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>There is already a read operation in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has not occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it. If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_Read_\" data-linktype=\"relative-path\">Read</a> method.  </p>\n<p> The asynchronous read operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndRead_\" data-linktype=\"relative-path\">EndRead</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class does not support multiple simultaneous read operations. If you attempt to start a read operation while another read operation is already executing on the same stream, a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception will be thrown.  </p>\n<p> You cannot call this method until you have successfully authenticated. To authenticate, call one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a>, or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoAsyncServer#1\">        public static void AuthenticateClient(TcpClient clientRequest)\n        {\n            NetworkStream stream = clientRequest.GetStream(); \n            // Create the NegotiateStream.\n            NegotiateStream authStream = new NegotiateStream(stream, false); \n            // Save the current client and NegotiateStream instance \n            // in a ClientState object.\n            ClientState cState = new ClientState(authStream, clientRequest);\n            // Listen for the client authentication request.\n            authStream.BeginAuthenticateAsServer (\n                new AsyncCallback(EndAuthenticateCallback),\n                cState\n                );\n            // Wait until the authentication completes.\n            cState.Waiter.WaitOne();\n            cState.Waiter.Reset();\n            authStream.BeginRead(cState.Buffer, 0, cState.Buffer.Length, \n                   new AsyncCallback(EndReadCallback), \n                   cState);\n            cState.Waiter.WaitOne();\n            // Finished with the current client.\n            authStream.Close();\n            clientRequest.Close();\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoAsyncServer#1\">   static void AuthenticateClient( TcpClient^ clientRequest )\n   {\n      NetworkStream^ stream = clientRequest-&gt;GetStream();\n      \n      // Create the NegotiateStream.\n      NegotiateStream^ authStream = gcnew NegotiateStream( stream,false );\n      \n      // Save the current client and NegotiateStream instance \n      // in a ClientState object.\n      ClientState^ cState = gcnew ClientState( authStream,clientRequest );\n      \n      // Listen for the client authentication request.\n      authStream-&gt;BeginAuthenticateAsServer( gcnew AsyncCallback( EndAuthenticateCallback ), cState );\n      \n      // Wait until the authentication completes.\n      cState-&gt;Waiter-&gt;WaitOne();\n      cState-&gt;Waiter-&gt;Reset();\n      authStream-&gt;BeginRead( cState-&gt;Buffer, 0, cState-&gt;Buffer-&gt;Length, gcnew AsyncCallback( EndReadCallback ), cState );\n      cState-&gt;Waiter-&gt;WaitOne();\n      \n      // Finished with the current client.\n      authStream-&gt;Close();\n      clientRequest-&gt;Close();\n   }\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_BeginWrite_System_Byte___System_Int32_System_Int32_System_AsyncCallback_System_Object_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_BeginWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)</div>        \r\n          </div>\r\n    \r\n            <p>Begins an asynchronous write operation that writes <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>s from the specified buffer to the stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that supplies the bytes to be written to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>The zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that specifies the number of bytes to read from <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncCallback</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.asynccallback\" data-linktype=\"relative-path\">AsyncCallback</a> delegate that references the method to invoke when the write operation is complete.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncState</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A user-defined object containing information about the write operation. This object is passed to the <code>asyncCallback</code> delegate when the operation completes.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </div>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> object indicating the status of the asynchronous operation.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>offset is less than 0</code>.  </p>\n<p> - or -  </p>\n<p> <code>offset</code> is greater than the length of <code>buffer</code>.  </p>\n<p> - or -  </p>\n<p> <code>offset</code> plus count is greater than the length of <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The write operation failed.  </p>\n<p> - or -  </p>\n<p> Encryption is in use, but the data could not be encrypted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>There is already a write operation in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has not occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.  </p>\n<p> This method is asynchronous and does not block while the operation completes. To block until the operation completes, use the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_Read_\" data-linktype=\"relative-path\">Read</a> method.  </p>\n<p> The asynchronous read operation must be completed by calling the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_EndWrite_\" data-linktype=\"relative-path\">EndWrite</a> method. Typically, the method is invoked by the <code>asyncCallback</code> delegate. For detailed information about using the asynchronous programming model, see <a href=\"../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>  </p>\n<p> The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception will be thrown.  </p>\n<p> You cannot call this method until you have successfully authenticated. To authenticate, call one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a>, or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates beginning an asynchronous write operation.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclNegoAsyncClient#3\">      // Request authentication.\n      NetworkStream^ clientStream = client-&gt;GetStream();\n      NegotiateStream^ authStream = gcnew NegotiateStream( clientStream,false );\n      \n      // Pass the NegotiateStream as the AsyncState object \n      // so that it is available to the callback delegate.\n      IAsyncResult^ ar = authStream-&gt;BeginAuthenticateAsClient( gcnew AsyncCallback( EndAuthenticateCallback ), authStream );\n      \n      Console::WriteLine( L&quot;Client waiting for authentication...&quot; );\n      \n      // Wait until the result is available.\n      ar-&gt;AsyncWaitHandle-&gt;WaitOne();\n      \n      // Display the properties of the authenticated stream.\n      AuthenticatedStreamReporter::DisplayProperties( authStream );\n      \n      // Send a message to the server.\n      // Encode the test data into a byte array.\n      array&lt;Byte&gt;^message = Encoding::UTF8-&gt;GetBytes( L&quot;Hello from the client.&quot; );\n      ar = authStream-&gt;BeginWrite( message, 0, message-&gt;Length, gcnew AsyncCallback( EndWriteCallback ), authStream );\n      \n</code></pre><pre><code class=\"lang-cs\" name=\"NclNegoAsyncClient#3\">            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream, false); \n            // Pass the NegotiateStream as the AsyncState object \n            // so that it is available to the callback delegate.\n            IAsyncResult ar = authStream.BeginAuthenticateAsClient(\n                new AsyncCallback(EndAuthenticateCallback),\n                authStream\n                );\n            Console.WriteLine(&quot;Client waiting for authentication...&quot;);\n            // Wait until the result is available.\n            ar.AsyncWaitHandle.WaitOne();\n            // Display the properties of the authenticated stream.\n            AuthenticatedStreamReporter.DisplayProperties(authStream);\n            // Send a message to the server.\n            // Encode the test data into a byte array.\n            byte[] message = Encoding.UTF8.GetBytes(&quot;Hello from the client.&quot;);\n            ar = authStream.BeginWrite(message, 0, message.Length,\n                new AsyncCallback(EndWriteCallback),\n                authStream);\n</code></pre><p> The following method is called when the operation completes.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclNegoAsyncClient#4\">   // The following method is called when the write operation completes.\n   static void EndWriteCallback( IAsyncResult^ ar )\n   {\n      Console::WriteLine( L&quot;Client ending write operation...&quot; );\n      NegotiateStream^ authStream = dynamic_cast&lt;NegotiateStream^&gt;(ar-&gt;AsyncState);\n      \n      // End the asynchronous operation.\n      authStream-&gt;EndWrite( ar );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NclNegoAsyncClient#4\">        // The following method is called when the write operation completes.\n        public static void EndWriteCallback (IAsyncResult ar)\n        {\n            Console.WriteLine(&quot;Client ending write operation...&quot;);\n            NegotiateStream authStream = (NegotiateStream) ar.AsyncState;\n\n            // End the asynchronous operation.\n            authStream.EndWrite(ar);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Dispose_System_Boolean_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Dispose_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Dispose(Boolean)</div>        \r\n          </div>\r\n    \r\n            <p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> and optionally releases the managed resources.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">protected override void Dispose (bool disposing);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>disposing</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method is called by the public <code>Dispose()</code>method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_EndAuthenticateAsClient_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_EndAuthenticateAsClient_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndAuthenticateAsClient(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends a pending asynchronous client authentication operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsClient*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsClient*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not created by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsClient*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no pending client authentication to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation has not completed, this method blocks until it does. When the authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.  </p>\n<p> To perform this operation synchronously, use one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_EndAuthenticateAsServer_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_EndAuthenticateAsServer_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndAuthenticateAsServer(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends a pending asynchronous client authentication operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsServer*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsServer*</span>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> was not created by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginAuthenticateAsServer*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a></div>\r\n                  </div>\r\n                  <p>The authentication failed. You can use this object to retry the authentication.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>There is no pending authentication to complete.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation has not completed, this method blocks until it does.  </p>\n<p> When authentication succeeds, you must check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsEncrypted_\" data-linktype=\"relative-path\">IsEncrypted</a> and <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsSigned_\" data-linktype=\"relative-path\">IsSigned</a> properties to determine what security services are used by the <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>. Check the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_IsMutuallyAuthenticated_\" data-linktype=\"relative-path\">IsMutuallyAuthenticated</a> property to determine whether mutual authentication occurred.  </p>\n<p> If the authentication fails, you receive an <a class=\"xref\" href=\"system.security.authentication.authenticationexception\" data-linktype=\"relative-path\">AuthenticationException</a> or an <a class=\"xref\" href=\"system.security.authentication.invalidcredentialexception\" data-linktype=\"relative-path\">InvalidCredentialException</a>. In this case, you can retry the authentication with a different credential.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a> method.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_EndRead_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_EndRead_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndRead(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous read operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginRead*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int EndRead (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginRead*</span></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that specifies the number of bytes read from the underlying stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The asyncResult was not created by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginRead*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has not occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The read operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation has not completed, this method blocks until it does.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_Read_\" data-linktype=\"relative-path\">Read</a> method.  </p>\n<p> You cannot call this method until you have successfully authenticated. To authenticate, call one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a>, or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginRead_\" data-linktype=\"relative-path\">BeginRead</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoAsyncServer#3\">        public static void EndReadCallback(IAsyncResult ar)\n        {\n            // Get the saved data.\n            ClientState cState = (ClientState) ar.AsyncState;\n            TcpClient clientRequest = cState.Client;\n            NegotiateStream authStream = (NegotiateStream) cState.AuthenticatedStream; \n            // Get the buffer that stores the message sent by the client.\n            int bytes = -1;\n            // Read the client message.\n            try\n            {\n                    bytes = authStream.EndRead(ar);\n                    cState.Message.Append(Encoding.UTF8.GetChars(cState.Buffer, 0, bytes));\n                    if (bytes != 0)\n                    {\n                         authStream.BeginRead(cState.Buffer, 0, cState.Buffer.Length, \n                               new AsyncCallback(EndReadCallback), \n                               cState);\n                               return;\n                 }\n            }\n            catch (Exception e)\n            {\n                // A real application should do something\n                // useful here, such as logging the failure.\n                Console.WriteLine(&quot;Client message exception:&quot;);\n                Console.WriteLine(e);\n                cState.Waiter.Set();\n                return;\n            }\n            IIdentity id = authStream.RemoteIdentity;\n            Console.WriteLine(&quot;{0} says {1}&quot;, id.Name, cState.Message.ToString());\n            cState.Waiter.Set();\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoAsyncServer#3\">   static void EndReadCallback( IAsyncResult^ ar )\n   {\n      \n      // Get the saved data.\n      ClientState^ cState = dynamic_cast&lt;ClientState^&gt;(ar-&gt;AsyncState);\n      TcpClient^ clientRequest = cState-&gt;Client;\n      NegotiateStream^ authStream = dynamic_cast&lt;NegotiateStream^&gt;(cState-&gt;AuthStream);\n      \n      // Get the buffer that stores the message sent by the client.\n      int bytes = -1;\n      \n      // Read the client message.\n      try\n      {\n         bytes = authStream-&gt;EndRead( ar );\n         cState-&gt;Message-&gt;Append( Encoding::UTF8-&gt;GetChars( cState-&gt;Buffer, 0, bytes ) );\n         if ( bytes != 0 )\n         {\n            authStream-&gt;BeginRead( cState-&gt;Buffer, 0, cState-&gt;Buffer-&gt;Length, gcnew AsyncCallback( EndReadCallback ), cState );\n            return;\n         }\n      }\n      catch ( Exception^ e ) \n      {\n         \n         // A real application should do something\n         // useful here, such as logging the failure.\n         Console::WriteLine( L&quot;Client message exception:&quot; );\n         Console::WriteLine( e );\n         cState-&gt;Waiter-&gt;Set();\n         return;\n      }\n\n      IIdentity^ id = authStream-&gt;RemoteIdentity;\n      Console::WriteLine( L&quot;{0} says {1}&quot;, id-&gt;Name, cState-&gt;Message );\n      cState-&gt;Waiter-&gt;Set();\n   }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_EndWrite_System_IAsyncResult_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_EndWrite_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">EndWrite(IAsyncResult)</div>        \r\n          </div>\r\n    \r\n            <p>Ends an asynchronous write operation that was started with a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginWrite*</span>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void EndWrite (IAsyncResult asyncResult);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>asyncResult</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> instance returned by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginWrite*</span></p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>asyncResult</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p>The asyncResult was not created by a call to <span class=\"xref\">stem.Net.Security.NegotiateStream.BeginWrite*</span>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has not occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The write operation failed.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If the operation has not completed, this method blocks until it does.  </p>\n<p> You cannot call this method until you have successfully authenticated. To authenticate, call one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a>, or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.  </p>\n<p> To perform this operation synchronously, use the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_Write_\" data-linktype=\"relative-path\">Write</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginWrite_\" data-linktype=\"relative-path\">BeginWrite</a>.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclNegoAsyncClient#4\">   // The following method is called when the write operation completes.\n   static void EndWriteCallback( IAsyncResult^ ar )\n   {\n      Console::WriteLine( L&quot;Client ending write operation...&quot; );\n      NegotiateStream^ authStream = dynamic_cast&lt;NegotiateStream^&gt;(ar-&gt;AsyncState);\n      \n      // End the asynchronous operation.\n      authStream-&gt;EndWrite( ar );\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"NclNegoAsyncClient#4\">        // The following method is called when the write operation completes.\n        public static void EndWriteCallback (IAsyncResult ar)\n        {\n            Console.WriteLine(&quot;Client ending write operation...&quot;);\n            NegotiateStream authStream = (NegotiateStream) ar.AsyncState;\n\n            // End the asynchronous operation.\n            authStream.EndWrite(ar);\n        }\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Flush\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Flush_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Flush()</div>        \r\n          </div>\r\n    \r\n            <p>Causes any buffered data to be written to the underlying device.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Flush ();</code></pre>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>This method invokes <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Flush_\" data-linktype=\"relative-path\">Flush</a> on the underlying stream.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates flushing the stream.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#4\">        public static void Main(String[] args)  \n        {\n            // Establish the remote endpoint for the socket.\n            // For this example, use the local machine.\n            IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());\n            IPAddress ipAddress = ipHostInfo.AddressList[0];\n            // Client and server use port 11000. \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress,11000);\n            // Create a TCP/IP socket.\n           TcpClient client = new TcpClient();\n            // Connect the socket to the remote endpoint.\n            client.Connect(remoteEP);\n            Console.WriteLine(&quot;Client connected to {0}.&quot;,\n                remoteEP.ToString());\n            // Ensure the client does not close when there is \n            // still data to be sent to the server.\n            client.LingerState = (new LingerOption(true,0));\n            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream); \n            // Request authentication for the client only (no mutual authentication).\n            // Authenicate using the client&#39;s default credetials.\n            // Permit the server to impersonate the client to access resources on the server only.\n            // Request that data be transmitted using encryption and data signing.\n            authStream.AuthenticateAsClient(\n                 (NetworkCredential) CredentialCache.DefaultCredentials, \n                 &quot;&quot;,\n                 ProtectionLevel.EncryptAndSign,\n                 TokenImpersonationLevel.Impersonation);\n            DisplayAuthenticationProperties(authStream);\n            DisplayStreamProperties(authStream);\n            if (authStream.CanWrite)\n            {\n                 // Encode the test data into a byte array.\n                byte[] message = System.Text.Encoding.UTF8.GetBytes(&quot;Hello from the client.&quot;);\n                authStream.Write(message, 0, message.Length);\n          authStream.Flush();\n                Console.WriteLine(&quot;Sent {0} bytes.&quot;, message.Length);\n         }\n         // Close the client connection.\n            authStream.Close();\n            Console.WriteLine(&quot;Client closed.&quot;);\n            \n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#4\">int main()\n{\n   \n   // Establish the remote endpoint for the socket.\n   // For this example, use the local machine.\n   IPHostEntry^ ipHostInfo = Dns::GetHostEntry( Dns::GetHostName() );\n   IPAddress^ ipAddress = ipHostInfo-&gt;AddressList[ 0 ];\n   \n   // Client and server use port 11000. \n   IPEndPoint^ remoteEP = gcnew IPEndPoint( ipAddress,11000 );\n   \n   // Create a TCP/IP socket.\n   TcpClient^ client = gcnew TcpClient;\n   \n   // Connect the socket to the remote endpoint.\n   client-&gt;Connect( remoteEP );\n   Console::WriteLine( L&quot;Client connected to {0}.&quot;, remoteEP );\n   \n   // Ensure the client does not close when there is \n   // still data to be sent to the server.\n   client-&gt;LingerState = (gcnew LingerOption( true,0 ));\n   \n   // Request authentication.\n   NetworkStream^ clientStream = client-&gt;GetStream();\n   NegotiateStream^ authStream = gcnew NegotiateStream( clientStream );\n   \n   // Request authentication for the client only (no mutual authentication).\n   // Authenicate using the client&#39;s default credetials.\n   // Permit the server to impersonate the client to access resources on the server only.\n   // Request that data be transmitted using encryption and data signing.\n   authStream-&gt;AuthenticateAsClient( dynamic_cast&lt;NetworkCredential^&gt;(CredentialCache::DefaultCredentials), \n          L&quot;&quot;, \n          ProtectionLevel::EncryptAndSign, \n          TokenImpersonationLevel::Impersonation );\n   \n   DisplayAuthenticationProperties( authStream );\n   DisplayStreamProperties( authStream );\n   if ( authStream-&gt;CanWrite )\n   {\n      \n      // Encode the test data into a byte array.\n      array&lt;Byte&gt;^message = System::Text::Encoding::UTF8-&gt;GetBytes( L&quot;Hello from the client.&quot; );\n      authStream-&gt;Write( message, 0, message-&gt;Length );\n      authStream-&gt;Flush();\n      Console::WriteLine( L&quot;Sent {0} bytes.&quot;, message-&gt;Length );\n   }\n\n   \n   // Close the client connection.\n   authStream-&gt;Close();\n   Console::WriteLine( L&quot;Client closed.&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Read_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Read_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Read(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Reads data from this stream and stores it in the specified array.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override int Read (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that receives the bytes read from the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> containing the zero-based location in <code>buffer</code> at which to begin storing the data read from this stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> containing the maximum number of bytes to read from the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </div>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The read operation failed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has not occurred.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>A Read operation is already in progress.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>The method reads a maximum of <code>count</code> bytes from the current stream and stores them in <code>buffer</code> beginning at <code>offset</code>.  </p>\n<p> You cannot call this method until you have successfully authenticated. To authenticate, call one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a>, or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.  </p>\n<p> To perform this operation asynchronously, use the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginRead_\" data-linktype=\"relative-path\">BeginRead</a> method.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates reading from a <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncServer#1\">        public static void AuthenticateClient(TcpClient clientRequest)\n        {\n            NetworkStream stream = clientRequest.GetStream(); \n            // Create the NegotiateStream.\n            NegotiateStream authStream = new NegotiateStream(stream, false);\n            // Perform the server side of the authentication.\n            authStream.AuthenticateAsServer();\n            // Display properties of the authenticated client.\n            IIdentity id = authStream.RemoteIdentity;\n            Console.WriteLine(&quot;{0} was authenticated using {1}.&quot;, \n                id.Name, \n                id.AuthenticationType\n                );\n            // Read a message from the client.\n            byte [] buffer = new byte[2048];\n            int charLength = authStream.Read(buffer, 0, buffer.Length);\n            string messageData = new String(Encoding.UTF8.GetChars(buffer, 0, buffer.Length));\n           \n            Console.WriteLine(&quot;READ {0}&quot;, messageData);\n            // Finished with the current client.\n            authStream.Close(); \n            // Close the client connection.\n            clientRequest.Close();\n        }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncServer#1\">static void AuthenticateClient( TcpClient^ clientRequest )\n{\n   NetworkStream^ stream = clientRequest-&gt;GetStream();\n   \n   // Create the NegotiateStream.\n   NegotiateStream^ authStream = gcnew NegotiateStream( stream,false );\n   \n   // Perform the server side of the authentication.\n   authStream-&gt;AuthenticateAsServer();\n   \n   // Display properties of the authenticated client.\n   IIdentity^ id = authStream-&gt;RemoteIdentity;\n   Console::WriteLine( L&quot;{0} was authenticated using {1}.&quot;, id-&gt;Name, id-&gt;AuthenticationType );\n   \n   // Read a message from the client.\n   array&lt;Byte&gt;^buffer = gcnew array&lt;Byte&gt;(2048);\n   int charLength = authStream-&gt;Read( buffer, 0, buffer-&gt;Length );\n   String^ messageData = gcnew String( Encoding::UTF8-&gt;GetChars( buffer, 0, buffer-&gt;Length ) );\n   Console::WriteLine( L&quot;READ {0}&quot;, messageData );\n   \n   // Finished with the current client.\n   authStream-&gt;Close();\n   \n   // Close the client connection.\n   clientRequest-&gt;Close();\n}\n\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Seek_System_Int64_System_IO_SeekOrigin_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Seek_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Seek(Int64,SeekOrigin)</div>        \r\n          </div>\r\n    \r\n            <p>Throws <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override long Seek (long offset, System.IO.SeekOrigin origin);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This value is ignored.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>origin</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.seekorigin\" data-linktype=\"relative-path\">SeekOrigin</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>This value is ignored.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n              <h4>Returns</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </div>\r\n                  <p>Always throws a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>Seeking is not supported on <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>Do not call this method. It is inherited, but is not supported by <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.</p>\n\r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_SetLength_System_Int64_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_SetLength_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">SetLength(Int64)</div>        \r\n          </div>\r\n    \r\n            <p>Sets the length of the underlying stream.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void SetLength (long value);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>value</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a> value that specifies the length of the stream.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n    \r\n          \r\n    \r\n    \r\n    \r\n    \r\n        </li>\r\n        <li class=\" enable-platform-filter\" id=\"System_Net_Security_NegotiateStream_Write_System_Byte___System_Int32_System_Int32_\">\r\n    \r\n            <a id=\"System_Net_Security_NegotiateStream_Write_\"></a>\r\n    \r\n    \r\n          <div class=\"memberName\">\r\n            <div class=\"lang-csharp\">Write(Byte[],Int32,Int32)</div>        \r\n          </div>\r\n    \r\n            <p>Write the specified number of <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>s to the underlying stream using the specified buffer and offset.</p>\n\r\n    \r\n            <pre class=\"memberDeclaration\"><code class=\"csharp lang-csharp\">public override void Write (byte[] buffer, int offset, int count);</code></pre>\r\n    \r\n    \r\n              <h4>Parameters</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <dl>\r\n                  <dt>buffer</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a> array that supplies the bytes written to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>offset</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>An <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> containing the zero-based location in <code>buffer</code> at which to begin reading bytes to be written to the stream.</p>\n\r\n                </li>\r\n                <li>\r\n                  <dl>\r\n                  <dt>count</dt>\r\n                  <dd>\r\n                    <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></div>\r\n                  </dd>\r\n                  </dl>\r\n                  <p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> containing the number of bytes to read from <code>buffer</code>.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n    \r\n    \r\n              <h4>Exceptions</h4>\r\n              <ul class=\"memberDetails\">\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></div>\r\n                  </div>\r\n                  <p><code>buffer</code> is <code>null</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></div>\r\n                  </div>\r\n                  <p><code>offset is less than 0</code>.  </p>\n<p> - or -  </p>\n<p> <code>offset</code> is greater than the length of <code>buffer</code>.  </p>\n<p> - or -  </p>\n<p> <code>offset</code> plus count is greater than the length of <code>buffer</code>.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.ioexception\" data-linktype=\"relative-path\">IOException</a></div>\r\n                  </div>\r\n                  <p>The write operation failed.  </p>\n<p> - or -  </p>\n<p> Encryption is in use, but the data could not be encrypted.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></div>\r\n                  </div>\r\n                  <p>There is already a write operation in progress.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.objectdisposedexception\" data-linktype=\"relative-path\">ObjectDisposedException</a></div>\r\n                  </div>\r\n                  <p>This object has been closed.</p>\n\r\n                </li>\r\n                <li>\r\n                  <div class=\"single\">                \r\n                      <div class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></div>\r\n                  </div>\r\n                  <p>Authentication has not occurred.</p>\n\r\n                </li>\r\n              </ul>\r\n    \r\n          \r\n    \r\n            <h4>Remarks</h4>\r\n            <p>If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream. If no security services such as data encryption or signing are in use, this method invokes <a class=\"xref\" href=\"system.io.stream#System_IO_Stream_Write_\" data-linktype=\"relative-path\">Write</a> on the underlying stream.  </p>\n<p> This method blocks while the write operation completes. To prevent blocking while the operation completes, use the Write method.  </p>\n<p> You cannot call this method until you have successfully authenticated. To authenticate, call one of the <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsClient_\" data-linktype=\"relative-path\">AuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsClient_\" data-linktype=\"relative-path\">BeginAuthenticateAsClient</a>, <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_AuthenticateAsServer_\" data-linktype=\"relative-path\">AuthenticateAsServer</a>, or <a class=\"xref\" href=\"system.net.security.negotiatestream#System_Net_Security_NegotiateStream_BeginAuthenticateAsServer_\" data-linktype=\"relative-path\">BeginAuthenticateAsServer</a> methods.  </p>\n<p> The <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a> class does not support multiple simultaneous write operations. If you attempt to start a write operation while another write operation is already executing on the same stream, a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> exception will be thrown.</p>\n\r\n    \r\n            <h4>Example</h4>\r\n            <p>The following code example demonstrates writing to a <a class=\"xref\" href=\"system.net.security.negotiatestream\" data-linktype=\"relative-path\">NegotiateStream</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNegoSyncClient#4\">        public static void Main(String[] args)  \n        {\n            // Establish the remote endpoint for the socket.\n            // For this example, use the local machine.\n            IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());\n            IPAddress ipAddress = ipHostInfo.AddressList[0];\n            // Client and server use port 11000. \n            IPEndPoint remoteEP = new IPEndPoint(ipAddress,11000);\n            // Create a TCP/IP socket.\n           TcpClient client = new TcpClient();\n            // Connect the socket to the remote endpoint.\n            client.Connect(remoteEP);\n            Console.WriteLine(&quot;Client connected to {0}.&quot;,\n                remoteEP.ToString());\n            // Ensure the client does not close when there is \n            // still data to be sent to the server.\n            client.LingerState = (new LingerOption(true,0));\n            // Request authentication.\n            NetworkStream clientStream = client.GetStream();\n            NegotiateStream authStream = new NegotiateStream(clientStream); \n            // Request authentication for the client only (no mutual authentication).\n            // Authenicate using the client&#39;s default credetials.\n            // Permit the server to impersonate the client to access resources on the server only.\n            // Request that data be transmitted using encryption and data signing.\n            authStream.AuthenticateAsClient(\n                 (NetworkCredential) CredentialCache.DefaultCredentials, \n                 &quot;&quot;,\n                 ProtectionLevel.EncryptAndSign,\n                 TokenImpersonationLevel.Impersonation);\n            DisplayAuthenticationProperties(authStream);\n            DisplayStreamProperties(authStream);\n            if (authStream.CanWrite)\n            {\n                 // Encode the test data into a byte array.\n                byte[] message = System.Text.Encoding.UTF8.GetBytes(&quot;Hello from the client.&quot;);\n                authStream.Write(message, 0, message.Length);\n          authStream.Flush();\n                Console.WriteLine(&quot;Sent {0} bytes.&quot;, message.Length);\n         }\n         // Close the client connection.\n            authStream.Close();\n            Console.WriteLine(&quot;Client closed.&quot;);\n            \n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNegoSyncClient#4\">int main()\n{\n   \n   // Establish the remote endpoint for the socket.\n   // For this example, use the local machine.\n   IPHostEntry^ ipHostInfo = Dns::GetHostEntry( Dns::GetHostName() );\n   IPAddress^ ipAddress = ipHostInfo-&gt;AddressList[ 0 ];\n   \n   // Client and server use port 11000. \n   IPEndPoint^ remoteEP = gcnew IPEndPoint( ipAddress,11000 );\n   \n   // Create a TCP/IP socket.\n   TcpClient^ client = gcnew TcpClient;\n   \n   // Connect the socket to the remote endpoint.\n   client-&gt;Connect( remoteEP );\n   Console::WriteLine( L&quot;Client connected to {0}.&quot;, remoteEP );\n   \n   // Ensure the client does not close when there is \n   // still data to be sent to the server.\n   client-&gt;LingerState = (gcnew LingerOption( true,0 ));\n   \n   // Request authentication.\n   NetworkStream^ clientStream = client-&gt;GetStream();\n   NegotiateStream^ authStream = gcnew NegotiateStream( clientStream );\n   \n   // Request authentication for the client only (no mutual authentication).\n   // Authenicate using the client&#39;s default credetials.\n   // Permit the server to impersonate the client to access resources on the server only.\n   // Request that data be transmitted using encryption and data signing.\n   authStream-&gt;AuthenticateAsClient( dynamic_cast&lt;NetworkCredential^&gt;(CredentialCache::DefaultCredentials), \n          L&quot;&quot;, \n          ProtectionLevel::EncryptAndSign, \n          TokenImpersonationLevel::Impersonation );\n   \n   DisplayAuthenticationProperties( authStream );\n   DisplayStreamProperties( authStream );\n   if ( authStream-&gt;CanWrite )\n   {\n      \n      // Encode the test data into a byte array.\n      array&lt;Byte&gt;^message = System::Text::Encoding::UTF8-&gt;GetBytes( L&quot;Hello from the client.&quot; );\n      authStream-&gt;Write( message, 0, message-&gt;Length );\n      authStream-&gt;Flush();\n      Console::WriteLine( L&quot;Sent {0} bytes.&quot;, message-&gt;Length );\n   }\n\n   \n   // Close the client connection.\n   authStream-&gt;Close();\n   Console::WriteLine( L&quot;Client closed.&quot; );\n}\n</code></pre>\r\n    \r\n    \r\n        </li>\r\n      </ul>\r\n    </section>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"fulldocset\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.fulldocset\">\r\n<meta name=\"ref_skeleton_gitcommit\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Security.NegotiateStream.yml\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Security.NegotiateStream.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.AuthenticateAsClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.AuthenticateAsClientAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.AuthenticateAsServer\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.AuthenticateAsServerAsync\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.BeginAuthenticateAsServer\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.BeginRead\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.BeginWrite\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.CanRead\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.CanSeek\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.CanTimeout\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.CanWrite\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.EndAuthenticateAsClient\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.EndAuthenticateAsServer\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.EndRead\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.EndWrite\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Flush\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.ImpersonationLevel\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.IsAuthenticated\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.IsEncrypted\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.IsMutuallyAuthenticated\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.IsServer\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.IsSigned\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Length\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Position\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Read\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.ReadTimeout\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.RemoteIdentity\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Seek\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.SetLength\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.Write\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.NegotiateStream.WriteTimeout\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-01 01:37 AM\">\r\n<meta name=\"document_id\" content=\"a52d6288-4b0d-0044-3c4a-31ae0763b2e6\">\r\n<meta name=\"original_ecmaxml_local_path\" content=\"W:\\vejk\\s\\fulldocset\\xml\\System.Net.Security\\NegotiateStream.xml\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/System.Net.Security/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Security.NegotiateStream\">\r\n","rawMetadata":{"breadcrumb_path":"breadcrumb/toc.json","search.ms_sitename":"Docs","search.ms_docsetname":"fulldocset","version":null,"_op_canonicalUrlPrefix":"https://ppe.docs.microsoft.com/en-us/fulldotnet/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":true,"depot_name":"MSDN.fulldocset","_op_gitRefSkeletonCommitHistory":[{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"use plugin in master","commit_sha":"501959ac03e19ac52a27aa4c6bbeb980f8b11c8c","commit_date":"2017-03-01 09:31:20 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix pointer ref","commit_sha":"76befb0e7f7b41839ec719047e5b39a5981298f3","commit_date":"2017-02-28 15:47:23 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"switch from platform to version","commit_sha":"78cdacb5ca782478af490a6b30c3a2cb2b6b873e","commit_date":"2017-02-28 15:09:51 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update platforms","commit_sha":"39ad5a8919a59afc93a79ac4bd8e07c3b471b37a","commit_date":"2017-02-28 10:38:59 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"checkin yml","commit_sha":"da161b792852497df7140d7768cee2eccd9cb43f","commit_date":"2017-02-28 09:36:15 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"delete ymls","commit_sha":"417c04fd1daf0cb211ec4909020356fc1fe69260","commit_date":"2017-02-27 14:12:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"update latest xml","commit_sha":"1e40a158586a88a698e0cb5342785002a56898b2","commit_date":"2017-02-24 16:20:57 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"add exceptions to reference section","commit_sha":"2f337ac32baa36b4ee4b5d8987b29dba4ce77336","commit_date":"2017-02-24 11:22:25 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"transform see cref and fix paramref format","commit_sha":"3d0ea34483c97ac77f4020a7f294757d67a5c1d4","commit_date":"2017-02-23 10:03:17 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"fix param transform, fix escaped xref","commit_sha":"2af997a764c82488dfa824f1c7bc4d736757d943","commit_date":"2017-02-22 17:04:48 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"convert exceptions","commit_sha":"0a5bf3370731dd35a596c91081e5dc82e2eace3a","commit_date":"2017-02-22 11:54:30 +0800"},{"author_name":"Tianqi Zhang","author_email":"tianzh@microsoft.com","committer_name":"Tianqi Zhang","comitter_email":"tianzh@microsoft.com","message":"remove _yml from url","commit_sha":"f9314af8858edb8c329d223328490093aef4f55f","commit_date":"2017-02-17 15:31:12 +0800"}],"ref_skeleton_gitcommit":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/501959ac03e19ac52a27aa4c6bbeb980f8b11c8c/fulldocset/System.Net.Security.NegotiateStream.yml","original_ref_skeleton_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/System.Net.Security.NegotiateStream.yml","open_to_public_contributors":true,"api_name":["System.Net.Security.NegotiateStream","System.Net.Security.NegotiateStream..ctor","System.Net.Security.NegotiateStream.AuthenticateAsClient","System.Net.Security.NegotiateStream.AuthenticateAsClientAsync","System.Net.Security.NegotiateStream.AuthenticateAsServer","System.Net.Security.NegotiateStream.AuthenticateAsServerAsync","System.Net.Security.NegotiateStream.BeginAuthenticateAsClient","System.Net.Security.NegotiateStream.BeginAuthenticateAsServer","System.Net.Security.NegotiateStream.BeginRead","System.Net.Security.NegotiateStream.BeginWrite","System.Net.Security.NegotiateStream.CanRead","System.Net.Security.NegotiateStream.CanSeek","System.Net.Security.NegotiateStream.CanTimeout","System.Net.Security.NegotiateStream.CanWrite","System.Net.Security.NegotiateStream.Dispose","System.Net.Security.NegotiateStream.EndAuthenticateAsClient","System.Net.Security.NegotiateStream.EndAuthenticateAsServer","System.Net.Security.NegotiateStream.EndRead","System.Net.Security.NegotiateStream.EndWrite","System.Net.Security.NegotiateStream.Flush","System.Net.Security.NegotiateStream.ImpersonationLevel","System.Net.Security.NegotiateStream.IsAuthenticated","System.Net.Security.NegotiateStream.IsEncrypted","System.Net.Security.NegotiateStream.IsMutuallyAuthenticated","System.Net.Security.NegotiateStream.IsServer","System.Net.Security.NegotiateStream.IsSigned","System.Net.Security.NegotiateStream.Length","System.Net.Security.NegotiateStream.Position","System.Net.Security.NegotiateStream.Read","System.Net.Security.NegotiateStream.ReadTimeout","System.Net.Security.NegotiateStream.RemoteIdentity","System.Net.Security.NegotiateStream.Seek","System.Net.Security.NegotiateStream.SetLength","System.Net.Security.NegotiateStream.Write","System.Net.Security.NegotiateStream.WriteTimeout"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Security.NegotiateStream","System::Net::Security::NegotiateStream","System.Net.Security.NegotiateStream.#ctor","System::Net::Security::NegotiateStream::#ctor","System.Net.Security.NegotiateStream.AuthenticateAsClient","System::Net::Security::NegotiateStream::AuthenticateAsClient","System.Net.Security.NegotiateStream.AuthenticateAsClientAsync","System::Net::Security::NegotiateStream::AuthenticateAsClientAsync","System.Net.Security.NegotiateStream.AuthenticateAsServer","System::Net::Security::NegotiateStream::AuthenticateAsServer","System.Net.Security.NegotiateStream.AuthenticateAsServerAsync","System::Net::Security::NegotiateStream::AuthenticateAsServerAsync","System.Net.Security.NegotiateStream.BeginAuthenticateAsClient","System::Net::Security::NegotiateStream::BeginAuthenticateAsClient","System.Net.Security.NegotiateStream.BeginAuthenticateAsServer","System::Net::Security::NegotiateStream::BeginAuthenticateAsServer","System.Net.Security.NegotiateStream.BeginRead","System::Net::Security::NegotiateStream::BeginRead","System.Net.Security.NegotiateStream.BeginWrite","System::Net::Security::NegotiateStream::BeginWrite","System.Net.Security.NegotiateStream.CanRead","System::Net::Security::NegotiateStream::CanRead","System.Net.Security.NegotiateStream.CanSeek","System::Net::Security::NegotiateStream::CanSeek","System.Net.Security.NegotiateStream.CanTimeout","System::Net::Security::NegotiateStream::CanTimeout","System.Net.Security.NegotiateStream.CanWrite","System::Net::Security::NegotiateStream::CanWrite","System.Net.Security.NegotiateStream.Dispose","System::Net::Security::NegotiateStream::Dispose","System.Net.Security.NegotiateStream.EndAuthenticateAsClient","System::Net::Security::NegotiateStream::EndAuthenticateAsClient","System.Net.Security.NegotiateStream.EndAuthenticateAsServer","System::Net::Security::NegotiateStream::EndAuthenticateAsServer","System.Net.Security.NegotiateStream.EndRead","System::Net::Security::NegotiateStream::EndRead","System.Net.Security.NegotiateStream.EndWrite","System::Net::Security::NegotiateStream::EndWrite","System.Net.Security.NegotiateStream.Flush","System::Net::Security::NegotiateStream::Flush","System.Net.Security.NegotiateStream.ImpersonationLevel","System::Net::Security::NegotiateStream::ImpersonationLevel","System.Net.Security.NegotiateStream.IsAuthenticated","System::Net::Security::NegotiateStream::IsAuthenticated","System.Net.Security.NegotiateStream.IsEncrypted","System::Net::Security::NegotiateStream::IsEncrypted","System.Net.Security.NegotiateStream.IsMutuallyAuthenticated","System::Net::Security::NegotiateStream::IsMutuallyAuthenticated","System.Net.Security.NegotiateStream.IsServer","System::Net::Security::NegotiateStream::IsServer","System.Net.Security.NegotiateStream.IsSigned","System::Net::Security::NegotiateStream::IsSigned","System.Net.Security.NegotiateStream.Length","System::Net::Security::NegotiateStream::Length","System.Net.Security.NegotiateStream.Position","System::Net::Security::NegotiateStream::Position","System.Net.Security.NegotiateStream.Read","System::Net::Security::NegotiateStream::Read","System.Net.Security.NegotiateStream.ReadTimeout","System::Net::Security::NegotiateStream::ReadTimeout","System.Net.Security.NegotiateStream.RemoteIdentity","System::Net::Security::NegotiateStream::RemoteIdentity","System.Net.Security.NegotiateStream.Seek","System::Net::Security::NegotiateStream::Seek","System.Net.Security.NegotiateStream.SetLength","System::Net::Security::NegotiateStream::SetLength","System.Net.Security.NegotiateStream.Write","System::Net::Security::NegotiateStream::Write","System.Net.Security.NegotiateStream.WriteTimeout","System::Net::Security::NegotiateStream::WriteTimeout"],"dev_langs":["csharp"],"updated_at":"2017-03-01 01:37 AM","document_id":"a52d6288-4b0d-0044-3c4a-31ae0763b2e6","original_ecmaxml_local_path":"W:\\vejk\\s\\fulldocset\\xml\\System.Net.Security\\NegotiateStream.xml","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/fulldocset/xml/System.Net.Security/NegotiateStream.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"NegotiateStream class | Microsoft Docs","_op_ogTitle":"NegotiateStream class","description":"Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.\n","toc_asset_id":"_splitted/System.Net.Security/toc.json","toc_rel":"_splitted/System.Net.Security/toc.json","source_url":"","ms.assetid":"System.Net.Security.NegotiateStream","canonical_url":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.security.negotiatestream","_op_canonicalUrl":"https://ppe.docs.microsoft.com/en-us/mergedepotdynamic/system.net.security.negotiatestream","fileRelativePath":"System.Net.Security.NegotiateStream.html"},"themesRelativePathToOutputRoot":"_themes/"}